contract main {




// =====================  Runtime code  =====================


#
#  - getSingleDepositAmount(address arg1, address arg2, uint256 arg3, uint256 arg4)
#
const name = 'Pangolin-Resolver-v1', 0

const sub_42bc4651(?) = 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee


function _fallback() payable {
    revert
}

function getDepositAmountNewPool(address arg1, address arg2, uint256 arg3, uint256 arg4) payable {
    require calldata.size - 4 >= 128
    require arg1 == arg1
    require arg2 == arg2
    require ext_code.size(0xe54ca86531e17ef3616d22ca28b0d458b6c89106)
    staticcall 0xe54ca86531e17ef3616d22ca28b0d458b6c89106.factory() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
    require ext_code.size(address(ext_call.return_data[0]))
    if arg1 == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
        if arg2 == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
            staticcall address(ext_call.return_data[0]).getPair(address arg1, address arg2) with:
                    gas gas_remaining wei
                   args 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7, 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            if ext_call.return_data[12 len 20]:
                revert with 0, 'pair-found.'
            require ext_code.size(0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7)
            staticcall 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7.0x313ce567 with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not 10^(-ext_call.return_data[0] + 18):
                require ext_code.size(0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7)
                staticcall 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7.0x313ce567 with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if 10^(-ext_call.return_data[0] + 18):
                    if 10^(-ext_call.return_data[0] + 18):
                        if arg4 * 10^(-ext_call.return_data[0] + 18) / 10^(-ext_call.return_data[0] + 18) != arg4:
                            revert with 0, 'math-not-safe'
                        if 10^18 * arg4 * 10^(-ext_call.return_data[0] + 18) / 10^18 != arg4 * 10^(-ext_call.return_data[0] + 18):
                            revert with 0, 'math-not-safe'
                        if 10^18 * arg4 * 10^(-ext_call.return_data[0] + 18) < 10^18 * arg4 * 10^(-ext_call.return_data[0] + 18):
                            revert with 0, 'math-not-safe'
            else:
                if 10^(-ext_call.return_data[0] + 18):
                    if arg3 * 10^(-ext_call.return_data[0] + 18) / 10^(-ext_call.return_data[0] + 18) != arg3:
                        revert with 0, 'math-not-safe'
                    require ext_code.size(0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7)
                    staticcall 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7.0x313ce567 with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not 10^(-ext_call.return_data[0] + 18):
                        if arg3 * 10^(-ext_call.return_data[0] + 18) / 2 < 0:
                            revert with 0, 'math-not-safe'
                        if arg3 * 10^(-ext_call.return_data[0] + 18):
                            return (arg3 * 10^(-ext_call.return_data[0] + 18) / 2 / arg3 * 10^(-ext_call.return_data[0] + 18))
                    else:
                        if 10^(-ext_call.return_data[0] + 18):
                            if arg4 * 10^(-ext_call.return_data[0] + 18) / 10^(-ext_call.return_data[0] + 18) != arg4:
                                revert with 0, 'math-not-safe'
                            if 10^18 * arg4 * 10^(-ext_call.return_data[0] + 18) / 10^18 != arg4 * 10^(-ext_call.return_data[0] + 18):
                                revert with 0, 'math-not-safe'
                            if (10^18 * arg4 * 10^(-ext_call.return_data[0] + 18)) + (arg3 * 10^(-ext_call.return_data[0] + 18) / 2) < 10^18 * arg4 * 10^(-ext_call.return_data[0] + 18):
                                revert with 0, 'math-not-safe'
                            if arg3 * 10^(-ext_call.return_data[0] + 18):
                                return ((10^18 * arg4 * 10^(-ext_call.return_data[0] + 18)) + (arg3 * 10^(-ext_call.return_data[0] + 18) / 2) / arg3 * 10^(-ext_call.return_data[0] + 18))
        else:
            staticcall address(ext_call.return_data[0]).getPair(address arg1, address arg2) with:
                    gas gas_remaining wei
                   args 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7, arg2
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            if ext_call.return_data[12 len 20]:
                revert with 0, 'pair-found.'
            require ext_code.size(0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7)
            staticcall 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7.0x313ce567 with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not 10^(-ext_call.return_data[0] + 18):
                require ext_code.size(arg2)
                staticcall arg2.0x313ce567 with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if 10^(-ext_call.return_data[0] + 18):
                    if 10^(-ext_call.return_data[0] + 18):
                        if arg4 * 10^(-ext_call.return_data[0] + 18) / 10^(-ext_call.return_data[0] + 18) != arg4:
                            revert with 0, 'math-not-safe'
                        if 10^18 * arg4 * 10^(-ext_call.return_data[0] + 18) / 10^18 != arg4 * 10^(-ext_call.return_data[0] + 18):
                            revert with 0, 'math-not-safe'
                        if 10^18 * arg4 * 10^(-ext_call.return_data[0] + 18) < 10^18 * arg4 * 10^(-ext_call.return_data[0] + 18):
                            revert with 0, 'math-not-safe'
            else:
                if 10^(-ext_call.return_data[0] + 18):
                    if arg3 * 10^(-ext_call.return_data[0] + 18) / 10^(-ext_call.return_data[0] + 18) != arg3:
                        revert with 0, 'math-not-safe'
                    require ext_code.size(arg2)
                    staticcall arg2.0x313ce567 with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not 10^(-ext_call.return_data[0] + 18):
                        if arg3 * 10^(-ext_call.return_data[0] + 18) / 2 < 0:
                            revert with 0, 'math-not-safe'
                        if arg3 * 10^(-ext_call.return_data[0] + 18):
                            return (arg3 * 10^(-ext_call.return_data[0] + 18) / 2 / arg3 * 10^(-ext_call.return_data[0] + 18))
                    else:
                        if 10^(-ext_call.return_data[0] + 18):
                            if arg4 * 10^(-ext_call.return_data[0] + 18) / 10^(-ext_call.return_data[0] + 18) != arg4:
                                revert with 0, 'math-not-safe'
                            if 10^18 * arg4 * 10^(-ext_call.return_data[0] + 18) / 10^18 != arg4 * 10^(-ext_call.return_data[0] + 18):
                                revert with 0, 'math-not-safe'
                            if (10^18 * arg4 * 10^(-ext_call.return_data[0] + 18)) + (arg3 * 10^(-ext_call.return_data[0] + 18) / 2) < 10^18 * arg4 * 10^(-ext_call.return_data[0] + 18):
                                revert with 0, 'math-not-safe'
                            if arg3 * 10^(-ext_call.return_data[0] + 18):
                                return ((10^18 * arg4 * 10^(-ext_call.return_data[0] + 18)) + (arg3 * 10^(-ext_call.return_data[0] + 18) / 2) / arg3 * 10^(-ext_call.return_data[0] + 18))
    else:
        if arg2 == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
            staticcall address(ext_call.return_data[0]).getPair(address arg1, address arg2) with:
                    gas gas_remaining wei
                   args address(arg1), 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            if ext_call.return_data[12 len 20]:
                revert with 0, 'pair-found.'
            require ext_code.size(arg1)
            staticcall arg1.0x313ce567 with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not 10^(-ext_call.return_data[0] + 18):
                require ext_code.size(0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7)
                staticcall 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7.0x313ce567 with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if 10^(-ext_call.return_data[0] + 18):
                    if 10^(-ext_call.return_data[0] + 18):
                        if arg4 * 10^(-ext_call.return_data[0] + 18) / 10^(-ext_call.return_data[0] + 18) != arg4:
                            revert with 0, 'math-not-safe'
                        if 10^18 * arg4 * 10^(-ext_call.return_data[0] + 18) / 10^18 != arg4 * 10^(-ext_call.return_data[0] + 18):
                            revert with 0, 'math-not-safe'
                        if 10^18 * arg4 * 10^(-ext_call.return_data[0] + 18) < 10^18 * arg4 * 10^(-ext_call.return_data[0] + 18):
                            revert with 0, 'math-not-safe'
            else:
                if 10^(-ext_call.return_data[0] + 18):
                    if arg3 * 10^(-ext_call.return_data[0] + 18) / 10^(-ext_call.return_data[0] + 18) != arg3:
                        revert with 0, 'math-not-safe'
                    require ext_code.size(0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7)
                    staticcall 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7.0x313ce567 with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not 10^(-ext_call.return_data[0] + 18):
                        if arg3 * 10^(-ext_call.return_data[0] + 18) / 2 < 0:
                            revert with 0, 'math-not-safe'
                        if arg3 * 10^(-ext_call.return_data[0] + 18):
                            return (arg3 * 10^(-ext_call.return_data[0] + 18) / 2 / arg3 * 10^(-ext_call.return_data[0] + 18))
                    else:
                        if 10^(-ext_call.return_data[0] + 18):
                            if arg4 * 10^(-ext_call.return_data[0] + 18) / 10^(-ext_call.return_data[0] + 18) != arg4:
                                revert with 0, 'math-not-safe'
                            if 10^18 * arg4 * 10^(-ext_call.return_data[0] + 18) / 10^18 != arg4 * 10^(-ext_call.return_data[0] + 18):
                                revert with 0, 'math-not-safe'
                            if (10^18 * arg4 * 10^(-ext_call.return_data[0] + 18)) + (arg3 * 10^(-ext_call.return_data[0] + 18) / 2) < 10^18 * arg4 * 10^(-ext_call.return_data[0] + 18):
                                revert with 0, 'math-not-safe'
                            if arg3 * 10^(-ext_call.return_data[0] + 18):
                                return ((10^18 * arg4 * 10^(-ext_call.return_data[0] + 18)) + (arg3 * 10^(-ext_call.return_data[0] + 18) / 2) / arg3 * 10^(-ext_call.return_data[0] + 18))
        else:
            staticcall address(ext_call.return_data[0]).getPair(address arg1, address arg2) with:
                    gas gas_remaining wei
                   args address(arg1), arg2
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            if ext_call.return_data[12 len 20]:
                revert with 0, 'pair-found.'
            require ext_code.size(arg1)
            staticcall arg1.0x313ce567 with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not 10^(-ext_call.return_data[0] + 18):
                require ext_code.size(arg2)
                staticcall arg2.0x313ce567 with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if 10^(-ext_call.return_data[0] + 18):
                    if 10^(-ext_call.return_data[0] + 18):
                        if arg4 * 10^(-ext_call.return_data[0] + 18) / 10^(-ext_call.return_data[0] + 18) != arg4:
                            revert with 0, 'math-not-safe'
                        if 10^18 * arg4 * 10^(-ext_call.return_data[0] + 18) / 10^18 != arg4 * 10^(-ext_call.return_data[0] + 18):
                            revert with 0, 'math-not-safe'
                        if 10^18 * arg4 * 10^(-ext_call.return_data[0] + 18) < 10^18 * arg4 * 10^(-ext_call.return_data[0] + 18):
                            revert with 0, 'math-not-safe'
            else:
                if 10^(-ext_call.return_data[0] + 18):
                    if arg3 * 10^(-ext_call.return_data[0] + 18) / 10^(-ext_call.return_data[0] + 18) != arg3:
                        revert with 0, 'math-not-safe'
                    require ext_code.size(arg2)
                    staticcall arg2.0x313ce567 with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not 10^(-ext_call.return_data[0] + 18):
                        if arg3 * 10^(-ext_call.return_data[0] + 18) / 2 < 0:
                            revert with 0, 'math-not-safe'
                        if arg3 * 10^(-ext_call.return_data[0] + 18):
                            return (arg3 * 10^(-ext_call.return_data[0] + 18) / 2 / arg3 * 10^(-ext_call.return_data[0] + 18))
                    else:
                        if 10^(-ext_call.return_data[0] + 18):
                            if arg4 * 10^(-ext_call.return_data[0] + 18) / 10^(-ext_call.return_data[0] + 18) != arg4:
                                revert with 0, 'math-not-safe'
                            if 10^18 * arg4 * 10^(-ext_call.return_data[0] + 18) / 10^18 != arg4 * 10^(-ext_call.return_data[0] + 18):
                                revert with 0, 'math-not-safe'
                            if (10^18 * arg4 * 10^(-ext_call.return_data[0] + 18)) + (arg3 * 10^(-ext_call.return_data[0] + 18) / 2) < 10^18 * arg4 * 10^(-ext_call.return_data[0] + 18):
                                revert with 0, 'math-not-safe'
                            if arg3 * 10^(-ext_call.return_data[0] + 18):
                                return ((10^18 * arg4 * 10^(-ext_call.return_data[0] + 18)) + (arg3 * 10^(-ext_call.return_data[0] + 18) / 2) / arg3 * 10^(-ext_call.return_data[0] + 18))
    revert
}

function getBuyAmount(address arg1, address arg2, uint256 arg3, uint256 arg4) payable {
    require calldata.size - 4 >= 128
    require arg1 == arg1
    require arg2 == arg2
    mem[96] = 2
    if arg1 == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
        if arg2 == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
            mem[128] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7
            mem[160] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7
            mem[192] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
            mem[196] = arg3
            mem[228] = 64
            mem[260] = 2
            idx = 0
            s = 292
            t = 128
            while idx < 2:
                mem[s] = mem[t + 12 len 20]
                idx = idx + 1
                s = s + 32
                t = t + 32
                continue 
            require ext_code.size(0xe54ca86531e17ef3616d22ca28b0d458b6c89106)
            staticcall 0xe54ca86531e17ef3616d22ca28b0d458b6c89106.getAmountsOut(uint256 arg1, address[] arg2) with:
                    gas gas_remaining wei
                   args arg3, Array(len=2, data=mem[292 len 64])
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            mem[192 len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = ceil32(return_data.size) + 192
            require return_data.size >= 32
            _261 = mem[192 len 4], Mask(224, 32, arg3) >> 32
            require mem[192 len 4], Mask(224, 32, arg3) >> 32 <= test266151307()
            require return_data.size + 192 > mem[192 len 4], Mask(224, 32, arg3) >> 32 + 223
            _265 = mem[mem[192 len 4], Mask(224, 32, arg3) >> 32 + 192]
            require mem[mem[192 len 4], Mask(224, 32, arg3) >> 32 + 192] <= test266151307()
            require (32 * mem[mem[192 len 4], Mask(224, 32, arg3) >> 32 + 192]) + 32 >= 0 and ceil32(return_data.size) + (32 * mem[mem[192 len 4], Mask(224, 32, arg3) >> 32 + 192]) + 224 <= test266151307()
            mem[64] = ceil32(return_data.size) + (32 * mem[mem[192 len 4], Mask(224, 32, arg3) >> 32 + 192]) + 224
            mem[ceil32(return_data.size) + 192] = mem[mem[192 len 4], Mask(224, 32, arg3) >> 32 + 192]
            require return_data.size >= _261 + (32 * _265) + 32
            mem[ceil32(return_data.size) + 224 len 32 * _265] = mem[_261 + 224 len 32 * _265]
            require 1 < _265
            _485 = mem[ceil32(return_data.size) + 256]
            require ext_code.size(0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7)
            staticcall 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7.0x313ce567 with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _497 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _501 = mem[_497]
            if not 10^(-mem[_497] + 18):
                require ext_code.size(0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7)
                staticcall 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7.0x313ce567 with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _521 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                require 10^(-mem[_521] + 18)
                require 10^(-mem[_521] + 18)
                if _485 * 10^(-mem[_521] + 18) / 10^(-mem[_521] + 18) != _485:
                    revert with 0, 'math-not-safe'
                if 10^18 * _485 * 10^(-mem[_521] + 18) / 10^18 != _485 * 10^(-mem[_521] + 18):
                    revert with 0, 'math-not-safe'
                require 10^18 * _485 * 10^(-mem[_521] + 18) < 10^18 * _485 * 10^(-mem[_521] + 18)
                revert with 0, 'math-not-safe'
            require 10^(-mem[_497] + 18)
            if arg3 * 10^(-mem[_497] + 18) / 10^(-mem[_497] + 18) != arg3:
                revert with 0, 'math-not-safe'
            require ext_code.size(0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7)
            staticcall 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7.0x313ce567 with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _534 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            if not 10^(-mem[_534] + 18):
                if arg3 * 10^(-_501 + 18) / 2 < 0:
                    revert with 0, 'math-not-safe'
                require arg3 * 10^(-_501 + 18)
                if -arg4 + 10^18 > 10^18:
                    return _485, 0
                if not -arg4 + 10^18:
                    return _485, 0
                require -arg4 + 10^18
                if (10^18 * arg3 * 10^(-_501 + 18) / 2 / arg3 * 10^(-_501 + 18)) - (arg4 * arg3 * 10^(-_501 + 18) / 2 / arg3 * 10^(-_501 + 18)) / -arg4 + 10^18 != arg3 * 10^(-_501 + 18) / 2 / arg3 * 10^(-_501 + 18):
                    revert with 0, 'math-not-safe'
                return _485, 
                       (10^18 * arg3 * 10^(-_501 + 18) / 2 / arg3 * 10^(-_501 + 18)) + (-1 * arg4 * arg3 * 10^(-_501 + 18) / 2 / arg3 * 10^(-_501 + 18)) + 5 * 10^17 / 10^18
            require 10^(-mem[_534] + 18)
            if _485 * 10^(-mem[_534] + 18) / 10^(-mem[_534] + 18) != _485:
                revert with 0, 'math-not-safe'
            if 10^18 * _485 * 10^(-mem[_534] + 18) / 10^18 != _485 * 10^(-mem[_534] + 18):
                revert with 0, 'math-not-safe'
            if (10^18 * _485 * 10^(-mem[_534] + 18)) + (arg3 * 10^(-_501 + 18) / 2) < 10^18 * _485 * 10^(-mem[_534] + 18):
                revert with 0, 'math-not-safe'
            require arg3 * 10^(-_501 + 18)
            if -arg4 + 10^18 > 10^18:
                return _485, 0
            if not -arg4 + 10^18:
                return _485, 0
            require -arg4 + 10^18
            if (10^18 * (10^18 * _485 * 10^(-mem[_534] + 18)) + (arg3 * 10^(-_501 + 18) / 2) / arg3 * 10^(-_501 + 18)) - (arg4 * (10^18 * _485 * 10^(-mem[_534] + 18)) + (arg3 * 10^(-_501 + 18) / 2) / arg3 * 10^(-_501 + 18)) / -arg4 + 10^18 != (10^18 * _485 * 10^(-mem[_534] + 18)) + (arg3 * 10^(-_501 + 18) / 2) / arg3 * 10^(-_501 + 18):
                revert with 0, 'math-not-safe'
            return _485, 
                   (10^18 * (10^18 * _485 * 10^(-mem[_534] + 18)) + (arg3 * 10^(-_501 + 18) / 2) / arg3 * 10^(-_501 + 18)) + (-1 * arg4 * (10^18 * _485 * 10^(-mem[_534] + 18)) + (arg3 * 10^(-_501 + 18) / 2) / arg3 * 10^(-_501 + 18)) + 5 * 10^17 / 10^18
        mem[128] = arg2
        mem[160] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7
        mem[192] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
        mem[196] = arg3
        mem[228] = 64
        mem[260] = 2
        idx = 0
        s = 292
        t = 128
        while idx < 2:
            mem[s] = mem[t + 12 len 20]
            idx = idx + 1
            s = s + 32
            t = t + 32
            continue 
        require ext_code.size(0xe54ca86531e17ef3616d22ca28b0d458b6c89106)
        staticcall 0xe54ca86531e17ef3616d22ca28b0d458b6c89106.getAmountsOut(uint256 arg1, address[] arg2) with:
                gas gas_remaining wei
               args arg3, Array(len=2, data=mem[292 len 64])
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        mem[192 len return_data.size] = ext_call.return_data[0 len return_data.size]
        mem[64] = ceil32(return_data.size) + 192
        require return_data.size >= 32
        _262 = mem[192 len 4], Mask(224, 32, arg3) >> 32
        require mem[192 len 4], Mask(224, 32, arg3) >> 32 <= test266151307()
        require return_data.size + 192 > mem[192 len 4], Mask(224, 32, arg3) >> 32 + 223
        _266 = mem[mem[192 len 4], Mask(224, 32, arg3) >> 32 + 192]
        require mem[mem[192 len 4], Mask(224, 32, arg3) >> 32 + 192] <= test266151307()
        require (32 * mem[mem[192 len 4], Mask(224, 32, arg3) >> 32 + 192]) + 32 >= 0 and ceil32(return_data.size) + (32 * mem[mem[192 len 4], Mask(224, 32, arg3) >> 32 + 192]) + 224 <= test266151307()
        mem[64] = ceil32(return_data.size) + (32 * mem[mem[192 len 4], Mask(224, 32, arg3) >> 32 + 192]) + 224
        mem[ceil32(return_data.size) + 192] = mem[mem[192 len 4], Mask(224, 32, arg3) >> 32 + 192]
        require return_data.size >= _262 + (32 * _266) + 32
        mem[ceil32(return_data.size) + 224 len 32 * _266] = mem[_262 + 224 len 32 * _266]
        require 1 < _266
        _486 = mem[ceil32(return_data.size) + 256]
        require ext_code.size(arg2)
        staticcall arg2.0x313ce567 with:
                gas gas_remaining wei
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _498 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        _502 = mem[_498]
        if not 10^(-mem[_498] + 18):
            require ext_code.size(0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7)
            staticcall 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7.0x313ce567 with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _524 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            require 10^(-mem[_524] + 18)
            require 10^(-mem[_524] + 18)
            if _486 * 10^(-mem[_524] + 18) / 10^(-mem[_524] + 18) != _486:
                revert with 0, 'math-not-safe'
            if 10^18 * _486 * 10^(-mem[_524] + 18) / 10^18 != _486 * 10^(-mem[_524] + 18):
                revert with 0, 'math-not-safe'
            require 10^18 * _486 * 10^(-mem[_524] + 18) < 10^18 * _486 * 10^(-mem[_524] + 18)
            revert with 0, 'math-not-safe'
        require 10^(-mem[_498] + 18)
        if arg3 * 10^(-mem[_498] + 18) / 10^(-mem[_498] + 18) != arg3:
            revert with 0, 'math-not-safe'
        require ext_code.size(0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7)
        staticcall 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7.0x313ce567 with:
                gas gas_remaining wei
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _536 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        if not 10^(-mem[_536] + 18):
            if arg3 * 10^(-_502 + 18) / 2 < 0:
                revert with 0, 'math-not-safe'
            require arg3 * 10^(-_502 + 18)
            if -arg4 + 10^18 > 10^18:
                return _486, 0
            if not -arg4 + 10^18:
                return _486, 0
            require -arg4 + 10^18
            if (10^18 * arg3 * 10^(-_502 + 18) / 2 / arg3 * 10^(-_502 + 18)) - (arg4 * arg3 * 10^(-_502 + 18) / 2 / arg3 * 10^(-_502 + 18)) / -arg4 + 10^18 != arg3 * 10^(-_502 + 18) / 2 / arg3 * 10^(-_502 + 18):
                revert with 0, 'math-not-safe'
            return _486, 
                   (10^18 * arg3 * 10^(-_502 + 18) / 2 / arg3 * 10^(-_502 + 18)) + (-1 * arg4 * arg3 * 10^(-_502 + 18) / 2 / arg3 * 10^(-_502 + 18)) + 5 * 10^17 / 10^18
        require 10^(-mem[_536] + 18)
        if _486 * 10^(-mem[_536] + 18) / 10^(-mem[_536] + 18) != _486:
            revert with 0, 'math-not-safe'
        if 10^18 * _486 * 10^(-mem[_536] + 18) / 10^18 != _486 * 10^(-mem[_536] + 18):
            revert with 0, 'math-not-safe'
        if (10^18 * _486 * 10^(-mem[_536] + 18)) + (arg3 * 10^(-_502 + 18) / 2) < 10^18 * _486 * 10^(-mem[_536] + 18):
            revert with 0, 'math-not-safe'
        require arg3 * 10^(-_502 + 18)
        if -arg4 + 10^18 > 10^18:
            return _486, 0
        if not -arg4 + 10^18:
            return _486, 0
        require -arg4 + 10^18
        if (10^18 * (10^18 * _486 * 10^(-mem[_536] + 18)) + (arg3 * 10^(-_502 + 18) / 2) / arg3 * 10^(-_502 + 18)) - (arg4 * (10^18 * _486 * 10^(-mem[_536] + 18)) + (arg3 * 10^(-_502 + 18) / 2) / arg3 * 10^(-_502 + 18)) / -arg4 + 10^18 != (10^18 * _486 * 10^(-mem[_536] + 18)) + (arg3 * 10^(-_502 + 18) / 2) / arg3 * 10^(-_502 + 18):
            revert with 0, 'math-not-safe'
        return _486, 
               (10^18 * (10^18 * _486 * 10^(-mem[_536] + 18)) + (arg3 * 10^(-_502 + 18) / 2) / arg3 * 10^(-_502 + 18)) + (-1 * arg4 * (10^18 * _486 * 10^(-mem[_536] + 18)) + (arg3 * 10^(-_502 + 18) / 2) / arg3 * 10^(-_502 + 18)) + 5 * 10^17 / 10^18
    if arg2 == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
        mem[128] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7
        mem[160] = arg1
        mem[192] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
        mem[196] = arg3
        mem[228] = 64
        mem[260] = 2
        idx = 0
        s = 292
        t = 128
        while idx < 2:
            mem[s] = mem[t + 12 len 20]
            idx = idx + 1
            s = s + 32
            t = t + 32
            continue 
        require ext_code.size(0xe54ca86531e17ef3616d22ca28b0d458b6c89106)
        staticcall 0xe54ca86531e17ef3616d22ca28b0d458b6c89106.getAmountsOut(uint256 arg1, address[] arg2) with:
                gas gas_remaining wei
               args arg3, Array(len=2, data=mem[292 len 64])
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        mem[192 len return_data.size] = ext_call.return_data[0 len return_data.size]
        mem[64] = ceil32(return_data.size) + 192
        require return_data.size >= 32
        _263 = mem[192 len 4], Mask(224, 32, arg3) >> 32
        require mem[192 len 4], Mask(224, 32, arg3) >> 32 <= test266151307()
        require return_data.size + 192 > mem[192 len 4], Mask(224, 32, arg3) >> 32 + 223
        _267 = mem[mem[192 len 4], Mask(224, 32, arg3) >> 32 + 192]
        require mem[mem[192 len 4], Mask(224, 32, arg3) >> 32 + 192] <= test266151307()
        require (32 * mem[mem[192 len 4], Mask(224, 32, arg3) >> 32 + 192]) + 32 >= 0 and ceil32(return_data.size) + (32 * mem[mem[192 len 4], Mask(224, 32, arg3) >> 32 + 192]) + 224 <= test266151307()
        mem[64] = ceil32(return_data.size) + (32 * mem[mem[192 len 4], Mask(224, 32, arg3) >> 32 + 192]) + 224
        mem[ceil32(return_data.size) + 192] = mem[mem[192 len 4], Mask(224, 32, arg3) >> 32 + 192]
        require return_data.size >= _263 + (32 * _267) + 32
        mem[ceil32(return_data.size) + 224 len 32 * _267] = mem[_263 + 224 len 32 * _267]
        require 1 < _267
        _487 = mem[ceil32(return_data.size) + 256]
        require ext_code.size(0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7)
        staticcall 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7.0x313ce567 with:
                gas gas_remaining wei
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _499 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        _503 = mem[_499]
        if not 10^(-mem[_499] + 18):
            require ext_code.size(arg1)
            staticcall arg1.0x313ce567 with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _527 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            require 10^(-mem[_527] + 18)
            require 10^(-mem[_527] + 18)
            if _487 * 10^(-mem[_527] + 18) / 10^(-mem[_527] + 18) != _487:
                revert with 0, 'math-not-safe'
            if 10^18 * _487 * 10^(-mem[_527] + 18) / 10^18 != _487 * 10^(-mem[_527] + 18):
                revert with 0, 'math-not-safe'
            require 10^18 * _487 * 10^(-mem[_527] + 18) < 10^18 * _487 * 10^(-mem[_527] + 18)
            revert with 0, 'math-not-safe'
        require 10^(-mem[_499] + 18)
        if arg3 * 10^(-mem[_499] + 18) / 10^(-mem[_499] + 18) != arg3:
            revert with 0, 'math-not-safe'
        require ext_code.size(arg1)
        staticcall arg1.0x313ce567 with:
                gas gas_remaining wei
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _538 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        if not 10^(-mem[_538] + 18):
            if arg3 * 10^(-_503 + 18) / 2 < 0:
                revert with 0, 'math-not-safe'
            require arg3 * 10^(-_503 + 18)
            if -arg4 + 10^18 > 10^18:
                return _487, 0
            if not -arg4 + 10^18:
                return _487, 0
            require -arg4 + 10^18
            if (10^18 * arg3 * 10^(-_503 + 18) / 2 / arg3 * 10^(-_503 + 18)) - (arg4 * arg3 * 10^(-_503 + 18) / 2 / arg3 * 10^(-_503 + 18)) / -arg4 + 10^18 != arg3 * 10^(-_503 + 18) / 2 / arg3 * 10^(-_503 + 18):
                revert with 0, 'math-not-safe'
            return _487, 
                   (10^18 * arg3 * 10^(-_503 + 18) / 2 / arg3 * 10^(-_503 + 18)) + (-1 * arg4 * arg3 * 10^(-_503 + 18) / 2 / arg3 * 10^(-_503 + 18)) + 5 * 10^17 / 10^18
        require 10^(-mem[_538] + 18)
        if _487 * 10^(-mem[_538] + 18) / 10^(-mem[_538] + 18) != _487:
            revert with 0, 'math-not-safe'
        if 10^18 * _487 * 10^(-mem[_538] + 18) / 10^18 != _487 * 10^(-mem[_538] + 18):
            revert with 0, 'math-not-safe'
        if (10^18 * _487 * 10^(-mem[_538] + 18)) + (arg3 * 10^(-_503 + 18) / 2) < 10^18 * _487 * 10^(-mem[_538] + 18):
            revert with 0, 'math-not-safe'
        require arg3 * 10^(-_503 + 18)
        if -arg4 + 10^18 > 10^18:
            return _487, 0
        if not -arg4 + 10^18:
            return _487, 0
        require -arg4 + 10^18
        if (10^18 * (10^18 * _487 * 10^(-mem[_538] + 18)) + (arg3 * 10^(-_503 + 18) / 2) / arg3 * 10^(-_503 + 18)) - (arg4 * (10^18 * _487 * 10^(-mem[_538] + 18)) + (arg3 * 10^(-_503 + 18) / 2) / arg3 * 10^(-_503 + 18)) / -arg4 + 10^18 != (10^18 * _487 * 10^(-mem[_538] + 18)) + (arg3 * 10^(-_503 + 18) / 2) / arg3 * 10^(-_503 + 18):
            revert with 0, 'math-not-safe'
        return _487, 
               (10^18 * (10^18 * _487 * 10^(-mem[_538] + 18)) + (arg3 * 10^(-_503 + 18) / 2) / arg3 * 10^(-_503 + 18)) + (-1 * arg4 * (10^18 * _487 * 10^(-mem[_538] + 18)) + (arg3 * 10^(-_503 + 18) / 2) / arg3 * 10^(-_503 + 18)) + 5 * 10^17 / 10^18
    mem[128] = arg2
    mem[160] = arg1
    mem[192] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
    mem[196] = arg3
    mem[228] = 64
    mem[260] = 2
    idx = 0
    s = 292
    t = 128
    while idx < 2:
        mem[s] = mem[t + 12 len 20]
        idx = idx + 1
        s = s + 32
        t = t + 32
        continue 
    require ext_code.size(0xe54ca86531e17ef3616d22ca28b0d458b6c89106)
    staticcall 0xe54ca86531e17ef3616d22ca28b0d458b6c89106.getAmountsOut(uint256 arg1, address[] arg2) with:
            gas gas_remaining wei
           args arg3, Array(len=2, data=mem[292 len 64])
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    mem[192 len return_data.size] = ext_call.return_data[0 len return_data.size]
    mem[64] = ceil32(return_data.size) + 192
    require return_data.size >= 32
    _264 = mem[192 len 4], Mask(224, 32, arg3) >> 32
    require mem[192 len 4], Mask(224, 32, arg3) >> 32 <= test266151307()
    require return_data.size + 192 > mem[192 len 4], Mask(224, 32, arg3) >> 32 + 223
    _268 = mem[mem[192 len 4], Mask(224, 32, arg3) >> 32 + 192]
    require mem[mem[192 len 4], Mask(224, 32, arg3) >> 32 + 192] <= test266151307()
    require (32 * mem[mem[192 len 4], Mask(224, 32, arg3) >> 32 + 192]) + 32 >= 0 and ceil32(return_data.size) + (32 * mem[mem[192 len 4], Mask(224, 32, arg3) >> 32 + 192]) + 224 <= test266151307()
    mem[64] = ceil32(return_data.size) + (32 * mem[mem[192 len 4], Mask(224, 32, arg3) >> 32 + 192]) + 224
    mem[ceil32(return_data.size) + 192] = mem[mem[192 len 4], Mask(224, 32, arg3) >> 32 + 192]
    require return_data.size >= _264 + (32 * _268) + 32
    mem[ceil32(return_data.size) + 224 len 32 * _268] = mem[_264 + 224 len 32 * _268]
    require 1 < _268
    _488 = mem[ceil32(return_data.size) + 256]
    require ext_code.size(arg2)
    staticcall arg2.0x313ce567 with:
            gas gas_remaining wei
    mem[mem[64]] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    _500 = mem[64]
    mem[64] = mem[64] + ceil32(return_data.size)
    require return_data.size >= 32
    _504 = mem[_500]
    if not 10^(-mem[_500] + 18):
        require ext_code.size(arg1)
        staticcall arg1.0x313ce567 with:
                gas gas_remaining wei
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _530 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        require 10^(-mem[_530] + 18)
        require 10^(-mem[_530] + 18)
        if _488 * 10^(-mem[_530] + 18) / 10^(-mem[_530] + 18) != _488:
            revert with 0, 'math-not-safe'
        if 10^18 * _488 * 10^(-mem[_530] + 18) / 10^18 != _488 * 10^(-mem[_530] + 18):
            revert with 0, 'math-not-safe'
        require 10^18 * _488 * 10^(-mem[_530] + 18) < 10^18 * _488 * 10^(-mem[_530] + 18)
        revert with 0, 'math-not-safe'
    require 10^(-mem[_500] + 18)
    if arg3 * 10^(-mem[_500] + 18) / 10^(-mem[_500] + 18) != arg3:
        revert with 0, 'math-not-safe'
    require ext_code.size(arg1)
    staticcall arg1.0x313ce567 with:
            gas gas_remaining wei
    mem[mem[64]] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    _540 = mem[64]
    mem[64] = mem[64] + ceil32(return_data.size)
    require return_data.size >= 32
    if not 10^(-mem[_540] + 18):
        if arg3 * 10^(-_504 + 18) / 2 < 0:
            revert with 0, 'math-not-safe'
        require arg3 * 10^(-_504 + 18)
        if -arg4 + 10^18 > 10^18:
            return _488, 0
        if not -arg4 + 10^18:
            return _488, 0
        require -arg4 + 10^18
        if (10^18 * arg3 * 10^(-_504 + 18) / 2 / arg3 * 10^(-_504 + 18)) - (arg4 * arg3 * 10^(-_504 + 18) / 2 / arg3 * 10^(-_504 + 18)) / -arg4 + 10^18 != arg3 * 10^(-_504 + 18) / 2 / arg3 * 10^(-_504 + 18):
            revert with 0, 'math-not-safe'
        return _488, 
               (10^18 * arg3 * 10^(-_504 + 18) / 2 / arg3 * 10^(-_504 + 18)) + (-1 * arg4 * arg3 * 10^(-_504 + 18) / 2 / arg3 * 10^(-_504 + 18)) + 5 * 10^17 / 10^18
    require 10^(-mem[_540] + 18)
    if _488 * 10^(-mem[_540] + 18) / 10^(-mem[_540] + 18) != _488:
        revert with 0, 'math-not-safe'
    if 10^18 * _488 * 10^(-mem[_540] + 18) / 10^18 != _488 * 10^(-mem[_540] + 18):
        revert with 0, 'math-not-safe'
    if (10^18 * _488 * 10^(-mem[_540] + 18)) + (arg3 * 10^(-_504 + 18) / 2) < 10^18 * _488 * 10^(-mem[_540] + 18):
        revert with 0, 'math-not-safe'
    require arg3 * 10^(-_504 + 18)
    if -arg4 + 10^18 > 10^18:
        return _488, 0
    if not -arg4 + 10^18:
        return _488, 0
    require -arg4 + 10^18
    if (10^18 * (10^18 * _488 * 10^(-mem[_540] + 18)) + (arg3 * 10^(-_504 + 18) / 2) / arg3 * 10^(-_504 + 18)) - (arg4 * (10^18 * _488 * 10^(-mem[_540] + 18)) + (arg3 * 10^(-_504 + 18) / 2) / arg3 * 10^(-_504 + 18)) / -arg4 + 10^18 != (10^18 * _488 * 10^(-mem[_540] + 18)) + (arg3 * 10^(-_504 + 18) / 2) / arg3 * 10^(-_504 + 18):
        revert with 0, 'math-not-safe'
    return _488, 
           (10^18 * (10^18 * _488 * 10^(-mem[_540] + 18)) + (arg3 * 10^(-_504 + 18) / 2) / arg3 * 10^(-_504 + 18)) + (-1 * arg4 * (10^18 * _488 * 10^(-mem[_540] + 18)) + (arg3 * 10^(-_504 + 18) / 2) / arg3 * 10^(-_504 + 18)) + 5 * 10^17 / 10^18
}

function getSellAmount(address arg1, address arg2, uint256 arg3, uint256 arg4) payable {
    require calldata.size - 4 >= 128
    require arg1 == arg1
    require arg2 == arg2
    mem[96] = 2
    if arg1 == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
        if arg2 == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
            mem[128] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7
            mem[160] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7
            mem[192] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
            mem[196] = arg3
            mem[228] = 64
            mem[260] = 2
            idx = 0
            s = 292
            t = 128
            while idx < 2:
                mem[s] = mem[t + 12 len 20]
                idx = idx + 1
                s = s + 32
                t = t + 32
                continue 
            require ext_code.size(0xe54ca86531e17ef3616d22ca28b0d458b6c89106)
            staticcall 0xe54ca86531e17ef3616d22ca28b0d458b6c89106.getAmountsIn(uint256 arg1, address[] arg2) with:
                    gas gas_remaining wei
                   args arg3, Array(len=2, data=mem[292 len 64])
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            mem[192 len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = ceil32(return_data.size) + 192
            require return_data.size >= 32
            _261 = mem[192 len 4], Mask(224, 32, arg3) >> 32
            require mem[192 len 4], Mask(224, 32, arg3) >> 32 <= test266151307()
            require return_data.size + 192 > mem[192 len 4], Mask(224, 32, arg3) >> 32 + 223
            _265 = mem[mem[192 len 4], Mask(224, 32, arg3) >> 32 + 192]
            require mem[mem[192 len 4], Mask(224, 32, arg3) >> 32 + 192] <= test266151307()
            require (32 * mem[mem[192 len 4], Mask(224, 32, arg3) >> 32 + 192]) + 32 >= 0 and ceil32(return_data.size) + (32 * mem[mem[192 len 4], Mask(224, 32, arg3) >> 32 + 192]) + 224 <= test266151307()
            mem[64] = ceil32(return_data.size) + (32 * mem[mem[192 len 4], Mask(224, 32, arg3) >> 32 + 192]) + 224
            mem[ceil32(return_data.size) + 192] = mem[mem[192 len 4], Mask(224, 32, arg3) >> 32 + 192]
            require return_data.size >= _261 + (32 * _265) + 32
            mem[ceil32(return_data.size) + 224 len 32 * _265] = mem[_261 + 224 len 32 * _265]
            require 0 < _265
            _485 = mem[ceil32(return_data.size) + 224]
            require ext_code.size(0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7)
            staticcall 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7.0x313ce567 with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _497 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _501 = mem[_497]
            if not 10^(-mem[_497] + 18):
                require ext_code.size(0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7)
                staticcall 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7.0x313ce567 with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _521 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                require 10^(-mem[_521] + 18)
                require 10^(-mem[_521] + 18)
                if _485 * 10^(-mem[_521] + 18) / 10^(-mem[_521] + 18) != _485:
                    revert with 0, 'math-not-safe'
                if 10^18 * _485 * 10^(-mem[_521] + 18) / 10^18 != _485 * 10^(-mem[_521] + 18):
                    revert with 0, 'math-not-safe'
                require 10^18 * _485 * 10^(-mem[_521] + 18) < 10^18 * _485 * 10^(-mem[_521] + 18)
                revert with 0, 'math-not-safe'
            require 10^(-mem[_497] + 18)
            if arg3 * 10^(-mem[_497] + 18) / 10^(-mem[_497] + 18) != arg3:
                revert with 0, 'math-not-safe'
            require ext_code.size(0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7)
            staticcall 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7.0x313ce567 with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _534 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            if not 10^(-mem[_534] + 18):
                if arg3 * 10^(-_501 + 18) / 2 < 0:
                    revert with 0, 'math-not-safe'
                require arg3 * 10^(-_501 + 18)
                if arg4 + 10^18 < 10^18:
                    revert with 0, 'math-not-safe'
                if not arg4 + 10^18:
                    return _485, 0
                require arg4 + 10^18
                if (10^18 * arg3 * 10^(-_501 + 18) / 2 / arg3 * 10^(-_501 + 18)) + (arg4 * arg3 * 10^(-_501 + 18) / 2 / arg3 * 10^(-_501 + 18)) / arg4 + 10^18 != arg3 * 10^(-_501 + 18) / 2 / arg3 * 10^(-_501 + 18):
                    revert with 0, 'math-not-safe'
                return _485, 
                       (10^18 * arg3 * 10^(-_501 + 18) / 2 / arg3 * 10^(-_501 + 18)) + (arg4 * arg3 * 10^(-_501 + 18) / 2 / arg3 * 10^(-_501 + 18)) + 5 * 10^17 / 10^18
            require 10^(-mem[_534] + 18)
            if _485 * 10^(-mem[_534] + 18) / 10^(-mem[_534] + 18) != _485:
                revert with 0, 'math-not-safe'
            if 10^18 * _485 * 10^(-mem[_534] + 18) / 10^18 != _485 * 10^(-mem[_534] + 18):
                revert with 0, 'math-not-safe'
            if (10^18 * _485 * 10^(-mem[_534] + 18)) + (arg3 * 10^(-_501 + 18) / 2) < 10^18 * _485 * 10^(-mem[_534] + 18):
                revert with 0, 'math-not-safe'
            require arg3 * 10^(-_501 + 18)
            if arg4 + 10^18 < 10^18:
                revert with 0, 'math-not-safe'
            if not arg4 + 10^18:
                return _485, 0
            require arg4 + 10^18
            if (10^18 * (10^18 * _485 * 10^(-mem[_534] + 18)) + (arg3 * 10^(-_501 + 18) / 2) / arg3 * 10^(-_501 + 18)) + (arg4 * (10^18 * _485 * 10^(-mem[_534] + 18)) + (arg3 * 10^(-_501 + 18) / 2) / arg3 * 10^(-_501 + 18)) / arg4 + 10^18 != (10^18 * _485 * 10^(-mem[_534] + 18)) + (arg3 * 10^(-_501 + 18) / 2) / arg3 * 10^(-_501 + 18):
                revert with 0, 'math-not-safe'
            return _485, 
                   (10^18 * (10^18 * _485 * 10^(-mem[_534] + 18)) + (arg3 * 10^(-_501 + 18) / 2) / arg3 * 10^(-_501 + 18)) + (arg4 * (10^18 * _485 * 10^(-mem[_534] + 18)) + (arg3 * 10^(-_501 + 18) / 2) / arg3 * 10^(-_501 + 18)) + 5 * 10^17 / 10^18
        mem[128] = arg2
        mem[160] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7
        mem[192] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
        mem[196] = arg3
        mem[228] = 64
        mem[260] = 2
        idx = 0
        s = 292
        t = 128
        while idx < 2:
            mem[s] = mem[t + 12 len 20]
            idx = idx + 1
            s = s + 32
            t = t + 32
            continue 
        require ext_code.size(0xe54ca86531e17ef3616d22ca28b0d458b6c89106)
        staticcall 0xe54ca86531e17ef3616d22ca28b0d458b6c89106.getAmountsIn(uint256 arg1, address[] arg2) with:
                gas gas_remaining wei
               args arg3, Array(len=2, data=mem[292 len 64])
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        mem[192 len return_data.size] = ext_call.return_data[0 len return_data.size]
        mem[64] = ceil32(return_data.size) + 192
        require return_data.size >= 32
        _262 = mem[192 len 4], Mask(224, 32, arg3) >> 32
        require mem[192 len 4], Mask(224, 32, arg3) >> 32 <= test266151307()
        require return_data.size + 192 > mem[192 len 4], Mask(224, 32, arg3) >> 32 + 223
        _266 = mem[mem[192 len 4], Mask(224, 32, arg3) >> 32 + 192]
        require mem[mem[192 len 4], Mask(224, 32, arg3) >> 32 + 192] <= test266151307()
        require (32 * mem[mem[192 len 4], Mask(224, 32, arg3) >> 32 + 192]) + 32 >= 0 and ceil32(return_data.size) + (32 * mem[mem[192 len 4], Mask(224, 32, arg3) >> 32 + 192]) + 224 <= test266151307()
        mem[64] = ceil32(return_data.size) + (32 * mem[mem[192 len 4], Mask(224, 32, arg3) >> 32 + 192]) + 224
        mem[ceil32(return_data.size) + 192] = mem[mem[192 len 4], Mask(224, 32, arg3) >> 32 + 192]
        require return_data.size >= _262 + (32 * _266) + 32
        mem[ceil32(return_data.size) + 224 len 32 * _266] = mem[_262 + 224 len 32 * _266]
        require 0 < _266
        _486 = mem[ceil32(return_data.size) + 224]
        require ext_code.size(0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7)
        staticcall 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7.0x313ce567 with:
                gas gas_remaining wei
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _498 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        _502 = mem[_498]
        if not 10^(-mem[_498] + 18):
            require ext_code.size(arg2)
            staticcall arg2.0x313ce567 with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _524 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            require 10^(-mem[_524] + 18)
            require 10^(-mem[_524] + 18)
            if _486 * 10^(-mem[_524] + 18) / 10^(-mem[_524] + 18) != _486:
                revert with 0, 'math-not-safe'
            if 10^18 * _486 * 10^(-mem[_524] + 18) / 10^18 != _486 * 10^(-mem[_524] + 18):
                revert with 0, 'math-not-safe'
            require 10^18 * _486 * 10^(-mem[_524] + 18) < 10^18 * _486 * 10^(-mem[_524] + 18)
            revert with 0, 'math-not-safe'
        require 10^(-mem[_498] + 18)
        if arg3 * 10^(-mem[_498] + 18) / 10^(-mem[_498] + 18) != arg3:
            revert with 0, 'math-not-safe'
        require ext_code.size(arg2)
        staticcall arg2.0x313ce567 with:
                gas gas_remaining wei
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _536 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        if not 10^(-mem[_536] + 18):
            if arg3 * 10^(-_502 + 18) / 2 < 0:
                revert with 0, 'math-not-safe'
            require arg3 * 10^(-_502 + 18)
            if arg4 + 10^18 < 10^18:
                revert with 0, 'math-not-safe'
            if not arg4 + 10^18:
                return _486, 0
            require arg4 + 10^18
            if (10^18 * arg3 * 10^(-_502 + 18) / 2 / arg3 * 10^(-_502 + 18)) + (arg4 * arg3 * 10^(-_502 + 18) / 2 / arg3 * 10^(-_502 + 18)) / arg4 + 10^18 != arg3 * 10^(-_502 + 18) / 2 / arg3 * 10^(-_502 + 18):
                revert with 0, 'math-not-safe'
            return _486, 
                   (10^18 * arg3 * 10^(-_502 + 18) / 2 / arg3 * 10^(-_502 + 18)) + (arg4 * arg3 * 10^(-_502 + 18) / 2 / arg3 * 10^(-_502 + 18)) + 5 * 10^17 / 10^18
        require 10^(-mem[_536] + 18)
        if _486 * 10^(-mem[_536] + 18) / 10^(-mem[_536] + 18) != _486:
            revert with 0, 'math-not-safe'
        if 10^18 * _486 * 10^(-mem[_536] + 18) / 10^18 != _486 * 10^(-mem[_536] + 18):
            revert with 0, 'math-not-safe'
        if (10^18 * _486 * 10^(-mem[_536] + 18)) + (arg3 * 10^(-_502 + 18) / 2) < 10^18 * _486 * 10^(-mem[_536] + 18):
            revert with 0, 'math-not-safe'
        require arg3 * 10^(-_502 + 18)
        if arg4 + 10^18 < 10^18:
            revert with 0, 'math-not-safe'
        if not arg4 + 10^18:
            return _486, 0
        require arg4 + 10^18
        if (10^18 * (10^18 * _486 * 10^(-mem[_536] + 18)) + (arg3 * 10^(-_502 + 18) / 2) / arg3 * 10^(-_502 + 18)) + (arg4 * (10^18 * _486 * 10^(-mem[_536] + 18)) + (arg3 * 10^(-_502 + 18) / 2) / arg3 * 10^(-_502 + 18)) / arg4 + 10^18 != (10^18 * _486 * 10^(-mem[_536] + 18)) + (arg3 * 10^(-_502 + 18) / 2) / arg3 * 10^(-_502 + 18):
            revert with 0, 'math-not-safe'
        return _486, 
               (10^18 * (10^18 * _486 * 10^(-mem[_536] + 18)) + (arg3 * 10^(-_502 + 18) / 2) / arg3 * 10^(-_502 + 18)) + (arg4 * (10^18 * _486 * 10^(-mem[_536] + 18)) + (arg3 * 10^(-_502 + 18) / 2) / arg3 * 10^(-_502 + 18)) + 5 * 10^17 / 10^18
    if arg2 == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
        mem[128] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7
        mem[160] = arg1
        mem[192] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
        mem[196] = arg3
        mem[228] = 64
        mem[260] = 2
        idx = 0
        s = 292
        t = 128
        while idx < 2:
            mem[s] = mem[t + 12 len 20]
            idx = idx + 1
            s = s + 32
            t = t + 32
            continue 
        require ext_code.size(0xe54ca86531e17ef3616d22ca28b0d458b6c89106)
        staticcall 0xe54ca86531e17ef3616d22ca28b0d458b6c89106.getAmountsIn(uint256 arg1, address[] arg2) with:
                gas gas_remaining wei
               args arg3, Array(len=2, data=mem[292 len 64])
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        mem[192 len return_data.size] = ext_call.return_data[0 len return_data.size]
        mem[64] = ceil32(return_data.size) + 192
        require return_data.size >= 32
        _263 = mem[192 len 4], Mask(224, 32, arg3) >> 32
        require mem[192 len 4], Mask(224, 32, arg3) >> 32 <= test266151307()
        require return_data.size + 192 > mem[192 len 4], Mask(224, 32, arg3) >> 32 + 223
        _267 = mem[mem[192 len 4], Mask(224, 32, arg3) >> 32 + 192]
        require mem[mem[192 len 4], Mask(224, 32, arg3) >> 32 + 192] <= test266151307()
        require (32 * mem[mem[192 len 4], Mask(224, 32, arg3) >> 32 + 192]) + 32 >= 0 and ceil32(return_data.size) + (32 * mem[mem[192 len 4], Mask(224, 32, arg3) >> 32 + 192]) + 224 <= test266151307()
        mem[64] = ceil32(return_data.size) + (32 * mem[mem[192 len 4], Mask(224, 32, arg3) >> 32 + 192]) + 224
        mem[ceil32(return_data.size) + 192] = mem[mem[192 len 4], Mask(224, 32, arg3) >> 32 + 192]
        require return_data.size >= _263 + (32 * _267) + 32
        mem[ceil32(return_data.size) + 224 len 32 * _267] = mem[_263 + 224 len 32 * _267]
        require 0 < _267
        _487 = mem[ceil32(return_data.size) + 224]
        require ext_code.size(arg1)
        staticcall arg1.0x313ce567 with:
                gas gas_remaining wei
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _499 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        _503 = mem[_499]
        if not 10^(-mem[_499] + 18):
            require ext_code.size(0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7)
            staticcall 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7.0x313ce567 with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _527 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            require 10^(-mem[_527] + 18)
            require 10^(-mem[_527] + 18)
            if _487 * 10^(-mem[_527] + 18) / 10^(-mem[_527] + 18) != _487:
                revert with 0, 'math-not-safe'
            if 10^18 * _487 * 10^(-mem[_527] + 18) / 10^18 != _487 * 10^(-mem[_527] + 18):
                revert with 0, 'math-not-safe'
            require 10^18 * _487 * 10^(-mem[_527] + 18) < 10^18 * _487 * 10^(-mem[_527] + 18)
            revert with 0, 'math-not-safe'
        require 10^(-mem[_499] + 18)
        if arg3 * 10^(-mem[_499] + 18) / 10^(-mem[_499] + 18) != arg3:
            revert with 0, 'math-not-safe'
        require ext_code.size(0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7)
        staticcall 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7.0x313ce567 with:
                gas gas_remaining wei
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _538 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        if not 10^(-mem[_538] + 18):
            if arg3 * 10^(-_503 + 18) / 2 < 0:
                revert with 0, 'math-not-safe'
            require arg3 * 10^(-_503 + 18)
            if arg4 + 10^18 < 10^18:
                revert with 0, 'math-not-safe'
            if not arg4 + 10^18:
                return _487, 0
            require arg4 + 10^18
            if (10^18 * arg3 * 10^(-_503 + 18) / 2 / arg3 * 10^(-_503 + 18)) + (arg4 * arg3 * 10^(-_503 + 18) / 2 / arg3 * 10^(-_503 + 18)) / arg4 + 10^18 != arg3 * 10^(-_503 + 18) / 2 / arg3 * 10^(-_503 + 18):
                revert with 0, 'math-not-safe'
            return _487, 
                   (10^18 * arg3 * 10^(-_503 + 18) / 2 / arg3 * 10^(-_503 + 18)) + (arg4 * arg3 * 10^(-_503 + 18) / 2 / arg3 * 10^(-_503 + 18)) + 5 * 10^17 / 10^18
        require 10^(-mem[_538] + 18)
        if _487 * 10^(-mem[_538] + 18) / 10^(-mem[_538] + 18) != _487:
            revert with 0, 'math-not-safe'
        if 10^18 * _487 * 10^(-mem[_538] + 18) / 10^18 != _487 * 10^(-mem[_538] + 18):
            revert with 0, 'math-not-safe'
        if (10^18 * _487 * 10^(-mem[_538] + 18)) + (arg3 * 10^(-_503 + 18) / 2) < 10^18 * _487 * 10^(-mem[_538] + 18):
            revert with 0, 'math-not-safe'
        require arg3 * 10^(-_503 + 18)
        if arg4 + 10^18 < 10^18:
            revert with 0, 'math-not-safe'
        if not arg4 + 10^18:
            return _487, 0
        require arg4 + 10^18
        if (10^18 * (10^18 * _487 * 10^(-mem[_538] + 18)) + (arg3 * 10^(-_503 + 18) / 2) / arg3 * 10^(-_503 + 18)) + (arg4 * (10^18 * _487 * 10^(-mem[_538] + 18)) + (arg3 * 10^(-_503 + 18) / 2) / arg3 * 10^(-_503 + 18)) / arg4 + 10^18 != (10^18 * _487 * 10^(-mem[_538] + 18)) + (arg3 * 10^(-_503 + 18) / 2) / arg3 * 10^(-_503 + 18):
            revert with 0, 'math-not-safe'
        return _487, 
               (10^18 * (10^18 * _487 * 10^(-mem[_538] + 18)) + (arg3 * 10^(-_503 + 18) / 2) / arg3 * 10^(-_503 + 18)) + (arg4 * (10^18 * _487 * 10^(-mem[_538] + 18)) + (arg3 * 10^(-_503 + 18) / 2) / arg3 * 10^(-_503 + 18)) + 5 * 10^17 / 10^18
    mem[128] = arg2
    mem[160] = arg1
    mem[192] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
    mem[196] = arg3
    mem[228] = 64
    mem[260] = 2
    idx = 0
    s = 292
    t = 128
    while idx < 2:
        mem[s] = mem[t + 12 len 20]
        idx = idx + 1
        s = s + 32
        t = t + 32
        continue 
    require ext_code.size(0xe54ca86531e17ef3616d22ca28b0d458b6c89106)
    staticcall 0xe54ca86531e17ef3616d22ca28b0d458b6c89106.getAmountsIn(uint256 arg1, address[] arg2) with:
            gas gas_remaining wei
           args arg3, Array(len=2, data=mem[292 len 64])
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    mem[192 len return_data.size] = ext_call.return_data[0 len return_data.size]
    mem[64] = ceil32(return_data.size) + 192
    require return_data.size >= 32
    _264 = mem[192 len 4], Mask(224, 32, arg3) >> 32
    require mem[192 len 4], Mask(224, 32, arg3) >> 32 <= test266151307()
    require return_data.size + 192 > mem[192 len 4], Mask(224, 32, arg3) >> 32 + 223
    _268 = mem[mem[192 len 4], Mask(224, 32, arg3) >> 32 + 192]
    require mem[mem[192 len 4], Mask(224, 32, arg3) >> 32 + 192] <= test266151307()
    require (32 * mem[mem[192 len 4], Mask(224, 32, arg3) >> 32 + 192]) + 32 >= 0 and ceil32(return_data.size) + (32 * mem[mem[192 len 4], Mask(224, 32, arg3) >> 32 + 192]) + 224 <= test266151307()
    mem[64] = ceil32(return_data.size) + (32 * mem[mem[192 len 4], Mask(224, 32, arg3) >> 32 + 192]) + 224
    mem[ceil32(return_data.size) + 192] = mem[mem[192 len 4], Mask(224, 32, arg3) >> 32 + 192]
    require return_data.size >= _264 + (32 * _268) + 32
    mem[ceil32(return_data.size) + 224 len 32 * _268] = mem[_264 + 224 len 32 * _268]
    require 0 < _268
    _488 = mem[ceil32(return_data.size) + 224]
    require ext_code.size(arg1)
    staticcall arg1.0x313ce567 with:
            gas gas_remaining wei
    mem[mem[64]] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    _500 = mem[64]
    mem[64] = mem[64] + ceil32(return_data.size)
    require return_data.size >= 32
    _504 = mem[_500]
    if not 10^(-mem[_500] + 18):
        require ext_code.size(arg2)
        staticcall arg2.0x313ce567 with:
                gas gas_remaining wei
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _530 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        require 10^(-mem[_530] + 18)
        require 10^(-mem[_530] + 18)
        if _488 * 10^(-mem[_530] + 18) / 10^(-mem[_530] + 18) != _488:
            revert with 0, 'math-not-safe'
        if 10^18 * _488 * 10^(-mem[_530] + 18) / 10^18 != _488 * 10^(-mem[_530] + 18):
            revert with 0, 'math-not-safe'
        require 10^18 * _488 * 10^(-mem[_530] + 18) < 10^18 * _488 * 10^(-mem[_530] + 18)
        revert with 0, 'math-not-safe'
    require 10^(-mem[_500] + 18)
    if arg3 * 10^(-mem[_500] + 18) / 10^(-mem[_500] + 18) != arg3:
        revert with 0, 'math-not-safe'
    require ext_code.size(arg2)
    staticcall arg2.0x313ce567 with:
            gas gas_remaining wei
    mem[mem[64]] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    _540 = mem[64]
    mem[64] = mem[64] + ceil32(return_data.size)
    require return_data.size >= 32
    if not 10^(-mem[_540] + 18):
        if arg3 * 10^(-_504 + 18) / 2 < 0:
            revert with 0, 'math-not-safe'
        require arg3 * 10^(-_504 + 18)
        if arg4 + 10^18 < 10^18:
            revert with 0, 'math-not-safe'
        if not arg4 + 10^18:
            return _488, 0
        require arg4 + 10^18
        if (10^18 * arg3 * 10^(-_504 + 18) / 2 / arg3 * 10^(-_504 + 18)) + (arg4 * arg3 * 10^(-_504 + 18) / 2 / arg3 * 10^(-_504 + 18)) / arg4 + 10^18 != arg3 * 10^(-_504 + 18) / 2 / arg3 * 10^(-_504 + 18):
            revert with 0, 'math-not-safe'
        return _488, 
               (10^18 * arg3 * 10^(-_504 + 18) / 2 / arg3 * 10^(-_504 + 18)) + (arg4 * arg3 * 10^(-_504 + 18) / 2 / arg3 * 10^(-_504 + 18)) + 5 * 10^17 / 10^18
    require 10^(-mem[_540] + 18)
    if _488 * 10^(-mem[_540] + 18) / 10^(-mem[_540] + 18) != _488:
        revert with 0, 'math-not-safe'
    if 10^18 * _488 * 10^(-mem[_540] + 18) / 10^18 != _488 * 10^(-mem[_540] + 18):
        revert with 0, 'math-not-safe'
    if (10^18 * _488 * 10^(-mem[_540] + 18)) + (arg3 * 10^(-_504 + 18) / 2) < 10^18 * _488 * 10^(-mem[_540] + 18):
        revert with 0, 'math-not-safe'
    require arg3 * 10^(-_504 + 18)
    if arg4 + 10^18 < 10^18:
        revert with 0, 'math-not-safe'
    if not arg4 + 10^18:
        return _488, 0
    require arg4 + 10^18
    if (10^18 * (10^18 * _488 * 10^(-mem[_540] + 18)) + (arg3 * 10^(-_504 + 18) / 2) / arg3 * 10^(-_504 + 18)) + (arg4 * (10^18 * _488 * 10^(-mem[_540] + 18)) + (arg3 * 10^(-_504 + 18) / 2) / arg3 * 10^(-_504 + 18)) / arg4 + 10^18 != (10^18 * _488 * 10^(-mem[_540] + 18)) + (arg3 * 10^(-_504 + 18) / 2) / arg3 * 10^(-_504 + 18):
        revert with 0, 'math-not-safe'
    return _488, 
           (10^18 * (10^18 * _488 * 10^(-mem[_540] + 18)) + (arg3 * 10^(-_504 + 18) / 2) / arg3 * 10^(-_504 + 18)) + (arg4 * (10^18 * _488 * 10^(-mem[_540] + 18)) + (arg3 * 10^(-_504 + 18) / 2) / arg3 * 10^(-_504 + 18)) + 5 * 10^17 / 10^18
}

function getDepositAmount(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5) payable {
    require calldata.size - 4 >= 160
    require arg1 == arg1
    require arg2 == arg2
    require ext_code.size(0xe54ca86531e17ef3616d22ca28b0d458b6c89106)
    staticcall 0xe54ca86531e17ef3616d22ca28b0d458b6c89106.factory() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
    require ext_code.size(address(ext_call.return_data[0]))
    if arg1 == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
        if arg2 == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
            staticcall address(ext_call.return_data[0]).getPair(address arg1, address arg2) with:
                    gas gas_remaining wei
                   args 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7, 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7
        else:
            staticcall address(ext_call.return_data[0]).getPair(address arg1, address arg2) with:
                    gas gas_remaining wei
                   args 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7, arg2
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
        if not ext_call.return_data[12 len 20]:
            revert with 0, 'No-exchange-address'
        require ext_code.size(address(ext_call.return_data[0]))
        staticcall address(ext_call.return_data[0]).getReserves() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 96
        require ext_call.return_data[0] == ext_call.return_data[18 len 14]
        require ext_call.return_data[32] == ext_call.return_data[50 len 14]
        require ext_call.return_data[64] == ext_call.return_data[92 len 4]
        require ext_code.size(address(ext_call.return_data[0]))
        staticcall address(ext_call.return_data[0]).token0() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
        if ext_call.return_data[12 len 20] == 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7:
            require ext_code.size(0xe54ca86531e17ef3616d22ca28b0d458b6c89106)
            staticcall 0xe54ca86531e17ef3616d22ca28b0d458b6c89106.quote(uint256 arg1, uint256 arg2, uint256 arg3) with:
                    gas gas_remaining wei
                   args arg3, ext_call.return_data[0] << 144, Mask(112, 0, ext_call.return_data[32])
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(address(ext_call.return_data[0]))
            staticcall address(ext_call.return_data[0]).0x18160ddd with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0]:
                require Mask(112, 0, ext_call.return_data[0])
                if -arg4 + 10^18 <= 10^18:
                    if not arg3:
                        if -arg5 + 10^18 <= 10^18:
                            if not ext_call.return_data[0]:
                                return ext_call.return_data[0], 0 / Mask(112, 0, ext_call.return_data[0]), 0, 0
                            require ext_call.return_data[0]
                            if (10^18 * ext_call.return_data[0]) - (arg5 * ext_call.return_data[0]) / ext_call.return_data[0] != -arg5 + 10^18:
                                revert with 0, 'math-not-safe'
                            return ext_call.return_data[0], 
                                   0 / Mask(112, 0, ext_call.return_data[0]),
                                   0,
                                   (10^18 * ext_call.return_data[0]) + (-1 * arg5 * ext_call.return_data[0]) + 5 * 10^17 / 10^18
                        if ext_call.return_data[0]:
                            require ext_call.return_data[0]
                            if 0 / ext_call.return_data[0]:
                                revert with 0, 'math-not-safe'
                        return ext_call.return_data[0], 0 / Mask(112, 0, ext_call.return_data[0]), 0, 0
                    require arg3
                    if (10^18 * arg3) - (arg4 * arg3) / arg3 != -arg4 + 10^18:
                        revert with 0, 'math-not-safe'
                    if -arg5 + 10^18 <= 10^18:
                        if not ext_call.return_data[0]:
                            return ext_call.return_data[0], 
                                   0 / Mask(112, 0, ext_call.return_data[0]),
                                   (10^18 * arg3) + (-1 * arg4 * arg3) + 5 * 10^17 / 10^18,
                                   0
                        require ext_call.return_data[0]
                        if (10^18 * ext_call.return_data[0]) - (arg5 * ext_call.return_data[0]) / ext_call.return_data[0] != -arg5 + 10^18:
                            revert with 0, 'math-not-safe'
                        return ext_call.return_data[0], 
                               0 / Mask(112, 0, ext_call.return_data[0]),
                               (10^18 * arg3) + (-1 * arg4 * arg3) + 5 * 10^17 / 10^18,
                               (10^18 * ext_call.return_data[0]) + (-1 * arg5 * ext_call.return_data[0]) + 5 * 10^17 / 10^18
                    if ext_call.return_data[0]:
                        require ext_call.return_data[0]
                        if 0 / ext_call.return_data[0]:
                            revert with 0, 'math-not-safe'
                    return ext_call.return_data[0], 
                           0 / Mask(112, 0, ext_call.return_data[0]),
                           (10^18 * arg3) + (-1 * arg4 * arg3) + 5 * 10^17 / 10^18,
                           0
                if arg3:
                    require arg3
                    if 0 / arg3:
                        revert with 0, 'math-not-safe'
                if -arg5 + 10^18 <= 10^18:
                    if not ext_call.return_data[0]:
                        return ext_call.return_data[0], 0 / Mask(112, 0, ext_call.return_data[0]), 0, 0
                    require ext_call.return_data[0]
                    if (10^18 * ext_call.return_data[0]) - (arg5 * ext_call.return_data[0]) / ext_call.return_data[0] != -arg5 + 10^18:
                        revert with 0, 'math-not-safe'
                    return ext_call.return_data[0], 
                           0 / Mask(112, 0, ext_call.return_data[0]),
                           0,
                           (10^18 * ext_call.return_data[0]) + (-1 * arg5 * ext_call.return_data[0]) + 5 * 10^17 / 10^18
                if ext_call.return_data[0]:
                    require ext_call.return_data[0]
                    if 0 / ext_call.return_data[0]:
                        revert with 0, 'math-not-safe'
                return ext_call.return_data[0], 0 / Mask(112, 0, ext_call.return_data[0]), 0, 0
            require ext_call.return_data[0]
            if arg3 * ext_call.return_data[0] / ext_call.return_data[0] != arg3:
                revert with 0, 'math-not-safe'
            require Mask(112, 0, ext_call.return_data[0])
            if -arg4 + 10^18 <= 10^18:
                if not arg3:
                    if -arg5 + 10^18 <= 10^18:
                        if not ext_call.return_data[0]:
                            return ext_call.return_data[0], arg3 * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]), 0, 0
                        require ext_call.return_data[0]
                        if (10^18 * ext_call.return_data[0]) - (arg5 * ext_call.return_data[0]) / ext_call.return_data[0] != -arg5 + 10^18:
                            revert with 0, 'math-not-safe'
                        return ext_call.return_data[0], 
                               arg3 * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]),
                               0,
                               (10^18 * ext_call.return_data[0]) + (-1 * arg5 * ext_call.return_data[0]) + 5 * 10^17 / 10^18
                    if ext_call.return_data[0]:
                        require ext_call.return_data[0]
                        if 0 / ext_call.return_data[0]:
                            revert with 0, 'math-not-safe'
                    return ext_call.return_data[0], arg3 * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]), 0, 0
                require arg3
                if (10^18 * arg3) - (arg4 * arg3) / arg3 != -arg4 + 10^18:
                    revert with 0, 'math-not-safe'
                if -arg5 + 10^18 <= 10^18:
                    if not ext_call.return_data[0]:
                        return ext_call.return_data[0], 
                               arg3 * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]),
                               (10^18 * arg3) + (-1 * arg4 * arg3) + 5 * 10^17 / 10^18,
                               0
                    require ext_call.return_data[0]
                    if (10^18 * ext_call.return_data[0]) - (arg5 * ext_call.return_data[0]) / ext_call.return_data[0] != -arg5 + 10^18:
                        revert with 0, 'math-not-safe'
                    return ext_call.return_data[0], 
                           arg3 * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]),
                           (10^18 * arg3) + (-1 * arg4 * arg3) + 5 * 10^17 / 10^18,
                           (10^18 * ext_call.return_data[0]) + (-1 * arg5 * ext_call.return_data[0]) + 5 * 10^17 / 10^18
                if ext_call.return_data[0]:
                    require ext_call.return_data[0]
                    if 0 / ext_call.return_data[0]:
                        revert with 0, 'math-not-safe'
                return ext_call.return_data[0], 
                       arg3 * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]),
                       (10^18 * arg3) + (-1 * arg4 * arg3) + 5 * 10^17 / 10^18,
                       0
            if arg3:
                require arg3
                if 0 / arg3:
                    revert with 0, 'math-not-safe'
            if -arg5 + 10^18 <= 10^18:
                if not ext_call.return_data[0]:
                    return ext_call.return_data[0], arg3 * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]), 0, 0
                require ext_call.return_data[0]
                if (10^18 * ext_call.return_data[0]) - (arg5 * ext_call.return_data[0]) / ext_call.return_data[0] != -arg5 + 10^18:
                    revert with 0, 'math-not-safe'
                return ext_call.return_data[0], 
                       arg3 * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]),
                       0,
                       (10^18 * ext_call.return_data[0]) + (-1 * arg5 * ext_call.return_data[0]) + 5 * 10^17 / 10^18
            if ext_call.return_data[0]:
                require ext_call.return_data[0]
                if 0 / ext_call.return_data[0]:
                    revert with 0, 'math-not-safe'
            return ext_call.return_data[0], arg3 * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]), 0, 0
    else:
        if arg2 == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
            staticcall address(ext_call.return_data[0]).getPair(address arg1, address arg2) with:
                    gas gas_remaining wei
                   args address(arg1), 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7
        else:
            staticcall address(ext_call.return_data[0]).getPair(address arg1, address arg2) with:
                    gas gas_remaining wei
                   args address(arg1), arg2
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
        if not ext_call.return_data[12 len 20]:
            revert with 0, 'No-exchange-address'
        require ext_code.size(address(ext_call.return_data[0]))
        staticcall address(ext_call.return_data[0]).getReserves() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 96
        require ext_call.return_data[0] == ext_call.return_data[18 len 14]
        require ext_call.return_data[32] == ext_call.return_data[50 len 14]
        require ext_call.return_data[64] == ext_call.return_data[92 len 4]
        require ext_code.size(address(ext_call.return_data[0]))
        staticcall address(ext_call.return_data[0]).token0() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
        if ext_call.return_data[12 len 20] == arg1:
            require ext_code.size(0xe54ca86531e17ef3616d22ca28b0d458b6c89106)
            staticcall 0xe54ca86531e17ef3616d22ca28b0d458b6c89106.quote(uint256 arg1, uint256 arg2, uint256 arg3) with:
                    gas gas_remaining wei
                   args arg3, ext_call.return_data[0] << 144, Mask(112, 0, ext_call.return_data[32])
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(address(ext_call.return_data[0]))
            staticcall address(ext_call.return_data[0]).0x18160ddd with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0]:
                require Mask(112, 0, ext_call.return_data[0])
                if -arg4 + 10^18 <= 10^18:
                    if not arg3:
                        if -arg5 + 10^18 <= 10^18:
                            if not ext_call.return_data[0]:
                                return ext_call.return_data[0], 0 / Mask(112, 0, ext_call.return_data[0]), 0, 0
                            require ext_call.return_data[0]
                            if (10^18 * ext_call.return_data[0]) - (arg5 * ext_call.return_data[0]) / ext_call.return_data[0] != -arg5 + 10^18:
                                revert with 0, 'math-not-safe'
                            return ext_call.return_data[0], 
                                   0 / Mask(112, 0, ext_call.return_data[0]),
                                   0,
                                   (10^18 * ext_call.return_data[0]) + (-1 * arg5 * ext_call.return_data[0]) + 5 * 10^17 / 10^18
                        if ext_call.return_data[0]:
                            require ext_call.return_data[0]
                            if 0 / ext_call.return_data[0]:
                                revert with 0, 'math-not-safe'
                        return ext_call.return_data[0], 0 / Mask(112, 0, ext_call.return_data[0]), 0, 0
                    require arg3
                    if (10^18 * arg3) - (arg4 * arg3) / arg3 != -arg4 + 10^18:
                        revert with 0, 'math-not-safe'
                    if -arg5 + 10^18 <= 10^18:
                        if not ext_call.return_data[0]:
                            return ext_call.return_data[0], 
                                   0 / Mask(112, 0, ext_call.return_data[0]),
                                   (10^18 * arg3) + (-1 * arg4 * arg3) + 5 * 10^17 / 10^18,
                                   0
                        require ext_call.return_data[0]
                        if (10^18 * ext_call.return_data[0]) - (arg5 * ext_call.return_data[0]) / ext_call.return_data[0] != -arg5 + 10^18:
                            revert with 0, 'math-not-safe'
                        return ext_call.return_data[0], 
                               0 / Mask(112, 0, ext_call.return_data[0]),
                               (10^18 * arg3) + (-1 * arg4 * arg3) + 5 * 10^17 / 10^18,
                               (10^18 * ext_call.return_data[0]) + (-1 * arg5 * ext_call.return_data[0]) + 5 * 10^17 / 10^18
                    if ext_call.return_data[0]:
                        require ext_call.return_data[0]
                        if 0 / ext_call.return_data[0]:
                            revert with 0, 'math-not-safe'
                    return ext_call.return_data[0], 
                           0 / Mask(112, 0, ext_call.return_data[0]),
                           (10^18 * arg3) + (-1 * arg4 * arg3) + 5 * 10^17 / 10^18,
                           0
                if arg3:
                    require arg3
                    if 0 / arg3:
                        revert with 0, 'math-not-safe'
                if -arg5 + 10^18 <= 10^18:
                    if not ext_call.return_data[0]:
                        return ext_call.return_data[0], 0 / Mask(112, 0, ext_call.return_data[0]), 0, 0
                    require ext_call.return_data[0]
                    if (10^18 * ext_call.return_data[0]) - (arg5 * ext_call.return_data[0]) / ext_call.return_data[0] != -arg5 + 10^18:
                        revert with 0, 'math-not-safe'
                    return ext_call.return_data[0], 
                           0 / Mask(112, 0, ext_call.return_data[0]),
                           0,
                           (10^18 * ext_call.return_data[0]) + (-1 * arg5 * ext_call.return_data[0]) + 5 * 10^17 / 10^18
                if ext_call.return_data[0]:
                    require ext_call.return_data[0]
                    if 0 / ext_call.return_data[0]:
                        revert with 0, 'math-not-safe'
                return ext_call.return_data[0], 0 / Mask(112, 0, ext_call.return_data[0]), 0, 0
            require ext_call.return_data[0]
            if arg3 * ext_call.return_data[0] / ext_call.return_data[0] != arg3:
                revert with 0, 'math-not-safe'
            require Mask(112, 0, ext_call.return_data[0])
            if -arg4 + 10^18 <= 10^18:
                if not arg3:
                    if -arg5 + 10^18 <= 10^18:
                        if not ext_call.return_data[0]:
                            return ext_call.return_data[0], arg3 * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]), 0, 0
                        require ext_call.return_data[0]
                        if (10^18 * ext_call.return_data[0]) - (arg5 * ext_call.return_data[0]) / ext_call.return_data[0] != -arg5 + 10^18:
                            revert with 0, 'math-not-safe'
                        return ext_call.return_data[0], 
                               arg3 * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]),
                               0,
                               (10^18 * ext_call.return_data[0]) + (-1 * arg5 * ext_call.return_data[0]) + 5 * 10^17 / 10^18
                    if ext_call.return_data[0]:
                        require ext_call.return_data[0]
                        if 0 / ext_call.return_data[0]:
                            revert with 0, 'math-not-safe'
                    return ext_call.return_data[0], arg3 * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]), 0, 0
                require arg3
                if (10^18 * arg3) - (arg4 * arg3) / arg3 != -arg4 + 10^18:
                    revert with 0, 'math-not-safe'
                if -arg5 + 10^18 <= 10^18:
                    if not ext_call.return_data[0]:
                        return ext_call.return_data[0], 
                               arg3 * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]),
                               (10^18 * arg3) + (-1 * arg4 * arg3) + 5 * 10^17 / 10^18,
                               0
                    require ext_call.return_data[0]
                    if (10^18 * ext_call.return_data[0]) - (arg5 * ext_call.return_data[0]) / ext_call.return_data[0] != -arg5 + 10^18:
                        revert with 0, 'math-not-safe'
                    return ext_call.return_data[0], 
                           arg3 * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]),
                           (10^18 * arg3) + (-1 * arg4 * arg3) + 5 * 10^17 / 10^18,
                           (10^18 * ext_call.return_data[0]) + (-1 * arg5 * ext_call.return_data[0]) + 5 * 10^17 / 10^18
                if ext_call.return_data[0]:
                    require ext_call.return_data[0]
                    if 0 / ext_call.return_data[0]:
                        revert with 0, 'math-not-safe'
                return ext_call.return_data[0], 
                       arg3 * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]),
                       (10^18 * arg3) + (-1 * arg4 * arg3) + 5 * 10^17 / 10^18,
                       0
            if arg3:
                require arg3
                if 0 / arg3:
                    revert with 0, 'math-not-safe'
            if -arg5 + 10^18 <= 10^18:
                if not ext_call.return_data[0]:
                    return ext_call.return_data[0], arg3 * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]), 0, 0
                require ext_call.return_data[0]
                if (10^18 * ext_call.return_data[0]) - (arg5 * ext_call.return_data[0]) / ext_call.return_data[0] != -arg5 + 10^18:
                    revert with 0, 'math-not-safe'
                return ext_call.return_data[0], 
                       arg3 * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]),
                       0,
                       (10^18 * ext_call.return_data[0]) + (-1 * arg5 * ext_call.return_data[0]) + 5 * 10^17 / 10^18
            if ext_call.return_data[0]:
                require ext_call.return_data[0]
                if 0 / ext_call.return_data[0]:
                    revert with 0, 'math-not-safe'
            return ext_call.return_data[0], arg3 * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]), 0, 0
    require ext_code.size(0xe54ca86531e17ef3616d22ca28b0d458b6c89106)
    staticcall 0xe54ca86531e17ef3616d22ca28b0d458b6c89106.quote(uint256 arg1, uint256 arg2, uint256 arg3) with:
            gas gas_remaining wei
           args arg3, ext_call.return_data[32] << 144, Mask(112, 0, ext_call.return_data[0])
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_code.size(address(ext_call.return_data[0]))
    staticcall address(ext_call.return_data[0]).0x18160ddd with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if not ext_call.return_data[0]:
        require Mask(112, 0, ext_call.return_data[32])
        if -arg4 + 10^18 <= 10^18:
            if not arg3:
                if -arg5 + 10^18 <= 10^18:
                    if not ext_call.return_data[0]:
                        return ext_call.return_data[0], 0 / Mask(112, 0, ext_call.return_data[32]), 0, 0
                    require ext_call.return_data[0]
                    if (10^18 * ext_call.return_data[0]) - (arg5 * ext_call.return_data[0]) / ext_call.return_data[0] != -arg5 + 10^18:
                        revert with 0, 'math-not-safe'
                    return ext_call.return_data[0], 
                           0 / Mask(112, 0, ext_call.return_data[32]),
                           0,
                           (10^18 * ext_call.return_data[0]) + (-1 * arg5 * ext_call.return_data[0]) + 5 * 10^17 / 10^18
                if ext_call.return_data[0]:
                    require ext_call.return_data[0]
                    if 0 / ext_call.return_data[0]:
                        revert with 0, 'math-not-safe'
                return ext_call.return_data[0], 0 / Mask(112, 0, ext_call.return_data[32]), 0, 0
            require arg3
            if (10^18 * arg3) - (arg4 * arg3) / arg3 != -arg4 + 10^18:
                revert with 0, 'math-not-safe'
            if -arg5 + 10^18 <= 10^18:
                if not ext_call.return_data[0]:
                    return ext_call.return_data[0], 
                           0 / Mask(112, 0, ext_call.return_data[32]),
                           (10^18 * arg3) + (-1 * arg4 * arg3) + 5 * 10^17 / 10^18,
                           0
                require ext_call.return_data[0]
                if (10^18 * ext_call.return_data[0]) - (arg5 * ext_call.return_data[0]) / ext_call.return_data[0] != -arg5 + 10^18:
                    revert with 0, 'math-not-safe'
                return ext_call.return_data[0], 
                       0 / Mask(112, 0, ext_call.return_data[32]),
                       (10^18 * arg3) + (-1 * arg4 * arg3) + 5 * 10^17 / 10^18,
                       (10^18 * ext_call.return_data[0]) + (-1 * arg5 * ext_call.return_data[0]) + 5 * 10^17 / 10^18
            if ext_call.return_data[0]:
                require ext_call.return_data[0]
                if 0 / ext_call.return_data[0]:
                    revert with 0, 'math-not-safe'
            return ext_call.return_data[0], 
                   0 / Mask(112, 0, ext_call.return_data[32]),
                   (10^18 * arg3) + (-1 * arg4 * arg3) + 5 * 10^17 / 10^18,
                   0
        if arg3:
            require arg3
            if 0 / arg3:
                revert with 0, 'math-not-safe'
        if -arg5 + 10^18 <= 10^18:
            if not ext_call.return_data[0]:
                return ext_call.return_data[0], 0 / Mask(112, 0, ext_call.return_data[32]), 0, 0
            require ext_call.return_data[0]
            if (10^18 * ext_call.return_data[0]) - (arg5 * ext_call.return_data[0]) / ext_call.return_data[0] != -arg5 + 10^18:
                revert with 0, 'math-not-safe'
            return ext_call.return_data[0], 
                   0 / Mask(112, 0, ext_call.return_data[32]),
                   0,
                   (10^18 * ext_call.return_data[0]) + (-1 * arg5 * ext_call.return_data[0]) + 5 * 10^17 / 10^18
        if ext_call.return_data[0]:
            require ext_call.return_data[0]
            if 0 / ext_call.return_data[0]:
                revert with 0, 'math-not-safe'
        return ext_call.return_data[0], 0 / Mask(112, 0, ext_call.return_data[32]), 0, 0
    require ext_call.return_data[0]
    if arg3 * ext_call.return_data[0] / ext_call.return_data[0] != arg3:
        revert with 0, 'math-not-safe'
    require Mask(112, 0, ext_call.return_data[32])
    if -arg4 + 10^18 <= 10^18:
        if not arg3:
            if -arg5 + 10^18 <= 10^18:
                if not ext_call.return_data[0]:
                    return ext_call.return_data[0], arg3 * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]), 0, 0
                require ext_call.return_data[0]
                if (10^18 * ext_call.return_data[0]) - (arg5 * ext_call.return_data[0]) / ext_call.return_data[0] != -arg5 + 10^18:
                    revert with 0, 'math-not-safe'
                return ext_call.return_data[0], 
                       arg3 * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]),
                       0,
                       (10^18 * ext_call.return_data[0]) + (-1 * arg5 * ext_call.return_data[0]) + 5 * 10^17 / 10^18
            if ext_call.return_data[0]:
                require ext_call.return_data[0]
                if 0 / ext_call.return_data[0]:
                    revert with 0, 'math-not-safe'
            return ext_call.return_data[0], arg3 * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]), 0, 0
        require arg3
        if (10^18 * arg3) - (arg4 * arg3) / arg3 != -arg4 + 10^18:
            revert with 0, 'math-not-safe'
        if -arg5 + 10^18 <= 10^18:
            if not ext_call.return_data[0]:
                return ext_call.return_data[0], 
                       arg3 * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]),
                       (10^18 * arg3) + (-1 * arg4 * arg3) + 5 * 10^17 / 10^18,
                       0
            require ext_call.return_data[0]
            if (10^18 * ext_call.return_data[0]) - (arg5 * ext_call.return_data[0]) / ext_call.return_data[0] != -arg5 + 10^18:
                revert with 0, 'math-not-safe'
            return ext_call.return_data[0], 
                   arg3 * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]),
                   (10^18 * arg3) + (-1 * arg4 * arg3) + 5 * 10^17 / 10^18,
                   (10^18 * ext_call.return_data[0]) + (-1 * arg5 * ext_call.return_data[0]) + 5 * 10^17 / 10^18
        if ext_call.return_data[0]:
            require ext_call.return_data[0]
            if 0 / ext_call.return_data[0]:
                revert with 0, 'math-not-safe'
        return ext_call.return_data[0], 
               arg3 * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]),
               (10^18 * arg3) + (-1 * arg4 * arg3) + 5 * 10^17 / 10^18,
               0
    if arg3:
        require arg3
        if 0 / arg3:
            revert with 0, 'math-not-safe'
    if -arg5 + 10^18 <= 10^18:
        if not ext_call.return_data[0]:
            return ext_call.return_data[0], arg3 * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]), 0, 0
        require ext_call.return_data[0]
        if (10^18 * ext_call.return_data[0]) - (arg5 * ext_call.return_data[0]) / ext_call.return_data[0] != -arg5 + 10^18:
            revert with 0, 'math-not-safe'
        return ext_call.return_data[0], 
               arg3 * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]),
               0,
               (10^18 * ext_call.return_data[0]) + (-1 * arg5 * ext_call.return_data[0]) + 5 * 10^17 / 10^18
    if ext_call.return_data[0]:
        require ext_call.return_data[0]
        if 0 / ext_call.return_data[0]:
            revert with 0, 'math-not-safe'
    return ext_call.return_data[0], arg3 * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]), 0, 0
}

function sub_78b9b2a0(?) payable {
    require calldata.size - 4 >= 64
    require arg1 == address(arg1)
    require arg2 == address(arg2)
    require ext_code.size(address(arg1))
    staticcall address(arg1).getReserves() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 96
    require ext_call.return_data[0] == ext_call.return_data[18 len 14]
    require ext_call.return_data[32] == ext_call.return_data[50 len 14]
    require ext_call.return_data[64] == ext_call.return_data[92 len 4]
    require ext_code.size(address(arg1))
    staticcall address(arg1).token0() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
    require ext_code.size(address(arg1))
    staticcall address(arg1).token1() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
    require ext_code.size(address(arg1))
    staticcall address(arg1).0x70a08231 with:
            gas gas_remaining wei
           args address(arg2)
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_code.size(address(arg1))
    staticcall address(arg1).0x18160ddd with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if 10^18 * ext_call.return_data[0] / 10^18 != ext_call.return_data[0]:
        revert with 0, 'math-not-safe'
    if (10^18 * ext_call.return_data[0]) + (ext_call.return_data[0] / 2) < 10^18 * ext_call.return_data[0]:
        revert with 0, 'math-not-safe'
    require ext_call.return_data[0]
    if address(ext_call.return_data[0]) == 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7:
        if address(ext_call.return_data[0]) == 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7:
            if not (10^18 * ext_call.return_data[0]) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]:
                if not (10^18 * ext_call.return_data[0]) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]:
                    if address(ext_call.return_data[0]) == 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7:
                        if address(ext_call.return_data[0]) == 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7:
                            return 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee, 
                                   0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee,
                                   address(arg1),
                                   ext_call.return_data[0] << 144,
                                   ext_call.return_data[32] << 144,
                                   0,
                                   0,
                                   eth.balance(arg2),
                                   eth.balance(arg2),
                                   ext_call.return_data[0],
                                   ext_call.return_data[0]
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).0x70a08231 with:
                                gas gas_remaining wei
                               args address(arg2)
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        return 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee, 
                               0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee,
                               address(arg1),
                               ext_call.return_data[0] << 144,
                               ext_call.return_data[32] << 144,
                               0,
                               0,
                               eth.balance(arg2),
                               ext_call.return_data[0],
                               ext_call.return_data[0],
                               ext_call.return_data[0]
                    require ext_code.size(address(ext_call.return_data[0]))
                    staticcall address(ext_call.return_data[0]).0x70a08231 with:
                            gas gas_remaining wei
                           args address(arg2)
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if address(ext_call.return_data[0]) == 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7:
                        return 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee, 
                               0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee,
                               address(arg1),
                               ext_call.return_data[0] << 144,
                               ext_call.return_data[32] << 144,
                               0,
                               0,
                               ext_call.return_data[0],
                               eth.balance(arg2),
                               ext_call.return_data[0],
                               ext_call.return_data[0]
                    require ext_code.size(address(ext_call.return_data[0]))
                    staticcall address(ext_call.return_data[0]).0x70a08231 with:
                            gas gas_remaining wei
                           args address(arg2)
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    return 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee, 
                           0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee,
                           address(arg1),
                           ext_call.return_data[0] << 144,
                           ext_call.return_data[32] << 144,
                           0,
                           0,
                           ext_call.return_data[0],
                           ext_call.return_data[0],
                           ext_call.return_data[0],
                           ext_call.return_data[0]
                require (10^18 * ext_call.return_data[0]) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]
                if Mask(112, 0, ext_call.return_data[32]) * (10^18 * ext_call.return_data[0]) + (ext_call.return_data[0] / 2) / ext_call.return_data[0] / (10^18 * ext_call.return_data[0]) + (ext_call.return_data[0] / 2) / ext_call.return_data[0] != Mask(112, 0, ext_call.return_data[32]):
                    revert with 0, 'math-not-safe'
                if (Mask(112, 0, ext_call.return_data[32]) * (10^18 * ext_call.return_data[0]) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 < Mask(112, 0, ext_call.return_data[32]) * (10^18 * ext_call.return_data[0]) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]:
                    revert with 0, 'math-not-safe'
                if address(ext_call.return_data[0]) == 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7:
                    if address(ext_call.return_data[0]) == 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7:
                        return 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee, 
                               0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee,
                               address(arg1),
                               ext_call.return_data[0] << 144,
                               ext_call.return_data[32] << 144,
                               0,
                               (Mask(112, 0, ext_call.return_data[32]) * (10^18 * ext_call.return_data[0]) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                               eth.balance(arg2),
                               eth.balance(arg2),
                               ext_call.return_data[0],
                               ext_call.return_data[0]
                    require ext_code.size(address(ext_call.return_data[0]))
                    staticcall address(ext_call.return_data[0]).0x70a08231 with:
                            gas gas_remaining wei
                           args address(arg2)
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    return 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee, 
                           0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee,
                           address(arg1),
                           ext_call.return_data[0] << 144,
                           ext_call.return_data[32] << 144,
                           0,
                           (Mask(112, 0, ext_call.return_data[32]) * (10^18 * ext_call.return_data[0]) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                           eth.balance(arg2),
                           ext_call.return_data[0],
                           ext_call.return_data[0],
                           ext_call.return_data[0]
                require ext_code.size(address(ext_call.return_data[0]))
                staticcall address(ext_call.return_data[0]).0x70a08231 with:
                        gas gas_remaining wei
                       args address(arg2)
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if address(ext_call.return_data[0]) == 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7:
                    return 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee, 
                           0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee,
                           address(arg1),
                           ext_call.return_data[0] << 144,
                           ext_call.return_data[32] << 144,
                           0,
                           (Mask(112, 0, ext_call.return_data[32]) * (10^18 * ext_call.return_data[0]) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                           ext_call.return_data[0],
                           eth.balance(arg2),
                           ext_call.return_data[0],
                           ext_call.return_data[0]
                require ext_code.size(address(ext_call.return_data[0]))
                staticcall address(ext_call.return_data[0]).0x70a08231 with:
                        gas gas_remaining wei
                       args address(arg2)
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                return 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee, 
                       0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee,
                       address(arg1),
                       ext_call.return_data[0] << 144,
                       ext_call.return_data[32] << 144,
                       0,
                       (Mask(112, 0, ext_call.return_data[32]) * (10^18 * ext_call.return_data[0]) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                       ext_call.return_data[0],
                       ext_call.return_data[0],
                       ext_call.return_data[0],
                       ext_call.return_data[0]
            require (10^18 * ext_call.return_data[0]) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]
            if Mask(112, 0, ext_call.return_data[0]) * (10^18 * ext_call.return_data[0]) + (ext_call.return_data[0] / 2) / ext_call.return_data[0] / (10^18 * ext_call.return_data[0]) + (ext_call.return_data[0] / 2) / ext_call.return_data[0] != Mask(112, 0, ext_call.return_data[0]):
                revert with 0, 'math-not-safe'
            if (Mask(112, 0, ext_call.return_data[0]) * (10^18 * ext_call.return_data[0]) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 < Mask(112, 0, ext_call.return_data[0]) * (10^18 * ext_call.return_data[0]) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]:
                revert with 0, 'math-not-safe'
            if not (10^18 * ext_call.return_data[0]) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]:
                if address(ext_call.return_data[0]) == 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7:
                    if address(ext_call.return_data[0]) == 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7:
                        return 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee, 
                               0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee,
                               address(arg1),
                               ext_call.return_data[0] << 144,
                               ext_call.return_data[32] << 144,
                               (Mask(112, 0, ext_call.return_data[0]) * (10^18 * ext_call.return_data[0]) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                               0,
                               eth.balance(arg2),
                               eth.balance(arg2),
                               ext_call.return_data[0],
                               ext_call.return_data[0]
                    require ext_code.size(address(ext_call.return_data[0]))
                    staticcall address(ext_call.return_data[0]).0x70a08231 with:
                            gas gas_remaining wei
                           args address(arg2)
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    return 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee, 
                           0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee,
                           address(arg1),
                           ext_call.return_data[0] << 144,
                           ext_call.return_data[32] << 144,
                           (Mask(112, 0, ext_call.return_data[0]) * (10^18 * ext_call.return_data[0]) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                           0,
                           eth.balance(arg2),
                           ext_call.return_data[0],
                           ext_call.return_data[0],
                           ext_call.return_data[0]
                require ext_code.size(address(ext_call.return_data[0]))
                staticcall address(ext_call.return_data[0]).0x70a08231 with:
                        gas gas_remaining wei
                       args address(arg2)
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if address(ext_call.return_data[0]) == 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7:
                    return 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee, 
                           0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee,
                           address(arg1),
                           ext_call.return_data[0] << 144,
                           ext_call.return_data[32] << 144,
                           (Mask(112, 0, ext_call.return_data[0]) * (10^18 * ext_call.return_data[0]) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                           0,
                           ext_call.return_data[0],
                           eth.balance(arg2),
                           ext_call.return_data[0],
                           ext_call.return_data[0]
                require ext_code.size(address(ext_call.return_data[0]))
                staticcall address(ext_call.return_data[0]).0x70a08231 with:
                        gas gas_remaining wei
                       args address(arg2)
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                return 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee, 
                       0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee,
                       address(arg1),
                       ext_call.return_data[0] << 144,
                       ext_call.return_data[32] << 144,
                       (Mask(112, 0, ext_call.return_data[0]) * (10^18 * ext_call.return_data[0]) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                       0,
                       ext_call.return_data[0],
                       ext_call.return_data[0],
                       ext_call.return_data[0],
                       ext_call.return_data[0]
            require (10^18 * ext_call.return_data[0]) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]
            if Mask(112, 0, ext_call.return_data[32]) * (10^18 * ext_call.return_data[0]) + (ext_call.return_data[0] / 2) / ext_call.return_data[0] / (10^18 * ext_call.return_data[0]) + (ext_call.return_data[0] / 2) / ext_call.return_data[0] != Mask(112, 0, ext_call.return_data[32]):
                revert with 0, 'math-not-safe'
            if (Mask(112, 0, ext_call.return_data[32]) * (10^18 * ext_call.return_data[0]) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 < Mask(112, 0, ext_call.return_data[32]) * (10^18 * ext_call.return_data[0]) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]:
                revert with 0, 'math-not-safe'
            if address(ext_call.return_data[0]) == 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7:
                if address(ext_call.return_data[0]) == 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7:
                    return 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee, 
                           0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee,
                           address(arg1),
                           ext_call.return_data[0] << 144,
                           ext_call.return_data[32] << 144,
                           (Mask(112, 0, ext_call.return_data[0]) * (10^18 * ext_call.return_data[0]) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                           (Mask(112, 0, ext_call.return_data[32]) * (10^18 * ext_call.return_data[0]) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                           eth.balance(arg2),
                           eth.balance(arg2),
                           ext_call.return_data[0],
                           ext_call.return_data[0]
                require ext_code.size(address(ext_call.return_data[0]))
                staticcall address(ext_call.return_data[0]).0x70a08231 with:
                        gas gas_remaining wei
                       args address(arg2)
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                return 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee, 
                       0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee,
                       address(arg1),
                       ext_call.return_data[0] << 144,
                       ext_call.return_data[32] << 144,
                       (Mask(112, 0, ext_call.return_data[0]) * (10^18 * ext_call.return_data[0]) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                       (Mask(112, 0, ext_call.return_data[32]) * (10^18 * ext_call.return_data[0]) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                       eth.balance(arg2),
                       ext_call.return_data[0],
                       ext_call.return_data[0],
                       ext_call.return_data[0]
            require ext_code.size(address(ext_call.return_data[0]))
            staticcall address(ext_call.return_data[0]).0x70a08231 with:
                    gas gas_remaining wei
                   args address(arg2)
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if address(ext_call.return_data[0]) == 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7:
                return 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee, 
                       0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee,
                       address(arg1),
                       ext_call.return_data[0] << 144,
                       ext_call.return_data[32] << 144,
                       (Mask(112, 0, ext_call.return_data[0]) * (10^18 * ext_call.return_data[0]) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                       (Mask(112, 0, ext_call.return_data[32]) * (10^18 * ext_call.return_data[0]) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                       ext_call.return_data[0],
                       eth.balance(arg2),
                       ext_call.return_data[0],
                       ext_call.return_data[0]
            require ext_code.size(address(ext_call.return_data[0]))
            staticcall address(ext_call.return_data[0]).0x70a08231 with:
                    gas gas_remaining wei
                   args address(arg2)
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            return 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee, 
                   0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee,
                   address(arg1),
                   ext_call.return_data[0] << 144,
                   ext_call.return_data[32] << 144,
                   (Mask(112, 0, ext_call.return_data[0]) * (10^18 * ext_call.return_data[0]) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                   (Mask(112, 0, ext_call.return_data[32]) * (10^18 * ext_call.return_data[0]) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                   ext_call.return_data[0],
                   ext_call.return_data[0],
                   ext_call.return_data[0],
                   ext_call.return_data[0]
        if not (10^18 * ext_call.return_data[0]) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]:
            if not (10^18 * ext_call.return_data[0]) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]:
                if address(ext_call.return_data[0]) == 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7:
                    if address(ext_call.return_data[0]) == 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7:
                        return 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee, 
                               address(ext_call.return_data[0]),
                               address(arg1),
                               ext_call.return_data[0] << 144,
                               ext_call.return_data[32] << 144,
                               0,
                               0,
                               eth.balance(arg2),
                               eth.balance(arg2),
                               ext_call.return_data[0],
                               ext_call.return_data[0]
                    require ext_code.size(address(ext_call.return_data[0]))
                    staticcall address(ext_call.return_data[0]).0x70a08231 with:
                            gas gas_remaining wei
                           args address(arg2)
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    return 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee, 
                           address(ext_call.return_data[0]),
                           address(arg1),
                           ext_call.return_data[0] << 144,
                           ext_call.return_data[32] << 144,
                           0,
                           0,
                           eth.balance(arg2),
                           ext_call.return_data[0],
                           ext_call.return_data[0],
                           ext_call.return_data[0]
                require ext_code.size(address(ext_call.return_data[0]))
                staticcall address(ext_call.return_data[0]).0x70a08231 with:
                        gas gas_remaining wei
                       args address(arg2)
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if address(ext_call.return_data[0]) == 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7:
                    return 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee, 
                           address(ext_call.return_data[0]),
                           address(arg1),
                           ext_call.return_data[0] << 144,
                           ext_call.return_data[32] << 144,
                           0,
                           0,
                           ext_call.return_data[0],
                           eth.balance(arg2),
                           ext_call.return_data[0],
                           ext_call.return_data[0]
                require ext_code.size(address(ext_call.return_data[0]))
                staticcall address(ext_call.return_data[0]).0x70a08231 with:
                        gas gas_remaining wei
                       args address(arg2)
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                return 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee, 
                       address(ext_call.return_data[0]),
                       address(arg1),
                       ext_call.return_data[0] << 144,
                       ext_call.return_data[32] << 144,
                       0,
                       0,
                       ext_call.return_data[0],
                       ext_call.return_data[0],
                       ext_call.return_data[0],
                       ext_call.return_data[0]
            require (10^18 * ext_call.return_data[0]) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]
            if Mask(112, 0, ext_call.return_data[32]) * (10^18 * ext_call.return_data[0]) + (ext_call.return_data[0] / 2) / ext_call.return_data[0] / (10^18 * ext_call.return_data[0]) + (ext_call.return_data[0] / 2) / ext_call.return_data[0] != Mask(112, 0, ext_call.return_data[32]):
                revert with 0, 'math-not-safe'
            if (Mask(112, 0, ext_call.return_data[32]) * (10^18 * ext_call.return_data[0]) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 < Mask(112, 0, ext_call.return_data[32]) * (10^18 * ext_call.return_data[0]) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]:
                revert with 0, 'math-not-safe'
            if address(ext_call.return_data[0]) == 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7:
                if address(ext_call.return_data[0]) == 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7:
                    return 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee, 
                           address(ext_call.return_data[0]),
                           address(arg1),
                           ext_call.return_data[0] << 144,
                           ext_call.return_data[32] << 144,
                           0,
                           (Mask(112, 0, ext_call.return_data[32]) * (10^18 * ext_call.return_data[0]) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                           eth.balance(arg2),
                           eth.balance(arg2),
                           ext_call.return_data[0],
                           ext_call.return_data[0]
                require ext_code.size(address(ext_call.return_data[0]))
                staticcall address(ext_call.return_data[0]).0x70a08231 with:
                        gas gas_remaining wei
                       args address(arg2)
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                return 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee, 
                       address(ext_call.return_data[0]),
                       address(arg1),
                       ext_call.return_data[0] << 144,
                       ext_call.return_data[32] << 144,
                       0,
                       (Mask(112, 0, ext_call.return_data[32]) * (10^18 * ext_call.return_data[0]) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                       eth.balance(arg2),
                       ext_call.return_data[0],
                       ext_call.return_data[0],
                       ext_call.return_data[0]
            require ext_code.size(address(ext_call.return_data[0]))
            staticcall address(ext_call.return_data[0]).0x70a08231 with:
                    gas gas_remaining wei
                   args address(arg2)
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if address(ext_call.return_data[0]) == 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7:
                return 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee, 
                       address(ext_call.return_data[0]),
                       address(arg1),
                       ext_call.return_data[0] << 144,
                       ext_call.return_data[32] << 144,
                       0,
                       (Mask(112, 0, ext_call.return_data[32]) * (10^18 * ext_call.return_data[0]) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                       ext_call.return_data[0],
                       eth.balance(arg2),
                       ext_call.return_data[0],
                       ext_call.return_data[0]
            require ext_code.size(address(ext_call.return_data[0]))
            staticcall address(ext_call.return_data[0]).0x70a08231 with:
                    gas gas_remaining wei
                   args address(arg2)
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            return 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee, 
                   address(ext_call.return_data[0]),
                   address(arg1),
                   ext_call.return_data[0] << 144,
                   ext_call.return_data[32] << 144,
                   0,
                   (Mask(112, 0, ext_call.return_data[32]) * (10^18 * ext_call.return_data[0]) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                   ext_call.return_data[0],
                   ext_call.return_data[0],
                   ext_call.return_data[0],
                   ext_call.return_data[0]
        require (10^18 * ext_call.return_data[0]) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]
        if Mask(112, 0, ext_call.return_data[0]) * (10^18 * ext_call.return_data[0]) + (ext_call.return_data[0] / 2) / ext_call.return_data[0] / (10^18 * ext_call.return_data[0]) + (ext_call.return_data[0] / 2) / ext_call.return_data[0] != Mask(112, 0, ext_call.return_data[0]):
            revert with 0, 'math-not-safe'
        if (Mask(112, 0, ext_call.return_data[0]) * (10^18 * ext_call.return_data[0]) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 < Mask(112, 0, ext_call.return_data[0]) * (10^18 * ext_call.return_data[0]) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]:
            revert with 0, 'math-not-safe'
        if not (10^18 * ext_call.return_data[0]) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]:
            if address(ext_call.return_data[0]) == 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7:
                if address(ext_call.return_data[0]) == 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7:
                    return 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee, 
                           address(ext_call.return_data[0]),
                           address(arg1),
                           ext_call.return_data[0] << 144,
                           ext_call.return_data[32] << 144,
                           (Mask(112, 0, ext_call.return_data[0]) * (10^18 * ext_call.return_data[0]) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                           0,
                           eth.balance(arg2),
                           eth.balance(arg2),
                           ext_call.return_data[0],
                           ext_call.return_data[0]
                require ext_code.size(address(ext_call.return_data[0]))
                staticcall address(ext_call.return_data[0]).0x70a08231 with:
                        gas gas_remaining wei
                       args address(arg2)
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                return 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee, 
                       address(ext_call.return_data[0]),
                       address(arg1),
                       ext_call.return_data[0] << 144,
                       ext_call.return_data[32] << 144,
                       (Mask(112, 0, ext_call.return_data[0]) * (10^18 * ext_call.return_data[0]) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                       0,
                       eth.balance(arg2),
                       ext_call.return_data[0],
                       ext_call.return_data[0],
                       ext_call.return_data[0]
            require ext_code.size(address(ext_call.return_data[0]))
            staticcall address(ext_call.return_data[0]).0x70a08231 with:
                    gas gas_remaining wei
                   args address(arg2)
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if address(ext_call.return_data[0]) == 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7:
                return 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee, 
                       address(ext_call.return_data[0]),
                       address(arg1),
                       ext_call.return_data[0] << 144,
                       ext_call.return_data[32] << 144,
                       (Mask(112, 0, ext_call.return_data[0]) * (10^18 * ext_call.return_data[0]) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                       0,
                       ext_call.return_data[0],
                       eth.balance(arg2),
                       ext_call.return_data[0],
                       ext_call.return_data[0]
            require ext_code.size(address(ext_call.return_data[0]))
            staticcall address(ext_call.return_data[0]).0x70a08231 with:
                    gas gas_remaining wei
                   args address(arg2)
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            return 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee, 
                   address(ext_call.return_data[0]),
                   address(arg1),
                   ext_call.return_data[0] << 144,
                   ext_call.return_data[32] << 144,
                   (Mask(112, 0, ext_call.return_data[0]) * (10^18 * ext_call.return_data[0]) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                   0,
                   ext_call.return_data[0],
                   ext_call.return_data[0],
                   ext_call.return_data[0],
                   ext_call.return_data[0]
        require (10^18 * ext_call.return_data[0]) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]
        if Mask(112, 0, ext_call.return_data[32]) * (10^18 * ext_call.return_data[0]) + (ext_call.return_data[0] / 2) / ext_call.return_data[0] / (10^18 * ext_call.return_data[0]) + (ext_call.return_data[0] / 2) / ext_call.return_data[0] != Mask(112, 0, ext_call.return_data[32]):
            revert with 0, 'math-not-safe'
        if (Mask(112, 0, ext_call.return_data[32]) * (10^18 * ext_call.return_data[0]) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 < Mask(112, 0, ext_call.return_data[32]) * (10^18 * ext_call.return_data[0]) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]:
            revert with 0, 'math-not-safe'
        if address(ext_call.return_data[0]) == 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7:
            if address(ext_call.return_data[0]) == 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7:
                return 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee, 
                       address(ext_call.return_data[0]),
                       address(arg1),
                       ext_call.return_data[0] << 144,
                       ext_call.return_data[32] << 144,
                       (Mask(112, 0, ext_call.return_data[0]) * (10^18 * ext_call.return_data[0]) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                       (Mask(112, 0, ext_call.return_data[32]) * (10^18 * ext_call.return_data[0]) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                       eth.balance(arg2),
                       eth.balance(arg2),
                       ext_call.return_data[0],
                       ext_call.return_data[0]
            require ext_code.size(address(ext_call.return_data[0]))
            staticcall address(ext_call.return_data[0]).0x70a08231 with:
                    gas gas_remaining wei
                   args address(arg2)
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            return 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee, 
                   address(ext_call.return_data[0]),
                   address(arg1),
                   ext_call.return_data[0] << 144,
                   ext_call.return_data[32] << 144,
                   (Mask(112, 0, ext_call.return_data[0]) * (10^18 * ext_call.return_data[0]) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                   (Mask(112, 0, ext_call.return_data[32]) * (10^18 * ext_call.return_data[0]) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                   eth.balance(arg2),
                   ext_call.return_data[0],
                   ext_call.return_data[0],
                   ext_call.return_data[0]
        require ext_code.size(address(ext_call.return_data[0]))
        staticcall address(ext_call.return_data[0]).0x70a08231 with:
                gas gas_remaining wei
               args address(arg2)
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if address(ext_call.return_data[0]) == 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7:
            return 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee, 
                   address(ext_call.return_data[0]),
                   address(arg1),
                   ext_call.return_data[0] << 144,
                   ext_call.return_data[32] << 144,
                   (Mask(112, 0, ext_call.return_data[0]) * (10^18 * ext_call.return_data[0]) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                   (Mask(112, 0, ext_call.return_data[32]) * (10^18 * ext_call.return_data[0]) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                   ext_call.return_data[0],
                   eth.balance(arg2),
                   ext_call.return_data[0],
                   ext_call.return_data[0]
        require ext_code.size(address(ext_call.return_data[0]))
        staticcall address(ext_call.return_data[0]).0x70a08231 with:
                gas gas_remaining wei
               args address(arg2)
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        return 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee, 
               address(ext_call.return_data[0]),
               address(arg1),
               ext_call.return_data[0] << 144,
               ext_call.return_data[32] << 144,
               (Mask(112, 0, ext_call.return_data[0]) * (10^18 * ext_call.return_data[0]) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
               (Mask(112, 0, ext_call.return_data[32]) * (10^18 * ext_call.return_data[0]) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
               ext_call.return_data[0],
               ext_call.return_data[0],
               ext_call.return_data[0],
               ext_call.return_data[0]
    if address(ext_call.return_data[0]) == 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7:
        if not (10^18 * ext_call.return_data[0]) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]:
            if not (10^18 * ext_call.return_data[0]) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]:
                if address(ext_call.return_data[0]) == 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7:
                    if address(ext_call.return_data[0]) == 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7:
                        return ext_call.return_data[0] << 192, 
                               0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee,
                               address(arg1),
                               ext_call.return_data[0] << 144,
                               ext_call.return_data[32] << 144,
                               0,
                               0,
                               eth.balance(arg2),
                               eth.balance(arg2),
                               ext_call.return_data[0],
                               ext_call.return_data[0]
                    require ext_code.size(address(ext_call.return_data[0]))
                    staticcall address(ext_call.return_data[0]).0x70a08231 with:
                            gas gas_remaining wei
                           args address(arg2)
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    return address(ext_call.return_data[0]), 
                           0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee,
                           address(arg1),
                           ext_call.return_data[0] << 144,
                           ext_call.return_data[32] << 144,
                           0,
                           0,
                           eth.balance(arg2),
                           ext_call.return_data[0],
                           ext_call.return_data[0],
                           ext_call.return_data[0]
                require ext_code.size(address(ext_call.return_data[0]))
                staticcall address(ext_call.return_data[0]).0x70a08231 with:
                        gas gas_remaining wei
                       args address(arg2)
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if address(ext_call.return_data[0]) == 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7:
                    return address(ext_call.return_data[0]), 
                           0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee,
                           address(arg1),
                           ext_call.return_data[0] << 144,
                           ext_call.return_data[32] << 144,
                           0,
                           0,
                           ext_call.return_data[0],
                           eth.balance(arg2),
                           ext_call.return_data[0],
                           ext_call.return_data[0]
                require ext_code.size(address(ext_call.return_data[0]))
                staticcall address(ext_call.return_data[0]).0x70a08231 with:
                        gas gas_remaining wei
                       args address(arg2)
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                return address(ext_call.return_data[0]), 
                       0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee,
                       address(arg1),
                       ext_call.return_data[0] << 144,
                       ext_call.return_data[32] << 144,
                       0,
                       0,
                       ext_call.return_data[0],
                       ext_call.return_data[0],
                       ext_call.return_data[0],
                       ext_call.return_data[0]
            require (10^18 * ext_call.return_data[0]) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]
            if Mask(112, 0, ext_call.return_data[32]) * (10^18 * ext_call.return_data[0]) + (ext_call.return_data[0] / 2) / ext_call.return_data[0] / (10^18 * ext_call.return_data[0]) + (ext_call.return_data[0] / 2) / ext_call.return_data[0] != Mask(112, 0, ext_call.return_data[32]):
                revert with 0, 'math-not-safe'
            if (Mask(112, 0, ext_call.return_data[32]) * (10^18 * ext_call.return_data[0]) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 < Mask(112, 0, ext_call.return_data[32]) * (10^18 * ext_call.return_data[0]) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]:
                revert with 0, 'math-not-safe'
            if address(ext_call.return_data[0]) == 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7:
                if address(ext_call.return_data[0]) == 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7:
                    return ext_call.return_data[0] << 192, 
                           0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee,
                           address(arg1),
                           ext_call.return_data[0] << 144,
                           ext_call.return_data[32] << 144,
                           0,
                           (Mask(112, 0, ext_call.return_data[32]) * (10^18 * ext_call.return_data[0]) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                           eth.balance(arg2),
                           eth.balance(arg2),
                           ext_call.return_data[0],
                           ext_call.return_data[0]
                require ext_code.size(address(ext_call.return_data[0]))
                staticcall address(ext_call.return_data[0]).0x70a08231 with:
                        gas gas_remaining wei
                       args address(arg2)
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                return address(ext_call.return_data[0]), 
                       0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee,
                       address(arg1),
                       ext_call.return_data[0] << 144,
                       ext_call.return_data[32] << 144,
                       0,
                       (Mask(112, 0, ext_call.return_data[32]) * (10^18 * ext_call.return_data[0]) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                       eth.balance(arg2),
                       ext_call.return_data[0],
                       ext_call.return_data[0],
                       ext_call.return_data[0]
            require ext_code.size(address(ext_call.return_data[0]))
            staticcall address(ext_call.return_data[0]).0x70a08231 with:
                    gas gas_remaining wei
                   args address(arg2)
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if address(ext_call.return_data[0]) == 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7:
                return address(ext_call.return_data[0]), 
                       0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee,
                       address(arg1),
                       ext_call.return_data[0] << 144,
                       ext_call.return_data[32] << 144,
                       0,
                       (Mask(112, 0, ext_call.return_data[32]) * (10^18 * ext_call.return_data[0]) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                       ext_call.return_data[0],
                       eth.balance(arg2),
                       ext_call.return_data[0],
                       ext_call.return_data[0]
            require ext_code.size(address(ext_call.return_data[0]))
            staticcall address(ext_call.return_data[0]).0x70a08231 with:
                    gas gas_remaining wei
                   args address(arg2)
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            return address(ext_call.return_data[0]), 
                   0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee,
                   address(arg1),
                   ext_call.return_data[0] << 144,
                   ext_call.return_data[32] << 144,
                   0,
                   (Mask(112, 0, ext_call.return_data[32]) * (10^18 * ext_call.return_data[0]) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                   ext_call.return_data[0],
                   ext_call.return_data[0],
                   ext_call.return_data[0],
                   ext_call.return_data[0]
        require (10^18 * ext_call.return_data[0]) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]
        if Mask(112, 0, ext_call.return_data[0]) * (10^18 * ext_call.return_data[0]) + (ext_call.return_data[0] / 2) / ext_call.return_data[0] / (10^18 * ext_call.return_data[0]) + (ext_call.return_data[0] / 2) / ext_call.return_data[0] != Mask(112, 0, ext_call.return_data[0]):
            revert with 0, 'math-not-safe'
        if (Mask(112, 0, ext_call.return_data[0]) * (10^18 * ext_call.return_data[0]) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 < Mask(112, 0, ext_call.return_data[0]) * (10^18 * ext_call.return_data[0]) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]:
            revert with 0, 'math-not-safe'
        if not (10^18 * ext_call.return_data[0]) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]:
            if address(ext_call.return_data[0]) == 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7:
                if address(ext_call.return_data[0]) == 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7:
                    return ext_call.return_data[0] << 192, 
                           0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee,
                           address(arg1),
                           ext_call.return_data[0] << 144,
                           ext_call.return_data[32] << 144,
                           (Mask(112, 0, ext_call.return_data[0]) * (10^18 * ext_call.return_data[0]) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                           0,
                           eth.balance(arg2),
                           eth.balance(arg2),
                           ext_call.return_data[0],
                           ext_call.return_data[0]
                require ext_code.size(address(ext_call.return_data[0]))
                staticcall address(ext_call.return_data[0]).0x70a08231 with:
                        gas gas_remaining wei
                       args address(arg2)
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                return address(ext_call.return_data[0]), 
                       0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee,
                       address(arg1),
                       ext_call.return_data[0] << 144,
                       ext_call.return_data[32] << 144,
                       (Mask(112, 0, ext_call.return_data[0]) * (10^18 * ext_call.return_data[0]) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                       0,
                       eth.balance(arg2),
                       ext_call.return_data[0],
                       ext_call.return_data[0],
                       ext_call.return_data[0]
            require ext_code.size(address(ext_call.return_data[0]))
            staticcall address(ext_call.return_data[0]).0x70a08231 with:
                    gas gas_remaining wei
                   args address(arg2)
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if address(ext_call.return_data[0]) == 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7:
                return address(ext_call.return_data[0]), 
                       0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee,
                       address(arg1),
                       ext_call.return_data[0] << 144,
                       ext_call.return_data[32] << 144,
                       (Mask(112, 0, ext_call.return_data[0]) * (10^18 * ext_call.return_data[0]) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                       0,
                       ext_call.return_data[0],
                       eth.balance(arg2),
                       ext_call.return_data[0],
                       ext_call.return_data[0]
            require ext_code.size(address(ext_call.return_data[0]))
            staticcall address(ext_call.return_data[0]).0x70a08231 with:
                    gas gas_remaining wei
                   args address(arg2)
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            return address(ext_call.return_data[0]), 
                   0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee,
                   address(arg1),
                   ext_call.return_data[0] << 144,
                   ext_call.return_data[32] << 144,
                   (Mask(112, 0, ext_call.return_data[0]) * (10^18 * ext_call.return_data[0]) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                   0,
                   ext_call.return_data[0],
                   ext_call.return_data[0],
                   ext_call.return_data[0],
                   ext_call.return_data[0]
        require (10^18 * ext_call.return_data[0]) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]
        if Mask(112, 0, ext_call.return_data[32]) * (10^18 * ext_call.return_data[0]) + (ext_call.return_data[0] / 2) / ext_call.return_data[0] / (10^18 * ext_call.return_data[0]) + (ext_call.return_data[0] / 2) / ext_call.return_data[0] != Mask(112, 0, ext_call.return_data[32]):
            revert with 0, 'math-not-safe'
        if (Mask(112, 0, ext_call.return_data[32]) * (10^18 * ext_call.return_data[0]) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 < Mask(112, 0, ext_call.return_data[32]) * (10^18 * ext_call.return_data[0]) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]:
            revert with 0, 'math-not-safe'
        if address(ext_call.return_data[0]) == 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7:
            if address(ext_call.return_data[0]) == 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7:
                return ext_call.return_data[0] << 192, 
                       0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee,
                       address(arg1),
                       ext_call.return_data[0] << 144,
                       ext_call.return_data[32] << 144,
                       (Mask(112, 0, ext_call.return_data[0]) * (10^18 * ext_call.return_data[0]) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                       (Mask(112, 0, ext_call.return_data[32]) * (10^18 * ext_call.return_data[0]) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                       eth.balance(arg2),
                       eth.balance(arg2),
                       ext_call.return_data[0],
                       ext_call.return_data[0]
            require ext_code.size(address(ext_call.return_data[0]))
            staticcall address(ext_call.return_data[0]).0x70a08231 with:
                    gas gas_remaining wei
                   args address(arg2)
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            return address(ext_call.return_data[0]), 
                   0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee,
                   address(arg1),
                   ext_call.return_data[0] << 144,
                   ext_call.return_data[32] << 144,
                   (Mask(112, 0, ext_call.return_data[0]) * (10^18 * ext_call.return_data[0]) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                   (Mask(112, 0, ext_call.return_data[32]) * (10^18 * ext_call.return_data[0]) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                   eth.balance(arg2),
                   ext_call.return_data[0],
                   ext_call.return_data[0],
                   ext_call.return_data[0]
        require ext_code.size(address(ext_call.return_data[0]))
        staticcall address(ext_call.return_data[0]).0x70a08231 with:
                gas gas_remaining wei
               args address(arg2)
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if address(ext_call.return_data[0]) == 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7:
            return address(ext_call.return_data[0]), 
                   0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee,
                   address(arg1),
                   ext_call.return_data[0] << 144,
                   ext_call.return_data[32] << 144,
                   (Mask(112, 0, ext_call.return_data[0]) * (10^18 * ext_call.return_data[0]) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                   (Mask(112, 0, ext_call.return_data[32]) * (10^18 * ext_call.return_data[0]) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                   ext_call.return_data[0],
                   eth.balance(arg2),
                   ext_call.return_data[0],
                   ext_call.return_data[0]
        require ext_code.size(address(ext_call.return_data[0]))
        staticcall address(ext_call.return_data[0]).0x70a08231 with:
                gas gas_remaining wei
               args address(arg2)
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        return address(ext_call.return_data[0]), 
               0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee,
               address(arg1),
               ext_call.return_data[0] << 144,
               ext_call.return_data[32] << 144,
               (Mask(112, 0, ext_call.return_data[0]) * (10^18 * ext_call.return_data[0]) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
               (Mask(112, 0, ext_call.return_data[32]) * (10^18 * ext_call.return_data[0]) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
               ext_call.return_data[0],
               ext_call.return_data[0],
               ext_call.return_data[0],
               ext_call.return_data[0]
    if not (10^18 * ext_call.return_data[0]) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]:
        if not (10^18 * ext_call.return_data[0]) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]:
            if address(ext_call.return_data[0]) == 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7:
                if address(ext_call.return_data[0]) == 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7:
                    return ext_call.return_data[0] << 192, 
                           address(ext_call.return_data[0]),
                           address(arg1),
                           ext_call.return_data[0] << 144,
                           ext_call.return_data[32] << 144,
                           0,
                           0,
                           eth.balance(arg2),
                           eth.balance(arg2),
                           ext_call.return_data[0],
                           ext_call.return_data[0]
                require ext_code.size(address(ext_call.return_data[0]))
                staticcall address(ext_call.return_data[0]).0x70a08231 with:
                        gas gas_remaining wei
                       args address(arg2)
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                return address(ext_call.return_data[0]), 
                       address(ext_call.return_data[0]),
                       address(arg1),
                       ext_call.return_data[0] << 144,
                       ext_call.return_data[32] << 144,
                       0,
                       0,
                       eth.balance(arg2),
                       ext_call.return_data[0],
                       ext_call.return_data[0],
                       ext_call.return_data[0]
            require ext_code.size(address(ext_call.return_data[0]))
            staticcall address(ext_call.return_data[0]).0x70a08231 with:
                    gas gas_remaining wei
                   args address(arg2)
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if address(ext_call.return_data[0]) == 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7:
                return address(ext_call.return_data[0]), 
                       address(ext_call.return_data[0]),
                       address(arg1),
                       ext_call.return_data[0] << 144,
                       ext_call.return_data[32] << 144,
                       0,
                       0,
                       ext_call.return_data[0],
                       eth.balance(arg2),
                       ext_call.return_data[0],
                       ext_call.return_data[0]
            require ext_code.size(address(ext_call.return_data[0]))
            staticcall address(ext_call.return_data[0]).0x70a08231 with:
                    gas gas_remaining wei
                   args address(arg2)
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            return address(ext_call.return_data[0]), 
                   address(ext_call.return_data[0]),
                   address(arg1),
                   ext_call.return_data[0] << 144,
                   ext_call.return_data[32] << 144,
                   0,
                   0,
                   ext_call.return_data[0],
                   ext_call.return_data[0],
                   ext_call.return_data[0],
                   ext_call.return_data[0]
        require (10^18 * ext_call.return_data[0]) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]
        if Mask(112, 0, ext_call.return_data[32]) * (10^18 * ext_call.return_data[0]) + (ext_call.return_data[0] / 2) / ext_call.return_data[0] / (10^18 * ext_call.return_data[0]) + (ext_call.return_data[0] / 2) / ext_call.return_data[0] != Mask(112, 0, ext_call.return_data[32]):
            revert with 0, 'math-not-safe'
        if (Mask(112, 0, ext_call.return_data[32]) * (10^18 * ext_call.return_data[0]) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 < Mask(112, 0, ext_call.return_data[32]) * (10^18 * ext_call.return_data[0]) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]:
            revert with 0, 'math-not-safe'
        if address(ext_call.return_data[0]) == 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7:
            if address(ext_call.return_data[0]) == 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7:
                return ext_call.return_data[0] << 192, 
                       address(ext_call.return_data[0]),
                       address(arg1),
                       ext_call.return_data[0] << 144,
                       ext_call.return_data[32] << 144,
                       0,
                       (Mask(112, 0, ext_call.return_data[32]) * (10^18 * ext_call.return_data[0]) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                       eth.balance(arg2),
                       eth.balance(arg2),
                       ext_call.return_data[0],
                       ext_call.return_data[0]
            require ext_code.size(address(ext_call.return_data[0]))
            staticcall address(ext_call.return_data[0]).0x70a08231 with:
                    gas gas_remaining wei
                   args address(arg2)
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            return address(ext_call.return_data[0]), 
                   address(ext_call.return_data[0]),
                   address(arg1),
                   ext_call.return_data[0] << 144,
                   ext_call.return_data[32] << 144,
                   0,
                   (Mask(112, 0, ext_call.return_data[32]) * (10^18 * ext_call.return_data[0]) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                   eth.balance(arg2),
                   ext_call.return_data[0],
                   ext_call.return_data[0],
                   ext_call.return_data[0]
        require ext_code.size(address(ext_call.return_data[0]))
        staticcall address(ext_call.return_data[0]).0x70a08231 with:
                gas gas_remaining wei
               args address(arg2)
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if address(ext_call.return_data[0]) == 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7:
            return address(ext_call.return_data[0]), 
                   address(ext_call.return_data[0]),
                   address(arg1),
                   ext_call.return_data[0] << 144,
                   ext_call.return_data[32] << 144,
                   0,
                   (Mask(112, 0, ext_call.return_data[32]) * (10^18 * ext_call.return_data[0]) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                   ext_call.return_data[0],
                   eth.balance(arg2),
                   ext_call.return_data[0],
                   ext_call.return_data[0]
        require ext_code.size(address(ext_call.return_data[0]))
        staticcall address(ext_call.return_data[0]).0x70a08231 with:
                gas gas_remaining wei
               args address(arg2)
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        return address(ext_call.return_data[0]), 
               address(ext_call.return_data[0]),
               address(arg1),
               ext_call.return_data[0] << 144,
               ext_call.return_data[32] << 144,
               0,
               (Mask(112, 0, ext_call.return_data[32]) * (10^18 * ext_call.return_data[0]) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
               ext_call.return_data[0],
               ext_call.return_data[0],
               ext_call.return_data[0],
               ext_call.return_data[0]
    require (10^18 * ext_call.return_data[0]) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]
    if Mask(112, 0, ext_call.return_data[0]) * (10^18 * ext_call.return_data[0]) + (ext_call.return_data[0] / 2) / ext_call.return_data[0] / (10^18 * ext_call.return_data[0]) + (ext_call.return_data[0] / 2) / ext_call.return_data[0] != Mask(112, 0, ext_call.return_data[0]):
        revert with 0, 'math-not-safe'
    if (Mask(112, 0, ext_call.return_data[0]) * (10^18 * ext_call.return_data[0]) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 < Mask(112, 0, ext_call.return_data[0]) * (10^18 * ext_call.return_data[0]) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]:
        revert with 0, 'math-not-safe'
    if not (10^18 * ext_call.return_data[0]) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]:
        if address(ext_call.return_data[0]) == 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7:
            if address(ext_call.return_data[0]) == 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7:
                return ext_call.return_data[0] << 192, 
                       address(ext_call.return_data[0]),
                       address(arg1),
                       ext_call.return_data[0] << 144,
                       ext_call.return_data[32] << 144,
                       (Mask(112, 0, ext_call.return_data[0]) * (10^18 * ext_call.return_data[0]) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                       0,
                       eth.balance(arg2),
                       eth.balance(arg2),
                       ext_call.return_data[0],
                       ext_call.return_data[0]
            require ext_code.size(address(ext_call.return_data[0]))
            staticcall address(ext_call.return_data[0]).0x70a08231 with:
                    gas gas_remaining wei
                   args address(arg2)
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            return address(ext_call.return_data[0]), 
                   address(ext_call.return_data[0]),
                   address(arg1),
                   ext_call.return_data[0] << 144,
                   ext_call.return_data[32] << 144,
                   (Mask(112, 0, ext_call.return_data[0]) * (10^18 * ext_call.return_data[0]) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                   0,
                   eth.balance(arg2),
                   ext_call.return_data[0],
                   ext_call.return_data[0],
                   ext_call.return_data[0]
        require ext_code.size(address(ext_call.return_data[0]))
        staticcall address(ext_call.return_data[0]).0x70a08231 with:
                gas gas_remaining wei
               args address(arg2)
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if address(ext_call.return_data[0]) == 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7:
            return address(ext_call.return_data[0]), 
                   address(ext_call.return_data[0]),
                   address(arg1),
                   ext_call.return_data[0] << 144,
                   ext_call.return_data[32] << 144,
                   (Mask(112, 0, ext_call.return_data[0]) * (10^18 * ext_call.return_data[0]) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                   0,
                   ext_call.return_data[0],
                   eth.balance(arg2),
                   ext_call.return_data[0],
                   ext_call.return_data[0]
        require ext_code.size(address(ext_call.return_data[0]))
        staticcall address(ext_call.return_data[0]).0x70a08231 with:
                gas gas_remaining wei
               args address(arg2)
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        return address(ext_call.return_data[0]), 
               address(ext_call.return_data[0]),
               address(arg1),
               ext_call.return_data[0] << 144,
               ext_call.return_data[32] << 144,
               (Mask(112, 0, ext_call.return_data[0]) * (10^18 * ext_call.return_data[0]) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
               0,
               ext_call.return_data[0],
               ext_call.return_data[0],
               ext_call.return_data[0],
               ext_call.return_data[0]
    require (10^18 * ext_call.return_data[0]) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]
    if Mask(112, 0, ext_call.return_data[32]) * (10^18 * ext_call.return_data[0]) + (ext_call.return_data[0] / 2) / ext_call.return_data[0] / (10^18 * ext_call.return_data[0]) + (ext_call.return_data[0] / 2) / ext_call.return_data[0] != Mask(112, 0, ext_call.return_data[32]):
        revert with 0, 'math-not-safe'
    if (Mask(112, 0, ext_call.return_data[32]) * (10^18 * ext_call.return_data[0]) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 < Mask(112, 0, ext_call.return_data[32]) * (10^18 * ext_call.return_data[0]) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]:
        revert with 0, 'math-not-safe'
    if address(ext_call.return_data[0]) == 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7:
        if address(ext_call.return_data[0]) == 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7:
            return ext_call.return_data[0] << 192, 
                   address(ext_call.return_data[0]),
                   address(arg1),
                   ext_call.return_data[0] << 144,
                   ext_call.return_data[32] << 144,
                   (Mask(112, 0, ext_call.return_data[0]) * (10^18 * ext_call.return_data[0]) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                   (Mask(112, 0, ext_call.return_data[32]) * (10^18 * ext_call.return_data[0]) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                   eth.balance(arg2),
                   eth.balance(arg2),
                   ext_call.return_data[0],
                   ext_call.return_data[0]
        require ext_code.size(address(ext_call.return_data[0]))
        staticcall address(ext_call.return_data[0]).0x70a08231 with:
                gas gas_remaining wei
               args address(arg2)
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        return address(ext_call.return_data[0]), 
               address(ext_call.return_data[0]),
               address(arg1),
               ext_call.return_data[0] << 144,
               ext_call.return_data[32] << 144,
               (Mask(112, 0, ext_call.return_data[0]) * (10^18 * ext_call.return_data[0]) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
               (Mask(112, 0, ext_call.return_data[32]) * (10^18 * ext_call.return_data[0]) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
               eth.balance(arg2),
               ext_call.return_data[0],
               ext_call.return_data[0],
               ext_call.return_data[0]
    require ext_code.size(address(ext_call.return_data[0]))
    staticcall address(ext_call.return_data[0]).0x70a08231 with:
            gas gas_remaining wei
           args address(arg2)
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if address(ext_call.return_data[0]) == 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7:
        return address(ext_call.return_data[0]), 
               address(ext_call.return_data[0]),
               address(arg1),
               ext_call.return_data[0] << 144,
               ext_call.return_data[32] << 144,
               (Mask(112, 0, ext_call.return_data[0]) * (10^18 * ext_call.return_data[0]) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
               (Mask(112, 0, ext_call.return_data[32]) * (10^18 * ext_call.return_data[0]) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
               ext_call.return_data[0],
               eth.balance(arg2),
               ext_call.return_data[0],
               ext_call.return_data[0]
    require ext_code.size(address(ext_call.return_data[0]))
    staticcall address(ext_call.return_data[0]).0x70a08231 with:
            gas gas_remaining wei
           args address(arg2)
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    return address(ext_call.return_data[0]), 
           address(ext_call.return_data[0]),
           address(arg1),
           ext_call.return_data[0] << 144,
           ext_call.return_data[32] << 144,
           (Mask(112, 0, ext_call.return_data[0]) * (10^18 * ext_call.return_data[0]) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
           (Mask(112, 0, ext_call.return_data[32]) * (10^18 * ext_call.return_data[0]) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
           ext_call.return_data[0],
           ext_call.return_data[0],
           ext_call.return_data[0],
           ext_call.return_data[0]
}

function getPosition(address arg1, address[] arg2) payable {
    require calldata.size - 4 >= 64
    require arg1 == arg1
    require arg2 <= test266151307()
    require calldata.size > arg2 + 35
    require arg2.length <= test266151307()
    require (32 * arg2.length) + 128 >= 96 and (32 * arg2.length) + 128 <= test266151307()
    mem[96] = arg2.length
    require calldata.size >= arg2 + (32 * arg2.length) + 36
    s = arg2 + 36
    t = 128
    idx = 0
    while idx < arg2.length:
        require cd[s] == address(cd[s])
        mem[t] = cd[s]
        s = s + 32
        t = t + 32
        idx = idx + 1
        continue 
    require arg2.length <= test266151307()
    mem[(32 * arg2.length) + 128] = arg2.length
    mem[64] = (64 * arg2.length) + 160
    if not arg2.length:
        idx = 0
        while idx < arg2.length:
            require idx < mem[96]
            _1407 = mem[(32 * idx) + 128]
            _1409 = mem[64]
            mem[64] = mem[64] + 352
            mem[_1409] = 0
            mem[_1409 + 32] = 0
            mem[_1409 + 64] = 0
            mem[_1409 + 96] = 0
            mem[_1409 + 128] = 0
            mem[_1409 + 160] = 0
            mem[_1409 + 192] = 0
            mem[_1409 + 224] = 0
            mem[_1409 + 256] = 0
            mem[_1409 + 288] = 0
            mem[_1409 + 320] = 0
            require ext_code.size(address(_1407))
            staticcall address(_1407).getReserves() with:
                    gas gas_remaining wei
            mem[mem[64] len 96] = ext_call.return_data[0 len 96]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _1423 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 96
            _1435 = mem[_1423]
            require mem[_1423] == mem[_1423 + 18 len 14]
            _1440 = mem[_1423 + 32]
            require mem[_1423 + 32] == mem[_1423 + 50 len 14]
            require mem[_1423 + 64] == mem[_1423 + 92 len 4]
            require ext_code.size(address(_1407))
            staticcall address(_1407).token0() with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _1454 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _1456 = mem[_1454]
            require mem[_1454] == mem[_1454 + 12 len 20]
            require ext_code.size(address(_1407))
            staticcall address(_1407).token1() with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _1463 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _1464 = mem[_1463]
            require mem[_1463] == mem[_1463 + 12 len 20]
            mem[mem[64] + 4] = arg1
            require ext_code.size(address(_1407))
            staticcall address(_1407).0x70a08231 with:
                    gas gas_remaining wei
                   args address(arg1)
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _1471 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _1473 = mem[_1471]
            require ext_code.size(address(_1407))
            staticcall address(_1407).0x18160ddd with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _1477 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _1479 = mem[_1477]
            if 10^18 * _1473 / 10^18 != _1473:
                revert with 0, 'math-not-safe'
            if (10^18 * _1473) + (mem[_1477] / 2) < 10^18 * _1473:
                revert with 0, 'math-not-safe'
            require mem[_1477]
            _1491 = mem[64]
            mem[64] = mem[64] + 352
            if address(_1456) == 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7:
                mem[_1491] = 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee
                if address(_1464) == 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7:
                    mem[_1491 + 32] = 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee
                    mem[_1491 + 64] = address(_1407)
                    mem[_1491 + 96] = Mask(112, 0, _1435)
                    mem[_1491 + 128] = Mask(112, 0, _1440)
                    if not (10^18 * _1473) + (_1479 / 2) / _1479:
                        mem[_1491 + 160] = 0
                        if not (10^18 * _1473) + (_1479 / 2) / _1479:
                            mem[_1491 + 192] = 0
                            if address(_1456) == 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7:
                                mem[_1491 + 224] = eth.balance(arg1)
                                if address(_1464) == 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7:
                                    mem[_1491 + 256] = eth.balance(arg1)
                                else:
                                    mem[mem[64] + 4] = arg1
                                    require ext_code.size(address(_1464))
                                    staticcall address(_1464).0x70a08231 with:
                                            gas gas_remaining wei
                                           args address(arg1)
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _1647 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    mem[_1491 + 256] = mem[_1647]
                            else:
                                mem[mem[64] + 4] = arg1
                                require ext_code.size(address(_1456))
                                staticcall address(_1456).0x70a08231 with:
                                        gas gas_remaining wei
                                       args address(arg1)
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _1605 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                mem[_1491 + 224] = mem[_1605]
                                if address(_1464) == 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7:
                                    mem[_1491 + 256] = eth.balance(arg1)
                                else:
                                    mem[mem[64] + 4] = arg1
                                    require ext_code.size(address(_1464))
                                    staticcall address(_1464).0x70a08231 with:
                                            gas gas_remaining wei
                                           args address(arg1)
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _1851 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    mem[_1491 + 256] = mem[_1851]
                        else:
                            require (10^18 * _1473) + (_1479 / 2) / _1479
                            if Mask(112, 0, _1440) * (10^18 * _1473) + (_1479 / 2) / _1479 / (10^18 * _1473) + (_1479 / 2) / _1479 != Mask(112, 0, _1440):
                                revert with 0, 'math-not-safe'
                            if (Mask(112, 0, _1440) * (10^18 * _1473) + (_1479 / 2) / _1479) + 5 * 10^17 < Mask(112, 0, _1440) * (10^18 * _1473) + (_1479 / 2) / _1479:
                                revert with 0, 'math-not-safe'
                            mem[_1491 + 192] = (Mask(112, 0, _1440) * (10^18 * _1473) + (_1479 / 2) / _1479) + 5 * 10^17 / 10^18
                            if address(_1456) == 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7:
                                mem[_1491 + 224] = eth.balance(arg1)
                                if address(_1464) == 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7:
                                    mem[_1491 + 256] = eth.balance(arg1)
                                else:
                                    mem[mem[64] + 4] = arg1
                                    require ext_code.size(address(_1464))
                                    staticcall address(_1464).0x70a08231 with:
                                            gas gas_remaining wei
                                           args address(arg1)
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _1704 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    mem[_1491 + 256] = mem[_1704]
                            else:
                                mem[mem[64] + 4] = arg1
                                require ext_code.size(address(_1456))
                                staticcall address(_1456).0x70a08231 with:
                                        gas gas_remaining wei
                                       args address(arg1)
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _1651 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                mem[_1491 + 224] = mem[_1651]
                                if address(_1464) == 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7:
                                    mem[_1491 + 256] = eth.balance(arg1)
                                else:
                                    mem[mem[64] + 4] = arg1
                                    require ext_code.size(address(_1464))
                                    staticcall address(_1464).0x70a08231 with:
                                            gas gas_remaining wei
                                           args address(arg1)
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _1920 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    mem[_1491 + 256] = mem[_1920]
                    else:
                        require (10^18 * _1473) + (_1479 / 2) / _1479
                        if Mask(112, 0, _1435) * (10^18 * _1473) + (_1479 / 2) / _1479 / (10^18 * _1473) + (_1479 / 2) / _1479 != Mask(112, 0, _1435):
                            revert with 0, 'math-not-safe'
                        if (Mask(112, 0, _1435) * (10^18 * _1473) + (_1479 / 2) / _1479) + 5 * 10^17 < Mask(112, 0, _1435) * (10^18 * _1473) + (_1479 / 2) / _1479:
                            revert with 0, 'math-not-safe'
                        mem[_1491 + 160] = (Mask(112, 0, _1435) * (10^18 * _1473) + (_1479 / 2) / _1479) + 5 * 10^17 / 10^18
                        if not (10^18 * _1473) + (_1479 / 2) / _1479:
                            mem[_1491 + 192] = 0
                            if address(_1456) == 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7:
                                mem[_1491 + 224] = eth.balance(arg1)
                                if address(_1464) == 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7:
                                    mem[_1491 + 256] = eth.balance(arg1)
                                else:
                                    mem[mem[64] + 4] = arg1
                                    require ext_code.size(address(_1464))
                                    staticcall address(_1464).0x70a08231 with:
                                            gas gas_remaining wei
                                           args address(arg1)
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _1706 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    mem[_1491 + 256] = mem[_1706]
                            else:
                                mem[mem[64] + 4] = arg1
                                require ext_code.size(address(_1456))
                                staticcall address(_1456).0x70a08231 with:
                                        gas gas_remaining wei
                                       args address(arg1)
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _1654 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                mem[_1491 + 224] = mem[_1654]
                                if address(_1464) == 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7:
                                    mem[_1491 + 256] = eth.balance(arg1)
                                else:
                                    mem[mem[64] + 4] = arg1
                                    require ext_code.size(address(_1464))
                                    staticcall address(_1464).0x70a08231 with:
                                            gas gas_remaining wei
                                           args address(arg1)
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _1921 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    mem[_1491 + 256] = mem[_1921]
                        else:
                            require (10^18 * _1473) + (_1479 / 2) / _1479
                            if Mask(112, 0, _1440) * (10^18 * _1473) + (_1479 / 2) / _1479 / (10^18 * _1473) + (_1479 / 2) / _1479 != Mask(112, 0, _1440):
                                revert with 0, 'math-not-safe'
                            if (Mask(112, 0, _1440) * (10^18 * _1473) + (_1479 / 2) / _1479) + 5 * 10^17 < Mask(112, 0, _1440) * (10^18 * _1473) + (_1479 / 2) / _1479:
                                revert with 0, 'math-not-safe'
                            mem[_1491 + 192] = (Mask(112, 0, _1440) * (10^18 * _1473) + (_1479 / 2) / _1479) + 5 * 10^17 / 10^18
                            if address(_1456) == 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7:
                                mem[_1491 + 224] = eth.balance(arg1)
                                if address(_1464) == 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7:
                                    mem[_1491 + 256] = eth.balance(arg1)
                                else:
                                    mem[mem[64] + 4] = arg1
                                    require ext_code.size(address(_1464))
                                    staticcall address(_1464).0x70a08231 with:
                                            gas gas_remaining wei
                                           args address(arg1)
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _1773 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    mem[_1491 + 256] = mem[_1773]
                            else:
                                mem[mem[64] + 4] = arg1
                                require ext_code.size(address(_1456))
                                staticcall address(_1456).0x70a08231 with:
                                        gas gas_remaining wei
                                       args address(arg1)
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _1710 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                mem[_1491 + 224] = mem[_1710]
                                if address(_1464) == 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7:
                                    mem[_1491 + 256] = eth.balance(arg1)
                                else:
                                    mem[mem[64] + 4] = arg1
                                    require ext_code.size(address(_1464))
                                    staticcall address(_1464).0x70a08231 with:
                                            gas gas_remaining wei
                                           args address(arg1)
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _1981 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    mem[_1491 + 256] = mem[_1981]
                else:
                    mem[_1491 + 32] = address(_1464)
                    mem[_1491 + 64] = address(_1407)
                    mem[_1491 + 96] = Mask(112, 0, _1435)
                    mem[_1491 + 128] = Mask(112, 0, _1440)
                    if not (10^18 * _1473) + (_1479 / 2) / _1479:
                        mem[_1491 + 160] = 0
                        if not (10^18 * _1473) + (_1479 / 2) / _1479:
                            mem[_1491 + 192] = 0
                            if address(_1456) == 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7:
                                mem[_1491 + 224] = eth.balance(arg1)
                                if address(_1464) == 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7:
                                    mem[_1491 + 256] = eth.balance(arg1)
                                else:
                                    mem[mem[64] + 4] = arg1
                                    require ext_code.size(address(_1464))
                                    staticcall address(_1464).0x70a08231 with:
                                            gas gas_remaining wei
                                           args address(arg1)
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _1657 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    mem[_1491 + 256] = mem[_1657]
                            else:
                                mem[mem[64] + 4] = arg1
                                require ext_code.size(address(_1456))
                                staticcall address(_1456).0x70a08231 with:
                                        gas gas_remaining wei
                                       args address(arg1)
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _1613 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                mem[_1491 + 224] = mem[_1613]
                                if address(_1464) == 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7:
                                    mem[_1491 + 256] = eth.balance(arg1)
                                else:
                                    mem[mem[64] + 4] = arg1
                                    require ext_code.size(address(_1464))
                                    staticcall address(_1464).0x70a08231 with:
                                            gas gas_remaining wei
                                           args address(arg1)
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _1859 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    mem[_1491 + 256] = mem[_1859]
                        else:
                            require (10^18 * _1473) + (_1479 / 2) / _1479
                            if Mask(112, 0, _1440) * (10^18 * _1473) + (_1479 / 2) / _1479 / (10^18 * _1473) + (_1479 / 2) / _1479 != Mask(112, 0, _1440):
                                revert with 0, 'math-not-safe'
                            if (Mask(112, 0, _1440) * (10^18 * _1473) + (_1479 / 2) / _1479) + 5 * 10^17 < Mask(112, 0, _1440) * (10^18 * _1473) + (_1479 / 2) / _1479:
                                revert with 0, 'math-not-safe'
                            mem[_1491 + 192] = (Mask(112, 0, _1440) * (10^18 * _1473) + (_1479 / 2) / _1479) + 5 * 10^17 / 10^18
                            if address(_1456) == 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7:
                                mem[_1491 + 224] = eth.balance(arg1)
                                if address(_1464) == 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7:
                                    mem[_1491 + 256] = eth.balance(arg1)
                                else:
                                    mem[mem[64] + 4] = arg1
                                    require ext_code.size(address(_1464))
                                    staticcall address(_1464).0x70a08231 with:
                                            gas gas_remaining wei
                                           args address(arg1)
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _1712 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    mem[_1491 + 256] = mem[_1712]
                            else:
                                mem[mem[64] + 4] = arg1
                                require ext_code.size(address(_1456))
                                staticcall address(_1456).0x70a08231 with:
                                        gas gas_remaining wei
                                       args address(arg1)
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _1661 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                mem[_1491 + 224] = mem[_1661]
                                if address(_1464) == 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7:
                                    mem[_1491 + 256] = eth.balance(arg1)
                                else:
                                    mem[mem[64] + 4] = arg1
                                    require ext_code.size(address(_1464))
                                    staticcall address(_1464).0x70a08231 with:
                                            gas gas_remaining wei
                                           args address(arg1)
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _1926 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    mem[_1491 + 256] = mem[_1926]
                    else:
                        require (10^18 * _1473) + (_1479 / 2) / _1479
                        if Mask(112, 0, _1435) * (10^18 * _1473) + (_1479 / 2) / _1479 / (10^18 * _1473) + (_1479 / 2) / _1479 != Mask(112, 0, _1435):
                            revert with 0, 'math-not-safe'
                        if (Mask(112, 0, _1435) * (10^18 * _1473) + (_1479 / 2) / _1479) + 5 * 10^17 < Mask(112, 0, _1435) * (10^18 * _1473) + (_1479 / 2) / _1479:
                            revert with 0, 'math-not-safe'
                        mem[_1491 + 160] = (Mask(112, 0, _1435) * (10^18 * _1473) + (_1479 / 2) / _1479) + 5 * 10^17 / 10^18
                        if not (10^18 * _1473) + (_1479 / 2) / _1479:
                            mem[_1491 + 192] = 0
                            if address(_1456) == 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7:
                                mem[_1491 + 224] = eth.balance(arg1)
                                if address(_1464) == 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7:
                                    mem[_1491 + 256] = eth.balance(arg1)
                                else:
                                    mem[mem[64] + 4] = arg1
                                    require ext_code.size(address(_1464))
                                    staticcall address(_1464).0x70a08231 with:
                                            gas gas_remaining wei
                                           args address(arg1)
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _1714 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    mem[_1491 + 256] = mem[_1714]
                            else:
                                mem[mem[64] + 4] = arg1
                                require ext_code.size(address(_1456))
                                staticcall address(_1456).0x70a08231 with:
                                        gas gas_remaining wei
                                       args address(arg1)
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _1664 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                mem[_1491 + 224] = mem[_1664]
                                if address(_1464) == 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7:
                                    mem[_1491 + 256] = eth.balance(arg1)
                                else:
                                    mem[mem[64] + 4] = arg1
                                    require ext_code.size(address(_1464))
                                    staticcall address(_1464).0x70a08231 with:
                                            gas gas_remaining wei
                                           args address(arg1)
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _1927 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    mem[_1491 + 256] = mem[_1927]
                        else:
                            require (10^18 * _1473) + (_1479 / 2) / _1479
                            if Mask(112, 0, _1440) * (10^18 * _1473) + (_1479 / 2) / _1479 / (10^18 * _1473) + (_1479 / 2) / _1479 != Mask(112, 0, _1440):
                                revert with 0, 'math-not-safe'
                            if (Mask(112, 0, _1440) * (10^18 * _1473) + (_1479 / 2) / _1479) + 5 * 10^17 < Mask(112, 0, _1440) * (10^18 * _1473) + (_1479 / 2) / _1479:
                                revert with 0, 'math-not-safe'
                            mem[_1491 + 192] = (Mask(112, 0, _1440) * (10^18 * _1473) + (_1479 / 2) / _1479) + 5 * 10^17 / 10^18
                            if address(_1456) == 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7:
                                mem[_1491 + 224] = eth.balance(arg1)
                                if address(_1464) == 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7:
                                    mem[_1491 + 256] = eth.balance(arg1)
                                else:
                                    mem[mem[64] + 4] = arg1
                                    require ext_code.size(address(_1464))
                                    staticcall address(_1464).0x70a08231 with:
                                            gas gas_remaining wei
                                           args address(arg1)
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _1777 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    mem[_1491 + 256] = mem[_1777]
                            else:
                                mem[mem[64] + 4] = arg1
                                require ext_code.size(address(_1456))
                                staticcall address(_1456).0x70a08231 with:
                                        gas gas_remaining wei
                                       args address(arg1)
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _1718 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                mem[_1491 + 224] = mem[_1718]
                                if address(_1464) == 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7:
                                    mem[_1491 + 256] = eth.balance(arg1)
                                else:
                                    mem[mem[64] + 4] = arg1
                                    require ext_code.size(address(_1464))
                                    staticcall address(_1464).0x70a08231 with:
                                            gas gas_remaining wei
                                           args address(arg1)
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _1984 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    mem[_1491 + 256] = mem[_1984]
            else:
                mem[_1491] = address(_1456)
                if address(_1464) == 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7:
                    mem[_1491 + 32] = 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee
                    mem[_1491 + 64] = address(_1407)
                    mem[_1491 + 96] = Mask(112, 0, _1435)
                    mem[_1491 + 128] = Mask(112, 0, _1440)
                    if not (10^18 * _1473) + (_1479 / 2) / _1479:
                        mem[_1491 + 160] = 0
                        if not (10^18 * _1473) + (_1479 / 2) / _1479:
                            mem[_1491 + 192] = 0
                            if address(_1456) == 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7:
                                mem[_1491 + 224] = eth.balance(arg1)
                                if address(_1464) == 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7:
                                    mem[_1491 + 256] = eth.balance(arg1)
                                else:
                                    mem[mem[64] + 4] = arg1
                                    require ext_code.size(address(_1464))
                                    staticcall address(_1464).0x70a08231 with:
                                            gas gas_remaining wei
                                           args address(arg1)
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _1667 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    mem[_1491 + 256] = mem[_1667]
                            else:
                                mem[mem[64] + 4] = arg1
                                require ext_code.size(address(_1456))
                                staticcall address(_1456).0x70a08231 with:
                                        gas gas_remaining wei
                                       args address(arg1)
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _1621 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                mem[_1491 + 224] = mem[_1621]
                                if address(_1464) == 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7:
                                    mem[_1491 + 256] = eth.balance(arg1)
                                else:
                                    mem[mem[64] + 4] = arg1
                                    require ext_code.size(address(_1464))
                                    staticcall address(_1464).0x70a08231 with:
                                            gas gas_remaining wei
                                           args address(arg1)
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _1867 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    mem[_1491 + 256] = mem[_1867]
                        else:
                            require (10^18 * _1473) + (_1479 / 2) / _1479
                            if Mask(112, 0, _1440) * (10^18 * _1473) + (_1479 / 2) / _1479 / (10^18 * _1473) + (_1479 / 2) / _1479 != Mask(112, 0, _1440):
                                revert with 0, 'math-not-safe'
                            if (Mask(112, 0, _1440) * (10^18 * _1473) + (_1479 / 2) / _1479) + 5 * 10^17 < Mask(112, 0, _1440) * (10^18 * _1473) + (_1479 / 2) / _1479:
                                revert with 0, 'math-not-safe'
                            mem[_1491 + 192] = (Mask(112, 0, _1440) * (10^18 * _1473) + (_1479 / 2) / _1479) + 5 * 10^17 / 10^18
                            if address(_1456) == 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7:
                                mem[_1491 + 224] = eth.balance(arg1)
                                if address(_1464) == 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7:
                                    mem[_1491 + 256] = eth.balance(arg1)
                                else:
                                    mem[mem[64] + 4] = arg1
                                    require ext_code.size(address(_1464))
                                    staticcall address(_1464).0x70a08231 with:
                                            gas gas_remaining wei
                                           args address(arg1)
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _1720 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    mem[_1491 + 256] = mem[_1720]
                            else:
                                mem[mem[64] + 4] = arg1
                                require ext_code.size(address(_1456))
                                staticcall address(_1456).0x70a08231 with:
                                        gas gas_remaining wei
                                       args address(arg1)
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _1671 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                mem[_1491 + 224] = mem[_1671]
                                if address(_1464) == 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7:
                                    mem[_1491 + 256] = eth.balance(arg1)
                                else:
                                    mem[mem[64] + 4] = arg1
                                    require ext_code.size(address(_1464))
                                    staticcall address(_1464).0x70a08231 with:
                                            gas gas_remaining wei
                                           args address(arg1)
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _1932 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    mem[_1491 + 256] = mem[_1932]
                    else:
                        require (10^18 * _1473) + (_1479 / 2) / _1479
                        if Mask(112, 0, _1435) * (10^18 * _1473) + (_1479 / 2) / _1479 / (10^18 * _1473) + (_1479 / 2) / _1479 != Mask(112, 0, _1435):
                            revert with 0, 'math-not-safe'
                        if (Mask(112, 0, _1435) * (10^18 * _1473) + (_1479 / 2) / _1479) + 5 * 10^17 < Mask(112, 0, _1435) * (10^18 * _1473) + (_1479 / 2) / _1479:
                            revert with 0, 'math-not-safe'
                        mem[_1491 + 160] = (Mask(112, 0, _1435) * (10^18 * _1473) + (_1479 / 2) / _1479) + 5 * 10^17 / 10^18
                        if not (10^18 * _1473) + (_1479 / 2) / _1479:
                            mem[_1491 + 192] = 0
                            if address(_1456) == 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7:
                                mem[_1491 + 224] = eth.balance(arg1)
                                if address(_1464) == 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7:
                                    mem[_1491 + 256] = eth.balance(arg1)
                                else:
                                    mem[mem[64] + 4] = arg1
                                    require ext_code.size(address(_1464))
                                    staticcall address(_1464).0x70a08231 with:
                                            gas gas_remaining wei
                                           args address(arg1)
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _1722 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    mem[_1491 + 256] = mem[_1722]
                            else:
                                mem[mem[64] + 4] = arg1
                                require ext_code.size(address(_1456))
                                staticcall address(_1456).0x70a08231 with:
                                        gas gas_remaining wei
                                       args address(arg1)
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _1674 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                mem[_1491 + 224] = mem[_1674]
                                if address(_1464) == 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7:
                                    mem[_1491 + 256] = eth.balance(arg1)
                                else:
                                    mem[mem[64] + 4] = arg1
                                    require ext_code.size(address(_1464))
                                    staticcall address(_1464).0x70a08231 with:
                                            gas gas_remaining wei
                                           args address(arg1)
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _1933 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    mem[_1491 + 256] = mem[_1933]
                        else:
                            require (10^18 * _1473) + (_1479 / 2) / _1479
                            if Mask(112, 0, _1440) * (10^18 * _1473) + (_1479 / 2) / _1479 / (10^18 * _1473) + (_1479 / 2) / _1479 != Mask(112, 0, _1440):
                                revert with 0, 'math-not-safe'
                            if (Mask(112, 0, _1440) * (10^18 * _1473) + (_1479 / 2) / _1479) + 5 * 10^17 < Mask(112, 0, _1440) * (10^18 * _1473) + (_1479 / 2) / _1479:
                                revert with 0, 'math-not-safe'
                            mem[_1491 + 192] = (Mask(112, 0, _1440) * (10^18 * _1473) + (_1479 / 2) / _1479) + 5 * 10^17 / 10^18
                            if address(_1456) == 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7:
                                mem[_1491 + 224] = eth.balance(arg1)
                                if address(_1464) == 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7:
                                    mem[_1491 + 256] = eth.balance(arg1)
                                else:
                                    mem[mem[64] + 4] = arg1
                                    require ext_code.size(address(_1464))
                                    staticcall address(_1464).0x70a08231 with:
                                            gas gas_remaining wei
                                           args address(arg1)
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _1781 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    mem[_1491 + 256] = mem[_1781]
                            else:
                                mem[mem[64] + 4] = arg1
                                require ext_code.size(address(_1456))
                                staticcall address(_1456).0x70a08231 with:
                                        gas gas_remaining wei
                                       args address(arg1)
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _1726 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                mem[_1491 + 224] = mem[_1726]
                                if address(_1464) == 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7:
                                    mem[_1491 + 256] = eth.balance(arg1)
                                else:
                                    mem[mem[64] + 4] = arg1
                                    require ext_code.size(address(_1464))
                                    staticcall address(_1464).0x70a08231 with:
                                            gas gas_remaining wei
                                           args address(arg1)
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _1987 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    mem[_1491 + 256] = mem[_1987]
                else:
                    mem[_1491 + 32] = address(_1464)
                    mem[_1491 + 64] = address(_1407)
                    mem[_1491 + 96] = Mask(112, 0, _1435)
                    mem[_1491 + 128] = Mask(112, 0, _1440)
                    if not (10^18 * _1473) + (_1479 / 2) / _1479:
                        mem[_1491 + 160] = 0
                        if not (10^18 * _1473) + (_1479 / 2) / _1479:
                            mem[_1491 + 192] = 0
                            if address(_1456) == 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7:
                                mem[_1491 + 224] = eth.balance(arg1)
                                if address(_1464) == 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7:
                                    mem[_1491 + 256] = eth.balance(arg1)
                                else:
                                    mem[mem[64] + 4] = arg1
                                    require ext_code.size(address(_1464))
                                    staticcall address(_1464).0x70a08231 with:
                                            gas gas_remaining wei
                                           args address(arg1)
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _1677 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    mem[_1491 + 256] = mem[_1677]
                            else:
                                mem[mem[64] + 4] = arg1
                                require ext_code.size(address(_1456))
                                staticcall address(_1456).0x70a08231 with:
                                        gas gas_remaining wei
                                       args address(arg1)
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _1629 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                mem[_1491 + 224] = mem[_1629]
                                if address(_1464) == 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7:
                                    mem[_1491 + 256] = eth.balance(arg1)
                                else:
                                    mem[mem[64] + 4] = arg1
                                    require ext_code.size(address(_1464))
                                    staticcall address(_1464).0x70a08231 with:
                                            gas gas_remaining wei
                                           args address(arg1)
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _1875 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    mem[_1491 + 256] = mem[_1875]
                        else:
                            require (10^18 * _1473) + (_1479 / 2) / _1479
                            if Mask(112, 0, _1440) * (10^18 * _1473) + (_1479 / 2) / _1479 / (10^18 * _1473) + (_1479 / 2) / _1479 != Mask(112, 0, _1440):
                                revert with 0, 'math-not-safe'
                            if (Mask(112, 0, _1440) * (10^18 * _1473) + (_1479 / 2) / _1479) + 5 * 10^17 < Mask(112, 0, _1440) * (10^18 * _1473) + (_1479 / 2) / _1479:
                                revert with 0, 'math-not-safe'
                            mem[_1491 + 192] = (Mask(112, 0, _1440) * (10^18 * _1473) + (_1479 / 2) / _1479) + 5 * 10^17 / 10^18
                            if address(_1456) == 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7:
                                mem[_1491 + 224] = eth.balance(arg1)
                                if address(_1464) == 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7:
                                    mem[_1491 + 256] = eth.balance(arg1)
                                else:
                                    mem[mem[64] + 4] = arg1
                                    require ext_code.size(address(_1464))
                                    staticcall address(_1464).0x70a08231 with:
                                            gas gas_remaining wei
                                           args address(arg1)
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _1728 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    mem[_1491 + 256] = mem[_1728]
                            else:
                                mem[mem[64] + 4] = arg1
                                require ext_code.size(address(_1456))
                                staticcall address(_1456).0x70a08231 with:
                                        gas gas_remaining wei
                                       args address(arg1)
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _1681 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                mem[_1491 + 224] = mem[_1681]
                                if address(_1464) == 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7:
                                    mem[_1491 + 256] = eth.balance(arg1)
                                else:
                                    mem[mem[64] + 4] = arg1
                                    require ext_code.size(address(_1464))
                                    staticcall address(_1464).0x70a08231 with:
                                            gas gas_remaining wei
                                           args address(arg1)
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _1938 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    mem[_1491 + 256] = mem[_1938]
                    else:
                        require (10^18 * _1473) + (_1479 / 2) / _1479
                        if Mask(112, 0, _1435) * (10^18 * _1473) + (_1479 / 2) / _1479 / (10^18 * _1473) + (_1479 / 2) / _1479 != Mask(112, 0, _1435):
                            revert with 0, 'math-not-safe'
                        if (Mask(112, 0, _1435) * (10^18 * _1473) + (_1479 / 2) / _1479) + 5 * 10^17 < Mask(112, 0, _1435) * (10^18 * _1473) + (_1479 / 2) / _1479:
                            revert with 0, 'math-not-safe'
                        mem[_1491 + 160] = (Mask(112, 0, _1435) * (10^18 * _1473) + (_1479 / 2) / _1479) + 5 * 10^17 / 10^18
                        if not (10^18 * _1473) + (_1479 / 2) / _1479:
                            mem[_1491 + 192] = 0
                            if address(_1456) == 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7:
                                mem[_1491 + 224] = eth.balance(arg1)
                                if address(_1464) == 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7:
                                    mem[_1491 + 256] = eth.balance(arg1)
                                else:
                                    mem[mem[64] + 4] = arg1
                                    require ext_code.size(address(_1464))
                                    staticcall address(_1464).0x70a08231 with:
                                            gas gas_remaining wei
                                           args address(arg1)
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _1730 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    mem[_1491 + 256] = mem[_1730]
                            else:
                                mem[mem[64] + 4] = arg1
                                require ext_code.size(address(_1456))
                                staticcall address(_1456).0x70a08231 with:
                                        gas gas_remaining wei
                                       args address(arg1)
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _1684 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                mem[_1491 + 224] = mem[_1684]
                                if address(_1464) == 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7:
                                    mem[_1491 + 256] = eth.balance(arg1)
                                else:
                                    mem[mem[64] + 4] = arg1
                                    require ext_code.size(address(_1464))
                                    staticcall address(_1464).0x70a08231 with:
                                            gas gas_remaining wei
                                           args address(arg1)
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _1939 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    mem[_1491 + 256] = mem[_1939]
                        else:
                            require (10^18 * _1473) + (_1479 / 2) / _1479
                            if Mask(112, 0, _1440) * (10^18 * _1473) + (_1479 / 2) / _1479 / (10^18 * _1473) + (_1479 / 2) / _1479 != Mask(112, 0, _1440):
                                revert with 0, 'math-not-safe'
                            if (Mask(112, 0, _1440) * (10^18 * _1473) + (_1479 / 2) / _1479) + 5 * 10^17 < Mask(112, 0, _1440) * (10^18 * _1473) + (_1479 / 2) / _1479:
                                revert with 0, 'math-not-safe'
                            mem[_1491 + 192] = (Mask(112, 0, _1440) * (10^18 * _1473) + (_1479 / 2) / _1479) + 5 * 10^17 / 10^18
                            if address(_1456) == 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7:
                                mem[_1491 + 224] = eth.balance(arg1)
                                if address(_1464) == 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7:
                                    mem[_1491 + 256] = eth.balance(arg1)
                                else:
                                    mem[mem[64] + 4] = arg1
                                    require ext_code.size(address(_1464))
                                    staticcall address(_1464).0x70a08231 with:
                                            gas gas_remaining wei
                                           args address(arg1)
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _1785 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    mem[_1491 + 256] = mem[_1785]
                            else:
                                mem[mem[64] + 4] = arg1
                                require ext_code.size(address(_1456))
                                staticcall address(_1456).0x70a08231 with:
                                        gas gas_remaining wei
                                       args address(arg1)
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _1734 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                mem[_1491 + 224] = mem[_1734]
                                if address(_1464) == 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7:
                                    mem[_1491 + 256] = eth.balance(arg1)
                                else:
                                    mem[mem[64] + 4] = arg1
                                    require ext_code.size(address(_1464))
                                    staticcall address(_1464).0x70a08231 with:
                                            gas gas_remaining wei
                                           args address(arg1)
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _1990 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    mem[_1491 + 256] = mem[_1990]
            mem[_1491 + 288] = _1473
            mem[_1491 + 320] = _1479
            require idx < mem[(32 * arg2.length) + 128]
            mem[(32 * idx) + (32 * arg2.length) + 160] = _1491
            idx = idx + 1
            continue 
        _1406 = mem[64]
        mem[mem[64]] = 32
        _1408 = mem[(32 * arg2.length) + 128]
        mem[mem[64] + 32] = mem[(32 * arg2.length) + 128]
        idx = 0
        s = mem[64] + 64
        t = (32 * arg2.length) + 160
        while idx < _1408:
            _2104 = mem[t]
            mem[s] = mem[mem[t] + 12 len 20]
            mem[s + 32] = mem[_2104 + 44 len 20]
            mem[s + 64] = mem[_2104 + 76 len 20]
            mem[s + 96] = mem[_2104 + 96]
            mem[s + 128] = mem[_2104 + 128]
            mem[s + 160] = mem[_2104 + 160]
            mem[s + 192] = mem[_2104 + 192]
            mem[s + 224] = mem[_2104 + 224]
            mem[s + 256] = mem[_2104 + 256]
            mem[s + 288] = mem[_2104 + 288]
            mem[s + 320] = mem[_2104 + 320]
            idx = idx + 1
            s = s + 352
            t = t + 32
            continue 
        return memory
          from mem[64]
           len _1406 + (352 * _1408) + -mem[64] + 64
    mem[64] = (64 * arg2.length) + 512
    mem[(64 * arg2.length) + 160] = 0
    mem[(64 * arg2.length) + 192] = 0
    mem[(64 * arg2.length) + 224] = 0
    mem[(64 * arg2.length) + 256] = 0
    mem[(64 * arg2.length) + 288] = 0
    mem[(64 * arg2.length) + 320] = 0
    mem[(64 * arg2.length) + 352] = 0
    mem[(64 * arg2.length) + 384] = 0
    mem[(64 * arg2.length) + 416] = 0
    mem[(64 * arg2.length) + 448] = 0
    mem[(64 * arg2.length) + 480] = 0
    mem[var26001] = (64 * arg2.length) + 160
    s = var26001
    idx = var26002
    while idx - 1:
        mem[64] = mem[64] + 352
        mem[(64 * arg2.length) + 160] = 0
        mem[(64 * arg2.length) + 192] = 0
        mem[(64 * arg2.length) + 224] = 0
        mem[(64 * arg2.length) + 256] = 0
        mem[(64 * arg2.length) + 288] = 0
        mem[(64 * arg2.length) + 320] = 0
        mem[(64 * arg2.length) + 352] = 0
        mem[(64 * arg2.length) + 384] = 0
        mem[(64 * arg2.length) + 416] = 0
        mem[(64 * arg2.length) + 448] = 0
        mem[(64 * arg2.length) + 480] = 0
        mem[s + 32] = (64 * arg2.length) + 160
        s = s + 32
        idx = idx - 1
        continue 
    idx = 0
    while idx < arg2.length:
        require idx < mem[96]
        _2468 = mem[(32 * idx) + 128]
        _2470 = mem[64]
        mem[64] = mem[64] + 352
        mem[_2470] = 0
        mem[_2470 + 32] = 0
        mem[_2470 + 64] = 0
        mem[_2470 + 96] = 0
        mem[_2470 + 128] = 0
        mem[_2470 + 160] = 0
        mem[_2470 + 192] = 0
        mem[_2470 + 224] = 0
        mem[_2470 + 256] = 0
        mem[_2470 + 288] = 0
        mem[_2470 + 320] = 0
        require ext_code.size(address(_2468))
        staticcall address(_2468).getReserves() with:
                gas gas_remaining wei
        mem[mem[64] len 96] = ext_call.return_data[0 len 96]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _2478 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 96
        _2487 = mem[_2478]
        require mem[_2478] == mem[_2478 + 18 len 14]
        _2488 = mem[_2478 + 32]
        require mem[_2478 + 32] == mem[_2478 + 50 len 14]
        require mem[_2478 + 64] == mem[_2478 + 92 len 4]
        require ext_code.size(address(_2468))
        staticcall address(_2468).token0() with:
                gas gas_remaining wei
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _2492 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        _2493 = mem[_2492]
        require mem[_2492] == mem[_2492 + 12 len 20]
        require ext_code.size(address(_2468))
        staticcall address(_2468).token1() with:
                gas gas_remaining wei
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _2496 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        _2497 = mem[_2496]
        require mem[_2496] == mem[_2496 + 12 len 20]
        mem[mem[64] + 4] = arg1
        require ext_code.size(address(_2468))
        staticcall address(_2468).0x70a08231 with:
                gas gas_remaining wei
               args address(arg1)
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _2500 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        _2501 = mem[_2500]
        require ext_code.size(address(_2468))
        staticcall address(_2468).0x18160ddd with:
                gas gas_remaining wei
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _2504 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        _2505 = mem[_2504]
        if 10^18 * _2501 / 10^18 != _2501:
            revert with 0, 'math-not-safe'
        if (10^18 * _2501) + (mem[_2504] / 2) < 10^18 * _2501:
            revert with 0, 'math-not-safe'
        require mem[_2504]
        _2510 = mem[64]
        mem[64] = mem[64] + 352
        if address(_2493) == 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7:
            mem[_2510] = 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee
            if address(_2497) == 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7:
                mem[_2510 + 32] = 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee
                mem[_2510 + 64] = address(_2468)
                mem[_2510 + 96] = Mask(112, 0, _2487)
                mem[_2510 + 128] = Mask(112, 0, _2488)
                if not (10^18 * _2501) + (_2505 / 2) / _2505:
                    mem[_2510 + 160] = 0
                    if not (10^18 * _2501) + (_2505 / 2) / _2505:
                        mem[_2510 + 192] = 0
                        if address(_2493) == 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7:
                            mem[_2510 + 224] = eth.balance(arg1)
                            if address(_2497) == 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7:
                                mem[_2510 + 256] = eth.balance(arg1)
                            else:
                                mem[mem[64] + 4] = arg1
                                require ext_code.size(address(_2497))
                                staticcall address(_2497).0x70a08231 with:
                                        gas gas_remaining wei
                                       args address(arg1)
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _2611 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                mem[_2510 + 256] = mem[_2611]
                        else:
                            mem[mem[64] + 4] = arg1
                            require ext_code.size(address(_2493))
                            staticcall address(_2493).0x70a08231 with:
                                    gas gas_remaining wei
                                   args address(arg1)
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _2581 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            mem[_2510 + 224] = mem[_2581]
                            if address(_2497) == 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7:
                                mem[_2510 + 256] = eth.balance(arg1)
                            else:
                                mem[mem[64] + 4] = arg1
                                require ext_code.size(address(_2497))
                                staticcall address(_2497).0x70a08231 with:
                                        gas gas_remaining wei
                                       args address(arg1)
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _2727 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                mem[_2510 + 256] = mem[_2727]
                    else:
                        require (10^18 * _2501) + (_2505 / 2) / _2505
                        if Mask(112, 0, _2488) * (10^18 * _2501) + (_2505 / 2) / _2505 / (10^18 * _2501) + (_2505 / 2) / _2505 != Mask(112, 0, _2488):
                            revert with 0, 'math-not-safe'
                        if (Mask(112, 0, _2488) * (10^18 * _2501) + (_2505 / 2) / _2505) + 5 * 10^17 < Mask(112, 0, _2488) * (10^18 * _2501) + (_2505 / 2) / _2505:
                            revert with 0, 'math-not-safe'
                        mem[_2510 + 192] = (Mask(112, 0, _2488) * (10^18 * _2501) + (_2505 / 2) / _2505) + 5 * 10^17 / 10^18
                        if address(_2493) == 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7:
                            mem[_2510 + 224] = eth.balance(arg1)
                            if address(_2497) == 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7:
                                mem[_2510 + 256] = eth.balance(arg1)
                            else:
                                mem[mem[64] + 4] = arg1
                                require ext_code.size(address(_2497))
                                staticcall address(_2497).0x70a08231 with:
                                        gas gas_remaining wei
                                       args address(arg1)
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _2652 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                mem[_2510 + 256] = mem[_2652]
                        else:
                            mem[mem[64] + 4] = arg1
                            require ext_code.size(address(_2493))
                            staticcall address(_2493).0x70a08231 with:
                                    gas gas_remaining wei
                                   args address(arg1)
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _2615 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            mem[_2510 + 224] = mem[_2615]
                            if address(_2497) == 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7:
                                mem[_2510 + 256] = eth.balance(arg1)
                            else:
                                mem[mem[64] + 4] = arg1
                                require ext_code.size(address(_2497))
                                staticcall address(_2497).0x70a08231 with:
                                        gas gas_remaining wei
                                       args address(arg1)
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _2760 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                mem[_2510 + 256] = mem[_2760]
                else:
                    require (10^18 * _2501) + (_2505 / 2) / _2505
                    if Mask(112, 0, _2487) * (10^18 * _2501) + (_2505 / 2) / _2505 / (10^18 * _2501) + (_2505 / 2) / _2505 != Mask(112, 0, _2487):
                        revert with 0, 'math-not-safe'
                    if (Mask(112, 0, _2487) * (10^18 * _2501) + (_2505 / 2) / _2505) + 5 * 10^17 < Mask(112, 0, _2487) * (10^18 * _2501) + (_2505 / 2) / _2505:
                        revert with 0, 'math-not-safe'
                    mem[_2510 + 160] = (Mask(112, 0, _2487) * (10^18 * _2501) + (_2505 / 2) / _2505) + 5 * 10^17 / 10^18
                    if not (10^18 * _2501) + (_2505 / 2) / _2505:
                        mem[_2510 + 192] = 0
                        if address(_2493) == 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7:
                            mem[_2510 + 224] = eth.balance(arg1)
                            if address(_2497) == 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7:
                                mem[_2510 + 256] = eth.balance(arg1)
                            else:
                                mem[mem[64] + 4] = arg1
                                require ext_code.size(address(_2497))
                                staticcall address(_2497).0x70a08231 with:
                                        gas gas_remaining wei
                                       args address(arg1)
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _2654 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                mem[_2510 + 256] = mem[_2654]
                        else:
                            mem[mem[64] + 4] = arg1
                            require ext_code.size(address(_2493))
                            staticcall address(_2493).0x70a08231 with:
                                    gas gas_remaining wei
                                   args address(arg1)
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _2618 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            mem[_2510 + 224] = mem[_2618]
                            if address(_2497) == 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7:
                                mem[_2510 + 256] = eth.balance(arg1)
                            else:
                                mem[mem[64] + 4] = arg1
                                require ext_code.size(address(_2497))
                                staticcall address(_2497).0x70a08231 with:
                                        gas gas_remaining wei
                                       args address(arg1)
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _2761 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                mem[_2510 + 256] = mem[_2761]
                    else:
                        require (10^18 * _2501) + (_2505 / 2) / _2505
                        if Mask(112, 0, _2488) * (10^18 * _2501) + (_2505 / 2) / _2505 / (10^18 * _2501) + (_2505 / 2) / _2505 != Mask(112, 0, _2488):
                            revert with 0, 'math-not-safe'
                        if (Mask(112, 0, _2488) * (10^18 * _2501) + (_2505 / 2) / _2505) + 5 * 10^17 < Mask(112, 0, _2488) * (10^18 * _2501) + (_2505 / 2) / _2505:
                            revert with 0, 'math-not-safe'
                        mem[_2510 + 192] = (Mask(112, 0, _2488) * (10^18 * _2501) + (_2505 / 2) / _2505) + 5 * 10^17 / 10^18
                        if address(_2493) == 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7:
                            mem[_2510 + 224] = eth.balance(arg1)
                            if address(_2497) == 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7:
                                mem[_2510 + 256] = eth.balance(arg1)
                            else:
                                mem[mem[64] + 4] = arg1
                                require ext_code.size(address(_2497))
                                staticcall address(_2497).0x70a08231 with:
                                        gas gas_remaining wei
                                       args address(arg1)
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _2689 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                mem[_2510 + 256] = mem[_2689]
                        else:
                            mem[mem[64] + 4] = arg1
                            require ext_code.size(address(_2493))
                            staticcall address(_2493).0x70a08231 with:
                                    gas gas_remaining wei
                                   args address(arg1)
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _2658 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            mem[_2510 + 224] = mem[_2658]
                            if address(_2497) == 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7:
                                mem[_2510 + 256] = eth.balance(arg1)
                            else:
                                mem[mem[64] + 4] = arg1
                                require ext_code.size(address(_2497))
                                staticcall address(_2497).0x70a08231 with:
                                        gas gas_remaining wei
                                       args address(arg1)
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _2785 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                mem[_2510 + 256] = mem[_2785]
            else:
                mem[_2510 + 32] = address(_2497)
                mem[_2510 + 64] = address(_2468)
                mem[_2510 + 96] = Mask(112, 0, _2487)
                mem[_2510 + 128] = Mask(112, 0, _2488)
                if not (10^18 * _2501) + (_2505 / 2) / _2505:
                    mem[_2510 + 160] = 0
                    if not (10^18 * _2501) + (_2505 / 2) / _2505:
                        mem[_2510 + 192] = 0
                        if address(_2493) == 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7:
                            mem[_2510 + 224] = eth.balance(arg1)
                            if address(_2497) == 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7:
                                mem[_2510 + 256] = eth.balance(arg1)
                            else:
                                mem[mem[64] + 4] = arg1
                                require ext_code.size(address(_2497))
                                staticcall address(_2497).0x70a08231 with:
                                        gas gas_remaining wei
                                       args address(arg1)
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _2621 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                mem[_2510 + 256] = mem[_2621]
                        else:
                            mem[mem[64] + 4] = arg1
                            require ext_code.size(address(_2493))
                            staticcall address(_2493).0x70a08231 with:
                                    gas gas_remaining wei
                                   args address(arg1)
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _2589 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            mem[_2510 + 224] = mem[_2589]
                            if address(_2497) == 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7:
                                mem[_2510 + 256] = eth.balance(arg1)
                            else:
                                mem[mem[64] + 4] = arg1
                                require ext_code.size(address(_2497))
                                staticcall address(_2497).0x70a08231 with:
                                        gas gas_remaining wei
                                       args address(arg1)
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _2735 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                mem[_2510 + 256] = mem[_2735]
                    else:
                        require (10^18 * _2501) + (_2505 / 2) / _2505
                        if Mask(112, 0, _2488) * (10^18 * _2501) + (_2505 / 2) / _2505 / (10^18 * _2501) + (_2505 / 2) / _2505 != Mask(112, 0, _2488):
                            revert with 0, 'math-not-safe'
                        if (Mask(112, 0, _2488) * (10^18 * _2501) + (_2505 / 2) / _2505) + 5 * 10^17 < Mask(112, 0, _2488) * (10^18 * _2501) + (_2505 / 2) / _2505:
                            revert with 0, 'math-not-safe'
                        mem[_2510 + 192] = (Mask(112, 0, _2488) * (10^18 * _2501) + (_2505 / 2) / _2505) + 5 * 10^17 / 10^18
                        if address(_2493) == 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7:
                            mem[_2510 + 224] = eth.balance(arg1)
                            if address(_2497) == 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7:
                                mem[_2510 + 256] = eth.balance(arg1)
                            else:
                                mem[mem[64] + 4] = arg1
                                require ext_code.size(address(_2497))
                                staticcall address(_2497).0x70a08231 with:
                                        gas gas_remaining wei
                                       args address(arg1)
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _2660 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                mem[_2510 + 256] = mem[_2660]
                        else:
                            mem[mem[64] + 4] = arg1
                            require ext_code.size(address(_2493))
                            staticcall address(_2493).0x70a08231 with:
                                    gas gas_remaining wei
                                   args address(arg1)
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _2625 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            mem[_2510 + 224] = mem[_2625]
                            if address(_2497) == 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7:
                                mem[_2510 + 256] = eth.balance(arg1)
                            else:
                                mem[mem[64] + 4] = arg1
                                require ext_code.size(address(_2497))
                                staticcall address(_2497).0x70a08231 with:
                                        gas gas_remaining wei
                                       args address(arg1)
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _2766 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                mem[_2510 + 256] = mem[_2766]
                else:
                    require (10^18 * _2501) + (_2505 / 2) / _2505
                    if Mask(112, 0, _2487) * (10^18 * _2501) + (_2505 / 2) / _2505 / (10^18 * _2501) + (_2505 / 2) / _2505 != Mask(112, 0, _2487):
                        revert with 0, 'math-not-safe'
                    if (Mask(112, 0, _2487) * (10^18 * _2501) + (_2505 / 2) / _2505) + 5 * 10^17 < Mask(112, 0, _2487) * (10^18 * _2501) + (_2505 / 2) / _2505:
                        revert with 0, 'math-not-safe'
                    mem[_2510 + 160] = (Mask(112, 0, _2487) * (10^18 * _2501) + (_2505 / 2) / _2505) + 5 * 10^17 / 10^18
                    if not (10^18 * _2501) + (_2505 / 2) / _2505:
                        mem[_2510 + 192] = 0
                        if address(_2493) == 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7:
                            mem[_2510 + 224] = eth.balance(arg1)
                            if address(_2497) == 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7:
                                mem[_2510 + 256] = eth.balance(arg1)
                            else:
                                mem[mem[64] + 4] = arg1
                                require ext_code.size(address(_2497))
                                staticcall address(_2497).0x70a08231 with:
                                        gas gas_remaining wei
                                       args address(arg1)
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _2662 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                mem[_2510 + 256] = mem[_2662]
                        else:
                            mem[mem[64] + 4] = arg1
                            require ext_code.size(address(_2493))
                            staticcall address(_2493).0x70a08231 with:
                                    gas gas_remaining wei
                                   args address(arg1)
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _2628 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            mem[_2510 + 224] = mem[_2628]
                            if address(_2497) == 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7:
                                mem[_2510 + 256] = eth.balance(arg1)
                            else:
                                mem[mem[64] + 4] = arg1
                                require ext_code.size(address(_2497))
                                staticcall address(_2497).0x70a08231 with:
                                        gas gas_remaining wei
                                       args address(arg1)
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _2767 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                mem[_2510 + 256] = mem[_2767]
                    else:
                        require (10^18 * _2501) + (_2505 / 2) / _2505
                        if Mask(112, 0, _2488) * (10^18 * _2501) + (_2505 / 2) / _2505 / (10^18 * _2501) + (_2505 / 2) / _2505 != Mask(112, 0, _2488):
                            revert with 0, 'math-not-safe'
                        if (Mask(112, 0, _2488) * (10^18 * _2501) + (_2505 / 2) / _2505) + 5 * 10^17 < Mask(112, 0, _2488) * (10^18 * _2501) + (_2505 / 2) / _2505:
                            revert with 0, 'math-not-safe'
                        mem[_2510 + 192] = (Mask(112, 0, _2488) * (10^18 * _2501) + (_2505 / 2) / _2505) + 5 * 10^17 / 10^18
                        if address(_2493) == 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7:
                            mem[_2510 + 224] = eth.balance(arg1)
                            if address(_2497) == 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7:
                                mem[_2510 + 256] = eth.balance(arg1)
                            else:
                                mem[mem[64] + 4] = arg1
                                require ext_code.size(address(_2497))
                                staticcall address(_2497).0x70a08231 with:
                                        gas gas_remaining wei
                                       args address(arg1)
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _2693 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                mem[_2510 + 256] = mem[_2693]
                        else:
                            mem[mem[64] + 4] = arg1
                            require ext_code.size(address(_2493))
                            staticcall address(_2493).0x70a08231 with:
                                    gas gas_remaining wei
                                   args address(arg1)
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _2666 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            mem[_2510 + 224] = mem[_2666]
                            if address(_2497) == 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7:
                                mem[_2510 + 256] = eth.balance(arg1)
                            else:
                                mem[mem[64] + 4] = arg1
                                require ext_code.size(address(_2497))
                                staticcall address(_2497).0x70a08231 with:
                                        gas gas_remaining wei
                                       args address(arg1)
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _2788 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                mem[_2510 + 256] = mem[_2788]
        else:
            mem[_2510] = address(_2493)
            if address(_2497) == 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7:
                mem[_2510 + 32] = 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee
                mem[_2510 + 64] = address(_2468)
                mem[_2510 + 96] = Mask(112, 0, _2487)
                mem[_2510 + 128] = Mask(112, 0, _2488)
                if not (10^18 * _2501) + (_2505 / 2) / _2505:
                    mem[_2510 + 160] = 0
                    if not (10^18 * _2501) + (_2505 / 2) / _2505:
                        mem[_2510 + 192] = 0
                        if address(_2493) == 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7:
                            mem[_2510 + 224] = eth.balance(arg1)
                            if address(_2497) == 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7:
                                mem[_2510 + 256] = eth.balance(arg1)
                            else:
                                mem[mem[64] + 4] = arg1
                                require ext_code.size(address(_2497))
                                staticcall address(_2497).0x70a08231 with:
                                        gas gas_remaining wei
                                       args address(arg1)
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _2631 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                mem[_2510 + 256] = mem[_2631]
                        else:
                            mem[mem[64] + 4] = arg1
                            require ext_code.size(address(_2493))
                            staticcall address(_2493).0x70a08231 with:
                                    gas gas_remaining wei
                                   args address(arg1)
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _2597 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            mem[_2510 + 224] = mem[_2597]
                            if address(_2497) == 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7:
                                mem[_2510 + 256] = eth.balance(arg1)
                            else:
                                mem[mem[64] + 4] = arg1
                                require ext_code.size(address(_2497))
                                staticcall address(_2497).0x70a08231 with:
                                        gas gas_remaining wei
                                       args address(arg1)
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _2743 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                mem[_2510 + 256] = mem[_2743]
                    else:
                        require (10^18 * _2501) + (_2505 / 2) / _2505
                        if Mask(112, 0, _2488) * (10^18 * _2501) + (_2505 / 2) / _2505 / (10^18 * _2501) + (_2505 / 2) / _2505 != Mask(112, 0, _2488):
                            revert with 0, 'math-not-safe'
                        if (Mask(112, 0, _2488) * (10^18 * _2501) + (_2505 / 2) / _2505) + 5 * 10^17 < Mask(112, 0, _2488) * (10^18 * _2501) + (_2505 / 2) / _2505:
                            revert with 0, 'math-not-safe'
                        mem[_2510 + 192] = (Mask(112, 0, _2488) * (10^18 * _2501) + (_2505 / 2) / _2505) + 5 * 10^17 / 10^18
                        if address(_2493) == 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7:
                            mem[_2510 + 224] = eth.balance(arg1)
                            if address(_2497) == 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7:
                                mem[_2510 + 256] = eth.balance(arg1)
                            else:
                                mem[mem[64] + 4] = arg1
                                require ext_code.size(address(_2497))
                                staticcall address(_2497).0x70a08231 with:
                                        gas gas_remaining wei
                                       args address(arg1)
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _2668 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                mem[_2510 + 256] = mem[_2668]
                        else:
                            mem[mem[64] + 4] = arg1
                            require ext_code.size(address(_2493))
                            staticcall address(_2493).0x70a08231 with:
                                    gas gas_remaining wei
                                   args address(arg1)
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _2635 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            mem[_2510 + 224] = mem[_2635]
                            if address(_2497) == 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7:
                                mem[_2510 + 256] = eth.balance(arg1)
                            else:
                                mem[mem[64] + 4] = arg1
                                require ext_code.size(address(_2497))
                                staticcall address(_2497).0x70a08231 with:
                                        gas gas_remaining wei
                                       args address(arg1)
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _2772 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                mem[_2510 + 256] = mem[_2772]
                else:
                    require (10^18 * _2501) + (_2505 / 2) / _2505
                    if Mask(112, 0, _2487) * (10^18 * _2501) + (_2505 / 2) / _2505 / (10^18 * _2501) + (_2505 / 2) / _2505 != Mask(112, 0, _2487):
                        revert with 0, 'math-not-safe'
                    if (Mask(112, 0, _2487) * (10^18 * _2501) + (_2505 / 2) / _2505) + 5 * 10^17 < Mask(112, 0, _2487) * (10^18 * _2501) + (_2505 / 2) / _2505:
                        revert with 0, 'math-not-safe'
                    mem[_2510 + 160] = (Mask(112, 0, _2487) * (10^18 * _2501) + (_2505 / 2) / _2505) + 5 * 10^17 / 10^18
                    if not (10^18 * _2501) + (_2505 / 2) / _2505:
                        mem[_2510 + 192] = 0
                        if address(_2493) == 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7:
                            mem[_2510 + 224] = eth.balance(arg1)
                            if address(_2497) == 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7:
                                mem[_2510 + 256] = eth.balance(arg1)
                            else:
                                mem[mem[64] + 4] = arg1
                                require ext_code.size(address(_2497))
                                staticcall address(_2497).0x70a08231 with:
                                        gas gas_remaining wei
                                       args address(arg1)
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _2670 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                mem[_2510 + 256] = mem[_2670]
                        else:
                            mem[mem[64] + 4] = arg1
                            require ext_code.size(address(_2493))
                            staticcall address(_2493).0x70a08231 with:
                                    gas gas_remaining wei
                                   args address(arg1)
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _2638 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            mem[_2510 + 224] = mem[_2638]
                            if address(_2497) == 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7:
                                mem[_2510 + 256] = eth.balance(arg1)
                            else:
                                mem[mem[64] + 4] = arg1
                                require ext_code.size(address(_2497))
                                staticcall address(_2497).0x70a08231 with:
                                        gas gas_remaining wei
                                       args address(arg1)
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _2773 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                mem[_2510 + 256] = mem[_2773]
                    else:
                        require (10^18 * _2501) + (_2505 / 2) / _2505
                        if Mask(112, 0, _2488) * (10^18 * _2501) + (_2505 / 2) / _2505 / (10^18 * _2501) + (_2505 / 2) / _2505 != Mask(112, 0, _2488):
                            revert with 0, 'math-not-safe'
                        if (Mask(112, 0, _2488) * (10^18 * _2501) + (_2505 / 2) / _2505) + 5 * 10^17 < Mask(112, 0, _2488) * (10^18 * _2501) + (_2505 / 2) / _2505:
                            revert with 0, 'math-not-safe'
                        mem[_2510 + 192] = (Mask(112, 0, _2488) * (10^18 * _2501) + (_2505 / 2) / _2505) + 5 * 10^17 / 10^18
                        if address(_2493) == 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7:
                            mem[_2510 + 224] = eth.balance(arg1)
                            if address(_2497) == 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7:
                                mem[_2510 + 256] = eth.balance(arg1)
                            else:
                                mem[mem[64] + 4] = arg1
                                require ext_code.size(address(_2497))
                                staticcall address(_2497).0x70a08231 with:
                                        gas gas_remaining wei
                                       args address(arg1)
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _2697 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                mem[_2510 + 256] = mem[_2697]
                        else:
                            mem[mem[64] + 4] = arg1
                            require ext_code.size(address(_2493))
                            staticcall address(_2493).0x70a08231 with:
                                    gas gas_remaining wei
                                   args address(arg1)
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _2674 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            mem[_2510 + 224] = mem[_2674]
                            if address(_2497) == 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7:
                                mem[_2510 + 256] = eth.balance(arg1)
                            else:
                                mem[mem[64] + 4] = arg1
                                require ext_code.size(address(_2497))
                                staticcall address(_2497).0x70a08231 with:
                                        gas gas_remaining wei
                                       args address(arg1)
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _2791 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                mem[_2510 + 256] = mem[_2791]
            else:
                mem[_2510 + 32] = address(_2497)
                mem[_2510 + 64] = address(_2468)
                mem[_2510 + 96] = Mask(112, 0, _2487)
                mem[_2510 + 128] = Mask(112, 0, _2488)
                if not (10^18 * _2501) + (_2505 / 2) / _2505:
                    mem[_2510 + 160] = 0
                    if not (10^18 * _2501) + (_2505 / 2) / _2505:
                        mem[_2510 + 192] = 0
                        if address(_2493) == 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7:
                            mem[_2510 + 224] = eth.balance(arg1)
                            if address(_2497) == 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7:
                                mem[_2510 + 256] = eth.balance(arg1)
                            else:
                                mem[mem[64] + 4] = arg1
                                require ext_code.size(address(_2497))
                                staticcall address(_2497).0x70a08231 with:
                                        gas gas_remaining wei
                                       args address(arg1)
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _2641 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                mem[_2510 + 256] = mem[_2641]
                        else:
                            mem[mem[64] + 4] = arg1
                            require ext_code.size(address(_2493))
                            staticcall address(_2493).0x70a08231 with:
                                    gas gas_remaining wei
                                   args address(arg1)
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _2605 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            mem[_2510 + 224] = mem[_2605]
                            if address(_2497) == 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7:
                                mem[_2510 + 256] = eth.balance(arg1)
                            else:
                                mem[mem[64] + 4] = arg1
                                require ext_code.size(address(_2497))
                                staticcall address(_2497).0x70a08231 with:
                                        gas gas_remaining wei
                                       args address(arg1)
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _2751 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                mem[_2510 + 256] = mem[_2751]
                    else:
                        require (10^18 * _2501) + (_2505 / 2) / _2505
                        if Mask(112, 0, _2488) * (10^18 * _2501) + (_2505 / 2) / _2505 / (10^18 * _2501) + (_2505 / 2) / _2505 != Mask(112, 0, _2488):
                            revert with 0, 'math-not-safe'
                        if (Mask(112, 0, _2488) * (10^18 * _2501) + (_2505 / 2) / _2505) + 5 * 10^17 < Mask(112, 0, _2488) * (10^18 * _2501) + (_2505 / 2) / _2505:
                            revert with 0, 'math-not-safe'
                        mem[_2510 + 192] = (Mask(112, 0, _2488) * (10^18 * _2501) + (_2505 / 2) / _2505) + 5 * 10^17 / 10^18
                        if address(_2493) == 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7:
                            mem[_2510 + 224] = eth.balance(arg1)
                            if address(_2497) == 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7:
                                mem[_2510 + 256] = eth.balance(arg1)
                            else:
                                mem[mem[64] + 4] = arg1
                                require ext_code.size(address(_2497))
                                staticcall address(_2497).0x70a08231 with:
                                        gas gas_remaining wei
                                       args address(arg1)
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _2676 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                mem[_2510 + 256] = mem[_2676]
                        else:
                            mem[mem[64] + 4] = arg1
                            require ext_code.size(address(_2493))
                            staticcall address(_2493).0x70a08231 with:
                                    gas gas_remaining wei
                                   args address(arg1)
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _2645 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            mem[_2510 + 224] = mem[_2645]
                            if address(_2497) == 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7:
                                mem[_2510 + 256] = eth.balance(arg1)
                            else:
                                mem[mem[64] + 4] = arg1
                                require ext_code.size(address(_2497))
                                staticcall address(_2497).0x70a08231 with:
                                        gas gas_remaining wei
                                       args address(arg1)
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _2778 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                mem[_2510 + 256] = mem[_2778]
                else:
                    require (10^18 * _2501) + (_2505 / 2) / _2505
                    if Mask(112, 0, _2487) * (10^18 * _2501) + (_2505 / 2) / _2505 / (10^18 * _2501) + (_2505 / 2) / _2505 != Mask(112, 0, _2487):
                        revert with 0, 'math-not-safe'
                    if (Mask(112, 0, _2487) * (10^18 * _2501) + (_2505 / 2) / _2505) + 5 * 10^17 < Mask(112, 0, _2487) * (10^18 * _2501) + (_2505 / 2) / _2505:
                        revert with 0, 'math-not-safe'
                    mem[_2510 + 160] = (Mask(112, 0, _2487) * (10^18 * _2501) + (_2505 / 2) / _2505) + 5 * 10^17 / 10^18
                    if not (10^18 * _2501) + (_2505 / 2) / _2505:
                        mem[_2510 + 192] = 0
                        if address(_2493) == 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7:
                            mem[_2510 + 224] = eth.balance(arg1)
                            if address(_2497) == 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7:
                                mem[_2510 + 256] = eth.balance(arg1)
                            else:
                                mem[mem[64] + 4] = arg1
                                require ext_code.size(address(_2497))
                                staticcall address(_2497).0x70a08231 with:
                                        gas gas_remaining wei
                                       args address(arg1)
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _2678 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                mem[_2510 + 256] = mem[_2678]
                        else:
                            mem[mem[64] + 4] = arg1
                            require ext_code.size(address(_2493))
                            staticcall address(_2493).0x70a08231 with:
                                    gas gas_remaining wei
                                   args address(arg1)
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _2648 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            mem[_2510 + 224] = mem[_2648]
                            if address(_2497) == 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7:
                                mem[_2510 + 256] = eth.balance(arg1)
                            else:
                                mem[mem[64] + 4] = arg1
                                require ext_code.size(address(_2497))
                                staticcall address(_2497).0x70a08231 with:
                                        gas gas_remaining wei
                                       args address(arg1)
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _2779 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                mem[_2510 + 256] = mem[_2779]
                    else:
                        require (10^18 * _2501) + (_2505 / 2) / _2505
                        if Mask(112, 0, _2488) * (10^18 * _2501) + (_2505 / 2) / _2505 / (10^18 * _2501) + (_2505 / 2) / _2505 != Mask(112, 0, _2488):
                            revert with 0, 'math-not-safe'
                        if (Mask(112, 0, _2488) * (10^18 * _2501) + (_2505 / 2) / _2505) + 5 * 10^17 < Mask(112, 0, _2488) * (10^18 * _2501) + (_2505 / 2) / _2505:
                            revert with 0, 'math-not-safe'
                        mem[_2510 + 192] = (Mask(112, 0, _2488) * (10^18 * _2501) + (_2505 / 2) / _2505) + 5 * 10^17 / 10^18
                        if address(_2493) == 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7:
                            mem[_2510 + 224] = eth.balance(arg1)
                            if address(_2497) == 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7:
                                mem[_2510 + 256] = eth.balance(arg1)
                            else:
                                mem[mem[64] + 4] = arg1
                                require ext_code.size(address(_2497))
                                staticcall address(_2497).0x70a08231 with:
                                        gas gas_remaining wei
                                       args address(arg1)
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _2701 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                mem[_2510 + 256] = mem[_2701]
                        else:
                            mem[mem[64] + 4] = arg1
                            require ext_code.size(address(_2493))
                            staticcall address(_2493).0x70a08231 with:
                                    gas gas_remaining wei
                                   args address(arg1)
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _2682 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            mem[_2510 + 224] = mem[_2682]
                            if address(_2497) == 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7:
                                mem[_2510 + 256] = eth.balance(arg1)
                            else:
                                mem[mem[64] + 4] = arg1
                                require ext_code.size(address(_2497))
                                staticcall address(_2497).0x70a08231 with:
                                        gas gas_remaining wei
                                       args address(arg1)
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _2794 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                mem[_2510 + 256] = mem[_2794]
        mem[_2510 + 288] = _2501
        mem[_2510 + 320] = _2505
        require idx < mem[(32 * arg2.length) + 128]
        mem[(32 * idx) + (32 * arg2.length) + 160] = _2510
        idx = idx + 1
        continue 
    _2467 = mem[64]
    mem[mem[64]] = 32
    _2469 = mem[(32 * arg2.length) + 128]
    mem[mem[64] + 32] = mem[(32 * arg2.length) + 128]
    idx = 0
    s = mem[64] + 64
    t = (32 * arg2.length) + 160
    while idx < _2469:
        _2815 = mem[t]
        mem[s] = mem[mem[t] + 12 len 20]
        mem[s + 32] = mem[_2815 + 44 len 20]
        mem[s + 64] = mem[_2815 + 76 len 20]
        mem[s + 96] = mem[_2815 + 96]
        mem[s + 128] = mem[_2815 + 128]
        mem[s + 160] = mem[_2815 + 160]
        mem[s + 192] = mem[_2815 + 192]
        mem[s + 224] = mem[_2815 + 224]
        mem[s + 256] = mem[_2815 + 256]
        mem[s + 288] = mem[_2815 + 288]
        mem[s + 320] = mem[_2815 + 320]
        idx = idx + 1
        s = s + 352
        t = t + 32
        continue 
    return memory
      from mem[64]
       len _2467 + (352 * _2469) + -mem[64] + 64
}

function getWithdrawAmounts(address arg1, address arg2, uint256 arg3, uint256 arg4) payable {
    require calldata.size - 4 >= 128
    require arg1 == arg1
    require arg2 == arg2
    require ext_code.size(0xe54ca86531e17ef3616d22ca28b0d458b6c89106)
    staticcall 0xe54ca86531e17ef3616d22ca28b0d458b6c89106.factory() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
    require ext_code.size(address(ext_call.return_data[0]))
    if arg1 == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
        if arg2 == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
            staticcall address(ext_call.return_data[0]).getPair(address arg1, address arg2) with:
                    gas gas_remaining wei
                   args 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7, 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            if not ext_call.return_data[12 len 20]:
                revert with 0, 'pair-not-found.'
            require ext_code.size(address(ext_call.return_data[0]))
            staticcall address(ext_call.return_data[0]).0x18160ddd with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if 10^18 * arg3 / 10^18 != arg3:
                revert with 0, 'math-not-safe'
            if (10^18 * arg3) + (ext_call.return_data[0] / 2) < 10^18 * arg3:
                revert with 0, 'math-not-safe'
            require ext_call.return_data[0]
            require ext_code.size(0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7)
            staticcall 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7.0x70a08231 with:
                    gas gas_remaining wei
                   args address(ext_call.return_data[0])
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]:
                require ext_code.size(0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7)
                staticcall 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7.0x70a08231 with:
                        gas gas_remaining wei
                       args address(ext_call.return_data[0])
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]:
                    require ext_code.size(0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7)
                    staticcall 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7.0x313ce567 with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if 10^(-ext_call.return_data[0] + 18):
                        require 10^(-ext_call.return_data[0] + 18)
                        if 0 / 10^(-ext_call.return_data[0] + 18):
                            revert with 0, 'math-not-safe'
                    require ext_code.size(0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7)
                    staticcall 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7.0x313ce567 with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if 10^(-ext_call.return_data[0] + 18):
                        require 10^(-ext_call.return_data[0] + 18)
                        if 0 / 10^(-ext_call.return_data[0] + 18):
                            revert with 0, 'math-not-safe'
                    if arg3 / 2 < 0:
                        revert with 0, 'math-not-safe'
                    require arg3
                    if -arg4 + 10^18 > 10^18:
                        if arg3 / 2 < 0:
                            revert with 0, 'math-not-safe'
                        require arg3
                        if -arg4 + 10^18 > 10^18:
                            return 0
                        if not -arg4 + 10^18:
                            return 0
                        require -arg4 + 10^18
                        if (10^18 * arg3 / 2 / arg3) - (arg4 * arg3 / 2 / arg3) / -arg4 + 10^18 != arg3 / 2 / arg3:
                            revert with 0, 'math-not-safe'
                        return 0, 0, 0, (10^18 * arg3 / 2 / arg3) + (-1 * arg4 * arg3 / 2 / arg3) + 5 * 10^17 / 10^18
                    if not -arg4 + 10^18:
                        if arg3 / 2 < 0:
                            revert with 0, 'math-not-safe'
                        require arg3
                        if -arg4 + 10^18 > 10^18:
                            return 0
                        if not -arg4 + 10^18:
                            return 0
                        require -arg4 + 10^18
                        if (10^18 * arg3 / 2 / arg3) - (arg4 * arg3 / 2 / arg3) / -arg4 + 10^18 != arg3 / 2 / arg3:
                            revert with 0, 'math-not-safe'
                        return 0, 0, 0, (10^18 * arg3 / 2 / arg3) + (-1 * arg4 * arg3 / 2 / arg3) + 5 * 10^17 / 10^18
                    require -arg4 + 10^18
                    if (10^18 * arg3 / 2 / arg3) - (arg4 * arg3 / 2 / arg3) / -arg4 + 10^18 != arg3 / 2 / arg3:
                        revert with 0, 'math-not-safe'
                    if arg3 / 2 < 0:
                        revert with 0, 'math-not-safe'
                    require arg3
                    if -arg4 + 10^18 > 10^18:
                        return 0, 0, (10^18 * arg3 / 2 / arg3) + (-1 * arg4 * arg3 / 2 / arg3) + 5 * 10^17 / 10^18, 0
                    if not -arg4 + 10^18:
                        return 0, 0, (10^18 * arg3 / 2 / arg3) + (-1 * arg4 * arg3 / 2 / arg3) + 5 * 10^17 / 10^18, 0
                    require -arg4 + 10^18
                    if (10^18 * arg3 / 2 / arg3) - (arg4 * arg3 / 2 / arg3) / -arg4 + 10^18 != arg3 / 2 / arg3:
                        revert with 0, 'math-not-safe'
                    return 0, 
                           0,
                           (10^18 * arg3 / 2 / arg3) + (-1 * arg4 * arg3 / 2 / arg3) + 5 * 10^17 / 10^18,
                           (10^18 * arg3 / 2 / arg3) + (-1 * arg4 * arg3 / 2 / arg3) + 5 * 10^17 / 10^18
                require (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]
                if ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0] / (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 'math-not-safe'
                if (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 < ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]:
                    revert with 0, 'math-not-safe'
                require ext_code.size(0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7)
                staticcall 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7.0x313ce567 with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if 10^(-ext_call.return_data[0] + 18):
                    require 10^(-ext_call.return_data[0] + 18)
                    if 0 / 10^(-ext_call.return_data[0] + 18):
                        revert with 0, 'math-not-safe'
                require ext_code.size(0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7)
                staticcall 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7.0x313ce567 with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not 10^(-ext_call.return_data[0] + 18):
                    if arg3 / 2 < 0:
                        revert with 0, 'math-not-safe'
                    require arg3
                    if -arg4 + 10^18 > 10^18:
                        if arg3 / 2 < 0:
                            revert with 0, 'math-not-safe'
                        require arg3
                        if -arg4 + 10^18 > 10^18:
                            return 0, 
                                   (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                                   0,
                                   0
                        if not -arg4 + 10^18:
                            return 0, 
                                   (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                                   0,
                                   0
                        require -arg4 + 10^18
                        if (10^18 * arg3 / 2 / arg3) - (arg4 * arg3 / 2 / arg3) / -arg4 + 10^18 != arg3 / 2 / arg3:
                            revert with 0, 'math-not-safe'
                        return 0, 
                               (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                               0,
                               (10^18 * arg3 / 2 / arg3) + (-1 * arg4 * arg3 / 2 / arg3) + 5 * 10^17 / 10^18
                    if not -arg4 + 10^18:
                        if arg3 / 2 < 0:
                            revert with 0, 'math-not-safe'
                        require arg3
                        if -arg4 + 10^18 > 10^18:
                            return 0, 
                                   (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                                   0,
                                   0
                        if not -arg4 + 10^18:
                            return 0, 
                                   (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                                   0,
                                   0
                        require -arg4 + 10^18
                        if (10^18 * arg3 / 2 / arg3) - (arg4 * arg3 / 2 / arg3) / -arg4 + 10^18 != arg3 / 2 / arg3:
                            revert with 0, 'math-not-safe'
                        return 0, 
                               (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                               0,
                               (10^18 * arg3 / 2 / arg3) + (-1 * arg4 * arg3 / 2 / arg3) + 5 * 10^17 / 10^18
                    require -arg4 + 10^18
                    if (10^18 * arg3 / 2 / arg3) - (arg4 * arg3 / 2 / arg3) / -arg4 + 10^18 != arg3 / 2 / arg3:
                        revert with 0, 'math-not-safe'
                    if arg3 / 2 < 0:
                        revert with 0, 'math-not-safe'
                    require arg3
                    if -arg4 + 10^18 > 10^18:
                        return 0, 
                               (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                               (10^18 * arg3 / 2 / arg3) + (-1 * arg4 * arg3 / 2 / arg3) + 5 * 10^17 / 10^18,
                               0
                    if not -arg4 + 10^18:
                        return 0, 
                               (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                               (10^18 * arg3 / 2 / arg3) + (-1 * arg4 * arg3 / 2 / arg3) + 5 * 10^17 / 10^18,
                               0
                    require -arg4 + 10^18
                    if (10^18 * arg3 / 2 / arg3) - (arg4 * arg3 / 2 / arg3) / -arg4 + 10^18 != arg3 / 2 / arg3:
                        revert with 0, 'math-not-safe'
                    return 0, 
                           (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                           (10^18 * arg3 / 2 / arg3) + (-1 * arg4 * arg3 / 2 / arg3) + 5 * 10^17 / 10^18,
                           (10^18 * arg3 / 2 / arg3) + (-1 * arg4 * arg3 / 2 / arg3) + 5 * 10^17 / 10^18
                require 10^(-ext_call.return_data[0] + 18)
                if (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18) / 10^(-ext_call.return_data[0] + 18) != (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18:
                    revert with 0, 'math-not-safe'
                if arg3 / 2 < 0:
                    revert with 0, 'math-not-safe'
                require arg3
                if -arg4 + 10^18 > 10^18:
                    if 10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18) / 10^18 != (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18):
                        revert with 0, 'math-not-safe'
                    if (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) < 10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18):
                        revert with 0, 'math-not-safe'
                    require arg3
                    if -arg4 + 10^18 > 10^18:
                        return 0, 
                               (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                               0,
                               0
                    if not -arg4 + 10^18:
                        return 0, 
                               (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                               0,
                               0
                    require -arg4 + 10^18
                    if (10^18 * (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) / arg3) - (arg4 * (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) / arg3) / -arg4 + 10^18 != (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) / arg3:
                        revert with 0, 'math-not-safe'
                    return 0, 
                           (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                           0,
                           (10^18 * (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) / arg3) + (-1 * arg4 * (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) / arg3) + 5 * 10^17 / 10^18
                if not -arg4 + 10^18:
                    if 10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18) / 10^18 != (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18):
                        revert with 0, 'math-not-safe'
                    if (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) < 10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18):
                        revert with 0, 'math-not-safe'
                    require arg3
                    if -arg4 + 10^18 > 10^18:
                        return 0, 
                               (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                               0,
                               0
                    if not -arg4 + 10^18:
                        return 0, 
                               (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                               0,
                               0
                    require -arg4 + 10^18
                    if (10^18 * (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) / arg3) - (arg4 * (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) / arg3) / -arg4 + 10^18 != (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) / arg3:
                        revert with 0, 'math-not-safe'
                    return 0, 
                           (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                           0,
                           (10^18 * (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) / arg3) + (-1 * arg4 * (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) / arg3) + 5 * 10^17 / 10^18
                require -arg4 + 10^18
                if (10^18 * arg3 / 2 / arg3) - (arg4 * arg3 / 2 / arg3) / -arg4 + 10^18 != arg3 / 2 / arg3:
                    revert with 0, 'math-not-safe'
                if 10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18) / 10^18 != (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18):
                    revert with 0, 'math-not-safe'
                if (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) < 10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18):
                    revert with 0, 'math-not-safe'
                require arg3
                if -arg4 + 10^18 > 10^18:
                    return 0, 
                           (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                           (10^18 * arg3 / 2 / arg3) + (-1 * arg4 * arg3 / 2 / arg3) + 5 * 10^17 / 10^18,
                           0
                if not -arg4 + 10^18:
                    return 0, 
                           (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                           (10^18 * arg3 / 2 / arg3) + (-1 * arg4 * arg3 / 2 / arg3) + 5 * 10^17 / 10^18,
                           0
                require -arg4 + 10^18
                if (10^18 * (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) / arg3) - (arg4 * (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) / arg3) / -arg4 + 10^18 != (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) / arg3:
                    revert with 0, 'math-not-safe'
                return 0, 
                       (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                       (10^18 * arg3 / 2 / arg3) + (-1 * arg4 * arg3 / 2 / arg3) + 5 * 10^17 / 10^18,
                       (10^18 * (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) / arg3) + (-1 * arg4 * (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) / arg3) + 5 * 10^17 / 10^18
            require (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]
            if ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0] / (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0] != ext_call.return_data[0]:
                revert with 0, 'math-not-safe'
            if (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 < ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]:
                revert with 0, 'math-not-safe'
            require ext_code.size(0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7)
            staticcall 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7.0x70a08231 with:
                    gas gas_remaining wei
                   args address(ext_call.return_data[0])
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]:
                require ext_code.size(0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7)
                staticcall 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7.0x313ce567 with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not 10^(-ext_call.return_data[0] + 18):
                    require ext_code.size(0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7)
                    staticcall 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7.0x313ce567 with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if 10^(-ext_call.return_data[0] + 18):
                        require 10^(-ext_call.return_data[0] + 18)
                        if 0 / 10^(-ext_call.return_data[0] + 18):
                            revert with 0, 'math-not-safe'
                    if arg3 / 2 < 0:
                        revert with 0, 'math-not-safe'
                    require arg3
                    if -arg4 + 10^18 > 10^18:
                        if arg3 / 2 < 0:
                            revert with 0, 'math-not-safe'
                        require arg3
                        if -arg4 + 10^18 > 10^18:
                            return (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18, 
                                   0,
                                   0,
                                   0
                        if not -arg4 + 10^18:
                            return (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18, 
                                   0,
                                   0,
                                   0
                        require -arg4 + 10^18
                        if (10^18 * arg3 / 2 / arg3) - (arg4 * arg3 / 2 / arg3) / -arg4 + 10^18 != arg3 / 2 / arg3:
                            revert with 0, 'math-not-safe'
                        return (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18, 
                               0,
                               0,
                               (10^18 * arg3 / 2 / arg3) + (-1 * arg4 * arg3 / 2 / arg3) + 5 * 10^17 / 10^18
                    if not -arg4 + 10^18:
                        if arg3 / 2 < 0:
                            revert with 0, 'math-not-safe'
                        require arg3
                        if -arg4 + 10^18 > 10^18:
                            return (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18, 
                                   0,
                                   0,
                                   0
                        if not -arg4 + 10^18:
                            return (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18, 
                                   0,
                                   0,
                                   0
                        require -arg4 + 10^18
                        if (10^18 * arg3 / 2 / arg3) - (arg4 * arg3 / 2 / arg3) / -arg4 + 10^18 != arg3 / 2 / arg3:
                            revert with 0, 'math-not-safe'
                        return (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18, 
                               0,
                               0,
                               (10^18 * arg3 / 2 / arg3) + (-1 * arg4 * arg3 / 2 / arg3) + 5 * 10^17 / 10^18
                    require -arg4 + 10^18
                    if (10^18 * arg3 / 2 / arg3) - (arg4 * arg3 / 2 / arg3) / -arg4 + 10^18 != arg3 / 2 / arg3:
                        revert with 0, 'math-not-safe'
                    if arg3 / 2 < 0:
                        revert with 0, 'math-not-safe'
                    require arg3
                    if -arg4 + 10^18 > 10^18:
                        return (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18, 
                               0,
                               (10^18 * arg3 / 2 / arg3) + (-1 * arg4 * arg3 / 2 / arg3) + 5 * 10^17 / 10^18,
                               0
                    if not -arg4 + 10^18:
                        return (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18, 
                               0,
                               (10^18 * arg3 / 2 / arg3) + (-1 * arg4 * arg3 / 2 / arg3) + 5 * 10^17 / 10^18,
                               0
                    require -arg4 + 10^18
                    if (10^18 * arg3 / 2 / arg3) - (arg4 * arg3 / 2 / arg3) / -arg4 + 10^18 != arg3 / 2 / arg3:
                        revert with 0, 'math-not-safe'
                    return (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18, 
                           0,
                           (10^18 * arg3 / 2 / arg3) + (-1 * arg4 * arg3 / 2 / arg3) + 5 * 10^17 / 10^18,
                           (10^18 * arg3 / 2 / arg3) + (-1 * arg4 * arg3 / 2 / arg3) + 5 * 10^17 / 10^18
                require 10^(-ext_call.return_data[0] + 18)
                if (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18) / 10^(-ext_call.return_data[0] + 18) != (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18:
                    revert with 0, 'math-not-safe'
                require ext_code.size(0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7)
                staticcall 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7.0x313ce567 with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if 10^(-ext_call.return_data[0] + 18):
                    require 10^(-ext_call.return_data[0] + 18)
                    if 0 / 10^(-ext_call.return_data[0] + 18):
                        revert with 0, 'math-not-safe'
                if 10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18) / 10^18 != (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18):
                    revert with 0, 'math-not-safe'
                if (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) < 10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18):
                    revert with 0, 'math-not-safe'
                require arg3
                if -arg4 + 10^18 > 10^18:
                    if arg3 / 2 < 0:
                        revert with 0, 'math-not-safe'
                    require arg3
                    if -arg4 + 10^18 > 10^18:
                        return (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18, 
                               0,
                               0,
                               0
                    if not -arg4 + 10^18:
                        return (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18, 
                               0,
                               0,
                               0
                    require -arg4 + 10^18
                    if (10^18 * arg3 / 2 / arg3) - (arg4 * arg3 / 2 / arg3) / -arg4 + 10^18 != arg3 / 2 / arg3:
                        revert with 0, 'math-not-safe'
                    return (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18, 
                           0,
                           0,
                           (10^18 * arg3 / 2 / arg3) + (-1 * arg4 * arg3 / 2 / arg3) + 5 * 10^17 / 10^18
                if not -arg4 + 10^18:
                    if arg3 / 2 < 0:
                        revert with 0, 'math-not-safe'
                    require arg3
                    if -arg4 + 10^18 > 10^18:
                        return (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18, 
                               0,
                               0,
                               0
                    if not -arg4 + 10^18:
                        return (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18, 
                               0,
                               0,
                               0
                    require -arg4 + 10^18
                    if (10^18 * arg3 / 2 / arg3) - (arg4 * arg3 / 2 / arg3) / -arg4 + 10^18 != arg3 / 2 / arg3:
                        revert with 0, 'math-not-safe'
                    return (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18, 
                           0,
                           0,
                           (10^18 * arg3 / 2 / arg3) + (-1 * arg4 * arg3 / 2 / arg3) + 5 * 10^17 / 10^18
                require -arg4 + 10^18
                if (10^18 * (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) / arg3) - (arg4 * (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) / arg3) / -arg4 + 10^18 != (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) / arg3:
                    revert with 0, 'math-not-safe'
                if arg3 / 2 < 0:
                    revert with 0, 'math-not-safe'
                require arg3
                if -arg4 + 10^18 > 10^18:
                    return (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18, 
                           0,
                           (10^18 * (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) / arg3) + (-1 * arg4 * (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) / arg3) + 5 * 10^17 / 10^18,
                           0
                if not -arg4 + 10^18:
                    return (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18, 
                           0,
                           (10^18 * (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) / arg3) + (-1 * arg4 * (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) / arg3) + 5 * 10^17 / 10^18,
                           0
                require -arg4 + 10^18
                if (10^18 * arg3 / 2 / arg3) - (arg4 * arg3 / 2 / arg3) / -arg4 + 10^18 != arg3 / 2 / arg3:
                    revert with 0, 'math-not-safe'
                return (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18, 
                       0,
                       (10^18 * (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) / arg3) + (-1 * arg4 * (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) / arg3) + 5 * 10^17 / 10^18,
                       (10^18 * arg3 / 2 / arg3) + (-1 * arg4 * arg3 / 2 / arg3) + 5 * 10^17 / 10^18
            require (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]
            if ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0] / (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0] != ext_call.return_data[0]:
                revert with 0, 'math-not-safe'
            if (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 < ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]:
                revert with 0, 'math-not-safe'
            require ext_code.size(0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7)
            staticcall 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7.0x313ce567 with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not 10^(-ext_call.return_data[0] + 18):
                require ext_code.size(0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7)
                staticcall 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7.0x313ce567 with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not 10^(-ext_call.return_data[0] + 18):
                    if arg3 / 2 < 0:
                        revert with 0, 'math-not-safe'
                    require arg3
                    if -arg4 + 10^18 > 10^18:
                        if arg3 / 2 < 0:
                            revert with 0, 'math-not-safe'
                        require arg3
                        if -arg4 + 10^18 > 10^18:
                            return (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18, 
                                   (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                                   0,
                                   0
                        if not -arg4 + 10^18:
                            return (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18, 
                                   (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                                   0,
                                   0
                        require -arg4 + 10^18
                        if (10^18 * arg3 / 2 / arg3) - (arg4 * arg3 / 2 / arg3) / -arg4 + 10^18 != arg3 / 2 / arg3:
                            revert with 0, 'math-not-safe'
                        return (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18, 
                               (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                               0,
                               (10^18 * arg3 / 2 / arg3) + (-1 * arg4 * arg3 / 2 / arg3) + 5 * 10^17 / 10^18
                    if not -arg4 + 10^18:
                        if arg3 / 2 < 0:
                            revert with 0, 'math-not-safe'
                        require arg3
                        if -arg4 + 10^18 > 10^18:
                            return (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18, 
                                   (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                                   0,
                                   0
                        if not -arg4 + 10^18:
                            return (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18, 
                                   (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                                   0,
                                   0
                        require -arg4 + 10^18
                        if (10^18 * arg3 / 2 / arg3) - (arg4 * arg3 / 2 / arg3) / -arg4 + 10^18 != arg3 / 2 / arg3:
                            revert with 0, 'math-not-safe'
                        return (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18, 
                               (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                               0,
                               (10^18 * arg3 / 2 / arg3) + (-1 * arg4 * arg3 / 2 / arg3) + 5 * 10^17 / 10^18
                    require -arg4 + 10^18
                    if (10^18 * arg3 / 2 / arg3) - (arg4 * arg3 / 2 / arg3) / -arg4 + 10^18 != arg3 / 2 / arg3:
                        revert with 0, 'math-not-safe'
                    if arg3 / 2 < 0:
                        revert with 0, 'math-not-safe'
                    require arg3
                    if -arg4 + 10^18 > 10^18:
                        return (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18, 
                               (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                               (10^18 * arg3 / 2 / arg3) + (-1 * arg4 * arg3 / 2 / arg3) + 5 * 10^17 / 10^18,
                               0
                    if not -arg4 + 10^18:
                        return (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18, 
                               (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                               (10^18 * arg3 / 2 / arg3) + (-1 * arg4 * arg3 / 2 / arg3) + 5 * 10^17 / 10^18,
                               0
                    require -arg4 + 10^18
                    if (10^18 * arg3 / 2 / arg3) - (arg4 * arg3 / 2 / arg3) / -arg4 + 10^18 != arg3 / 2 / arg3:
                        revert with 0, 'math-not-safe'
                    return (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18, 
                           (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                           (10^18 * arg3 / 2 / arg3) + (-1 * arg4 * arg3 / 2 / arg3) + 5 * 10^17 / 10^18,
                           (10^18 * arg3 / 2 / arg3) + (-1 * arg4 * arg3 / 2 / arg3) + 5 * 10^17 / 10^18
                require 10^(-ext_call.return_data[0] + 18)
                if (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18) / 10^(-ext_call.return_data[0] + 18) != (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18:
                    revert with 0, 'math-not-safe'
                if arg3 / 2 < 0:
                    revert with 0, 'math-not-safe'
                require arg3
                if -arg4 + 10^18 > 10^18:
                    if 10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18) / 10^18 != (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18):
                        revert with 0, 'math-not-safe'
                    if (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) < 10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18):
                        revert with 0, 'math-not-safe'
                    require arg3
                    if -arg4 + 10^18 > 10^18:
                        return (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18, 
                               (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                               0,
                               0
                    if not -arg4 + 10^18:
                        return (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18, 
                               (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                               0,
                               0
                    require -arg4 + 10^18
                    if (10^18 * (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) / arg3) - (arg4 * (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) / arg3) / -arg4 + 10^18 != (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) / arg3:
                        revert with 0, 'math-not-safe'
                    return (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18, 
                           (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                           0,
                           (10^18 * (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) / arg3) + (-1 * arg4 * (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) / arg3) + 5 * 10^17 / 10^18
                if not -arg4 + 10^18:
                    if 10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18) / 10^18 != (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18):
                        revert with 0, 'math-not-safe'
                    if (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) < 10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18):
                        revert with 0, 'math-not-safe'
                    require arg3
                    if -arg4 + 10^18 > 10^18:
                        return (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18, 
                               (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                               0,
                               0
                    if not -arg4 + 10^18:
                        return (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18, 
                               (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                               0,
                               0
                    require -arg4 + 10^18
                    if (10^18 * (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) / arg3) - (arg4 * (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) / arg3) / -arg4 + 10^18 != (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) / arg3:
                        revert with 0, 'math-not-safe'
                    return (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18, 
                           (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                           0,
                           (10^18 * (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) / arg3) + (-1 * arg4 * (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) / arg3) + 5 * 10^17 / 10^18
                require -arg4 + 10^18
                if (10^18 * arg3 / 2 / arg3) - (arg4 * arg3 / 2 / arg3) / -arg4 + 10^18 != arg3 / 2 / arg3:
                    revert with 0, 'math-not-safe'
                if 10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18) / 10^18 != (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18):
                    revert with 0, 'math-not-safe'
                if (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) < 10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18):
                    revert with 0, 'math-not-safe'
                require arg3
                if -arg4 + 10^18 > 10^18:
                    return (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18, 
                           (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                           (10^18 * arg3 / 2 / arg3) + (-1 * arg4 * arg3 / 2 / arg3) + 5 * 10^17 / 10^18,
                           0
                if not -arg4 + 10^18:
                    return (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18, 
                           (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                           (10^18 * arg3 / 2 / arg3) + (-1 * arg4 * arg3 / 2 / arg3) + 5 * 10^17 / 10^18,
                           0
                require -arg4 + 10^18
                if (10^18 * (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) / arg3) - (arg4 * (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) / arg3) / -arg4 + 10^18 != (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) / arg3:
                    revert with 0, 'math-not-safe'
                return (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18, 
                       (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                       (10^18 * arg3 / 2 / arg3) + (-1 * arg4 * arg3 / 2 / arg3) + 5 * 10^17 / 10^18,
                       (10^18 * (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) / arg3) + (-1 * arg4 * (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) / arg3) + 5 * 10^17 / 10^18
            require 10^(-ext_call.return_data[0] + 18)
            if (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18) / 10^(-ext_call.return_data[0] + 18) != (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18:
                revert with 0, 'math-not-safe'
            require ext_code.size(0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7)
            staticcall 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7.0x313ce567 with:
                    gas gas_remaining wei
        else:
            staticcall address(ext_call.return_data[0]).getPair(address arg1, address arg2) with:
                    gas gas_remaining wei
                   args 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7, arg2
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            if not ext_call.return_data[12 len 20]:
                revert with 0, 'pair-not-found.'
            require ext_code.size(address(ext_call.return_data[0]))
            staticcall address(ext_call.return_data[0]).0x18160ddd with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if 10^18 * arg3 / 10^18 != arg3:
                revert with 0, 'math-not-safe'
            if (10^18 * arg3) + (ext_call.return_data[0] / 2) < 10^18 * arg3:
                revert with 0, 'math-not-safe'
            require ext_call.return_data[0]
            require ext_code.size(0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7)
            staticcall 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7.0x70a08231 with:
                    gas gas_remaining wei
                   args address(ext_call.return_data[0])
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]:
                require ext_code.size(arg2)
                staticcall arg2.0x70a08231 with:
                        gas gas_remaining wei
                       args address(ext_call.return_data[0])
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]:
                    require ext_code.size(0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7)
                    staticcall 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7.0x313ce567 with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if 10^(-ext_call.return_data[0] + 18):
                        require 10^(-ext_call.return_data[0] + 18)
                        if 0 / 10^(-ext_call.return_data[0] + 18):
                            revert with 0, 'math-not-safe'
                    require ext_code.size(arg2)
                    staticcall arg2.0x313ce567 with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if 10^(-ext_call.return_data[0] + 18):
                        require 10^(-ext_call.return_data[0] + 18)
                        if 0 / 10^(-ext_call.return_data[0] + 18):
                            revert with 0, 'math-not-safe'
                    if arg3 / 2 < 0:
                        revert with 0, 'math-not-safe'
                    require arg3
                    if -arg4 + 10^18 > 10^18:
                        if arg3 / 2 < 0:
                            revert with 0, 'math-not-safe'
                        require arg3
                        if -arg4 + 10^18 > 10^18:
                            return 0
                        if not -arg4 + 10^18:
                            return 0
                        require -arg4 + 10^18
                        if (10^18 * arg3 / 2 / arg3) - (arg4 * arg3 / 2 / arg3) / -arg4 + 10^18 != arg3 / 2 / arg3:
                            revert with 0, 'math-not-safe'
                        return 0, 0, 0, (10^18 * arg3 / 2 / arg3) + (-1 * arg4 * arg3 / 2 / arg3) + 5 * 10^17 / 10^18
                    if not -arg4 + 10^18:
                        if arg3 / 2 < 0:
                            revert with 0, 'math-not-safe'
                        require arg3
                        if -arg4 + 10^18 > 10^18:
                            return 0
                        if not -arg4 + 10^18:
                            return 0
                        require -arg4 + 10^18
                        if (10^18 * arg3 / 2 / arg3) - (arg4 * arg3 / 2 / arg3) / -arg4 + 10^18 != arg3 / 2 / arg3:
                            revert with 0, 'math-not-safe'
                        return 0, 0, 0, (10^18 * arg3 / 2 / arg3) + (-1 * arg4 * arg3 / 2 / arg3) + 5 * 10^17 / 10^18
                    require -arg4 + 10^18
                    if (10^18 * arg3 / 2 / arg3) - (arg4 * arg3 / 2 / arg3) / -arg4 + 10^18 != arg3 / 2 / arg3:
                        revert with 0, 'math-not-safe'
                    if arg3 / 2 < 0:
                        revert with 0, 'math-not-safe'
                    require arg3
                    if -arg4 + 10^18 > 10^18:
                        return 0, 0, (10^18 * arg3 / 2 / arg3) + (-1 * arg4 * arg3 / 2 / arg3) + 5 * 10^17 / 10^18, 0
                    if not -arg4 + 10^18:
                        return 0, 0, (10^18 * arg3 / 2 / arg3) + (-1 * arg4 * arg3 / 2 / arg3) + 5 * 10^17 / 10^18, 0
                    require -arg4 + 10^18
                    if (10^18 * arg3 / 2 / arg3) - (arg4 * arg3 / 2 / arg3) / -arg4 + 10^18 != arg3 / 2 / arg3:
                        revert with 0, 'math-not-safe'
                    return 0, 
                           0,
                           (10^18 * arg3 / 2 / arg3) + (-1 * arg4 * arg3 / 2 / arg3) + 5 * 10^17 / 10^18,
                           (10^18 * arg3 / 2 / arg3) + (-1 * arg4 * arg3 / 2 / arg3) + 5 * 10^17 / 10^18
                require (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]
                if ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0] / (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 'math-not-safe'
                if (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 < ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]:
                    revert with 0, 'math-not-safe'
                require ext_code.size(0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7)
                staticcall 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7.0x313ce567 with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if 10^(-ext_call.return_data[0] + 18):
                    require 10^(-ext_call.return_data[0] + 18)
                    if 0 / 10^(-ext_call.return_data[0] + 18):
                        revert with 0, 'math-not-safe'
                require ext_code.size(arg2)
                staticcall arg2.0x313ce567 with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not 10^(-ext_call.return_data[0] + 18):
                    if arg3 / 2 < 0:
                        revert with 0, 'math-not-safe'
                    require arg3
                    if -arg4 + 10^18 > 10^18:
                        if arg3 / 2 < 0:
                            revert with 0, 'math-not-safe'
                        require arg3
                        if -arg4 + 10^18 > 10^18:
                            return 0, 
                                   (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                                   0,
                                   0
                        if not -arg4 + 10^18:
                            return 0, 
                                   (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                                   0,
                                   0
                        require -arg4 + 10^18
                        if (10^18 * arg3 / 2 / arg3) - (arg4 * arg3 / 2 / arg3) / -arg4 + 10^18 != arg3 / 2 / arg3:
                            revert with 0, 'math-not-safe'
                        return 0, 
                               (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                               0,
                               (10^18 * arg3 / 2 / arg3) + (-1 * arg4 * arg3 / 2 / arg3) + 5 * 10^17 / 10^18
                    if not -arg4 + 10^18:
                        if arg3 / 2 < 0:
                            revert with 0, 'math-not-safe'
                        require arg3
                        if -arg4 + 10^18 > 10^18:
                            return 0, 
                                   (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                                   0,
                                   0
                        if not -arg4 + 10^18:
                            return 0, 
                                   (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                                   0,
                                   0
                        require -arg4 + 10^18
                        if (10^18 * arg3 / 2 / arg3) - (arg4 * arg3 / 2 / arg3) / -arg4 + 10^18 != arg3 / 2 / arg3:
                            revert with 0, 'math-not-safe'
                        return 0, 
                               (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                               0,
                               (10^18 * arg3 / 2 / arg3) + (-1 * arg4 * arg3 / 2 / arg3) + 5 * 10^17 / 10^18
                    require -arg4 + 10^18
                    if (10^18 * arg3 / 2 / arg3) - (arg4 * arg3 / 2 / arg3) / -arg4 + 10^18 != arg3 / 2 / arg3:
                        revert with 0, 'math-not-safe'
                    if arg3 / 2 < 0:
                        revert with 0, 'math-not-safe'
                    require arg3
                    if -arg4 + 10^18 > 10^18:
                        return 0, 
                               (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                               (10^18 * arg3 / 2 / arg3) + (-1 * arg4 * arg3 / 2 / arg3) + 5 * 10^17 / 10^18,
                               0
                    if not -arg4 + 10^18:
                        return 0, 
                               (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                               (10^18 * arg3 / 2 / arg3) + (-1 * arg4 * arg3 / 2 / arg3) + 5 * 10^17 / 10^18,
                               0
                    require -arg4 + 10^18
                    if (10^18 * arg3 / 2 / arg3) - (arg4 * arg3 / 2 / arg3) / -arg4 + 10^18 != arg3 / 2 / arg3:
                        revert with 0, 'math-not-safe'
                    return 0, 
                           (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                           (10^18 * arg3 / 2 / arg3) + (-1 * arg4 * arg3 / 2 / arg3) + 5 * 10^17 / 10^18,
                           (10^18 * arg3 / 2 / arg3) + (-1 * arg4 * arg3 / 2 / arg3) + 5 * 10^17 / 10^18
                require 10^(-ext_call.return_data[0] + 18)
                if (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18) / 10^(-ext_call.return_data[0] + 18) != (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18:
                    revert with 0, 'math-not-safe'
                if arg3 / 2 < 0:
                    revert with 0, 'math-not-safe'
                require arg3
                if -arg4 + 10^18 > 10^18:
                    if 10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18) / 10^18 != (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18):
                        revert with 0, 'math-not-safe'
                    if (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) < 10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18):
                        revert with 0, 'math-not-safe'
                    require arg3
                    if -arg4 + 10^18 > 10^18:
                        return 0, 
                               (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                               0,
                               0
                    if not -arg4 + 10^18:
                        return 0, 
                               (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                               0,
                               0
                    require -arg4 + 10^18
                    if (10^18 * (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) / arg3) - (arg4 * (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) / arg3) / -arg4 + 10^18 != (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) / arg3:
                        revert with 0, 'math-not-safe'
                    return 0, 
                           (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                           0,
                           (10^18 * (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) / arg3) + (-1 * arg4 * (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) / arg3) + 5 * 10^17 / 10^18
                if not -arg4 + 10^18:
                    if 10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18) / 10^18 != (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18):
                        revert with 0, 'math-not-safe'
                    if (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) < 10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18):
                        revert with 0, 'math-not-safe'
                    require arg3
                    if -arg4 + 10^18 > 10^18:
                        return 0, 
                               (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                               0,
                               0
                    if not -arg4 + 10^18:
                        return 0, 
                               (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                               0,
                               0
                    require -arg4 + 10^18
                    if (10^18 * (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) / arg3) - (arg4 * (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) / arg3) / -arg4 + 10^18 != (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) / arg3:
                        revert with 0, 'math-not-safe'
                    return 0, 
                           (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                           0,
                           (10^18 * (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) / arg3) + (-1 * arg4 * (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) / arg3) + 5 * 10^17 / 10^18
                require -arg4 + 10^18
                if (10^18 * arg3 / 2 / arg3) - (arg4 * arg3 / 2 / arg3) / -arg4 + 10^18 != arg3 / 2 / arg3:
                    revert with 0, 'math-not-safe'
                if 10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18) / 10^18 != (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18):
                    revert with 0, 'math-not-safe'
                if (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) < 10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18):
                    revert with 0, 'math-not-safe'
                require arg3
                if -arg4 + 10^18 > 10^18:
                    return 0, 
                           (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                           (10^18 * arg3 / 2 / arg3) + (-1 * arg4 * arg3 / 2 / arg3) + 5 * 10^17 / 10^18,
                           0
                if not -arg4 + 10^18:
                    return 0, 
                           (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                           (10^18 * arg3 / 2 / arg3) + (-1 * arg4 * arg3 / 2 / arg3) + 5 * 10^17 / 10^18,
                           0
                require -arg4 + 10^18
                if (10^18 * (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) / arg3) - (arg4 * (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) / arg3) / -arg4 + 10^18 != (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) / arg3:
                    revert with 0, 'math-not-safe'
                return 0, 
                       (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                       (10^18 * arg3 / 2 / arg3) + (-1 * arg4 * arg3 / 2 / arg3) + 5 * 10^17 / 10^18,
                       (10^18 * (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) / arg3) + (-1 * arg4 * (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) / arg3) + 5 * 10^17 / 10^18
            require (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]
            if ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0] / (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0] != ext_call.return_data[0]:
                revert with 0, 'math-not-safe'
            if (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 < ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]:
                revert with 0, 'math-not-safe'
            require ext_code.size(arg2)
            staticcall arg2.0x70a08231 with:
                    gas gas_remaining wei
                   args address(ext_call.return_data[0])
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]:
                require ext_code.size(0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7)
                staticcall 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7.0x313ce567 with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not 10^(-ext_call.return_data[0] + 18):
                    require ext_code.size(arg2)
                    staticcall arg2.0x313ce567 with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if 10^(-ext_call.return_data[0] + 18):
                        require 10^(-ext_call.return_data[0] + 18)
                        if 0 / 10^(-ext_call.return_data[0] + 18):
                            revert with 0, 'math-not-safe'
                    if arg3 / 2 < 0:
                        revert with 0, 'math-not-safe'
                    require arg3
                    if -arg4 + 10^18 > 10^18:
                        if arg3 / 2 < 0:
                            revert with 0, 'math-not-safe'
                        require arg3
                        if -arg4 + 10^18 > 10^18:
                            return (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18, 
                                   0,
                                   0,
                                   0
                        if not -arg4 + 10^18:
                            return (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18, 
                                   0,
                                   0,
                                   0
                        require -arg4 + 10^18
                        if (10^18 * arg3 / 2 / arg3) - (arg4 * arg3 / 2 / arg3) / -arg4 + 10^18 != arg3 / 2 / arg3:
                            revert with 0, 'math-not-safe'
                        return (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18, 
                               0,
                               0,
                               (10^18 * arg3 / 2 / arg3) + (-1 * arg4 * arg3 / 2 / arg3) + 5 * 10^17 / 10^18
                    if not -arg4 + 10^18:
                        if arg3 / 2 < 0:
                            revert with 0, 'math-not-safe'
                        require arg3
                        if -arg4 + 10^18 > 10^18:
                            return (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18, 
                                   0,
                                   0,
                                   0
                        if not -arg4 + 10^18:
                            return (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18, 
                                   0,
                                   0,
                                   0
                        require -arg4 + 10^18
                        if (10^18 * arg3 / 2 / arg3) - (arg4 * arg3 / 2 / arg3) / -arg4 + 10^18 != arg3 / 2 / arg3:
                            revert with 0, 'math-not-safe'
                        return (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18, 
                               0,
                               0,
                               (10^18 * arg3 / 2 / arg3) + (-1 * arg4 * arg3 / 2 / arg3) + 5 * 10^17 / 10^18
                    require -arg4 + 10^18
                    if (10^18 * arg3 / 2 / arg3) - (arg4 * arg3 / 2 / arg3) / -arg4 + 10^18 != arg3 / 2 / arg3:
                        revert with 0, 'math-not-safe'
                    if arg3 / 2 < 0:
                        revert with 0, 'math-not-safe'
                    require arg3
                    if -arg4 + 10^18 > 10^18:
                        return (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18, 
                               0,
                               (10^18 * arg3 / 2 / arg3) + (-1 * arg4 * arg3 / 2 / arg3) + 5 * 10^17 / 10^18,
                               0
                    if not -arg4 + 10^18:
                        return (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18, 
                               0,
                               (10^18 * arg3 / 2 / arg3) + (-1 * arg4 * arg3 / 2 / arg3) + 5 * 10^17 / 10^18,
                               0
                    require -arg4 + 10^18
                    if (10^18 * arg3 / 2 / arg3) - (arg4 * arg3 / 2 / arg3) / -arg4 + 10^18 != arg3 / 2 / arg3:
                        revert with 0, 'math-not-safe'
                    return (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18, 
                           0,
                           (10^18 * arg3 / 2 / arg3) + (-1 * arg4 * arg3 / 2 / arg3) + 5 * 10^17 / 10^18,
                           (10^18 * arg3 / 2 / arg3) + (-1 * arg4 * arg3 / 2 / arg3) + 5 * 10^17 / 10^18
                require 10^(-ext_call.return_data[0] + 18)
                if (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18) / 10^(-ext_call.return_data[0] + 18) != (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18:
                    revert with 0, 'math-not-safe'
                require ext_code.size(arg2)
                staticcall arg2.0x313ce567 with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if 10^(-ext_call.return_data[0] + 18):
                    require 10^(-ext_call.return_data[0] + 18)
                    if 0 / 10^(-ext_call.return_data[0] + 18):
                        revert with 0, 'math-not-safe'
                if 10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18) / 10^18 != (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18):
                    revert with 0, 'math-not-safe'
                if (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) < 10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18):
                    revert with 0, 'math-not-safe'
                require arg3
                if -arg4 + 10^18 > 10^18:
                    if arg3 / 2 < 0:
                        revert with 0, 'math-not-safe'
                    require arg3
                    if -arg4 + 10^18 > 10^18:
                        return (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18, 
                               0,
                               0,
                               0
                    if not -arg4 + 10^18:
                        return (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18, 
                               0,
                               0,
                               0
                    require -arg4 + 10^18
                    if (10^18 * arg3 / 2 / arg3) - (arg4 * arg3 / 2 / arg3) / -arg4 + 10^18 != arg3 / 2 / arg3:
                        revert with 0, 'math-not-safe'
                    return (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18, 
                           0,
                           0,
                           (10^18 * arg3 / 2 / arg3) + (-1 * arg4 * arg3 / 2 / arg3) + 5 * 10^17 / 10^18
                if not -arg4 + 10^18:
                    if arg3 / 2 < 0:
                        revert with 0, 'math-not-safe'
                    require arg3
                    if -arg4 + 10^18 > 10^18:
                        return (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18, 
                               0,
                               0,
                               0
                    if not -arg4 + 10^18:
                        return (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18, 
                               0,
                               0,
                               0
                    require -arg4 + 10^18
                    if (10^18 * arg3 / 2 / arg3) - (arg4 * arg3 / 2 / arg3) / -arg4 + 10^18 != arg3 / 2 / arg3:
                        revert with 0, 'math-not-safe'
                    return (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18, 
                           0,
                           0,
                           (10^18 * arg3 / 2 / arg3) + (-1 * arg4 * arg3 / 2 / arg3) + 5 * 10^17 / 10^18
                require -arg4 + 10^18
                if (10^18 * (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) / arg3) - (arg4 * (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) / arg3) / -arg4 + 10^18 != (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) / arg3:
                    revert with 0, 'math-not-safe'
                if arg3 / 2 < 0:
                    revert with 0, 'math-not-safe'
                require arg3
                if -arg4 + 10^18 > 10^18:
                    return (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18, 
                           0,
                           (10^18 * (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) / arg3) + (-1 * arg4 * (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) / arg3) + 5 * 10^17 / 10^18,
                           0
                if not -arg4 + 10^18:
                    return (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18, 
                           0,
                           (10^18 * (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) / arg3) + (-1 * arg4 * (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) / arg3) + 5 * 10^17 / 10^18,
                           0
                require -arg4 + 10^18
                if (10^18 * arg3 / 2 / arg3) - (arg4 * arg3 / 2 / arg3) / -arg4 + 10^18 != arg3 / 2 / arg3:
                    revert with 0, 'math-not-safe'
                return (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18, 
                       0,
                       (10^18 * (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) / arg3) + (-1 * arg4 * (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) / arg3) + 5 * 10^17 / 10^18,
                       (10^18 * arg3 / 2 / arg3) + (-1 * arg4 * arg3 / 2 / arg3) + 5 * 10^17 / 10^18
            require (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]
            if ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0] / (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0] != ext_call.return_data[0]:
                revert with 0, 'math-not-safe'
            if (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 < ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]:
                revert with 0, 'math-not-safe'
            require ext_code.size(0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7)
            staticcall 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7.0x313ce567 with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not 10^(-ext_call.return_data[0] + 18):
                require ext_code.size(arg2)
                staticcall arg2.0x313ce567 with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not 10^(-ext_call.return_data[0] + 18):
                    if arg3 / 2 < 0:
                        revert with 0, 'math-not-safe'
                    require arg3
                    if -arg4 + 10^18 > 10^18:
                        if arg3 / 2 < 0:
                            revert with 0, 'math-not-safe'
                        require arg3
                        if -arg4 + 10^18 > 10^18:
                            return (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18, 
                                   (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                                   0,
                                   0
                        if not -arg4 + 10^18:
                            return (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18, 
                                   (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                                   0,
                                   0
                        require -arg4 + 10^18
                        if (10^18 * arg3 / 2 / arg3) - (arg4 * arg3 / 2 / arg3) / -arg4 + 10^18 != arg3 / 2 / arg3:
                            revert with 0, 'math-not-safe'
                        return (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18, 
                               (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                               0,
                               (10^18 * arg3 / 2 / arg3) + (-1 * arg4 * arg3 / 2 / arg3) + 5 * 10^17 / 10^18
                    if not -arg4 + 10^18:
                        if arg3 / 2 < 0:
                            revert with 0, 'math-not-safe'
                        require arg3
                        if -arg4 + 10^18 > 10^18:
                            return (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18, 
                                   (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                                   0,
                                   0
                        if not -arg4 + 10^18:
                            return (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18, 
                                   (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                                   0,
                                   0
                        require -arg4 + 10^18
                        if (10^18 * arg3 / 2 / arg3) - (arg4 * arg3 / 2 / arg3) / -arg4 + 10^18 != arg3 / 2 / arg3:
                            revert with 0, 'math-not-safe'
                        return (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18, 
                               (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                               0,
                               (10^18 * arg3 / 2 / arg3) + (-1 * arg4 * arg3 / 2 / arg3) + 5 * 10^17 / 10^18
                    require -arg4 + 10^18
                    if (10^18 * arg3 / 2 / arg3) - (arg4 * arg3 / 2 / arg3) / -arg4 + 10^18 != arg3 / 2 / arg3:
                        revert with 0, 'math-not-safe'
                    if arg3 / 2 < 0:
                        revert with 0, 'math-not-safe'
                    require arg3
                    if -arg4 + 10^18 > 10^18:
                        return (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18, 
                               (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                               (10^18 * arg3 / 2 / arg3) + (-1 * arg4 * arg3 / 2 / arg3) + 5 * 10^17 / 10^18,
                               0
                    if not -arg4 + 10^18:
                        return (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18, 
                               (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                               (10^18 * arg3 / 2 / arg3) + (-1 * arg4 * arg3 / 2 / arg3) + 5 * 10^17 / 10^18,
                               0
                    require -arg4 + 10^18
                    if (10^18 * arg3 / 2 / arg3) - (arg4 * arg3 / 2 / arg3) / -arg4 + 10^18 != arg3 / 2 / arg3:
                        revert with 0, 'math-not-safe'
                    return (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18, 
                           (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                           (10^18 * arg3 / 2 / arg3) + (-1 * arg4 * arg3 / 2 / arg3) + 5 * 10^17 / 10^18,
                           (10^18 * arg3 / 2 / arg3) + (-1 * arg4 * arg3 / 2 / arg3) + 5 * 10^17 / 10^18
                require 10^(-ext_call.return_data[0] + 18)
                if (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18) / 10^(-ext_call.return_data[0] + 18) != (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18:
                    revert with 0, 'math-not-safe'
                if arg3 / 2 < 0:
                    revert with 0, 'math-not-safe'
                require arg3
                if -arg4 + 10^18 > 10^18:
                    if 10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18) / 10^18 != (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18):
                        revert with 0, 'math-not-safe'
                    if (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) < 10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18):
                        revert with 0, 'math-not-safe'
                    require arg3
                    if -arg4 + 10^18 > 10^18:
                        return (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18, 
                               (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                               0,
                               0
                    if not -arg4 + 10^18:
                        return (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18, 
                               (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                               0,
                               0
                    require -arg4 + 10^18
                    if (10^18 * (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) / arg3) - (arg4 * (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) / arg3) / -arg4 + 10^18 != (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) / arg3:
                        revert with 0, 'math-not-safe'
                    return (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18, 
                           (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                           0,
                           (10^18 * (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) / arg3) + (-1 * arg4 * (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) / arg3) + 5 * 10^17 / 10^18
                if not -arg4 + 10^18:
                    if 10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18) / 10^18 != (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18):
                        revert with 0, 'math-not-safe'
                    if (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) < 10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18):
                        revert with 0, 'math-not-safe'
                    require arg3
                    if -arg4 + 10^18 > 10^18:
                        return (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18, 
                               (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                               0,
                               0
                    if not -arg4 + 10^18:
                        return (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18, 
                               (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                               0,
                               0
                    require -arg4 + 10^18
                    if (10^18 * (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) / arg3) - (arg4 * (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) / arg3) / -arg4 + 10^18 != (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) / arg3:
                        revert with 0, 'math-not-safe'
                    return (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18, 
                           (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                           0,
                           (10^18 * (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) / arg3) + (-1 * arg4 * (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) / arg3) + 5 * 10^17 / 10^18
                require -arg4 + 10^18
                if (10^18 * arg3 / 2 / arg3) - (arg4 * arg3 / 2 / arg3) / -arg4 + 10^18 != arg3 / 2 / arg3:
                    revert with 0, 'math-not-safe'
                if 10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18) / 10^18 != (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18):
                    revert with 0, 'math-not-safe'
                if (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) < 10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18):
                    revert with 0, 'math-not-safe'
                require arg3
                if -arg4 + 10^18 > 10^18:
                    return (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18, 
                           (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                           (10^18 * arg3 / 2 / arg3) + (-1 * arg4 * arg3 / 2 / arg3) + 5 * 10^17 / 10^18,
                           0
                if not -arg4 + 10^18:
                    return (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18, 
                           (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                           (10^18 * arg3 / 2 / arg3) + (-1 * arg4 * arg3 / 2 / arg3) + 5 * 10^17 / 10^18,
                           0
                require -arg4 + 10^18
                if (10^18 * (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) / arg3) - (arg4 * (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) / arg3) / -arg4 + 10^18 != (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) / arg3:
                    revert with 0, 'math-not-safe'
                return (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18, 
                       (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                       (10^18 * arg3 / 2 / arg3) + (-1 * arg4 * arg3 / 2 / arg3) + 5 * 10^17 / 10^18,
                       (10^18 * (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) / arg3) + (-1 * arg4 * (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) / arg3) + 5 * 10^17 / 10^18
            require 10^(-ext_call.return_data[0] + 18)
            if (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18) / 10^(-ext_call.return_data[0] + 18) != (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18:
                revert with 0, 'math-not-safe'
            require ext_code.size(arg2)
            staticcall arg2.0x313ce567 with:
                    gas gas_remaining wei
    else:
        if arg2 == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
            staticcall address(ext_call.return_data[0]).getPair(address arg1, address arg2) with:
                    gas gas_remaining wei
                   args address(arg1), 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            if not ext_call.return_data[12 len 20]:
                revert with 0, 'pair-not-found.'
            require ext_code.size(address(ext_call.return_data[0]))
            staticcall address(ext_call.return_data[0]).0x18160ddd with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if 10^18 * arg3 / 10^18 != arg3:
                revert with 0, 'math-not-safe'
            if (10^18 * arg3) + (ext_call.return_data[0] / 2) < 10^18 * arg3:
                revert with 0, 'math-not-safe'
            require ext_call.return_data[0]
            require ext_code.size(arg1)
            staticcall arg1.0x70a08231 with:
                    gas gas_remaining wei
                   args address(ext_call.return_data[0])
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]:
                require ext_code.size(0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7)
                staticcall 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7.0x70a08231 with:
                        gas gas_remaining wei
                       args address(ext_call.return_data[0])
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]:
                    require ext_code.size(arg1)
                    staticcall arg1.0x313ce567 with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if 10^(-ext_call.return_data[0] + 18):
                        require 10^(-ext_call.return_data[0] + 18)
                        if 0 / 10^(-ext_call.return_data[0] + 18):
                            revert with 0, 'math-not-safe'
                    require ext_code.size(0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7)
                    staticcall 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7.0x313ce567 with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if 10^(-ext_call.return_data[0] + 18):
                        require 10^(-ext_call.return_data[0] + 18)
                        if 0 / 10^(-ext_call.return_data[0] + 18):
                            revert with 0, 'math-not-safe'
                    if arg3 / 2 < 0:
                        revert with 0, 'math-not-safe'
                    require arg3
                    if -arg4 + 10^18 > 10^18:
                        if arg3 / 2 < 0:
                            revert with 0, 'math-not-safe'
                        require arg3
                        if -arg4 + 10^18 > 10^18:
                            return 0
                        if not -arg4 + 10^18:
                            return 0
                        require -arg4 + 10^18
                        if (10^18 * arg3 / 2 / arg3) - (arg4 * arg3 / 2 / arg3) / -arg4 + 10^18 != arg3 / 2 / arg3:
                            revert with 0, 'math-not-safe'
                        return 0, 0, 0, (10^18 * arg3 / 2 / arg3) + (-1 * arg4 * arg3 / 2 / arg3) + 5 * 10^17 / 10^18
                    if not -arg4 + 10^18:
                        if arg3 / 2 < 0:
                            revert with 0, 'math-not-safe'
                        require arg3
                        if -arg4 + 10^18 > 10^18:
                            return 0
                        if not -arg4 + 10^18:
                            return 0
                        require -arg4 + 10^18
                        if (10^18 * arg3 / 2 / arg3) - (arg4 * arg3 / 2 / arg3) / -arg4 + 10^18 != arg3 / 2 / arg3:
                            revert with 0, 'math-not-safe'
                        return 0, 0, 0, (10^18 * arg3 / 2 / arg3) + (-1 * arg4 * arg3 / 2 / arg3) + 5 * 10^17 / 10^18
                    require -arg4 + 10^18
                    if (10^18 * arg3 / 2 / arg3) - (arg4 * arg3 / 2 / arg3) / -arg4 + 10^18 != arg3 / 2 / arg3:
                        revert with 0, 'math-not-safe'
                    if arg3 / 2 < 0:
                        revert with 0, 'math-not-safe'
                    require arg3
                    if -arg4 + 10^18 > 10^18:
                        return 0, 0, (10^18 * arg3 / 2 / arg3) + (-1 * arg4 * arg3 / 2 / arg3) + 5 * 10^17 / 10^18, 0
                    if not -arg4 + 10^18:
                        return 0, 0, (10^18 * arg3 / 2 / arg3) + (-1 * arg4 * arg3 / 2 / arg3) + 5 * 10^17 / 10^18, 0
                    require -arg4 + 10^18
                    if (10^18 * arg3 / 2 / arg3) - (arg4 * arg3 / 2 / arg3) / -arg4 + 10^18 != arg3 / 2 / arg3:
                        revert with 0, 'math-not-safe'
                    return 0, 
                           0,
                           (10^18 * arg3 / 2 / arg3) + (-1 * arg4 * arg3 / 2 / arg3) + 5 * 10^17 / 10^18,
                           (10^18 * arg3 / 2 / arg3) + (-1 * arg4 * arg3 / 2 / arg3) + 5 * 10^17 / 10^18
                require (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]
                if ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0] / (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 'math-not-safe'
                if (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 < ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]:
                    revert with 0, 'math-not-safe'
                require ext_code.size(arg1)
                staticcall arg1.0x313ce567 with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if 10^(-ext_call.return_data[0] + 18):
                    require 10^(-ext_call.return_data[0] + 18)
                    if 0 / 10^(-ext_call.return_data[0] + 18):
                        revert with 0, 'math-not-safe'
                require ext_code.size(0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7)
                staticcall 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7.0x313ce567 with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not 10^(-ext_call.return_data[0] + 18):
                    if arg3 / 2 < 0:
                        revert with 0, 'math-not-safe'
                    require arg3
                    if -arg4 + 10^18 > 10^18:
                        if arg3 / 2 < 0:
                            revert with 0, 'math-not-safe'
                        require arg3
                        if -arg4 + 10^18 > 10^18:
                            return 0, 
                                   (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                                   0,
                                   0
                        if not -arg4 + 10^18:
                            return 0, 
                                   (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                                   0,
                                   0
                        require -arg4 + 10^18
                        if (10^18 * arg3 / 2 / arg3) - (arg4 * arg3 / 2 / arg3) / -arg4 + 10^18 != arg3 / 2 / arg3:
                            revert with 0, 'math-not-safe'
                        return 0, 
                               (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                               0,
                               (10^18 * arg3 / 2 / arg3) + (-1 * arg4 * arg3 / 2 / arg3) + 5 * 10^17 / 10^18
                    if not -arg4 + 10^18:
                        if arg3 / 2 < 0:
                            revert with 0, 'math-not-safe'
                        require arg3
                        if -arg4 + 10^18 > 10^18:
                            return 0, 
                                   (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                                   0,
                                   0
                        if not -arg4 + 10^18:
                            return 0, 
                                   (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                                   0,
                                   0
                        require -arg4 + 10^18
                        if (10^18 * arg3 / 2 / arg3) - (arg4 * arg3 / 2 / arg3) / -arg4 + 10^18 != arg3 / 2 / arg3:
                            revert with 0, 'math-not-safe'
                        return 0, 
                               (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                               0,
                               (10^18 * arg3 / 2 / arg3) + (-1 * arg4 * arg3 / 2 / arg3) + 5 * 10^17 / 10^18
                    require -arg4 + 10^18
                    if (10^18 * arg3 / 2 / arg3) - (arg4 * arg3 / 2 / arg3) / -arg4 + 10^18 != arg3 / 2 / arg3:
                        revert with 0, 'math-not-safe'
                    if arg3 / 2 < 0:
                        revert with 0, 'math-not-safe'
                    require arg3
                    if -arg4 + 10^18 > 10^18:
                        return 0, 
                               (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                               (10^18 * arg3 / 2 / arg3) + (-1 * arg4 * arg3 / 2 / arg3) + 5 * 10^17 / 10^18,
                               0
                    if not -arg4 + 10^18:
                        return 0, 
                               (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                               (10^18 * arg3 / 2 / arg3) + (-1 * arg4 * arg3 / 2 / arg3) + 5 * 10^17 / 10^18,
                               0
                    require -arg4 + 10^18
                    if (10^18 * arg3 / 2 / arg3) - (arg4 * arg3 / 2 / arg3) / -arg4 + 10^18 != arg3 / 2 / arg3:
                        revert with 0, 'math-not-safe'
                    return 0, 
                           (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                           (10^18 * arg3 / 2 / arg3) + (-1 * arg4 * arg3 / 2 / arg3) + 5 * 10^17 / 10^18,
                           (10^18 * arg3 / 2 / arg3) + (-1 * arg4 * arg3 / 2 / arg3) + 5 * 10^17 / 10^18
                require 10^(-ext_call.return_data[0] + 18)
                if (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18) / 10^(-ext_call.return_data[0] + 18) != (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18:
                    revert with 0, 'math-not-safe'
                if arg3 / 2 < 0:
                    revert with 0, 'math-not-safe'
                require arg3
                if -arg4 + 10^18 > 10^18:
                    if 10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18) / 10^18 != (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18):
                        revert with 0, 'math-not-safe'
                    if (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) < 10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18):
                        revert with 0, 'math-not-safe'
                    require arg3
                    if -arg4 + 10^18 > 10^18:
                        return 0, 
                               (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                               0,
                               0
                    if not -arg4 + 10^18:
                        return 0, 
                               (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                               0,
                               0
                    require -arg4 + 10^18
                    if (10^18 * (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) / arg3) - (arg4 * (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) / arg3) / -arg4 + 10^18 != (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) / arg3:
                        revert with 0, 'math-not-safe'
                    return 0, 
                           (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                           0,
                           (10^18 * (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) / arg3) + (-1 * arg4 * (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) / arg3) + 5 * 10^17 / 10^18
                if not -arg4 + 10^18:
                    if 10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18) / 10^18 != (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18):
                        revert with 0, 'math-not-safe'
                    if (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) < 10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18):
                        revert with 0, 'math-not-safe'
                    require arg3
                    if -arg4 + 10^18 > 10^18:
                        return 0, 
                               (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                               0,
                               0
                    if not -arg4 + 10^18:
                        return 0, 
                               (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                               0,
                               0
                    require -arg4 + 10^18
                    if (10^18 * (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) / arg3) - (arg4 * (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) / arg3) / -arg4 + 10^18 != (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) / arg3:
                        revert with 0, 'math-not-safe'
                    return 0, 
                           (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                           0,
                           (10^18 * (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) / arg3) + (-1 * arg4 * (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) / arg3) + 5 * 10^17 / 10^18
                require -arg4 + 10^18
                if (10^18 * arg3 / 2 / arg3) - (arg4 * arg3 / 2 / arg3) / -arg4 + 10^18 != arg3 / 2 / arg3:
                    revert with 0, 'math-not-safe'
                if 10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18) / 10^18 != (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18):
                    revert with 0, 'math-not-safe'
                if (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) < 10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18):
                    revert with 0, 'math-not-safe'
                require arg3
                if -arg4 + 10^18 > 10^18:
                    return 0, 
                           (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                           (10^18 * arg3 / 2 / arg3) + (-1 * arg4 * arg3 / 2 / arg3) + 5 * 10^17 / 10^18,
                           0
                if not -arg4 + 10^18:
                    return 0, 
                           (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                           (10^18 * arg3 / 2 / arg3) + (-1 * arg4 * arg3 / 2 / arg3) + 5 * 10^17 / 10^18,
                           0
                require -arg4 + 10^18
                if (10^18 * (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) / arg3) - (arg4 * (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) / arg3) / -arg4 + 10^18 != (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) / arg3:
                    revert with 0, 'math-not-safe'
                return 0, 
                       (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                       (10^18 * arg3 / 2 / arg3) + (-1 * arg4 * arg3 / 2 / arg3) + 5 * 10^17 / 10^18,
                       (10^18 * (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) / arg3) + (-1 * arg4 * (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) / arg3) + 5 * 10^17 / 10^18
            require (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]
            if ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0] / (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0] != ext_call.return_data[0]:
                revert with 0, 'math-not-safe'
            if (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 < ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]:
                revert with 0, 'math-not-safe'
            require ext_code.size(0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7)
            staticcall 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7.0x70a08231 with:
                    gas gas_remaining wei
                   args address(ext_call.return_data[0])
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]:
                require ext_code.size(arg1)
                staticcall arg1.0x313ce567 with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not 10^(-ext_call.return_data[0] + 18):
                    require ext_code.size(0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7)
                    staticcall 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7.0x313ce567 with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if 10^(-ext_call.return_data[0] + 18):
                        require 10^(-ext_call.return_data[0] + 18)
                        if 0 / 10^(-ext_call.return_data[0] + 18):
                            revert with 0, 'math-not-safe'
                    if arg3 / 2 < 0:
                        revert with 0, 'math-not-safe'
                    require arg3
                    if -arg4 + 10^18 > 10^18:
                        if arg3 / 2 < 0:
                            revert with 0, 'math-not-safe'
                        require arg3
                        if -arg4 + 10^18 > 10^18:
                            return (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18, 
                                   0,
                                   0,
                                   0
                        if not -arg4 + 10^18:
                            return (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18, 
                                   0,
                                   0,
                                   0
                        require -arg4 + 10^18
                        if (10^18 * arg3 / 2 / arg3) - (arg4 * arg3 / 2 / arg3) / -arg4 + 10^18 != arg3 / 2 / arg3:
                            revert with 0, 'math-not-safe'
                        return (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18, 
                               0,
                               0,
                               (10^18 * arg3 / 2 / arg3) + (-1 * arg4 * arg3 / 2 / arg3) + 5 * 10^17 / 10^18
                    if not -arg4 + 10^18:
                        if arg3 / 2 < 0:
                            revert with 0, 'math-not-safe'
                        require arg3
                        if -arg4 + 10^18 > 10^18:
                            return (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18, 
                                   0,
                                   0,
                                   0
                        if not -arg4 + 10^18:
                            return (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18, 
                                   0,
                                   0,
                                   0
                        require -arg4 + 10^18
                        if (10^18 * arg3 / 2 / arg3) - (arg4 * arg3 / 2 / arg3) / -arg4 + 10^18 != arg3 / 2 / arg3:
                            revert with 0, 'math-not-safe'
                        return (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18, 
                               0,
                               0,
                               (10^18 * arg3 / 2 / arg3) + (-1 * arg4 * arg3 / 2 / arg3) + 5 * 10^17 / 10^18
                    require -arg4 + 10^18
                    if (10^18 * arg3 / 2 / arg3) - (arg4 * arg3 / 2 / arg3) / -arg4 + 10^18 != arg3 / 2 / arg3:
                        revert with 0, 'math-not-safe'
                    if arg3 / 2 < 0:
                        revert with 0, 'math-not-safe'
                    require arg3
                    if -arg4 + 10^18 > 10^18:
                        return (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18, 
                               0,
                               (10^18 * arg3 / 2 / arg3) + (-1 * arg4 * arg3 / 2 / arg3) + 5 * 10^17 / 10^18,
                               0
                    if not -arg4 + 10^18:
                        return (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18, 
                               0,
                               (10^18 * arg3 / 2 / arg3) + (-1 * arg4 * arg3 / 2 / arg3) + 5 * 10^17 / 10^18,
                               0
                    require -arg4 + 10^18
                    if (10^18 * arg3 / 2 / arg3) - (arg4 * arg3 / 2 / arg3) / -arg4 + 10^18 != arg3 / 2 / arg3:
                        revert with 0, 'math-not-safe'
                    return (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18, 
                           0,
                           (10^18 * arg3 / 2 / arg3) + (-1 * arg4 * arg3 / 2 / arg3) + 5 * 10^17 / 10^18,
                           (10^18 * arg3 / 2 / arg3) + (-1 * arg4 * arg3 / 2 / arg3) + 5 * 10^17 / 10^18
                require 10^(-ext_call.return_data[0] + 18)
                if (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18) / 10^(-ext_call.return_data[0] + 18) != (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18:
                    revert with 0, 'math-not-safe'
                require ext_code.size(0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7)
                staticcall 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7.0x313ce567 with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if 10^(-ext_call.return_data[0] + 18):
                    require 10^(-ext_call.return_data[0] + 18)
                    if 0 / 10^(-ext_call.return_data[0] + 18):
                        revert with 0, 'math-not-safe'
                if 10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18) / 10^18 != (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18):
                    revert with 0, 'math-not-safe'
                if (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) < 10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18):
                    revert with 0, 'math-not-safe'
                require arg3
                if -arg4 + 10^18 > 10^18:
                    if arg3 / 2 < 0:
                        revert with 0, 'math-not-safe'
                    require arg3
                    if -arg4 + 10^18 > 10^18:
                        return (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18, 
                               0,
                               0,
                               0
                    if not -arg4 + 10^18:
                        return (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18, 
                               0,
                               0,
                               0
                    require -arg4 + 10^18
                    if (10^18 * arg3 / 2 / arg3) - (arg4 * arg3 / 2 / arg3) / -arg4 + 10^18 != arg3 / 2 / arg3:
                        revert with 0, 'math-not-safe'
                    return (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18, 
                           0,
                           0,
                           (10^18 * arg3 / 2 / arg3) + (-1 * arg4 * arg3 / 2 / arg3) + 5 * 10^17 / 10^18
                if not -arg4 + 10^18:
                    if arg3 / 2 < 0:
                        revert with 0, 'math-not-safe'
                    require arg3
                    if -arg4 + 10^18 > 10^18:
                        return (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18, 
                               0,
                               0,
                               0
                    if not -arg4 + 10^18:
                        return (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18, 
                               0,
                               0,
                               0
                    require -arg4 + 10^18
                    if (10^18 * arg3 / 2 / arg3) - (arg4 * arg3 / 2 / arg3) / -arg4 + 10^18 != arg3 / 2 / arg3:
                        revert with 0, 'math-not-safe'
                    return (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18, 
                           0,
                           0,
                           (10^18 * arg3 / 2 / arg3) + (-1 * arg4 * arg3 / 2 / arg3) + 5 * 10^17 / 10^18
                require -arg4 + 10^18
                if (10^18 * (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) / arg3) - (arg4 * (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) / arg3) / -arg4 + 10^18 != (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) / arg3:
                    revert with 0, 'math-not-safe'
                if arg3 / 2 < 0:
                    revert with 0, 'math-not-safe'
                require arg3
                if -arg4 + 10^18 > 10^18:
                    return (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18, 
                           0,
                           (10^18 * (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) / arg3) + (-1 * arg4 * (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) / arg3) + 5 * 10^17 / 10^18,
                           0
                if not -arg4 + 10^18:
                    return (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18, 
                           0,
                           (10^18 * (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) / arg3) + (-1 * arg4 * (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) / arg3) + 5 * 10^17 / 10^18,
                           0
                require -arg4 + 10^18
                if (10^18 * arg3 / 2 / arg3) - (arg4 * arg3 / 2 / arg3) / -arg4 + 10^18 != arg3 / 2 / arg3:
                    revert with 0, 'math-not-safe'
                return (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18, 
                       0,
                       (10^18 * (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) / arg3) + (-1 * arg4 * (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) / arg3) + 5 * 10^17 / 10^18,
                       (10^18 * arg3 / 2 / arg3) + (-1 * arg4 * arg3 / 2 / arg3) + 5 * 10^17 / 10^18
            require (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]
            if ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0] / (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0] != ext_call.return_data[0]:
                revert with 0, 'math-not-safe'
            if (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 < ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]:
                revert with 0, 'math-not-safe'
            require ext_code.size(arg1)
            staticcall arg1.0x313ce567 with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not 10^(-ext_call.return_data[0] + 18):
                require ext_code.size(0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7)
                staticcall 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7.0x313ce567 with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not 10^(-ext_call.return_data[0] + 18):
                    if arg3 / 2 < 0:
                        revert with 0, 'math-not-safe'
                    require arg3
                    if -arg4 + 10^18 > 10^18:
                        if arg3 / 2 < 0:
                            revert with 0, 'math-not-safe'
                        require arg3
                        if -arg4 + 10^18 > 10^18:
                            return (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18, 
                                   (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                                   0,
                                   0
                        if not -arg4 + 10^18:
                            return (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18, 
                                   (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                                   0,
                                   0
                        require -arg4 + 10^18
                        if (10^18 * arg3 / 2 / arg3) - (arg4 * arg3 / 2 / arg3) / -arg4 + 10^18 != arg3 / 2 / arg3:
                            revert with 0, 'math-not-safe'
                        return (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18, 
                               (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                               0,
                               (10^18 * arg3 / 2 / arg3) + (-1 * arg4 * arg3 / 2 / arg3) + 5 * 10^17 / 10^18
                    if not -arg4 + 10^18:
                        if arg3 / 2 < 0:
                            revert with 0, 'math-not-safe'
                        require arg3
                        if -arg4 + 10^18 > 10^18:
                            return (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18, 
                                   (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                                   0,
                                   0
                        if not -arg4 + 10^18:
                            return (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18, 
                                   (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                                   0,
                                   0
                        require -arg4 + 10^18
                        if (10^18 * arg3 / 2 / arg3) - (arg4 * arg3 / 2 / arg3) / -arg4 + 10^18 != arg3 / 2 / arg3:
                            revert with 0, 'math-not-safe'
                        return (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18, 
                               (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                               0,
                               (10^18 * arg3 / 2 / arg3) + (-1 * arg4 * arg3 / 2 / arg3) + 5 * 10^17 / 10^18
                    require -arg4 + 10^18
                    if (10^18 * arg3 / 2 / arg3) - (arg4 * arg3 / 2 / arg3) / -arg4 + 10^18 != arg3 / 2 / arg3:
                        revert with 0, 'math-not-safe'
                    if arg3 / 2 < 0:
                        revert with 0, 'math-not-safe'
                    require arg3
                    if -arg4 + 10^18 > 10^18:
                        return (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18, 
                               (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                               (10^18 * arg3 / 2 / arg3) + (-1 * arg4 * arg3 / 2 / arg3) + 5 * 10^17 / 10^18,
                               0
                    if not -arg4 + 10^18:
                        return (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18, 
                               (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                               (10^18 * arg3 / 2 / arg3) + (-1 * arg4 * arg3 / 2 / arg3) + 5 * 10^17 / 10^18,
                               0
                    require -arg4 + 10^18
                    if (10^18 * arg3 / 2 / arg3) - (arg4 * arg3 / 2 / arg3) / -arg4 + 10^18 != arg3 / 2 / arg3:
                        revert with 0, 'math-not-safe'
                    return (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18, 
                           (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                           (10^18 * arg3 / 2 / arg3) + (-1 * arg4 * arg3 / 2 / arg3) + 5 * 10^17 / 10^18,
                           (10^18 * arg3 / 2 / arg3) + (-1 * arg4 * arg3 / 2 / arg3) + 5 * 10^17 / 10^18
                require 10^(-ext_call.return_data[0] + 18)
                if (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18) / 10^(-ext_call.return_data[0] + 18) != (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18:
                    revert with 0, 'math-not-safe'
                if arg3 / 2 < 0:
                    revert with 0, 'math-not-safe'
                require arg3
                if -arg4 + 10^18 > 10^18:
                    if 10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18) / 10^18 != (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18):
                        revert with 0, 'math-not-safe'
                    if (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) < 10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18):
                        revert with 0, 'math-not-safe'
                    require arg3
                    if -arg4 + 10^18 > 10^18:
                        return (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18, 
                               (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                               0,
                               0
                    if not -arg4 + 10^18:
                        return (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18, 
                               (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                               0,
                               0
                    require -arg4 + 10^18
                    if (10^18 * (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) / arg3) - (arg4 * (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) / arg3) / -arg4 + 10^18 != (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) / arg3:
                        revert with 0, 'math-not-safe'
                    return (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18, 
                           (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                           0,
                           (10^18 * (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) / arg3) + (-1 * arg4 * (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) / arg3) + 5 * 10^17 / 10^18
                if not -arg4 + 10^18:
                    if 10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18) / 10^18 != (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18):
                        revert with 0, 'math-not-safe'
                    if (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) < 10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18):
                        revert with 0, 'math-not-safe'
                    require arg3
                    if -arg4 + 10^18 > 10^18:
                        return (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18, 
                               (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                               0,
                               0
                    if not -arg4 + 10^18:
                        return (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18, 
                               (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                               0,
                               0
                    require -arg4 + 10^18
                    if (10^18 * (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) / arg3) - (arg4 * (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) / arg3) / -arg4 + 10^18 != (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) / arg3:
                        revert with 0, 'math-not-safe'
                    return (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18, 
                           (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                           0,
                           (10^18 * (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) / arg3) + (-1 * arg4 * (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) / arg3) + 5 * 10^17 / 10^18
                require -arg4 + 10^18
                if (10^18 * arg3 / 2 / arg3) - (arg4 * arg3 / 2 / arg3) / -arg4 + 10^18 != arg3 / 2 / arg3:
                    revert with 0, 'math-not-safe'
                if 10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18) / 10^18 != (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18):
                    revert with 0, 'math-not-safe'
                if (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) < 10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18):
                    revert with 0, 'math-not-safe'
                require arg3
                if -arg4 + 10^18 > 10^18:
                    return (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18, 
                           (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                           (10^18 * arg3 / 2 / arg3) + (-1 * arg4 * arg3 / 2 / arg3) + 5 * 10^17 / 10^18,
                           0
                if not -arg4 + 10^18:
                    return (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18, 
                           (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                           (10^18 * arg3 / 2 / arg3) + (-1 * arg4 * arg3 / 2 / arg3) + 5 * 10^17 / 10^18,
                           0
                require -arg4 + 10^18
                if (10^18 * (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) / arg3) - (arg4 * (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) / arg3) / -arg4 + 10^18 != (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) / arg3:
                    revert with 0, 'math-not-safe'
                return (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18, 
                       (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                       (10^18 * arg3 / 2 / arg3) + (-1 * arg4 * arg3 / 2 / arg3) + 5 * 10^17 / 10^18,
                       (10^18 * (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) / arg3) + (-1 * arg4 * (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) / arg3) + 5 * 10^17 / 10^18
            require 10^(-ext_call.return_data[0] + 18)
            if (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18) / 10^(-ext_call.return_data[0] + 18) != (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18:
                revert with 0, 'math-not-safe'
            require ext_code.size(0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7)
            staticcall 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7.0x313ce567 with:
                    gas gas_remaining wei
        else:
            staticcall address(ext_call.return_data[0]).getPair(address arg1, address arg2) with:
                    gas gas_remaining wei
                   args address(arg1), arg2
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            if not ext_call.return_data[12 len 20]:
                revert with 0, 'pair-not-found.'
            require ext_code.size(address(ext_call.return_data[0]))
            staticcall address(ext_call.return_data[0]).0x18160ddd with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if 10^18 * arg3 / 10^18 != arg3:
                revert with 0, 'math-not-safe'
            if (10^18 * arg3) + (ext_call.return_data[0] / 2) < 10^18 * arg3:
                revert with 0, 'math-not-safe'
            require ext_call.return_data[0]
            require ext_code.size(arg1)
            staticcall arg1.0x70a08231 with:
                    gas gas_remaining wei
                   args address(ext_call.return_data[0])
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]:
                require ext_code.size(arg2)
                staticcall arg2.0x70a08231 with:
                        gas gas_remaining wei
                       args address(ext_call.return_data[0])
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]:
                    require ext_code.size(arg1)
                    staticcall arg1.0x313ce567 with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if 10^(-ext_call.return_data[0] + 18):
                        require 10^(-ext_call.return_data[0] + 18)
                        if 0 / 10^(-ext_call.return_data[0] + 18):
                            revert with 0, 'math-not-safe'
                    require ext_code.size(arg2)
                    staticcall arg2.0x313ce567 with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if 10^(-ext_call.return_data[0] + 18):
                        require 10^(-ext_call.return_data[0] + 18)
                        if 0 / 10^(-ext_call.return_data[0] + 18):
                            revert with 0, 'math-not-safe'
                    if arg3 / 2 < 0:
                        revert with 0, 'math-not-safe'
                    require arg3
                    if -arg4 + 10^18 > 10^18:
                        if arg3 / 2 < 0:
                            revert with 0, 'math-not-safe'
                        require arg3
                        if -arg4 + 10^18 > 10^18:
                            return 0
                        if not -arg4 + 10^18:
                            return 0
                        require -arg4 + 10^18
                        if (10^18 * arg3 / 2 / arg3) - (arg4 * arg3 / 2 / arg3) / -arg4 + 10^18 != arg3 / 2 / arg3:
                            revert with 0, 'math-not-safe'
                        return 0, 0, 0, (10^18 * arg3 / 2 / arg3) + (-1 * arg4 * arg3 / 2 / arg3) + 5 * 10^17 / 10^18
                    if not -arg4 + 10^18:
                        if arg3 / 2 < 0:
                            revert with 0, 'math-not-safe'
                        require arg3
                        if -arg4 + 10^18 > 10^18:
                            return 0
                        if not -arg4 + 10^18:
                            return 0
                        require -arg4 + 10^18
                        if (10^18 * arg3 / 2 / arg3) - (arg4 * arg3 / 2 / arg3) / -arg4 + 10^18 != arg3 / 2 / arg3:
                            revert with 0, 'math-not-safe'
                        return 0, 0, 0, (10^18 * arg3 / 2 / arg3) + (-1 * arg4 * arg3 / 2 / arg3) + 5 * 10^17 / 10^18
                    require -arg4 + 10^18
                    if (10^18 * arg3 / 2 / arg3) - (arg4 * arg3 / 2 / arg3) / -arg4 + 10^18 != arg3 / 2 / arg3:
                        revert with 0, 'math-not-safe'
                    if arg3 / 2 < 0:
                        revert with 0, 'math-not-safe'
                    require arg3
                    if -arg4 + 10^18 > 10^18:
                        return 0, 0, (10^18 * arg3 / 2 / arg3) + (-1 * arg4 * arg3 / 2 / arg3) + 5 * 10^17 / 10^18, 0
                    if not -arg4 + 10^18:
                        return 0, 0, (10^18 * arg3 / 2 / arg3) + (-1 * arg4 * arg3 / 2 / arg3) + 5 * 10^17 / 10^18, 0
                    require -arg4 + 10^18
                    if (10^18 * arg3 / 2 / arg3) - (arg4 * arg3 / 2 / arg3) / -arg4 + 10^18 != arg3 / 2 / arg3:
                        revert with 0, 'math-not-safe'
                    return 0, 
                           0,
                           (10^18 * arg3 / 2 / arg3) + (-1 * arg4 * arg3 / 2 / arg3) + 5 * 10^17 / 10^18,
                           (10^18 * arg3 / 2 / arg3) + (-1 * arg4 * arg3 / 2 / arg3) + 5 * 10^17 / 10^18
                require (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]
                if ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0] / (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 'math-not-safe'
                if (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 < ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]:
                    revert with 0, 'math-not-safe'
                require ext_code.size(arg1)
                staticcall arg1.0x313ce567 with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if 10^(-ext_call.return_data[0] + 18):
                    require 10^(-ext_call.return_data[0] + 18)
                    if 0 / 10^(-ext_call.return_data[0] + 18):
                        revert with 0, 'math-not-safe'
                require ext_code.size(arg2)
                staticcall arg2.0x313ce567 with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not 10^(-ext_call.return_data[0] + 18):
                    if arg3 / 2 < 0:
                        revert with 0, 'math-not-safe'
                    require arg3
                    if -arg4 + 10^18 > 10^18:
                        if arg3 / 2 < 0:
                            revert with 0, 'math-not-safe'
                        require arg3
                        if -arg4 + 10^18 > 10^18:
                            return 0, 
                                   (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                                   0,
                                   0
                        if not -arg4 + 10^18:
                            return 0, 
                                   (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                                   0,
                                   0
                        require -arg4 + 10^18
                        if (10^18 * arg3 / 2 / arg3) - (arg4 * arg3 / 2 / arg3) / -arg4 + 10^18 != arg3 / 2 / arg3:
                            revert with 0, 'math-not-safe'
                        return 0, 
                               (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                               0,
                               (10^18 * arg3 / 2 / arg3) + (-1 * arg4 * arg3 / 2 / arg3) + 5 * 10^17 / 10^18
                    if not -arg4 + 10^18:
                        if arg3 / 2 < 0:
                            revert with 0, 'math-not-safe'
                        require arg3
                        if -arg4 + 10^18 > 10^18:
                            return 0, 
                                   (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                                   0,
                                   0
                        if not -arg4 + 10^18:
                            return 0, 
                                   (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                                   0,
                                   0
                        require -arg4 + 10^18
                        if (10^18 * arg3 / 2 / arg3) - (arg4 * arg3 / 2 / arg3) / -arg4 + 10^18 != arg3 / 2 / arg3:
                            revert with 0, 'math-not-safe'
                        return 0, 
                               (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                               0,
                               (10^18 * arg3 / 2 / arg3) + (-1 * arg4 * arg3 / 2 / arg3) + 5 * 10^17 / 10^18
                    require -arg4 + 10^18
                    if (10^18 * arg3 / 2 / arg3) - (arg4 * arg3 / 2 / arg3) / -arg4 + 10^18 != arg3 / 2 / arg3:
                        revert with 0, 'math-not-safe'
                    if arg3 / 2 < 0:
                        revert with 0, 'math-not-safe'
                    require arg3
                    if -arg4 + 10^18 > 10^18:
                        return 0, 
                               (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                               (10^18 * arg3 / 2 / arg3) + (-1 * arg4 * arg3 / 2 / arg3) + 5 * 10^17 / 10^18,
                               0
                    if not -arg4 + 10^18:
                        return 0, 
                               (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                               (10^18 * arg3 / 2 / arg3) + (-1 * arg4 * arg3 / 2 / arg3) + 5 * 10^17 / 10^18,
                               0
                    require -arg4 + 10^18
                    if (10^18 * arg3 / 2 / arg3) - (arg4 * arg3 / 2 / arg3) / -arg4 + 10^18 != arg3 / 2 / arg3:
                        revert with 0, 'math-not-safe'
                    return 0, 
                           (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                           (10^18 * arg3 / 2 / arg3) + (-1 * arg4 * arg3 / 2 / arg3) + 5 * 10^17 / 10^18,
                           (10^18 * arg3 / 2 / arg3) + (-1 * arg4 * arg3 / 2 / arg3) + 5 * 10^17 / 10^18
                require 10^(-ext_call.return_data[0] + 18)
                if (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18) / 10^(-ext_call.return_data[0] + 18) != (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18:
                    revert with 0, 'math-not-safe'
                if arg3 / 2 < 0:
                    revert with 0, 'math-not-safe'
                require arg3
                if -arg4 + 10^18 > 10^18:
                    if 10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18) / 10^18 != (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18):
                        revert with 0, 'math-not-safe'
                    if (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) < 10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18):
                        revert with 0, 'math-not-safe'
                    require arg3
                    if -arg4 + 10^18 > 10^18:
                        return 0, 
                               (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                               0,
                               0
                    if not -arg4 + 10^18:
                        return 0, 
                               (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                               0,
                               0
                    require -arg4 + 10^18
                    if (10^18 * (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) / arg3) - (arg4 * (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) / arg3) / -arg4 + 10^18 != (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) / arg3:
                        revert with 0, 'math-not-safe'
                    return 0, 
                           (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                           0,
                           (10^18 * (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) / arg3) + (-1 * arg4 * (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) / arg3) + 5 * 10^17 / 10^18
                if not -arg4 + 10^18:
                    if 10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18) / 10^18 != (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18):
                        revert with 0, 'math-not-safe'
                    if (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) < 10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18):
                        revert with 0, 'math-not-safe'
                    require arg3
                    if -arg4 + 10^18 > 10^18:
                        return 0, 
                               (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                               0,
                               0
                    if not -arg4 + 10^18:
                        return 0, 
                               (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                               0,
                               0
                    require -arg4 + 10^18
                    if (10^18 * (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) / arg3) - (arg4 * (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) / arg3) / -arg4 + 10^18 != (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) / arg3:
                        revert with 0, 'math-not-safe'
                    return 0, 
                           (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                           0,
                           (10^18 * (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) / arg3) + (-1 * arg4 * (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) / arg3) + 5 * 10^17 / 10^18
                require -arg4 + 10^18
                if (10^18 * arg3 / 2 / arg3) - (arg4 * arg3 / 2 / arg3) / -arg4 + 10^18 != arg3 / 2 / arg3:
                    revert with 0, 'math-not-safe'
                if 10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18) / 10^18 != (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18):
                    revert with 0, 'math-not-safe'
                if (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) < 10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18):
                    revert with 0, 'math-not-safe'
                require arg3
                if -arg4 + 10^18 > 10^18:
                    return 0, 
                           (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                           (10^18 * arg3 / 2 / arg3) + (-1 * arg4 * arg3 / 2 / arg3) + 5 * 10^17 / 10^18,
                           0
                if not -arg4 + 10^18:
                    return 0, 
                           (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                           (10^18 * arg3 / 2 / arg3) + (-1 * arg4 * arg3 / 2 / arg3) + 5 * 10^17 / 10^18,
                           0
                require -arg4 + 10^18
                if (10^18 * (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) / arg3) - (arg4 * (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) / arg3) / -arg4 + 10^18 != (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) / arg3:
                    revert with 0, 'math-not-safe'
                return 0, 
                       (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                       (10^18 * arg3 / 2 / arg3) + (-1 * arg4 * arg3 / 2 / arg3) + 5 * 10^17 / 10^18,
                       (10^18 * (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) / arg3) + (-1 * arg4 * (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) / arg3) + 5 * 10^17 / 10^18
            require (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]
            if ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0] / (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0] != ext_call.return_data[0]:
                revert with 0, 'math-not-safe'
            if (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 < ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]:
                revert with 0, 'math-not-safe'
            require ext_code.size(arg2)
            staticcall arg2.0x70a08231 with:
                    gas gas_remaining wei
                   args address(ext_call.return_data[0])
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]:
                require ext_code.size(arg1)
                staticcall arg1.0x313ce567 with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not 10^(-ext_call.return_data[0] + 18):
                    require ext_code.size(arg2)
                    staticcall arg2.0x313ce567 with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if 10^(-ext_call.return_data[0] + 18):
                        require 10^(-ext_call.return_data[0] + 18)
                        if 0 / 10^(-ext_call.return_data[0] + 18):
                            revert with 0, 'math-not-safe'
                    if arg3 / 2 < 0:
                        revert with 0, 'math-not-safe'
                    require arg3
                    if -arg4 + 10^18 > 10^18:
                        if arg3 / 2 < 0:
                            revert with 0, 'math-not-safe'
                        require arg3
                        if -arg4 + 10^18 > 10^18:
                            return (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18, 
                                   0,
                                   0,
                                   0
                        if not -arg4 + 10^18:
                            return (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18, 
                                   0,
                                   0,
                                   0
                        require -arg4 + 10^18
                        if (10^18 * arg3 / 2 / arg3) - (arg4 * arg3 / 2 / arg3) / -arg4 + 10^18 != arg3 / 2 / arg3:
                            revert with 0, 'math-not-safe'
                        return (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18, 
                               0,
                               0,
                               (10^18 * arg3 / 2 / arg3) + (-1 * arg4 * arg3 / 2 / arg3) + 5 * 10^17 / 10^18
                    if not -arg4 + 10^18:
                        if arg3 / 2 < 0:
                            revert with 0, 'math-not-safe'
                        require arg3
                        if -arg4 + 10^18 > 10^18:
                            return (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18, 
                                   0,
                                   0,
                                   0
                        if not -arg4 + 10^18:
                            return (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18, 
                                   0,
                                   0,
                                   0
                        require -arg4 + 10^18
                        if (10^18 * arg3 / 2 / arg3) - (arg4 * arg3 / 2 / arg3) / -arg4 + 10^18 != arg3 / 2 / arg3:
                            revert with 0, 'math-not-safe'
                        return (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18, 
                               0,
                               0,
                               (10^18 * arg3 / 2 / arg3) + (-1 * arg4 * arg3 / 2 / arg3) + 5 * 10^17 / 10^18
                    require -arg4 + 10^18
                    if (10^18 * arg3 / 2 / arg3) - (arg4 * arg3 / 2 / arg3) / -arg4 + 10^18 != arg3 / 2 / arg3:
                        revert with 0, 'math-not-safe'
                    if arg3 / 2 < 0:
                        revert with 0, 'math-not-safe'
                    require arg3
                    if -arg4 + 10^18 > 10^18:
                        return (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18, 
                               0,
                               (10^18 * arg3 / 2 / arg3) + (-1 * arg4 * arg3 / 2 / arg3) + 5 * 10^17 / 10^18,
                               0
                    if not -arg4 + 10^18:
                        return (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18, 
                               0,
                               (10^18 * arg3 / 2 / arg3) + (-1 * arg4 * arg3 / 2 / arg3) + 5 * 10^17 / 10^18,
                               0
                    require -arg4 + 10^18
                    if (10^18 * arg3 / 2 / arg3) - (arg4 * arg3 / 2 / arg3) / -arg4 + 10^18 != arg3 / 2 / arg3:
                        revert with 0, 'math-not-safe'
                    return (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18, 
                           0,
                           (10^18 * arg3 / 2 / arg3) + (-1 * arg4 * arg3 / 2 / arg3) + 5 * 10^17 / 10^18,
                           (10^18 * arg3 / 2 / arg3) + (-1 * arg4 * arg3 / 2 / arg3) + 5 * 10^17 / 10^18
                require 10^(-ext_call.return_data[0] + 18)
                if (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18) / 10^(-ext_call.return_data[0] + 18) != (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18:
                    revert with 0, 'math-not-safe'
                require ext_code.size(arg2)
                staticcall arg2.0x313ce567 with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if 10^(-ext_call.return_data[0] + 18):
                    require 10^(-ext_call.return_data[0] + 18)
                    if 0 / 10^(-ext_call.return_data[0] + 18):
                        revert with 0, 'math-not-safe'
                if 10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18) / 10^18 != (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18):
                    revert with 0, 'math-not-safe'
                if (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) < 10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18):
                    revert with 0, 'math-not-safe'
                require arg3
                if -arg4 + 10^18 > 10^18:
                    if arg3 / 2 < 0:
                        revert with 0, 'math-not-safe'
                    require arg3
                    if -arg4 + 10^18 > 10^18:
                        return (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18, 
                               0,
                               0,
                               0
                    if not -arg4 + 10^18:
                        return (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18, 
                               0,
                               0,
                               0
                    require -arg4 + 10^18
                    if (10^18 * arg3 / 2 / arg3) - (arg4 * arg3 / 2 / arg3) / -arg4 + 10^18 != arg3 / 2 / arg3:
                        revert with 0, 'math-not-safe'
                    return (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18, 
                           0,
                           0,
                           (10^18 * arg3 / 2 / arg3) + (-1 * arg4 * arg3 / 2 / arg3) + 5 * 10^17 / 10^18
                if not -arg4 + 10^18:
                    if arg3 / 2 < 0:
                        revert with 0, 'math-not-safe'
                    require arg3
                    if -arg4 + 10^18 > 10^18:
                        return (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18, 
                               0,
                               0,
                               0
                    if not -arg4 + 10^18:
                        return (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18, 
                               0,
                               0,
                               0
                    require -arg4 + 10^18
                    if (10^18 * arg3 / 2 / arg3) - (arg4 * arg3 / 2 / arg3) / -arg4 + 10^18 != arg3 / 2 / arg3:
                        revert with 0, 'math-not-safe'
                    return (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18, 
                           0,
                           0,
                           (10^18 * arg3 / 2 / arg3) + (-1 * arg4 * arg3 / 2 / arg3) + 5 * 10^17 / 10^18
                require -arg4 + 10^18
                if (10^18 * (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) / arg3) - (arg4 * (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) / arg3) / -arg4 + 10^18 != (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) / arg3:
                    revert with 0, 'math-not-safe'
                if arg3 / 2 < 0:
                    revert with 0, 'math-not-safe'
                require arg3
                if -arg4 + 10^18 > 10^18:
                    return (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18, 
                           0,
                           (10^18 * (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) / arg3) + (-1 * arg4 * (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) / arg3) + 5 * 10^17 / 10^18,
                           0
                if not -arg4 + 10^18:
                    return (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18, 
                           0,
                           (10^18 * (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) / arg3) + (-1 * arg4 * (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) / arg3) + 5 * 10^17 / 10^18,
                           0
                require -arg4 + 10^18
                if (10^18 * arg3 / 2 / arg3) - (arg4 * arg3 / 2 / arg3) / -arg4 + 10^18 != arg3 / 2 / arg3:
                    revert with 0, 'math-not-safe'
                return (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18, 
                       0,
                       (10^18 * (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) / arg3) + (-1 * arg4 * (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) / arg3) + 5 * 10^17 / 10^18,
                       (10^18 * arg3 / 2 / arg3) + (-1 * arg4 * arg3 / 2 / arg3) + 5 * 10^17 / 10^18
            require (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]
            if ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0] / (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0] != ext_call.return_data[0]:
                revert with 0, 'math-not-safe'
            if (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 < ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]:
                revert with 0, 'math-not-safe'
            require ext_code.size(arg1)
            staticcall arg1.0x313ce567 with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not 10^(-ext_call.return_data[0] + 18):
                require ext_code.size(arg2)
                staticcall arg2.0x313ce567 with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not 10^(-ext_call.return_data[0] + 18):
                    if arg3 / 2 < 0:
                        revert with 0, 'math-not-safe'
                    require arg3
                    if -arg4 + 10^18 > 10^18:
                        if arg3 / 2 < 0:
                            revert with 0, 'math-not-safe'
                        require arg3
                        if -arg4 + 10^18 > 10^18:
                            return (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18, 
                                   (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                                   0,
                                   0
                        if not -arg4 + 10^18:
                            return (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18, 
                                   (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                                   0,
                                   0
                        require -arg4 + 10^18
                        if (10^18 * arg3 / 2 / arg3) - (arg4 * arg3 / 2 / arg3) / -arg4 + 10^18 != arg3 / 2 / arg3:
                            revert with 0, 'math-not-safe'
                        return (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18, 
                               (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                               0,
                               (10^18 * arg3 / 2 / arg3) + (-1 * arg4 * arg3 / 2 / arg3) + 5 * 10^17 / 10^18
                    if not -arg4 + 10^18:
                        if arg3 / 2 < 0:
                            revert with 0, 'math-not-safe'
                        require arg3
                        if -arg4 + 10^18 > 10^18:
                            return (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18, 
                                   (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                                   0,
                                   0
                        if not -arg4 + 10^18:
                            return (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18, 
                                   (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                                   0,
                                   0
                        require -arg4 + 10^18
                        if (10^18 * arg3 / 2 / arg3) - (arg4 * arg3 / 2 / arg3) / -arg4 + 10^18 != arg3 / 2 / arg3:
                            revert with 0, 'math-not-safe'
                        return (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18, 
                               (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                               0,
                               (10^18 * arg3 / 2 / arg3) + (-1 * arg4 * arg3 / 2 / arg3) + 5 * 10^17 / 10^18
                    require -arg4 + 10^18
                    if (10^18 * arg3 / 2 / arg3) - (arg4 * arg3 / 2 / arg3) / -arg4 + 10^18 != arg3 / 2 / arg3:
                        revert with 0, 'math-not-safe'
                    if arg3 / 2 < 0:
                        revert with 0, 'math-not-safe'
                    require arg3
                    if -arg4 + 10^18 > 10^18:
                        return (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18, 
                               (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                               (10^18 * arg3 / 2 / arg3) + (-1 * arg4 * arg3 / 2 / arg3) + 5 * 10^17 / 10^18,
                               0
                    if not -arg4 + 10^18:
                        return (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18, 
                               (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                               (10^18 * arg3 / 2 / arg3) + (-1 * arg4 * arg3 / 2 / arg3) + 5 * 10^17 / 10^18,
                               0
                    require -arg4 + 10^18
                    if (10^18 * arg3 / 2 / arg3) - (arg4 * arg3 / 2 / arg3) / -arg4 + 10^18 != arg3 / 2 / arg3:
                        revert with 0, 'math-not-safe'
                    return (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18, 
                           (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                           (10^18 * arg3 / 2 / arg3) + (-1 * arg4 * arg3 / 2 / arg3) + 5 * 10^17 / 10^18,
                           (10^18 * arg3 / 2 / arg3) + (-1 * arg4 * arg3 / 2 / arg3) + 5 * 10^17 / 10^18
                require 10^(-ext_call.return_data[0] + 18)
                if (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18) / 10^(-ext_call.return_data[0] + 18) != (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18:
                    revert with 0, 'math-not-safe'
                if arg3 / 2 < 0:
                    revert with 0, 'math-not-safe'
                require arg3
                if -arg4 + 10^18 > 10^18:
                    if 10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18) / 10^18 != (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18):
                        revert with 0, 'math-not-safe'
                    if (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) < 10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18):
                        revert with 0, 'math-not-safe'
                    require arg3
                    if -arg4 + 10^18 > 10^18:
                        return (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18, 
                               (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                               0,
                               0
                    if not -arg4 + 10^18:
                        return (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18, 
                               (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                               0,
                               0
                    require -arg4 + 10^18
                    if (10^18 * (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) / arg3) - (arg4 * (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) / arg3) / -arg4 + 10^18 != (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) / arg3:
                        revert with 0, 'math-not-safe'
                    return (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18, 
                           (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                           0,
                           (10^18 * (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) / arg3) + (-1 * arg4 * (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) / arg3) + 5 * 10^17 / 10^18
                if not -arg4 + 10^18:
                    if 10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18) / 10^18 != (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18):
                        revert with 0, 'math-not-safe'
                    if (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) < 10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18):
                        revert with 0, 'math-not-safe'
                    require arg3
                    if -arg4 + 10^18 > 10^18:
                        return (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18, 
                               (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                               0,
                               0
                    if not -arg4 + 10^18:
                        return (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18, 
                               (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                               0,
                               0
                    require -arg4 + 10^18
                    if (10^18 * (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) / arg3) - (arg4 * (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) / arg3) / -arg4 + 10^18 != (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) / arg3:
                        revert with 0, 'math-not-safe'
                    return (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18, 
                           (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                           0,
                           (10^18 * (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) / arg3) + (-1 * arg4 * (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) / arg3) + 5 * 10^17 / 10^18
                require -arg4 + 10^18
                if (10^18 * arg3 / 2 / arg3) - (arg4 * arg3 / 2 / arg3) / -arg4 + 10^18 != arg3 / 2 / arg3:
                    revert with 0, 'math-not-safe'
                if 10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18) / 10^18 != (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18):
                    revert with 0, 'math-not-safe'
                if (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) < 10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18):
                    revert with 0, 'math-not-safe'
                require arg3
                if -arg4 + 10^18 > 10^18:
                    return (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18, 
                           (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                           (10^18 * arg3 / 2 / arg3) + (-1 * arg4 * arg3 / 2 / arg3) + 5 * 10^17 / 10^18,
                           0
                if not -arg4 + 10^18:
                    return (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18, 
                           (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                           (10^18 * arg3 / 2 / arg3) + (-1 * arg4 * arg3 / 2 / arg3) + 5 * 10^17 / 10^18,
                           0
                require -arg4 + 10^18
                if (10^18 * (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) / arg3) - (arg4 * (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) / arg3) / -arg4 + 10^18 != (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) / arg3:
                    revert with 0, 'math-not-safe'
                return (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18, 
                       (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                       (10^18 * arg3 / 2 / arg3) + (-1 * arg4 * arg3 / 2 / arg3) + 5 * 10^17 / 10^18,
                       (10^18 * (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) / arg3) + (-1 * arg4 * (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) / arg3) + 5 * 10^17 / 10^18
            require 10^(-ext_call.return_data[0] + 18)
            if (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18) / 10^(-ext_call.return_data[0] + 18) != (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18:
                revert with 0, 'math-not-safe'
            require ext_code.size(arg2)
            staticcall arg2.0x313ce567 with:
                    gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if not 10^(-ext_call.return_data[0] + 18):
        if 10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18) / 10^18 != (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18):
            revert with 0, 'math-not-safe'
        if (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) < 10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18):
            revert with 0, 'math-not-safe'
        require arg3
        if -arg4 + 10^18 > 10^18:
            if arg3 / 2 < 0:
                revert with 0, 'math-not-safe'
            require arg3
            if -arg4 + 10^18 > 10^18:
                return (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18, 
                       (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                       0,
                       0
            if not -arg4 + 10^18:
                return (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18, 
                       (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                       0,
                       0
            require -arg4 + 10^18
            if (10^18 * arg3 / 2 / arg3) - (arg4 * arg3 / 2 / arg3) / -arg4 + 10^18 != arg3 / 2 / arg3:
                revert with 0, 'math-not-safe'
            return (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18, 
                   (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                   0,
                   (10^18 * arg3 / 2 / arg3) + (-1 * arg4 * arg3 / 2 / arg3) + 5 * 10^17 / 10^18
        if not -arg4 + 10^18:
            if arg3 / 2 < 0:
                revert with 0, 'math-not-safe'
            require arg3
            if -arg4 + 10^18 > 10^18:
                return (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18, 
                       (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                       0,
                       0
            if not -arg4 + 10^18:
                return (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18, 
                       (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                       0,
                       0
            require -arg4 + 10^18
            if (10^18 * arg3 / 2 / arg3) - (arg4 * arg3 / 2 / arg3) / -arg4 + 10^18 != arg3 / 2 / arg3:
                revert with 0, 'math-not-safe'
            return (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18, 
                   (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                   0,
                   (10^18 * arg3 / 2 / arg3) + (-1 * arg4 * arg3 / 2 / arg3) + 5 * 10^17 / 10^18
        require -arg4 + 10^18
        if (10^18 * (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) / arg3) - (arg4 * (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) / arg3) / -arg4 + 10^18 != (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) / arg3:
            revert with 0, 'math-not-safe'
        if arg3 / 2 < 0:
            revert with 0, 'math-not-safe'
        require arg3
        if -arg4 + 10^18 > 10^18:
            return (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18, 
                   (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                   (10^18 * (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) / arg3) + (-1 * arg4 * (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) / arg3) + 5 * 10^17 / 10^18,
                   0
        if not -arg4 + 10^18:
            return (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18, 
                   (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                   (10^18 * (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) / arg3) + (-1 * arg4 * (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) / arg3) + 5 * 10^17 / 10^18,
                   0
        require -arg4 + 10^18
        if (10^18 * arg3 / 2 / arg3) - (arg4 * arg3 / 2 / arg3) / -arg4 + 10^18 != arg3 / 2 / arg3:
            revert with 0, 'math-not-safe'
        return (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18, 
               (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
               (10^18 * (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) / arg3) + (-1 * arg4 * (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) / arg3) + 5 * 10^17 / 10^18,
               (10^18 * arg3 / 2 / arg3) + (-1 * arg4 * arg3 / 2 / arg3) + 5 * 10^17 / 10^18
    require 10^(-ext_call.return_data[0] + 18)
    if (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18) / 10^(-ext_call.return_data[0] + 18) != (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18:
        revert with 0, 'math-not-safe'
    if 10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18) / 10^18 != (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18):
        revert with 0, 'math-not-safe'
    if (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) < 10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18):
        revert with 0, 'math-not-safe'
    require arg3
    if -arg4 + 10^18 > 10^18:
        if 10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18) / 10^18 != (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18):
            revert with 0, 'math-not-safe'
        if (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) < 10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18):
            revert with 0, 'math-not-safe'
        require arg3
        if -arg4 + 10^18 > 10^18:
            return (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18, 
                   (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                   0,
                   0
        if not -arg4 + 10^18:
            return (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18, 
                   (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                   0,
                   0
        require -arg4 + 10^18
        if (10^18 * (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) / arg3) - (arg4 * (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) / arg3) / -arg4 + 10^18 != (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) / arg3:
            revert with 0, 'math-not-safe'
        return (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18, 
               (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
               0,
               (10^18 * (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) / arg3) + (-1 * arg4 * (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) / arg3) + 5 * 10^17 / 10^18
    if not -arg4 + 10^18:
        if 10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18) / 10^18 != (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18):
            revert with 0, 'math-not-safe'
        if (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) < 10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18):
            revert with 0, 'math-not-safe'
        require arg3
        if -arg4 + 10^18 > 10^18:
            return (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18, 
                   (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                   0,
                   0
        if not -arg4 + 10^18:
            return (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18, 
                   (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
                   0,
                   0
        require -arg4 + 10^18
        if (10^18 * (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) / arg3) - (arg4 * (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) / arg3) / -arg4 + 10^18 != (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) / arg3:
            revert with 0, 'math-not-safe'
        return (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18, 
               (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
               0,
               (10^18 * (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) / arg3) + (-1 * arg4 * (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) / arg3) + 5 * 10^17 / 10^18
    require -arg4 + 10^18
    if (10^18 * (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) / arg3) - (arg4 * (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) / arg3) / -arg4 + 10^18 != (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) / arg3:
        revert with 0, 'math-not-safe'
    if 10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18) / 10^18 != (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18):
        revert with 0, 'math-not-safe'
    if (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) < 10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18):
        revert with 0, 'math-not-safe'
    require arg3
    if -arg4 + 10^18 > 10^18:
        return (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18, 
               (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
               (10^18 * (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) / arg3) + (-1 * arg4 * (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) / arg3) + 5 * 10^17 / 10^18,
               0
    if not -arg4 + 10^18:
        return (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18, 
               (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
               (10^18 * (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) / arg3) + (-1 * arg4 * (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) / arg3) + 5 * 10^17 / 10^18,
               0
    require -arg4 + 10^18
    if (10^18 * (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) / arg3) - (arg4 * (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) / arg3) / -arg4 + 10^18 != (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) / arg3:
        revert with 0, 'math-not-safe'
    return (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18, 
           (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18,
           (10^18 * (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) / arg3) + (-1 * arg4 * (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) / arg3) + 5 * 10^17 / 10^18,
           (10^18 * (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) / arg3) + (-1 * arg4 * (10^18 * (ext_call.return_data[0] * (10^18 * arg3) + (ext_call.return_data[0] / 2) / ext_call.return_data[0]) + 5 * 10^17 / 10^18 * 10^(-ext_call.return_data[0] + 18)) + (arg3 / 2) / arg3) + 5 * 10^17 / 10^18
}

function getPositionByPair(address arg1, address arg2, address[] arg3) payable {
    require calldata.size - 4 >= 64
    require arg1 == arg1
    require arg2 <= test266151307()
    require arg2 + 35 < calldata.size
    require arg2.length <= test266151307()
    require (32 * arg2.length) + 128 >= 96 and (32 * arg2.length) + 128 <= test266151307()
    mem[64] = (32 * arg2.length) + 128
    mem[96] = arg2.length
    require calldata.size >= arg2 + (64 * arg2.length) + 36
    s = arg2 + 36
    t = 128
    idx = 0
    while idx < arg2.length:
        require calldata.size - s >= 64
        _3800 = mem[64]
        require mem[64] + 64 <= test266151307() and mem[64] + 64 >= mem[64]
        mem[64] = mem[64] + 64
        require cd[s] == address(cd[s])
        mem[_3800] = cd[s]
        require cd[(s + 32)] == address(cd[(s + 32)])
        mem[_3800 + 32] = cd[(s + 32)]
        mem[t] = _3800
        s = s + 64
        t = t + 32
        idx = idx + 1
        continue 
    _3801 = mem[96]
    require mem[96] <= test266151307()
    _3802 = mem[64]
    mem[mem[64]] = mem[96]
    mem[64] = mem[64] + (32 * _3801) + 32
    if not _3801:
        idx = 0
        while idx < _3801:
            require idx < mem[96]
            _7601 = mem[mem[(32 * idx) + 128]]
            require idx < mem[96]
            _7605 = mem[mem[(32 * idx) + 128] + 32]
            require ext_code.size(0xe54ca86531e17ef3616d22ca28b0d458b6c89106)
            staticcall 0xe54ca86531e17ef3616d22ca28b0d458b6c89106.factory() with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            if mem[mem[(32 * idx) + 128] + 12 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                if mem[mem[(32 * idx) + 128] + 44 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                    _7644 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _7658 = mem[_7644]
                    require mem[_7644] == mem[_7644 + 12 len 20]
                    mem[mem[64] + 4] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7
                    mem[mem[64] + 36] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7
                    require ext_code.size(address(_7658))
                    staticcall address(_7658).getPair(address arg1, address arg2) with:
                            gas gas_remaining wei
                           args 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7, 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _7685 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _7693 = mem[_7685]
                    require mem[_7685] == mem[_7685 + 12 len 20]
                    if not mem[_7685 + 12 len 20]:
                        require idx < mem[96]
                        require idx < mem[_3802]
                        mem[mem[(32 * idx) + _3802 + 32]] = mem[mem[(32 * idx) + 128] + 12 len 20]
                        require idx < mem[96]
                        require idx < mem[_3802]
                        mem[mem[(32 * idx) + _3802 + 32] + 32] = mem[mem[(32 * idx) + 128] + 44 len 20]
                        require idx < mem[96]
                        if mem[mem[(32 * idx) + 128] + 12 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                            require idx < mem[_3802]
                            mem[mem[(32 * idx) + _3802 + 32] + 224] = eth.balance(arg1)
                            require idx < mem[96]
                            if mem[mem[(32 * idx) + 128] + 44 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                                require idx < mem[_3802]
                                mem[mem[(32 * idx) + _3802 + 32] + 256] = eth.balance(arg1)
                            else:
                                mem[mem[64] + 4] = arg1
                                require ext_code.size(0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7)
                                staticcall 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7.0x70a08231 with:
                                        gas gas_remaining wei
                                       args address(arg1)
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _7978 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                require idx < mem[_3802]
                                mem[mem[(32 * idx) + _3802 + 32] + 256] = mem[_7978]
                        else:
                            mem[mem[64] + 4] = arg1
                            require ext_code.size(0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7)
                            staticcall 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7.0x70a08231 with:
                                    gas gas_remaining wei
                                   args address(arg1)
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _7880 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            require idx < mem[_3802]
                            mem[mem[(32 * idx) + _3802 + 32] + 224] = mem[_7880]
                            require idx < mem[96]
                            if mem[mem[(32 * idx) + 128] + 44 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                                require idx < mem[_3802]
                                mem[mem[(32 * idx) + _3802 + 32] + 256] = eth.balance(arg1)
                            else:
                                mem[mem[64] + 4] = arg1
                                require ext_code.size(0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7)
                                staticcall 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7.0x70a08231 with:
                                        gas gas_remaining wei
                                       args address(arg1)
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _8092 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                require idx < mem[_3802]
                                mem[mem[(32 * idx) + _3802 + 32] + 256] = mem[_8092]
                    else:
                        require ext_code.size(mem[_7685 + 12 len 20])
                        staticcall mem[_7685 + 12 len 20].getReserves() with:
                                gas gas_remaining wei
                        mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _7743 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 96
                        _7773 = mem[_7743]
                        require mem[_7743] == mem[_7743 + 18 len 14]
                        _7827 = mem[_7743 + 32]
                        require mem[_7743 + 32] == mem[_7743 + 50 len 14]
                        require mem[_7743 + 64] == mem[_7743 + 92 len 4]
                        require ext_code.size(address(_7693))
                        staticcall address(_7693).token0() with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _7915 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        require mem[_7915] == mem[_7915 + 12 len 20]
                        mem[mem[64] + 4] = arg1
                        require ext_code.size(address(_7693))
                        staticcall address(_7693).0x70a08231 with:
                                gas gas_remaining wei
                               args address(arg1)
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        if mem[_7915 + 12 len 20] == 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7:
                            _8107 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _8147 = mem[_8107]
                            require ext_code.size(address(_7693))
                            staticcall address(_7693).0x18160ddd with:
                                    gas gas_remaining wei
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _8194 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _8218 = mem[_8194]
                            if 10^18 * _8147 / 10^18 != _8147:
                                revert with 0, 'math-not-safe'
                            if (10^18 * _8147) + (mem[_8194] / 2) < 10^18 * _8147:
                                revert with 0, 'math-not-safe'
                            require mem[_8194]
                            if not (10^18 * _8147) + (mem[_8194] / 2) / mem[_8194]:
                                if not (10^18 * _8147) + (mem[_8194] / 2) / mem[_8194]:
                                    _8461 = mem[64]
                                    mem[64] = mem[64] + 352
                                    mem[_8461] = 0
                                    mem[_8461 + 32] = 0
                                    mem[_8461 + 64] = address(_7693)
                                    mem[_8461 + 96] = Mask(112, 0, _7773)
                                    mem[_8461 + 128] = Mask(112, 0, _7827)
                                    mem[_8461 + 160] = 0
                                    mem[_8461 + 192] = 0
                                    mem[_8461 + 224] = 0
                                    mem[_8461 + 256] = 0
                                    mem[_8461 + 288] = _8147
                                    mem[_8461 + 320] = _8218
                                    require idx < mem[_3802]
                                    mem[(32 * idx) + _3802 + 32] = _8461
                                    require idx < mem[96]
                                    require idx < mem[_3802]
                                    mem[_8461] = mem[mem[(32 * idx) + 128] + 12 len 20]
                                    require idx < mem[96]
                                    require idx < mem[_3802]
                                    mem[_8461 + 32] = mem[mem[(32 * idx) + 128] + 44 len 20]
                                    require idx < mem[96]
                                    if mem[mem[(32 * idx) + 128] + 12 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                                        require idx < mem[_3802]
                                        mem[_8461 + 224] = eth.balance(arg1)
                                        require idx < mem[96]
                                        if mem[mem[(32 * idx) + 128] + 44 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                                            require idx < mem[_3802]
                                            mem[_8461 + 256] = eth.balance(arg1)
                                        else:
                                            mem[mem[64] + 4] = arg1
                                            require ext_code.size(0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7)
                                            staticcall 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args address(arg1)
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _10049 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require idx < mem[_3802]
                                            mem[_8461 + 256] = mem[_10049]
                                    else:
                                        mem[mem[64] + 4] = arg1
                                        require ext_code.size(0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7)
                                        staticcall 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7.0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(arg1)
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _9504 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require idx < mem[_3802]
                                        mem[_8461 + 224] = mem[_9504]
                                        require idx < mem[96]
                                        if mem[mem[(32 * idx) + 128] + 44 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                                            require idx < mem[_3802]
                                            mem[_8461 + 256] = eth.balance(arg1)
                                        else:
                                            mem[mem[64] + 4] = arg1
                                            require ext_code.size(0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7)
                                            staticcall 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args address(arg1)
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _10781 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require idx < mem[_3802]
                                            mem[_8461 + 256] = mem[_10781]
                                else:
                                    require (10^18 * _8147) + (mem[_8194] / 2) / mem[_8194]
                                    if Mask(112, 0, _7827) * (10^18 * _8147) + (mem[_8194] / 2) / mem[_8194] / (10^18 * _8147) + (mem[_8194] / 2) / mem[_8194] != Mask(112, 0, _7827):
                                        revert with 0, 'math-not-safe'
                                    if (Mask(112, 0, _7827) * (10^18 * _8147) + (mem[_8194] / 2) / mem[_8194]) + 5 * 10^17 < Mask(112, 0, _7827) * (10^18 * _8147) + (mem[_8194] / 2) / mem[_8194]:
                                        revert with 0, 'math-not-safe'
                                    _8530 = mem[64]
                                    mem[64] = mem[64] + 352
                                    mem[_8530] = 0
                                    mem[_8530 + 32] = 0
                                    mem[_8530 + 64] = address(_7693)
                                    mem[_8530 + 96] = Mask(112, 0, _7773)
                                    mem[_8530 + 128] = Mask(112, 0, _7827)
                                    mem[_8530 + 160] = 0
                                    mem[_8530 + 192] = (Mask(112, 0, _7827) * (10^18 * _8147) + (_8218 / 2) / _8218) + 5 * 10^17 / 10^18
                                    mem[_8530 + 224] = 0
                                    mem[_8530 + 256] = 0
                                    mem[_8530 + 288] = _8147
                                    mem[_8530 + 320] = _8218
                                    require idx < mem[_3802]
                                    mem[(32 * idx) + _3802 + 32] = _8530
                                    require idx < mem[96]
                                    require idx < mem[_3802]
                                    mem[_8530] = mem[mem[(32 * idx) + 128] + 12 len 20]
                                    require idx < mem[96]
                                    require idx < mem[_3802]
                                    mem[_8530 + 32] = mem[mem[(32 * idx) + 128] + 44 len 20]
                                    require idx < mem[96]
                                    if mem[mem[(32 * idx) + 128] + 12 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                                        require idx < mem[_3802]
                                        mem[_8530 + 224] = eth.balance(arg1)
                                        require idx < mem[96]
                                        if mem[mem[(32 * idx) + 128] + 44 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                                            require idx < mem[_3802]
                                            mem[_8530 + 256] = eth.balance(arg1)
                                        else:
                                            mem[mem[64] + 4] = arg1
                                            require ext_code.size(0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7)
                                            staticcall 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args address(arg1)
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _10252 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require idx < mem[_3802]
                                            mem[_8530 + 256] = mem[_10252]
                                    else:
                                        mem[mem[64] + 4] = arg1
                                        require ext_code.size(0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7)
                                        staticcall 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7.0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(arg1)
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _9670 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require idx < mem[_3802]
                                        mem[_8530 + 224] = mem[_9670]
                                        require idx < mem[96]
                                        if mem[mem[(32 * idx) + 128] + 44 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                                            require idx < mem[_3802]
                                            mem[_8530 + 256] = eth.balance(arg1)
                                        else:
                                            mem[mem[64] + 4] = arg1
                                            require ext_code.size(0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7)
                                            staticcall 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args address(arg1)
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _10952 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require idx < mem[_3802]
                                            mem[_8530 + 256] = mem[_10952]
                            else:
                                require (10^18 * _8147) + (mem[_8194] / 2) / mem[_8194]
                                if Mask(112, 0, _7773) * (10^18 * _8147) + (mem[_8194] / 2) / mem[_8194] / (10^18 * _8147) + (mem[_8194] / 2) / mem[_8194] != Mask(112, 0, _7773):
                                    revert with 0, 'math-not-safe'
                                if (Mask(112, 0, _7773) * (10^18 * _8147) + (mem[_8194] / 2) / mem[_8194]) + 5 * 10^17 < Mask(112, 0, _7773) * (10^18 * _8147) + (mem[_8194] / 2) / mem[_8194]:
                                    revert with 0, 'math-not-safe'
                                if not (10^18 * _8147) + (mem[_8194] / 2) / mem[_8194]:
                                    _8532 = mem[64]
                                    mem[64] = mem[64] + 352
                                    mem[_8532] = 0
                                    mem[_8532 + 32] = 0
                                    mem[_8532 + 64] = address(_7693)
                                    mem[_8532 + 96] = Mask(112, 0, _7773)
                                    mem[_8532 + 128] = Mask(112, 0, _7827)
                                    mem[_8532 + 160] = (Mask(112, 0, _7773) * (10^18 * _8147) + (_8218 / 2) / _8218) + 5 * 10^17 / 10^18
                                    mem[_8532 + 192] = 0
                                    mem[_8532 + 224] = 0
                                    mem[_8532 + 256] = 0
                                    mem[_8532 + 288] = _8147
                                    mem[_8532 + 320] = _8218
                                    require idx < mem[_3802]
                                    mem[(32 * idx) + _3802 + 32] = _8532
                                    require idx < mem[96]
                                    require idx < mem[_3802]
                                    mem[_8532] = mem[mem[(32 * idx) + 128] + 12 len 20]
                                    require idx < mem[96]
                                    require idx < mem[_3802]
                                    mem[_8532 + 32] = mem[mem[(32 * idx) + 128] + 44 len 20]
                                    require idx < mem[96]
                                    if mem[mem[(32 * idx) + 128] + 12 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                                        require idx < mem[_3802]
                                        mem[_8532 + 224] = eth.balance(arg1)
                                        require idx < mem[96]
                                        if mem[mem[(32 * idx) + 128] + 44 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                                            require idx < mem[_3802]
                                            mem[_8532 + 256] = eth.balance(arg1)
                                        else:
                                            mem[mem[64] + 4] = arg1
                                            require ext_code.size(0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7)
                                            staticcall 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args address(arg1)
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _10253 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require idx < mem[_3802]
                                            mem[_8532 + 256] = mem[_10253]
                                    else:
                                        mem[mem[64] + 4] = arg1
                                        require ext_code.size(0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7)
                                        staticcall 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7.0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(arg1)
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _9672 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require idx < mem[_3802]
                                        mem[_8532 + 224] = mem[_9672]
                                        require idx < mem[96]
                                        if mem[mem[(32 * idx) + 128] + 44 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                                            require idx < mem[_3802]
                                            mem[_8532 + 256] = eth.balance(arg1)
                                        else:
                                            mem[mem[64] + 4] = arg1
                                            require ext_code.size(0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7)
                                            staticcall 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args address(arg1)
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _10953 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require idx < mem[_3802]
                                            mem[_8532 + 256] = mem[_10953]
                                else:
                                    require (10^18 * _8147) + (mem[_8194] / 2) / mem[_8194]
                                    if Mask(112, 0, _7827) * (10^18 * _8147) + (mem[_8194] / 2) / mem[_8194] / (10^18 * _8147) + (mem[_8194] / 2) / mem[_8194] != Mask(112, 0, _7827):
                                        revert with 0, 'math-not-safe'
                                    if (Mask(112, 0, _7827) * (10^18 * _8147) + (mem[_8194] / 2) / mem[_8194]) + 5 * 10^17 < Mask(112, 0, _7827) * (10^18 * _8147) + (mem[_8194] / 2) / mem[_8194]:
                                        revert with 0, 'math-not-safe'
                                    _8635 = mem[64]
                                    mem[64] = mem[64] + 352
                                    mem[_8635] = 0
                                    mem[_8635 + 32] = 0
                                    mem[_8635 + 64] = address(_7693)
                                    mem[_8635 + 96] = Mask(112, 0, _7773)
                                    mem[_8635 + 128] = Mask(112, 0, _7827)
                                    mem[_8635 + 160] = (Mask(112, 0, _7773) * (10^18 * _8147) + (_8218 / 2) / _8218) + 5 * 10^17 / 10^18
                                    mem[_8635 + 192] = (Mask(112, 0, _7827) * (10^18 * _8147) + (_8218 / 2) / _8218) + 5 * 10^17 / 10^18
                                    mem[_8635 + 224] = 0
                                    mem[_8635 + 256] = 0
                                    mem[_8635 + 288] = _8147
                                    mem[_8635 + 320] = _8218
                                    require idx < mem[_3802]
                                    mem[(32 * idx) + _3802 + 32] = _8635
                                    require idx < mem[96]
                                    require idx < mem[_3802]
                                    mem[_8635] = mem[mem[(32 * idx) + 128] + 12 len 20]
                                    require idx < mem[96]
                                    require idx < mem[_3802]
                                    mem[_8635 + 32] = mem[mem[(32 * idx) + 128] + 44 len 20]
                                    require idx < mem[96]
                                    if mem[mem[(32 * idx) + 128] + 12 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                                        require idx < mem[_3802]
                                        mem[_8635 + 224] = eth.balance(arg1)
                                        require idx < mem[96]
                                        if mem[mem[(32 * idx) + 128] + 44 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                                            require idx < mem[_3802]
                                            mem[_8635 + 256] = eth.balance(arg1)
                                        else:
                                            mem[mem[64] + 4] = arg1
                                            require ext_code.size(0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7)
                                            staticcall 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args address(arg1)
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _10475 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require idx < mem[_3802]
                                            mem[_8635 + 256] = mem[_10475]
                                    else:
                                        mem[mem[64] + 4] = arg1
                                        require ext_code.size(0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7)
                                        staticcall 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7.0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(arg1)
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _9863 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require idx < mem[_3802]
                                        mem[_8635 + 224] = mem[_9863]
                                        require idx < mem[96]
                                        if mem[mem[(32 * idx) + 128] + 44 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                                            require idx < mem[_3802]
                                            mem[_8635 + 256] = eth.balance(arg1)
                                        else:
                                            mem[mem[64] + 4] = arg1
                                            require ext_code.size(0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7)
                                            staticcall 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args address(arg1)
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _11104 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require idx < mem[_3802]
                                            mem[_8635 + 256] = mem[_11104]
                        else:
                            _8108 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _8148 = mem[_8108]
                            require ext_code.size(address(_7693))
                            staticcall address(_7693).0x18160ddd with:
                                    gas gas_remaining wei
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _8195 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _8219 = mem[_8195]
                            if 10^18 * _8148 / 10^18 != _8148:
                                revert with 0, 'math-not-safe'
                            if (10^18 * _8148) + (mem[_8195] / 2) < 10^18 * _8148:
                                revert with 0, 'math-not-safe'
                            require mem[_8195]
                            if not (10^18 * _8148) + (mem[_8195] / 2) / mem[_8195]:
                                if not (10^18 * _8148) + (mem[_8195] / 2) / mem[_8195]:
                                    _8463 = mem[64]
                                    mem[64] = mem[64] + 352
                                    mem[_8463] = 0
                                    mem[_8463 + 32] = 0
                                    mem[_8463 + 64] = address(_7693)
                                    mem[_8463 + 96] = Mask(112, 0, _7827)
                                    mem[_8463 + 128] = Mask(112, 0, _7773)
                                    mem[_8463 + 160] = 0
                                    mem[_8463 + 192] = 0
                                    mem[_8463 + 224] = 0
                                    mem[_8463 + 256] = 0
                                    mem[_8463 + 288] = _8148
                                    mem[_8463 + 320] = _8219
                                    require idx < mem[_3802]
                                    mem[(32 * idx) + _3802 + 32] = _8463
                                    require idx < mem[96]
                                    require idx < mem[_3802]
                                    mem[_8463] = mem[mem[(32 * idx) + 128] + 12 len 20]
                                    require idx < mem[96]
                                    require idx < mem[_3802]
                                    mem[_8463 + 32] = mem[mem[(32 * idx) + 128] + 44 len 20]
                                    require idx < mem[96]
                                    if mem[mem[(32 * idx) + 128] + 12 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                                        require idx < mem[_3802]
                                        mem[_8463 + 224] = eth.balance(arg1)
                                        require idx < mem[96]
                                        if mem[mem[(32 * idx) + 128] + 44 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                                            require idx < mem[_3802]
                                            mem[_8463 + 256] = eth.balance(arg1)
                                        else:
                                            mem[mem[64] + 4] = arg1
                                            require ext_code.size(0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7)
                                            staticcall 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args address(arg1)
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _10058 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require idx < mem[_3802]
                                            mem[_8463 + 256] = mem[_10058]
                                    else:
                                        mem[mem[64] + 4] = arg1
                                        require ext_code.size(0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7)
                                        staticcall 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7.0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(arg1)
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _9511 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require idx < mem[_3802]
                                        mem[_8463 + 224] = mem[_9511]
                                        require idx < mem[96]
                                        if mem[mem[(32 * idx) + 128] + 44 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                                            require idx < mem[_3802]
                                            mem[_8463 + 256] = eth.balance(arg1)
                                        else:
                                            mem[mem[64] + 4] = arg1
                                            require ext_code.size(0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7)
                                            staticcall 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args address(arg1)
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _10789 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require idx < mem[_3802]
                                            mem[_8463 + 256] = mem[_10789]
                                else:
                                    require (10^18 * _8148) + (mem[_8195] / 2) / mem[_8195]
                                    if Mask(112, 0, _7773) * (10^18 * _8148) + (mem[_8195] / 2) / mem[_8195] / (10^18 * _8148) + (mem[_8195] / 2) / mem[_8195] != Mask(112, 0, _7773):
                                        revert with 0, 'math-not-safe'
                                    if (Mask(112, 0, _7773) * (10^18 * _8148) + (mem[_8195] / 2) / mem[_8195]) + 5 * 10^17 < Mask(112, 0, _7773) * (10^18 * _8148) + (mem[_8195] / 2) / mem[_8195]:
                                        revert with 0, 'math-not-safe'
                                    _8535 = mem[64]
                                    mem[64] = mem[64] + 352
                                    mem[_8535] = 0
                                    mem[_8535 + 32] = 0
                                    mem[_8535 + 64] = address(_7693)
                                    mem[_8535 + 96] = Mask(112, 0, _7827)
                                    mem[_8535 + 128] = Mask(112, 0, _7773)
                                    mem[_8535 + 160] = 0
                                    mem[_8535 + 192] = (Mask(112, 0, _7773) * (10^18 * _8148) + (_8219 / 2) / _8219) + 5 * 10^17 / 10^18
                                    mem[_8535 + 224] = 0
                                    mem[_8535 + 256] = 0
                                    mem[_8535 + 288] = _8148
                                    mem[_8535 + 320] = _8219
                                    require idx < mem[_3802]
                                    mem[(32 * idx) + _3802 + 32] = _8535
                                    require idx < mem[96]
                                    require idx < mem[_3802]
                                    mem[_8535] = mem[mem[(32 * idx) + 128] + 12 len 20]
                                    require idx < mem[96]
                                    require idx < mem[_3802]
                                    mem[_8535 + 32] = mem[mem[(32 * idx) + 128] + 44 len 20]
                                    require idx < mem[96]
                                    if mem[mem[(32 * idx) + 128] + 12 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                                        require idx < mem[_3802]
                                        mem[_8535 + 224] = eth.balance(arg1)
                                        require idx < mem[96]
                                        if mem[mem[(32 * idx) + 128] + 44 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                                            require idx < mem[_3802]
                                            mem[_8535 + 256] = eth.balance(arg1)
                                        else:
                                            mem[mem[64] + 4] = arg1
                                            require ext_code.size(0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7)
                                            staticcall 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args address(arg1)
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _10260 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require idx < mem[_3802]
                                            mem[_8535 + 256] = mem[_10260]
                                    else:
                                        mem[mem[64] + 4] = arg1
                                        require ext_code.size(0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7)
                                        staticcall 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7.0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(arg1)
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _9678 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require idx < mem[_3802]
                                        mem[_8535 + 224] = mem[_9678]
                                        require idx < mem[96]
                                        if mem[mem[(32 * idx) + 128] + 44 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                                            require idx < mem[_3802]
                                            mem[_8535 + 256] = eth.balance(arg1)
                                        else:
                                            mem[mem[64] + 4] = arg1
                                            require ext_code.size(0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7)
                                            staticcall 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args address(arg1)
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _10958 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require idx < mem[_3802]
                                            mem[_8535 + 256] = mem[_10958]
                            else:
                                require (10^18 * _8148) + (mem[_8195] / 2) / mem[_8195]
                                if Mask(112, 0, _7827) * (10^18 * _8148) + (mem[_8195] / 2) / mem[_8195] / (10^18 * _8148) + (mem[_8195] / 2) / mem[_8195] != Mask(112, 0, _7827):
                                    revert with 0, 'math-not-safe'
                                if (Mask(112, 0, _7827) * (10^18 * _8148) + (mem[_8195] / 2) / mem[_8195]) + 5 * 10^17 < Mask(112, 0, _7827) * (10^18 * _8148) + (mem[_8195] / 2) / mem[_8195]:
                                    revert with 0, 'math-not-safe'
                                if not (10^18 * _8148) + (mem[_8195] / 2) / mem[_8195]:
                                    _8537 = mem[64]
                                    mem[64] = mem[64] + 352
                                    mem[_8537] = 0
                                    mem[_8537 + 32] = 0
                                    mem[_8537 + 64] = address(_7693)
                                    mem[_8537 + 96] = Mask(112, 0, _7827)
                                    mem[_8537 + 128] = Mask(112, 0, _7773)
                                    mem[_8537 + 160] = (Mask(112, 0, _7827) * (10^18 * _8148) + (_8219 / 2) / _8219) + 5 * 10^17 / 10^18
                                    mem[_8537 + 192] = 0
                                    mem[_8537 + 224] = 0
                                    mem[_8537 + 256] = 0
                                    mem[_8537 + 288] = _8148
                                    mem[_8537 + 320] = _8219
                                    require idx < mem[_3802]
                                    mem[(32 * idx) + _3802 + 32] = _8537
                                    require idx < mem[96]
                                    require idx < mem[_3802]
                                    mem[_8537] = mem[mem[(32 * idx) + 128] + 12 len 20]
                                    require idx < mem[96]
                                    require idx < mem[_3802]
                                    mem[_8537 + 32] = mem[mem[(32 * idx) + 128] + 44 len 20]
                                    require idx < mem[96]
                                    if mem[mem[(32 * idx) + 128] + 12 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                                        require idx < mem[_3802]
                                        mem[_8537 + 224] = eth.balance(arg1)
                                        require idx < mem[96]
                                        if mem[mem[(32 * idx) + 128] + 44 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                                            require idx < mem[_3802]
                                            mem[_8537 + 256] = eth.balance(arg1)
                                        else:
                                            mem[mem[64] + 4] = arg1
                                            require ext_code.size(0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7)
                                            staticcall 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args address(arg1)
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _10261 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require idx < mem[_3802]
                                            mem[_8537 + 256] = mem[_10261]
                                    else:
                                        mem[mem[64] + 4] = arg1
                                        require ext_code.size(0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7)
                                        staticcall 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7.0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(arg1)
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _9680 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require idx < mem[_3802]
                                        mem[_8537 + 224] = mem[_9680]
                                        require idx < mem[96]
                                        if mem[mem[(32 * idx) + 128] + 44 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                                            require idx < mem[_3802]
                                            mem[_8537 + 256] = eth.balance(arg1)
                                        else:
                                            mem[mem[64] + 4] = arg1
                                            require ext_code.size(0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7)
                                            staticcall 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args address(arg1)
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _10959 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require idx < mem[_3802]
                                            mem[_8537 + 256] = mem[_10959]
                                else:
                                    require (10^18 * _8148) + (mem[_8195] / 2) / mem[_8195]
                                    if Mask(112, 0, _7773) * (10^18 * _8148) + (mem[_8195] / 2) / mem[_8195] / (10^18 * _8148) + (mem[_8195] / 2) / mem[_8195] != Mask(112, 0, _7773):
                                        revert with 0, 'math-not-safe'
                                    if (Mask(112, 0, _7773) * (10^18 * _8148) + (mem[_8195] / 2) / mem[_8195]) + 5 * 10^17 < Mask(112, 0, _7773) * (10^18 * _8148) + (mem[_8195] / 2) / mem[_8195]:
                                        revert with 0, 'math-not-safe'
                                    _8641 = mem[64]
                                    mem[64] = mem[64] + 352
                                    mem[_8641] = 0
                                    mem[_8641 + 32] = 0
                                    mem[_8641 + 64] = address(_7693)
                                    mem[_8641 + 96] = Mask(112, 0, _7827)
                                    mem[_8641 + 128] = Mask(112, 0, _7773)
                                    mem[_8641 + 160] = (Mask(112, 0, _7827) * (10^18 * _8148) + (_8219 / 2) / _8219) + 5 * 10^17 / 10^18
                                    mem[_8641 + 192] = (Mask(112, 0, _7773) * (10^18 * _8148) + (_8219 / 2) / _8219) + 5 * 10^17 / 10^18
                                    mem[_8641 + 224] = 0
                                    mem[_8641 + 256] = 0
                                    mem[_8641 + 288] = _8148
                                    mem[_8641 + 320] = _8219
                                    require idx < mem[_3802]
                                    mem[(32 * idx) + _3802 + 32] = _8641
                                    require idx < mem[96]
                                    require idx < mem[_3802]
                                    mem[_8641] = mem[mem[(32 * idx) + 128] + 12 len 20]
                                    require idx < mem[96]
                                    require idx < mem[_3802]
                                    mem[_8641 + 32] = mem[mem[(32 * idx) + 128] + 44 len 20]
                                    require idx < mem[96]
                                    if mem[mem[(32 * idx) + 128] + 12 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                                        require idx < mem[_3802]
                                        mem[_8641 + 224] = eth.balance(arg1)
                                        require idx < mem[96]
                                        if mem[mem[(32 * idx) + 128] + 44 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                                            require idx < mem[_3802]
                                            mem[_8641 + 256] = eth.balance(arg1)
                                        else:
                                            mem[mem[64] + 4] = arg1
                                            require ext_code.size(0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7)
                                            staticcall 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args address(arg1)
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _10484 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require idx < mem[_3802]
                                            mem[_8641 + 256] = mem[_10484]
                                    else:
                                        mem[mem[64] + 4] = arg1
                                        require ext_code.size(0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7)
                                        staticcall 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7.0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(arg1)
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _9872 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require idx < mem[_3802]
                                        mem[_8641 + 224] = mem[_9872]
                                        require idx < mem[96]
                                        if mem[mem[(32 * idx) + 128] + 44 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                                            require idx < mem[_3802]
                                            mem[_8641 + 256] = eth.balance(arg1)
                                        else:
                                            mem[mem[64] + 4] = arg1
                                            require ext_code.size(0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7)
                                            staticcall 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args address(arg1)
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _11108 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require idx < mem[_3802]
                                            mem[_8641 + 256] = mem[_11108]
                else:
                    _7641 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _7646 = mem[_7641]
                    require mem[_7641] == mem[_7641 + 12 len 20]
                    mem[mem[64] + 4] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7
                    mem[mem[64] + 36] = address(_7605)
                    require ext_code.size(address(_7646))
                    staticcall address(_7646).getPair(address arg1, address arg2) with:
                            gas gas_remaining wei
                           args 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7, address(_7605)
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _7682 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _7689 = mem[_7682]
                    require mem[_7682] == mem[_7682 + 12 len 20]
                    if not mem[_7682 + 12 len 20]:
                        require idx < mem[96]
                        require idx < mem[_3802]
                        mem[mem[(32 * idx) + _3802 + 32]] = mem[mem[(32 * idx) + 128] + 12 len 20]
                        require idx < mem[96]
                        require idx < mem[_3802]
                        mem[mem[(32 * idx) + _3802 + 32] + 32] = mem[mem[(32 * idx) + 128] + 44 len 20]
                        require idx < mem[96]
                        if mem[mem[(32 * idx) + 128] + 12 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                            require idx < mem[_3802]
                            mem[mem[(32 * idx) + _3802 + 32] + 224] = eth.balance(arg1)
                            require idx < mem[96]
                            if mem[mem[(32 * idx) + 128] + 44 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                                require idx < mem[_3802]
                                mem[mem[(32 * idx) + _3802 + 32] + 256] = eth.balance(arg1)
                            else:
                                mem[mem[64] + 4] = arg1
                                require ext_code.size(address(_7605))
                                staticcall address(_7605).0x70a08231 with:
                                        gas gas_remaining wei
                                       args address(arg1)
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _7964 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                require idx < mem[_3802]
                                mem[mem[(32 * idx) + _3802 + 32] + 256] = mem[_7964]
                        else:
                            mem[mem[64] + 4] = arg1
                            require ext_code.size(0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7)
                            staticcall 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7.0x70a08231 with:
                                    gas gas_remaining wei
                                   args address(arg1)
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _7863 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            require idx < mem[_3802]
                            mem[mem[(32 * idx) + _3802 + 32] + 224] = mem[_7863]
                            require idx < mem[96]
                            if mem[mem[(32 * idx) + 128] + 44 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                                require idx < mem[_3802]
                                mem[mem[(32 * idx) + _3802 + 32] + 256] = eth.balance(arg1)
                            else:
                                mem[mem[64] + 4] = arg1
                                require ext_code.size(address(_7605))
                                staticcall address(_7605).0x70a08231 with:
                                        gas gas_remaining wei
                                       args address(arg1)
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _8080 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                require idx < mem[_3802]
                                mem[mem[(32 * idx) + _3802 + 32] + 256] = mem[_8080]
                    else:
                        require ext_code.size(mem[_7682 + 12 len 20])
                        staticcall mem[_7682 + 12 len 20].getReserves() with:
                                gas gas_remaining wei
                        mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _7734 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 96
                        _7761 = mem[_7734]
                        require mem[_7734] == mem[_7734 + 18 len 14]
                        _7812 = mem[_7734 + 32]
                        require mem[_7734 + 32] == mem[_7734 + 50 len 14]
                        require mem[_7734 + 64] == mem[_7734 + 92 len 4]
                        require ext_code.size(address(_7689))
                        staticcall address(_7689).token0() with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _7901 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        require mem[_7901] == mem[_7901 + 12 len 20]
                        mem[mem[64] + 4] = arg1
                        require ext_code.size(address(_7689))
                        staticcall address(_7689).0x70a08231 with:
                                gas gas_remaining wei
                               args address(arg1)
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        if mem[_7901 + 12 len 20] == 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7:
                            _8093 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _8126 = mem[_8093]
                            require ext_code.size(address(_7689))
                            staticcall address(_7689).0x18160ddd with:
                                    gas gas_remaining wei
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _8184 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _8204 = mem[_8184]
                            if 10^18 * _8126 / 10^18 != _8126:
                                revert with 0, 'math-not-safe'
                            if (10^18 * _8126) + (mem[_8184] / 2) < 10^18 * _8126:
                                revert with 0, 'math-not-safe'
                            require mem[_8184]
                            if not (10^18 * _8126) + (mem[_8184] / 2) / mem[_8184]:
                                if not (10^18 * _8126) + (mem[_8184] / 2) / mem[_8184]:
                                    _8441 = mem[64]
                                    mem[64] = mem[64] + 352
                                    mem[_8441] = 0
                                    mem[_8441 + 32] = 0
                                    mem[_8441 + 64] = address(_7689)
                                    mem[_8441 + 96] = Mask(112, 0, _7761)
                                    mem[_8441 + 128] = Mask(112, 0, _7812)
                                    mem[_8441 + 160] = 0
                                    mem[_8441 + 192] = 0
                                    mem[_8441 + 224] = 0
                                    mem[_8441 + 256] = 0
                                    mem[_8441 + 288] = _8126
                                    mem[_8441 + 320] = _8204
                                    require idx < mem[_3802]
                                    mem[(32 * idx) + _3802 + 32] = _8441
                                    require idx < mem[96]
                                    require idx < mem[_3802]
                                    mem[_8441] = mem[mem[(32 * idx) + 128] + 12 len 20]
                                    require idx < mem[96]
                                    require idx < mem[_3802]
                                    mem[_8441 + 32] = mem[mem[(32 * idx) + 128] + 44 len 20]
                                    require idx < mem[96]
                                    if mem[mem[(32 * idx) + 128] + 12 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                                        require idx < mem[_3802]
                                        mem[_8441 + 224] = eth.balance(arg1)
                                        require idx < mem[96]
                                        if mem[mem[(32 * idx) + 128] + 44 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                                            require idx < mem[_3802]
                                            mem[_8441 + 256] = eth.balance(arg1)
                                        else:
                                            mem[mem[64] + 4] = arg1
                                            require ext_code.size(address(_7605))
                                            staticcall address(_7605).0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args address(arg1)
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _9963 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require idx < mem[_3802]
                                            mem[_8441 + 256] = mem[_9963]
                                    else:
                                        mem[mem[64] + 4] = arg1
                                        require ext_code.size(0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7)
                                        staticcall 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7.0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(arg1)
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _9432 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require idx < mem[_3802]
                                        mem[_8441 + 224] = mem[_9432]
                                        require idx < mem[96]
                                        if mem[mem[(32 * idx) + 128] + 44 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                                            require idx < mem[_3802]
                                            mem[_8441 + 256] = eth.balance(arg1)
                                        else:
                                            mem[mem[64] + 4] = arg1
                                            require ext_code.size(address(_7605))
                                            staticcall address(_7605).0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args address(arg1)
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _10697 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require idx < mem[_3802]
                                            mem[_8441 + 256] = mem[_10697]
                                else:
                                    require (10^18 * _8126) + (mem[_8184] / 2) / mem[_8184]
                                    if Mask(112, 0, _7812) * (10^18 * _8126) + (mem[_8184] / 2) / mem[_8184] / (10^18 * _8126) + (mem[_8184] / 2) / mem[_8184] != Mask(112, 0, _7812):
                                        revert with 0, 'math-not-safe'
                                    if (Mask(112, 0, _7812) * (10^18 * _8126) + (mem[_8184] / 2) / mem[_8184]) + 5 * 10^17 < Mask(112, 0, _7812) * (10^18 * _8126) + (mem[_8184] / 2) / mem[_8184]:
                                        revert with 0, 'math-not-safe'
                                    _8496 = mem[64]
                                    mem[64] = mem[64] + 352
                                    mem[_8496] = 0
                                    mem[_8496 + 32] = 0
                                    mem[_8496 + 64] = address(_7689)
                                    mem[_8496 + 96] = Mask(112, 0, _7761)
                                    mem[_8496 + 128] = Mask(112, 0, _7812)
                                    mem[_8496 + 160] = 0
                                    mem[_8496 + 192] = (Mask(112, 0, _7812) * (10^18 * _8126) + (_8204 / 2) / _8204) + 5 * 10^17 / 10^18
                                    mem[_8496 + 224] = 0
                                    mem[_8496 + 256] = 0
                                    mem[_8496 + 288] = _8126
                                    mem[_8496 + 320] = _8204
                                    require idx < mem[_3802]
                                    mem[(32 * idx) + _3802 + 32] = _8496
                                    require idx < mem[96]
                                    require idx < mem[_3802]
                                    mem[_8496] = mem[mem[(32 * idx) + 128] + 12 len 20]
                                    require idx < mem[96]
                                    require idx < mem[_3802]
                                    mem[_8496 + 32] = mem[mem[(32 * idx) + 128] + 44 len 20]
                                    require idx < mem[96]
                                    if mem[mem[(32 * idx) + 128] + 12 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                                        require idx < mem[_3802]
                                        mem[_8496 + 224] = eth.balance(arg1)
                                        require idx < mem[96]
                                        if mem[mem[(32 * idx) + 128] + 44 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                                            require idx < mem[_3802]
                                            mem[_8496 + 256] = eth.balance(arg1)
                                        else:
                                            mem[mem[64] + 4] = arg1
                                            require ext_code.size(address(_7605))
                                            staticcall address(_7605).0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args address(arg1)
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _10158 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require idx < mem[_3802]
                                            mem[_8496 + 256] = mem[_10158]
                                    else:
                                        mem[mem[64] + 4] = arg1
                                        require ext_code.size(0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7)
                                        staticcall 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7.0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(arg1)
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _9590 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require idx < mem[_3802]
                                        mem[_8496 + 224] = mem[_9590]
                                        require idx < mem[96]
                                        if mem[mem[(32 * idx) + 128] + 44 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                                            require idx < mem[_3802]
                                            mem[_8496 + 256] = eth.balance(arg1)
                                        else:
                                            mem[mem[64] + 4] = arg1
                                            require ext_code.size(address(_7605))
                                            staticcall address(_7605).0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args address(arg1)
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _10872 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require idx < mem[_3802]
                                            mem[_8496 + 256] = mem[_10872]
                            else:
                                require (10^18 * _8126) + (mem[_8184] / 2) / mem[_8184]
                                if Mask(112, 0, _7761) * (10^18 * _8126) + (mem[_8184] / 2) / mem[_8184] / (10^18 * _8126) + (mem[_8184] / 2) / mem[_8184] != Mask(112, 0, _7761):
                                    revert with 0, 'math-not-safe'
                                if (Mask(112, 0, _7761) * (10^18 * _8126) + (mem[_8184] / 2) / mem[_8184]) + 5 * 10^17 < Mask(112, 0, _7761) * (10^18 * _8126) + (mem[_8184] / 2) / mem[_8184]:
                                    revert with 0, 'math-not-safe'
                                if not (10^18 * _8126) + (mem[_8184] / 2) / mem[_8184]:
                                    _8498 = mem[64]
                                    mem[64] = mem[64] + 352
                                    mem[_8498] = 0
                                    mem[_8498 + 32] = 0
                                    mem[_8498 + 64] = address(_7689)
                                    mem[_8498 + 96] = Mask(112, 0, _7761)
                                    mem[_8498 + 128] = Mask(112, 0, _7812)
                                    mem[_8498 + 160] = (Mask(112, 0, _7761) * (10^18 * _8126) + (_8204 / 2) / _8204) + 5 * 10^17 / 10^18
                                    mem[_8498 + 192] = 0
                                    mem[_8498 + 224] = 0
                                    mem[_8498 + 256] = 0
                                    mem[_8498 + 288] = _8126
                                    mem[_8498 + 320] = _8204
                                    require idx < mem[_3802]
                                    mem[(32 * idx) + _3802 + 32] = _8498
                                    require idx < mem[96]
                                    require idx < mem[_3802]
                                    mem[_8498] = mem[mem[(32 * idx) + 128] + 12 len 20]
                                    require idx < mem[96]
                                    require idx < mem[_3802]
                                    mem[_8498 + 32] = mem[mem[(32 * idx) + 128] + 44 len 20]
                                    require idx < mem[96]
                                    if mem[mem[(32 * idx) + 128] + 12 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                                        require idx < mem[_3802]
                                        mem[_8498 + 224] = eth.balance(arg1)
                                        require idx < mem[96]
                                        if mem[mem[(32 * idx) + 128] + 44 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                                            require idx < mem[_3802]
                                            mem[_8498 + 256] = eth.balance(arg1)
                                        else:
                                            mem[mem[64] + 4] = arg1
                                            require ext_code.size(address(_7605))
                                            staticcall address(_7605).0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args address(arg1)
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _10159 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require idx < mem[_3802]
                                            mem[_8498 + 256] = mem[_10159]
                                    else:
                                        mem[mem[64] + 4] = arg1
                                        require ext_code.size(0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7)
                                        staticcall 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7.0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(arg1)
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _9592 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require idx < mem[_3802]
                                        mem[_8498 + 224] = mem[_9592]
                                        require idx < mem[96]
                                        if mem[mem[(32 * idx) + 128] + 44 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                                            require idx < mem[_3802]
                                            mem[_8498 + 256] = eth.balance(arg1)
                                        else:
                                            mem[mem[64] + 4] = arg1
                                            require ext_code.size(address(_7605))
                                            staticcall address(_7605).0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args address(arg1)
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _10873 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require idx < mem[_3802]
                                            mem[_8498 + 256] = mem[_10873]
                                else:
                                    require (10^18 * _8126) + (mem[_8184] / 2) / mem[_8184]
                                    if Mask(112, 0, _7812) * (10^18 * _8126) + (mem[_8184] / 2) / mem[_8184] / (10^18 * _8126) + (mem[_8184] / 2) / mem[_8184] != Mask(112, 0, _7812):
                                        revert with 0, 'math-not-safe'
                                    if (Mask(112, 0, _7812) * (10^18 * _8126) + (mem[_8184] / 2) / mem[_8184]) + 5 * 10^17 < Mask(112, 0, _7812) * (10^18 * _8126) + (mem[_8184] / 2) / mem[_8184]:
                                        revert with 0, 'math-not-safe'
                                    _8581 = mem[64]
                                    mem[64] = mem[64] + 352
                                    mem[_8581] = 0
                                    mem[_8581 + 32] = 0
                                    mem[_8581 + 64] = address(_7689)
                                    mem[_8581 + 96] = Mask(112, 0, _7761)
                                    mem[_8581 + 128] = Mask(112, 0, _7812)
                                    mem[_8581 + 160] = (Mask(112, 0, _7761) * (10^18 * _8126) + (_8204 / 2) / _8204) + 5 * 10^17 / 10^18
                                    mem[_8581 + 192] = (Mask(112, 0, _7812) * (10^18 * _8126) + (_8204 / 2) / _8204) + 5 * 10^17 / 10^18
                                    mem[_8581 + 224] = 0
                                    mem[_8581 + 256] = 0
                                    mem[_8581 + 288] = _8126
                                    mem[_8581 + 320] = _8204
                                    require idx < mem[_3802]
                                    mem[(32 * idx) + _3802 + 32] = _8581
                                    require idx < mem[96]
                                    require idx < mem[_3802]
                                    mem[_8581] = mem[mem[(32 * idx) + 128] + 12 len 20]
                                    require idx < mem[96]
                                    require idx < mem[_3802]
                                    mem[_8581 + 32] = mem[mem[(32 * idx) + 128] + 44 len 20]
                                    require idx < mem[96]
                                    if mem[mem[(32 * idx) + 128] + 12 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                                        require idx < mem[_3802]
                                        mem[_8581 + 224] = eth.balance(arg1)
                                        require idx < mem[96]
                                        if mem[mem[(32 * idx) + 128] + 44 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                                            require idx < mem[_3802]
                                            mem[_8581 + 256] = eth.balance(arg1)
                                        else:
                                            mem[mem[64] + 4] = arg1
                                            require ext_code.size(address(_7605))
                                            staticcall address(_7605).0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args address(arg1)
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _10371 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require idx < mem[_3802]
                                            mem[_8581 + 256] = mem[_10371]
                                    else:
                                        mem[mem[64] + 4] = arg1
                                        require ext_code.size(0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7)
                                        staticcall 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7.0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(arg1)
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _9777 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require idx < mem[_3802]
                                        mem[_8581 + 224] = mem[_9777]
                                        require idx < mem[96]
                                        if mem[mem[(32 * idx) + 128] + 44 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                                            require idx < mem[_3802]
                                            mem[_8581 + 256] = eth.balance(arg1)
                                        else:
                                            mem[mem[64] + 4] = arg1
                                            require ext_code.size(address(_7605))
                                            staticcall address(_7605).0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args address(arg1)
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _11030 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require idx < mem[_3802]
                                            mem[_8581 + 256] = mem[_11030]
                        else:
                            _8094 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _8127 = mem[_8094]
                            require ext_code.size(address(_7689))
                            staticcall address(_7689).0x18160ddd with:
                                    gas gas_remaining wei
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _8185 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _8205 = mem[_8185]
                            if 10^18 * _8127 / 10^18 != _8127:
                                revert with 0, 'math-not-safe'
                            if (10^18 * _8127) + (mem[_8185] / 2) < 10^18 * _8127:
                                revert with 0, 'math-not-safe'
                            require mem[_8185]
                            if not (10^18 * _8127) + (mem[_8185] / 2) / mem[_8185]:
                                if not (10^18 * _8127) + (mem[_8185] / 2) / mem[_8185]:
                                    _8443 = mem[64]
                                    mem[64] = mem[64] + 352
                                    mem[_8443] = 0
                                    mem[_8443 + 32] = 0
                                    mem[_8443 + 64] = address(_7689)
                                    mem[_8443 + 96] = Mask(112, 0, _7812)
                                    mem[_8443 + 128] = Mask(112, 0, _7761)
                                    mem[_8443 + 160] = 0
                                    mem[_8443 + 192] = 0
                                    mem[_8443 + 224] = 0
                                    mem[_8443 + 256] = 0
                                    mem[_8443 + 288] = _8127
                                    mem[_8443 + 320] = _8205
                                    require idx < mem[_3802]
                                    mem[(32 * idx) + _3802 + 32] = _8443
                                    require idx < mem[96]
                                    require idx < mem[_3802]
                                    mem[_8443] = mem[mem[(32 * idx) + 128] + 12 len 20]
                                    require idx < mem[96]
                                    require idx < mem[_3802]
                                    mem[_8443 + 32] = mem[mem[(32 * idx) + 128] + 44 len 20]
                                    require idx < mem[96]
                                    if mem[mem[(32 * idx) + 128] + 12 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                                        require idx < mem[_3802]
                                        mem[_8443 + 224] = eth.balance(arg1)
                                        require idx < mem[96]
                                        if mem[mem[(32 * idx) + 128] + 44 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                                            require idx < mem[_3802]
                                            mem[_8443 + 256] = eth.balance(arg1)
                                        else:
                                            mem[mem[64] + 4] = arg1
                                            require ext_code.size(address(_7605))
                                            staticcall address(_7605).0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args address(arg1)
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _9972 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require idx < mem[_3802]
                                            mem[_8443 + 256] = mem[_9972]
                                    else:
                                        mem[mem[64] + 4] = arg1
                                        require ext_code.size(0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7)
                                        staticcall 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7.0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(arg1)
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _9439 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require idx < mem[_3802]
                                        mem[_8443 + 224] = mem[_9439]
                                        require idx < mem[96]
                                        if mem[mem[(32 * idx) + 128] + 44 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                                            require idx < mem[_3802]
                                            mem[_8443 + 256] = eth.balance(arg1)
                                        else:
                                            mem[mem[64] + 4] = arg1
                                            require ext_code.size(address(_7605))
                                            staticcall address(_7605).0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args address(arg1)
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _10705 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require idx < mem[_3802]
                                            mem[_8443 + 256] = mem[_10705]
                                else:
                                    require (10^18 * _8127) + (mem[_8185] / 2) / mem[_8185]
                                    if Mask(112, 0, _7761) * (10^18 * _8127) + (mem[_8185] / 2) / mem[_8185] / (10^18 * _8127) + (mem[_8185] / 2) / mem[_8185] != Mask(112, 0, _7761):
                                        revert with 0, 'math-not-safe'
                                    if (Mask(112, 0, _7761) * (10^18 * _8127) + (mem[_8185] / 2) / mem[_8185]) + 5 * 10^17 < Mask(112, 0, _7761) * (10^18 * _8127) + (mem[_8185] / 2) / mem[_8185]:
                                        revert with 0, 'math-not-safe'
                                    _8501 = mem[64]
                                    mem[64] = mem[64] + 352
                                    mem[_8501] = 0
                                    mem[_8501 + 32] = 0
                                    mem[_8501 + 64] = address(_7689)
                                    mem[_8501 + 96] = Mask(112, 0, _7812)
                                    mem[_8501 + 128] = Mask(112, 0, _7761)
                                    mem[_8501 + 160] = 0
                                    mem[_8501 + 192] = (Mask(112, 0, _7761) * (10^18 * _8127) + (_8205 / 2) / _8205) + 5 * 10^17 / 10^18
                                    mem[_8501 + 224] = 0
                                    mem[_8501 + 256] = 0
                                    mem[_8501 + 288] = _8127
                                    mem[_8501 + 320] = _8205
                                    require idx < mem[_3802]
                                    mem[(32 * idx) + _3802 + 32] = _8501
                                    require idx < mem[96]
                                    require idx < mem[_3802]
                                    mem[_8501] = mem[mem[(32 * idx) + 128] + 12 len 20]
                                    require idx < mem[96]
                                    require idx < mem[_3802]
                                    mem[_8501 + 32] = mem[mem[(32 * idx) + 128] + 44 len 20]
                                    require idx < mem[96]
                                    if mem[mem[(32 * idx) + 128] + 12 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                                        require idx < mem[_3802]
                                        mem[_8501 + 224] = eth.balance(arg1)
                                        require idx < mem[96]
                                        if mem[mem[(32 * idx) + 128] + 44 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                                            require idx < mem[_3802]
                                            mem[_8501 + 256] = eth.balance(arg1)
                                        else:
                                            mem[mem[64] + 4] = arg1
                                            require ext_code.size(address(_7605))
                                            staticcall address(_7605).0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args address(arg1)
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _10166 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require idx < mem[_3802]
                                            mem[_8501 + 256] = mem[_10166]
                                    else:
                                        mem[mem[64] + 4] = arg1
                                        require ext_code.size(0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7)
                                        staticcall 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7.0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(arg1)
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _9598 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require idx < mem[_3802]
                                        mem[_8501 + 224] = mem[_9598]
                                        require idx < mem[96]
                                        if mem[mem[(32 * idx) + 128] + 44 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                                            require idx < mem[_3802]
                                            mem[_8501 + 256] = eth.balance(arg1)
                                        else:
                                            mem[mem[64] + 4] = arg1
                                            require ext_code.size(address(_7605))
                                            staticcall address(_7605).0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args address(arg1)
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _10878 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require idx < mem[_3802]
                                            mem[_8501 + 256] = mem[_10878]
                            else:
                                require (10^18 * _8127) + (mem[_8185] / 2) / mem[_8185]
                                if Mask(112, 0, _7812) * (10^18 * _8127) + (mem[_8185] / 2) / mem[_8185] / (10^18 * _8127) + (mem[_8185] / 2) / mem[_8185] != Mask(112, 0, _7812):
                                    revert with 0, 'math-not-safe'
                                if (Mask(112, 0, _7812) * (10^18 * _8127) + (mem[_8185] / 2) / mem[_8185]) + 5 * 10^17 < Mask(112, 0, _7812) * (10^18 * _8127) + (mem[_8185] / 2) / mem[_8185]:
                                    revert with 0, 'math-not-safe'
                                if not (10^18 * _8127) + (mem[_8185] / 2) / mem[_8185]:
                                    _8503 = mem[64]
                                    mem[64] = mem[64] + 352
                                    mem[_8503] = 0
                                    mem[_8503 + 32] = 0
                                    mem[_8503 + 64] = address(_7689)
                                    mem[_8503 + 96] = Mask(112, 0, _7812)
                                    mem[_8503 + 128] = Mask(112, 0, _7761)
                                    mem[_8503 + 160] = (Mask(112, 0, _7812) * (10^18 * _8127) + (_8205 / 2) / _8205) + 5 * 10^17 / 10^18
                                    mem[_8503 + 192] = 0
                                    mem[_8503 + 224] = 0
                                    mem[_8503 + 256] = 0
                                    mem[_8503 + 288] = _8127
                                    mem[_8503 + 320] = _8205
                                    require idx < mem[_3802]
                                    mem[(32 * idx) + _3802 + 32] = _8503
                                    require idx < mem[96]
                                    require idx < mem[_3802]
                                    mem[_8503] = mem[mem[(32 * idx) + 128] + 12 len 20]
                                    require idx < mem[96]
                                    require idx < mem[_3802]
                                    mem[_8503 + 32] = mem[mem[(32 * idx) + 128] + 44 len 20]
                                    require idx < mem[96]
                                    if mem[mem[(32 * idx) + 128] + 12 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                                        require idx < mem[_3802]
                                        mem[_8503 + 224] = eth.balance(arg1)
                                        require idx < mem[96]
                                        if mem[mem[(32 * idx) + 128] + 44 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                                            require idx < mem[_3802]
                                            mem[_8503 + 256] = eth.balance(arg1)
                                        else:
                                            mem[mem[64] + 4] = arg1
                                            require ext_code.size(address(_7605))
                                            staticcall address(_7605).0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args address(arg1)
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _10167 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require idx < mem[_3802]
                                            mem[_8503 + 256] = mem[_10167]
                                    else:
                                        mem[mem[64] + 4] = arg1
                                        require ext_code.size(0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7)
                                        staticcall 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7.0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(arg1)
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _9600 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require idx < mem[_3802]
                                        mem[_8503 + 224] = mem[_9600]
                                        require idx < mem[96]
                                        if mem[mem[(32 * idx) + 128] + 44 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                                            require idx < mem[_3802]
                                            mem[_8503 + 256] = eth.balance(arg1)
                                        else:
                                            mem[mem[64] + 4] = arg1
                                            require ext_code.size(address(_7605))
                                            staticcall address(_7605).0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args address(arg1)
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _10879 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require idx < mem[_3802]
                                            mem[_8503 + 256] = mem[_10879]
                                else:
                                    require (10^18 * _8127) + (mem[_8185] / 2) / mem[_8185]
                                    if Mask(112, 0, _7761) * (10^18 * _8127) + (mem[_8185] / 2) / mem[_8185] / (10^18 * _8127) + (mem[_8185] / 2) / mem[_8185] != Mask(112, 0, _7761):
                                        revert with 0, 'math-not-safe'
                                    if (Mask(112, 0, _7761) * (10^18 * _8127) + (mem[_8185] / 2) / mem[_8185]) + 5 * 10^17 < Mask(112, 0, _7761) * (10^18 * _8127) + (mem[_8185] / 2) / mem[_8185]:
                                        revert with 0, 'math-not-safe'
                                    _8587 = mem[64]
                                    mem[64] = mem[64] + 352
                                    mem[_8587] = 0
                                    mem[_8587 + 32] = 0
                                    mem[_8587 + 64] = address(_7689)
                                    mem[_8587 + 96] = Mask(112, 0, _7812)
                                    mem[_8587 + 128] = Mask(112, 0, _7761)
                                    mem[_8587 + 160] = (Mask(112, 0, _7812) * (10^18 * _8127) + (_8205 / 2) / _8205) + 5 * 10^17 / 10^18
                                    mem[_8587 + 192] = (Mask(112, 0, _7761) * (10^18 * _8127) + (_8205 / 2) / _8205) + 5 * 10^17 / 10^18
                                    mem[_8587 + 224] = 0
                                    mem[_8587 + 256] = 0
                                    mem[_8587 + 288] = _8127
                                    mem[_8587 + 320] = _8205
                                    require idx < mem[_3802]
                                    mem[(32 * idx) + _3802 + 32] = _8587
                                    require idx < mem[96]
                                    require idx < mem[_3802]
                                    mem[_8587] = mem[mem[(32 * idx) + 128] + 12 len 20]
                                    require idx < mem[96]
                                    require idx < mem[_3802]
                                    mem[_8587 + 32] = mem[mem[(32 * idx) + 128] + 44 len 20]
                                    require idx < mem[96]
                                    if mem[mem[(32 * idx) + 128] + 12 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                                        require idx < mem[_3802]
                                        mem[_8587 + 224] = eth.balance(arg1)
                                        require idx < mem[96]
                                        if mem[mem[(32 * idx) + 128] + 44 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                                            require idx < mem[_3802]
                                            mem[_8587 + 256] = eth.balance(arg1)
                                        else:
                                            mem[mem[64] + 4] = arg1
                                            require ext_code.size(address(_7605))
                                            staticcall address(_7605).0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args address(arg1)
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _10380 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require idx < mem[_3802]
                                            mem[_8587 + 256] = mem[_10380]
                                    else:
                                        mem[mem[64] + 4] = arg1
                                        require ext_code.size(0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7)
                                        staticcall 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7.0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(arg1)
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _9786 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require idx < mem[_3802]
                                        mem[_8587 + 224] = mem[_9786]
                                        require idx < mem[96]
                                        if mem[mem[(32 * idx) + 128] + 44 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                                            require idx < mem[_3802]
                                            mem[_8587 + 256] = eth.balance(arg1)
                                        else:
                                            mem[mem[64] + 4] = arg1
                                            require ext_code.size(address(_7605))
                                            staticcall address(_7605).0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args address(arg1)
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _11034 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require idx < mem[_3802]
                                            mem[_8587 + 256] = mem[_11034]
            else:
                if mem[mem[(32 * idx) + 128] + 44 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                    _7642 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _7647 = mem[_7642]
                    require mem[_7642] == mem[_7642 + 12 len 20]
                    mem[mem[64] + 4] = address(_7601)
                    mem[mem[64] + 36] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7
                    require ext_code.size(address(_7647))
                    staticcall address(_7647).getPair(address arg1, address arg2) with:
                            gas gas_remaining wei
                           args address(_7601), 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _7683 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _7690 = mem[_7683]
                    require mem[_7683] == mem[_7683 + 12 len 20]
                    if not mem[_7683 + 12 len 20]:
                        require idx < mem[96]
                        require idx < mem[_3802]
                        mem[mem[(32 * idx) + _3802 + 32]] = mem[mem[(32 * idx) + 128] + 12 len 20]
                        require idx < mem[96]
                        require idx < mem[_3802]
                        mem[mem[(32 * idx) + _3802 + 32] + 32] = mem[mem[(32 * idx) + 128] + 44 len 20]
                        require idx < mem[96]
                        if mem[mem[(32 * idx) + 128] + 12 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                            require idx < mem[_3802]
                            mem[mem[(32 * idx) + _3802 + 32] + 224] = eth.balance(arg1)
                            require idx < mem[96]
                            if mem[mem[(32 * idx) + 128] + 44 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                                require idx < mem[_3802]
                                mem[mem[(32 * idx) + _3802 + 32] + 256] = eth.balance(arg1)
                            else:
                                mem[mem[64] + 4] = arg1
                                require ext_code.size(0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7)
                                staticcall 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7.0x70a08231 with:
                                        gas gas_remaining wei
                                       args address(arg1)
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _7965 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                require idx < mem[_3802]
                                mem[mem[(32 * idx) + _3802 + 32] + 256] = mem[_7965]
                        else:
                            mem[mem[64] + 4] = arg1
                            require ext_code.size(address(_7601))
                            staticcall address(_7601).0x70a08231 with:
                                    gas gas_remaining wei
                                   args address(arg1)
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _7867 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            require idx < mem[_3802]
                            mem[mem[(32 * idx) + _3802 + 32] + 224] = mem[_7867]
                            require idx < mem[96]
                            if mem[mem[(32 * idx) + 128] + 44 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                                require idx < mem[_3802]
                                mem[mem[(32 * idx) + _3802 + 32] + 256] = eth.balance(arg1)
                            else:
                                mem[mem[64] + 4] = arg1
                                require ext_code.size(0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7)
                                staticcall 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7.0x70a08231 with:
                                        gas gas_remaining wei
                                       args address(arg1)
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _8081 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                require idx < mem[_3802]
                                mem[mem[(32 * idx) + _3802 + 32] + 256] = mem[_8081]
                    else:
                        require ext_code.size(mem[_7683 + 12 len 20])
                        staticcall mem[_7683 + 12 len 20].getReserves() with:
                                gas gas_remaining wei
                        mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _7737 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 96
                        _7762 = mem[_7737]
                        require mem[_7737] == mem[_7737 + 18 len 14]
                        _7814 = mem[_7737 + 32]
                        require mem[_7737 + 32] == mem[_7737 + 50 len 14]
                        require mem[_7737 + 64] == mem[_7737 + 92 len 4]
                        require ext_code.size(address(_7690))
                        staticcall address(_7690).token0() with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _7904 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        require mem[_7904] == mem[_7904 + 12 len 20]
                        mem[mem[64] + 4] = arg1
                        require ext_code.size(address(_7690))
                        staticcall address(_7690).0x70a08231 with:
                                gas gas_remaining wei
                               args address(arg1)
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        if mem[_7904 + 12 len 20] == address(_7601):
                            _8095 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _8128 = mem[_8095]
                            require ext_code.size(address(_7690))
                            staticcall address(_7690).0x18160ddd with:
                                    gas gas_remaining wei
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _8186 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _8206 = mem[_8186]
                            if 10^18 * _8128 / 10^18 != _8128:
                                revert with 0, 'math-not-safe'
                            if (10^18 * _8128) + (mem[_8186] / 2) < 10^18 * _8128:
                                revert with 0, 'math-not-safe'
                            require mem[_8186]
                            if not (10^18 * _8128) + (mem[_8186] / 2) / mem[_8186]:
                                if not (10^18 * _8128) + (mem[_8186] / 2) / mem[_8186]:
                                    _8445 = mem[64]
                                    mem[64] = mem[64] + 352
                                    mem[_8445] = 0
                                    mem[_8445 + 32] = 0
                                    mem[_8445 + 64] = address(_7690)
                                    mem[_8445 + 96] = Mask(112, 0, _7762)
                                    mem[_8445 + 128] = Mask(112, 0, _7814)
                                    mem[_8445 + 160] = 0
                                    mem[_8445 + 192] = 0
                                    mem[_8445 + 224] = 0
                                    mem[_8445 + 256] = 0
                                    mem[_8445 + 288] = _8128
                                    mem[_8445 + 320] = _8206
                                    require idx < mem[_3802]
                                    mem[(32 * idx) + _3802 + 32] = _8445
                                    require idx < mem[96]
                                    require idx < mem[_3802]
                                    mem[_8445] = mem[mem[(32 * idx) + 128] + 12 len 20]
                                    require idx < mem[96]
                                    require idx < mem[_3802]
                                    mem[_8445 + 32] = mem[mem[(32 * idx) + 128] + 44 len 20]
                                    require idx < mem[96]
                                    if mem[mem[(32 * idx) + 128] + 12 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                                        require idx < mem[_3802]
                                        mem[_8445 + 224] = eth.balance(arg1)
                                        require idx < mem[96]
                                        if mem[mem[(32 * idx) + 128] + 44 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                                            require idx < mem[_3802]
                                            mem[_8445 + 256] = eth.balance(arg1)
                                        else:
                                            mem[mem[64] + 4] = arg1
                                            require ext_code.size(0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7)
                                            staticcall 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args address(arg1)
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _9981 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require idx < mem[_3802]
                                            mem[_8445 + 256] = mem[_9981]
                                    else:
                                        mem[mem[64] + 4] = arg1
                                        require ext_code.size(address(_7601))
                                        staticcall address(_7601).0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(arg1)
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _9446 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require idx < mem[_3802]
                                        mem[_8445 + 224] = mem[_9446]
                                        require idx < mem[96]
                                        if mem[mem[(32 * idx) + 128] + 44 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                                            require idx < mem[_3802]
                                            mem[_8445 + 256] = eth.balance(arg1)
                                        else:
                                            mem[mem[64] + 4] = arg1
                                            require ext_code.size(0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7)
                                            staticcall 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args address(arg1)
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _10713 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require idx < mem[_3802]
                                            mem[_8445 + 256] = mem[_10713]
                                else:
                                    require (10^18 * _8128) + (mem[_8186] / 2) / mem[_8186]
                                    if Mask(112, 0, _7814) * (10^18 * _8128) + (mem[_8186] / 2) / mem[_8186] / (10^18 * _8128) + (mem[_8186] / 2) / mem[_8186] != Mask(112, 0, _7814):
                                        revert with 0, 'math-not-safe'
                                    if (Mask(112, 0, _7814) * (10^18 * _8128) + (mem[_8186] / 2) / mem[_8186]) + 5 * 10^17 < Mask(112, 0, _7814) * (10^18 * _8128) + (mem[_8186] / 2) / mem[_8186]:
                                        revert with 0, 'math-not-safe'
                                    _8506 = mem[64]
                                    mem[64] = mem[64] + 352
                                    mem[_8506] = 0
                                    mem[_8506 + 32] = 0
                                    mem[_8506 + 64] = address(_7690)
                                    mem[_8506 + 96] = Mask(112, 0, _7762)
                                    mem[_8506 + 128] = Mask(112, 0, _7814)
                                    mem[_8506 + 160] = 0
                                    mem[_8506 + 192] = (Mask(112, 0, _7814) * (10^18 * _8128) + (_8206 / 2) / _8206) + 5 * 10^17 / 10^18
                                    mem[_8506 + 224] = 0
                                    mem[_8506 + 256] = 0
                                    mem[_8506 + 288] = _8128
                                    mem[_8506 + 320] = _8206
                                    require idx < mem[_3802]
                                    mem[(32 * idx) + _3802 + 32] = _8506
                                    require idx < mem[96]
                                    require idx < mem[_3802]
                                    mem[_8506] = mem[mem[(32 * idx) + 128] + 12 len 20]
                                    require idx < mem[96]
                                    require idx < mem[_3802]
                                    mem[_8506 + 32] = mem[mem[(32 * idx) + 128] + 44 len 20]
                                    require idx < mem[96]
                                    if mem[mem[(32 * idx) + 128] + 12 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                                        require idx < mem[_3802]
                                        mem[_8506 + 224] = eth.balance(arg1)
                                        require idx < mem[96]
                                        if mem[mem[(32 * idx) + 128] + 44 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                                            require idx < mem[_3802]
                                            mem[_8506 + 256] = eth.balance(arg1)
                                        else:
                                            mem[mem[64] + 4] = arg1
                                            require ext_code.size(0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7)
                                            staticcall 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args address(arg1)
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _10174 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require idx < mem[_3802]
                                            mem[_8506 + 256] = mem[_10174]
                                    else:
                                        mem[mem[64] + 4] = arg1
                                        require ext_code.size(address(_7601))
                                        staticcall address(_7601).0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(arg1)
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _9606 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require idx < mem[_3802]
                                        mem[_8506 + 224] = mem[_9606]
                                        require idx < mem[96]
                                        if mem[mem[(32 * idx) + 128] + 44 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                                            require idx < mem[_3802]
                                            mem[_8506 + 256] = eth.balance(arg1)
                                        else:
                                            mem[mem[64] + 4] = arg1
                                            require ext_code.size(0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7)
                                            staticcall 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args address(arg1)
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _10884 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require idx < mem[_3802]
                                            mem[_8506 + 256] = mem[_10884]
                            else:
                                require (10^18 * _8128) + (mem[_8186] / 2) / mem[_8186]
                                if Mask(112, 0, _7762) * (10^18 * _8128) + (mem[_8186] / 2) / mem[_8186] / (10^18 * _8128) + (mem[_8186] / 2) / mem[_8186] != Mask(112, 0, _7762):
                                    revert with 0, 'math-not-safe'
                                if (Mask(112, 0, _7762) * (10^18 * _8128) + (mem[_8186] / 2) / mem[_8186]) + 5 * 10^17 < Mask(112, 0, _7762) * (10^18 * _8128) + (mem[_8186] / 2) / mem[_8186]:
                                    revert with 0, 'math-not-safe'
                                if not (10^18 * _8128) + (mem[_8186] / 2) / mem[_8186]:
                                    _8508 = mem[64]
                                    mem[64] = mem[64] + 352
                                    mem[_8508] = 0
                                    mem[_8508 + 32] = 0
                                    mem[_8508 + 64] = address(_7690)
                                    mem[_8508 + 96] = Mask(112, 0, _7762)
                                    mem[_8508 + 128] = Mask(112, 0, _7814)
                                    mem[_8508 + 160] = (Mask(112, 0, _7762) * (10^18 * _8128) + (_8206 / 2) / _8206) + 5 * 10^17 / 10^18
                                    mem[_8508 + 192] = 0
                                    mem[_8508 + 224] = 0
                                    mem[_8508 + 256] = 0
                                    mem[_8508 + 288] = _8128
                                    mem[_8508 + 320] = _8206
                                    require idx < mem[_3802]
                                    mem[(32 * idx) + _3802 + 32] = _8508
                                    require idx < mem[96]
                                    require idx < mem[_3802]
                                    mem[_8508] = mem[mem[(32 * idx) + 128] + 12 len 20]
                                    require idx < mem[96]
                                    require idx < mem[_3802]
                                    mem[_8508 + 32] = mem[mem[(32 * idx) + 128] + 44 len 20]
                                    require idx < mem[96]
                                    if mem[mem[(32 * idx) + 128] + 12 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                                        require idx < mem[_3802]
                                        mem[_8508 + 224] = eth.balance(arg1)
                                        require idx < mem[96]
                                        if mem[mem[(32 * idx) + 128] + 44 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                                            require idx < mem[_3802]
                                            mem[_8508 + 256] = eth.balance(arg1)
                                        else:
                                            mem[mem[64] + 4] = arg1
                                            require ext_code.size(0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7)
                                            staticcall 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args address(arg1)
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _10175 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require idx < mem[_3802]
                                            mem[_8508 + 256] = mem[_10175]
                                    else:
                                        mem[mem[64] + 4] = arg1
                                        require ext_code.size(address(_7601))
                                        staticcall address(_7601).0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(arg1)
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _9608 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require idx < mem[_3802]
                                        mem[_8508 + 224] = mem[_9608]
                                        require idx < mem[96]
                                        if mem[mem[(32 * idx) + 128] + 44 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                                            require idx < mem[_3802]
                                            mem[_8508 + 256] = eth.balance(arg1)
                                        else:
                                            mem[mem[64] + 4] = arg1
                                            require ext_code.size(0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7)
                                            staticcall 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args address(arg1)
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _10885 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require idx < mem[_3802]
                                            mem[_8508 + 256] = mem[_10885]
                                else:
                                    require (10^18 * _8128) + (mem[_8186] / 2) / mem[_8186]
                                    if Mask(112, 0, _7814) * (10^18 * _8128) + (mem[_8186] / 2) / mem[_8186] / (10^18 * _8128) + (mem[_8186] / 2) / mem[_8186] != Mask(112, 0, _7814):
                                        revert with 0, 'math-not-safe'
                                    if (Mask(112, 0, _7814) * (10^18 * _8128) + (mem[_8186] / 2) / mem[_8186]) + 5 * 10^17 < Mask(112, 0, _7814) * (10^18 * _8128) + (mem[_8186] / 2) / mem[_8186]:
                                        revert with 0, 'math-not-safe'
                                    _8593 = mem[64]
                                    mem[64] = mem[64] + 352
                                    mem[_8593] = 0
                                    mem[_8593 + 32] = 0
                                    mem[_8593 + 64] = address(_7690)
                                    mem[_8593 + 96] = Mask(112, 0, _7762)
                                    mem[_8593 + 128] = Mask(112, 0, _7814)
                                    mem[_8593 + 160] = (Mask(112, 0, _7762) * (10^18 * _8128) + (_8206 / 2) / _8206) + 5 * 10^17 / 10^18
                                    mem[_8593 + 192] = (Mask(112, 0, _7814) * (10^18 * _8128) + (_8206 / 2) / _8206) + 5 * 10^17 / 10^18
                                    mem[_8593 + 224] = 0
                                    mem[_8593 + 256] = 0
                                    mem[_8593 + 288] = _8128
                                    mem[_8593 + 320] = _8206
                                    require idx < mem[_3802]
                                    mem[(32 * idx) + _3802 + 32] = _8593
                                    require idx < mem[96]
                                    require idx < mem[_3802]
                                    mem[_8593] = mem[mem[(32 * idx) + 128] + 12 len 20]
                                    require idx < mem[96]
                                    require idx < mem[_3802]
                                    mem[_8593 + 32] = mem[mem[(32 * idx) + 128] + 44 len 20]
                                    require idx < mem[96]
                                    if mem[mem[(32 * idx) + 128] + 12 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                                        require idx < mem[_3802]
                                        mem[_8593 + 224] = eth.balance(arg1)
                                        require idx < mem[96]
                                        if mem[mem[(32 * idx) + 128] + 44 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                                            require idx < mem[_3802]
                                            mem[_8593 + 256] = eth.balance(arg1)
                                        else:
                                            mem[mem[64] + 4] = arg1
                                            require ext_code.size(0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7)
                                            staticcall 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args address(arg1)
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _10389 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require idx < mem[_3802]
                                            mem[_8593 + 256] = mem[_10389]
                                    else:
                                        mem[mem[64] + 4] = arg1
                                        require ext_code.size(address(_7601))
                                        staticcall address(_7601).0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(arg1)
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _9795 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require idx < mem[_3802]
                                        mem[_8593 + 224] = mem[_9795]
                                        require idx < mem[96]
                                        if mem[mem[(32 * idx) + 128] + 44 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                                            require idx < mem[_3802]
                                            mem[_8593 + 256] = eth.balance(arg1)
                                        else:
                                            mem[mem[64] + 4] = arg1
                                            require ext_code.size(0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7)
                                            staticcall 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args address(arg1)
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _11038 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require idx < mem[_3802]
                                            mem[_8593 + 256] = mem[_11038]
                        else:
                            _8096 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _8129 = mem[_8096]
                            require ext_code.size(address(_7690))
                            staticcall address(_7690).0x18160ddd with:
                                    gas gas_remaining wei
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _8187 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _8207 = mem[_8187]
                            if 10^18 * _8129 / 10^18 != _8129:
                                revert with 0, 'math-not-safe'
                            if (10^18 * _8129) + (mem[_8187] / 2) < 10^18 * _8129:
                                revert with 0, 'math-not-safe'
                            require mem[_8187]
                            if not (10^18 * _8129) + (mem[_8187] / 2) / mem[_8187]:
                                if not (10^18 * _8129) + (mem[_8187] / 2) / mem[_8187]:
                                    _8447 = mem[64]
                                    mem[64] = mem[64] + 352
                                    mem[_8447] = 0
                                    mem[_8447 + 32] = 0
                                    mem[_8447 + 64] = address(_7690)
                                    mem[_8447 + 96] = Mask(112, 0, _7814)
                                    mem[_8447 + 128] = Mask(112, 0, _7762)
                                    mem[_8447 + 160] = 0
                                    mem[_8447 + 192] = 0
                                    mem[_8447 + 224] = 0
                                    mem[_8447 + 256] = 0
                                    mem[_8447 + 288] = _8129
                                    mem[_8447 + 320] = _8207
                                    require idx < mem[_3802]
                                    mem[(32 * idx) + _3802 + 32] = _8447
                                    require idx < mem[96]
                                    require idx < mem[_3802]
                                    mem[_8447] = mem[mem[(32 * idx) + 128] + 12 len 20]
                                    require idx < mem[96]
                                    require idx < mem[_3802]
                                    mem[_8447 + 32] = mem[mem[(32 * idx) + 128] + 44 len 20]
                                    require idx < mem[96]
                                    if mem[mem[(32 * idx) + 128] + 12 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                                        require idx < mem[_3802]
                                        mem[_8447 + 224] = eth.balance(arg1)
                                        require idx < mem[96]
                                        if mem[mem[(32 * idx) + 128] + 44 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                                            require idx < mem[_3802]
                                            mem[_8447 + 256] = eth.balance(arg1)
                                        else:
                                            mem[mem[64] + 4] = arg1
                                            require ext_code.size(0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7)
                                            staticcall 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args address(arg1)
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _9990 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require idx < mem[_3802]
                                            mem[_8447 + 256] = mem[_9990]
                                    else:
                                        mem[mem[64] + 4] = arg1
                                        require ext_code.size(address(_7601))
                                        staticcall address(_7601).0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(arg1)
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _9453 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require idx < mem[_3802]
                                        mem[_8447 + 224] = mem[_9453]
                                        require idx < mem[96]
                                        if mem[mem[(32 * idx) + 128] + 44 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                                            require idx < mem[_3802]
                                            mem[_8447 + 256] = eth.balance(arg1)
                                        else:
                                            mem[mem[64] + 4] = arg1
                                            require ext_code.size(0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7)
                                            staticcall 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args address(arg1)
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _10721 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require idx < mem[_3802]
                                            mem[_8447 + 256] = mem[_10721]
                                else:
                                    require (10^18 * _8129) + (mem[_8187] / 2) / mem[_8187]
                                    if Mask(112, 0, _7762) * (10^18 * _8129) + (mem[_8187] / 2) / mem[_8187] / (10^18 * _8129) + (mem[_8187] / 2) / mem[_8187] != Mask(112, 0, _7762):
                                        revert with 0, 'math-not-safe'
                                    if (Mask(112, 0, _7762) * (10^18 * _8129) + (mem[_8187] / 2) / mem[_8187]) + 5 * 10^17 < Mask(112, 0, _7762) * (10^18 * _8129) + (mem[_8187] / 2) / mem[_8187]:
                                        revert with 0, 'math-not-safe'
                                    _8511 = mem[64]
                                    mem[64] = mem[64] + 352
                                    mem[_8511] = 0
                                    mem[_8511 + 32] = 0
                                    mem[_8511 + 64] = address(_7690)
                                    mem[_8511 + 96] = Mask(112, 0, _7814)
                                    mem[_8511 + 128] = Mask(112, 0, _7762)
                                    mem[_8511 + 160] = 0
                                    mem[_8511 + 192] = (Mask(112, 0, _7762) * (10^18 * _8129) + (_8207 / 2) / _8207) + 5 * 10^17 / 10^18
                                    mem[_8511 + 224] = 0
                                    mem[_8511 + 256] = 0
                                    mem[_8511 + 288] = _8129
                                    mem[_8511 + 320] = _8207
                                    require idx < mem[_3802]
                                    mem[(32 * idx) + _3802 + 32] = _8511
                                    require idx < mem[96]
                                    require idx < mem[_3802]
                                    mem[_8511] = mem[mem[(32 * idx) + 128] + 12 len 20]
                                    require idx < mem[96]
                                    require idx < mem[_3802]
                                    mem[_8511 + 32] = mem[mem[(32 * idx) + 128] + 44 len 20]
                                    require idx < mem[96]
                                    if mem[mem[(32 * idx) + 128] + 12 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                                        require idx < mem[_3802]
                                        mem[_8511 + 224] = eth.balance(arg1)
                                        require idx < mem[96]
                                        if mem[mem[(32 * idx) + 128] + 44 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                                            require idx < mem[_3802]
                                            mem[_8511 + 256] = eth.balance(arg1)
                                        else:
                                            mem[mem[64] + 4] = arg1
                                            require ext_code.size(0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7)
                                            staticcall 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args address(arg1)
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _10182 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require idx < mem[_3802]
                                            mem[_8511 + 256] = mem[_10182]
                                    else:
                                        mem[mem[64] + 4] = arg1
                                        require ext_code.size(address(_7601))
                                        staticcall address(_7601).0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(arg1)
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _9614 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require idx < mem[_3802]
                                        mem[_8511 + 224] = mem[_9614]
                                        require idx < mem[96]
                                        if mem[mem[(32 * idx) + 128] + 44 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                                            require idx < mem[_3802]
                                            mem[_8511 + 256] = eth.balance(arg1)
                                        else:
                                            mem[mem[64] + 4] = arg1
                                            require ext_code.size(0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7)
                                            staticcall 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args address(arg1)
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _10890 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require idx < mem[_3802]
                                            mem[_8511 + 256] = mem[_10890]
                            else:
                                require (10^18 * _8129) + (mem[_8187] / 2) / mem[_8187]
                                if Mask(112, 0, _7814) * (10^18 * _8129) + (mem[_8187] / 2) / mem[_8187] / (10^18 * _8129) + (mem[_8187] / 2) / mem[_8187] != Mask(112, 0, _7814):
                                    revert with 0, 'math-not-safe'
                                if (Mask(112, 0, _7814) * (10^18 * _8129) + (mem[_8187] / 2) / mem[_8187]) + 5 * 10^17 < Mask(112, 0, _7814) * (10^18 * _8129) + (mem[_8187] / 2) / mem[_8187]:
                                    revert with 0, 'math-not-safe'
                                if not (10^18 * _8129) + (mem[_8187] / 2) / mem[_8187]:
                                    _8513 = mem[64]
                                    mem[64] = mem[64] + 352
                                    mem[_8513] = 0
                                    mem[_8513 + 32] = 0
                                    mem[_8513 + 64] = address(_7690)
                                    mem[_8513 + 96] = Mask(112, 0, _7814)
                                    mem[_8513 + 128] = Mask(112, 0, _7762)
                                    mem[_8513 + 160] = (Mask(112, 0, _7814) * (10^18 * _8129) + (_8207 / 2) / _8207) + 5 * 10^17 / 10^18
                                    mem[_8513 + 192] = 0
                                    mem[_8513 + 224] = 0
                                    mem[_8513 + 256] = 0
                                    mem[_8513 + 288] = _8129
                                    mem[_8513 + 320] = _8207
                                    require idx < mem[_3802]
                                    mem[(32 * idx) + _3802 + 32] = _8513
                                    require idx < mem[96]
                                    require idx < mem[_3802]
                                    mem[_8513] = mem[mem[(32 * idx) + 128] + 12 len 20]
                                    require idx < mem[96]
                                    require idx < mem[_3802]
                                    mem[_8513 + 32] = mem[mem[(32 * idx) + 128] + 44 len 20]
                                    require idx < mem[96]
                                    if mem[mem[(32 * idx) + 128] + 12 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                                        require idx < mem[_3802]
                                        mem[_8513 + 224] = eth.balance(arg1)
                                        require idx < mem[96]
                                        if mem[mem[(32 * idx) + 128] + 44 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                                            require idx < mem[_3802]
                                            mem[_8513 + 256] = eth.balance(arg1)
                                        else:
                                            mem[mem[64] + 4] = arg1
                                            require ext_code.size(0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7)
                                            staticcall 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args address(arg1)
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _10183 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require idx < mem[_3802]
                                            mem[_8513 + 256] = mem[_10183]
                                    else:
                                        mem[mem[64] + 4] = arg1
                                        require ext_code.size(address(_7601))
                                        staticcall address(_7601).0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(arg1)
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _9616 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require idx < mem[_3802]
                                        mem[_8513 + 224] = mem[_9616]
                                        require idx < mem[96]
                                        if mem[mem[(32 * idx) + 128] + 44 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                                            require idx < mem[_3802]
                                            mem[_8513 + 256] = eth.balance(arg1)
                                        else:
                                            mem[mem[64] + 4] = arg1
                                            require ext_code.size(0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7)
                                            staticcall 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args address(arg1)
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _10891 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require idx < mem[_3802]
                                            mem[_8513 + 256] = mem[_10891]
                                else:
                                    require (10^18 * _8129) + (mem[_8187] / 2) / mem[_8187]
                                    if Mask(112, 0, _7762) * (10^18 * _8129) + (mem[_8187] / 2) / mem[_8187] / (10^18 * _8129) + (mem[_8187] / 2) / mem[_8187] != Mask(112, 0, _7762):
                                        revert with 0, 'math-not-safe'
                                    if (Mask(112, 0, _7762) * (10^18 * _8129) + (mem[_8187] / 2) / mem[_8187]) + 5 * 10^17 < Mask(112, 0, _7762) * (10^18 * _8129) + (mem[_8187] / 2) / mem[_8187]:
                                        revert with 0, 'math-not-safe'
                                    _8599 = mem[64]
                                    mem[64] = mem[64] + 352
                                    mem[_8599] = 0
                                    mem[_8599 + 32] = 0
                                    mem[_8599 + 64] = address(_7690)
                                    mem[_8599 + 96] = Mask(112, 0, _7814)
                                    mem[_8599 + 128] = Mask(112, 0, _7762)
                                    mem[_8599 + 160] = (Mask(112, 0, _7814) * (10^18 * _8129) + (_8207 / 2) / _8207) + 5 * 10^17 / 10^18
                                    mem[_8599 + 192] = (Mask(112, 0, _7762) * (10^18 * _8129) + (_8207 / 2) / _8207) + 5 * 10^17 / 10^18
                                    mem[_8599 + 224] = 0
                                    mem[_8599 + 256] = 0
                                    mem[_8599 + 288] = _8129
                                    mem[_8599 + 320] = _8207
                                    require idx < mem[_3802]
                                    mem[(32 * idx) + _3802 + 32] = _8599
                                    require idx < mem[96]
                                    require idx < mem[_3802]
                                    mem[_8599] = mem[mem[(32 * idx) + 128] + 12 len 20]
                                    require idx < mem[96]
                                    require idx < mem[_3802]
                                    mem[_8599 + 32] = mem[mem[(32 * idx) + 128] + 44 len 20]
                                    require idx < mem[96]
                                    if mem[mem[(32 * idx) + 128] + 12 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                                        require idx < mem[_3802]
                                        mem[_8599 + 224] = eth.balance(arg1)
                                        require idx < mem[96]
                                        if mem[mem[(32 * idx) + 128] + 44 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                                            require idx < mem[_3802]
                                            mem[_8599 + 256] = eth.balance(arg1)
                                        else:
                                            mem[mem[64] + 4] = arg1
                                            require ext_code.size(0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7)
                                            staticcall 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args address(arg1)
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _10398 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require idx < mem[_3802]
                                            mem[_8599 + 256] = mem[_10398]
                                    else:
                                        mem[mem[64] + 4] = arg1
                                        require ext_code.size(address(_7601))
                                        staticcall address(_7601).0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(arg1)
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _9804 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require idx < mem[_3802]
                                        mem[_8599 + 224] = mem[_9804]
                                        require idx < mem[96]
                                        if mem[mem[(32 * idx) + 128] + 44 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                                            require idx < mem[_3802]
                                            mem[_8599 + 256] = eth.balance(arg1)
                                        else:
                                            mem[mem[64] + 4] = arg1
                                            require ext_code.size(0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7)
                                            staticcall 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args address(arg1)
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _11042 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require idx < mem[_3802]
                                            mem[_8599 + 256] = mem[_11042]
                else:
                    _7640 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _7645 = mem[_7640]
                    require mem[_7640] == mem[_7640 + 12 len 20]
                    mem[mem[64] + 4] = address(_7601)
                    mem[mem[64] + 36] = address(_7605)
                    require ext_code.size(address(_7645))
                    staticcall address(_7645).getPair(address arg1, address arg2) with:
                            gas gas_remaining wei
                           args address(_7601), address(_7605)
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _7681 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _7686 = mem[_7681]
                    require mem[_7681] == mem[_7681 + 12 len 20]
                    if not mem[_7681 + 12 len 20]:
                        require idx < mem[96]
                        require idx < mem[_3802]
                        mem[mem[(32 * idx) + _3802 + 32]] = mem[mem[(32 * idx) + 128] + 12 len 20]
                        require idx < mem[96]
                        require idx < mem[_3802]
                        mem[mem[(32 * idx) + _3802 + 32] + 32] = mem[mem[(32 * idx) + 128] + 44 len 20]
                        require idx < mem[96]
                        if mem[mem[(32 * idx) + 128] + 12 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                            require idx < mem[_3802]
                            mem[mem[(32 * idx) + _3802 + 32] + 224] = eth.balance(arg1)
                            require idx < mem[96]
                            if mem[mem[(32 * idx) + 128] + 44 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                                require idx < mem[_3802]
                                mem[mem[(32 * idx) + _3802 + 32] + 256] = eth.balance(arg1)
                            else:
                                mem[mem[64] + 4] = arg1
                                require ext_code.size(address(_7605))
                                staticcall address(_7605).0x70a08231 with:
                                        gas gas_remaining wei
                                       args address(arg1)
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _7952 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                require idx < mem[_3802]
                                mem[mem[(32 * idx) + _3802 + 32] + 256] = mem[_7952]
                        else:
                            mem[mem[64] + 4] = arg1
                            require ext_code.size(address(_7601))
                            staticcall address(_7601).0x70a08231 with:
                                    gas gas_remaining wei
                                   args address(arg1)
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _7854 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            require idx < mem[_3802]
                            mem[mem[(32 * idx) + _3802 + 32] + 224] = mem[_7854]
                            require idx < mem[96]
                            if mem[mem[(32 * idx) + 128] + 44 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                                require idx < mem[_3802]
                                mem[mem[(32 * idx) + _3802 + 32] + 256] = eth.balance(arg1)
                            else:
                                mem[mem[64] + 4] = arg1
                                require ext_code.size(address(_7605))
                                staticcall address(_7605).0x70a08231 with:
                                        gas gas_remaining wei
                                       args address(arg1)
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _8071 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                require idx < mem[_3802]
                                mem[mem[(32 * idx) + _3802 + 32] + 256] = mem[_8071]
                    else:
                        require ext_code.size(mem[_7681 + 12 len 20])
                        staticcall mem[_7681 + 12 len 20].getReserves() with:
                                gas gas_remaining wei
                        mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _7727 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 96
                        _7756 = mem[_7727]
                        require mem[_7727] == mem[_7727 + 18 len 14]
                        _7796 = mem[_7727 + 32]
                        require mem[_7727 + 32] == mem[_7727 + 50 len 14]
                        require mem[_7727 + 64] == mem[_7727 + 92 len 4]
                        require ext_code.size(address(_7686))
                        staticcall address(_7686).token0() with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _7889 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        require mem[_7889] == mem[_7889 + 12 len 20]
                        mem[mem[64] + 4] = arg1
                        require ext_code.size(address(_7686))
                        staticcall address(_7686).0x70a08231 with:
                                gas gas_remaining wei
                               args address(arg1)
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        if mem[_7889 + 12 len 20] == address(_7601):
                            _8082 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _8111 = mem[_8082]
                            require ext_code.size(address(_7686))
                            staticcall address(_7686).0x18160ddd with:
                                    gas gas_remaining wei
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _8175 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _8196 = mem[_8175]
                            if 10^18 * _8111 / 10^18 != _8111:
                                revert with 0, 'math-not-safe'
                            if (10^18 * _8111) + (mem[_8175] / 2) < 10^18 * _8111:
                                revert with 0, 'math-not-safe'
                            require mem[_8175]
                            if not (10^18 * _8111) + (mem[_8175] / 2) / mem[_8175]:
                                if not (10^18 * _8111) + (mem[_8175] / 2) / mem[_8175]:
                                    _8429 = mem[64]
                                    mem[64] = mem[64] + 352
                                    mem[_8429] = 0
                                    mem[_8429 + 32] = 0
                                    mem[_8429 + 64] = address(_7686)
                                    mem[_8429 + 96] = Mask(112, 0, _7756)
                                    mem[_8429 + 128] = Mask(112, 0, _7796)
                                    mem[_8429 + 160] = 0
                                    mem[_8429 + 192] = 0
                                    mem[_8429 + 224] = 0
                                    mem[_8429 + 256] = 0
                                    mem[_8429 + 288] = _8111
                                    mem[_8429 + 320] = _8196
                                    require idx < mem[_3802]
                                    mem[(32 * idx) + _3802 + 32] = _8429
                                    require idx < mem[96]
                                    require idx < mem[_3802]
                                    mem[_8429] = mem[mem[(32 * idx) + 128] + 12 len 20]
                                    require idx < mem[96]
                                    require idx < mem[_3802]
                                    mem[_8429 + 32] = mem[mem[(32 * idx) + 128] + 44 len 20]
                                    require idx < mem[96]
                                    if mem[mem[(32 * idx) + 128] + 12 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                                        require idx < mem[_3802]
                                        mem[_8429 + 224] = eth.balance(arg1)
                                        require idx < mem[96]
                                        if mem[mem[(32 * idx) + 128] + 44 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                                            require idx < mem[_3802]
                                            mem[_8429 + 256] = eth.balance(arg1)
                                        else:
                                            mem[mem[64] + 4] = arg1
                                            require ext_code.size(address(_7605))
                                            staticcall address(_7605).0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args address(arg1)
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _9893 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require idx < mem[_3802]
                                            mem[_8429 + 256] = mem[_9893]
                                    else:
                                        mem[mem[64] + 4] = arg1
                                        require ext_code.size(address(_7601))
                                        staticcall address(_7601).0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(arg1)
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _9362 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require idx < mem[_3802]
                                        mem[_8429 + 224] = mem[_9362]
                                        require idx < mem[96]
                                        if mem[mem[(32 * idx) + 128] + 44 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                                            require idx < mem[_3802]
                                            mem[_8429 + 256] = eth.balance(arg1)
                                        else:
                                            mem[mem[64] + 4] = arg1
                                            require ext_code.size(address(_7605))
                                            staticcall address(_7605).0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args address(arg1)
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _10617 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require idx < mem[_3802]
                                            mem[_8429 + 256] = mem[_10617]
                                else:
                                    require (10^18 * _8111) + (mem[_8175] / 2) / mem[_8175]
                                    if Mask(112, 0, _7796) * (10^18 * _8111) + (mem[_8175] / 2) / mem[_8175] / (10^18 * _8111) + (mem[_8175] / 2) / mem[_8175] != Mask(112, 0, _7796):
                                        revert with 0, 'math-not-safe'
                                    if (Mask(112, 0, _7796) * (10^18 * _8111) + (mem[_8175] / 2) / mem[_8175]) + 5 * 10^17 < Mask(112, 0, _7796) * (10^18 * _8111) + (mem[_8175] / 2) / mem[_8175]:
                                        revert with 0, 'math-not-safe'
                                    _8474 = mem[64]
                                    mem[64] = mem[64] + 352
                                    mem[_8474] = 0
                                    mem[_8474 + 32] = 0
                                    mem[_8474 + 64] = address(_7686)
                                    mem[_8474 + 96] = Mask(112, 0, _7756)
                                    mem[_8474 + 128] = Mask(112, 0, _7796)
                                    mem[_8474 + 160] = 0
                                    mem[_8474 + 192] = (Mask(112, 0, _7796) * (10^18 * _8111) + (_8196 / 2) / _8196) + 5 * 10^17 / 10^18
                                    mem[_8474 + 224] = 0
                                    mem[_8474 + 256] = 0
                                    mem[_8474 + 288] = _8111
                                    mem[_8474 + 320] = _8196
                                    require idx < mem[_3802]
                                    mem[(32 * idx) + _3802 + 32] = _8474
                                    require idx < mem[96]
                                    require idx < mem[_3802]
                                    mem[_8474] = mem[mem[(32 * idx) + 128] + 12 len 20]
                                    require idx < mem[96]
                                    require idx < mem[_3802]
                                    mem[_8474 + 32] = mem[mem[(32 * idx) + 128] + 44 len 20]
                                    require idx < mem[96]
                                    if mem[mem[(32 * idx) + 128] + 12 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                                        require idx < mem[_3802]
                                        mem[_8474 + 224] = eth.balance(arg1)
                                        require idx < mem[96]
                                        if mem[mem[(32 * idx) + 128] + 44 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                                            require idx < mem[_3802]
                                            mem[_8474 + 256] = eth.balance(arg1)
                                        else:
                                            mem[mem[64] + 4] = arg1
                                            require ext_code.size(address(_7605))
                                            staticcall address(_7605).0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args address(arg1)
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _10086 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require idx < mem[_3802]
                                            mem[_8474 + 256] = mem[_10086]
                                    else:
                                        mem[mem[64] + 4] = arg1
                                        require ext_code.size(address(_7601))
                                        staticcall address(_7601).0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(arg1)
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _9532 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require idx < mem[_3802]
                                        mem[_8474 + 224] = mem[_9532]
                                        require idx < mem[96]
                                        if mem[mem[(32 * idx) + 128] + 44 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                                            require idx < mem[_3802]
                                            mem[_8474 + 256] = eth.balance(arg1)
                                        else:
                                            mem[mem[64] + 4] = arg1
                                            require ext_code.size(address(_7605))
                                            staticcall address(_7605).0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args address(arg1)
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _10806 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require idx < mem[_3802]
                                            mem[_8474 + 256] = mem[_10806]
                            else:
                                require (10^18 * _8111) + (mem[_8175] / 2) / mem[_8175]
                                if Mask(112, 0, _7756) * (10^18 * _8111) + (mem[_8175] / 2) / mem[_8175] / (10^18 * _8111) + (mem[_8175] / 2) / mem[_8175] != Mask(112, 0, _7756):
                                    revert with 0, 'math-not-safe'
                                if (Mask(112, 0, _7756) * (10^18 * _8111) + (mem[_8175] / 2) / mem[_8175]) + 5 * 10^17 < Mask(112, 0, _7756) * (10^18 * _8111) + (mem[_8175] / 2) / mem[_8175]:
                                    revert with 0, 'math-not-safe'
                                if not (10^18 * _8111) + (mem[_8175] / 2) / mem[_8175]:
                                    _8476 = mem[64]
                                    mem[64] = mem[64] + 352
                                    mem[_8476] = 0
                                    mem[_8476 + 32] = 0
                                    mem[_8476 + 64] = address(_7686)
                                    mem[_8476 + 96] = Mask(112, 0, _7756)
                                    mem[_8476 + 128] = Mask(112, 0, _7796)
                                    mem[_8476 + 160] = (Mask(112, 0, _7756) * (10^18 * _8111) + (_8196 / 2) / _8196) + 5 * 10^17 / 10^18
                                    mem[_8476 + 192] = 0
                                    mem[_8476 + 224] = 0
                                    mem[_8476 + 256] = 0
                                    mem[_8476 + 288] = _8111
                                    mem[_8476 + 320] = _8196
                                    require idx < mem[_3802]
                                    mem[(32 * idx) + _3802 + 32] = _8476
                                    require idx < mem[96]
                                    require idx < mem[_3802]
                                    mem[_8476] = mem[mem[(32 * idx) + 128] + 12 len 20]
                                    require idx < mem[96]
                                    require idx < mem[_3802]
                                    mem[_8476 + 32] = mem[mem[(32 * idx) + 128] + 44 len 20]
                                    require idx < mem[96]
                                    if mem[mem[(32 * idx) + 128] + 12 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                                        require idx < mem[_3802]
                                        mem[_8476 + 224] = eth.balance(arg1)
                                        require idx < mem[96]
                                        if mem[mem[(32 * idx) + 128] + 44 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                                            require idx < mem[_3802]
                                            mem[_8476 + 256] = eth.balance(arg1)
                                        else:
                                            mem[mem[64] + 4] = arg1
                                            require ext_code.size(address(_7605))
                                            staticcall address(_7605).0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args address(arg1)
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _10087 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require idx < mem[_3802]
                                            mem[_8476 + 256] = mem[_10087]
                                    else:
                                        mem[mem[64] + 4] = arg1
                                        require ext_code.size(address(_7601))
                                        staticcall address(_7601).0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(arg1)
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _9534 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require idx < mem[_3802]
                                        mem[_8476 + 224] = mem[_9534]
                                        require idx < mem[96]
                                        if mem[mem[(32 * idx) + 128] + 44 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                                            require idx < mem[_3802]
                                            mem[_8476 + 256] = eth.balance(arg1)
                                        else:
                                            mem[mem[64] + 4] = arg1
                                            require ext_code.size(address(_7605))
                                            staticcall address(_7605).0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args address(arg1)
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _10807 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require idx < mem[_3802]
                                            mem[_8476 + 256] = mem[_10807]
                                else:
                                    require (10^18 * _8111) + (mem[_8175] / 2) / mem[_8175]
                                    if Mask(112, 0, _7796) * (10^18 * _8111) + (mem[_8175] / 2) / mem[_8175] / (10^18 * _8111) + (mem[_8175] / 2) / mem[_8175] != Mask(112, 0, _7796):
                                        revert with 0, 'math-not-safe'
                                    if (Mask(112, 0, _7796) * (10^18 * _8111) + (mem[_8175] / 2) / mem[_8175]) + 5 * 10^17 < Mask(112, 0, _7796) * (10^18 * _8111) + (mem[_8175] / 2) / mem[_8175]:
                                        revert with 0, 'math-not-safe'
                                    _8555 = mem[64]
                                    mem[64] = mem[64] + 352
                                    mem[_8555] = 0
                                    mem[_8555 + 32] = 0
                                    mem[_8555 + 64] = address(_7686)
                                    mem[_8555 + 96] = Mask(112, 0, _7756)
                                    mem[_8555 + 128] = Mask(112, 0, _7796)
                                    mem[_8555 + 160] = (Mask(112, 0, _7756) * (10^18 * _8111) + (_8196 / 2) / _8196) + 5 * 10^17 / 10^18
                                    mem[_8555 + 192] = (Mask(112, 0, _7796) * (10^18 * _8111) + (_8196 / 2) / _8196) + 5 * 10^17 / 10^18
                                    mem[_8555 + 224] = 0
                                    mem[_8555 + 256] = 0
                                    mem[_8555 + 288] = _8111
                                    mem[_8555 + 320] = _8196
                                    require idx < mem[_3802]
                                    mem[(32 * idx) + _3802 + 32] = _8555
                                    require idx < mem[96]
                                    require idx < mem[_3802]
                                    mem[_8555] = mem[mem[(32 * idx) + 128] + 12 len 20]
                                    require idx < mem[96]
                                    require idx < mem[_3802]
                                    mem[_8555 + 32] = mem[mem[(32 * idx) + 128] + 44 len 20]
                                    require idx < mem[96]
                                    if mem[mem[(32 * idx) + 128] + 12 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                                        require idx < mem[_3802]
                                        mem[_8555 + 224] = eth.balance(arg1)
                                        require idx < mem[96]
                                        if mem[mem[(32 * idx) + 128] + 44 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                                            require idx < mem[_3802]
                                            mem[_8555 + 256] = eth.balance(arg1)
                                        else:
                                            mem[mem[64] + 4] = arg1
                                            require ext_code.size(address(_7605))
                                            staticcall address(_7605).0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args address(arg1)
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _10289 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require idx < mem[_3802]
                                            mem[_8555 + 256] = mem[_10289]
                                    else:
                                        mem[mem[64] + 4] = arg1
                                        require ext_code.size(address(_7601))
                                        staticcall address(_7601).0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(arg1)
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _9711 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require idx < mem[_3802]
                                        mem[_8555 + 224] = mem[_9711]
                                        require idx < mem[96]
                                        if mem[mem[(32 * idx) + 128] + 44 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                                            require idx < mem[_3802]
                                            mem[_8555 + 256] = eth.balance(arg1)
                                        else:
                                            mem[mem[64] + 4] = arg1
                                            require ext_code.size(address(_7605))
                                            staticcall address(_7605).0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args address(arg1)
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _10966 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require idx < mem[_3802]
                                            mem[_8555 + 256] = mem[_10966]
                        else:
                            _8083 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _8112 = mem[_8083]
                            require ext_code.size(address(_7686))
                            staticcall address(_7686).0x18160ddd with:
                                    gas gas_remaining wei
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _8176 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _8197 = mem[_8176]
                            if 10^18 * _8112 / 10^18 != _8112:
                                revert with 0, 'math-not-safe'
                            if (10^18 * _8112) + (mem[_8176] / 2) < 10^18 * _8112:
                                revert with 0, 'math-not-safe'
                            require mem[_8176]
                            if not (10^18 * _8112) + (mem[_8176] / 2) / mem[_8176]:
                                if not (10^18 * _8112) + (mem[_8176] / 2) / mem[_8176]:
                                    _8431 = mem[64]
                                    mem[64] = mem[64] + 352
                                    mem[_8431] = 0
                                    mem[_8431 + 32] = 0
                                    mem[_8431 + 64] = address(_7686)
                                    mem[_8431 + 96] = Mask(112, 0, _7796)
                                    mem[_8431 + 128] = Mask(112, 0, _7756)
                                    mem[_8431 + 160] = 0
                                    mem[_8431 + 192] = 0
                                    mem[_8431 + 224] = 0
                                    mem[_8431 + 256] = 0
                                    mem[_8431 + 288] = _8112
                                    mem[_8431 + 320] = _8197
                                    require idx < mem[_3802]
                                    mem[(32 * idx) + _3802 + 32] = _8431
                                    require idx < mem[96]
                                    require idx < mem[_3802]
                                    mem[_8431] = mem[mem[(32 * idx) + 128] + 12 len 20]
                                    require idx < mem[96]
                                    require idx < mem[_3802]
                                    mem[_8431 + 32] = mem[mem[(32 * idx) + 128] + 44 len 20]
                                    require idx < mem[96]
                                    if mem[mem[(32 * idx) + 128] + 12 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                                        require idx < mem[_3802]
                                        mem[_8431 + 224] = eth.balance(arg1)
                                        require idx < mem[96]
                                        if mem[mem[(32 * idx) + 128] + 44 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                                            require idx < mem[_3802]
                                            mem[_8431 + 256] = eth.balance(arg1)
                                        else:
                                            mem[mem[64] + 4] = arg1
                                            require ext_code.size(address(_7605))
                                            staticcall address(_7605).0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args address(arg1)
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _9902 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require idx < mem[_3802]
                                            mem[_8431 + 256] = mem[_9902]
                                    else:
                                        mem[mem[64] + 4] = arg1
                                        require ext_code.size(address(_7601))
                                        staticcall address(_7601).0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(arg1)
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _9369 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require idx < mem[_3802]
                                        mem[_8431 + 224] = mem[_9369]
                                        require idx < mem[96]
                                        if mem[mem[(32 * idx) + 128] + 44 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                                            require idx < mem[_3802]
                                            mem[_8431 + 256] = eth.balance(arg1)
                                        else:
                                            mem[mem[64] + 4] = arg1
                                            require ext_code.size(address(_7605))
                                            staticcall address(_7605).0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args address(arg1)
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _10625 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require idx < mem[_3802]
                                            mem[_8431 + 256] = mem[_10625]
                                else:
                                    require (10^18 * _8112) + (mem[_8176] / 2) / mem[_8176]
                                    if Mask(112, 0, _7756) * (10^18 * _8112) + (mem[_8176] / 2) / mem[_8176] / (10^18 * _8112) + (mem[_8176] / 2) / mem[_8176] != Mask(112, 0, _7756):
                                        revert with 0, 'math-not-safe'
                                    if (Mask(112, 0, _7756) * (10^18 * _8112) + (mem[_8176] / 2) / mem[_8176]) + 5 * 10^17 < Mask(112, 0, _7756) * (10^18 * _8112) + (mem[_8176] / 2) / mem[_8176]:
                                        revert with 0, 'math-not-safe'
                                    _8479 = mem[64]
                                    mem[64] = mem[64] + 352
                                    mem[_8479] = 0
                                    mem[_8479 + 32] = 0
                                    mem[_8479 + 64] = address(_7686)
                                    mem[_8479 + 96] = Mask(112, 0, _7796)
                                    mem[_8479 + 128] = Mask(112, 0, _7756)
                                    mem[_8479 + 160] = 0
                                    mem[_8479 + 192] = (Mask(112, 0, _7756) * (10^18 * _8112) + (_8197 / 2) / _8197) + 5 * 10^17 / 10^18
                                    mem[_8479 + 224] = 0
                                    mem[_8479 + 256] = 0
                                    mem[_8479 + 288] = _8112
                                    mem[_8479 + 320] = _8197
                                    require idx < mem[_3802]
                                    mem[(32 * idx) + _3802 + 32] = _8479
                                    require idx < mem[96]
                                    require idx < mem[_3802]
                                    mem[_8479] = mem[mem[(32 * idx) + 128] + 12 len 20]
                                    require idx < mem[96]
                                    require idx < mem[_3802]
                                    mem[_8479 + 32] = mem[mem[(32 * idx) + 128] + 44 len 20]
                                    require idx < mem[96]
                                    if mem[mem[(32 * idx) + 128] + 12 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                                        require idx < mem[_3802]
                                        mem[_8479 + 224] = eth.balance(arg1)
                                        require idx < mem[96]
                                        if mem[mem[(32 * idx) + 128] + 44 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                                            require idx < mem[_3802]
                                            mem[_8479 + 256] = eth.balance(arg1)
                                        else:
                                            mem[mem[64] + 4] = arg1
                                            require ext_code.size(address(_7605))
                                            staticcall address(_7605).0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args address(arg1)
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _10094 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require idx < mem[_3802]
                                            mem[_8479 + 256] = mem[_10094]
                                    else:
                                        mem[mem[64] + 4] = arg1
                                        require ext_code.size(address(_7601))
                                        staticcall address(_7601).0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(arg1)
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _9540 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require idx < mem[_3802]
                                        mem[_8479 + 224] = mem[_9540]
                                        require idx < mem[96]
                                        if mem[mem[(32 * idx) + 128] + 44 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                                            require idx < mem[_3802]
                                            mem[_8479 + 256] = eth.balance(arg1)
                                        else:
                                            mem[mem[64] + 4] = arg1
                                            require ext_code.size(address(_7605))
                                            staticcall address(_7605).0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args address(arg1)
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _10812 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require idx < mem[_3802]
                                            mem[_8479 + 256] = mem[_10812]
                            else:
                                require (10^18 * _8112) + (mem[_8176] / 2) / mem[_8176]
                                if Mask(112, 0, _7796) * (10^18 * _8112) + (mem[_8176] / 2) / mem[_8176] / (10^18 * _8112) + (mem[_8176] / 2) / mem[_8176] != Mask(112, 0, _7796):
                                    revert with 0, 'math-not-safe'
                                if (Mask(112, 0, _7796) * (10^18 * _8112) + (mem[_8176] / 2) / mem[_8176]) + 5 * 10^17 < Mask(112, 0, _7796) * (10^18 * _8112) + (mem[_8176] / 2) / mem[_8176]:
                                    revert with 0, 'math-not-safe'
                                if not (10^18 * _8112) + (mem[_8176] / 2) / mem[_8176]:
                                    _8481 = mem[64]
                                    mem[64] = mem[64] + 352
                                    mem[_8481] = 0
                                    mem[_8481 + 32] = 0
                                    mem[_8481 + 64] = address(_7686)
                                    mem[_8481 + 96] = Mask(112, 0, _7796)
                                    mem[_8481 + 128] = Mask(112, 0, _7756)
                                    mem[_8481 + 160] = (Mask(112, 0, _7796) * (10^18 * _8112) + (_8197 / 2) / _8197) + 5 * 10^17 / 10^18
                                    mem[_8481 + 192] = 0
                                    mem[_8481 + 224] = 0
                                    mem[_8481 + 256] = 0
                                    mem[_8481 + 288] = _8112
                                    mem[_8481 + 320] = _8197
                                    require idx < mem[_3802]
                                    mem[(32 * idx) + _3802 + 32] = _8481
                                    require idx < mem[96]
                                    require idx < mem[_3802]
                                    mem[_8481] = mem[mem[(32 * idx) + 128] + 12 len 20]
                                    require idx < mem[96]
                                    require idx < mem[_3802]
                                    mem[_8481 + 32] = mem[mem[(32 * idx) + 128] + 44 len 20]
                                    require idx < mem[96]
                                    if mem[mem[(32 * idx) + 128] + 12 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                                        require idx < mem[_3802]
                                        mem[_8481 + 224] = eth.balance(arg1)
                                        require idx < mem[96]
                                        if mem[mem[(32 * idx) + 128] + 44 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                                            require idx < mem[_3802]
                                            mem[_8481 + 256] = eth.balance(arg1)
                                        else:
                                            mem[mem[64] + 4] = arg1
                                            require ext_code.size(address(_7605))
                                            staticcall address(_7605).0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args address(arg1)
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _10095 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require idx < mem[_3802]
                                            mem[_8481 + 256] = mem[_10095]
                                    else:
                                        mem[mem[64] + 4] = arg1
                                        require ext_code.size(address(_7601))
                                        staticcall address(_7601).0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(arg1)
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _9542 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require idx < mem[_3802]
                                        mem[_8481 + 224] = mem[_9542]
                                        require idx < mem[96]
                                        if mem[mem[(32 * idx) + 128] + 44 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                                            require idx < mem[_3802]
                                            mem[_8481 + 256] = eth.balance(arg1)
                                        else:
                                            mem[mem[64] + 4] = arg1
                                            require ext_code.size(address(_7605))
                                            staticcall address(_7605).0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args address(arg1)
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _10813 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require idx < mem[_3802]
                                            mem[_8481 + 256] = mem[_10813]
                                else:
                                    require (10^18 * _8112) + (mem[_8176] / 2) / mem[_8176]
                                    if Mask(112, 0, _7756) * (10^18 * _8112) + (mem[_8176] / 2) / mem[_8176] / (10^18 * _8112) + (mem[_8176] / 2) / mem[_8176] != Mask(112, 0, _7756):
                                        revert with 0, 'math-not-safe'
                                    if (Mask(112, 0, _7756) * (10^18 * _8112) + (mem[_8176] / 2) / mem[_8176]) + 5 * 10^17 < Mask(112, 0, _7756) * (10^18 * _8112) + (mem[_8176] / 2) / mem[_8176]:
                                        revert with 0, 'math-not-safe'
                                    _8561 = mem[64]
                                    mem[64] = mem[64] + 352
                                    mem[_8561] = 0
                                    mem[_8561 + 32] = 0
                                    mem[_8561 + 64] = address(_7686)
                                    mem[_8561 + 96] = Mask(112, 0, _7796)
                                    mem[_8561 + 128] = Mask(112, 0, _7756)
                                    mem[_8561 + 160] = (Mask(112, 0, _7796) * (10^18 * _8112) + (_8197 / 2) / _8197) + 5 * 10^17 / 10^18
                                    mem[_8561 + 192] = (Mask(112, 0, _7756) * (10^18 * _8112) + (_8197 / 2) / _8197) + 5 * 10^17 / 10^18
                                    mem[_8561 + 224] = 0
                                    mem[_8561 + 256] = 0
                                    mem[_8561 + 288] = _8112
                                    mem[_8561 + 320] = _8197
                                    require idx < mem[_3802]
                                    mem[(32 * idx) + _3802 + 32] = _8561
                                    require idx < mem[96]
                                    require idx < mem[_3802]
                                    mem[_8561] = mem[mem[(32 * idx) + 128] + 12 len 20]
                                    require idx < mem[96]
                                    require idx < mem[_3802]
                                    mem[_8561 + 32] = mem[mem[(32 * idx) + 128] + 44 len 20]
                                    require idx < mem[96]
                                    if mem[mem[(32 * idx) + 128] + 12 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                                        require idx < mem[_3802]
                                        mem[_8561 + 224] = eth.balance(arg1)
                                        require idx < mem[96]
                                        if mem[mem[(32 * idx) + 128] + 44 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                                            require idx < mem[_3802]
                                            mem[_8561 + 256] = eth.balance(arg1)
                                        else:
                                            mem[mem[64] + 4] = arg1
                                            require ext_code.size(address(_7605))
                                            staticcall address(_7605).0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args address(arg1)
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _10298 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require idx < mem[_3802]
                                            mem[_8561 + 256] = mem[_10298]
                                    else:
                                        mem[mem[64] + 4] = arg1
                                        require ext_code.size(address(_7601))
                                        staticcall address(_7601).0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(arg1)
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _9720 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require idx < mem[_3802]
                                        mem[_8561 + 224] = mem[_9720]
                                        require idx < mem[96]
                                        if mem[mem[(32 * idx) + 128] + 44 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                                            require idx < mem[_3802]
                                            mem[_8561 + 256] = eth.balance(arg1)
                                        else:
                                            mem[mem[64] + 4] = arg1
                                            require ext_code.size(address(_7605))
                                            staticcall address(_7605).0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args address(arg1)
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _10970 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require idx < mem[_3802]
                                            mem[_8561 + 256] = mem[_10970]
            idx = idx + 1
            continue 
        _7603 = mem[64]
        mem[mem[64]] = 32
        _7606 = mem[_3802]
        mem[mem[64] + 32] = mem[_3802]
        idx = 0
        s = mem[64] + 64
        t = _3802 + 32
        while idx < _7606:
            _11394 = mem[t]
            mem[s] = mem[mem[t] + 12 len 20]
            mem[s + 32] = mem[_11394 + 44 len 20]
            mem[s + 64] = mem[_11394 + 76 len 20]
            mem[s + 96] = mem[_11394 + 96]
            mem[s + 128] = mem[_11394 + 128]
            mem[s + 160] = mem[_11394 + 160]
            mem[s + 192] = mem[_11394 + 192]
            mem[s + 224] = mem[_11394 + 224]
            mem[s + 256] = mem[_11394 + 256]
            mem[s + 288] = mem[_11394 + 288]
            mem[s + 320] = mem[_11394 + 320]
            idx = idx + 1
            s = s + 352
            t = t + 32
            continue 
        return memory
          from mem[64]
           len _7603 + (352 * _7606) + -mem[64] + 64
    mem[64] = _3802 + (32 * _3801) + 384
    mem[_3802 + (32 * _3801) + 32] = 0
    mem[_3802 + (32 * _3801) + 64] = 0
    mem[_3802 + (32 * _3801) + 96] = 0
    mem[_3802 + (32 * _3801) + 128] = 0
    mem[_3802 + (32 * _3801) + 160] = 0
    mem[_3802 + (32 * _3801) + 192] = 0
    mem[_3802 + (32 * _3801) + 224] = 0
    mem[_3802 + (32 * _3801) + 256] = 0
    mem[_3802 + (32 * _3801) + 288] = 0
    mem[_3802 + (32 * _3801) + 320] = 0
    mem[_3802 + (32 * _3801) + 352] = 0
    mem[var28001] = _3802 + (32 * _3801) + 32
    s = var28001
    idx = var28002
    while idx - 1:
        mem[64] = mem[64] + 352
        mem[_3802 + (32 * _3801) + 32] = 0
        mem[_3802 + (32 * _3801) + 64] = 0
        mem[_3802 + (32 * _3801) + 96] = 0
        mem[_3802 + (32 * _3801) + 128] = 0
        mem[_3802 + (32 * _3801) + 160] = 0
        mem[_3802 + (32 * _3801) + 192] = 0
        mem[_3802 + (32 * _3801) + 224] = 0
        mem[_3802 + (32 * _3801) + 256] = 0
        mem[_3802 + (32 * _3801) + 288] = 0
        mem[_3802 + (32 * _3801) + 320] = 0
        mem[_3802 + (32 * _3801) + 352] = 0
        mem[s + 32] = _3802 + (32 * _3801) + 32
        s = s + 32
        idx = idx - 1
        continue 
    idx = 0
    while idx < _3801:
        require idx < mem[96]
        _13306 = mem[mem[(32 * idx) + 128]]
        require idx < mem[96]
        _13310 = mem[mem[(32 * idx) + 128] + 32]
        require ext_code.size(0xe54ca86531e17ef3616d22ca28b0d458b6c89106)
        staticcall 0xe54ca86531e17ef3616d22ca28b0d458b6c89106.factory() with:
                gas gas_remaining wei
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        if mem[mem[(32 * idx) + 128] + 12 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
            if mem[mem[(32 * idx) + 128] + 44 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                _13336 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _13340 = mem[_13336]
                require mem[_13336] == mem[_13336 + 12 len 20]
                mem[mem[64] + 4] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7
                mem[mem[64] + 36] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7
                require ext_code.size(address(_13340))
                staticcall address(_13340).getPair(address arg1, address arg2) with:
                        gas gas_remaining wei
                       args 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7, 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _13352 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _13356 = mem[_13352]
                require mem[_13352] == mem[_13352 + 12 len 20]
                if not mem[_13352 + 12 len 20]:
                    require idx < mem[96]
                    require idx < mem[_3802]
                    mem[mem[(32 * idx) + _3802 + 32]] = mem[mem[(32 * idx) + 128] + 12 len 20]
                    require idx < mem[96]
                    require idx < mem[_3802]
                    mem[mem[(32 * idx) + _3802 + 32] + 32] = mem[mem[(32 * idx) + 128] + 44 len 20]
                    require idx < mem[96]
                    if mem[mem[(32 * idx) + 128] + 12 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                        require idx < mem[_3802]
                        mem[mem[(32 * idx) + _3802 + 32] + 224] = eth.balance(arg1)
                        require idx < mem[96]
                        if mem[mem[(32 * idx) + 128] + 44 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                            require idx < mem[_3802]
                            mem[mem[(32 * idx) + _3802 + 32] + 256] = eth.balance(arg1)
                        else:
                            mem[mem[64] + 4] = arg1
                            require ext_code.size(0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7)
                            staticcall 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7.0x70a08231 with:
                                    gas gas_remaining wei
                                   args address(arg1)
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _13513 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            require idx < mem[_3802]
                            mem[mem[(32 * idx) + _3802 + 32] + 256] = mem[_13513]
                    else:
                        mem[mem[64] + 4] = arg1
                        require ext_code.size(0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7)
                        staticcall 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7.0x70a08231 with:
                                gas gas_remaining wei
                               args address(arg1)
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _13464 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        require idx < mem[_3802]
                        mem[mem[(32 * idx) + _3802 + 32] + 224] = mem[_13464]
                        require idx < mem[96]
                        if mem[mem[(32 * idx) + 128] + 44 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                            require idx < mem[_3802]
                            mem[mem[(32 * idx) + _3802 + 32] + 256] = eth.balance(arg1)
                        else:
                            mem[mem[64] + 4] = arg1
                            require ext_code.size(0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7)
                            staticcall 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7.0x70a08231 with:
                                    gas gas_remaining wei
                                   args address(arg1)
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _13574 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            require idx < mem[_3802]
                            mem[mem[(32 * idx) + _3802 + 32] + 256] = mem[_13574]
                else:
                    require ext_code.size(mem[_13352 + 12 len 20])
                    staticcall mem[_13352 + 12 len 20].getReserves() with:
                            gas gas_remaining wei
                    mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _13395 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 96
                    _13413 = mem[_13395]
                    require mem[_13395] == mem[_13395 + 18 len 14]
                    _13433 = mem[_13395 + 32]
                    require mem[_13395 + 32] == mem[_13395 + 50 len 14]
                    require mem[_13395 + 64] == mem[_13395 + 92 len 4]
                    require ext_code.size(address(_13356))
                    staticcall address(_13356).token0() with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _13485 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    require mem[_13485] == mem[_13485 + 12 len 20]
                    mem[mem[64] + 4] = arg1
                    require ext_code.size(address(_13356))
                    staticcall address(_13356).0x70a08231 with:
                            gas gas_remaining wei
                           args address(arg1)
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    if mem[_13485 + 12 len 20] == 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7:
                        _13580 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _13596 = mem[_13580]
                        require ext_code.size(address(_13356))
                        staticcall address(_13356).0x18160ddd with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _13623 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _13631 = mem[_13623]
                        if 10^18 * _13596 / 10^18 != _13596:
                            revert with 0, 'math-not-safe'
                        if (10^18 * _13596) + (mem[_13623] / 2) < 10^18 * _13596:
                            revert with 0, 'math-not-safe'
                        require mem[_13623]
                        if not (10^18 * _13596) + (mem[_13623] / 2) / mem[_13623]:
                            if not (10^18 * _13596) + (mem[_13623] / 2) / mem[_13623]:
                                _13761 = mem[64]
                                mem[64] = mem[64] + 352
                                mem[_13761] = 0
                                mem[_13761 + 32] = 0
                                mem[_13761 + 64] = address(_13356)
                                mem[_13761 + 96] = Mask(112, 0, _13413)
                                mem[_13761 + 128] = Mask(112, 0, _13433)
                                mem[_13761 + 160] = 0
                                mem[_13761 + 192] = 0
                                mem[_13761 + 224] = 0
                                mem[_13761 + 256] = 0
                                mem[_13761 + 288] = _13596
                                mem[_13761 + 320] = _13631
                                require idx < mem[_3802]
                                mem[(32 * idx) + _3802 + 32] = _13761
                                require idx < mem[96]
                                require idx < mem[_3802]
                                mem[_13761] = mem[mem[(32 * idx) + 128] + 12 len 20]
                                require idx < mem[96]
                                require idx < mem[_3802]
                                mem[_13761 + 32] = mem[mem[(32 * idx) + 128] + 44 len 20]
                                require idx < mem[96]
                                if mem[mem[(32 * idx) + 128] + 12 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                                    require idx < mem[_3802]
                                    mem[_13761 + 224] = eth.balance(arg1)
                                    require idx < mem[96]
                                    if mem[mem[(32 * idx) + 128] + 44 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                                        require idx < mem[_3802]
                                        mem[_13761 + 256] = eth.balance(arg1)
                                    else:
                                        mem[mem[64] + 4] = arg1
                                        require ext_code.size(0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7)
                                        staticcall 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7.0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(arg1)
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _14663 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require idx < mem[_3802]
                                        mem[_13761 + 256] = mem[_14663]
                                else:
                                    mem[mem[64] + 4] = arg1
                                    require ext_code.size(0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7)
                                    staticcall 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7.0x70a08231 with:
                                            gas gas_remaining wei
                                           args address(arg1)
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _14354 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require idx < mem[_3802]
                                    mem[_13761 + 224] = mem[_14354]
                                    require idx < mem[96]
                                    if mem[mem[(32 * idx) + 128] + 44 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                                        require idx < mem[_3802]
                                        mem[_13761 + 256] = eth.balance(arg1)
                                    else:
                                        mem[mem[64] + 4] = arg1
                                        require ext_code.size(0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7)
                                        staticcall 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7.0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(arg1)
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _15029 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require idx < mem[_3802]
                                        mem[_13761 + 256] = mem[_15029]
                            else:
                                require (10^18 * _13596) + (mem[_13623] / 2) / mem[_13623]
                                if Mask(112, 0, _13433) * (10^18 * _13596) + (mem[_13623] / 2) / mem[_13623] / (10^18 * _13596) + (mem[_13623] / 2) / mem[_13623] != Mask(112, 0, _13433):
                                    revert with 0, 'math-not-safe'
                                if (Mask(112, 0, _13433) * (10^18 * _13596) + (mem[_13623] / 2) / mem[_13623]) + 5 * 10^17 < Mask(112, 0, _13433) * (10^18 * _13596) + (mem[_13623] / 2) / mem[_13623]:
                                    revert with 0, 'math-not-safe'
                                _13814 = mem[64]
                                mem[64] = mem[64] + 352
                                mem[_13814] = 0
                                mem[_13814 + 32] = 0
                                mem[_13814 + 64] = address(_13356)
                                mem[_13814 + 96] = Mask(112, 0, _13413)
                                mem[_13814 + 128] = Mask(112, 0, _13433)
                                mem[_13814 + 160] = 0
                                mem[_13814 + 192] = (Mask(112, 0, _13433) * (10^18 * _13596) + (_13631 / 2) / _13631) + 5 * 10^17 / 10^18
                                mem[_13814 + 224] = 0
                                mem[_13814 + 256] = 0
                                mem[_13814 + 288] = _13596
                                mem[_13814 + 320] = _13631
                                require idx < mem[_3802]
                                mem[(32 * idx) + _3802 + 32] = _13814
                                require idx < mem[96]
                                require idx < mem[_3802]
                                mem[_13814] = mem[mem[(32 * idx) + 128] + 12 len 20]
                                require idx < mem[96]
                                require idx < mem[_3802]
                                mem[_13814 + 32] = mem[mem[(32 * idx) + 128] + 44 len 20]
                                require idx < mem[96]
                                if mem[mem[(32 * idx) + 128] + 12 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                                    require idx < mem[_3802]
                                    mem[_13814 + 224] = eth.balance(arg1)
                                    require idx < mem[96]
                                    if mem[mem[(32 * idx) + 128] + 44 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                                        require idx < mem[_3802]
                                        mem[_13814 + 256] = eth.balance(arg1)
                                    else:
                                        mem[mem[64] + 4] = arg1
                                        require ext_code.size(0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7)
                                        staticcall 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7.0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(arg1)
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _14764 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require idx < mem[_3802]
                                        mem[_13814 + 256] = mem[_14764]
                                else:
                                    mem[mem[64] + 4] = arg1
                                    require ext_code.size(0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7)
                                    staticcall 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7.0x70a08231 with:
                                            gas gas_remaining wei
                                           args address(arg1)
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _14446 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require idx < mem[_3802]
                                    mem[_13814 + 224] = mem[_14446]
                                    require idx < mem[96]
                                    if mem[mem[(32 * idx) + 128] + 44 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                                        require idx < mem[_3802]
                                        mem[_13814 + 256] = eth.balance(arg1)
                                    else:
                                        mem[mem[64] + 4] = arg1
                                        require ext_code.size(0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7)
                                        staticcall 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7.0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(arg1)
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _15094 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require idx < mem[_3802]
                                        mem[_13814 + 256] = mem[_15094]
                        else:
                            require (10^18 * _13596) + (mem[_13623] / 2) / mem[_13623]
                            if Mask(112, 0, _13413) * (10^18 * _13596) + (mem[_13623] / 2) / mem[_13623] / (10^18 * _13596) + (mem[_13623] / 2) / mem[_13623] != Mask(112, 0, _13413):
                                revert with 0, 'math-not-safe'
                            if (Mask(112, 0, _13413) * (10^18 * _13596) + (mem[_13623] / 2) / mem[_13623]) + 5 * 10^17 < Mask(112, 0, _13413) * (10^18 * _13596) + (mem[_13623] / 2) / mem[_13623]:
                                revert with 0, 'math-not-safe'
                            if not (10^18 * _13596) + (mem[_13623] / 2) / mem[_13623]:
                                _13816 = mem[64]
                                mem[64] = mem[64] + 352
                                mem[_13816] = 0
                                mem[_13816 + 32] = 0
                                mem[_13816 + 64] = address(_13356)
                                mem[_13816 + 96] = Mask(112, 0, _13413)
                                mem[_13816 + 128] = Mask(112, 0, _13433)
                                mem[_13816 + 160] = (Mask(112, 0, _13413) * (10^18 * _13596) + (_13631 / 2) / _13631) + 5 * 10^17 / 10^18
                                mem[_13816 + 192] = 0
                                mem[_13816 + 224] = 0
                                mem[_13816 + 256] = 0
                                mem[_13816 + 288] = _13596
                                mem[_13816 + 320] = _13631
                                require idx < mem[_3802]
                                mem[(32 * idx) + _3802 + 32] = _13816
                                require idx < mem[96]
                                require idx < mem[_3802]
                                mem[_13816] = mem[mem[(32 * idx) + 128] + 12 len 20]
                                require idx < mem[96]
                                require idx < mem[_3802]
                                mem[_13816 + 32] = mem[mem[(32 * idx) + 128] + 44 len 20]
                                require idx < mem[96]
                                if mem[mem[(32 * idx) + 128] + 12 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                                    require idx < mem[_3802]
                                    mem[_13816 + 224] = eth.balance(arg1)
                                    require idx < mem[96]
                                    if mem[mem[(32 * idx) + 128] + 44 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                                        require idx < mem[_3802]
                                        mem[_13816 + 256] = eth.balance(arg1)
                                    else:
                                        mem[mem[64] + 4] = arg1
                                        require ext_code.size(0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7)
                                        staticcall 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7.0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(arg1)
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _14765 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require idx < mem[_3802]
                                        mem[_13816 + 256] = mem[_14765]
                                else:
                                    mem[mem[64] + 4] = arg1
                                    require ext_code.size(0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7)
                                    staticcall 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7.0x70a08231 with:
                                            gas gas_remaining wei
                                           args address(arg1)
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _14448 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require idx < mem[_3802]
                                    mem[_13816 + 224] = mem[_14448]
                                    require idx < mem[96]
                                    if mem[mem[(32 * idx) + 128] + 44 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                                        require idx < mem[_3802]
                                        mem[_13816 + 256] = eth.balance(arg1)
                                    else:
                                        mem[mem[64] + 4] = arg1
                                        require ext_code.size(0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7)
                                        staticcall 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7.0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(arg1)
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _15095 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require idx < mem[_3802]
                                        mem[_13816 + 256] = mem[_15095]
                            else:
                                require (10^18 * _13596) + (mem[_13623] / 2) / mem[_13623]
                                if Mask(112, 0, _13433) * (10^18 * _13596) + (mem[_13623] / 2) / mem[_13623] / (10^18 * _13596) + (mem[_13623] / 2) / mem[_13623] != Mask(112, 0, _13433):
                                    revert with 0, 'math-not-safe'
                                if (Mask(112, 0, _13433) * (10^18 * _13596) + (mem[_13623] / 2) / mem[_13623]) + 5 * 10^17 < Mask(112, 0, _13433) * (10^18 * _13596) + (mem[_13623] / 2) / mem[_13623]:
                                    revert with 0, 'math-not-safe'
                                _13899 = mem[64]
                                mem[64] = mem[64] + 352
                                mem[_13899] = 0
                                mem[_13899 + 32] = 0
                                mem[_13899 + 64] = address(_13356)
                                mem[_13899 + 96] = Mask(112, 0, _13413)
                                mem[_13899 + 128] = Mask(112, 0, _13433)
                                mem[_13899 + 160] = (Mask(112, 0, _13413) * (10^18 * _13596) + (_13631 / 2) / _13631) + 5 * 10^17 / 10^18
                                mem[_13899 + 192] = (Mask(112, 0, _13433) * (10^18 * _13596) + (_13631 / 2) / _13631) + 5 * 10^17 / 10^18
                                mem[_13899 + 224] = 0
                                mem[_13899 + 256] = 0
                                mem[_13899 + 288] = _13596
                                mem[_13899 + 320] = _13631
                                require idx < mem[_3802]
                                mem[(32 * idx) + _3802 + 32] = _13899
                                require idx < mem[96]
                                require idx < mem[_3802]
                                mem[_13899] = mem[mem[(32 * idx) + 128] + 12 len 20]
                                require idx < mem[96]
                                require idx < mem[_3802]
                                mem[_13899 + 32] = mem[mem[(32 * idx) + 128] + 44 len 20]
                                require idx < mem[96]
                                if mem[mem[(32 * idx) + 128] + 12 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                                    require idx < mem[_3802]
                                    mem[_13899 + 224] = eth.balance(arg1)
                                    require idx < mem[96]
                                    if mem[mem[(32 * idx) + 128] + 44 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                                        require idx < mem[_3802]
                                        mem[_13899 + 256] = eth.balance(arg1)
                                    else:
                                        mem[mem[64] + 4] = arg1
                                        require ext_code.size(0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7)
                                        staticcall 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7.0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(arg1)
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _14875 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require idx < mem[_3802]
                                        mem[_13899 + 256] = mem[_14875]
                                else:
                                    mem[mem[64] + 4] = arg1
                                    require ext_code.size(0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7)
                                    staticcall 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7.0x70a08231 with:
                                            gas gas_remaining wei
                                           args address(arg1)
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _14561 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require idx < mem[_3802]
                                    mem[_13899 + 224] = mem[_14561]
                                    require idx < mem[96]
                                    if mem[mem[(32 * idx) + 128] + 44 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                                        require idx < mem[_3802]
                                        mem[_13899 + 256] = eth.balance(arg1)
                                    else:
                                        mem[mem[64] + 4] = arg1
                                        require ext_code.size(0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7)
                                        staticcall 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7.0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(arg1)
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _15134 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require idx < mem[_3802]
                                        mem[_13899 + 256] = mem[_15134]
                    else:
                        _13581 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _13597 = mem[_13581]
                        require ext_code.size(address(_13356))
                        staticcall address(_13356).0x18160ddd with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _13624 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _13632 = mem[_13624]
                        if 10^18 * _13597 / 10^18 != _13597:
                            revert with 0, 'math-not-safe'
                        if (10^18 * _13597) + (mem[_13624] / 2) < 10^18 * _13597:
                            revert with 0, 'math-not-safe'
                        require mem[_13624]
                        if not (10^18 * _13597) + (mem[_13624] / 2) / mem[_13624]:
                            if not (10^18 * _13597) + (mem[_13624] / 2) / mem[_13624]:
                                _13763 = mem[64]
                                mem[64] = mem[64] + 352
                                mem[_13763] = 0
                                mem[_13763 + 32] = 0
                                mem[_13763 + 64] = address(_13356)
                                mem[_13763 + 96] = Mask(112, 0, _13433)
                                mem[_13763 + 128] = Mask(112, 0, _13413)
                                mem[_13763 + 160] = 0
                                mem[_13763 + 192] = 0
                                mem[_13763 + 224] = 0
                                mem[_13763 + 256] = 0
                                mem[_13763 + 288] = _13597
                                mem[_13763 + 320] = _13632
                                require idx < mem[_3802]
                                mem[(32 * idx) + _3802 + 32] = _13763
                                require idx < mem[96]
                                require idx < mem[_3802]
                                mem[_13763] = mem[mem[(32 * idx) + 128] + 12 len 20]
                                require idx < mem[96]
                                require idx < mem[_3802]
                                mem[_13763 + 32] = mem[mem[(32 * idx) + 128] + 44 len 20]
                                require idx < mem[96]
                                if mem[mem[(32 * idx) + 128] + 12 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                                    require idx < mem[_3802]
                                    mem[_13763 + 224] = eth.balance(arg1)
                                    require idx < mem[96]
                                    if mem[mem[(32 * idx) + 128] + 44 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                                        require idx < mem[_3802]
                                        mem[_13763 + 256] = eth.balance(arg1)
                                    else:
                                        mem[mem[64] + 4] = arg1
                                        require ext_code.size(0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7)
                                        staticcall 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7.0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(arg1)
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _14672 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require idx < mem[_3802]
                                        mem[_13763 + 256] = mem[_14672]
                                else:
                                    mem[mem[64] + 4] = arg1
                                    require ext_code.size(0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7)
                                    staticcall 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7.0x70a08231 with:
                                            gas gas_remaining wei
                                           args address(arg1)
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _14361 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require idx < mem[_3802]
                                    mem[_13763 + 224] = mem[_14361]
                                    require idx < mem[96]
                                    if mem[mem[(32 * idx) + 128] + 44 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                                        require idx < mem[_3802]
                                        mem[_13763 + 256] = eth.balance(arg1)
                                    else:
                                        mem[mem[64] + 4] = arg1
                                        require ext_code.size(0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7)
                                        staticcall 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7.0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(arg1)
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _15037 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require idx < mem[_3802]
                                        mem[_13763 + 256] = mem[_15037]
                            else:
                                require (10^18 * _13597) + (mem[_13624] / 2) / mem[_13624]
                                if Mask(112, 0, _13413) * (10^18 * _13597) + (mem[_13624] / 2) / mem[_13624] / (10^18 * _13597) + (mem[_13624] / 2) / mem[_13624] != Mask(112, 0, _13413):
                                    revert with 0, 'math-not-safe'
                                if (Mask(112, 0, _13413) * (10^18 * _13597) + (mem[_13624] / 2) / mem[_13624]) + 5 * 10^17 < Mask(112, 0, _13413) * (10^18 * _13597) + (mem[_13624] / 2) / mem[_13624]:
                                    revert with 0, 'math-not-safe'
                                _13819 = mem[64]
                                mem[64] = mem[64] + 352
                                mem[_13819] = 0
                                mem[_13819 + 32] = 0
                                mem[_13819 + 64] = address(_13356)
                                mem[_13819 + 96] = Mask(112, 0, _13433)
                                mem[_13819 + 128] = Mask(112, 0, _13413)
                                mem[_13819 + 160] = 0
                                mem[_13819 + 192] = (Mask(112, 0, _13413) * (10^18 * _13597) + (_13632 / 2) / _13632) + 5 * 10^17 / 10^18
                                mem[_13819 + 224] = 0
                                mem[_13819 + 256] = 0
                                mem[_13819 + 288] = _13597
                                mem[_13819 + 320] = _13632
                                require idx < mem[_3802]
                                mem[(32 * idx) + _3802 + 32] = _13819
                                require idx < mem[96]
                                require idx < mem[_3802]
                                mem[_13819] = mem[mem[(32 * idx) + 128] + 12 len 20]
                                require idx < mem[96]
                                require idx < mem[_3802]
                                mem[_13819 + 32] = mem[mem[(32 * idx) + 128] + 44 len 20]
                                require idx < mem[96]
                                if mem[mem[(32 * idx) + 128] + 12 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                                    require idx < mem[_3802]
                                    mem[_13819 + 224] = eth.balance(arg1)
                                    require idx < mem[96]
                                    if mem[mem[(32 * idx) + 128] + 44 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                                        require idx < mem[_3802]
                                        mem[_13819 + 256] = eth.balance(arg1)
                                    else:
                                        mem[mem[64] + 4] = arg1
                                        require ext_code.size(0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7)
                                        staticcall 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7.0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(arg1)
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _14772 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require idx < mem[_3802]
                                        mem[_13819 + 256] = mem[_14772]
                                else:
                                    mem[mem[64] + 4] = arg1
                                    require ext_code.size(0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7)
                                    staticcall 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7.0x70a08231 with:
                                            gas gas_remaining wei
                                           args address(arg1)
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _14454 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require idx < mem[_3802]
                                    mem[_13819 + 224] = mem[_14454]
                                    require idx < mem[96]
                                    if mem[mem[(32 * idx) + 128] + 44 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                                        require idx < mem[_3802]
                                        mem[_13819 + 256] = eth.balance(arg1)
                                    else:
                                        mem[mem[64] + 4] = arg1
                                        require ext_code.size(0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7)
                                        staticcall 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7.0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(arg1)
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _15100 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require idx < mem[_3802]
                                        mem[_13819 + 256] = mem[_15100]
                        else:
                            require (10^18 * _13597) + (mem[_13624] / 2) / mem[_13624]
                            if Mask(112, 0, _13433) * (10^18 * _13597) + (mem[_13624] / 2) / mem[_13624] / (10^18 * _13597) + (mem[_13624] / 2) / mem[_13624] != Mask(112, 0, _13433):
                                revert with 0, 'math-not-safe'
                            if (Mask(112, 0, _13433) * (10^18 * _13597) + (mem[_13624] / 2) / mem[_13624]) + 5 * 10^17 < Mask(112, 0, _13433) * (10^18 * _13597) + (mem[_13624] / 2) / mem[_13624]:
                                revert with 0, 'math-not-safe'
                            if not (10^18 * _13597) + (mem[_13624] / 2) / mem[_13624]:
                                _13821 = mem[64]
                                mem[64] = mem[64] + 352
                                mem[_13821] = 0
                                mem[_13821 + 32] = 0
                                mem[_13821 + 64] = address(_13356)
                                mem[_13821 + 96] = Mask(112, 0, _13433)
                                mem[_13821 + 128] = Mask(112, 0, _13413)
                                mem[_13821 + 160] = (Mask(112, 0, _13433) * (10^18 * _13597) + (_13632 / 2) / _13632) + 5 * 10^17 / 10^18
                                mem[_13821 + 192] = 0
                                mem[_13821 + 224] = 0
                                mem[_13821 + 256] = 0
                                mem[_13821 + 288] = _13597
                                mem[_13821 + 320] = _13632
                                require idx < mem[_3802]
                                mem[(32 * idx) + _3802 + 32] = _13821
                                require idx < mem[96]
                                require idx < mem[_3802]
                                mem[_13821] = mem[mem[(32 * idx) + 128] + 12 len 20]
                                require idx < mem[96]
                                require idx < mem[_3802]
                                mem[_13821 + 32] = mem[mem[(32 * idx) + 128] + 44 len 20]
                                require idx < mem[96]
                                if mem[mem[(32 * idx) + 128] + 12 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                                    require idx < mem[_3802]
                                    mem[_13821 + 224] = eth.balance(arg1)
                                    require idx < mem[96]
                                    if mem[mem[(32 * idx) + 128] + 44 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                                        require idx < mem[_3802]
                                        mem[_13821 + 256] = eth.balance(arg1)
                                    else:
                                        mem[mem[64] + 4] = arg1
                                        require ext_code.size(0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7)
                                        staticcall 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7.0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(arg1)
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _14773 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require idx < mem[_3802]
                                        mem[_13821 + 256] = mem[_14773]
                                else:
                                    mem[mem[64] + 4] = arg1
                                    require ext_code.size(0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7)
                                    staticcall 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7.0x70a08231 with:
                                            gas gas_remaining wei
                                           args address(arg1)
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _14456 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require idx < mem[_3802]
                                    mem[_13821 + 224] = mem[_14456]
                                    require idx < mem[96]
                                    if mem[mem[(32 * idx) + 128] + 44 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                                        require idx < mem[_3802]
                                        mem[_13821 + 256] = eth.balance(arg1)
                                    else:
                                        mem[mem[64] + 4] = arg1
                                        require ext_code.size(0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7)
                                        staticcall 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7.0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(arg1)
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _15101 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require idx < mem[_3802]
                                        mem[_13821 + 256] = mem[_15101]
                            else:
                                require (10^18 * _13597) + (mem[_13624] / 2) / mem[_13624]
                                if Mask(112, 0, _13413) * (10^18 * _13597) + (mem[_13624] / 2) / mem[_13624] / (10^18 * _13597) + (mem[_13624] / 2) / mem[_13624] != Mask(112, 0, _13413):
                                    revert with 0, 'math-not-safe'
                                if (Mask(112, 0, _13413) * (10^18 * _13597) + (mem[_13624] / 2) / mem[_13624]) + 5 * 10^17 < Mask(112, 0, _13413) * (10^18 * _13597) + (mem[_13624] / 2) / mem[_13624]:
                                    revert with 0, 'math-not-safe'
                                _13905 = mem[64]
                                mem[64] = mem[64] + 352
                                mem[_13905] = 0
                                mem[_13905 + 32] = 0
                                mem[_13905 + 64] = address(_13356)
                                mem[_13905 + 96] = Mask(112, 0, _13433)
                                mem[_13905 + 128] = Mask(112, 0, _13413)
                                mem[_13905 + 160] = (Mask(112, 0, _13433) * (10^18 * _13597) + (_13632 / 2) / _13632) + 5 * 10^17 / 10^18
                                mem[_13905 + 192] = (Mask(112, 0, _13413) * (10^18 * _13597) + (_13632 / 2) / _13632) + 5 * 10^17 / 10^18
                                mem[_13905 + 224] = 0
                                mem[_13905 + 256] = 0
                                mem[_13905 + 288] = _13597
                                mem[_13905 + 320] = _13632
                                require idx < mem[_3802]
                                mem[(32 * idx) + _3802 + 32] = _13905
                                require idx < mem[96]
                                require idx < mem[_3802]
                                mem[_13905] = mem[mem[(32 * idx) + 128] + 12 len 20]
                                require idx < mem[96]
                                require idx < mem[_3802]
                                mem[_13905 + 32] = mem[mem[(32 * idx) + 128] + 44 len 20]
                                require idx < mem[96]
                                if mem[mem[(32 * idx) + 128] + 12 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                                    require idx < mem[_3802]
                                    mem[_13905 + 224] = eth.balance(arg1)
                                    require idx < mem[96]
                                    if mem[mem[(32 * idx) + 128] + 44 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                                        require idx < mem[_3802]
                                        mem[_13905 + 256] = eth.balance(arg1)
                                    else:
                                        mem[mem[64] + 4] = arg1
                                        require ext_code.size(0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7)
                                        staticcall 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7.0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(arg1)
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _14884 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require idx < mem[_3802]
                                        mem[_13905 + 256] = mem[_14884]
                                else:
                                    mem[mem[64] + 4] = arg1
                                    require ext_code.size(0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7)
                                    staticcall 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7.0x70a08231 with:
                                            gas gas_remaining wei
                                           args address(arg1)
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _14570 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require idx < mem[_3802]
                                    mem[_13905 + 224] = mem[_14570]
                                    require idx < mem[96]
                                    if mem[mem[(32 * idx) + 128] + 44 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                                        require idx < mem[_3802]
                                        mem[_13905 + 256] = eth.balance(arg1)
                                    else:
                                        mem[mem[64] + 4] = arg1
                                        require ext_code.size(0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7)
                                        staticcall 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7.0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(arg1)
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _15138 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require idx < mem[_3802]
                                        mem[_13905 + 256] = mem[_15138]
            else:
                _13334 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _13338 = mem[_13334]
                require mem[_13334] == mem[_13334 + 12 len 20]
                mem[mem[64] + 4] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7
                mem[mem[64] + 36] = address(_13310)
                require ext_code.size(address(_13338))
                staticcall address(_13338).getPair(address arg1, address arg2) with:
                        gas gas_remaining wei
                       args 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7, address(_13310)
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _13350 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _13354 = mem[_13350]
                require mem[_13350] == mem[_13350 + 12 len 20]
                if not mem[_13350 + 12 len 20]:
                    require idx < mem[96]
                    require idx < mem[_3802]
                    mem[mem[(32 * idx) + _3802 + 32]] = mem[mem[(32 * idx) + 128] + 12 len 20]
                    require idx < mem[96]
                    require idx < mem[_3802]
                    mem[mem[(32 * idx) + _3802 + 32] + 32] = mem[mem[(32 * idx) + 128] + 44 len 20]
                    require idx < mem[96]
                    if mem[mem[(32 * idx) + 128] + 12 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                        require idx < mem[_3802]
                        mem[mem[(32 * idx) + _3802 + 32] + 224] = eth.balance(arg1)
                        require idx < mem[96]
                        if mem[mem[(32 * idx) + 128] + 44 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                            require idx < mem[_3802]
                            mem[mem[(32 * idx) + _3802 + 32] + 256] = eth.balance(arg1)
                        else:
                            mem[mem[64] + 4] = arg1
                            require ext_code.size(address(_13310))
                            staticcall address(_13310).0x70a08231 with:
                                    gas gas_remaining wei
                                   args address(arg1)
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _13510 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            require idx < mem[_3802]
                            mem[mem[(32 * idx) + _3802 + 32] + 256] = mem[_13510]
                    else:
                        mem[mem[64] + 4] = arg1
                        require ext_code.size(0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7)
                        staticcall 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7.0x70a08231 with:
                                gas gas_remaining wei
                               args address(arg1)
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _13454 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        require idx < mem[_3802]
                        mem[mem[(32 * idx) + _3802 + 32] + 224] = mem[_13454]
                        require idx < mem[96]
                        if mem[mem[(32 * idx) + 128] + 44 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                            require idx < mem[_3802]
                            mem[mem[(32 * idx) + _3802 + 32] + 256] = eth.balance(arg1)
                        else:
                            mem[mem[64] + 4] = arg1
                            require ext_code.size(address(_13310))
                            staticcall address(_13310).0x70a08231 with:
                                    gas gas_remaining wei
                                   args address(arg1)
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _13570 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            require idx < mem[_3802]
                            mem[mem[(32 * idx) + _3802 + 32] + 256] = mem[_13570]
                else:
                    require ext_code.size(mem[_13350 + 12 len 20])
                    staticcall mem[_13350 + 12 len 20].getReserves() with:
                            gas gas_remaining wei
                    mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _13386 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 96
                    _13410 = mem[_13386]
                    require mem[_13386] == mem[_13386 + 18 len 14]
                    _13428 = mem[_13386 + 32]
                    require mem[_13386 + 32] == mem[_13386 + 50 len 14]
                    require mem[_13386 + 64] == mem[_13386 + 92 len 4]
                    require ext_code.size(address(_13354))
                    staticcall address(_13354).token0() with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _13478 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    require mem[_13478] == mem[_13478 + 12 len 20]
                    mem[mem[64] + 4] = arg1
                    require ext_code.size(address(_13354))
                    staticcall address(_13354).0x70a08231 with:
                            gas gas_remaining wei
                           args address(arg1)
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    if mem[_13478 + 12 len 20] == 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7:
                        _13575 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _13587 = mem[_13575]
                        require ext_code.size(address(_13354))
                        staticcall address(_13354).0x18160ddd with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _13619 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _13627 = mem[_13619]
                        if 10^18 * _13587 / 10^18 != _13587:
                            revert with 0, 'math-not-safe'
                        if (10^18 * _13587) + (mem[_13619] / 2) < 10^18 * _13587:
                            revert with 0, 'math-not-safe'
                        require mem[_13619]
                        if not (10^18 * _13587) + (mem[_13619] / 2) / mem[_13619]:
                            if not (10^18 * _13587) + (mem[_13619] / 2) / mem[_13619]:
                                _13749 = mem[64]
                                mem[64] = mem[64] + 352
                                mem[_13749] = 0
                                mem[_13749 + 32] = 0
                                mem[_13749 + 64] = address(_13354)
                                mem[_13749 + 96] = Mask(112, 0, _13410)
                                mem[_13749 + 128] = Mask(112, 0, _13428)
                                mem[_13749 + 160] = 0
                                mem[_13749 + 192] = 0
                                mem[_13749 + 224] = 0
                                mem[_13749 + 256] = 0
                                mem[_13749 + 288] = _13587
                                mem[_13749 + 320] = _13627
                                require idx < mem[_3802]
                                mem[(32 * idx) + _3802 + 32] = _13749
                                require idx < mem[96]
                                require idx < mem[_3802]
                                mem[_13749] = mem[mem[(32 * idx) + 128] + 12 len 20]
                                require idx < mem[96]
                                require idx < mem[_3802]
                                mem[_13749 + 32] = mem[mem[(32 * idx) + 128] + 44 len 20]
                                require idx < mem[96]
                                if mem[mem[(32 * idx) + 128] + 12 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                                    require idx < mem[_3802]
                                    mem[_13749 + 224] = eth.balance(arg1)
                                    require idx < mem[96]
                                    if mem[mem[(32 * idx) + 128] + 44 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                                        require idx < mem[_3802]
                                        mem[_13749 + 256] = eth.balance(arg1)
                                    else:
                                        mem[mem[64] + 4] = arg1
                                        require ext_code.size(address(_13310))
                                        staticcall address(_13310).0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(arg1)
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _14619 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require idx < mem[_3802]
                                        mem[_13749 + 256] = mem[_14619]
                                else:
                                    mem[mem[64] + 4] = arg1
                                    require ext_code.size(0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7)
                                    staticcall 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7.0x70a08231 with:
                                            gas gas_remaining wei
                                           args address(arg1)
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _14320 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require idx < mem[_3802]
                                    mem[_13749 + 224] = mem[_14320]
                                    require idx < mem[96]
                                    if mem[mem[(32 * idx) + 128] + 44 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                                        require idx < mem[_3802]
                                        mem[_13749 + 256] = eth.balance(arg1)
                                    else:
                                        mem[mem[64] + 4] = arg1
                                        require ext_code.size(address(_13310))
                                        staticcall address(_13310).0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(arg1)
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _14993 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require idx < mem[_3802]
                                        mem[_13749 + 256] = mem[_14993]
                            else:
                                require (10^18 * _13587) + (mem[_13619] / 2) / mem[_13619]
                                if Mask(112, 0, _13428) * (10^18 * _13587) + (mem[_13619] / 2) / mem[_13619] / (10^18 * _13587) + (mem[_13619] / 2) / mem[_13619] != Mask(112, 0, _13428):
                                    revert with 0, 'math-not-safe'
                                if (Mask(112, 0, _13428) * (10^18 * _13587) + (mem[_13619] / 2) / mem[_13619]) + 5 * 10^17 < Mask(112, 0, _13428) * (10^18 * _13587) + (mem[_13619] / 2) / mem[_13619]:
                                    revert with 0, 'math-not-safe'
                                _13788 = mem[64]
                                mem[64] = mem[64] + 352
                                mem[_13788] = 0
                                mem[_13788 + 32] = 0
                                mem[_13788 + 64] = address(_13354)
                                mem[_13788 + 96] = Mask(112, 0, _13410)
                                mem[_13788 + 128] = Mask(112, 0, _13428)
                                mem[_13788 + 160] = 0
                                mem[_13788 + 192] = (Mask(112, 0, _13428) * (10^18 * _13587) + (_13627 / 2) / _13627) + 5 * 10^17 / 10^18
                                mem[_13788 + 224] = 0
                                mem[_13788 + 256] = 0
                                mem[_13788 + 288] = _13587
                                mem[_13788 + 320] = _13627
                                require idx < mem[_3802]
                                mem[(32 * idx) + _3802 + 32] = _13788
                                require idx < mem[96]
                                require idx < mem[_3802]
                                mem[_13788] = mem[mem[(32 * idx) + 128] + 12 len 20]
                                require idx < mem[96]
                                require idx < mem[_3802]
                                mem[_13788 + 32] = mem[mem[(32 * idx) + 128] + 44 len 20]
                                require idx < mem[96]
                                if mem[mem[(32 * idx) + 128] + 12 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                                    require idx < mem[_3802]
                                    mem[_13788 + 224] = eth.balance(arg1)
                                    require idx < mem[96]
                                    if mem[mem[(32 * idx) + 128] + 44 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                                        require idx < mem[_3802]
                                        mem[_13788 + 256] = eth.balance(arg1)
                                    else:
                                        mem[mem[64] + 4] = arg1
                                        require ext_code.size(address(_13310))
                                        staticcall address(_13310).0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(arg1)
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _14724 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require idx < mem[_3802]
                                        mem[_13788 + 256] = mem[_14724]
                                else:
                                    mem[mem[64] + 4] = arg1
                                    require ext_code.size(0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7)
                                    staticcall 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7.0x70a08231 with:
                                            gas gas_remaining wei
                                           args address(arg1)
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _14404 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require idx < mem[_3802]
                                    mem[_13788 + 224] = mem[_14404]
                                    require idx < mem[96]
                                    if mem[mem[(32 * idx) + 128] + 44 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                                        require idx < mem[_3802]
                                        mem[_13788 + 256] = eth.balance(arg1)
                                    else:
                                        mem[mem[64] + 4] = arg1
                                        require ext_code.size(address(_13310))
                                        staticcall address(_13310).0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(arg1)
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _15070 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require idx < mem[_3802]
                                        mem[_13788 + 256] = mem[_15070]
                        else:
                            require (10^18 * _13587) + (mem[_13619] / 2) / mem[_13619]
                            if Mask(112, 0, _13410) * (10^18 * _13587) + (mem[_13619] / 2) / mem[_13619] / (10^18 * _13587) + (mem[_13619] / 2) / mem[_13619] != Mask(112, 0, _13410):
                                revert with 0, 'math-not-safe'
                            if (Mask(112, 0, _13410) * (10^18 * _13587) + (mem[_13619] / 2) / mem[_13619]) + 5 * 10^17 < Mask(112, 0, _13410) * (10^18 * _13587) + (mem[_13619] / 2) / mem[_13619]:
                                revert with 0, 'math-not-safe'
                            if not (10^18 * _13587) + (mem[_13619] / 2) / mem[_13619]:
                                _13790 = mem[64]
                                mem[64] = mem[64] + 352
                                mem[_13790] = 0
                                mem[_13790 + 32] = 0
                                mem[_13790 + 64] = address(_13354)
                                mem[_13790 + 96] = Mask(112, 0, _13410)
                                mem[_13790 + 128] = Mask(112, 0, _13428)
                                mem[_13790 + 160] = (Mask(112, 0, _13410) * (10^18 * _13587) + (_13627 / 2) / _13627) + 5 * 10^17 / 10^18
                                mem[_13790 + 192] = 0
                                mem[_13790 + 224] = 0
                                mem[_13790 + 256] = 0
                                mem[_13790 + 288] = _13587
                                mem[_13790 + 320] = _13627
                                require idx < mem[_3802]
                                mem[(32 * idx) + _3802 + 32] = _13790
                                require idx < mem[96]
                                require idx < mem[_3802]
                                mem[_13790] = mem[mem[(32 * idx) + 128] + 12 len 20]
                                require idx < mem[96]
                                require idx < mem[_3802]
                                mem[_13790 + 32] = mem[mem[(32 * idx) + 128] + 44 len 20]
                                require idx < mem[96]
                                if mem[mem[(32 * idx) + 128] + 12 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                                    require idx < mem[_3802]
                                    mem[_13790 + 224] = eth.balance(arg1)
                                    require idx < mem[96]
                                    if mem[mem[(32 * idx) + 128] + 44 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                                        require idx < mem[_3802]
                                        mem[_13790 + 256] = eth.balance(arg1)
                                    else:
                                        mem[mem[64] + 4] = arg1
                                        require ext_code.size(address(_13310))
                                        staticcall address(_13310).0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(arg1)
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _14725 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require idx < mem[_3802]
                                        mem[_13790 + 256] = mem[_14725]
                                else:
                                    mem[mem[64] + 4] = arg1
                                    require ext_code.size(0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7)
                                    staticcall 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7.0x70a08231 with:
                                            gas gas_remaining wei
                                           args address(arg1)
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _14406 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require idx < mem[_3802]
                                    mem[_13790 + 224] = mem[_14406]
                                    require idx < mem[96]
                                    if mem[mem[(32 * idx) + 128] + 44 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                                        require idx < mem[_3802]
                                        mem[_13790 + 256] = eth.balance(arg1)
                                    else:
                                        mem[mem[64] + 4] = arg1
                                        require ext_code.size(address(_13310))
                                        staticcall address(_13310).0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(arg1)
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _15071 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require idx < mem[_3802]
                                        mem[_13790 + 256] = mem[_15071]
                            else:
                                require (10^18 * _13587) + (mem[_13619] / 2) / mem[_13619]
                                if Mask(112, 0, _13428) * (10^18 * _13587) + (mem[_13619] / 2) / mem[_13619] / (10^18 * _13587) + (mem[_13619] / 2) / mem[_13619] != Mask(112, 0, _13428):
                                    revert with 0, 'math-not-safe'
                                if (Mask(112, 0, _13428) * (10^18 * _13587) + (mem[_13619] / 2) / mem[_13619]) + 5 * 10^17 < Mask(112, 0, _13428) * (10^18 * _13587) + (mem[_13619] / 2) / mem[_13619]:
                                    revert with 0, 'math-not-safe'
                                _13857 = mem[64]
                                mem[64] = mem[64] + 352
                                mem[_13857] = 0
                                mem[_13857 + 32] = 0
                                mem[_13857 + 64] = address(_13354)
                                mem[_13857 + 96] = Mask(112, 0, _13410)
                                mem[_13857 + 128] = Mask(112, 0, _13428)
                                mem[_13857 + 160] = (Mask(112, 0, _13410) * (10^18 * _13587) + (_13627 / 2) / _13627) + 5 * 10^17 / 10^18
                                mem[_13857 + 192] = (Mask(112, 0, _13428) * (10^18 * _13587) + (_13627 / 2) / _13627) + 5 * 10^17 / 10^18
                                mem[_13857 + 224] = 0
                                mem[_13857 + 256] = 0
                                mem[_13857 + 288] = _13587
                                mem[_13857 + 320] = _13627
                                require idx < mem[_3802]
                                mem[(32 * idx) + _3802 + 32] = _13857
                                require idx < mem[96]
                                require idx < mem[_3802]
                                mem[_13857] = mem[mem[(32 * idx) + 128] + 12 len 20]
                                require idx < mem[96]
                                require idx < mem[_3802]
                                mem[_13857 + 32] = mem[mem[(32 * idx) + 128] + 44 len 20]
                                require idx < mem[96]
                                if mem[mem[(32 * idx) + 128] + 12 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                                    require idx < mem[_3802]
                                    mem[_13857 + 224] = eth.balance(arg1)
                                    require idx < mem[96]
                                    if mem[mem[(32 * idx) + 128] + 44 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                                        require idx < mem[_3802]
                                        mem[_13857 + 256] = eth.balance(arg1)
                                    else:
                                        mem[mem[64] + 4] = arg1
                                        require ext_code.size(address(_13310))
                                        staticcall address(_13310).0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(arg1)
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _14827 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require idx < mem[_3802]
                                        mem[_13857 + 256] = mem[_14827]
                                else:
                                    mem[mem[64] + 4] = arg1
                                    require ext_code.size(0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7)
                                    staticcall 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7.0x70a08231 with:
                                            gas gas_remaining wei
                                           args address(arg1)
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _14515 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require idx < mem[_3802]
                                    mem[_13857 + 224] = mem[_14515]
                                    require idx < mem[96]
                                    if mem[mem[(32 * idx) + 128] + 44 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                                        require idx < mem[_3802]
                                        mem[_13857 + 256] = eth.balance(arg1)
                                    else:
                                        mem[mem[64] + 4] = arg1
                                        require ext_code.size(address(_13310))
                                        staticcall address(_13310).0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(arg1)
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _15116 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require idx < mem[_3802]
                                        mem[_13857 + 256] = mem[_15116]
                    else:
                        _13576 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _13588 = mem[_13576]
                        require ext_code.size(address(_13354))
                        staticcall address(_13354).0x18160ddd with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _13620 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _13628 = mem[_13620]
                        if 10^18 * _13588 / 10^18 != _13588:
                            revert with 0, 'math-not-safe'
                        if (10^18 * _13588) + (mem[_13620] / 2) < 10^18 * _13588:
                            revert with 0, 'math-not-safe'
                        require mem[_13620]
                        if not (10^18 * _13588) + (mem[_13620] / 2) / mem[_13620]:
                            if not (10^18 * _13588) + (mem[_13620] / 2) / mem[_13620]:
                                _13751 = mem[64]
                                mem[64] = mem[64] + 352
                                mem[_13751] = 0
                                mem[_13751 + 32] = 0
                                mem[_13751 + 64] = address(_13354)
                                mem[_13751 + 96] = Mask(112, 0, _13428)
                                mem[_13751 + 128] = Mask(112, 0, _13410)
                                mem[_13751 + 160] = 0
                                mem[_13751 + 192] = 0
                                mem[_13751 + 224] = 0
                                mem[_13751 + 256] = 0
                                mem[_13751 + 288] = _13588
                                mem[_13751 + 320] = _13628
                                require idx < mem[_3802]
                                mem[(32 * idx) + _3802 + 32] = _13751
                                require idx < mem[96]
                                require idx < mem[_3802]
                                mem[_13751] = mem[mem[(32 * idx) + 128] + 12 len 20]
                                require idx < mem[96]
                                require idx < mem[_3802]
                                mem[_13751 + 32] = mem[mem[(32 * idx) + 128] + 44 len 20]
                                require idx < mem[96]
                                if mem[mem[(32 * idx) + 128] + 12 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                                    require idx < mem[_3802]
                                    mem[_13751 + 224] = eth.balance(arg1)
                                    require idx < mem[96]
                                    if mem[mem[(32 * idx) + 128] + 44 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                                        require idx < mem[_3802]
                                        mem[_13751 + 256] = eth.balance(arg1)
                                    else:
                                        mem[mem[64] + 4] = arg1
                                        require ext_code.size(address(_13310))
                                        staticcall address(_13310).0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(arg1)
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _14628 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require idx < mem[_3802]
                                        mem[_13751 + 256] = mem[_14628]
                                else:
                                    mem[mem[64] + 4] = arg1
                                    require ext_code.size(0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7)
                                    staticcall 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7.0x70a08231 with:
                                            gas gas_remaining wei
                                           args address(arg1)
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _14327 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require idx < mem[_3802]
                                    mem[_13751 + 224] = mem[_14327]
                                    require idx < mem[96]
                                    if mem[mem[(32 * idx) + 128] + 44 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                                        require idx < mem[_3802]
                                        mem[_13751 + 256] = eth.balance(arg1)
                                    else:
                                        mem[mem[64] + 4] = arg1
                                        require ext_code.size(address(_13310))
                                        staticcall address(_13310).0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(arg1)
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _15001 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require idx < mem[_3802]
                                        mem[_13751 + 256] = mem[_15001]
                            else:
                                require (10^18 * _13588) + (mem[_13620] / 2) / mem[_13620]
                                if Mask(112, 0, _13410) * (10^18 * _13588) + (mem[_13620] / 2) / mem[_13620] / (10^18 * _13588) + (mem[_13620] / 2) / mem[_13620] != Mask(112, 0, _13410):
                                    revert with 0, 'math-not-safe'
                                if (Mask(112, 0, _13410) * (10^18 * _13588) + (mem[_13620] / 2) / mem[_13620]) + 5 * 10^17 < Mask(112, 0, _13410) * (10^18 * _13588) + (mem[_13620] / 2) / mem[_13620]:
                                    revert with 0, 'math-not-safe'
                                _13793 = mem[64]
                                mem[64] = mem[64] + 352
                                mem[_13793] = 0
                                mem[_13793 + 32] = 0
                                mem[_13793 + 64] = address(_13354)
                                mem[_13793 + 96] = Mask(112, 0, _13428)
                                mem[_13793 + 128] = Mask(112, 0, _13410)
                                mem[_13793 + 160] = 0
                                mem[_13793 + 192] = (Mask(112, 0, _13410) * (10^18 * _13588) + (_13628 / 2) / _13628) + 5 * 10^17 / 10^18
                                mem[_13793 + 224] = 0
                                mem[_13793 + 256] = 0
                                mem[_13793 + 288] = _13588
                                mem[_13793 + 320] = _13628
                                require idx < mem[_3802]
                                mem[(32 * idx) + _3802 + 32] = _13793
                                require idx < mem[96]
                                require idx < mem[_3802]
                                mem[_13793] = mem[mem[(32 * idx) + 128] + 12 len 20]
                                require idx < mem[96]
                                require idx < mem[_3802]
                                mem[_13793 + 32] = mem[mem[(32 * idx) + 128] + 44 len 20]
                                require idx < mem[96]
                                if mem[mem[(32 * idx) + 128] + 12 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                                    require idx < mem[_3802]
                                    mem[_13793 + 224] = eth.balance(arg1)
                                    require idx < mem[96]
                                    if mem[mem[(32 * idx) + 128] + 44 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                                        require idx < mem[_3802]
                                        mem[_13793 + 256] = eth.balance(arg1)
                                    else:
                                        mem[mem[64] + 4] = arg1
                                        require ext_code.size(address(_13310))
                                        staticcall address(_13310).0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(arg1)
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _14732 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require idx < mem[_3802]
                                        mem[_13793 + 256] = mem[_14732]
                                else:
                                    mem[mem[64] + 4] = arg1
                                    require ext_code.size(0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7)
                                    staticcall 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7.0x70a08231 with:
                                            gas gas_remaining wei
                                           args address(arg1)
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _14412 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require idx < mem[_3802]
                                    mem[_13793 + 224] = mem[_14412]
                                    require idx < mem[96]
                                    if mem[mem[(32 * idx) + 128] + 44 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                                        require idx < mem[_3802]
                                        mem[_13793 + 256] = eth.balance(arg1)
                                    else:
                                        mem[mem[64] + 4] = arg1
                                        require ext_code.size(address(_13310))
                                        staticcall address(_13310).0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(arg1)
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _15076 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require idx < mem[_3802]
                                        mem[_13793 + 256] = mem[_15076]
                        else:
                            require (10^18 * _13588) + (mem[_13620] / 2) / mem[_13620]
                            if Mask(112, 0, _13428) * (10^18 * _13588) + (mem[_13620] / 2) / mem[_13620] / (10^18 * _13588) + (mem[_13620] / 2) / mem[_13620] != Mask(112, 0, _13428):
                                revert with 0, 'math-not-safe'
                            if (Mask(112, 0, _13428) * (10^18 * _13588) + (mem[_13620] / 2) / mem[_13620]) + 5 * 10^17 < Mask(112, 0, _13428) * (10^18 * _13588) + (mem[_13620] / 2) / mem[_13620]:
                                revert with 0, 'math-not-safe'
                            if not (10^18 * _13588) + (mem[_13620] / 2) / mem[_13620]:
                                _13795 = mem[64]
                                mem[64] = mem[64] + 352
                                mem[_13795] = 0
                                mem[_13795 + 32] = 0
                                mem[_13795 + 64] = address(_13354)
                                mem[_13795 + 96] = Mask(112, 0, _13428)
                                mem[_13795 + 128] = Mask(112, 0, _13410)
                                mem[_13795 + 160] = (Mask(112, 0, _13428) * (10^18 * _13588) + (_13628 / 2) / _13628) + 5 * 10^17 / 10^18
                                mem[_13795 + 192] = 0
                                mem[_13795 + 224] = 0
                                mem[_13795 + 256] = 0
                                mem[_13795 + 288] = _13588
                                mem[_13795 + 320] = _13628
                                require idx < mem[_3802]
                                mem[(32 * idx) + _3802 + 32] = _13795
                                require idx < mem[96]
                                require idx < mem[_3802]
                                mem[_13795] = mem[mem[(32 * idx) + 128] + 12 len 20]
                                require idx < mem[96]
                                require idx < mem[_3802]
                                mem[_13795 + 32] = mem[mem[(32 * idx) + 128] + 44 len 20]
                                require idx < mem[96]
                                if mem[mem[(32 * idx) + 128] + 12 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                                    require idx < mem[_3802]
                                    mem[_13795 + 224] = eth.balance(arg1)
                                    require idx < mem[96]
                                    if mem[mem[(32 * idx) + 128] + 44 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                                        require idx < mem[_3802]
                                        mem[_13795 + 256] = eth.balance(arg1)
                                    else:
                                        mem[mem[64] + 4] = arg1
                                        require ext_code.size(address(_13310))
                                        staticcall address(_13310).0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(arg1)
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _14733 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require idx < mem[_3802]
                                        mem[_13795 + 256] = mem[_14733]
                                else:
                                    mem[mem[64] + 4] = arg1
                                    require ext_code.size(0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7)
                                    staticcall 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7.0x70a08231 with:
                                            gas gas_remaining wei
                                           args address(arg1)
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _14414 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require idx < mem[_3802]
                                    mem[_13795 + 224] = mem[_14414]
                                    require idx < mem[96]
                                    if mem[mem[(32 * idx) + 128] + 44 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                                        require idx < mem[_3802]
                                        mem[_13795 + 256] = eth.balance(arg1)
                                    else:
                                        mem[mem[64] + 4] = arg1
                                        require ext_code.size(address(_13310))
                                        staticcall address(_13310).0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(arg1)
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _15077 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require idx < mem[_3802]
                                        mem[_13795 + 256] = mem[_15077]
                            else:
                                require (10^18 * _13588) + (mem[_13620] / 2) / mem[_13620]
                                if Mask(112, 0, _13410) * (10^18 * _13588) + (mem[_13620] / 2) / mem[_13620] / (10^18 * _13588) + (mem[_13620] / 2) / mem[_13620] != Mask(112, 0, _13410):
                                    revert with 0, 'math-not-safe'
                                if (Mask(112, 0, _13410) * (10^18 * _13588) + (mem[_13620] / 2) / mem[_13620]) + 5 * 10^17 < Mask(112, 0, _13410) * (10^18 * _13588) + (mem[_13620] / 2) / mem[_13620]:
                                    revert with 0, 'math-not-safe'
                                _13863 = mem[64]
                                mem[64] = mem[64] + 352
                                mem[_13863] = 0
                                mem[_13863 + 32] = 0
                                mem[_13863 + 64] = address(_13354)
                                mem[_13863 + 96] = Mask(112, 0, _13428)
                                mem[_13863 + 128] = Mask(112, 0, _13410)
                                mem[_13863 + 160] = (Mask(112, 0, _13428) * (10^18 * _13588) + (_13628 / 2) / _13628) + 5 * 10^17 / 10^18
                                mem[_13863 + 192] = (Mask(112, 0, _13410) * (10^18 * _13588) + (_13628 / 2) / _13628) + 5 * 10^17 / 10^18
                                mem[_13863 + 224] = 0
                                mem[_13863 + 256] = 0
                                mem[_13863 + 288] = _13588
                                mem[_13863 + 320] = _13628
                                require idx < mem[_3802]
                                mem[(32 * idx) + _3802 + 32] = _13863
                                require idx < mem[96]
                                require idx < mem[_3802]
                                mem[_13863] = mem[mem[(32 * idx) + 128] + 12 len 20]
                                require idx < mem[96]
                                require idx < mem[_3802]
                                mem[_13863 + 32] = mem[mem[(32 * idx) + 128] + 44 len 20]
                                require idx < mem[96]
                                if mem[mem[(32 * idx) + 128] + 12 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                                    require idx < mem[_3802]
                                    mem[_13863 + 224] = eth.balance(arg1)
                                    require idx < mem[96]
                                    if mem[mem[(32 * idx) + 128] + 44 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                                        require idx < mem[_3802]
                                        mem[_13863 + 256] = eth.balance(arg1)
                                    else:
                                        mem[mem[64] + 4] = arg1
                                        require ext_code.size(address(_13310))
                                        staticcall address(_13310).0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(arg1)
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _14836 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require idx < mem[_3802]
                                        mem[_13863 + 256] = mem[_14836]
                                else:
                                    mem[mem[64] + 4] = arg1
                                    require ext_code.size(0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7)
                                    staticcall 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7.0x70a08231 with:
                                            gas gas_remaining wei
                                           args address(arg1)
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _14524 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require idx < mem[_3802]
                                    mem[_13863 + 224] = mem[_14524]
                                    require idx < mem[96]
                                    if mem[mem[(32 * idx) + 128] + 44 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                                        require idx < mem[_3802]
                                        mem[_13863 + 256] = eth.balance(arg1)
                                    else:
                                        mem[mem[64] + 4] = arg1
                                        require ext_code.size(address(_13310))
                                        staticcall address(_13310).0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(arg1)
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _15120 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require idx < mem[_3802]
                                        mem[_13863 + 256] = mem[_15120]
        else:
            if mem[mem[(32 * idx) + 128] + 44 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                _13335 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _13339 = mem[_13335]
                require mem[_13335] == mem[_13335 + 12 len 20]
                mem[mem[64] + 4] = address(_13306)
                mem[mem[64] + 36] = 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7
                require ext_code.size(address(_13339))
                staticcall address(_13339).getPair(address arg1, address arg2) with:
                        gas gas_remaining wei
                       args address(_13306), 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _13351 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _13355 = mem[_13351]
                require mem[_13351] == mem[_13351 + 12 len 20]
                if not mem[_13351 + 12 len 20]:
                    require idx < mem[96]
                    require idx < mem[_3802]
                    mem[mem[(32 * idx) + _3802 + 32]] = mem[mem[(32 * idx) + 128] + 12 len 20]
                    require idx < mem[96]
                    require idx < mem[_3802]
                    mem[mem[(32 * idx) + _3802 + 32] + 32] = mem[mem[(32 * idx) + 128] + 44 len 20]
                    require idx < mem[96]
                    if mem[mem[(32 * idx) + 128] + 12 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                        require idx < mem[_3802]
                        mem[mem[(32 * idx) + _3802 + 32] + 224] = eth.balance(arg1)
                        require idx < mem[96]
                        if mem[mem[(32 * idx) + 128] + 44 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                            require idx < mem[_3802]
                            mem[mem[(32 * idx) + _3802 + 32] + 256] = eth.balance(arg1)
                        else:
                            mem[mem[64] + 4] = arg1
                            require ext_code.size(0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7)
                            staticcall 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7.0x70a08231 with:
                                    gas gas_remaining wei
                                   args address(arg1)
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _13511 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            require idx < mem[_3802]
                            mem[mem[(32 * idx) + _3802 + 32] + 256] = mem[_13511]
                    else:
                        mem[mem[64] + 4] = arg1
                        require ext_code.size(address(_13306))
                        staticcall address(_13306).0x70a08231 with:
                                gas gas_remaining wei
                               args address(arg1)
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _13458 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        require idx < mem[_3802]
                        mem[mem[(32 * idx) + _3802 + 32] + 224] = mem[_13458]
                        require idx < mem[96]
                        if mem[mem[(32 * idx) + 128] + 44 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                            require idx < mem[_3802]
                            mem[mem[(32 * idx) + _3802 + 32] + 256] = eth.balance(arg1)
                        else:
                            mem[mem[64] + 4] = arg1
                            require ext_code.size(0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7)
                            staticcall 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7.0x70a08231 with:
                                    gas gas_remaining wei
                                   args address(arg1)
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _13571 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            require idx < mem[_3802]
                            mem[mem[(32 * idx) + _3802 + 32] + 256] = mem[_13571]
                else:
                    require ext_code.size(mem[_13351 + 12 len 20])
                    staticcall mem[_13351 + 12 len 20].getReserves() with:
                            gas gas_remaining wei
                    mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _13389 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 96
                    _13411 = mem[_13389]
                    require mem[_13389] == mem[_13389 + 18 len 14]
                    _13430 = mem[_13389 + 32]
                    require mem[_13389 + 32] == mem[_13389 + 50 len 14]
                    require mem[_13389 + 64] == mem[_13389 + 92 len 4]
                    require ext_code.size(address(_13355))
                    staticcall address(_13355).token0() with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _13481 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    require mem[_13481] == mem[_13481 + 12 len 20]
                    mem[mem[64] + 4] = arg1
                    require ext_code.size(address(_13355))
                    staticcall address(_13355).0x70a08231 with:
                            gas gas_remaining wei
                           args address(arg1)
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    if mem[_13481 + 12 len 20] == address(_13306):
                        _13577 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _13589 = mem[_13577]
                        require ext_code.size(address(_13355))
                        staticcall address(_13355).0x18160ddd with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _13621 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _13629 = mem[_13621]
                        if 10^18 * _13589 / 10^18 != _13589:
                            revert with 0, 'math-not-safe'
                        if (10^18 * _13589) + (mem[_13621] / 2) < 10^18 * _13589:
                            revert with 0, 'math-not-safe'
                        require mem[_13621]
                        if not (10^18 * _13589) + (mem[_13621] / 2) / mem[_13621]:
                            if not (10^18 * _13589) + (mem[_13621] / 2) / mem[_13621]:
                                _13753 = mem[64]
                                mem[64] = mem[64] + 352
                                mem[_13753] = 0
                                mem[_13753 + 32] = 0
                                mem[_13753 + 64] = address(_13355)
                                mem[_13753 + 96] = Mask(112, 0, _13411)
                                mem[_13753 + 128] = Mask(112, 0, _13430)
                                mem[_13753 + 160] = 0
                                mem[_13753 + 192] = 0
                                mem[_13753 + 224] = 0
                                mem[_13753 + 256] = 0
                                mem[_13753 + 288] = _13589
                                mem[_13753 + 320] = _13629
                                require idx < mem[_3802]
                                mem[(32 * idx) + _3802 + 32] = _13753
                                require idx < mem[96]
                                require idx < mem[_3802]
                                mem[_13753] = mem[mem[(32 * idx) + 128] + 12 len 20]
                                require idx < mem[96]
                                require idx < mem[_3802]
                                mem[_13753 + 32] = mem[mem[(32 * idx) + 128] + 44 len 20]
                                require idx < mem[96]
                                if mem[mem[(32 * idx) + 128] + 12 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                                    require idx < mem[_3802]
                                    mem[_13753 + 224] = eth.balance(arg1)
                                    require idx < mem[96]
                                    if mem[mem[(32 * idx) + 128] + 44 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                                        require idx < mem[_3802]
                                        mem[_13753 + 256] = eth.balance(arg1)
                                    else:
                                        mem[mem[64] + 4] = arg1
                                        require ext_code.size(0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7)
                                        staticcall 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7.0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(arg1)
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _14637 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require idx < mem[_3802]
                                        mem[_13753 + 256] = mem[_14637]
                                else:
                                    mem[mem[64] + 4] = arg1
                                    require ext_code.size(address(_13306))
                                    staticcall address(_13306).0x70a08231 with:
                                            gas gas_remaining wei
                                           args address(arg1)
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _14334 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require idx < mem[_3802]
                                    mem[_13753 + 224] = mem[_14334]
                                    require idx < mem[96]
                                    if mem[mem[(32 * idx) + 128] + 44 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                                        require idx < mem[_3802]
                                        mem[_13753 + 256] = eth.balance(arg1)
                                    else:
                                        mem[mem[64] + 4] = arg1
                                        require ext_code.size(0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7)
                                        staticcall 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7.0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(arg1)
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _15009 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require idx < mem[_3802]
                                        mem[_13753 + 256] = mem[_15009]
                            else:
                                require (10^18 * _13589) + (mem[_13621] / 2) / mem[_13621]
                                if Mask(112, 0, _13430) * (10^18 * _13589) + (mem[_13621] / 2) / mem[_13621] / (10^18 * _13589) + (mem[_13621] / 2) / mem[_13621] != Mask(112, 0, _13430):
                                    revert with 0, 'math-not-safe'
                                if (Mask(112, 0, _13430) * (10^18 * _13589) + (mem[_13621] / 2) / mem[_13621]) + 5 * 10^17 < Mask(112, 0, _13430) * (10^18 * _13589) + (mem[_13621] / 2) / mem[_13621]:
                                    revert with 0, 'math-not-safe'
                                _13798 = mem[64]
                                mem[64] = mem[64] + 352
                                mem[_13798] = 0
                                mem[_13798 + 32] = 0
                                mem[_13798 + 64] = address(_13355)
                                mem[_13798 + 96] = Mask(112, 0, _13411)
                                mem[_13798 + 128] = Mask(112, 0, _13430)
                                mem[_13798 + 160] = 0
                                mem[_13798 + 192] = (Mask(112, 0, _13430) * (10^18 * _13589) + (_13629 / 2) / _13629) + 5 * 10^17 / 10^18
                                mem[_13798 + 224] = 0
                                mem[_13798 + 256] = 0
                                mem[_13798 + 288] = _13589
                                mem[_13798 + 320] = _13629
                                require idx < mem[_3802]
                                mem[(32 * idx) + _3802 + 32] = _13798
                                require idx < mem[96]
                                require idx < mem[_3802]
                                mem[_13798] = mem[mem[(32 * idx) + 128] + 12 len 20]
                                require idx < mem[96]
                                require idx < mem[_3802]
                                mem[_13798 + 32] = mem[mem[(32 * idx) + 128] + 44 len 20]
                                require idx < mem[96]
                                if mem[mem[(32 * idx) + 128] + 12 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                                    require idx < mem[_3802]
                                    mem[_13798 + 224] = eth.balance(arg1)
                                    require idx < mem[96]
                                    if mem[mem[(32 * idx) + 128] + 44 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                                        require idx < mem[_3802]
                                        mem[_13798 + 256] = eth.balance(arg1)
                                    else:
                                        mem[mem[64] + 4] = arg1
                                        require ext_code.size(0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7)
                                        staticcall 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7.0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(arg1)
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _14740 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require idx < mem[_3802]
                                        mem[_13798 + 256] = mem[_14740]
                                else:
                                    mem[mem[64] + 4] = arg1
                                    require ext_code.size(address(_13306))
                                    staticcall address(_13306).0x70a08231 with:
                                            gas gas_remaining wei
                                           args address(arg1)
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _14420 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require idx < mem[_3802]
                                    mem[_13798 + 224] = mem[_14420]
                                    require idx < mem[96]
                                    if mem[mem[(32 * idx) + 128] + 44 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                                        require idx < mem[_3802]
                                        mem[_13798 + 256] = eth.balance(arg1)
                                    else:
                                        mem[mem[64] + 4] = arg1
                                        require ext_code.size(0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7)
                                        staticcall 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7.0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(arg1)
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _15082 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require idx < mem[_3802]
                                        mem[_13798 + 256] = mem[_15082]
                        else:
                            require (10^18 * _13589) + (mem[_13621] / 2) / mem[_13621]
                            if Mask(112, 0, _13411) * (10^18 * _13589) + (mem[_13621] / 2) / mem[_13621] / (10^18 * _13589) + (mem[_13621] / 2) / mem[_13621] != Mask(112, 0, _13411):
                                revert with 0, 'math-not-safe'
                            if (Mask(112, 0, _13411) * (10^18 * _13589) + (mem[_13621] / 2) / mem[_13621]) + 5 * 10^17 < Mask(112, 0, _13411) * (10^18 * _13589) + (mem[_13621] / 2) / mem[_13621]:
                                revert with 0, 'math-not-safe'
                            if not (10^18 * _13589) + (mem[_13621] / 2) / mem[_13621]:
                                _13800 = mem[64]
                                mem[64] = mem[64] + 352
                                mem[_13800] = 0
                                mem[_13800 + 32] = 0
                                mem[_13800 + 64] = address(_13355)
                                mem[_13800 + 96] = Mask(112, 0, _13411)
                                mem[_13800 + 128] = Mask(112, 0, _13430)
                                mem[_13800 + 160] = (Mask(112, 0, _13411) * (10^18 * _13589) + (_13629 / 2) / _13629) + 5 * 10^17 / 10^18
                                mem[_13800 + 192] = 0
                                mem[_13800 + 224] = 0
                                mem[_13800 + 256] = 0
                                mem[_13800 + 288] = _13589
                                mem[_13800 + 320] = _13629
                                require idx < mem[_3802]
                                mem[(32 * idx) + _3802 + 32] = _13800
                                require idx < mem[96]
                                require idx < mem[_3802]
                                mem[_13800] = mem[mem[(32 * idx) + 128] + 12 len 20]
                                require idx < mem[96]
                                require idx < mem[_3802]
                                mem[_13800 + 32] = mem[mem[(32 * idx) + 128] + 44 len 20]
                                require idx < mem[96]
                                if mem[mem[(32 * idx) + 128] + 12 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                                    require idx < mem[_3802]
                                    mem[_13800 + 224] = eth.balance(arg1)
                                    require idx < mem[96]
                                    if mem[mem[(32 * idx) + 128] + 44 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                                        require idx < mem[_3802]
                                        mem[_13800 + 256] = eth.balance(arg1)
                                    else:
                                        mem[mem[64] + 4] = arg1
                                        require ext_code.size(0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7)
                                        staticcall 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7.0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(arg1)
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _14741 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require idx < mem[_3802]
                                        mem[_13800 + 256] = mem[_14741]
                                else:
                                    mem[mem[64] + 4] = arg1
                                    require ext_code.size(address(_13306))
                                    staticcall address(_13306).0x70a08231 with:
                                            gas gas_remaining wei
                                           args address(arg1)
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _14422 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require idx < mem[_3802]
                                    mem[_13800 + 224] = mem[_14422]
                                    require idx < mem[96]
                                    if mem[mem[(32 * idx) + 128] + 44 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                                        require idx < mem[_3802]
                                        mem[_13800 + 256] = eth.balance(arg1)
                                    else:
                                        mem[mem[64] + 4] = arg1
                                        require ext_code.size(0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7)
                                        staticcall 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7.0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(arg1)
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _15083 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require idx < mem[_3802]
                                        mem[_13800 + 256] = mem[_15083]
                            else:
                                require (10^18 * _13589) + (mem[_13621] / 2) / mem[_13621]
                                if Mask(112, 0, _13430) * (10^18 * _13589) + (mem[_13621] / 2) / mem[_13621] / (10^18 * _13589) + (mem[_13621] / 2) / mem[_13621] != Mask(112, 0, _13430):
                                    revert with 0, 'math-not-safe'
                                if (Mask(112, 0, _13430) * (10^18 * _13589) + (mem[_13621] / 2) / mem[_13621]) + 5 * 10^17 < Mask(112, 0, _13430) * (10^18 * _13589) + (mem[_13621] / 2) / mem[_13621]:
                                    revert with 0, 'math-not-safe'
                                _13869 = mem[64]
                                mem[64] = mem[64] + 352
                                mem[_13869] = 0
                                mem[_13869 + 32] = 0
                                mem[_13869 + 64] = address(_13355)
                                mem[_13869 + 96] = Mask(112, 0, _13411)
                                mem[_13869 + 128] = Mask(112, 0, _13430)
                                mem[_13869 + 160] = (Mask(112, 0, _13411) * (10^18 * _13589) + (_13629 / 2) / _13629) + 5 * 10^17 / 10^18
                                mem[_13869 + 192] = (Mask(112, 0, _13430) * (10^18 * _13589) + (_13629 / 2) / _13629) + 5 * 10^17 / 10^18
                                mem[_13869 + 224] = 0
                                mem[_13869 + 256] = 0
                                mem[_13869 + 288] = _13589
                                mem[_13869 + 320] = _13629
                                require idx < mem[_3802]
                                mem[(32 * idx) + _3802 + 32] = _13869
                                require idx < mem[96]
                                require idx < mem[_3802]
                                mem[_13869] = mem[mem[(32 * idx) + 128] + 12 len 20]
                                require idx < mem[96]
                                require idx < mem[_3802]
                                mem[_13869 + 32] = mem[mem[(32 * idx) + 128] + 44 len 20]
                                require idx < mem[96]
                                if mem[mem[(32 * idx) + 128] + 12 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                                    require idx < mem[_3802]
                                    mem[_13869 + 224] = eth.balance(arg1)
                                    require idx < mem[96]
                                    if mem[mem[(32 * idx) + 128] + 44 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                                        require idx < mem[_3802]
                                        mem[_13869 + 256] = eth.balance(arg1)
                                    else:
                                        mem[mem[64] + 4] = arg1
                                        require ext_code.size(0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7)
                                        staticcall 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7.0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(arg1)
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _14845 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require idx < mem[_3802]
                                        mem[_13869 + 256] = mem[_14845]
                                else:
                                    mem[mem[64] + 4] = arg1
                                    require ext_code.size(address(_13306))
                                    staticcall address(_13306).0x70a08231 with:
                                            gas gas_remaining wei
                                           args address(arg1)
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _14533 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require idx < mem[_3802]
                                    mem[_13869 + 224] = mem[_14533]
                                    require idx < mem[96]
                                    if mem[mem[(32 * idx) + 128] + 44 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                                        require idx < mem[_3802]
                                        mem[_13869 + 256] = eth.balance(arg1)
                                    else:
                                        mem[mem[64] + 4] = arg1
                                        require ext_code.size(0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7)
                                        staticcall 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7.0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(arg1)
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _15124 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require idx < mem[_3802]
                                        mem[_13869 + 256] = mem[_15124]
                    else:
                        _13578 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _13590 = mem[_13578]
                        require ext_code.size(address(_13355))
                        staticcall address(_13355).0x18160ddd with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _13622 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _13630 = mem[_13622]
                        if 10^18 * _13590 / 10^18 != _13590:
                            revert with 0, 'math-not-safe'
                        if (10^18 * _13590) + (mem[_13622] / 2) < 10^18 * _13590:
                            revert with 0, 'math-not-safe'
                        require mem[_13622]
                        if not (10^18 * _13590) + (mem[_13622] / 2) / mem[_13622]:
                            if not (10^18 * _13590) + (mem[_13622] / 2) / mem[_13622]:
                                _13755 = mem[64]
                                mem[64] = mem[64] + 352
                                mem[_13755] = 0
                                mem[_13755 + 32] = 0
                                mem[_13755 + 64] = address(_13355)
                                mem[_13755 + 96] = Mask(112, 0, _13430)
                                mem[_13755 + 128] = Mask(112, 0, _13411)
                                mem[_13755 + 160] = 0
                                mem[_13755 + 192] = 0
                                mem[_13755 + 224] = 0
                                mem[_13755 + 256] = 0
                                mem[_13755 + 288] = _13590
                                mem[_13755 + 320] = _13630
                                require idx < mem[_3802]
                                mem[(32 * idx) + _3802 + 32] = _13755
                                require idx < mem[96]
                                require idx < mem[_3802]
                                mem[_13755] = mem[mem[(32 * idx) + 128] + 12 len 20]
                                require idx < mem[96]
                                require idx < mem[_3802]
                                mem[_13755 + 32] = mem[mem[(32 * idx) + 128] + 44 len 20]
                                require idx < mem[96]
                                if mem[mem[(32 * idx) + 128] + 12 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                                    require idx < mem[_3802]
                                    mem[_13755 + 224] = eth.balance(arg1)
                                    require idx < mem[96]
                                    if mem[mem[(32 * idx) + 128] + 44 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                                        require idx < mem[_3802]
                                        mem[_13755 + 256] = eth.balance(arg1)
                                    else:
                                        mem[mem[64] + 4] = arg1
                                        require ext_code.size(0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7)
                                        staticcall 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7.0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(arg1)
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _14646 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require idx < mem[_3802]
                                        mem[_13755 + 256] = mem[_14646]
                                else:
                                    mem[mem[64] + 4] = arg1
                                    require ext_code.size(address(_13306))
                                    staticcall address(_13306).0x70a08231 with:
                                            gas gas_remaining wei
                                           args address(arg1)
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _14341 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require idx < mem[_3802]
                                    mem[_13755 + 224] = mem[_14341]
                                    require idx < mem[96]
                                    if mem[mem[(32 * idx) + 128] + 44 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                                        require idx < mem[_3802]
                                        mem[_13755 + 256] = eth.balance(arg1)
                                    else:
                                        mem[mem[64] + 4] = arg1
                                        require ext_code.size(0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7)
                                        staticcall 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7.0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(arg1)
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _15017 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require idx < mem[_3802]
                                        mem[_13755 + 256] = mem[_15017]
                            else:
                                require (10^18 * _13590) + (mem[_13622] / 2) / mem[_13622]
                                if Mask(112, 0, _13411) * (10^18 * _13590) + (mem[_13622] / 2) / mem[_13622] / (10^18 * _13590) + (mem[_13622] / 2) / mem[_13622] != Mask(112, 0, _13411):
                                    revert with 0, 'math-not-safe'
                                if (Mask(112, 0, _13411) * (10^18 * _13590) + (mem[_13622] / 2) / mem[_13622]) + 5 * 10^17 < Mask(112, 0, _13411) * (10^18 * _13590) + (mem[_13622] / 2) / mem[_13622]:
                                    revert with 0, 'math-not-safe'
                                _13803 = mem[64]
                                mem[64] = mem[64] + 352
                                mem[_13803] = 0
                                mem[_13803 + 32] = 0
                                mem[_13803 + 64] = address(_13355)
                                mem[_13803 + 96] = Mask(112, 0, _13430)
                                mem[_13803 + 128] = Mask(112, 0, _13411)
                                mem[_13803 + 160] = 0
                                mem[_13803 + 192] = (Mask(112, 0, _13411) * (10^18 * _13590) + (_13630 / 2) / _13630) + 5 * 10^17 / 10^18
                                mem[_13803 + 224] = 0
                                mem[_13803 + 256] = 0
                                mem[_13803 + 288] = _13590
                                mem[_13803 + 320] = _13630
                                require idx < mem[_3802]
                                mem[(32 * idx) + _3802 + 32] = _13803
                                require idx < mem[96]
                                require idx < mem[_3802]
                                mem[_13803] = mem[mem[(32 * idx) + 128] + 12 len 20]
                                require idx < mem[96]
                                require idx < mem[_3802]
                                mem[_13803 + 32] = mem[mem[(32 * idx) + 128] + 44 len 20]
                                require idx < mem[96]
                                if mem[mem[(32 * idx) + 128] + 12 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                                    require idx < mem[_3802]
                                    mem[_13803 + 224] = eth.balance(arg1)
                                    require idx < mem[96]
                                    if mem[mem[(32 * idx) + 128] + 44 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                                        require idx < mem[_3802]
                                        mem[_13803 + 256] = eth.balance(arg1)
                                    else:
                                        mem[mem[64] + 4] = arg1
                                        require ext_code.size(0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7)
                                        staticcall 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7.0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(arg1)
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _14748 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require idx < mem[_3802]
                                        mem[_13803 + 256] = mem[_14748]
                                else:
                                    mem[mem[64] + 4] = arg1
                                    require ext_code.size(address(_13306))
                                    staticcall address(_13306).0x70a08231 with:
                                            gas gas_remaining wei
                                           args address(arg1)
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _14428 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require idx < mem[_3802]
                                    mem[_13803 + 224] = mem[_14428]
                                    require idx < mem[96]
                                    if mem[mem[(32 * idx) + 128] + 44 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                                        require idx < mem[_3802]
                                        mem[_13803 + 256] = eth.balance(arg1)
                                    else:
                                        mem[mem[64] + 4] = arg1
                                        require ext_code.size(0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7)
                                        staticcall 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7.0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(arg1)
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _15088 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require idx < mem[_3802]
                                        mem[_13803 + 256] = mem[_15088]
                        else:
                            require (10^18 * _13590) + (mem[_13622] / 2) / mem[_13622]
                            if Mask(112, 0, _13430) * (10^18 * _13590) + (mem[_13622] / 2) / mem[_13622] / (10^18 * _13590) + (mem[_13622] / 2) / mem[_13622] != Mask(112, 0, _13430):
                                revert with 0, 'math-not-safe'
                            if (Mask(112, 0, _13430) * (10^18 * _13590) + (mem[_13622] / 2) / mem[_13622]) + 5 * 10^17 < Mask(112, 0, _13430) * (10^18 * _13590) + (mem[_13622] / 2) / mem[_13622]:
                                revert with 0, 'math-not-safe'
                            if not (10^18 * _13590) + (mem[_13622] / 2) / mem[_13622]:
                                _13805 = mem[64]
                                mem[64] = mem[64] + 352
                                mem[_13805] = 0
                                mem[_13805 + 32] = 0
                                mem[_13805 + 64] = address(_13355)
                                mem[_13805 + 96] = Mask(112, 0, _13430)
                                mem[_13805 + 128] = Mask(112, 0, _13411)
                                mem[_13805 + 160] = (Mask(112, 0, _13430) * (10^18 * _13590) + (_13630 / 2) / _13630) + 5 * 10^17 / 10^18
                                mem[_13805 + 192] = 0
                                mem[_13805 + 224] = 0
                                mem[_13805 + 256] = 0
                                mem[_13805 + 288] = _13590
                                mem[_13805 + 320] = _13630
                                require idx < mem[_3802]
                                mem[(32 * idx) + _3802 + 32] = _13805
                                require idx < mem[96]
                                require idx < mem[_3802]
                                mem[_13805] = mem[mem[(32 * idx) + 128] + 12 len 20]
                                require idx < mem[96]
                                require idx < mem[_3802]
                                mem[_13805 + 32] = mem[mem[(32 * idx) + 128] + 44 len 20]
                                require idx < mem[96]
                                if mem[mem[(32 * idx) + 128] + 12 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                                    require idx < mem[_3802]
                                    mem[_13805 + 224] = eth.balance(arg1)
                                    require idx < mem[96]
                                    if mem[mem[(32 * idx) + 128] + 44 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                                        require idx < mem[_3802]
                                        mem[_13805 + 256] = eth.balance(arg1)
                                    else:
                                        mem[mem[64] + 4] = arg1
                                        require ext_code.size(0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7)
                                        staticcall 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7.0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(arg1)
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _14749 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require idx < mem[_3802]
                                        mem[_13805 + 256] = mem[_14749]
                                else:
                                    mem[mem[64] + 4] = arg1
                                    require ext_code.size(address(_13306))
                                    staticcall address(_13306).0x70a08231 with:
                                            gas gas_remaining wei
                                           args address(arg1)
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _14430 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require idx < mem[_3802]
                                    mem[_13805 + 224] = mem[_14430]
                                    require idx < mem[96]
                                    if mem[mem[(32 * idx) + 128] + 44 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                                        require idx < mem[_3802]
                                        mem[_13805 + 256] = eth.balance(arg1)
                                    else:
                                        mem[mem[64] + 4] = arg1
                                        require ext_code.size(0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7)
                                        staticcall 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7.0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(arg1)
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _15089 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require idx < mem[_3802]
                                        mem[_13805 + 256] = mem[_15089]
                            else:
                                require (10^18 * _13590) + (mem[_13622] / 2) / mem[_13622]
                                if Mask(112, 0, _13411) * (10^18 * _13590) + (mem[_13622] / 2) / mem[_13622] / (10^18 * _13590) + (mem[_13622] / 2) / mem[_13622] != Mask(112, 0, _13411):
                                    revert with 0, 'math-not-safe'
                                if (Mask(112, 0, _13411) * (10^18 * _13590) + (mem[_13622] / 2) / mem[_13622]) + 5 * 10^17 < Mask(112, 0, _13411) * (10^18 * _13590) + (mem[_13622] / 2) / mem[_13622]:
                                    revert with 0, 'math-not-safe'
                                _13875 = mem[64]
                                mem[64] = mem[64] + 352
                                mem[_13875] = 0
                                mem[_13875 + 32] = 0
                                mem[_13875 + 64] = address(_13355)
                                mem[_13875 + 96] = Mask(112, 0, _13430)
                                mem[_13875 + 128] = Mask(112, 0, _13411)
                                mem[_13875 + 160] = (Mask(112, 0, _13430) * (10^18 * _13590) + (_13630 / 2) / _13630) + 5 * 10^17 / 10^18
                                mem[_13875 + 192] = (Mask(112, 0, _13411) * (10^18 * _13590) + (_13630 / 2) / _13630) + 5 * 10^17 / 10^18
                                mem[_13875 + 224] = 0
                                mem[_13875 + 256] = 0
                                mem[_13875 + 288] = _13590
                                mem[_13875 + 320] = _13630
                                require idx < mem[_3802]
                                mem[(32 * idx) + _3802 + 32] = _13875
                                require idx < mem[96]
                                require idx < mem[_3802]
                                mem[_13875] = mem[mem[(32 * idx) + 128] + 12 len 20]
                                require idx < mem[96]
                                require idx < mem[_3802]
                                mem[_13875 + 32] = mem[mem[(32 * idx) + 128] + 44 len 20]
                                require idx < mem[96]
                                if mem[mem[(32 * idx) + 128] + 12 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                                    require idx < mem[_3802]
                                    mem[_13875 + 224] = eth.balance(arg1)
                                    require idx < mem[96]
                                    if mem[mem[(32 * idx) + 128] + 44 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                                        require idx < mem[_3802]
                                        mem[_13875 + 256] = eth.balance(arg1)
                                    else:
                                        mem[mem[64] + 4] = arg1
                                        require ext_code.size(0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7)
                                        staticcall 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7.0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(arg1)
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _14854 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require idx < mem[_3802]
                                        mem[_13875 + 256] = mem[_14854]
                                else:
                                    mem[mem[64] + 4] = arg1
                                    require ext_code.size(address(_13306))
                                    staticcall address(_13306).0x70a08231 with:
                                            gas gas_remaining wei
                                           args address(arg1)
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _14542 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require idx < mem[_3802]
                                    mem[_13875 + 224] = mem[_14542]
                                    require idx < mem[96]
                                    if mem[mem[(32 * idx) + 128] + 44 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                                        require idx < mem[_3802]
                                        mem[_13875 + 256] = eth.balance(arg1)
                                    else:
                                        mem[mem[64] + 4] = arg1
                                        require ext_code.size(0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7)
                                        staticcall 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7.0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(arg1)
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _15128 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require idx < mem[_3802]
                                        mem[_13875 + 256] = mem[_15128]
            else:
                _13333 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _13337 = mem[_13333]
                require mem[_13333] == mem[_13333 + 12 len 20]
                mem[mem[64] + 4] = address(_13306)
                mem[mem[64] + 36] = address(_13310)
                require ext_code.size(address(_13337))
                staticcall address(_13337).getPair(address arg1, address arg2) with:
                        gas gas_remaining wei
                       args address(_13306), address(_13310)
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _13349 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _13353 = mem[_13349]
                require mem[_13349] == mem[_13349 + 12 len 20]
                if not mem[_13349 + 12 len 20]:
                    require idx < mem[96]
                    require idx < mem[_3802]
                    mem[mem[(32 * idx) + _3802 + 32]] = mem[mem[(32 * idx) + 128] + 12 len 20]
                    require idx < mem[96]
                    require idx < mem[_3802]
                    mem[mem[(32 * idx) + _3802 + 32] + 32] = mem[mem[(32 * idx) + 128] + 44 len 20]
                    require idx < mem[96]
                    if mem[mem[(32 * idx) + 128] + 12 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                        require idx < mem[_3802]
                        mem[mem[(32 * idx) + _3802 + 32] + 224] = eth.balance(arg1)
                        require idx < mem[96]
                        if mem[mem[(32 * idx) + 128] + 44 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                            require idx < mem[_3802]
                            mem[mem[(32 * idx) + _3802 + 32] + 256] = eth.balance(arg1)
                        else:
                            mem[mem[64] + 4] = arg1
                            require ext_code.size(address(_13310))
                            staticcall address(_13310).0x70a08231 with:
                                    gas gas_remaining wei
                                   args address(arg1)
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _13508 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            require idx < mem[_3802]
                            mem[mem[(32 * idx) + _3802 + 32] + 256] = mem[_13508]
                    else:
                        mem[mem[64] + 4] = arg1
                        require ext_code.size(address(_13306))
                        staticcall address(_13306).0x70a08231 with:
                                gas gas_remaining wei
                               args address(arg1)
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _13450 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        require idx < mem[_3802]
                        mem[mem[(32 * idx) + _3802 + 32] + 224] = mem[_13450]
                        require idx < mem[96]
                        if mem[mem[(32 * idx) + 128] + 44 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                            require idx < mem[_3802]
                            mem[mem[(32 * idx) + _3802 + 32] + 256] = eth.balance(arg1)
                        else:
                            mem[mem[64] + 4] = arg1
                            require ext_code.size(address(_13310))
                            staticcall address(_13310).0x70a08231 with:
                                    gas gas_remaining wei
                                   args address(arg1)
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _13567 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            require idx < mem[_3802]
                            mem[mem[(32 * idx) + _3802 + 32] + 256] = mem[_13567]
                else:
                    require ext_code.size(mem[_13349 + 12 len 20])
                    staticcall mem[_13349 + 12 len 20].getReserves() with:
                            gas gas_remaining wei
                    mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _13380 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 96
                    _13408 = mem[_13380]
                    require mem[_13380] == mem[_13380 + 18 len 14]
                    _13424 = mem[_13380 + 32]
                    require mem[_13380 + 32] == mem[_13380 + 50 len 14]
                    require mem[_13380 + 64] == mem[_13380 + 92 len 4]
                    require ext_code.size(address(_13353))
                    staticcall address(_13353).token0() with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _13473 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    require mem[_13473] == mem[_13473 + 12 len 20]
                    mem[mem[64] + 4] = arg1
                    require ext_code.size(address(_13353))
                    staticcall address(_13353).0x70a08231 with:
                            gas gas_remaining wei
                           args address(arg1)
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    if mem[_13473 + 12 len 20] == address(_13306):
                        _13572 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _13584 = mem[_13572]
                        require ext_code.size(address(_13353))
                        staticcall address(_13353).0x18160ddd with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _13616 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _13625 = mem[_13616]
                        if 10^18 * _13584 / 10^18 != _13584:
                            revert with 0, 'math-not-safe'
                        if (10^18 * _13584) + (mem[_13616] / 2) < 10^18 * _13584:
                            revert with 0, 'math-not-safe'
                        require mem[_13616]
                        if not (10^18 * _13584) + (mem[_13616] / 2) / mem[_13616]:
                            if not (10^18 * _13584) + (mem[_13616] / 2) / mem[_13616]:
                                _13741 = mem[64]
                                mem[64] = mem[64] + 352
                                mem[_13741] = 0
                                mem[_13741 + 32] = 0
                                mem[_13741 + 64] = address(_13353)
                                mem[_13741 + 96] = Mask(112, 0, _13408)
                                mem[_13741 + 128] = Mask(112, 0, _13424)
                                mem[_13741 + 160] = 0
                                mem[_13741 + 192] = 0
                                mem[_13741 + 224] = 0
                                mem[_13741 + 256] = 0
                                mem[_13741 + 288] = _13584
                                mem[_13741 + 320] = _13625
                                require idx < mem[_3802]
                                mem[(32 * idx) + _3802 + 32] = _13741
                                require idx < mem[96]
                                require idx < mem[_3802]
                                mem[_13741] = mem[mem[(32 * idx) + 128] + 12 len 20]
                                require idx < mem[96]
                                require idx < mem[_3802]
                                mem[_13741 + 32] = mem[mem[(32 * idx) + 128] + 44 len 20]
                                require idx < mem[96]
                                if mem[mem[(32 * idx) + 128] + 12 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                                    require idx < mem[_3802]
                                    mem[_13741 + 224] = eth.balance(arg1)
                                    require idx < mem[96]
                                    if mem[mem[(32 * idx) + 128] + 44 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                                        require idx < mem[_3802]
                                        mem[_13741 + 256] = eth.balance(arg1)
                                    else:
                                        mem[mem[64] + 4] = arg1
                                        require ext_code.size(address(_13310))
                                        staticcall address(_13310).0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(arg1)
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _14591 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require idx < mem[_3802]
                                        mem[_13741 + 256] = mem[_14591]
                                else:
                                    mem[mem[64] + 4] = arg1
                                    require ext_code.size(address(_13306))
                                    staticcall address(_13306).0x70a08231 with:
                                            gas gas_remaining wei
                                           args address(arg1)
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _14298 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require idx < mem[_3802]
                                    mem[_13741 + 224] = mem[_14298]
                                    require idx < mem[96]
                                    if mem[mem[(32 * idx) + 128] + 44 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                                        require idx < mem[_3802]
                                        mem[_13741 + 256] = eth.balance(arg1)
                                    else:
                                        mem[mem[64] + 4] = arg1
                                        require ext_code.size(address(_13310))
                                        staticcall address(_13310).0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(arg1)
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _14963 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require idx < mem[_3802]
                                        mem[_13741 + 256] = mem[_14963]
                            else:
                                require (10^18 * _13584) + (mem[_13616] / 2) / mem[_13616]
                                if Mask(112, 0, _13424) * (10^18 * _13584) + (mem[_13616] / 2) / mem[_13616] / (10^18 * _13584) + (mem[_13616] / 2) / mem[_13616] != Mask(112, 0, _13424):
                                    revert with 0, 'math-not-safe'
                                if (Mask(112, 0, _13424) * (10^18 * _13584) + (mem[_13616] / 2) / mem[_13616]) + 5 * 10^17 < Mask(112, 0, _13424) * (10^18 * _13584) + (mem[_13616] / 2) / mem[_13616]:
                                    revert with 0, 'math-not-safe'
                                _13774 = mem[64]
                                mem[64] = mem[64] + 352
                                mem[_13774] = 0
                                mem[_13774 + 32] = 0
                                mem[_13774 + 64] = address(_13353)
                                mem[_13774 + 96] = Mask(112, 0, _13408)
                                mem[_13774 + 128] = Mask(112, 0, _13424)
                                mem[_13774 + 160] = 0
                                mem[_13774 + 192] = (Mask(112, 0, _13424) * (10^18 * _13584) + (_13625 / 2) / _13625) + 5 * 10^17 / 10^18
                                mem[_13774 + 224] = 0
                                mem[_13774 + 256] = 0
                                mem[_13774 + 288] = _13584
                                mem[_13774 + 320] = _13625
                                require idx < mem[_3802]
                                mem[(32 * idx) + _3802 + 32] = _13774
                                require idx < mem[96]
                                require idx < mem[_3802]
                                mem[_13774] = mem[mem[(32 * idx) + 128] + 12 len 20]
                                require idx < mem[96]
                                require idx < mem[_3802]
                                mem[_13774 + 32] = mem[mem[(32 * idx) + 128] + 44 len 20]
                                require idx < mem[96]
                                if mem[mem[(32 * idx) + 128] + 12 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                                    require idx < mem[_3802]
                                    mem[_13774 + 224] = eth.balance(arg1)
                                    require idx < mem[96]
                                    if mem[mem[(32 * idx) + 128] + 44 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                                        require idx < mem[_3802]
                                        mem[_13774 + 256] = eth.balance(arg1)
                                    else:
                                        mem[mem[64] + 4] = arg1
                                        require ext_code.size(address(_13310))
                                        staticcall address(_13310).0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(arg1)
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _14700 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require idx < mem[_3802]
                                        mem[_13774 + 256] = mem[_14700]
                                else:
                                    mem[mem[64] + 4] = arg1
                                    require ext_code.size(address(_13306))
                                    staticcall address(_13306).0x70a08231 with:
                                            gas gas_remaining wei
                                           args address(arg1)
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _14382 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require idx < mem[_3802]
                                    mem[_13774 + 224] = mem[_14382]
                                    require idx < mem[96]
                                    if mem[mem[(32 * idx) + 128] + 44 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                                        require idx < mem[_3802]
                                        mem[_13774 + 256] = eth.balance(arg1)
                                    else:
                                        mem[mem[64] + 4] = arg1
                                        require ext_code.size(address(_13310))
                                        staticcall address(_13310).0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(arg1)
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _15054 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require idx < mem[_3802]
                                        mem[_13774 + 256] = mem[_15054]
                        else:
                            require (10^18 * _13584) + (mem[_13616] / 2) / mem[_13616]
                            if Mask(112, 0, _13408) * (10^18 * _13584) + (mem[_13616] / 2) / mem[_13616] / (10^18 * _13584) + (mem[_13616] / 2) / mem[_13616] != Mask(112, 0, _13408):
                                revert with 0, 'math-not-safe'
                            if (Mask(112, 0, _13408) * (10^18 * _13584) + (mem[_13616] / 2) / mem[_13616]) + 5 * 10^17 < Mask(112, 0, _13408) * (10^18 * _13584) + (mem[_13616] / 2) / mem[_13616]:
                                revert with 0, 'math-not-safe'
                            if not (10^18 * _13584) + (mem[_13616] / 2) / mem[_13616]:
                                _13776 = mem[64]
                                mem[64] = mem[64] + 352
                                mem[_13776] = 0
                                mem[_13776 + 32] = 0
                                mem[_13776 + 64] = address(_13353)
                                mem[_13776 + 96] = Mask(112, 0, _13408)
                                mem[_13776 + 128] = Mask(112, 0, _13424)
                                mem[_13776 + 160] = (Mask(112, 0, _13408) * (10^18 * _13584) + (_13625 / 2) / _13625) + 5 * 10^17 / 10^18
                                mem[_13776 + 192] = 0
                                mem[_13776 + 224] = 0
                                mem[_13776 + 256] = 0
                                mem[_13776 + 288] = _13584
                                mem[_13776 + 320] = _13625
                                require idx < mem[_3802]
                                mem[(32 * idx) + _3802 + 32] = _13776
                                require idx < mem[96]
                                require idx < mem[_3802]
                                mem[_13776] = mem[mem[(32 * idx) + 128] + 12 len 20]
                                require idx < mem[96]
                                require idx < mem[_3802]
                                mem[_13776 + 32] = mem[mem[(32 * idx) + 128] + 44 len 20]
                                require idx < mem[96]
                                if mem[mem[(32 * idx) + 128] + 12 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                                    require idx < mem[_3802]
                                    mem[_13776 + 224] = eth.balance(arg1)
                                    require idx < mem[96]
                                    if mem[mem[(32 * idx) + 128] + 44 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                                        require idx < mem[_3802]
                                        mem[_13776 + 256] = eth.balance(arg1)
                                    else:
                                        mem[mem[64] + 4] = arg1
                                        require ext_code.size(address(_13310))
                                        staticcall address(_13310).0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(arg1)
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _14701 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require idx < mem[_3802]
                                        mem[_13776 + 256] = mem[_14701]
                                else:
                                    mem[mem[64] + 4] = arg1
                                    require ext_code.size(address(_13306))
                                    staticcall address(_13306).0x70a08231 with:
                                            gas gas_remaining wei
                                           args address(arg1)
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _14384 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require idx < mem[_3802]
                                    mem[_13776 + 224] = mem[_14384]
                                    require idx < mem[96]
                                    if mem[mem[(32 * idx) + 128] + 44 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                                        require idx < mem[_3802]
                                        mem[_13776 + 256] = eth.balance(arg1)
                                    else:
                                        mem[mem[64] + 4] = arg1
                                        require ext_code.size(address(_13310))
                                        staticcall address(_13310).0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(arg1)
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _15055 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require idx < mem[_3802]
                                        mem[_13776 + 256] = mem[_15055]
                            else:
                                require (10^18 * _13584) + (mem[_13616] / 2) / mem[_13616]
                                if Mask(112, 0, _13424) * (10^18 * _13584) + (mem[_13616] / 2) / mem[_13616] / (10^18 * _13584) + (mem[_13616] / 2) / mem[_13616] != Mask(112, 0, _13424):
                                    revert with 0, 'math-not-safe'
                                if (Mask(112, 0, _13424) * (10^18 * _13584) + (mem[_13616] / 2) / mem[_13616]) + 5 * 10^17 < Mask(112, 0, _13424) * (10^18 * _13584) + (mem[_13616] / 2) / mem[_13616]:
                                    revert with 0, 'math-not-safe'
                                _13839 = mem[64]
                                mem[64] = mem[64] + 352
                                mem[_13839] = 0
                                mem[_13839 + 32] = 0
                                mem[_13839 + 64] = address(_13353)
                                mem[_13839 + 96] = Mask(112, 0, _13408)
                                mem[_13839 + 128] = Mask(112, 0, _13424)
                                mem[_13839 + 160] = (Mask(112, 0, _13408) * (10^18 * _13584) + (_13625 / 2) / _13625) + 5 * 10^17 / 10^18
                                mem[_13839 + 192] = (Mask(112, 0, _13424) * (10^18 * _13584) + (_13625 / 2) / _13625) + 5 * 10^17 / 10^18
                                mem[_13839 + 224] = 0
                                mem[_13839 + 256] = 0
                                mem[_13839 + 288] = _13584
                                mem[_13839 + 320] = _13625
                                require idx < mem[_3802]
                                mem[(32 * idx) + _3802 + 32] = _13839
                                require idx < mem[96]
                                require idx < mem[_3802]
                                mem[_13839] = mem[mem[(32 * idx) + 128] + 12 len 20]
                                require idx < mem[96]
                                require idx < mem[_3802]
                                mem[_13839 + 32] = mem[mem[(32 * idx) + 128] + 44 len 20]
                                require idx < mem[96]
                                if mem[mem[(32 * idx) + 128] + 12 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                                    require idx < mem[_3802]
                                    mem[_13839 + 224] = eth.balance(arg1)
                                    require idx < mem[96]
                                    if mem[mem[(32 * idx) + 128] + 44 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                                        require idx < mem[_3802]
                                        mem[_13839 + 256] = eth.balance(arg1)
                                    else:
                                        mem[mem[64] + 4] = arg1
                                        require ext_code.size(address(_13310))
                                        staticcall address(_13310).0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(arg1)
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _14801 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require idx < mem[_3802]
                                        mem[_13839 + 256] = mem[_14801]
                                else:
                                    mem[mem[64] + 4] = arg1
                                    require ext_code.size(address(_13306))
                                    staticcall address(_13306).0x70a08231 with:
                                            gas gas_remaining wei
                                           args address(arg1)
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _14487 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require idx < mem[_3802]
                                    mem[_13839 + 224] = mem[_14487]
                                    require idx < mem[96]
                                    if mem[mem[(32 * idx) + 128] + 44 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                                        require idx < mem[_3802]
                                        mem[_13839 + 256] = eth.balance(arg1)
                                    else:
                                        mem[mem[64] + 4] = arg1
                                        require ext_code.size(address(_13310))
                                        staticcall address(_13310).0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(arg1)
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _15108 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require idx < mem[_3802]
                                        mem[_13839 + 256] = mem[_15108]
                    else:
                        _13573 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _13585 = mem[_13573]
                        require ext_code.size(address(_13353))
                        staticcall address(_13353).0x18160ddd with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _13617 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _13626 = mem[_13617]
                        if 10^18 * _13585 / 10^18 != _13585:
                            revert with 0, 'math-not-safe'
                        if (10^18 * _13585) + (mem[_13617] / 2) < 10^18 * _13585:
                            revert with 0, 'math-not-safe'
                        require mem[_13617]
                        if not (10^18 * _13585) + (mem[_13617] / 2) / mem[_13617]:
                            if not (10^18 * _13585) + (mem[_13617] / 2) / mem[_13617]:
                                _13743 = mem[64]
                                mem[64] = mem[64] + 352
                                mem[_13743] = 0
                                mem[_13743 + 32] = 0
                                mem[_13743 + 64] = address(_13353)
                                mem[_13743 + 96] = Mask(112, 0, _13424)
                                mem[_13743 + 128] = Mask(112, 0, _13408)
                                mem[_13743 + 160] = 0
                                mem[_13743 + 192] = 0
                                mem[_13743 + 224] = 0
                                mem[_13743 + 256] = 0
                                mem[_13743 + 288] = _13585
                                mem[_13743 + 320] = _13626
                                require idx < mem[_3802]
                                mem[(32 * idx) + _3802 + 32] = _13743
                                require idx < mem[96]
                                require idx < mem[_3802]
                                mem[_13743] = mem[mem[(32 * idx) + 128] + 12 len 20]
                                require idx < mem[96]
                                require idx < mem[_3802]
                                mem[_13743 + 32] = mem[mem[(32 * idx) + 128] + 44 len 20]
                                require idx < mem[96]
                                if mem[mem[(32 * idx) + 128] + 12 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                                    require idx < mem[_3802]
                                    mem[_13743 + 224] = eth.balance(arg1)
                                    require idx < mem[96]
                                    if mem[mem[(32 * idx) + 128] + 44 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                                        require idx < mem[_3802]
                                        mem[_13743 + 256] = eth.balance(arg1)
                                    else:
                                        mem[mem[64] + 4] = arg1
                                        require ext_code.size(address(_13310))
                                        staticcall address(_13310).0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(arg1)
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _14600 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require idx < mem[_3802]
                                        mem[_13743 + 256] = mem[_14600]
                                else:
                                    mem[mem[64] + 4] = arg1
                                    require ext_code.size(address(_13306))
                                    staticcall address(_13306).0x70a08231 with:
                                            gas gas_remaining wei
                                           args address(arg1)
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _14305 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require idx < mem[_3802]
                                    mem[_13743 + 224] = mem[_14305]
                                    require idx < mem[96]
                                    if mem[mem[(32 * idx) + 128] + 44 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                                        require idx < mem[_3802]
                                        mem[_13743 + 256] = eth.balance(arg1)
                                    else:
                                        mem[mem[64] + 4] = arg1
                                        require ext_code.size(address(_13310))
                                        staticcall address(_13310).0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(arg1)
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _14971 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require idx < mem[_3802]
                                        mem[_13743 + 256] = mem[_14971]
                            else:
                                require (10^18 * _13585) + (mem[_13617] / 2) / mem[_13617]
                                if Mask(112, 0, _13408) * (10^18 * _13585) + (mem[_13617] / 2) / mem[_13617] / (10^18 * _13585) + (mem[_13617] / 2) / mem[_13617] != Mask(112, 0, _13408):
                                    revert with 0, 'math-not-safe'
                                if (Mask(112, 0, _13408) * (10^18 * _13585) + (mem[_13617] / 2) / mem[_13617]) + 5 * 10^17 < Mask(112, 0, _13408) * (10^18 * _13585) + (mem[_13617] / 2) / mem[_13617]:
                                    revert with 0, 'math-not-safe'
                                _13779 = mem[64]
                                mem[64] = mem[64] + 352
                                mem[_13779] = 0
                                mem[_13779 + 32] = 0
                                mem[_13779 + 64] = address(_13353)
                                mem[_13779 + 96] = Mask(112, 0, _13424)
                                mem[_13779 + 128] = Mask(112, 0, _13408)
                                mem[_13779 + 160] = 0
                                mem[_13779 + 192] = (Mask(112, 0, _13408) * (10^18 * _13585) + (_13626 / 2) / _13626) + 5 * 10^17 / 10^18
                                mem[_13779 + 224] = 0
                                mem[_13779 + 256] = 0
                                mem[_13779 + 288] = _13585
                                mem[_13779 + 320] = _13626
                                require idx < mem[_3802]
                                mem[(32 * idx) + _3802 + 32] = _13779
                                require idx < mem[96]
                                require idx < mem[_3802]
                                mem[_13779] = mem[mem[(32 * idx) + 128] + 12 len 20]
                                require idx < mem[96]
                                require idx < mem[_3802]
                                mem[_13779 + 32] = mem[mem[(32 * idx) + 128] + 44 len 20]
                                require idx < mem[96]
                                if mem[mem[(32 * idx) + 128] + 12 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                                    require idx < mem[_3802]
                                    mem[_13779 + 224] = eth.balance(arg1)
                                    require idx < mem[96]
                                    if mem[mem[(32 * idx) + 128] + 44 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                                        require idx < mem[_3802]
                                        mem[_13779 + 256] = eth.balance(arg1)
                                    else:
                                        mem[mem[64] + 4] = arg1
                                        require ext_code.size(address(_13310))
                                        staticcall address(_13310).0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(arg1)
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _14708 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require idx < mem[_3802]
                                        mem[_13779 + 256] = mem[_14708]
                                else:
                                    mem[mem[64] + 4] = arg1
                                    require ext_code.size(address(_13306))
                                    staticcall address(_13306).0x70a08231 with:
                                            gas gas_remaining wei
                                           args address(arg1)
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _14390 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require idx < mem[_3802]
                                    mem[_13779 + 224] = mem[_14390]
                                    require idx < mem[96]
                                    if mem[mem[(32 * idx) + 128] + 44 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                                        require idx < mem[_3802]
                                        mem[_13779 + 256] = eth.balance(arg1)
                                    else:
                                        mem[mem[64] + 4] = arg1
                                        require ext_code.size(address(_13310))
                                        staticcall address(_13310).0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(arg1)
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _15060 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require idx < mem[_3802]
                                        mem[_13779 + 256] = mem[_15060]
                        else:
                            require (10^18 * _13585) + (mem[_13617] / 2) / mem[_13617]
                            if Mask(112, 0, _13424) * (10^18 * _13585) + (mem[_13617] / 2) / mem[_13617] / (10^18 * _13585) + (mem[_13617] / 2) / mem[_13617] != Mask(112, 0, _13424):
                                revert with 0, 'math-not-safe'
                            if (Mask(112, 0, _13424) * (10^18 * _13585) + (mem[_13617] / 2) / mem[_13617]) + 5 * 10^17 < Mask(112, 0, _13424) * (10^18 * _13585) + (mem[_13617] / 2) / mem[_13617]:
                                revert with 0, 'math-not-safe'
                            if not (10^18 * _13585) + (mem[_13617] / 2) / mem[_13617]:
                                _13781 = mem[64]
                                mem[64] = mem[64] + 352
                                mem[_13781] = 0
                                mem[_13781 + 32] = 0
                                mem[_13781 + 64] = address(_13353)
                                mem[_13781 + 96] = Mask(112, 0, _13424)
                                mem[_13781 + 128] = Mask(112, 0, _13408)
                                mem[_13781 + 160] = (Mask(112, 0, _13424) * (10^18 * _13585) + (_13626 / 2) / _13626) + 5 * 10^17 / 10^18
                                mem[_13781 + 192] = 0
                                mem[_13781 + 224] = 0
                                mem[_13781 + 256] = 0
                                mem[_13781 + 288] = _13585
                                mem[_13781 + 320] = _13626
                                require idx < mem[_3802]
                                mem[(32 * idx) + _3802 + 32] = _13781
                                require idx < mem[96]
                                require idx < mem[_3802]
                                mem[_13781] = mem[mem[(32 * idx) + 128] + 12 len 20]
                                require idx < mem[96]
                                require idx < mem[_3802]
                                mem[_13781 + 32] = mem[mem[(32 * idx) + 128] + 44 len 20]
                                require idx < mem[96]
                                if mem[mem[(32 * idx) + 128] + 12 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                                    require idx < mem[_3802]
                                    mem[_13781 + 224] = eth.balance(arg1)
                                    require idx < mem[96]
                                    if mem[mem[(32 * idx) + 128] + 44 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                                        require idx < mem[_3802]
                                        mem[_13781 + 256] = eth.balance(arg1)
                                    else:
                                        mem[mem[64] + 4] = arg1
                                        require ext_code.size(address(_13310))
                                        staticcall address(_13310).0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(arg1)
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _14709 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require idx < mem[_3802]
                                        mem[_13781 + 256] = mem[_14709]
                                else:
                                    mem[mem[64] + 4] = arg1
                                    require ext_code.size(address(_13306))
                                    staticcall address(_13306).0x70a08231 with:
                                            gas gas_remaining wei
                                           args address(arg1)
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _14392 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require idx < mem[_3802]
                                    mem[_13781 + 224] = mem[_14392]
                                    require idx < mem[96]
                                    if mem[mem[(32 * idx) + 128] + 44 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                                        require idx < mem[_3802]
                                        mem[_13781 + 256] = eth.balance(arg1)
                                    else:
                                        mem[mem[64] + 4] = arg1
                                        require ext_code.size(address(_13310))
                                        staticcall address(_13310).0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(arg1)
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _15061 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require idx < mem[_3802]
                                        mem[_13781 + 256] = mem[_15061]
                            else:
                                require (10^18 * _13585) + (mem[_13617] / 2) / mem[_13617]
                                if Mask(112, 0, _13408) * (10^18 * _13585) + (mem[_13617] / 2) / mem[_13617] / (10^18 * _13585) + (mem[_13617] / 2) / mem[_13617] != Mask(112, 0, _13408):
                                    revert with 0, 'math-not-safe'
                                if (Mask(112, 0, _13408) * (10^18 * _13585) + (mem[_13617] / 2) / mem[_13617]) + 5 * 10^17 < Mask(112, 0, _13408) * (10^18 * _13585) + (mem[_13617] / 2) / mem[_13617]:
                                    revert with 0, 'math-not-safe'
                                _13845 = mem[64]
                                mem[64] = mem[64] + 352
                                mem[_13845] = 0
                                mem[_13845 + 32] = 0
                                mem[_13845 + 64] = address(_13353)
                                mem[_13845 + 96] = Mask(112, 0, _13424)
                                mem[_13845 + 128] = Mask(112, 0, _13408)
                                mem[_13845 + 160] = (Mask(112, 0, _13424) * (10^18 * _13585) + (_13626 / 2) / _13626) + 5 * 10^17 / 10^18
                                mem[_13845 + 192] = (Mask(112, 0, _13408) * (10^18 * _13585) + (_13626 / 2) / _13626) + 5 * 10^17 / 10^18
                                mem[_13845 + 224] = 0
                                mem[_13845 + 256] = 0
                                mem[_13845 + 288] = _13585
                                mem[_13845 + 320] = _13626
                                require idx < mem[_3802]
                                mem[(32 * idx) + _3802 + 32] = _13845
                                require idx < mem[96]
                                require idx < mem[_3802]
                                mem[_13845] = mem[mem[(32 * idx) + 128] + 12 len 20]
                                require idx < mem[96]
                                require idx < mem[_3802]
                                mem[_13845 + 32] = mem[mem[(32 * idx) + 128] + 44 len 20]
                                require idx < mem[96]
                                if mem[mem[(32 * idx) + 128] + 12 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                                    require idx < mem[_3802]
                                    mem[_13845 + 224] = eth.balance(arg1)
                                    require idx < mem[96]
                                    if mem[mem[(32 * idx) + 128] + 44 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                                        require idx < mem[_3802]
                                        mem[_13845 + 256] = eth.balance(arg1)
                                    else:
                                        mem[mem[64] + 4] = arg1
                                        require ext_code.size(address(_13310))
                                        staticcall address(_13310).0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(arg1)
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _14810 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require idx < mem[_3802]
                                        mem[_13845 + 256] = mem[_14810]
                                else:
                                    mem[mem[64] + 4] = arg1
                                    require ext_code.size(address(_13306))
                                    staticcall address(_13306).0x70a08231 with:
                                            gas gas_remaining wei
                                           args address(arg1)
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _14496 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require idx < mem[_3802]
                                    mem[_13845 + 224] = mem[_14496]
                                    require idx < mem[96]
                                    if mem[mem[(32 * idx) + 128] + 44 len 20] == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:
                                        require idx < mem[_3802]
                                        mem[_13845 + 256] = eth.balance(arg1)
                                    else:
                                        mem[mem[64] + 4] = arg1
                                        require ext_code.size(address(_13310))
                                        staticcall address(_13310).0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(arg1)
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _15112 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require idx < mem[_3802]
                                        mem[_13845 + 256] = mem[_15112]
        idx = idx + 1
        continue 
    _13308 = mem[64]
    mem[mem[64]] = 32
    _13311 = mem[_3802]
    mem[mem[64] + 32] = mem[_3802]
    idx = 0
    s = mem[64] + 64
    t = _3802 + 32
    while idx < _13311:
        _15201 = mem[t]
        mem[s] = mem[mem[t] + 12 len 20]
        mem[s + 32] = mem[_15201 + 44 len 20]
        mem[s + 64] = mem[_15201 + 76 len 20]
        mem[s + 96] = mem[_15201 + 96]
        mem[s + 128] = mem[_15201 + 128]
        mem[s + 160] = mem[_15201 + 160]
        mem[s + 192] = mem[_15201 + 192]
        mem[s + 224] = mem[_15201 + 224]
        mem[s + 256] = mem[_15201 + 256]
        mem[s + 288] = mem[_15201 + 288]
        mem[s + 320] = mem[_15201 + 320]
        idx = idx + 1
        s = s + 352
        t = t + 32
        continue 
    return memory
      from mem[64]
       len _13308 + (352 * _13311) + -mem[64] + 64
}



}
