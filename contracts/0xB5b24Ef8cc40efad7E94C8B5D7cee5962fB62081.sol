contract main {




// =====================  Runtime code  =====================


#
#  - transferFrom(address arg1, address arg2, uint256 arg3)
#  - _fallback()
#
const decimals = 18


mapping of uint256 balanceOf;
mapping of struct allowance;
uint256 totalSupply;
array of struct stor3;
array of struct stor4;
address owner;
address uniswapV2RouterAddress;
uint8 stor7; offset 160
address uniswapV2PairAddress;
address dividendTrackerAddress;
address deadWalletAddress;
uint256 swapTokensAtAmount;
uint256 maxTxAmount;
uint256 maxSellTransactionAmount;
uint256 maxWalletBalance;
uint256 sellFeeIncreaseFactor;
uint256 aVAXRewardsFee;
uint256 liquidityFee;
uint256 marketingFee;
uint256 totalFees;
address _marketingWalletAddress;
uint256 gasForProcessing;
mapping of uint8 stor21;
mapping of uint8 stor22;

function maxSellTransactionAmount() {
    return maxSellTransactionAmount
}

function totalFees() {
    return totalFees
}

function uniswapV2Router() {
    return uniswapV2RouterAddress
}

function totalSupply() {
    return totalSupply
}

function sellFeeIncreaseFactor() {
    return sellFeeIncreaseFactor
}

function dividendTracker() {
    return dividendTrackerAddress
}

function _marketingWalletAddress() {
    return _marketingWalletAddress
}

function uniswapV2Pair() {
    return uniswapV2PairAddress
}

function isExcludedFromFees(address arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    return bool(stor21[address(arg1)])
}

function marketingFee() {
    return marketingFee
}

function balanceOf(address arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    return balanceOf[address(arg1)]
}

function deadWallet() {
    return deadWalletAddress
}

function maxTxAmount() {
    return maxTxAmount
}

function owner() {
    return owner
}

function liquidityFee() {
    return liquidityFee
}

function gasForProcessing() {
    return gasForProcessing
}

function AVAXRewardsFee() {
    return aVAXRewardsFee
}

function automatedMarketMakerPairs(address arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    return bool(stor22[arg1])
}

function maxWalletBalance() {
    return maxWalletBalance
}

function allowance(address arg1, address arg2) {
    require calldata.size - 4 >= 64
    require arg1 == arg1
    require arg2 == arg2
    return allowance[address(arg1)][address(arg2)].field_0
}

function swapTokensAtAmount() {
    return swapTokensAtAmount
}

function renounceOwnership() {
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    owner = 0
    emit OwnershipTransferred(owner, 0);
}

function setSwapTokensAtAmount(uint256 arg1) {
    require calldata.size - 4 >= 32
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    swapTokensAtAmount = arg1
}

function setSellFeeIncreaseFactor(uint256 arg1) {
    require calldata.size - 4 >= 32
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    sellFeeIncreaseFactor = arg1
}

function setMarketingWallet(address arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    _marketingWalletAddress = arg1
}

function getClaimWait() {
    staticcall dividendTrackerAddress.claimWait() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    return ext_call.return_data[0]
}

function getLastProcessedIndex() {
    staticcall dividendTrackerAddress.0xe7841ec0 with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    return ext_call.return_data[0]
}

function setMaxTxAmount(uint256 arg1) {
    require calldata.size - 4 >= 32
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    if arg1 > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
        revert with 'NH{q', 17
    maxTxAmount = 10^18 * arg1
}

function setMaxWalletBalance(uint256 arg1) {
    require calldata.size - 4 >= 32
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    if arg1 > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
        revert with 'NH{q', 17
    maxWalletBalance = 10^18 * arg1
}

function getTotalDividendsDistributed() {
    staticcall dividendTrackerAddress.totalDividendsDistributed() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    return ext_call.return_data[0]
}

function getNumberOfDividendTokenHolders() {
    staticcall dividendTrackerAddress.getNumberOfTokenHolders() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    return ext_call.return_data[0]
}

function claim() {
    call dividendTrackerAddress.processAccount(address arg1, bool arg2) with:
         gas gas_remaining wei
        args msg.sender, 0
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == bool(ext_call.return_data[0])
}

function setAVAXRewardsFee(uint256 arg1) {
    require calldata.size - 4 >= 32
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    aVAXRewardsFee = arg1
    if arg1 > !liquidityFee:
        revert with 'NH{q', 17
    if arg1 + liquidityFee > !marketingFee:
        revert with 'NH{q', 17
    totalFees = arg1 + liquidityFee + marketingFee
}

function setLiquiditFee(uint256 arg1) {
    require calldata.size - 4 >= 32
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    liquidityFee = arg1
    if aVAXRewardsFee > !arg1:
        revert with 'NH{q', 17
    if aVAXRewardsFee + arg1 > !marketingFee:
        revert with 'NH{q', 17
    totalFees = aVAXRewardsFee + arg1 + marketingFee
}

function dividendTokenBalanceOf(address arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    staticcall dividendTrackerAddress.0x70a08231 with:
            gas gas_remaining wei
           args arg1
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    return ext_call.return_data[0]
}

function withdrawableDividendOf(address arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    staticcall dividendTrackerAddress.0xa8b9d240 with:
            gas gas_remaining wei
           args arg1
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    return ext_call.return_data[0]
}

function setMarketingFee(uint256 arg1) {
    require calldata.size - 4 >= 32
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    marketingFee = arg1
    if aVAXRewardsFee > !liquidityFee:
        revert with 'NH{q', 17
    if aVAXRewardsFee + liquidityFee > !arg1:
        revert with 'NH{q', 17
    totalFees = aVAXRewardsFee + liquidityFee + arg1
}

function transferOwnership(address arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    if not arg1:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'Ownable: new owner is the zero address'
    owner = arg1
    emit OwnershipTransferred(owner, arg1);
}

function updateClaimWait(uint256 arg1) {
    require calldata.size - 4 >= 32
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    require ext_code.size(dividendTrackerAddress)
    call dividendTrackerAddress.0xe98030c7 with:
         gas gas_remaining wei
        args arg1
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
}

function excludeFromDividends(address arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    require ext_code.size(dividendTrackerAddress)
    call dividendTrackerAddress.0x31e79db0 with:
         gas gas_remaining wei
        args arg1
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
}

function processDividendTracker(uint256 arg1) {
    require calldata.size - 4 >= 32
    call dividendTrackerAddress.process(uint256 arg1) with:
         gas gas_remaining wei
        args arg1
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 96
    emit ProcessedDividendTracker(ext_call.return_data[0], ext_call.return_data[32], ext_call.return_data[64], arg1, 0, tx.origin);
}

function excludeFromFees(address arg1, bool arg2) {
    require calldata.size - 4 >= 64
    require arg1 == arg1
    require arg2 == arg2
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    if arg2 == bool(stor21[address(arg1)]):
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    'AVAXRain: Account is already the value of 'excluded''
    stor21[address(arg1)] = uint8(arg2)
    emit ExcludeFromFees(arg2, arg1);
}

function approve(address arg1, uint256 arg2) {
    require calldata.size - 4 >= 64
    require arg1 == arg1
    if not msg.sender:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: approve from the zero address'
    if not arg1:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: approve to the zero address'
    allowance[address(msg.sender)][address(arg1)].field_0 = arg2
    emit Approval(arg2, msg.sender, arg1);
    return 1
}

function increaseAllowance(address arg1, uint256 arg2) {
    require calldata.size - 4 >= 64
    require arg1 == arg1
    if allowance[msg.sender][address(arg1)].field_0 > !arg2:
        revert with 'NH{q', 17
    if not msg.sender:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: approve from the zero address'
    if not arg1:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: approve to the zero address'
    allowance[address(msg.sender)][address(arg1)].field_0 = allowance[msg.sender][address(arg1)].field_0 + arg2
    emit Approval((allowance[msg.sender][address(arg1)].field_0 + arg2), msg.sender, arg1);
    return 1
}

function getAccountDividendsInfoAtIndex(uint256 arg1) {
    require calldata.size - 4 >= 32
    staticcall dividendTrackerAddress.getAccountAtIndex(uint256 arg1) with:
            gas gas_remaining wei
           args arg1
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 256
    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
    return ext_call.return_data[12 len 20], 
           ext_call.return_data[32],
           ext_call.return_data[64],
           ext_call.return_data[96],
           ext_call.return_data[128],
           ext_call.return_data[160],
           ext_call.return_data[192],
           ext_call.return_data[224]
}

function getAccountDividendsInfo(address arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    staticcall dividendTrackerAddress.getAccount(address arg1) with:
            gas gas_remaining wei
           args arg1
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 256
    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
    return ext_call.return_data[12 len 20], 
           ext_call.return_data[32],
           ext_call.return_data[64],
           ext_call.return_data[96],
           ext_call.return_data[128],
           ext_call.return_data[160],
           ext_call.return_data[192],
           ext_call.return_data[224]
}

function decreaseAllowance(address arg1, uint256 arg2) {
    require calldata.size - 4 >= 64
    require arg1 == arg1
    if allowance[msg.sender][address(arg1)].field_0 < arg2:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: decreased allowance below zero'
    if not msg.sender:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: approve from the zero address'
    if not arg1:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: approve to the zero address'
    allowance[address(msg.sender)][address(arg1)].field_0 = allowance[msg.sender][address(arg1)].field_0 - arg2
    emit Approval((allowance[msg.sender][address(arg1)].field_0 - arg2), msg.sender, arg1);
    return 1
}

function updateGasForProcessing(uint256 arg1) {
    require calldata.size - 4 >= 32
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    if arg1 < 200000:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    'AVAXRain: gasForProcessing must be between 200,000 and 500,000'
    if arg1 > 500000:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    'AVAXRain: gasForProcessing must be between 200,000 and 500,000'
    if arg1 == gasForProcessing:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    'AVAXRain: Cannot update gasForProcessing to same value'
    emit GasForProcessingUpdated(arg1, gasForProcessing);
    gasForProcessing = arg1
}

function setAutomatedMarketMakerPair(address arg1, bool arg2) {
    require calldata.size - 4 >= 64
    require arg1 == arg1
    require arg2 == arg2
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    if uniswapV2PairAddress == arg1:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    'AVAXRain: The PanCAKESwap pair cannot be removed from automatedMarketMakerPairs'
    if arg2 == bool(stor22[address(arg1)]):
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    'AVAXRain: Automated market maker pair is already set to that value'
    stor22[address(arg1)] = uint8(arg2)
    if arg2:
        require ext_code.size(dividendTrackerAddress)
        call dividendTrackerAddress.0x31e79db0 with:
             gas gas_remaining wei
            args arg1
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
    emit SetAutomatedMarketMakerPair(arg1, arg2);
}

function excludeMultipleAccountsFromFees(address[] arg1, bool arg2) {
    require calldata.size - 4 >= 64
    require arg1 <= test266151307()
    require arg1 + 35 < calldata.size
    require arg1.length <= test266151307()
    require arg1 + (32 * arg1.length) + 36 <= calldata.size
    require arg2 == arg2
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    idx = 0
    while idx < arg1.length:
        require cd[((32 * idx) + arg1 + 36)] == address(cd[((32 * idx) + arg1 + 36)])
        mem[0] = address(cd[((32 * idx) + arg1 + 36)])
        mem[32] = 21
        stor21[address(cd[((32 * idx) + arg1 + 36)])] = uint8(arg2)
        if idx == -1:
            revert with 'NH{q', 17
        idx = idx + 1
        continue 
    idx = 0
    s = 192
    t = arg1 + 36
    while idx < arg1.length:
        require cd[t] == address(cd[t])
        mem[s] = address(cd[t])
        idx = idx + 1
        s = s + 32
        t = t + 32
        continue 
    emit ExcludeMultipleAccountsFromFees(Array(len=arg1.length, data=mem[192 len 32 * arg1.length]), arg2);
}

function updateUniswapV2Router(address arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    if uniswapV2RouterAddress == arg1:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'AVAXRain: The router already has that address'
    emit UpdateUniswapV2Router(arg1, uniswapV2RouterAddress);
    uniswapV2RouterAddress = arg1
    staticcall arg1.factory() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
    staticcall uniswapV2RouterAddress.WETH() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
    call address(ext_call.return_data[0]).createPair(address arg1, address arg2) with:
         gas gas_remaining wei
        args address(this.address), address(ext_call.return_data[0])
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
    uniswapV2PairAddress = ext_call.return_data[12 len 20]
}

function updateDividendTracker(address arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    if dividendTrackerAddress == arg1:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    'AVAXRain: The dividend tracker already has that address'
    staticcall arg1.0x8da5cb5b with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
    if ext_call.return_data[12 len 20] != this.address:
        revert with 0, 'AVAXRain: The new dividend tracker must be owned by the AVAXRain token contract'
    require ext_code.size(arg1)
    call arg1.0x31e79db0 with:
         gas gas_remaining wei
        args arg1
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require ext_code.size(arg1)
    call arg1.0x31e79db0 with:
         gas gas_remaining wei
        args this.address
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require ext_code.size(arg1)
    call arg1.0x31e79db0 with:
         gas gas_remaining wei
        args owner
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require ext_code.size(arg1)
    call arg1.0x31e79db0 with:
         gas gas_remaining wei
        args uniswapV2RouterAddress
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    emit UpdateDividendTracker(arg1, dividendTrackerAddress);
    dividendTrackerAddress = arg1
}

function sendToBuyBackWallet() {
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    if not stor7:
        mem[128] = this.address
        staticcall uniswapV2RouterAddress.WETH() with:
                gas gas_remaining wei
        mem[192] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
        mem[160] = ext_call.return_data[12 len 20]
        if not this.address:
            revert with 0, 'ERC20: approve from the zero address'
        if not uniswapV2RouterAddress:
            revert with 0, 'ERC20: approve to the zero address'
        allowance[address(this.address)][stor6].field_0 = balanceOf[this.address]
        emit Approval(balanceOf[this.address], this.address, uniswapV2RouterAddress);
        mem[ceil32(return_data.size) + 192] = 0x791ac94700000000000000000000000000000000000000000000000000000000
        mem[ceil32(return_data.size) + 196] = balanceOf[this.address]
        idx = 0
        s = ceil32(return_data.size) + 388
        t = 128
        while idx < 2:
            mem[s] = mem[t + 12 len 20]
            idx = idx + 1
            s = s + 32
            t = t + 32
            continue 
        require ext_code.size(uniswapV2RouterAddress)
        call uniswapV2RouterAddress.swapExactTokensForETHSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
             gas gas_remaining wei
            args balanceOf[this.address], 0, 160, address(this.address), block.timestamp, 2, mem[ceil32(return_data.size) + 388 len 64]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        call _marketingWalletAddress with:
           value eth.balance(this.address) wei
             gas 2300 * is_zero(value) wei
}

function name() {
    if bool(stor3.length):
        if bool(stor3.length) == uint255(stor3.length) * 0.5 < 32:
            revert with 'NH{q', 34
        if bool(stor3.length):
            if bool(stor3.length) == uint255(stor3.length) * 0.5 < 32:
                revert with 'NH{q', 34
            if Mask(256, -1, stor3.length):
                if 31 < uint255(stor3.length) * 0.5:
                    mem[128] = uint256(stor3.field_0)
                    idx = 128
                    s = 0
                    while (uint255(stor3.length) * 0.5) + 96 > idx:
                        mem[idx + 32] = stor3[s].field_256
                        idx = idx + 32
                        s = s + 1
                        continue 
                    return Array(len=2 * Mask(256, -1, stor3.length), data=mem[128 len ceil32(uint255(stor3.length) * 0.5)])
                mem[128] = 256 * stor3.length.field_8
        else:
            if bool(stor3.length) == stor3.length.field_1 < 32:
                revert with 'NH{q', 34
            if stor3.length.field_1:
                if 31 < stor3.length.field_1:
                    mem[128] = uint256(stor3.field_0)
                    idx = 128
                    s = 0
                    while stor3.length.field_1 + 96 > idx:
                        mem[idx + 32] = stor3[s].field_256
                        idx = idx + 32
                        s = s + 1
                        continue 
                    return Array(len=2 * Mask(256, -1, stor3.length), data=mem[128 len ceil32(uint255(stor3.length) * 0.5)])
                mem[128] = 256 * stor3.length.field_8
        mem[ceil32(uint255(stor3.length) * 0.5) + 192 len ceil32(uint255(stor3.length) * 0.5)] = mem[128 len ceil32(uint255(stor3.length) * 0.5)]
        if ceil32(uint255(stor3.length) * 0.5) > uint255(stor3.length) * 0.5:
            mem[ceil32(uint255(stor3.length) * 0.5) + (uint255(stor3.length) * 0.5) + 192] = 0
        return Array(len=2 * Mask(256, -1, stor3.length), data=mem[128 len ceil32(uint255(stor3.length) * 0.5)], mem[(2 * ceil32(uint255(stor3.length) * 0.5)) + 192 len 2 * ceil32(uint255(stor3.length) * 0.5)]), 
    if bool(stor3.length) == stor3.length.field_1 < 32:
        revert with 'NH{q', 34
    if bool(stor3.length):
        if bool(stor3.length) == uint255(stor3.length) * 0.5 < 32:
            revert with 'NH{q', 34
        if Mask(256, -1, stor3.length):
            if 31 < uint255(stor3.length) * 0.5:
                mem[128] = uint256(stor3.field_0)
                idx = 128
                s = 0
                while (uint255(stor3.length) * 0.5) + 96 > idx:
                    mem[idx + 32] = stor3[s].field_256
                    idx = idx + 32
                    s = s + 1
                    continue 
                return Array(len=stor3.length % 128, data=mem[128 len ceil32(stor3.length.field_1)])
            mem[128] = 256 * stor3.length.field_8
    else:
        if bool(stor3.length) == stor3.length.field_1 < 32:
            revert with 'NH{q', 34
        if stor3.length.field_1:
            if 31 < stor3.length.field_1:
                mem[128] = uint256(stor3.field_0)
                idx = 128
                s = 0
                while stor3.length.field_1 + 96 > idx:
                    mem[idx + 32] = stor3[s].field_256
                    idx = idx + 32
                    s = s + 1
                    continue 
                return Array(len=stor3.length % 128, data=mem[128 len ceil32(stor3.length.field_1)])
            mem[128] = 256 * stor3.length.field_8
    mem[ceil32(stor3.length.field_1) + 192 len ceil32(stor3.length.field_1)] = mem[128 len ceil32(stor3.length.field_1)]
    if ceil32(stor3.length.field_1) > stor3.length.field_1:
        mem[ceil32(stor3.length.field_1) + stor3.length.field_1 + 192] = 0
    return Array(len=stor3.length % 128, data=mem[128 len ceil32(stor3.length.field_1)], mem[(2 * ceil32(stor3.length.field_1)) + 192 len 2 * ceil32(stor3.length.field_1)]), 
}

function symbol() {
    if bool(stor4.length):
        if bool(stor4.length) == uint255(stor4.length) * 0.5 < 32:
            revert with 'NH{q', 34
        if bool(stor4.length):
            if bool(stor4.length) == uint255(stor4.length) * 0.5 < 32:
                revert with 'NH{q', 34
            if Mask(256, -1, stor4.length):
                if 31 < uint255(stor4.length) * 0.5:
                    mem[128] = uint256(stor4.field_0)
                    idx = 128
                    s = 0
                    while (uint255(stor4.length) * 0.5) + 96 > idx:
                        mem[idx + 32] = stor4[s].field_256
                        idx = idx + 32
                        s = s + 1
                        continue 
                    return Array(len=2 * Mask(256, -1, stor4.length), data=mem[128 len ceil32(uint255(stor4.length) * 0.5)])
                mem[128] = 256 * stor4.length.field_8
        else:
            if bool(stor4.length) == stor4.length.field_1 < 32:
                revert with 'NH{q', 34
            if stor4.length.field_1:
                if 31 < stor4.length.field_1:
                    mem[128] = uint256(stor4.field_0)
                    idx = 128
                    s = 0
                    while stor4.length.field_1 + 96 > idx:
                        mem[idx + 32] = stor4[s].field_256
                        idx = idx + 32
                        s = s + 1
                        continue 
                    return Array(len=2 * Mask(256, -1, stor4.length), data=mem[128 len ceil32(uint255(stor4.length) * 0.5)])
                mem[128] = 256 * stor4.length.field_8
        mem[ceil32(uint255(stor4.length) * 0.5) + 192 len ceil32(uint255(stor4.length) * 0.5)] = mem[128 len ceil32(uint255(stor4.length) * 0.5)]
        if ceil32(uint255(stor4.length) * 0.5) > uint255(stor4.length) * 0.5:
            mem[ceil32(uint255(stor4.length) * 0.5) + (uint255(stor4.length) * 0.5) + 192] = 0
        return Array(len=2 * Mask(256, -1, stor4.length), data=mem[128 len ceil32(uint255(stor4.length) * 0.5)], mem[(2 * ceil32(uint255(stor4.length) * 0.5)) + 192 len 2 * ceil32(uint255(stor4.length) * 0.5)]), 
    if bool(stor4.length) == stor4.length.field_1 < 32:
        revert with 'NH{q', 34
    if bool(stor4.length):
        if bool(stor4.length) == uint255(stor4.length) * 0.5 < 32:
            revert with 'NH{q', 34
        if Mask(256, -1, stor4.length):
            if 31 < uint255(stor4.length) * 0.5:
                mem[128] = uint256(stor4.field_0)
                idx = 128
                s = 0
                while (uint255(stor4.length) * 0.5) + 96 > idx:
                    mem[idx + 32] = stor4[s].field_256
                    idx = idx + 32
                    s = s + 1
                    continue 
                return Array(len=stor4.length % 128, data=mem[128 len ceil32(stor4.length.field_1)])
            mem[128] = 256 * stor4.length.field_8
    else:
        if bool(stor4.length) == stor4.length.field_1 < 32:
            revert with 'NH{q', 34
        if stor4.length.field_1:
            if 31 < stor4.length.field_1:
                mem[128] = uint256(stor4.field_0)
                idx = 128
                s = 0
                while stor4.length.field_1 + 96 > idx:
                    mem[idx + 32] = stor4[s].field_256
                    idx = idx + 32
                    s = s + 1
                    continue 
                return Array(len=stor4.length % 128, data=mem[128 len ceil32(stor4.length.field_1)])
            mem[128] = 256 * stor4.length.field_8
    mem[ceil32(stor4.length.field_1) + 192 len ceil32(stor4.length.field_1)] = mem[128 len ceil32(stor4.length.field_1)]
    if ceil32(stor4.length.field_1) > stor4.length.field_1:
        mem[ceil32(stor4.length.field_1) + stor4.length.field_1 + 192] = 0
    return Array(len=stor4.length % 128, data=mem[128 len ceil32(stor4.length.field_1)], mem[(2 * ceil32(stor4.length.field_1)) + 192 len 2 * ceil32(stor4.length.field_1)]), 
}

function transfer(address arg1, uint256 arg2) {
    require calldata.size - 4 >= 64
    require arg1 == arg1
    if not msg.sender:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
    if not arg1:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
    if not arg2:
        if not msg.sender:
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
        if not arg1:
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
        if balanceOf[address(msg.sender)] < 0:
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
        if balanceOf[arg1] > -1:
            revert with 'NH{q', 17
        emit Transfer(0, msg.sender, arg1);
    else:
        if stor21[address(arg1)]:
            if stor21[address(arg1)]:
                if balanceOf[this.address] < swapTokensAtAmount:
                    if stor21[address(msg.sender)]:
                        if not msg.sender:
                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                        if not arg1:
                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                        if balanceOf[address(msg.sender)] < arg2:
                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                        balanceOf[address(msg.sender)] -= arg2
                        if balanceOf[arg1] > !arg2:
                            revert with 'NH{q', 17
                        balanceOf[arg1] += arg2
                        emit Transfer(arg2, msg.sender, arg1);
                    else:
                        if stor21[address(arg1)]:
                            if not msg.sender:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                            if not arg1:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                            if balanceOf[address(msg.sender)] < arg2:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                            balanceOf[address(msg.sender)] -= arg2
                            if balanceOf[arg1] > !arg2:
                                revert with 'NH{q', 17
                            balanceOf[arg1] += arg2
                            emit Transfer(arg2, msg.sender, arg1);
                        else:
                            if stor7:
                                if not msg.sender:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                if not arg1:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                if balanceOf[address(msg.sender)] < arg2:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                balanceOf[address(msg.sender)] -= arg2
                                if balanceOf[arg1] > !arg2:
                                    revert with 'NH{q', 17
                                balanceOf[arg1] += arg2
                                emit Transfer(arg2, msg.sender, arg1);
                            else:
                                if arg2 and totalFees > -1 / arg2:
                                    revert with 'NH{q', 17
                                if not stor22[address(arg1)]:
                                    if arg2 < arg2 * totalFees / 100:
                                        revert with 'NH{q', 17
                                    if not msg.sender:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                    if not this.address:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                    if balanceOf[address(msg.sender)] < arg2 * totalFees / 100:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                    balanceOf[address(msg.sender)] -= arg2 * totalFees / 100
                                    if balanceOf[this.address] > !(arg2 * totalFees / 100):
                                        revert with 'NH{q', 17
                                    balanceOf[this.address] += arg2 * totalFees / 100
                                    emit Transfer((arg2 * totalFees / 100), msg.sender, this.address);
                                    if not msg.sender:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                    if not arg1:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                    if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100):
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                    balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100)
                                    if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100)):
                                        revert with 'NH{q', 17
                                    balanceOf[arg1] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100)
                                    emit Transfer((arg2 - (arg2 * totalFees / 100)), msg.sender, arg1);
                                else:
                                    if arg2 and sellFeeIncreaseFactor > -1 / arg2:
                                        revert with 'NH{q', 17
                                    if arg2 * totalFees / 100 > !(arg2 * sellFeeIncreaseFactor / 100):
                                        revert with 'NH{q', 17
                                    if arg2 < (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100):
                                        revert with 'NH{q', 17
                                    if not msg.sender:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                    if not this.address:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                    if balanceOf[address(msg.sender)] < (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100):
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                    balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)
                                    if balanceOf[this.address] > !((arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)):
                                        revert with 'NH{q', 17
                                    balanceOf[this.address] = balanceOf[this.address] + (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)
                                    emit Transfer(((arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)), msg.sender, this.address);
                                    if not msg.sender:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                    if not arg1:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                    if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100):
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                    balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)
                                    if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)):
                                        revert with 'NH{q', 17
                                    balanceOf[arg1] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)
                                    emit Transfer((arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)), msg.sender, arg1);
                else:
                    if stor7:
                        if stor21[address(msg.sender)]:
                            if not msg.sender:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                            if not arg1:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                            if balanceOf[address(msg.sender)] < arg2:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                            balanceOf[address(msg.sender)] -= arg2
                            if balanceOf[arg1] > !arg2:
                                revert with 'NH{q', 17
                            balanceOf[arg1] += arg2
                            emit Transfer(arg2, msg.sender, arg1);
                        else:
                            if stor21[address(arg1)]:
                                if not msg.sender:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                if not arg1:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                if balanceOf[address(msg.sender)] < arg2:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                balanceOf[address(msg.sender)] -= arg2
                                if balanceOf[arg1] > !arg2:
                                    revert with 'NH{q', 17
                                balanceOf[arg1] += arg2
                                emit Transfer(arg2, msg.sender, arg1);
                            else:
                                if stor7:
                                    if not msg.sender:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                    if not arg1:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                    if balanceOf[address(msg.sender)] < arg2:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                    balanceOf[address(msg.sender)] -= arg2
                                    if balanceOf[arg1] > !arg2:
                                        revert with 'NH{q', 17
                                    balanceOf[arg1] += arg2
                                    emit Transfer(arg2, msg.sender, arg1);
                                else:
                                    if arg2 and totalFees > -1 / arg2:
                                        revert with 'NH{q', 17
                                    if not stor22[address(arg1)]:
                                        if arg2 < arg2 * totalFees / 100:
                                            revert with 'NH{q', 17
                                        if not msg.sender:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                        if not this.address:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                        if balanceOf[address(msg.sender)] < arg2 * totalFees / 100:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                        balanceOf[address(msg.sender)] -= arg2 * totalFees / 100
                                        if balanceOf[this.address] > !(arg2 * totalFees / 100):
                                            revert with 'NH{q', 17
                                        balanceOf[this.address] += arg2 * totalFees / 100
                                        emit Transfer((arg2 * totalFees / 100), msg.sender, this.address);
                                        if not msg.sender:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                        if not arg1:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                        if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100):
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                        balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100)
                                        if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100)):
                                            revert with 'NH{q', 17
                                        balanceOf[arg1] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100)
                                        emit Transfer((arg2 - (arg2 * totalFees / 100)), msg.sender, arg1);
                                    else:
                                        if arg2 and sellFeeIncreaseFactor > -1 / arg2:
                                            revert with 'NH{q', 17
                                        if arg2 * totalFees / 100 > !(arg2 * sellFeeIncreaseFactor / 100):
                                            revert with 'NH{q', 17
                                        if arg2 < (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100):
                                            revert with 'NH{q', 17
                                        if not msg.sender:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                        if not this.address:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                        if balanceOf[address(msg.sender)] < (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100):
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                        balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)
                                        if balanceOf[this.address] > !((arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)):
                                            revert with 'NH{q', 17
                                        balanceOf[this.address] = balanceOf[this.address] + (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)
                                        emit Transfer(((arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)), msg.sender, this.address);
                                        if not msg.sender:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                        if not arg1:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                        if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100):
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                        balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)
                                        if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)):
                                            revert with 'NH{q', 17
                                        balanceOf[arg1] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)
                                        emit Transfer((arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)), msg.sender, arg1);
                    else:
                        if stor22[address(msg.sender)]:
                            if stor21[address(msg.sender)]:
                                if not msg.sender:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                if not arg1:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                if balanceOf[address(msg.sender)] < arg2:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                balanceOf[address(msg.sender)] -= arg2
                                if balanceOf[arg1] > !arg2:
                                    revert with 'NH{q', 17
                                balanceOf[arg1] += arg2
                                emit Transfer(arg2, msg.sender, arg1);
                            else:
                                if stor21[address(arg1)]:
                                    if not msg.sender:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                    if not arg1:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                    if balanceOf[address(msg.sender)] < arg2:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                    balanceOf[address(msg.sender)] -= arg2
                                    if balanceOf[arg1] > !arg2:
                                        revert with 'NH{q', 17
                                    balanceOf[arg1] += arg2
                                    emit Transfer(arg2, msg.sender, arg1);
                                else:
                                    if stor7:
                                        if not msg.sender:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                        if not arg1:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                        if balanceOf[address(msg.sender)] < arg2:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                        balanceOf[address(msg.sender)] -= arg2
                                        if balanceOf[arg1] > !arg2:
                                            revert with 'NH{q', 17
                                        balanceOf[arg1] += arg2
                                        emit Transfer(arg2, msg.sender, arg1);
                                    else:
                                        if arg2 and totalFees > -1 / arg2:
                                            revert with 'NH{q', 17
                                        if not stor22[address(arg1)]:
                                            if arg2 < arg2 * totalFees / 100:
                                                revert with 'NH{q', 17
                                            if not msg.sender:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                            if not this.address:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                            if balanceOf[address(msg.sender)] < arg2 * totalFees / 100:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                            balanceOf[address(msg.sender)] -= arg2 * totalFees / 100
                                            if balanceOf[this.address] > !(arg2 * totalFees / 100):
                                                revert with 'NH{q', 17
                                            balanceOf[this.address] += arg2 * totalFees / 100
                                            emit Transfer((arg2 * totalFees / 100), msg.sender, this.address);
                                            if not msg.sender:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                            if not arg1:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                            if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100):
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                            balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100)
                                            if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100)):
                                                revert with 'NH{q', 17
                                            balanceOf[arg1] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100)
                                            emit Transfer((arg2 - (arg2 * totalFees / 100)), msg.sender, arg1);
                                        else:
                                            if arg2 and sellFeeIncreaseFactor > -1 / arg2:
                                                revert with 'NH{q', 17
                                            if arg2 * totalFees / 100 > !(arg2 * sellFeeIncreaseFactor / 100):
                                                revert with 'NH{q', 17
                                            if arg2 < (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100):
                                                revert with 'NH{q', 17
                                            if not msg.sender:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                            if not this.address:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                            if balanceOf[address(msg.sender)] < (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100):
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                            balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)
                                            if balanceOf[this.address] > !((arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)):
                                                revert with 'NH{q', 17
                                            balanceOf[this.address] = balanceOf[this.address] + (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)
                                            emit Transfer(((arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)), msg.sender, this.address);
                                            if not msg.sender:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                            if not arg1:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                            if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100):
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                            balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)
                                            if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)):
                                                revert with 'NH{q', 17
                                            balanceOf[arg1] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)
                                            emit Transfer((arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)), msg.sender, arg1);
                        else:
                            if owner == msg.sender:
                                if stor21[address(msg.sender)]:
                                    if not msg.sender:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                    if not arg1:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                    if balanceOf[address(msg.sender)] < arg2:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                    balanceOf[address(msg.sender)] -= arg2
                                    if balanceOf[arg1] > !arg2:
                                        revert with 'NH{q', 17
                                    balanceOf[arg1] += arg2
                                    emit Transfer(arg2, msg.sender, arg1);
                                else:
                                    if stor21[address(arg1)]:
                                        if not msg.sender:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                        if not arg1:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                        if balanceOf[address(msg.sender)] < arg2:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                        balanceOf[address(msg.sender)] -= arg2
                                        if balanceOf[arg1] > !arg2:
                                            revert with 'NH{q', 17
                                        balanceOf[arg1] += arg2
                                        emit Transfer(arg2, msg.sender, arg1);
                                    else:
                                        if stor7:
                                            if not msg.sender:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                            if not arg1:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                            if balanceOf[address(msg.sender)] < arg2:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                            balanceOf[address(msg.sender)] -= arg2
                                            if balanceOf[arg1] > !arg2:
                                                revert with 'NH{q', 17
                                            balanceOf[arg1] += arg2
                                            emit Transfer(arg2, msg.sender, arg1);
                                        else:
                                            if arg2 and totalFees > -1 / arg2:
                                                revert with 'NH{q', 17
                                            if not stor22[address(arg1)]:
                                                if arg2 < arg2 * totalFees / 100:
                                                    revert with 'NH{q', 17
                                                if not msg.sender:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                if not this.address:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                if balanceOf[address(msg.sender)] < arg2 * totalFees / 100:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                balanceOf[address(msg.sender)] -= arg2 * totalFees / 100
                                                if balanceOf[this.address] > !(arg2 * totalFees / 100):
                                                    revert with 'NH{q', 17
                                                balanceOf[this.address] += arg2 * totalFees / 100
                                                emit Transfer((arg2 * totalFees / 100), msg.sender, this.address);
                                                if not msg.sender:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                if not arg1:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100):
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100)
                                                if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100)):
                                                    revert with 'NH{q', 17
                                                balanceOf[arg1] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100)
                                                emit Transfer((arg2 - (arg2 * totalFees / 100)), msg.sender, arg1);
                                            else:
                                                if arg2 and sellFeeIncreaseFactor > -1 / arg2:
                                                    revert with 'NH{q', 17
                                                if arg2 * totalFees / 100 > !(arg2 * sellFeeIncreaseFactor / 100):
                                                    revert with 'NH{q', 17
                                                if arg2 < (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100):
                                                    revert with 'NH{q', 17
                                                if not msg.sender:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                if not this.address:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                if balanceOf[address(msg.sender)] < (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100):
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)
                                                if balanceOf[this.address] > !((arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)):
                                                    revert with 'NH{q', 17
                                                balanceOf[this.address] = balanceOf[this.address] + (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)
                                                emit Transfer(((arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)), msg.sender, this.address);
                                                if not msg.sender:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                if not arg1:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100):
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)
                                                if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)):
                                                    revert with 'NH{q', 17
                                                balanceOf[arg1] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)
                                                emit Transfer((arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)), msg.sender, arg1);
                            else:
                                if owner == arg1:
                                    if stor21[address(msg.sender)]:
                                        if not msg.sender:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                        if not arg1:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                        if balanceOf[address(msg.sender)] < arg2:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                        balanceOf[address(msg.sender)] -= arg2
                                        if balanceOf[arg1] > !arg2:
                                            revert with 'NH{q', 17
                                        balanceOf[arg1] += arg2
                                        emit Transfer(arg2, msg.sender, arg1);
                                    else:
                                        if stor21[address(arg1)]:
                                            if not msg.sender:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                            if not arg1:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                            if balanceOf[address(msg.sender)] < arg2:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                            balanceOf[address(msg.sender)] -= arg2
                                            if balanceOf[arg1] > !arg2:
                                                revert with 'NH{q', 17
                                            balanceOf[arg1] += arg2
                                            emit Transfer(arg2, msg.sender, arg1);
                                        else:
                                            if stor7:
                                                if not msg.sender:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                if not arg1:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                if balanceOf[address(msg.sender)] < arg2:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                balanceOf[address(msg.sender)] -= arg2
                                                if balanceOf[arg1] > !arg2:
                                                    revert with 'NH{q', 17
                                                balanceOf[arg1] += arg2
                                                emit Transfer(arg2, msg.sender, arg1);
                                            else:
                                                if arg2 and totalFees > -1 / arg2:
                                                    revert with 'NH{q', 17
                                                if not stor22[address(arg1)]:
                                                    if arg2 < arg2 * totalFees / 100:
                                                        revert with 'NH{q', 17
                                                    if not msg.sender:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                    if not this.address:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                    if balanceOf[address(msg.sender)] < arg2 * totalFees / 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                    balanceOf[address(msg.sender)] -= arg2 * totalFees / 100
                                                    if balanceOf[this.address] > !(arg2 * totalFees / 100):
                                                        revert with 'NH{q', 17
                                                    balanceOf[this.address] += arg2 * totalFees / 100
                                                    emit Transfer((arg2 * totalFees / 100), msg.sender, this.address);
                                                    if not msg.sender:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                    if not arg1:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                    if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100):
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                    balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100)
                                                    if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100)):
                                                        revert with 'NH{q', 17
                                                    balanceOf[arg1] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100)
                                                    emit Transfer((arg2 - (arg2 * totalFees / 100)), msg.sender, arg1);
                                                else:
                                                    if arg2 and sellFeeIncreaseFactor > -1 / arg2:
                                                        revert with 'NH{q', 17
                                                    if arg2 * totalFees / 100 > !(arg2 * sellFeeIncreaseFactor / 100):
                                                        revert with 'NH{q', 17
                                                    if arg2 < (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100):
                                                        revert with 'NH{q', 17
                                                    if not msg.sender:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                    if not this.address:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                    if balanceOf[address(msg.sender)] < (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100):
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                    balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)
                                                    if balanceOf[this.address] > !((arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)):
                                                        revert with 'NH{q', 17
                                                    balanceOf[this.address] = balanceOf[this.address] + (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)
                                                    emit Transfer(((arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)), msg.sender, this.address);
                                                    if not msg.sender:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                    if not arg1:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                    if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100):
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                    balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)
                                                    if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)):
                                                        revert with 'NH{q', 17
                                                    balanceOf[arg1] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)
                                                    emit Transfer((arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)), msg.sender, arg1);
                                else:
                                    stor7 = 1
                                    if balanceOf[this.address] and marketingFee > -1 / balanceOf[this.address]:
                                        revert with 'NH{q', 17
                                    if not totalFees:
                                        revert with 'NH{q', 18
                                    mem[96] = 2
                                    mem[128] = this.address
                                    staticcall uniswapV2RouterAddress.WETH() with:
                                            gas gas_remaining wei
                                    mem[192] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                    mem[160] = ext_call.return_data[12 len 20]
                                    if not this.address:
                                        revert with 0, 'ERC20: approve from the zero address'
                                    if not uniswapV2RouterAddress:
                                        revert with 0, 'ERC20: approve to the zero address'
                                    allowance[address(this.address)][stor6].field_0 = balanceOf[this.address] * marketingFee / totalFees
                                    emit Approval((balanceOf[this.address] * marketingFee / totalFees), this.address, uniswapV2RouterAddress);
                                    mem[ceil32(return_data.size) + 192] = 0x791ac94700000000000000000000000000000000000000000000000000000000
                                    mem[ceil32(return_data.size) + 196] = balanceOf[this.address] * marketingFee / totalFees
                                    mem[ceil32(return_data.size) + 356] = 2
                                    idx = 0
                                    s = ceil32(return_data.size) + 388
                                    t = 128
                                    while idx < 2:
                                        mem[s] = mem[t + 12 len 20]
                                        idx = idx + 1
                                        s = s + 32
                                        t = t + 32
                                        continue 
                                    mem[ceil32(return_data.size) + 292] = this.address
                                    mem[ceil32(return_data.size) + 324] = block.timestamp
                                    require ext_code.size(uniswapV2RouterAddress)
                                    call uniswapV2RouterAddress.swapExactTokensForETHSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                         gas gas_remaining wei
                                        args balanceOf[this.address] * marketingFee / totalFees, 0, 160, address(this.address), block.timestamp, 2, mem[ceil32(return_data.size) + 388 len 64]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    call _marketingWalletAddress with:
                                       value eth.balance(this.address) wei
                                         gas 2300 * is_zero(value) wei
                                    if balanceOf[this.address] and liquidityFee > -1 / balanceOf[this.address]:
                                        revert with 'NH{q', 17
                                    if not totalFees:
                                        revert with 'NH{q', 18
                                    if balanceOf[this.address] * liquidityFee / totalFees < balanceOf[this.address] * liquidityFee / totalFees / 2:
                                        revert with 'NH{q', 17
                                    mem[ceil32(return_data.size) + 192] = 2
                                    mem[ceil32(return_data.size) + 224] = this.address
                                    staticcall uniswapV2RouterAddress.WETH() with:
                                            gas gas_remaining wei
                                    mem[ceil32(return_data.size) + 288] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                    mem[ceil32(return_data.size) + 256] = ext_call.return_data[12 len 20]
                                    if not this.address:
                                        revert with 0, 'ERC20: approve from the zero address'
                                    if not uniswapV2RouterAddress:
                                        revert with 0, 'ERC20: approve to the zero address'
                                    allowance[address(this.address)][stor6].field_0 = balanceOf[this.address] * liquidityFee / totalFees / 2
                                    allowance[address(this.address)][stor6].field_255 = 0
                                    emit Approval((balanceOf[this.address] * liquidityFee / totalFees / 2), this.address, uniswapV2RouterAddress);
                                    mem[(2 * ceil32(return_data.size)) + 288] = 0x791ac94700000000000000000000000000000000000000000000000000000000
                                    mem[(2 * ceil32(return_data.size)) + 292] = balanceOf[this.address] * liquidityFee / totalFees / 2
                                    mem[(2 * ceil32(return_data.size)) + 324] = 0
                                    mem[(2 * ceil32(return_data.size)) + 356] = 160
                                    mem[(2 * ceil32(return_data.size)) + 452] = 2
                                    idx = 0
                                    s = (2 * ceil32(return_data.size)) + 484
                                    t = ceil32(return_data.size) + 224
                                    while idx < mem[ceil32(return_data.size) + 192]:
                                        mem[s] = mem[t + 12 len 20]
                                        idx = idx + 1
                                        s = s + 32
                                        t = t + 32
                                        continue 
                                    mem[(2 * ceil32(return_data.size)) + 388] = this.address
                                    mem[(2 * ceil32(return_data.size)) + 420] = block.timestamp
                                    require ext_code.size(uniswapV2RouterAddress)
                                    call uniswapV2RouterAddress.swapExactTokensForETHSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                         gas gas_remaining wei
                                        args Mask(255, 1, balanceOf[this.address] * liquidityFee / totalFees), 0, 160, address(this.address), block.timestamp, mem[(2 * ceil32(return_data.size)) + 452 len (32 * mem[ceil32(return_data.size) + 192]) + 32]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    if eth.balance(this.address) < eth.balance(this.address):
                                        revert with 'NH{q', 17
                                    if not this.address:
                                        revert with 0, 'ERC20: approve from the zero address'
                                    if not uniswapV2RouterAddress:
                                        revert with 0, 'ERC20: approve to the zero address'
                                    allowance[address(this.address)][stor6].field_0 = (balanceOf[this.address] * liquidityFee / totalFees) - (balanceOf[this.address] * liquidityFee / totalFees / 2)
                                    emit Approval(((balanceOf[this.address] * liquidityFee / totalFees) - (balanceOf[this.address] * liquidityFee / totalFees / 2)), this.address, uniswapV2RouterAddress);
                                    mem[(2 * ceil32(return_data.size)) + 292] = this.address
                                    mem[(2 * ceil32(return_data.size)) + 324] = (balanceOf[this.address] * liquidityFee / totalFees) - (balanceOf[this.address] * liquidityFee / totalFees / 2)
                                    mem[(2 * ceil32(return_data.size)) + 356] = 0
                                    mem[(2 * ceil32(return_data.size)) + 388] = 0
                                    mem[(2 * ceil32(return_data.size)) + 420] = 0
                                    mem[(2 * ceil32(return_data.size)) + 452] = block.timestamp
                                    call uniswapV2RouterAddress.addLiquidityETH(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                         gas gas_remaining wei
                                        args this.address, (balanceOf[this.address] * liquidityFee / totalFees) - (balanceOf[this.address] * liquidityFee / totalFees / 2), 0, 0, 0, block.timestamp
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 96
                                    emit SwapAndLiquify(Mask(255, 1, balanceOf[this.address] * liquidityFee / totalFees), 0, (balanceOf[this.address] * liquidityFee / totalFees) - (balanceOf[this.address] * liquidityFee / totalFees / 2));
                                    mem[(4 * ceil32(return_data.size)) + 288] = 2
                                    mem[(4 * ceil32(return_data.size)) + 320] = this.address
                                    staticcall uniswapV2RouterAddress.WETH() with:
                                            gas gas_remaining wei
                                    mem[(4 * ceil32(return_data.size)) + 384] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    mem[64] = (6 * ceil32(return_data.size)) + 384
                                    require return_data.size >= 32
                                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                    mem[(4 * ceil32(return_data.size)) + 352] = ext_call.return_data[12 len 20]
                                    if not this.address:
                                        revert with 0, 'ERC20: approve from the zero address'
                                    if not uniswapV2RouterAddress:
                                        revert with 0, 'ERC20: approve to the zero address'
                                    mem[0] = uniswapV2RouterAddress
                                    mem[32] = sha3(address(this.address), 1)
                                    allowance[address(this.address)][stor6].field_0 = balanceOf[this.address]
                                    emit Approval(balanceOf[this.address], this.address, uniswapV2RouterAddress);
                                    mem[(6 * ceil32(return_data.size)) + 384] = 0x791ac94700000000000000000000000000000000000000000000000000000000
                                    mem[(6 * ceil32(return_data.size)) + 388] = balanceOf[this.address]
                                    mem[(6 * ceil32(return_data.size)) + 420] = 0
                                    mem[(6 * ceil32(return_data.size)) + 452] = 160
                                    mem[(6 * ceil32(return_data.size)) + 548] = 2
                                    idx = 0
                                    s = (6 * ceil32(return_data.size)) + 580
                                    t = (4 * ceil32(return_data.size)) + 320
                                    while idx < mem[(4 * ceil32(return_data.size)) + 288]:
                                        mem[s] = mem[t + 12 len 20]
                                        idx = idx + 1
                                        s = s + 32
                                        t = t + 32
                                        continue 
                                    require ext_code.size(uniswapV2RouterAddress)
                                    call uniswapV2RouterAddress.swapExactTokensForETHSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                         gas gas_remaining wei
                                        args balanceOf[this.address], 0, 160, address(this.address), block.timestamp, mem[(6 * ceil32(return_data.size)) + 548 len (32 * mem[(4 * ceil32(return_data.size)) + 288]) + 32]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    call dividendTrackerAddress with:
                                       value eth.balance(this.address) wei
                                         gas gas_remaining wei
                                    if ext_call.success:
                                        emit SendDividends(balanceOf[this.address], eth.balance(this.address));
                                    stor7 = 0
                                    if stor21[address(msg.sender)]:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: transfer from the zero address'
                                        if not arg1:
                                            revert with 0, 'ERC20: transfer to the zero address'
                                        if balanceOf[address(msg.sender)] < arg2:
                                            revert with 0, 'ERC20: transfer amount exceeds balance'
                                        balanceOf[address(msg.sender)] -= arg2
                                        if balanceOf[arg1] > !arg2:
                                            revert with 'NH{q', 17
                                        balanceOf[arg1] += arg2
                                        emit Transfer(arg2, msg.sender, arg1);
                                    else:
                                        if stor21[address(arg1)]:
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if not arg1:
                                                revert with 0, 'ERC20: transfer to the zero address'
                                            if balanceOf[address(msg.sender)] < arg2:
                                                revert with 0, 'ERC20: transfer amount exceeds balance'
                                            balanceOf[address(msg.sender)] -= arg2
                                            if balanceOf[arg1] > !arg2:
                                                revert with 'NH{q', 17
                                            balanceOf[arg1] += arg2
                                            emit Transfer(arg2, msg.sender, arg1);
                                        else:
                                            if stor7:
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if not arg1:
                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                if balanceOf[address(msg.sender)] < arg2:
                                                    revert with 0, 'ERC20: transfer amount exceeds balance'
                                                balanceOf[address(msg.sender)] -= arg2
                                                if balanceOf[arg1] > !arg2:
                                                    revert with 'NH{q', 17
                                                balanceOf[arg1] += arg2
                                                emit Transfer(arg2, msg.sender, arg1);
                                            else:
                                                if arg2 and totalFees > -1 / arg2:
                                                    revert with 'NH{q', 17
                                                if not stor22[address(arg1)]:
                                                    if arg2 < arg2 * totalFees / 100:
                                                        revert with 'NH{q', 17
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if not this.address:
                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                    if balanceOf[address(msg.sender)] < arg2 * totalFees / 100:
                                                        revert with 0, 'ERC20: transfer amount exceeds balance'
                                                    balanceOf[address(msg.sender)] -= arg2 * totalFees / 100
                                                    if balanceOf[this.address] > !(arg2 * totalFees / 100):
                                                        revert with 'NH{q', 17
                                                    balanceOf[this.address] += arg2 * totalFees / 100
                                                    emit Transfer((arg2 * totalFees / 100), msg.sender, this.address);
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if not arg1:
                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                    if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100):
                                                        revert with 0, 'ERC20: transfer amount exceeds balance'
                                                    balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100)
                                                    if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100)):
                                                        revert with 'NH{q', 17
                                                    balanceOf[arg1] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100)
                                                    emit Transfer((arg2 - (arg2 * totalFees / 100)), msg.sender, arg1);
                                                else:
                                                    if arg2 and sellFeeIncreaseFactor > -1 / arg2:
                                                        revert with 'NH{q', 17
                                                    if arg2 * totalFees / 100 > !(arg2 * sellFeeIncreaseFactor / 100):
                                                        revert with 'NH{q', 17
                                                    if arg2 < (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100):
                                                        revert with 'NH{q', 17
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if not this.address:
                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                    if balanceOf[address(msg.sender)] < (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100):
                                                        revert with 0, 'ERC20: transfer amount exceeds balance'
                                                    balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)
                                                    if balanceOf[this.address] > !((arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)):
                                                        revert with 'NH{q', 17
                                                    balanceOf[this.address] = balanceOf[this.address] + (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)
                                                    emit Transfer(((arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)), msg.sender, this.address);
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if not arg1:
                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                    if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100):
                                                        revert with 0, 'ERC20: transfer amount exceeds balance'
                                                    balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)
                                                    if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)):
                                                        revert with 'NH{q', 17
                                                    balanceOf[arg1] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)
                                                    emit Transfer((arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)), msg.sender, arg1);
                require ext_code.size(dividendTrackerAddress)
                call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                     gas gas_remaining wei
                    args msg.sender, balanceOf[address(msg.sender)]
                require ext_code.size(dividendTrackerAddress)
                call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                     gas gas_remaining wei
                    args address(arg1), balanceOf[address(arg1)]
                if not stor7:
                    call dividendTrackerAddress.process(uint256 arg1) with:
                         gas gas_remaining wei
                        args gasForProcessing
                    if ext_call.success:
                        require return_data.size >= 96
                        emit ProcessedDividendTracker(ext_call.return_data[0], ext_call.return_data[32], ext_call.return_data[64], gasForProcessing, 1, tx.origin);
            else:
                if uniswapV2PairAddress == arg1:
                    if balanceOf[this.address] < swapTokensAtAmount:
                        if stor21[address(msg.sender)]:
                            if not msg.sender:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                            if not arg1:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                            if balanceOf[address(msg.sender)] < arg2:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                            balanceOf[address(msg.sender)] -= arg2
                            if balanceOf[arg1] > !arg2:
                                revert with 'NH{q', 17
                            balanceOf[arg1] += arg2
                            emit Transfer(arg2, msg.sender, arg1);
                        else:
                            if stor21[address(arg1)]:
                                if not msg.sender:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                if not arg1:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                if balanceOf[address(msg.sender)] < arg2:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                balanceOf[address(msg.sender)] -= arg2
                                if balanceOf[arg1] > !arg2:
                                    revert with 'NH{q', 17
                                balanceOf[arg1] += arg2
                                emit Transfer(arg2, msg.sender, arg1);
                            else:
                                if stor7:
                                    if not msg.sender:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                    if not arg1:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                    if balanceOf[address(msg.sender)] < arg2:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                    balanceOf[address(msg.sender)] -= arg2
                                    if balanceOf[arg1] > !arg2:
                                        revert with 'NH{q', 17
                                    balanceOf[arg1] += arg2
                                    emit Transfer(arg2, msg.sender, arg1);
                                else:
                                    if arg2 and totalFees > -1 / arg2:
                                        revert with 'NH{q', 17
                                    if not stor22[address(arg1)]:
                                        if arg2 < arg2 * totalFees / 100:
                                            revert with 'NH{q', 17
                                        if not msg.sender:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                        if not this.address:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                        if balanceOf[address(msg.sender)] < arg2 * totalFees / 100:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                        balanceOf[address(msg.sender)] -= arg2 * totalFees / 100
                                        if balanceOf[this.address] > !(arg2 * totalFees / 100):
                                            revert with 'NH{q', 17
                                        balanceOf[this.address] += arg2 * totalFees / 100
                                        emit Transfer((arg2 * totalFees / 100), msg.sender, this.address);
                                        if not msg.sender:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                        if not arg1:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                        if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100):
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                        balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100)
                                        if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100)):
                                            revert with 'NH{q', 17
                                        balanceOf[arg1] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100)
                                        emit Transfer((arg2 - (arg2 * totalFees / 100)), msg.sender, arg1);
                                    else:
                                        if arg2 and sellFeeIncreaseFactor > -1 / arg2:
                                            revert with 'NH{q', 17
                                        if arg2 * totalFees / 100 > !(arg2 * sellFeeIncreaseFactor / 100):
                                            revert with 'NH{q', 17
                                        if arg2 < (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100):
                                            revert with 'NH{q', 17
                                        if not msg.sender:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                        if not this.address:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                        if balanceOf[address(msg.sender)] < (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100):
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                        balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)
                                        if balanceOf[this.address] > !((arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)):
                                            revert with 'NH{q', 17
                                        balanceOf[this.address] = balanceOf[this.address] + (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)
                                        emit Transfer(((arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)), msg.sender, this.address);
                                        if not msg.sender:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                        if not arg1:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                        if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100):
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                        balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)
                                        if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)):
                                            revert with 'NH{q', 17
                                        balanceOf[arg1] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)
                                        emit Transfer((arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)), msg.sender, arg1);
                    else:
                        if stor7:
                            if stor21[address(msg.sender)]:
                                if not msg.sender:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                if not arg1:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                if balanceOf[address(msg.sender)] < arg2:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                balanceOf[address(msg.sender)] -= arg2
                                if balanceOf[arg1] > !arg2:
                                    revert with 'NH{q', 17
                                balanceOf[arg1] += arg2
                                emit Transfer(arg2, msg.sender, arg1);
                            else:
                                if stor21[address(arg1)]:
                                    if not msg.sender:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                    if not arg1:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                    if balanceOf[address(msg.sender)] < arg2:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                    balanceOf[address(msg.sender)] -= arg2
                                    if balanceOf[arg1] > !arg2:
                                        revert with 'NH{q', 17
                                    balanceOf[arg1] += arg2
                                    emit Transfer(arg2, msg.sender, arg1);
                                else:
                                    if stor7:
                                        if not msg.sender:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                        if not arg1:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                        if balanceOf[address(msg.sender)] < arg2:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                        balanceOf[address(msg.sender)] -= arg2
                                        if balanceOf[arg1] > !arg2:
                                            revert with 'NH{q', 17
                                        balanceOf[arg1] += arg2
                                        emit Transfer(arg2, msg.sender, arg1);
                                    else:
                                        if arg2 and totalFees > -1 / arg2:
                                            revert with 'NH{q', 17
                                        if not stor22[address(arg1)]:
                                            if arg2 < arg2 * totalFees / 100:
                                                revert with 'NH{q', 17
                                            if not msg.sender:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                            if not this.address:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                            if balanceOf[address(msg.sender)] < arg2 * totalFees / 100:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                            balanceOf[address(msg.sender)] -= arg2 * totalFees / 100
                                            if balanceOf[this.address] > !(arg2 * totalFees / 100):
                                                revert with 'NH{q', 17
                                            balanceOf[this.address] += arg2 * totalFees / 100
                                            emit Transfer((arg2 * totalFees / 100), msg.sender, this.address);
                                            if not msg.sender:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                            if not arg1:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                            if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100):
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                            balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100)
                                            if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100)):
                                                revert with 'NH{q', 17
                                            balanceOf[arg1] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100)
                                            emit Transfer((arg2 - (arg2 * totalFees / 100)), msg.sender, arg1);
                                        else:
                                            if arg2 and sellFeeIncreaseFactor > -1 / arg2:
                                                revert with 'NH{q', 17
                                            if arg2 * totalFees / 100 > !(arg2 * sellFeeIncreaseFactor / 100):
                                                revert with 'NH{q', 17
                                            if arg2 < (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100):
                                                revert with 'NH{q', 17
                                            if not msg.sender:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                            if not this.address:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                            if balanceOf[address(msg.sender)] < (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100):
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                            balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)
                                            if balanceOf[this.address] > !((arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)):
                                                revert with 'NH{q', 17
                                            balanceOf[this.address] = balanceOf[this.address] + (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)
                                            emit Transfer(((arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)), msg.sender, this.address);
                                            if not msg.sender:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                            if not arg1:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                            if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100):
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                            balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)
                                            if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)):
                                                revert with 'NH{q', 17
                                            balanceOf[arg1] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)
                                            emit Transfer((arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)), msg.sender, arg1);
                        else:
                            if stor22[address(msg.sender)]:
                                if stor21[address(msg.sender)]:
                                    if not msg.sender:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                    if not arg1:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                    if balanceOf[address(msg.sender)] < arg2:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                    balanceOf[address(msg.sender)] -= arg2
                                    if balanceOf[arg1] > !arg2:
                                        revert with 'NH{q', 17
                                    balanceOf[arg1] += arg2
                                    emit Transfer(arg2, msg.sender, arg1);
                                else:
                                    if stor21[address(arg1)]:
                                        if not msg.sender:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                        if not arg1:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                        if balanceOf[address(msg.sender)] < arg2:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                        balanceOf[address(msg.sender)] -= arg2
                                        if balanceOf[arg1] > !arg2:
                                            revert with 'NH{q', 17
                                        balanceOf[arg1] += arg2
                                        emit Transfer(arg2, msg.sender, arg1);
                                    else:
                                        if stor7:
                                            if not msg.sender:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                            if not arg1:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                            if balanceOf[address(msg.sender)] < arg2:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                            balanceOf[address(msg.sender)] -= arg2
                                            if balanceOf[arg1] > !arg2:
                                                revert with 'NH{q', 17
                                            balanceOf[arg1] += arg2
                                            emit Transfer(arg2, msg.sender, arg1);
                                        else:
                                            if arg2 and totalFees > -1 / arg2:
                                                revert with 'NH{q', 17
                                            if not stor22[address(arg1)]:
                                                if arg2 < arg2 * totalFees / 100:
                                                    revert with 'NH{q', 17
                                                if not msg.sender:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                if not this.address:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                if balanceOf[address(msg.sender)] < arg2 * totalFees / 100:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                balanceOf[address(msg.sender)] -= arg2 * totalFees / 100
                                                if balanceOf[this.address] > !(arg2 * totalFees / 100):
                                                    revert with 'NH{q', 17
                                                balanceOf[this.address] += arg2 * totalFees / 100
                                                emit Transfer((arg2 * totalFees / 100), msg.sender, this.address);
                                                if not msg.sender:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                if not arg1:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100):
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100)
                                                if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100)):
                                                    revert with 'NH{q', 17
                                                balanceOf[arg1] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100)
                                                emit Transfer((arg2 - (arg2 * totalFees / 100)), msg.sender, arg1);
                                            else:
                                                if arg2 and sellFeeIncreaseFactor > -1 / arg2:
                                                    revert with 'NH{q', 17
                                                if arg2 * totalFees / 100 > !(arg2 * sellFeeIncreaseFactor / 100):
                                                    revert with 'NH{q', 17
                                                if arg2 < (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100):
                                                    revert with 'NH{q', 17
                                                if not msg.sender:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                if not this.address:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                if balanceOf[address(msg.sender)] < (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100):
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)
                                                if balanceOf[this.address] > !((arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)):
                                                    revert with 'NH{q', 17
                                                balanceOf[this.address] = balanceOf[this.address] + (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)
                                                emit Transfer(((arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)), msg.sender, this.address);
                                                if not msg.sender:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                if not arg1:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100):
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)
                                                if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)):
                                                    revert with 'NH{q', 17
                                                balanceOf[arg1] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)
                                                emit Transfer((arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)), msg.sender, arg1);
                            else:
                                if owner == msg.sender:
                                    if stor21[address(msg.sender)]:
                                        if not msg.sender:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                        if not arg1:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                        if balanceOf[address(msg.sender)] < arg2:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                        balanceOf[address(msg.sender)] -= arg2
                                        if balanceOf[arg1] > !arg2:
                                            revert with 'NH{q', 17
                                        balanceOf[arg1] += arg2
                                        emit Transfer(arg2, msg.sender, arg1);
                                    else:
                                        if stor21[address(arg1)]:
                                            if not msg.sender:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                            if not arg1:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                            if balanceOf[address(msg.sender)] < arg2:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                            balanceOf[address(msg.sender)] -= arg2
                                            if balanceOf[arg1] > !arg2:
                                                revert with 'NH{q', 17
                                            balanceOf[arg1] += arg2
                                            emit Transfer(arg2, msg.sender, arg1);
                                        else:
                                            if stor7:
                                                if not msg.sender:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                if not arg1:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                if balanceOf[address(msg.sender)] < arg2:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                balanceOf[address(msg.sender)] -= arg2
                                                if balanceOf[arg1] > !arg2:
                                                    revert with 'NH{q', 17
                                                balanceOf[arg1] += arg2
                                                emit Transfer(arg2, msg.sender, arg1);
                                            else:
                                                if arg2 and totalFees > -1 / arg2:
                                                    revert with 'NH{q', 17
                                                if not stor22[address(arg1)]:
                                                    if arg2 < arg2 * totalFees / 100:
                                                        revert with 'NH{q', 17
                                                    if not msg.sender:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                    if not this.address:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                    if balanceOf[address(msg.sender)] < arg2 * totalFees / 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                    balanceOf[address(msg.sender)] -= arg2 * totalFees / 100
                                                    if balanceOf[this.address] > !(arg2 * totalFees / 100):
                                                        revert with 'NH{q', 17
                                                    balanceOf[this.address] += arg2 * totalFees / 100
                                                    emit Transfer((arg2 * totalFees / 100), msg.sender, this.address);
                                                    if not msg.sender:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                    if not arg1:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                    if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100):
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                    balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100)
                                                    if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100)):
                                                        revert with 'NH{q', 17
                                                    balanceOf[arg1] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100)
                                                    emit Transfer((arg2 - (arg2 * totalFees / 100)), msg.sender, arg1);
                                                else:
                                                    if arg2 and sellFeeIncreaseFactor > -1 / arg2:
                                                        revert with 'NH{q', 17
                                                    if arg2 * totalFees / 100 > !(arg2 * sellFeeIncreaseFactor / 100):
                                                        revert with 'NH{q', 17
                                                    if arg2 < (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100):
                                                        revert with 'NH{q', 17
                                                    if not msg.sender:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                    if not this.address:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                    if balanceOf[address(msg.sender)] < (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100):
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                    balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)
                                                    if balanceOf[this.address] > !((arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)):
                                                        revert with 'NH{q', 17
                                                    balanceOf[this.address] = balanceOf[this.address] + (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)
                                                    emit Transfer(((arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)), msg.sender, this.address);
                                                    if not msg.sender:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                    if not arg1:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                    if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100):
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                    balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)
                                                    if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)):
                                                        revert with 'NH{q', 17
                                                    balanceOf[arg1] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)
                                                    emit Transfer((arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)), msg.sender, arg1);
                                else:
                                    if owner == arg1:
                                        if stor21[address(msg.sender)]:
                                            if not msg.sender:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                            if not arg1:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                            if balanceOf[address(msg.sender)] < arg2:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                            balanceOf[address(msg.sender)] -= arg2
                                            if balanceOf[arg1] > !arg2:
                                                revert with 'NH{q', 17
                                            balanceOf[arg1] += arg2
                                            emit Transfer(arg2, msg.sender, arg1);
                                        else:
                                            if stor21[address(arg1)]:
                                                if not msg.sender:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                if not arg1:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                if balanceOf[address(msg.sender)] < arg2:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                balanceOf[address(msg.sender)] -= arg2
                                                if balanceOf[arg1] > !arg2:
                                                    revert with 'NH{q', 17
                                                balanceOf[arg1] += arg2
                                                emit Transfer(arg2, msg.sender, arg1);
                                            else:
                                                if stor7:
                                                    if not msg.sender:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                    if not arg1:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                    if balanceOf[address(msg.sender)] < arg2:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                    balanceOf[address(msg.sender)] -= arg2
                                                    if balanceOf[arg1] > !arg2:
                                                        revert with 'NH{q', 17
                                                    balanceOf[arg1] += arg2
                                                    emit Transfer(arg2, msg.sender, arg1);
                                                else:
                                                    if arg2 and totalFees > -1 / arg2:
                                                        revert with 'NH{q', 17
                                                    if not stor22[address(arg1)]:
                                                        if arg2 < arg2 * totalFees / 100:
                                                            revert with 'NH{q', 17
                                                        if not msg.sender:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                        if not this.address:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                        if balanceOf[address(msg.sender)] < arg2 * totalFees / 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                        balanceOf[address(msg.sender)] -= arg2 * totalFees / 100
                                                        if balanceOf[this.address] > !(arg2 * totalFees / 100):
                                                            revert with 'NH{q', 17
                                                        balanceOf[this.address] += arg2 * totalFees / 100
                                                        emit Transfer((arg2 * totalFees / 100), msg.sender, this.address);
                                                        if not msg.sender:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                        if not arg1:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                        if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100):
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                        balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100)
                                                        if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100)):
                                                            revert with 'NH{q', 17
                                                        balanceOf[arg1] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100)
                                                        emit Transfer((arg2 - (arg2 * totalFees / 100)), msg.sender, arg1);
                                                    else:
                                                        if arg2 and sellFeeIncreaseFactor > -1 / arg2:
                                                            revert with 'NH{q', 17
                                                        if arg2 * totalFees / 100 > !(arg2 * sellFeeIncreaseFactor / 100):
                                                            revert with 'NH{q', 17
                                                        if arg2 < (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100):
                                                            revert with 'NH{q', 17
                                                        if not msg.sender:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                        if not this.address:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                        if balanceOf[address(msg.sender)] < (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100):
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                        balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)
                                                        if balanceOf[this.address] > !((arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)):
                                                            revert with 'NH{q', 17
                                                        balanceOf[this.address] = balanceOf[this.address] + (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)
                                                        emit Transfer(((arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)), msg.sender, this.address);
                                                        if not msg.sender:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                        if not arg1:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                        if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100):
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                        balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)
                                                        if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)):
                                                            revert with 'NH{q', 17
                                                        balanceOf[arg1] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)
                                                        emit Transfer((arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)), msg.sender, arg1);
                                    else:
                                        stor7 = 1
                                        if balanceOf[this.address] and marketingFee > -1 / balanceOf[this.address]:
                                            revert with 'NH{q', 17
                                        if not totalFees:
                                            revert with 'NH{q', 18
                                        mem[96] = 2
                                        mem[128] = this.address
                                        staticcall uniswapV2RouterAddress.WETH() with:
                                                gas gas_remaining wei
                                        mem[192] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                        mem[160] = ext_call.return_data[12 len 20]
                                        if not this.address:
                                            revert with 0, 'ERC20: approve from the zero address'
                                        if not uniswapV2RouterAddress:
                                            revert with 0, 'ERC20: approve to the zero address'
                                        allowance[address(this.address)][stor6].field_0 = balanceOf[this.address] * marketingFee / totalFees
                                        emit Approval((balanceOf[this.address] * marketingFee / totalFees), this.address, uniswapV2RouterAddress);
                                        mem[ceil32(return_data.size) + 192] = 0x791ac94700000000000000000000000000000000000000000000000000000000
                                        mem[ceil32(return_data.size) + 196] = balanceOf[this.address] * marketingFee / totalFees
                                        mem[ceil32(return_data.size) + 356] = 2
                                        idx = 0
                                        s = ceil32(return_data.size) + 388
                                        t = 128
                                        while idx < 2:
                                            mem[s] = mem[t + 12 len 20]
                                            idx = idx + 1
                                            s = s + 32
                                            t = t + 32
                                            continue 
                                        mem[ceil32(return_data.size) + 292] = this.address
                                        mem[ceil32(return_data.size) + 324] = block.timestamp
                                        require ext_code.size(uniswapV2RouterAddress)
                                        call uniswapV2RouterAddress.swapExactTokensForETHSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args balanceOf[this.address] * marketingFee / totalFees, 0, 160, address(this.address), block.timestamp, 2, mem[ceil32(return_data.size) + 388 len 64]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        call _marketingWalletAddress with:
                                           value eth.balance(this.address) wei
                                             gas 2300 * is_zero(value) wei
                                        if balanceOf[this.address] and liquidityFee > -1 / balanceOf[this.address]:
                                            revert with 'NH{q', 17
                                        if not totalFees:
                                            revert with 'NH{q', 18
                                        if balanceOf[this.address] * liquidityFee / totalFees < balanceOf[this.address] * liquidityFee / totalFees / 2:
                                            revert with 'NH{q', 17
                                        mem[ceil32(return_data.size) + 192] = 2
                                        mem[ceil32(return_data.size) + 224] = this.address
                                        staticcall uniswapV2RouterAddress.WETH() with:
                                                gas gas_remaining wei
                                        mem[ceil32(return_data.size) + 288] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                        mem[ceil32(return_data.size) + 256] = ext_call.return_data[12 len 20]
                                        if not this.address:
                                            revert with 0, 'ERC20: approve from the zero address'
                                        if not uniswapV2RouterAddress:
                                            revert with 0, 'ERC20: approve to the zero address'
                                        allowance[address(this.address)][stor6].field_0 = balanceOf[this.address] * liquidityFee / totalFees / 2
                                        allowance[address(this.address)][stor6].field_255 = 0
                                        emit Approval((balanceOf[this.address] * liquidityFee / totalFees / 2), this.address, uniswapV2RouterAddress);
                                        mem[(2 * ceil32(return_data.size)) + 288] = 0x791ac94700000000000000000000000000000000000000000000000000000000
                                        mem[(2 * ceil32(return_data.size)) + 292] = balanceOf[this.address] * liquidityFee / totalFees / 2
                                        mem[(2 * ceil32(return_data.size)) + 324] = 0
                                        mem[(2 * ceil32(return_data.size)) + 356] = 160
                                        mem[(2 * ceil32(return_data.size)) + 452] = 2
                                        idx = 0
                                        s = (2 * ceil32(return_data.size)) + 484
                                        t = ceil32(return_data.size) + 224
                                        while idx < mem[ceil32(return_data.size) + 192]:
                                            mem[s] = mem[t + 12 len 20]
                                            idx = idx + 1
                                            s = s + 32
                                            t = t + 32
                                            continue 
                                        mem[(2 * ceil32(return_data.size)) + 388] = this.address
                                        mem[(2 * ceil32(return_data.size)) + 420] = block.timestamp
                                        require ext_code.size(uniswapV2RouterAddress)
                                        call uniswapV2RouterAddress.swapExactTokensForETHSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args Mask(255, 1, balanceOf[this.address] * liquidityFee / totalFees), 0, 160, address(this.address), block.timestamp, mem[(2 * ceil32(return_data.size)) + 452 len (32 * mem[ceil32(return_data.size) + 192]) + 32]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        if eth.balance(this.address) < eth.balance(this.address):
                                            revert with 'NH{q', 17
                                        if not this.address:
                                            revert with 0, 'ERC20: approve from the zero address'
                                        if not uniswapV2RouterAddress:
                                            revert with 0, 'ERC20: approve to the zero address'
                                        allowance[address(this.address)][stor6].field_0 = (balanceOf[this.address] * liquidityFee / totalFees) - (balanceOf[this.address] * liquidityFee / totalFees / 2)
                                        emit Approval(((balanceOf[this.address] * liquidityFee / totalFees) - (balanceOf[this.address] * liquidityFee / totalFees / 2)), this.address, uniswapV2RouterAddress);
                                        mem[(2 * ceil32(return_data.size)) + 292] = this.address
                                        mem[(2 * ceil32(return_data.size)) + 324] = (balanceOf[this.address] * liquidityFee / totalFees) - (balanceOf[this.address] * liquidityFee / totalFees / 2)
                                        mem[(2 * ceil32(return_data.size)) + 356] = 0
                                        mem[(2 * ceil32(return_data.size)) + 388] = 0
                                        mem[(2 * ceil32(return_data.size)) + 420] = 0
                                        mem[(2 * ceil32(return_data.size)) + 452] = block.timestamp
                                        call uniswapV2RouterAddress.addLiquidityETH(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                             gas gas_remaining wei
                                            args this.address, (balanceOf[this.address] * liquidityFee / totalFees) - (balanceOf[this.address] * liquidityFee / totalFees / 2), 0, 0, 0, block.timestamp
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 96
                                        emit SwapAndLiquify(Mask(255, 1, balanceOf[this.address] * liquidityFee / totalFees), 0, (balanceOf[this.address] * liquidityFee / totalFees) - (balanceOf[this.address] * liquidityFee / totalFees / 2));
                                        mem[(4 * ceil32(return_data.size)) + 288] = 2
                                        mem[(4 * ceil32(return_data.size)) + 320] = this.address
                                        staticcall uniswapV2RouterAddress.WETH() with:
                                                gas gas_remaining wei
                                        mem[(4 * ceil32(return_data.size)) + 384] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[64] = (6 * ceil32(return_data.size)) + 384
                                        require return_data.size >= 32
                                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                        mem[(4 * ceil32(return_data.size)) + 352] = ext_call.return_data[12 len 20]
                                        if not this.address:
                                            revert with 0, 'ERC20: approve from the zero address'
                                        if not uniswapV2RouterAddress:
                                            revert with 0, 'ERC20: approve to the zero address'
                                        mem[0] = uniswapV2RouterAddress
                                        mem[32] = sha3(address(this.address), 1)
                                        allowance[address(this.address)][stor6].field_0 = balanceOf[this.address]
                                        emit Approval(balanceOf[this.address], this.address, uniswapV2RouterAddress);
                                        mem[(6 * ceil32(return_data.size)) + 384] = 0x791ac94700000000000000000000000000000000000000000000000000000000
                                        mem[(6 * ceil32(return_data.size)) + 388] = balanceOf[this.address]
                                        mem[(6 * ceil32(return_data.size)) + 420] = 0
                                        mem[(6 * ceil32(return_data.size)) + 452] = 160
                                        mem[(6 * ceil32(return_data.size)) + 548] = 2
                                        idx = 0
                                        s = (6 * ceil32(return_data.size)) + 580
                                        t = (4 * ceil32(return_data.size)) + 320
                                        while idx < mem[(4 * ceil32(return_data.size)) + 288]:
                                            mem[s] = mem[t + 12 len 20]
                                            idx = idx + 1
                                            s = s + 32
                                            t = t + 32
                                            continue 
                                        require ext_code.size(uniswapV2RouterAddress)
                                        call uniswapV2RouterAddress.swapExactTokensForETHSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args balanceOf[this.address], 0, 160, address(this.address), block.timestamp, mem[(6 * ceil32(return_data.size)) + 548 len (32 * mem[(4 * ceil32(return_data.size)) + 288]) + 32]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        call dividendTrackerAddress with:
                                           value eth.balance(this.address) wei
                                             gas gas_remaining wei
                                        if ext_call.success:
                                            emit SendDividends(balanceOf[this.address], eth.balance(this.address));
                                        stor7 = 0
                                        if stor21[address(msg.sender)]:
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if not arg1:
                                                revert with 0, 'ERC20: transfer to the zero address'
                                            if balanceOf[address(msg.sender)] < arg2:
                                                revert with 0, 'ERC20: transfer amount exceeds balance'
                                            balanceOf[address(msg.sender)] -= arg2
                                            if balanceOf[arg1] > !arg2:
                                                revert with 'NH{q', 17
                                            balanceOf[arg1] += arg2
                                            emit Transfer(arg2, msg.sender, arg1);
                                        else:
                                            if stor21[address(arg1)]:
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if not arg1:
                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                if balanceOf[address(msg.sender)] < arg2:
                                                    revert with 0, 'ERC20: transfer amount exceeds balance'
                                                balanceOf[address(msg.sender)] -= arg2
                                                if balanceOf[arg1] > !arg2:
                                                    revert with 'NH{q', 17
                                                balanceOf[arg1] += arg2
                                                emit Transfer(arg2, msg.sender, arg1);
                                            else:
                                                if stor7:
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if not arg1:
                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                    if balanceOf[address(msg.sender)] < arg2:
                                                        revert with 0, 'ERC20: transfer amount exceeds balance'
                                                    balanceOf[address(msg.sender)] -= arg2
                                                    if balanceOf[arg1] > !arg2:
                                                        revert with 'NH{q', 17
                                                    balanceOf[arg1] += arg2
                                                    emit Transfer(arg2, msg.sender, arg1);
                                                else:
                                                    if arg2 and totalFees > -1 / arg2:
                                                        revert with 'NH{q', 17
                                                    if not stor22[address(arg1)]:
                                                        if arg2 < arg2 * totalFees / 100:
                                                            revert with 'NH{q', 17
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if not this.address:
                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                        if balanceOf[address(msg.sender)] < arg2 * totalFees / 100:
                                                            revert with 0, 'ERC20: transfer amount exceeds balance'
                                                        balanceOf[address(msg.sender)] -= arg2 * totalFees / 100
                                                        if balanceOf[this.address] > !(arg2 * totalFees / 100):
                                                            revert with 'NH{q', 17
                                                        balanceOf[this.address] += arg2 * totalFees / 100
                                                        emit Transfer((arg2 * totalFees / 100), msg.sender, this.address);
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if not arg1:
                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                        if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100):
                                                            revert with 0, 'ERC20: transfer amount exceeds balance'
                                                        balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100)
                                                        if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100)):
                                                            revert with 'NH{q', 17
                                                        balanceOf[arg1] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100)
                                                        emit Transfer((arg2 - (arg2 * totalFees / 100)), msg.sender, arg1);
                                                    else:
                                                        if arg2 and sellFeeIncreaseFactor > -1 / arg2:
                                                            revert with 'NH{q', 17
                                                        if arg2 * totalFees / 100 > !(arg2 * sellFeeIncreaseFactor / 100):
                                                            revert with 'NH{q', 17
                                                        if arg2 < (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100):
                                                            revert with 'NH{q', 17
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if not this.address:
                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                        if balanceOf[address(msg.sender)] < (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100):
                                                            revert with 0, 'ERC20: transfer amount exceeds balance'
                                                        balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)
                                                        if balanceOf[this.address] > !((arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)):
                                                            revert with 'NH{q', 17
                                                        balanceOf[this.address] = balanceOf[this.address] + (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)
                                                        emit Transfer(((arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)), msg.sender, this.address);
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if not arg1:
                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                        if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100):
                                                            revert with 0, 'ERC20: transfer amount exceeds balance'
                                                        balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)
                                                        if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)):
                                                            revert with 'NH{q', 17
                                                        balanceOf[arg1] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)
                                                        emit Transfer((arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)), msg.sender, arg1);
                    require ext_code.size(dividendTrackerAddress)
                    call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                         gas gas_remaining wei
                        args msg.sender, balanceOf[address(msg.sender)]
                    require ext_code.size(dividendTrackerAddress)
                    call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                         gas gas_remaining wei
                        args address(arg1), balanceOf[address(arg1)]
                    if not stor7:
                        call dividendTrackerAddress.process(uint256 arg1) with:
                             gas gas_remaining wei
                            args gasForProcessing
                        if ext_call.success:
                            require return_data.size >= 96
                            emit ProcessedDividendTracker(ext_call.return_data[0], ext_call.return_data[32], ext_call.return_data[64], gasForProcessing, 1, tx.origin);
                else:
                    if balanceOf[address(arg1)] > !arg2:
                        revert with 'NH{q', 17
                    if balanceOf[address(arg1)] + arg2 > maxWalletBalance:
                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'Recipient balance is exceeding maxWalletBalance'
                    if balanceOf[this.address] < swapTokensAtAmount:
                        if stor21[address(msg.sender)]:
                            if not msg.sender:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                            if not arg1:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                            if balanceOf[address(msg.sender)] < arg2:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                            balanceOf[address(msg.sender)] -= arg2
                            if balanceOf[arg1] > !arg2:
                                revert with 'NH{q', 17
                            balanceOf[arg1] += arg2
                            emit Transfer(arg2, msg.sender, arg1);
                        else:
                            if stor21[address(arg1)]:
                                if not msg.sender:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                if not arg1:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                if balanceOf[address(msg.sender)] < arg2:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                balanceOf[address(msg.sender)] -= arg2
                                if balanceOf[arg1] > !arg2:
                                    revert with 'NH{q', 17
                                balanceOf[arg1] += arg2
                                emit Transfer(arg2, msg.sender, arg1);
                            else:
                                if stor7:
                                    if not msg.sender:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                    if not arg1:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                    if balanceOf[address(msg.sender)] < arg2:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                    balanceOf[address(msg.sender)] -= arg2
                                    if balanceOf[arg1] > !arg2:
                                        revert with 'NH{q', 17
                                    balanceOf[arg1] += arg2
                                    emit Transfer(arg2, msg.sender, arg1);
                                else:
                                    if arg2 and totalFees > -1 / arg2:
                                        revert with 'NH{q', 17
                                    if not stor22[address(arg1)]:
                                        if arg2 < arg2 * totalFees / 100:
                                            revert with 'NH{q', 17
                                        if not msg.sender:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                        if not this.address:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                        if balanceOf[address(msg.sender)] < arg2 * totalFees / 100:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                        balanceOf[address(msg.sender)] -= arg2 * totalFees / 100
                                        if balanceOf[this.address] > !(arg2 * totalFees / 100):
                                            revert with 'NH{q', 17
                                        balanceOf[this.address] += arg2 * totalFees / 100
                                        emit Transfer((arg2 * totalFees / 100), msg.sender, this.address);
                                        if not msg.sender:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                        if not arg1:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                        if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100):
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                        balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100)
                                        if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100)):
                                            revert with 'NH{q', 17
                                        balanceOf[arg1] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100)
                                        emit Transfer((arg2 - (arg2 * totalFees / 100)), msg.sender, arg1);
                                    else:
                                        if arg2 and sellFeeIncreaseFactor > -1 / arg2:
                                            revert with 'NH{q', 17
                                        if arg2 * totalFees / 100 > !(arg2 * sellFeeIncreaseFactor / 100):
                                            revert with 'NH{q', 17
                                        if arg2 < (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100):
                                            revert with 'NH{q', 17
                                        if not msg.sender:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                        if not this.address:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                        if balanceOf[address(msg.sender)] < (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100):
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                        balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)
                                        if balanceOf[this.address] > !((arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)):
                                            revert with 'NH{q', 17
                                        balanceOf[this.address] = balanceOf[this.address] + (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)
                                        emit Transfer(((arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)), msg.sender, this.address);
                                        if not msg.sender:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                        if not arg1:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                        if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100):
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                        balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)
                                        if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)):
                                            revert with 'NH{q', 17
                                        balanceOf[arg1] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)
                                        emit Transfer((arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)), msg.sender, arg1);
                        require ext_code.size(dividendTrackerAddress)
                        call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                             gas gas_remaining wei
                            args msg.sender, balanceOf[address(msg.sender)]
                        require ext_code.size(dividendTrackerAddress)
                        call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                             gas gas_remaining wei
                            args address(arg1), balanceOf[address(arg1)]
                        if not stor7:
                            call dividendTrackerAddress.process(uint256 arg1) with:
                                 gas gas_remaining wei
                                args gasForProcessing
                            if ext_call.success:
                                require return_data.size >= 96
                                emit ProcessedDividendTracker(ext_call.return_data[0], ext_call.return_data[32], ext_call.return_data[64], gasForProcessing, 1, tx.origin);
                    else:
                        if stor7:
                            if stor21[address(msg.sender)]:
                                if not msg.sender:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                if not arg1:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                if balanceOf[address(msg.sender)] < arg2:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                balanceOf[address(msg.sender)] -= arg2
                                if balanceOf[arg1] > !arg2:
                                    revert with 'NH{q', 17
                                balanceOf[arg1] += arg2
                                emit Transfer(arg2, msg.sender, arg1);
                            else:
                                if stor21[address(arg1)]:
                                    if not msg.sender:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                    if not arg1:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                    if balanceOf[address(msg.sender)] < arg2:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                    balanceOf[address(msg.sender)] -= arg2
                                    if balanceOf[arg1] > !arg2:
                                        revert with 'NH{q', 17
                                    balanceOf[arg1] += arg2
                                    emit Transfer(arg2, msg.sender, arg1);
                                else:
                                    if stor7:
                                        if not msg.sender:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                        if not arg1:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                        if balanceOf[address(msg.sender)] < arg2:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                        balanceOf[address(msg.sender)] -= arg2
                                        if balanceOf[arg1] > !arg2:
                                            revert with 'NH{q', 17
                                        balanceOf[arg1] += arg2
                                        emit Transfer(arg2, msg.sender, arg1);
                                    else:
                                        if arg2 and totalFees > -1 / arg2:
                                            revert with 'NH{q', 17
                                        if not stor22[address(arg1)]:
                                            if arg2 < arg2 * totalFees / 100:
                                                revert with 'NH{q', 17
                                            if not msg.sender:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                            if not this.address:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                            if balanceOf[address(msg.sender)] < arg2 * totalFees / 100:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                            balanceOf[address(msg.sender)] -= arg2 * totalFees / 100
                                            if balanceOf[this.address] > !(arg2 * totalFees / 100):
                                                revert with 'NH{q', 17
                                            balanceOf[this.address] += arg2 * totalFees / 100
                                            emit Transfer((arg2 * totalFees / 100), msg.sender, this.address);
                                            if not msg.sender:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                            if not arg1:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                            if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100):
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                            balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100)
                                            if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100)):
                                                revert with 'NH{q', 17
                                            balanceOf[arg1] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100)
                                            emit Transfer((arg2 - (arg2 * totalFees / 100)), msg.sender, arg1);
                                        else:
                                            if arg2 and sellFeeIncreaseFactor > -1 / arg2:
                                                revert with 'NH{q', 17
                                            if arg2 * totalFees / 100 > !(arg2 * sellFeeIncreaseFactor / 100):
                                                revert with 'NH{q', 17
                                            if arg2 < (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100):
                                                revert with 'NH{q', 17
                                            if not msg.sender:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                            if not this.address:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                            if balanceOf[address(msg.sender)] < (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100):
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                            balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)
                                            if balanceOf[this.address] > !((arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)):
                                                revert with 'NH{q', 17
                                            balanceOf[this.address] = balanceOf[this.address] + (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)
                                            emit Transfer(((arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)), msg.sender, this.address);
                                            if not msg.sender:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                            if not arg1:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                            if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100):
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                            balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)
                                            if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)):
                                                revert with 'NH{q', 17
                                            balanceOf[arg1] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)
                                            emit Transfer((arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)), msg.sender, arg1);
                            require ext_code.size(dividendTrackerAddress)
                            call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                 gas gas_remaining wei
                                args msg.sender, balanceOf[address(msg.sender)]
                            require ext_code.size(dividendTrackerAddress)
                            call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                 gas gas_remaining wei
                                args address(arg1), balanceOf[address(arg1)]
                            if not stor7:
                                call dividendTrackerAddress.process(uint256 arg1) with:
                                     gas gas_remaining wei
                                    args gasForProcessing
                                if ext_call.success:
                                    require return_data.size >= 96
                                    emit ProcessedDividendTracker(ext_call.return_data[0], ext_call.return_data[32], ext_call.return_data[64], gasForProcessing, 1, tx.origin);
                        else:
                            if stor22[address(msg.sender)]:
                                if stor21[address(msg.sender)]:
                                    if not msg.sender:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                    if not arg1:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                    if balanceOf[address(msg.sender)] < arg2:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                    balanceOf[address(msg.sender)] -= arg2
                                    if balanceOf[arg1] > !arg2:
                                        revert with 'NH{q', 17
                                    balanceOf[arg1] += arg2
                                    emit Transfer(arg2, msg.sender, arg1);
                                else:
                                    if stor21[address(arg1)]:
                                        if not msg.sender:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                        if not arg1:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                        if balanceOf[address(msg.sender)] < arg2:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                        balanceOf[address(msg.sender)] -= arg2
                                        if balanceOf[arg1] > !arg2:
                                            revert with 'NH{q', 17
                                        balanceOf[arg1] += arg2
                                        emit Transfer(arg2, msg.sender, arg1);
                                    else:
                                        if stor7:
                                            if not msg.sender:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                            if not arg1:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                            if balanceOf[address(msg.sender)] < arg2:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                            balanceOf[address(msg.sender)] -= arg2
                                            if balanceOf[arg1] > !arg2:
                                                revert with 'NH{q', 17
                                            balanceOf[arg1] += arg2
                                            emit Transfer(arg2, msg.sender, arg1);
                                        else:
                                            if arg2 and totalFees > -1 / arg2:
                                                revert with 'NH{q', 17
                                            if not stor22[address(arg1)]:
                                                if arg2 < arg2 * totalFees / 100:
                                                    revert with 'NH{q', 17
                                                if not msg.sender:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                if not this.address:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                if balanceOf[address(msg.sender)] < arg2 * totalFees / 100:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                balanceOf[address(msg.sender)] -= arg2 * totalFees / 100
                                                if balanceOf[this.address] > !(arg2 * totalFees / 100):
                                                    revert with 'NH{q', 17
                                                balanceOf[this.address] += arg2 * totalFees / 100
                                                emit Transfer((arg2 * totalFees / 100), msg.sender, this.address);
                                                if not msg.sender:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                if not arg1:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100):
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100)
                                                if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100)):
                                                    revert with 'NH{q', 17
                                                balanceOf[arg1] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100)
                                                emit Transfer((arg2 - (arg2 * totalFees / 100)), msg.sender, arg1);
                                            else:
                                                if arg2 and sellFeeIncreaseFactor > -1 / arg2:
                                                    revert with 'NH{q', 17
                                                if arg2 * totalFees / 100 > !(arg2 * sellFeeIncreaseFactor / 100):
                                                    revert with 'NH{q', 17
                                                if arg2 < (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100):
                                                    revert with 'NH{q', 17
                                                if not msg.sender:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                if not this.address:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                if balanceOf[address(msg.sender)] < (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100):
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)
                                                if balanceOf[this.address] > !((arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)):
                                                    revert with 'NH{q', 17
                                                balanceOf[this.address] = balanceOf[this.address] + (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)
                                                emit Transfer(((arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)), msg.sender, this.address);
                                                if not msg.sender:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                if not arg1:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100):
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)
                                                if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)):
                                                    revert with 'NH{q', 17
                                                balanceOf[arg1] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)
                                                emit Transfer((arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)), msg.sender, arg1);
                                require ext_code.size(dividendTrackerAddress)
                                call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                     gas gas_remaining wei
                                    args msg.sender, balanceOf[address(msg.sender)]
                                require ext_code.size(dividendTrackerAddress)
                                call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                     gas gas_remaining wei
                                    args address(arg1), balanceOf[address(arg1)]
                                if not stor7:
                                    call dividendTrackerAddress.process(uint256 arg1) with:
                                         gas gas_remaining wei
                                        args gasForProcessing
                                    if ext_call.success:
                                        require return_data.size >= 96
                                        emit ProcessedDividendTracker(ext_call.return_data[0], ext_call.return_data[32], ext_call.return_data[64], gasForProcessing, 1, tx.origin);
                            else:
                                if owner == msg.sender:
                                    if stor21[address(msg.sender)]:
                                        if not msg.sender:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                        if not arg1:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                        if balanceOf[address(msg.sender)] < arg2:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                        balanceOf[address(msg.sender)] -= arg2
                                        if balanceOf[arg1] > !arg2:
                                            revert with 'NH{q', 17
                                        balanceOf[arg1] += arg2
                                        emit Transfer(arg2, msg.sender, arg1);
                                    else:
                                        if stor21[address(arg1)]:
                                            if not msg.sender:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                            if not arg1:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                            if balanceOf[address(msg.sender)] < arg2:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                            balanceOf[address(msg.sender)] -= arg2
                                            if balanceOf[arg1] > !arg2:
                                                revert with 'NH{q', 17
                                            balanceOf[arg1] += arg2
                                            emit Transfer(arg2, msg.sender, arg1);
                                        else:
                                            if stor7:
                                                if not msg.sender:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                if not arg1:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                if balanceOf[address(msg.sender)] < arg2:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                balanceOf[address(msg.sender)] -= arg2
                                                if balanceOf[arg1] > !arg2:
                                                    revert with 'NH{q', 17
                                                balanceOf[arg1] += arg2
                                                emit Transfer(arg2, msg.sender, arg1);
                                            else:
                                                if arg2 and totalFees > -1 / arg2:
                                                    revert with 'NH{q', 17
                                                if not stor22[address(arg1)]:
                                                    if arg2 < arg2 * totalFees / 100:
                                                        revert with 'NH{q', 17
                                                    if not msg.sender:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                    if not this.address:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                    if balanceOf[address(msg.sender)] < arg2 * totalFees / 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                    balanceOf[address(msg.sender)] -= arg2 * totalFees / 100
                                                    if balanceOf[this.address] > !(arg2 * totalFees / 100):
                                                        revert with 'NH{q', 17
                                                    balanceOf[this.address] += arg2 * totalFees / 100
                                                    emit Transfer((arg2 * totalFees / 100), msg.sender, this.address);
                                                    if not msg.sender:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                    if not arg1:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                    if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100):
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                    balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100)
                                                    if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100)):
                                                        revert with 'NH{q', 17
                                                    balanceOf[arg1] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100)
                                                    emit Transfer((arg2 - (arg2 * totalFees / 100)), msg.sender, arg1);
                                                else:
                                                    if arg2 and sellFeeIncreaseFactor > -1 / arg2:
                                                        revert with 'NH{q', 17
                                                    if arg2 * totalFees / 100 > !(arg2 * sellFeeIncreaseFactor / 100):
                                                        revert with 'NH{q', 17
                                                    if arg2 < (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100):
                                                        revert with 'NH{q', 17
                                                    if not msg.sender:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                    if not this.address:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                    if balanceOf[address(msg.sender)] < (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100):
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                    balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)
                                                    if balanceOf[this.address] > !((arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)):
                                                        revert with 'NH{q', 17
                                                    balanceOf[this.address] = balanceOf[this.address] + (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)
                                                    emit Transfer(((arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)), msg.sender, this.address);
                                                    if not msg.sender:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                    if not arg1:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                    if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100):
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                    balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)
                                                    if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)):
                                                        revert with 'NH{q', 17
                                                    balanceOf[arg1] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)
                                                    emit Transfer((arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)), msg.sender, arg1);
                                    require ext_code.size(dividendTrackerAddress)
                                    call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                         gas gas_remaining wei
                                        args msg.sender, balanceOf[address(msg.sender)]
                                    require ext_code.size(dividendTrackerAddress)
                                    call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                         gas gas_remaining wei
                                        args address(arg1), balanceOf[address(arg1)]
                                    if not stor7:
                                        call dividendTrackerAddress.process(uint256 arg1) with:
                                             gas gas_remaining wei
                                            args gasForProcessing
                                        if ext_call.success:
                                            require return_data.size >= 96
                                            emit ProcessedDividendTracker(ext_call.return_data[0], ext_call.return_data[32], ext_call.return_data[64], gasForProcessing, 1, tx.origin);
                                else:
                                    if owner == arg1:
                                        if stor21[address(msg.sender)]:
                                            if not msg.sender:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                            if not arg1:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                            if balanceOf[address(msg.sender)] < arg2:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                            balanceOf[address(msg.sender)] -= arg2
                                            if balanceOf[arg1] > !arg2:
                                                revert with 'NH{q', 17
                                            balanceOf[arg1] += arg2
                                            emit Transfer(arg2, msg.sender, arg1);
                                        else:
                                            if stor21[address(arg1)]:
                                                if not msg.sender:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                if not arg1:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                if balanceOf[address(msg.sender)] < arg2:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                balanceOf[address(msg.sender)] -= arg2
                                                if balanceOf[arg1] > !arg2:
                                                    revert with 'NH{q', 17
                                                balanceOf[arg1] += arg2
                                                emit Transfer(arg2, msg.sender, arg1);
                                            else:
                                                if stor7:
                                                    if not msg.sender:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                    if not arg1:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                    if balanceOf[address(msg.sender)] < arg2:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                    balanceOf[address(msg.sender)] -= arg2
                                                    if balanceOf[arg1] > !arg2:
                                                        revert with 'NH{q', 17
                                                    balanceOf[arg1] += arg2
                                                    emit Transfer(arg2, msg.sender, arg1);
                                                else:
                                                    if arg2 and totalFees > -1 / arg2:
                                                        revert with 'NH{q', 17
                                                    if not stor22[address(arg1)]:
                                                        if arg2 < arg2 * totalFees / 100:
                                                            revert with 'NH{q', 17
                                                        if not msg.sender:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                        if not this.address:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                        if balanceOf[address(msg.sender)] < arg2 * totalFees / 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                        balanceOf[address(msg.sender)] -= arg2 * totalFees / 100
                                                        if balanceOf[this.address] > !(arg2 * totalFees / 100):
                                                            revert with 'NH{q', 17
                                                        balanceOf[this.address] += arg2 * totalFees / 100
                                                        emit Transfer((arg2 * totalFees / 100), msg.sender, this.address);
                                                        if not msg.sender:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                        if not arg1:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                        if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100):
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                        balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100)
                                                        if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100)):
                                                            revert with 'NH{q', 17
                                                        balanceOf[arg1] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100)
                                                        emit Transfer((arg2 - (arg2 * totalFees / 100)), msg.sender, arg1);
                                                    else:
                                                        if arg2 and sellFeeIncreaseFactor > -1 / arg2:
                                                            revert with 'NH{q', 17
                                                        if arg2 * totalFees / 100 > !(arg2 * sellFeeIncreaseFactor / 100):
                                                            revert with 'NH{q', 17
                                                        if arg2 < (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100):
                                                            revert with 'NH{q', 17
                                                        if not msg.sender:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                        if not this.address:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                        if balanceOf[address(msg.sender)] < (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100):
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                        balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)
                                                        if balanceOf[this.address] > !((arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)):
                                                            revert with 'NH{q', 17
                                                        balanceOf[this.address] = balanceOf[this.address] + (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)
                                                        emit Transfer(((arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)), msg.sender, this.address);
                                                        if not msg.sender:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                        if not arg1:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                        if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100):
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                        balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)
                                                        if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)):
                                                            revert with 'NH{q', 17
                                                        balanceOf[arg1] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)
                                                        emit Transfer((arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)), msg.sender, arg1);
                                        require ext_code.size(dividendTrackerAddress)
                                        call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                             gas gas_remaining wei
                                            args msg.sender, balanceOf[address(msg.sender)]
                                        require ext_code.size(dividendTrackerAddress)
                                        call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                             gas gas_remaining wei
                                            args address(arg1), balanceOf[address(arg1)]
                                        if not stor7:
                                            call dividendTrackerAddress.process(uint256 arg1) with:
                                                 gas gas_remaining wei
                                                args gasForProcessing
                                            if ext_call.success:
                                                require return_data.size >= 96
                                                emit ProcessedDividendTracker(ext_call.return_data[0], ext_call.return_data[32], ext_call.return_data[64], gasForProcessing, 1, tx.origin);
                                    else:
                                        stor7 = 1
                                        if balanceOf[this.address] and marketingFee > -1 / balanceOf[this.address]:
                                            revert with 'NH{q', 17
                                        if not totalFees:
                                            revert with 'NH{q', 18
                                        mem[96] = 2
                                        mem[128] = this.address
                                        staticcall uniswapV2RouterAddress.WETH() with:
                                                gas gas_remaining wei
                                        mem[192] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                        mem[160] = ext_call.return_data[12 len 20]
                                        if not this.address:
                                            revert with 0, 'ERC20: approve from the zero address'
                                        if not uniswapV2RouterAddress:
                                            revert with 0, 'ERC20: approve to the zero address'
                                        allowance[address(this.address)][stor6].field_0 = balanceOf[this.address] * marketingFee / totalFees
                                        emit Approval((balanceOf[this.address] * marketingFee / totalFees), this.address, uniswapV2RouterAddress);
                                        mem[ceil32(return_data.size) + 192] = 0x791ac94700000000000000000000000000000000000000000000000000000000
                                        mem[ceil32(return_data.size) + 196] = balanceOf[this.address] * marketingFee / totalFees
                                        mem[ceil32(return_data.size) + 356] = 2
                                        idx = 0
                                        s = ceil32(return_data.size) + 388
                                        t = 128
                                        while idx < 2:
                                            mem[s] = mem[t + 12 len 20]
                                            idx = idx + 1
                                            s = s + 32
                                            t = t + 32
                                            continue 
                                        mem[ceil32(return_data.size) + 292] = this.address
                                        mem[ceil32(return_data.size) + 324] = block.timestamp
                                        require ext_code.size(uniswapV2RouterAddress)
                                        call uniswapV2RouterAddress.swapExactTokensForETHSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args balanceOf[this.address] * marketingFee / totalFees, 0, 160, address(this.address), block.timestamp, 2, mem[ceil32(return_data.size) + 388 len 64]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        call _marketingWalletAddress with:
                                           value eth.balance(this.address) wei
                                             gas 2300 * is_zero(value) wei
                                        if balanceOf[this.address] and liquidityFee > -1 / balanceOf[this.address]:
                                            revert with 'NH{q', 17
                                        if not totalFees:
                                            revert with 'NH{q', 18
                                        if balanceOf[this.address] * liquidityFee / totalFees < balanceOf[this.address] * liquidityFee / totalFees / 2:
                                            revert with 'NH{q', 17
                                        mem[ceil32(return_data.size) + 192] = 2
                                        mem[ceil32(return_data.size) + 224] = this.address
                                        staticcall uniswapV2RouterAddress.WETH() with:
                                                gas gas_remaining wei
                                        mem[ceil32(return_data.size) + 288] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                        mem[ceil32(return_data.size) + 256] = ext_call.return_data[12 len 20]
                                        if not this.address:
                                            revert with 0, 'ERC20: approve from the zero address'
                                        if not uniswapV2RouterAddress:
                                            revert with 0, 'ERC20: approve to the zero address'
                                        allowance[address(this.address)][stor6].field_0 = balanceOf[this.address] * liquidityFee / totalFees / 2
                                        allowance[address(this.address)][stor6].field_255 = 0
                                        emit Approval((balanceOf[this.address] * liquidityFee / totalFees / 2), this.address, uniswapV2RouterAddress);
                                        mem[(2 * ceil32(return_data.size)) + 288] = 0x791ac94700000000000000000000000000000000000000000000000000000000
                                        mem[(2 * ceil32(return_data.size)) + 292] = balanceOf[this.address] * liquidityFee / totalFees / 2
                                        mem[(2 * ceil32(return_data.size)) + 324] = 0
                                        mem[(2 * ceil32(return_data.size)) + 356] = 160
                                        mem[(2 * ceil32(return_data.size)) + 452] = 2
                                        idx = 0
                                        s = (2 * ceil32(return_data.size)) + 484
                                        t = ceil32(return_data.size) + 224
                                        while idx < mem[ceil32(return_data.size) + 192]:
                                            mem[s] = mem[t + 12 len 20]
                                            idx = idx + 1
                                            s = s + 32
                                            t = t + 32
                                            continue 
                                        mem[(2 * ceil32(return_data.size)) + 388] = this.address
                                        mem[(2 * ceil32(return_data.size)) + 420] = block.timestamp
                                        require ext_code.size(uniswapV2RouterAddress)
                                        call uniswapV2RouterAddress.swapExactTokensForETHSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args Mask(255, 1, balanceOf[this.address] * liquidityFee / totalFees), 0, 160, address(this.address), block.timestamp, mem[(2 * ceil32(return_data.size)) + 452 len (32 * mem[ceil32(return_data.size) + 192]) + 32]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        if eth.balance(this.address) < eth.balance(this.address):
                                            revert with 'NH{q', 17
                                        if not this.address:
                                            mem[(2 * ceil32(return_data.size)) + 288] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[(2 * ceil32(return_data.size)) + 292] = 32
                                            mem[(2 * ceil32(return_data.size)) + 324] = 36
                                            mem[(2 * ceil32(return_data.size)) + 356] = 'ERC20: approve from the zero add'
                                            mem[(2 * ceil32(return_data.size)) + 388] = 'ress'
                                            revert with memory
                                              from (2 * ceil32(return_data.size)) + 288
                                               len ceil32(return_data.size) + 132
                                        if not uniswapV2RouterAddress:
                                            mem[(2 * ceil32(return_data.size)) + 288] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[(2 * ceil32(return_data.size)) + 292] = 32
                                            mem[(2 * ceil32(return_data.size)) + 324] = 34
                                            mem[(2 * ceil32(return_data.size)) + 356] = 'ERC20: approve to the zero addre'
                                            mem[(2 * ceil32(return_data.size)) + 388] = 'ss'
                                            revert with memory
                                              from (2 * ceil32(return_data.size)) + 288
                                               len ceil32(return_data.size) + 132
                                        allowance[address(this.address)][stor6].field_0 = (balanceOf[this.address] * liquidityFee / totalFees) - (balanceOf[this.address] * liquidityFee / totalFees / 2)
                                        emit Approval(((balanceOf[this.address] * liquidityFee / totalFees) - (balanceOf[this.address] * liquidityFee / totalFees / 2)), this.address, uniswapV2RouterAddress);
                                        mem[(2 * ceil32(return_data.size)) + 292] = this.address
                                        mem[(2 * ceil32(return_data.size)) + 324] = (balanceOf[this.address] * liquidityFee / totalFees) - (balanceOf[this.address] * liquidityFee / totalFees / 2)
                                        mem[(2 * ceil32(return_data.size)) + 356] = 0
                                        mem[(2 * ceil32(return_data.size)) + 388] = 0
                                        mem[(2 * ceil32(return_data.size)) + 420] = 0
                                        mem[(2 * ceil32(return_data.size)) + 452] = block.timestamp
                                        call uniswapV2RouterAddress.addLiquidityETH(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                             gas gas_remaining wei
                                            args mem[(2 * ceil32(return_data.size)) + 292 len ceil32(return_data.size) + 192]
                                        mem[(2 * ceil32(return_data.size)) + 288 len 96] = ext_call.return_data[0 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 96
                                        mem[(4 * ceil32(return_data.size)) + 288] = balanceOf[this.address] * liquidityFee / totalFees / 2
                                        mem[(4 * ceil32(return_data.size)) + 320] = 0
                                        mem[(4 * ceil32(return_data.size)) + 352] = (balanceOf[this.address] * liquidityFee / totalFees) - (balanceOf[this.address] * liquidityFee / totalFees / 2)
                                        emit SwapAndLiquify(uint256 arg1, uint256 arg2, uint256 arg3):
                                                            mem[(4 * ceil32(return_data.size)) + 288 len (5 * ceil32(return_data.size)) + 96],
                                        mem[(4 * ceil32(return_data.size)) + 288] = 2
                                        mem[(4 * ceil32(return_data.size)) + 320] = this.address
                                        staticcall uniswapV2RouterAddress.WETH() with:
                                                gas gas_remaining wei
                                        mem[(4 * ceil32(return_data.size)) + 384] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[64] = (6 * ceil32(return_data.size)) + 384
                                        require return_data.size >= 32
                                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                        mem[(4 * ceil32(return_data.size)) + 352] = ext_call.return_data[12 len 20]
                                        if not this.address:
                                            revert with 0, 'ERC20: approve from the zero address'
                                        if not uniswapV2RouterAddress:
                                            revert with 0, 'ERC20: approve to the zero address'
                                        mem[0] = uniswapV2RouterAddress
                                        mem[32] = sha3(address(this.address), 1)
                                        allowance[address(this.address)][stor6].field_0 = balanceOf[this.address]
                                        emit Approval(balanceOf[this.address], this.address, uniswapV2RouterAddress);
                                        mem[(6 * ceil32(return_data.size)) + 384] = 0x791ac94700000000000000000000000000000000000000000000000000000000
                                        mem[(6 * ceil32(return_data.size)) + 388] = balanceOf[this.address]
                                        mem[(6 * ceil32(return_data.size)) + 420] = 0
                                        mem[(6 * ceil32(return_data.size)) + 452] = 160
                                        mem[(6 * ceil32(return_data.size)) + 548] = 2
                                        idx = 0
                                        s = (6 * ceil32(return_data.size)) + 580
                                        t = (4 * ceil32(return_data.size)) + 320
                                        while idx < mem[(4 * ceil32(return_data.size)) + 288]:
                                            mem[s] = mem[t + 12 len 20]
                                            idx = idx + 1
                                            s = s + 32
                                            t = t + 32
                                            continue 
                                        mem[(6 * ceil32(return_data.size)) + 484] = this.address
                                        mem[(6 * ceil32(return_data.size)) + 516] = block.timestamp
                                        require ext_code.size(uniswapV2RouterAddress)
                                        call uniswapV2RouterAddress.swapExactTokensForETHSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args balanceOf[this.address], 0, 160, address(this.address), block.timestamp, mem[(6 * ceil32(return_data.size)) + 548 len (32 * mem[(4 * ceil32(return_data.size)) + 288]) + 32]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        call dividendTrackerAddress with:
                                           value eth.balance(this.address) wei
                                             gas gas_remaining wei
                                        if not return_data.size:
                                            if ext_call.success:
                                                emit SendDividends(balanceOf[this.address], eth.balance(this.address));
                                            stor7 = 0
                                            if stor21[address(msg.sender)]:
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address', mem[(6 * ceil32(return_data.size)) + 516 len 9 * ceil32(return_data.size)]
                                                if not arg1:
                                                    revert with 0, 'ERC20: transfer to the zero address', mem[(6 * ceil32(return_data.size)) + 516 len 9 * ceil32(return_data.size)]
                                                if balanceOf[address(msg.sender)] < arg2:
                                                    revert with 0, 'ERC20: transfer amount exceeds balance', mem[(6 * ceil32(return_data.size)) + 516 len 9 * ceil32(return_data.size)]
                                                balanceOf[address(msg.sender)] -= arg2
                                                if balanceOf[arg1] > !arg2:
                                                    revert with 'NH{q', 17
                                                balanceOf[arg1] += arg2
                                                emit Transfer(arg2, msg.sender, arg1);
                                            else:
                                                if stor21[address(arg1)]:
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address', mem[(6 * ceil32(return_data.size)) + 516 len 9 * ceil32(return_data.size)]
                                                    if not arg1:
                                                        revert with 0, 'ERC20: transfer to the zero address', mem[(6 * ceil32(return_data.size)) + 516 len 9 * ceil32(return_data.size)]
                                                    if balanceOf[address(msg.sender)] < arg2:
                                                        revert with 0, 'ERC20: transfer amount exceeds balance', mem[(6 * ceil32(return_data.size)) + 516 len 9 * ceil32(return_data.size)]
                                                    balanceOf[address(msg.sender)] -= arg2
                                                    if balanceOf[arg1] > !arg2:
                                                        revert with 'NH{q', 17
                                                    balanceOf[arg1] += arg2
                                                    emit Transfer(arg2, msg.sender, arg1);
                                                else:
                                                    if stor7:
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address', mem[(6 * ceil32(return_data.size)) + 516 len 9 * ceil32(return_data.size)]
                                                        if not arg1:
                                                            revert with 0, 'ERC20: transfer to the zero address', mem[(6 * ceil32(return_data.size)) + 516 len 9 * ceil32(return_data.size)]
                                                        if balanceOf[address(msg.sender)] < arg2:
                                                            revert with 0, 'ERC20: transfer amount exceeds balance', mem[(6 * ceil32(return_data.size)) + 516 len 9 * ceil32(return_data.size)]
                                                        balanceOf[address(msg.sender)] -= arg2
                                                        if balanceOf[arg1] > !arg2:
                                                            revert with 'NH{q', 17
                                                        balanceOf[arg1] += arg2
                                                        emit Transfer(arg2, msg.sender, arg1);
                                                    else:
                                                        if arg2 and totalFees > -1 / arg2:
                                                            revert with 'NH{q', 17
                                                        if not stor22[address(arg1)]:
                                                            if arg2 < arg2 * totalFees / 100:
                                                                revert with 'NH{q', 17
                                                            if not msg.sender:
                                                                revert with 0, 'ERC20: transfer from the zero address', mem[(6 * ceil32(return_data.size)) + 516 len 9 * ceil32(return_data.size)]
                                                            if not this.address:
                                                                revert with 0, 'ERC20: transfer to the zero address', mem[(6 * ceil32(return_data.size)) + 516 len 9 * ceil32(return_data.size)]
                                                            if balanceOf[address(msg.sender)] < arg2 * totalFees / 100:
                                                                revert with 0, 'ERC20: transfer amount exceeds balance', mem[(6 * ceil32(return_data.size)) + 516 len 9 * ceil32(return_data.size)]
                                                            balanceOf[address(msg.sender)] -= arg2 * totalFees / 100
                                                            if balanceOf[this.address] > !(arg2 * totalFees / 100):
                                                                revert with 'NH{q', 17
                                                            balanceOf[this.address] += arg2 * totalFees / 100
                                                            emit Transfer((arg2 * totalFees / 100), msg.sender, this.address);
                                                            if not msg.sender:
                                                                revert with 0, 'ERC20: transfer from the zero address', mem[(6 * ceil32(return_data.size)) + 516 len 9 * ceil32(return_data.size)]
                                                            if not arg1:
                                                                revert with 0, 'ERC20: transfer to the zero address', mem[(6 * ceil32(return_data.size)) + 516 len 9 * ceil32(return_data.size)]
                                                            if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100):
                                                                revert with 0, 'ERC20: transfer amount exceeds balance', mem[(6 * ceil32(return_data.size)) + 516 len 9 * ceil32(return_data.size)]
                                                            balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100)
                                                            if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100)):
                                                                revert with 'NH{q', 17
                                                            balanceOf[arg1] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100)
                                                            emit Transfer((arg2 - (arg2 * totalFees / 100)), msg.sender, arg1);
                                                        else:
                                                            if arg2 and sellFeeIncreaseFactor > -1 / arg2:
                                                                revert with 'NH{q', 17
                                                            if arg2 * totalFees / 100 > !(arg2 * sellFeeIncreaseFactor / 100):
                                                                revert with 'NH{q', 17
                                                            if arg2 < (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100):
                                                                revert with 'NH{q', 17
                                                            if not msg.sender:
                                                                revert with 0, 'ERC20: transfer from the zero address', mem[(6 * ceil32(return_data.size)) + 516 len 9 * ceil32(return_data.size)]
                                                            if not this.address:
                                                                revert with 0, 'ERC20: transfer to the zero address', mem[(6 * ceil32(return_data.size)) + 516 len 9 * ceil32(return_data.size)]
                                                            if balanceOf[address(msg.sender)] < (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100):
                                                                revert with 0, 'ERC20: transfer amount exceeds balance', mem[(6 * ceil32(return_data.size)) + 516 len 9 * ceil32(return_data.size)]
                                                            balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)
                                                            if balanceOf[this.address] > !((arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)):
                                                                revert with 'NH{q', 17
                                                            balanceOf[this.address] = balanceOf[this.address] + (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)
                                                            emit Transfer(((arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)), msg.sender, this.address);
                                                            if not msg.sender:
                                                                revert with 0, 'ERC20: transfer from the zero address', mem[(6 * ceil32(return_data.size)) + 516 len 9 * ceil32(return_data.size)]
                                                            if not arg1:
                                                                revert with 0, 'ERC20: transfer to the zero address', mem[(6 * ceil32(return_data.size)) + 516 len 9 * ceil32(return_data.size)]
                                                            if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100):
                                                                revert with 0, 'ERC20: transfer amount exceeds balance', mem[(6 * ceil32(return_data.size)) + 516 len 9 * ceil32(return_data.size)]
                                                            balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)
                                                            if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)):
                                                                revert with 'NH{q', 17
                                                            balanceOf[arg1] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)
                                                            emit Transfer((arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)), msg.sender, arg1);
                                            require ext_code.size(dividendTrackerAddress)
                                            call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args msg.sender, balanceOf[address(msg.sender)], mem[(6 * ceil32(return_data.size)) + 452 len 9 * ceil32(return_data.size)]
                                            require ext_code.size(dividendTrackerAddress)
                                            call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args address(arg1), balanceOf[address(arg1)], mem[(6 * ceil32(return_data.size)) + 452 len 9 * ceil32(return_data.size)]
                                            if not stor7:
                                                call dividendTrackerAddress.process(uint256 arg1) with:
                                                     gas gas_remaining wei
                                                    args gasForProcessing
                                                mem[(6 * ceil32(return_data.size)) + 384 len 96] = ext_call.return_data[0 len 96]
                                                if ext_call.success:
                                                    require return_data.size >= 96
                                                    mem[(8 * ceil32(return_data.size)) + 384] = ext_call.return_data[0]
                                                    mem[(8 * ceil32(return_data.size)) + 416] = ext_call.return_data[32]
                                                    mem[(8 * ceil32(return_data.size)) + 448] = ext_call.return_data[64]
                                                    mem[(8 * ceil32(return_data.size)) + 480] = gasForProcessing
                                                    emit ProcessedDividendTracker(uint256 arg1, uint256 arg2, uint256 arg3, bool arg4, uint256 arg5, address arg6):
                                                                                  mem[(8 * ceil32(return_data.size)) + 384 len (13 * ceil32(return_data.size)) + 128],
                                                                                  1,
                                                                                  tx.origin,
                                        else:
                                            mem[(6 * ceil32(return_data.size)) + 416 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            if ext_call.success:
                                                emit SendDividends(balanceOf[this.address], eth.balance(this.address));
                                            stor7 = 0
                                            if stor21[address(msg.sender)]:
                                                if not msg.sender:
                                                    revert with 0, 
                                                                'ERC20: transfer from the zero address',
                                                                mem[(6 * ceil32(return_data.size)) + ceil32(return_data.size) + 517 len 9 * ceil32(return_data.size)]
                                                if not arg1:
                                                    revert with 0, 
                                                                'ERC20: transfer to the zero address',
                                                                mem[(6 * ceil32(return_data.size)) + ceil32(return_data.size) + 517 len 9 * ceil32(return_data.size)]
                                                if balanceOf[address(msg.sender)] < arg2:
                                                    revert with 0, 
                                                                'ERC20: transfer amount exceeds balance',
                                                                mem[(6 * ceil32(return_data.size)) + ceil32(return_data.size) + 517 len 9 * ceil32(return_data.size)]
                                                balanceOf[address(msg.sender)] -= arg2
                                                if balanceOf[arg1] > !arg2:
                                                    revert with 'NH{q', 17
                                                balanceOf[arg1] += arg2
                                                emit Transfer(arg2, msg.sender, arg1);
                                            else:
                                                if stor21[address(arg1)]:
                                                    if not msg.sender:
                                                        revert with 0, 
                                                                    'ERC20: transfer from the zero address',
                                                                    mem[(6 * ceil32(return_data.size)) + ceil32(return_data.size) + 517 len 9 * ceil32(return_data.size)]
                                                    if not arg1:
                                                        revert with 0, 
                                                                    'ERC20: transfer to the zero address',
                                                                    mem[(6 * ceil32(return_data.size)) + ceil32(return_data.size) + 517 len 9 * ceil32(return_data.size)]
                                                    if balanceOf[address(msg.sender)] < arg2:
                                                        revert with 0, 
                                                                    'ERC20: transfer amount exceeds balance',
                                                                    mem[(6 * ceil32(return_data.size)) + ceil32(return_data.size) + 517 len 9 * ceil32(return_data.size)]
                                                    balanceOf[address(msg.sender)] -= arg2
                                                    if balanceOf[arg1] > !arg2:
                                                        revert with 'NH{q', 17
                                                    balanceOf[arg1] += arg2
                                                    emit Transfer(arg2, msg.sender, arg1);
                                                else:
                                                    if stor7:
                                                        if not msg.sender:
                                                            revert with 0, 
                                                                        'ERC20: transfer from the zero address',
                                                                        mem[(6 * ceil32(return_data.size)) + ceil32(return_data.size) + 517 len 9 * ceil32(return_data.size)]
                                                        if not arg1:
                                                            revert with 0, 
                                                                        'ERC20: transfer to the zero address',
                                                                        mem[(6 * ceil32(return_data.size)) + ceil32(return_data.size) + 517 len 9 * ceil32(return_data.size)]
                                                        if balanceOf[address(msg.sender)] < arg2:
                                                            revert with 0, 
                                                                        'ERC20: transfer amount exceeds balance',
                                                                        mem[(6 * ceil32(return_data.size)) + ceil32(return_data.size) + 517 len 9 * ceil32(return_data.size)]
                                                        balanceOf[address(msg.sender)] -= arg2
                                                        if balanceOf[arg1] > !arg2:
                                                            revert with 'NH{q', 17
                                                        balanceOf[arg1] += arg2
                                                        emit Transfer(arg2, msg.sender, arg1);
                                                    else:
                                                        if arg2 and totalFees > -1 / arg2:
                                                            revert with 'NH{q', 17
                                                        if not stor22[address(arg1)]:
                                                            if arg2 < arg2 * totalFees / 100:
                                                                revert with 'NH{q', 17
                                                            if not msg.sender:
                                                                revert with 0, 
                                                                            'ERC20: transfer from the zero address',
                                                                            mem[(6 * ceil32(return_data.size)) + ceil32(return_data.size) + 517 len 9 * ceil32(return_data.size)]
                                                            if not this.address:
                                                                revert with 0, 
                                                                            'ERC20: transfer to the zero address',
                                                                            mem[(6 * ceil32(return_data.size)) + ceil32(return_data.size) + 517 len 9 * ceil32(return_data.size)]
                                                            if balanceOf[address(msg.sender)] < arg2 * totalFees / 100:
                                                                revert with 0, 
                                                                            'ERC20: transfer amount exceeds balance',
                                                                            mem[(6 * ceil32(return_data.size)) + ceil32(return_data.size) + 517 len 9 * ceil32(return_data.size)]
                                                            balanceOf[address(msg.sender)] -= arg2 * totalFees / 100
                                                            if balanceOf[this.address] > !(arg2 * totalFees / 100):
                                                                revert with 'NH{q', 17
                                                            balanceOf[this.address] += arg2 * totalFees / 100
                                                            emit Transfer((arg2 * totalFees / 100), msg.sender, this.address);
                                                            if not msg.sender:
                                                                revert with 0, 
                                                                            'ERC20: transfer from the zero address',
                                                                            mem[(6 * ceil32(return_data.size)) + ceil32(return_data.size) + 517 len 9 * ceil32(return_data.size)]
                                                            if not arg1:
                                                                revert with 0, 
                                                                            'ERC20: transfer to the zero address',
                                                                            mem[(6 * ceil32(return_data.size)) + ceil32(return_data.size) + 517 len 9 * ceil32(return_data.size)]
                                                            if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100):
                                                                revert with 0, 
                                                                            'ERC20: transfer amount exceeds balance',
                                                                            mem[(6 * ceil32(return_data.size)) + ceil32(return_data.size) + 517 len 9 * ceil32(return_data.size)]
                                                            balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100)
                                                            if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100)):
                                                                revert with 'NH{q', 17
                                                            balanceOf[arg1] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100)
                                                            emit Transfer((arg2 - (arg2 * totalFees / 100)), msg.sender, arg1);
                                                        else:
                                                            if arg2 and sellFeeIncreaseFactor > -1 / arg2:
                                                                revert with 'NH{q', 17
                                                            if arg2 * totalFees / 100 > !(arg2 * sellFeeIncreaseFactor / 100):
                                                                revert with 'NH{q', 17
                                                            if arg2 < (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100):
                                                                revert with 'NH{q', 17
                                                            if not msg.sender:
                                                                revert with 0, 
                                                                            'ERC20: transfer from the zero address',
                                                                            mem[(6 * ceil32(return_data.size)) + ceil32(return_data.size) + 517 len 9 * ceil32(return_data.size)]
                                                            if not this.address:
                                                                revert with 0, 
                                                                            'ERC20: transfer to the zero address',
                                                                            mem[(6 * ceil32(return_data.size)) + ceil32(return_data.size) + 517 len 9 * ceil32(return_data.size)]
                                                            if balanceOf[address(msg.sender)] < (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100):
                                                                revert with 0, 
                                                                            'ERC20: transfer amount exceeds balance',
                                                                            mem[(6 * ceil32(return_data.size)) + ceil32(return_data.size) + 517 len 9 * ceil32(return_data.size)]
                                                            balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)
                                                            if balanceOf[this.address] > !((arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)):
                                                                revert with 'NH{q', 17
                                                            balanceOf[this.address] = balanceOf[this.address] + (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)
                                                            emit Transfer(((arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)), msg.sender, this.address);
                                                            if not msg.sender:
                                                                revert with 0, 
                                                                            'ERC20: transfer from the zero address',
                                                                            mem[(6 * ceil32(return_data.size)) + ceil32(return_data.size) + 517 len 9 * ceil32(return_data.size)]
                                                            if not arg1:
                                                                revert with 0, 
                                                                            'ERC20: transfer to the zero address',
                                                                            mem[(6 * ceil32(return_data.size)) + ceil32(return_data.size) + 517 len 9 * ceil32(return_data.size)]
                                                            if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100):
                                                                revert with 0, 
                                                                            'ERC20: transfer amount exceeds balance',
                                                                            mem[(6 * ceil32(return_data.size)) + ceil32(return_data.size) + 517 len 9 * ceil32(return_data.size)]
                                                            balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)
                                                            if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)):
                                                                revert with 'NH{q', 17
                                                            balanceOf[arg1] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)
                                                            emit Transfer((arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)), msg.sender, arg1);
                                            require ext_code.size(dividendTrackerAddress)
                                            call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args msg.sender, balanceOf[address(msg.sender)], mem[(6 * ceil32(return_data.size)) + ceil32(return_data.size) + 453 len 9 * ceil32(return_data.size)]
                                            require ext_code.size(dividendTrackerAddress)
                                            call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args address(arg1), balanceOf[address(arg1)], mem[(6 * ceil32(return_data.size)) + ceil32(return_data.size) + 453 len 9 * ceil32(return_data.size)]
                                            if not stor7:
                                                call dividendTrackerAddress.process(uint256 arg1) with:
                                                     gas gas_remaining wei
                                                    args gasForProcessing
                                                mem[(6 * ceil32(return_data.size)) + ceil32(return_data.size) + 385 len 96] = ext_call.return_data[0 len 96]
                                                if ext_call.success:
                                                    require return_data.size >= 96
                                                    mem[(8 * ceil32(return_data.size)) + ceil32(return_data.size) + 385] = ext_call.return_data[0]
                                                    mem[(8 * ceil32(return_data.size)) + ceil32(return_data.size) + 417] = ext_call.return_data[32]
                                                    mem[(8 * ceil32(return_data.size)) + ceil32(return_data.size) + 449] = ext_call.return_data[64]
                                                    mem[(8 * ceil32(return_data.size)) + ceil32(return_data.size) + 481] = gasForProcessing
                                                    emit ProcessedDividendTracker(uint256 arg1, uint256 arg2, uint256 arg3, bool arg4, uint256 arg5, address arg6):
                                                                                  mem[(8 * ceil32(return_data.size)) + ceil32(return_data.size) + 385 len (13 * ceil32(return_data.size)) + 128],
                                                                                  1,
                                                                                  tx.origin,
        else:
            if stor21[address(msg.sender)]:
                if not stor21[address(arg1)]:
                    if uniswapV2PairAddress != arg1:
                        if balanceOf[address(arg1)] > !arg2:
                            revert with 'NH{q', 17
                        if balanceOf[address(arg1)] + arg2 > maxWalletBalance:
                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'Recipient balance is exceeding maxWalletBalance'
                        if balanceOf[this.address] < swapTokensAtAmount:
                            if stor21[address(msg.sender)]:
                                if not msg.sender:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                if not arg1:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                if balanceOf[address(msg.sender)] < arg2:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                balanceOf[address(msg.sender)] -= arg2
                                if balanceOf[arg1] > !arg2:
                                    revert with 'NH{q', 17
                                balanceOf[arg1] += arg2
                                emit Transfer(arg2, msg.sender, arg1);
                            else:
                                if stor21[address(arg1)]:
                                    if not msg.sender:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                    if not arg1:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                    if balanceOf[address(msg.sender)] < arg2:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                    balanceOf[address(msg.sender)] -= arg2
                                    if balanceOf[arg1] > !arg2:
                                        revert with 'NH{q', 17
                                    balanceOf[arg1] += arg2
                                    emit Transfer(arg2, msg.sender, arg1);
                                else:
                                    if stor7:
                                        if not msg.sender:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                        if not arg1:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                        if balanceOf[address(msg.sender)] < arg2:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                        balanceOf[address(msg.sender)] -= arg2
                                        if balanceOf[arg1] > !arg2:
                                            revert with 'NH{q', 17
                                        balanceOf[arg1] += arg2
                                        emit Transfer(arg2, msg.sender, arg1);
                                    else:
                                        if arg2 and totalFees > -1 / arg2:
                                            revert with 'NH{q', 17
                                        if not stor22[address(arg1)]:
                                            if arg2 < arg2 * totalFees / 100:
                                                revert with 'NH{q', 17
                                            if not msg.sender:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                            if not this.address:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                            if balanceOf[address(msg.sender)] < arg2 * totalFees / 100:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                            balanceOf[address(msg.sender)] -= arg2 * totalFees / 100
                                            if balanceOf[this.address] > !(arg2 * totalFees / 100):
                                                revert with 'NH{q', 17
                                            balanceOf[this.address] += arg2 * totalFees / 100
                                            emit Transfer((arg2 * totalFees / 100), msg.sender, this.address);
                                            if not msg.sender:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                            if not arg1:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                            if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100):
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                            balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100)
                                            if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100)):
                                                revert with 'NH{q', 17
                                            balanceOf[arg1] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100)
                                            emit Transfer((arg2 - (arg2 * totalFees / 100)), msg.sender, arg1);
                                        else:
                                            if arg2 and sellFeeIncreaseFactor > -1 / arg2:
                                                revert with 'NH{q', 17
                                            if arg2 * totalFees / 100 > !(arg2 * sellFeeIncreaseFactor / 100):
                                                revert with 'NH{q', 17
                                            if arg2 < (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100):
                                                revert with 'NH{q', 17
                                            if not msg.sender:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                            if not this.address:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                            if balanceOf[address(msg.sender)] < (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100):
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                            balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)
                                            if balanceOf[this.address] > !((arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)):
                                                revert with 'NH{q', 17
                                            balanceOf[this.address] = balanceOf[this.address] + (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)
                                            emit Transfer(((arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)), msg.sender, this.address);
                                            if not msg.sender:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                            if not arg1:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                            if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100):
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                            balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)
                                            if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)):
                                                revert with 'NH{q', 17
                                            balanceOf[arg1] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)
                                            emit Transfer((arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)), msg.sender, arg1);
                        else:
                            if stor7:
                                if stor21[address(msg.sender)]:
                                    if not msg.sender:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                    if not arg1:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                    if balanceOf[address(msg.sender)] < arg2:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                    balanceOf[address(msg.sender)] -= arg2
                                    if balanceOf[arg1] > !arg2:
                                        revert with 'NH{q', 17
                                    balanceOf[arg1] += arg2
                                    emit Transfer(arg2, msg.sender, arg1);
                                else:
                                    if stor21[address(arg1)]:
                                        if not msg.sender:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                        if not arg1:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                        if balanceOf[address(msg.sender)] < arg2:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                        balanceOf[address(msg.sender)] -= arg2
                                        if balanceOf[arg1] > !arg2:
                                            revert with 'NH{q', 17
                                        balanceOf[arg1] += arg2
                                        emit Transfer(arg2, msg.sender, arg1);
                                    else:
                                        if stor7:
                                            if not msg.sender:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                            if not arg1:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                            if balanceOf[address(msg.sender)] < arg2:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                            balanceOf[address(msg.sender)] -= arg2
                                            if balanceOf[arg1] > !arg2:
                                                revert with 'NH{q', 17
                                            balanceOf[arg1] += arg2
                                            emit Transfer(arg2, msg.sender, arg1);
                                        else:
                                            if arg2 and totalFees > -1 / arg2:
                                                revert with 'NH{q', 17
                                            if not stor22[address(arg1)]:
                                                if arg2 < arg2 * totalFees / 100:
                                                    revert with 'NH{q', 17
                                                if not msg.sender:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                if not this.address:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                if balanceOf[address(msg.sender)] < arg2 * totalFees / 100:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                balanceOf[address(msg.sender)] -= arg2 * totalFees / 100
                                                if balanceOf[this.address] > !(arg2 * totalFees / 100):
                                                    revert with 'NH{q', 17
                                                balanceOf[this.address] += arg2 * totalFees / 100
                                                emit Transfer((arg2 * totalFees / 100), msg.sender, this.address);
                                                if not msg.sender:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                if not arg1:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100):
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100)
                                                if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100)):
                                                    revert with 'NH{q', 17
                                                balanceOf[arg1] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100)
                                                emit Transfer((arg2 - (arg2 * totalFees / 100)), msg.sender, arg1);
                                            else:
                                                if arg2 and sellFeeIncreaseFactor > -1 / arg2:
                                                    revert with 'NH{q', 17
                                                if arg2 * totalFees / 100 > !(arg2 * sellFeeIncreaseFactor / 100):
                                                    revert with 'NH{q', 17
                                                if arg2 < (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100):
                                                    revert with 'NH{q', 17
                                                if not msg.sender:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                if not this.address:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                if balanceOf[address(msg.sender)] < (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100):
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)
                                                if balanceOf[this.address] > !((arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)):
                                                    revert with 'NH{q', 17
                                                balanceOf[this.address] = balanceOf[this.address] + (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)
                                                emit Transfer(((arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)), msg.sender, this.address);
                                                if not msg.sender:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                if not arg1:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100):
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)
                                                if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)):
                                                    revert with 'NH{q', 17
                                                balanceOf[arg1] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)
                                                emit Transfer((arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)), msg.sender, arg1);
                            else:
                                if stor22[address(msg.sender)]:
                                    if stor21[address(msg.sender)]:
                                        if not msg.sender:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                        if not arg1:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                        if balanceOf[address(msg.sender)] < arg2:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                        balanceOf[address(msg.sender)] -= arg2
                                        if balanceOf[arg1] > !arg2:
                                            revert with 'NH{q', 17
                                        balanceOf[arg1] += arg2
                                        emit Transfer(arg2, msg.sender, arg1);
                                    else:
                                        if stor21[address(arg1)]:
                                            if not msg.sender:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                            if not arg1:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                            if balanceOf[address(msg.sender)] < arg2:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                            balanceOf[address(msg.sender)] -= arg2
                                            if balanceOf[arg1] > !arg2:
                                                revert with 'NH{q', 17
                                            balanceOf[arg1] += arg2
                                            emit Transfer(arg2, msg.sender, arg1);
                                        else:
                                            if stor7:
                                                if not msg.sender:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                if not arg1:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                if balanceOf[address(msg.sender)] < arg2:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                balanceOf[address(msg.sender)] -= arg2
                                                if balanceOf[arg1] > !arg2:
                                                    revert with 'NH{q', 17
                                                balanceOf[arg1] += arg2
                                                emit Transfer(arg2, msg.sender, arg1);
                                            else:
                                                if arg2 and totalFees > -1 / arg2:
                                                    revert with 'NH{q', 17
                                                if not stor22[address(arg1)]:
                                                    if arg2 < arg2 * totalFees / 100:
                                                        revert with 'NH{q', 17
                                                    if not msg.sender:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                    if not this.address:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                    if balanceOf[address(msg.sender)] < arg2 * totalFees / 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                    balanceOf[address(msg.sender)] -= arg2 * totalFees / 100
                                                    if balanceOf[this.address] > !(arg2 * totalFees / 100):
                                                        revert with 'NH{q', 17
                                                    balanceOf[this.address] += arg2 * totalFees / 100
                                                    emit Transfer((arg2 * totalFees / 100), msg.sender, this.address);
                                                    if not msg.sender:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                    if not arg1:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                    if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100):
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                    balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100)
                                                    if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100)):
                                                        revert with 'NH{q', 17
                                                    balanceOf[arg1] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100)
                                                    emit Transfer((arg2 - (arg2 * totalFees / 100)), msg.sender, arg1);
                                                else:
                                                    if arg2 and sellFeeIncreaseFactor > -1 / arg2:
                                                        revert with 'NH{q', 17
                                                    if arg2 * totalFees / 100 > !(arg2 * sellFeeIncreaseFactor / 100):
                                                        revert with 'NH{q', 17
                                                    if arg2 < (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100):
                                                        revert with 'NH{q', 17
                                                    if not msg.sender:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                    if not this.address:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                    if balanceOf[address(msg.sender)] < (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100):
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                    balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)
                                                    if balanceOf[this.address] > !((arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)):
                                                        revert with 'NH{q', 17
                                                    balanceOf[this.address] = balanceOf[this.address] + (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)
                                                    emit Transfer(((arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)), msg.sender, this.address);
                                                    if not msg.sender:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                    if not arg1:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                    if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100):
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                    balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)
                                                    if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)):
                                                        revert with 'NH{q', 17
                                                    balanceOf[arg1] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)
                                                    emit Transfer((arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)), msg.sender, arg1);
                                else:
                                    if owner == msg.sender:
                                        if stor21[address(msg.sender)]:
                                            if not msg.sender:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                            if not arg1:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                            if balanceOf[address(msg.sender)] < arg2:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                            balanceOf[address(msg.sender)] -= arg2
                                            if balanceOf[arg1] > !arg2:
                                                revert with 'NH{q', 17
                                            balanceOf[arg1] += arg2
                                            emit Transfer(arg2, msg.sender, arg1);
                                        else:
                                            if stor21[address(arg1)]:
                                                if not msg.sender:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                if not arg1:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                if balanceOf[address(msg.sender)] < arg2:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                balanceOf[address(msg.sender)] -= arg2
                                                if balanceOf[arg1] > !arg2:
                                                    revert with 'NH{q', 17
                                                balanceOf[arg1] += arg2
                                                emit Transfer(arg2, msg.sender, arg1);
                                            else:
                                                if stor7:
                                                    if not msg.sender:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                    if not arg1:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                    if balanceOf[address(msg.sender)] < arg2:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                    balanceOf[address(msg.sender)] -= arg2
                                                    if balanceOf[arg1] > !arg2:
                                                        revert with 'NH{q', 17
                                                    balanceOf[arg1] += arg2
                                                    emit Transfer(arg2, msg.sender, arg1);
                                                else:
                                                    if arg2 and totalFees > -1 / arg2:
                                                        revert with 'NH{q', 17
                                                    if not stor22[address(arg1)]:
                                                        if arg2 < arg2 * totalFees / 100:
                                                            revert with 'NH{q', 17
                                                        if not msg.sender:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                        if not this.address:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                        if balanceOf[address(msg.sender)] < arg2 * totalFees / 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                        balanceOf[address(msg.sender)] -= arg2 * totalFees / 100
                                                        if balanceOf[this.address] > !(arg2 * totalFees / 100):
                                                            revert with 'NH{q', 17
                                                        balanceOf[this.address] += arg2 * totalFees / 100
                                                        emit Transfer((arg2 * totalFees / 100), msg.sender, this.address);
                                                        if not msg.sender:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                        if not arg1:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                        if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100):
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                        balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100)
                                                        if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100)):
                                                            revert with 'NH{q', 17
                                                        balanceOf[arg1] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100)
                                                        emit Transfer((arg2 - (arg2 * totalFees / 100)), msg.sender, arg1);
                                                    else:
                                                        if arg2 and sellFeeIncreaseFactor > -1 / arg2:
                                                            revert with 'NH{q', 17
                                                        if arg2 * totalFees / 100 > !(arg2 * sellFeeIncreaseFactor / 100):
                                                            revert with 'NH{q', 17
                                                        if arg2 < (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100):
                                                            revert with 'NH{q', 17
                                                        if not msg.sender:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                        if not this.address:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                        if balanceOf[address(msg.sender)] < (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100):
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                        balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)
                                                        if balanceOf[this.address] > !((arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)):
                                                            revert with 'NH{q', 17
                                                        balanceOf[this.address] = balanceOf[this.address] + (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)
                                                        emit Transfer(((arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)), msg.sender, this.address);
                                                        if not msg.sender:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                        if not arg1:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                        if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100):
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                        balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)
                                                        if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)):
                                                            revert with 'NH{q', 17
                                                        balanceOf[arg1] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)
                                                        emit Transfer((arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)), msg.sender, arg1);
                                    else:
                                        if owner == arg1:
                                            if stor21[address(msg.sender)]:
                                                if not msg.sender:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                if not arg1:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                if balanceOf[address(msg.sender)] < arg2:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                balanceOf[address(msg.sender)] -= arg2
                                                if balanceOf[arg1] > !arg2:
                                                    revert with 'NH{q', 17
                                                balanceOf[arg1] += arg2
                                                emit Transfer(arg2, msg.sender, arg1);
                                            else:
                                                if stor21[address(arg1)]:
                                                    if not msg.sender:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                    if not arg1:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                    if balanceOf[address(msg.sender)] < arg2:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                    balanceOf[address(msg.sender)] -= arg2
                                                    if balanceOf[arg1] > !arg2:
                                                        revert with 'NH{q', 17
                                                    balanceOf[arg1] += arg2
                                                    emit Transfer(arg2, msg.sender, arg1);
                                                else:
                                                    if stor7:
                                                        if not msg.sender:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                        if not arg1:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                        if balanceOf[address(msg.sender)] < arg2:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                        balanceOf[address(msg.sender)] -= arg2
                                                        if balanceOf[arg1] > !arg2:
                                                            revert with 'NH{q', 17
                                                        balanceOf[arg1] += arg2
                                                        emit Transfer(arg2, msg.sender, arg1);
                                                    else:
                                                        if arg2 and totalFees > -1 / arg2:
                                                            revert with 'NH{q', 17
                                                        if not stor22[address(arg1)]:
                                                            if arg2 < arg2 * totalFees / 100:
                                                                revert with 'NH{q', 17
                                                            if not msg.sender:
                                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                            if not this.address:
                                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                            if balanceOf[address(msg.sender)] < arg2 * totalFees / 100:
                                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                            balanceOf[address(msg.sender)] -= arg2 * totalFees / 100
                                                            if balanceOf[this.address] > !(arg2 * totalFees / 100):
                                                                revert with 'NH{q', 17
                                                            balanceOf[this.address] += arg2 * totalFees / 100
                                                            emit Transfer((arg2 * totalFees / 100), msg.sender, this.address);
                                                            if not msg.sender:
                                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                            if not arg1:
                                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                            if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100):
                                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                            balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100)
                                                            if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100)):
                                                                revert with 'NH{q', 17
                                                            balanceOf[arg1] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100)
                                                            emit Transfer((arg2 - (arg2 * totalFees / 100)), msg.sender, arg1);
                                                        else:
                                                            if arg2 and sellFeeIncreaseFactor > -1 / arg2:
                                                                revert with 'NH{q', 17
                                                            if arg2 * totalFees / 100 > !(arg2 * sellFeeIncreaseFactor / 100):
                                                                revert with 'NH{q', 17
                                                            if arg2 < (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100):
                                                                revert with 'NH{q', 17
                                                            if not msg.sender:
                                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                            if not this.address:
                                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                            if balanceOf[address(msg.sender)] < (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100):
                                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                            balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)
                                                            if balanceOf[this.address] > !((arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)):
                                                                revert with 'NH{q', 17
                                                            balanceOf[this.address] = balanceOf[this.address] + (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)
                                                            emit Transfer(((arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)), msg.sender, this.address);
                                                            if not msg.sender:
                                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                            if not arg1:
                                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                            if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100):
                                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                            balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)
                                                            if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)):
                                                                revert with 'NH{q', 17
                                                            balanceOf[arg1] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)
                                                            emit Transfer((arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)), msg.sender, arg1);
                                        else:
                                            stor7 = 1
                                            if balanceOf[this.address] and marketingFee > -1 / balanceOf[this.address]:
                                                revert with 'NH{q', 17
                                            if not totalFees:
                                                revert with 'NH{q', 18
                                            mem[96] = 2
                                            mem[128] = this.address
                                            staticcall uniswapV2RouterAddress.WETH() with:
                                                    gas gas_remaining wei
                                            mem[192] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                            mem[160] = ext_call.return_data[12 len 20]
                                            if not this.address:
                                                revert with 0, 'ERC20: approve from the zero address'
                                            if not uniswapV2RouterAddress:
                                                revert with 0, 'ERC20: approve to the zero address'
                                            allowance[address(this.address)][stor6].field_0 = balanceOf[this.address] * marketingFee / totalFees
                                            emit Approval((balanceOf[this.address] * marketingFee / totalFees), this.address, uniswapV2RouterAddress);
                                            mem[ceil32(return_data.size) + 192] = 0x791ac94700000000000000000000000000000000000000000000000000000000
                                            mem[ceil32(return_data.size) + 196] = balanceOf[this.address] * marketingFee / totalFees
                                            mem[ceil32(return_data.size) + 356] = 2
                                            idx = 0
                                            s = ceil32(return_data.size) + 388
                                            t = 128
                                            while idx < 2:
                                                mem[s] = mem[t + 12 len 20]
                                                idx = idx + 1
                                                s = s + 32
                                                t = t + 32
                                                continue 
                                            mem[ceil32(return_data.size) + 292] = this.address
                                            mem[ceil32(return_data.size) + 324] = block.timestamp
                                            require ext_code.size(uniswapV2RouterAddress)
                                            call uniswapV2RouterAddress.swapExactTokensForETHSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args balanceOf[this.address] * marketingFee / totalFees, 0, 160, address(this.address), block.timestamp, 2, mem[ceil32(return_data.size) + 388 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            call _marketingWalletAddress with:
                                               value eth.balance(this.address) wei
                                                 gas 2300 * is_zero(value) wei
                                            if balanceOf[this.address] and liquidityFee > -1 / balanceOf[this.address]:
                                                revert with 'NH{q', 17
                                            if not totalFees:
                                                revert with 'NH{q', 18
                                            if balanceOf[this.address] * liquidityFee / totalFees < balanceOf[this.address] * liquidityFee / totalFees / 2:
                                                revert with 'NH{q', 17
                                            mem[ceil32(return_data.size) + 192] = 2
                                            mem[ceil32(return_data.size) + 224] = this.address
                                            staticcall uniswapV2RouterAddress.WETH() with:
                                                    gas gas_remaining wei
                                            mem[ceil32(return_data.size) + 288] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                            mem[ceil32(return_data.size) + 256] = ext_call.return_data[12 len 20]
                                            if not this.address:
                                                revert with 0, 'ERC20: approve from the zero address'
                                            if not uniswapV2RouterAddress:
                                                revert with 0, 'ERC20: approve to the zero address'
                                            allowance[address(this.address)][stor6].field_0 = balanceOf[this.address] * liquidityFee / totalFees / 2
                                            allowance[address(this.address)][stor6].field_255 = 0
                                            emit Approval((balanceOf[this.address] * liquidityFee / totalFees / 2), this.address, uniswapV2RouterAddress);
                                            mem[(2 * ceil32(return_data.size)) + 288] = 0x791ac94700000000000000000000000000000000000000000000000000000000
                                            mem[(2 * ceil32(return_data.size)) + 292] = balanceOf[this.address] * liquidityFee / totalFees / 2
                                            mem[(2 * ceil32(return_data.size)) + 324] = 0
                                            mem[(2 * ceil32(return_data.size)) + 356] = 160
                                            mem[(2 * ceil32(return_data.size)) + 452] = 2
                                            idx = 0
                                            s = (2 * ceil32(return_data.size)) + 484
                                            t = ceil32(return_data.size) + 224
                                            while idx < mem[ceil32(return_data.size) + 192]:
                                                mem[s] = mem[t + 12 len 20]
                                                idx = idx + 1
                                                s = s + 32
                                                t = t + 32
                                                continue 
                                            mem[(2 * ceil32(return_data.size)) + 388] = this.address
                                            mem[(2 * ceil32(return_data.size)) + 420] = block.timestamp
                                            require ext_code.size(uniswapV2RouterAddress)
                                            call uniswapV2RouterAddress.swapExactTokensForETHSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args Mask(255, 1, balanceOf[this.address] * liquidityFee / totalFees), 0, 160, address(this.address), block.timestamp, mem[(2 * ceil32(return_data.size)) + 452 len (32 * mem[ceil32(return_data.size) + 192]) + 32]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            if eth.balance(this.address) < eth.balance(this.address):
                                                revert with 'NH{q', 17
                                            if not this.address:
                                                revert with 0, 'ERC20: approve from the zero address'
                                            if not uniswapV2RouterAddress:
                                                revert with 0, 'ERC20: approve to the zero address'
                                            allowance[address(this.address)][stor6].field_0 = (balanceOf[this.address] * liquidityFee / totalFees) - (balanceOf[this.address] * liquidityFee / totalFees / 2)
                                            emit Approval(((balanceOf[this.address] * liquidityFee / totalFees) - (balanceOf[this.address] * liquidityFee / totalFees / 2)), this.address, uniswapV2RouterAddress);
                                            mem[(2 * ceil32(return_data.size)) + 292] = this.address
                                            mem[(2 * ceil32(return_data.size)) + 324] = (balanceOf[this.address] * liquidityFee / totalFees) - (balanceOf[this.address] * liquidityFee / totalFees / 2)
                                            mem[(2 * ceil32(return_data.size)) + 356] = 0
                                            mem[(2 * ceil32(return_data.size)) + 388] = 0
                                            mem[(2 * ceil32(return_data.size)) + 420] = 0
                                            mem[(2 * ceil32(return_data.size)) + 452] = block.timestamp
                                            call uniswapV2RouterAddress.addLiquidityETH(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                                 gas gas_remaining wei
                                                args this.address, (balanceOf[this.address] * liquidityFee / totalFees) - (balanceOf[this.address] * liquidityFee / totalFees / 2), 0, 0, 0, block.timestamp
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 96
                                            emit SwapAndLiquify(Mask(255, 1, balanceOf[this.address] * liquidityFee / totalFees), 0, (balanceOf[this.address] * liquidityFee / totalFees) - (balanceOf[this.address] * liquidityFee / totalFees / 2));
                                            mem[(4 * ceil32(return_data.size)) + 288] = 2
                                            mem[(4 * ceil32(return_data.size)) + 320] = this.address
                                            staticcall uniswapV2RouterAddress.WETH() with:
                                                    gas gas_remaining wei
                                            mem[(4 * ceil32(return_data.size)) + 384] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[64] = (6 * ceil32(return_data.size)) + 384
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                            mem[(4 * ceil32(return_data.size)) + 352] = ext_call.return_data[12 len 20]
                                            if not this.address:
                                                revert with 0, 'ERC20: approve from the zero address'
                                            if not uniswapV2RouterAddress:
                                                revert with 0, 'ERC20: approve to the zero address'
                                            mem[0] = uniswapV2RouterAddress
                                            mem[32] = sha3(address(this.address), 1)
                                            allowance[address(this.address)][stor6].field_0 = balanceOf[this.address]
                                            emit Approval(balanceOf[this.address], this.address, uniswapV2RouterAddress);
                                            mem[(6 * ceil32(return_data.size)) + 384] = 0x791ac94700000000000000000000000000000000000000000000000000000000
                                            mem[(6 * ceil32(return_data.size)) + 388] = balanceOf[this.address]
                                            mem[(6 * ceil32(return_data.size)) + 420] = 0
                                            mem[(6 * ceil32(return_data.size)) + 452] = 160
                                            mem[(6 * ceil32(return_data.size)) + 548] = 2
                                            idx = 0
                                            s = (6 * ceil32(return_data.size)) + 580
                                            t = (4 * ceil32(return_data.size)) + 320
                                            while idx < mem[(4 * ceil32(return_data.size)) + 288]:
                                                mem[s] = mem[t + 12 len 20]
                                                idx = idx + 1
                                                s = s + 32
                                                t = t + 32
                                                continue 
                                            require ext_code.size(uniswapV2RouterAddress)
                                            call uniswapV2RouterAddress.swapExactTokensForETHSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args balanceOf[this.address], 0, 160, address(this.address), block.timestamp, mem[(6 * ceil32(return_data.size)) + 548 len (32 * mem[(4 * ceil32(return_data.size)) + 288]) + 32]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            call dividendTrackerAddress with:
                                               value eth.balance(this.address) wei
                                                 gas gas_remaining wei
                                            if ext_call.success:
                                                emit SendDividends(balanceOf[this.address], eth.balance(this.address));
                                            stor7 = 0
                                            if stor21[address(msg.sender)]:
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if not arg1:
                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                if balanceOf[address(msg.sender)] < arg2:
                                                    revert with 0, 'ERC20: transfer amount exceeds balance'
                                                balanceOf[address(msg.sender)] -= arg2
                                                if balanceOf[arg1] > !arg2:
                                                    revert with 'NH{q', 17
                                                balanceOf[arg1] += arg2
                                                emit Transfer(arg2, msg.sender, arg1);
                                            else:
                                                if stor21[address(arg1)]:
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if not arg1:
                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                    if balanceOf[address(msg.sender)] < arg2:
                                                        revert with 0, 'ERC20: transfer amount exceeds balance'
                                                    balanceOf[address(msg.sender)] -= arg2
                                                    if balanceOf[arg1] > !arg2:
                                                        revert with 'NH{q', 17
                                                    balanceOf[arg1] += arg2
                                                    emit Transfer(arg2, msg.sender, arg1);
                                                else:
                                                    if stor7:
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if not arg1:
                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                        if balanceOf[address(msg.sender)] < arg2:
                                                            revert with 0, 'ERC20: transfer amount exceeds balance'
                                                        balanceOf[address(msg.sender)] -= arg2
                                                        if balanceOf[arg1] > !arg2:
                                                            revert with 'NH{q', 17
                                                        balanceOf[arg1] += arg2
                                                        emit Transfer(arg2, msg.sender, arg1);
                                                    else:
                                                        if arg2 and totalFees > -1 / arg2:
                                                            revert with 'NH{q', 17
                                                        if not stor22[address(arg1)]:
                                                            if arg2 < arg2 * totalFees / 100:
                                                                revert with 'NH{q', 17
                                                            if not msg.sender:
                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                            if not this.address:
                                                                revert with 0, 'ERC20: transfer to the zero address'
                                                            if balanceOf[address(msg.sender)] < arg2 * totalFees / 100:
                                                                revert with 0, 'ERC20: transfer amount exceeds balance'
                                                            balanceOf[address(msg.sender)] -= arg2 * totalFees / 100
                                                            if balanceOf[this.address] > !(arg2 * totalFees / 100):
                                                                revert with 'NH{q', 17
                                                            balanceOf[this.address] += arg2 * totalFees / 100
                                                            emit Transfer((arg2 * totalFees / 100), msg.sender, this.address);
                                                            if not msg.sender:
                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                            if not arg1:
                                                                revert with 0, 'ERC20: transfer to the zero address'
                                                            if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100):
                                                                revert with 0, 'ERC20: transfer amount exceeds balance'
                                                            balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100)
                                                            if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100)):
                                                                revert with 'NH{q', 17
                                                            balanceOf[arg1] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100)
                                                            emit Transfer((arg2 - (arg2 * totalFees / 100)), msg.sender, arg1);
                                                        else:
                                                            if arg2 and sellFeeIncreaseFactor > -1 / arg2:
                                                                revert with 'NH{q', 17
                                                            if arg2 * totalFees / 100 > !(arg2 * sellFeeIncreaseFactor / 100):
                                                                revert with 'NH{q', 17
                                                            if arg2 < (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100):
                                                                revert with 'NH{q', 17
                                                            if not msg.sender:
                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                            if not this.address:
                                                                revert with 0, 'ERC20: transfer to the zero address'
                                                            if balanceOf[address(msg.sender)] < (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100):
                                                                revert with 0, 'ERC20: transfer amount exceeds balance'
                                                            balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)
                                                            if balanceOf[this.address] > !((arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)):
                                                                revert with 'NH{q', 17
                                                            balanceOf[this.address] = balanceOf[this.address] + (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)
                                                            emit Transfer(((arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)), msg.sender, this.address);
                                                            if not msg.sender:
                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                            if not arg1:
                                                                revert with 0, 'ERC20: transfer to the zero address'
                                                            if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100):
                                                                revert with 0, 'ERC20: transfer amount exceeds balance'
                                                            balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)
                                                            if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)):
                                                                revert with 'NH{q', 17
                                                            balanceOf[arg1] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)
                                                            emit Transfer((arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)), msg.sender, arg1);
                        require ext_code.size(dividendTrackerAddress)
                        call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                             gas gas_remaining wei
                            args msg.sender, balanceOf[address(msg.sender)]
                        require ext_code.size(dividendTrackerAddress)
                        call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                             gas gas_remaining wei
                            args address(arg1), balanceOf[address(arg1)]
                        if not stor7:
                            call dividendTrackerAddress.process(uint256 arg1) with:
                                 gas gas_remaining wei
                                args gasForProcessing
                            if ext_call.success:
                                require return_data.size >= 96
                                emit ProcessedDividendTracker(ext_call.return_data[0], ext_call.return_data[32], ext_call.return_data[64], gasForProcessing, 1, tx.origin);
                    else:
                        if balanceOf[this.address] < swapTokensAtAmount:
                            if stor21[address(msg.sender)]:
                                if not msg.sender:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                if not arg1:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                if balanceOf[address(msg.sender)] < arg2:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                balanceOf[address(msg.sender)] -= arg2
                                if balanceOf[arg1] > !arg2:
                                    revert with 'NH{q', 17
                                balanceOf[arg1] += arg2
                                emit Transfer(arg2, msg.sender, arg1);
                            else:
                                if stor21[address(arg1)]:
                                    if not msg.sender:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                    if not arg1:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                    if balanceOf[address(msg.sender)] < arg2:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                    balanceOf[address(msg.sender)] -= arg2
                                    if balanceOf[arg1] > !arg2:
                                        revert with 'NH{q', 17
                                    balanceOf[arg1] += arg2
                                    emit Transfer(arg2, msg.sender, arg1);
                                else:
                                    if stor7:
                                        if not msg.sender:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                        if not arg1:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                        if balanceOf[address(msg.sender)] < arg2:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                        balanceOf[address(msg.sender)] -= arg2
                                        if balanceOf[arg1] > !arg2:
                                            revert with 'NH{q', 17
                                        balanceOf[arg1] += arg2
                                        emit Transfer(arg2, msg.sender, arg1);
                                    else:
                                        if arg2 and totalFees > -1 / arg2:
                                            revert with 'NH{q', 17
                                        if not stor22[address(arg1)]:
                                            if arg2 < arg2 * totalFees / 100:
                                                revert with 'NH{q', 17
                                            if not msg.sender:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                            if not this.address:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                            if balanceOf[address(msg.sender)] < arg2 * totalFees / 100:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                            balanceOf[address(msg.sender)] -= arg2 * totalFees / 100
                                            if balanceOf[this.address] > !(arg2 * totalFees / 100):
                                                revert with 'NH{q', 17
                                            balanceOf[this.address] += arg2 * totalFees / 100
                                            emit Transfer((arg2 * totalFees / 100), msg.sender, this.address);
                                            if not msg.sender:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                            if not arg1:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                            if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100):
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                            balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100)
                                            if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100)):
                                                revert with 'NH{q', 17
                                            balanceOf[arg1] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100)
                                            emit Transfer((arg2 - (arg2 * totalFees / 100)), msg.sender, arg1);
                                        else:
                                            if arg2 and sellFeeIncreaseFactor > -1 / arg2:
                                                revert with 'NH{q', 17
                                            if arg2 * totalFees / 100 > !(arg2 * sellFeeIncreaseFactor / 100):
                                                revert with 'NH{q', 17
                                            if arg2 < (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100):
                                                revert with 'NH{q', 17
                                            if not msg.sender:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                            if not this.address:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                            if balanceOf[address(msg.sender)] < (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100):
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                            balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)
                                            if balanceOf[this.address] > !((arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)):
                                                revert with 'NH{q', 17
                                            balanceOf[this.address] = balanceOf[this.address] + (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)
                                            emit Transfer(((arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)), msg.sender, this.address);
                                            if not msg.sender:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                            if not arg1:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                            if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100):
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                            balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)
                                            if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)):
                                                revert with 'NH{q', 17
                                            balanceOf[arg1] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)
                                            emit Transfer((arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)), msg.sender, arg1);
                            require ext_code.size(dividendTrackerAddress)
                            call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                 gas gas_remaining wei
                                args msg.sender, balanceOf[address(msg.sender)]
                            require ext_code.size(dividendTrackerAddress)
                            call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                 gas gas_remaining wei
                                args address(arg1), balanceOf[address(arg1)]
                            if not stor7:
                                call dividendTrackerAddress.process(uint256 arg1) with:
                                     gas gas_remaining wei
                                    args gasForProcessing
                                if ext_call.success:
                                    require return_data.size >= 96
                                    emit ProcessedDividendTracker(ext_call.return_data[0], ext_call.return_data[32], ext_call.return_data[64], gasForProcessing, 1, tx.origin);
                        else:
                            if stor7:
                                if stor21[address(msg.sender)]:
                                    if not msg.sender:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                    if not arg1:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                    if balanceOf[address(msg.sender)] < arg2:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                    balanceOf[address(msg.sender)] -= arg2
                                    if balanceOf[arg1] > !arg2:
                                        revert with 'NH{q', 17
                                    balanceOf[arg1] += arg2
                                    emit Transfer(arg2, msg.sender, arg1);
                                else:
                                    if stor21[address(arg1)]:
                                        if not msg.sender:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                        if not arg1:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                        if balanceOf[address(msg.sender)] < arg2:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                        balanceOf[address(msg.sender)] -= arg2
                                        if balanceOf[arg1] > !arg2:
                                            revert with 'NH{q', 17
                                        balanceOf[arg1] += arg2
                                        emit Transfer(arg2, msg.sender, arg1);
                                    else:
                                        if stor7:
                                            if not msg.sender:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                            if not arg1:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                            if balanceOf[address(msg.sender)] < arg2:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                            balanceOf[address(msg.sender)] -= arg2
                                            if balanceOf[arg1] > !arg2:
                                                revert with 'NH{q', 17
                                            balanceOf[arg1] += arg2
                                            emit Transfer(arg2, msg.sender, arg1);
                                        else:
                                            if arg2 and totalFees > -1 / arg2:
                                                revert with 'NH{q', 17
                                            if not stor22[address(arg1)]:
                                                if arg2 < arg2 * totalFees / 100:
                                                    revert with 'NH{q', 17
                                                if not msg.sender:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                if not this.address:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                if balanceOf[address(msg.sender)] < arg2 * totalFees / 100:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                balanceOf[address(msg.sender)] -= arg2 * totalFees / 100
                                                if balanceOf[this.address] > !(arg2 * totalFees / 100):
                                                    revert with 'NH{q', 17
                                                balanceOf[this.address] += arg2 * totalFees / 100
                                                emit Transfer((arg2 * totalFees / 100), msg.sender, this.address);
                                                if not msg.sender:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                if not arg1:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100):
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100)
                                                if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100)):
                                                    revert with 'NH{q', 17
                                                balanceOf[arg1] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100)
                                                emit Transfer((arg2 - (arg2 * totalFees / 100)), msg.sender, arg1);
                                            else:
                                                if arg2 and sellFeeIncreaseFactor > -1 / arg2:
                                                    revert with 'NH{q', 17
                                                if arg2 * totalFees / 100 > !(arg2 * sellFeeIncreaseFactor / 100):
                                                    revert with 'NH{q', 17
                                                if arg2 < (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100):
                                                    revert with 'NH{q', 17
                                                if not msg.sender:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                if not this.address:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                if balanceOf[address(msg.sender)] < (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100):
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)
                                                if balanceOf[this.address] > !((arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)):
                                                    revert with 'NH{q', 17
                                                balanceOf[this.address] = balanceOf[this.address] + (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)
                                                emit Transfer(((arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)), msg.sender, this.address);
                                                if not msg.sender:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                if not arg1:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100):
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)
                                                if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)):
                                                    revert with 'NH{q', 17
                                                balanceOf[arg1] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)
                                                emit Transfer((arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)), msg.sender, arg1);
                                require ext_code.size(dividendTrackerAddress)
                                call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                     gas gas_remaining wei
                                    args msg.sender, balanceOf[address(msg.sender)]
                                require ext_code.size(dividendTrackerAddress)
                                call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                     gas gas_remaining wei
                                    args address(arg1), balanceOf[address(arg1)]
                                if not stor7:
                                    call dividendTrackerAddress.process(uint256 arg1) with:
                                         gas gas_remaining wei
                                        args gasForProcessing
                                    if ext_call.success:
                                        require return_data.size >= 96
                                        emit ProcessedDividendTracker(ext_call.return_data[0], ext_call.return_data[32], ext_call.return_data[64], gasForProcessing, 1, tx.origin);
                            else:
                                if stor22[address(msg.sender)]:
                                    if stor21[address(msg.sender)]:
                                        if not msg.sender:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                        if not arg1:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                        if balanceOf[address(msg.sender)] < arg2:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                        balanceOf[address(msg.sender)] -= arg2
                                        if balanceOf[arg1] > !arg2:
                                            revert with 'NH{q', 17
                                        balanceOf[arg1] += arg2
                                        emit Transfer(arg2, msg.sender, arg1);
                                    else:
                                        if stor21[address(arg1)]:
                                            if not msg.sender:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                            if not arg1:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                            if balanceOf[address(msg.sender)] < arg2:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                            balanceOf[address(msg.sender)] -= arg2
                                            if balanceOf[arg1] > !arg2:
                                                revert with 'NH{q', 17
                                            balanceOf[arg1] += arg2
                                            emit Transfer(arg2, msg.sender, arg1);
                                        else:
                                            if stor7:
                                                if not msg.sender:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                if not arg1:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                if balanceOf[address(msg.sender)] < arg2:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                balanceOf[address(msg.sender)] -= arg2
                                                if balanceOf[arg1] > !arg2:
                                                    revert with 'NH{q', 17
                                                balanceOf[arg1] += arg2
                                                emit Transfer(arg2, msg.sender, arg1);
                                            else:
                                                if arg2 and totalFees > -1 / arg2:
                                                    revert with 'NH{q', 17
                                                if not stor22[address(arg1)]:
                                                    if arg2 < arg2 * totalFees / 100:
                                                        revert with 'NH{q', 17
                                                    if not msg.sender:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                    if not this.address:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                    if balanceOf[address(msg.sender)] < arg2 * totalFees / 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                    balanceOf[address(msg.sender)] -= arg2 * totalFees / 100
                                                    if balanceOf[this.address] > !(arg2 * totalFees / 100):
                                                        revert with 'NH{q', 17
                                                    balanceOf[this.address] += arg2 * totalFees / 100
                                                    emit Transfer((arg2 * totalFees / 100), msg.sender, this.address);
                                                    if not msg.sender:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                    if not arg1:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                    if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100):
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                    balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100)
                                                    if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100)):
                                                        revert with 'NH{q', 17
                                                    balanceOf[arg1] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100)
                                                    emit Transfer((arg2 - (arg2 * totalFees / 100)), msg.sender, arg1);
                                                else:
                                                    if arg2 and sellFeeIncreaseFactor > -1 / arg2:
                                                        revert with 'NH{q', 17
                                                    if arg2 * totalFees / 100 > !(arg2 * sellFeeIncreaseFactor / 100):
                                                        revert with 'NH{q', 17
                                                    if arg2 < (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100):
                                                        revert with 'NH{q', 17
                                                    if not msg.sender:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                    if not this.address:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                    if balanceOf[address(msg.sender)] < (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100):
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                    balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)
                                                    if balanceOf[this.address] > !((arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)):
                                                        revert with 'NH{q', 17
                                                    balanceOf[this.address] = balanceOf[this.address] + (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)
                                                    emit Transfer(((arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)), msg.sender, this.address);
                                                    if not msg.sender:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                    if not arg1:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                    if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100):
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                    balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)
                                                    if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)):
                                                        revert with 'NH{q', 17
                                                    balanceOf[arg1] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)
                                                    emit Transfer((arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)), msg.sender, arg1);
                                    require ext_code.size(dividendTrackerAddress)
                                    call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                         gas gas_remaining wei
                                        args msg.sender, balanceOf[address(msg.sender)]
                                    require ext_code.size(dividendTrackerAddress)
                                    call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                         gas gas_remaining wei
                                        args address(arg1), balanceOf[address(arg1)]
                                    if not stor7:
                                        call dividendTrackerAddress.process(uint256 arg1) with:
                                             gas gas_remaining wei
                                            args gasForProcessing
                                        if ext_call.success:
                                            require return_data.size >= 96
                                            emit ProcessedDividendTracker(ext_call.return_data[0], ext_call.return_data[32], ext_call.return_data[64], gasForProcessing, 1, tx.origin);
                                else:
                                    if owner == msg.sender:
                                        if stor21[address(msg.sender)]:
                                            if not msg.sender:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                            if not arg1:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                            if balanceOf[address(msg.sender)] < arg2:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                            balanceOf[address(msg.sender)] -= arg2
                                            if balanceOf[arg1] > !arg2:
                                                revert with 'NH{q', 17
                                            balanceOf[arg1] += arg2
                                            emit Transfer(arg2, msg.sender, arg1);
                                        else:
                                            if stor21[address(arg1)]:
                                                if not msg.sender:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                if not arg1:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                if balanceOf[address(msg.sender)] < arg2:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                balanceOf[address(msg.sender)] -= arg2
                                                if balanceOf[arg1] > !arg2:
                                                    revert with 'NH{q', 17
                                                balanceOf[arg1] += arg2
                                                emit Transfer(arg2, msg.sender, arg1);
                                            else:
                                                if stor7:
                                                    if not msg.sender:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                    if not arg1:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                    if balanceOf[address(msg.sender)] < arg2:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                    balanceOf[address(msg.sender)] -= arg2
                                                    if balanceOf[arg1] > !arg2:
                                                        revert with 'NH{q', 17
                                                    balanceOf[arg1] += arg2
                                                    emit Transfer(arg2, msg.sender, arg1);
                                                else:
                                                    if arg2 and totalFees > -1 / arg2:
                                                        revert with 'NH{q', 17
                                                    if not stor22[address(arg1)]:
                                                        if arg2 < arg2 * totalFees / 100:
                                                            revert with 'NH{q', 17
                                                        if not msg.sender:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                        if not this.address:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                        if balanceOf[address(msg.sender)] < arg2 * totalFees / 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                        balanceOf[address(msg.sender)] -= arg2 * totalFees / 100
                                                        if balanceOf[this.address] > !(arg2 * totalFees / 100):
                                                            revert with 'NH{q', 17
                                                        balanceOf[this.address] += arg2 * totalFees / 100
                                                        emit Transfer((arg2 * totalFees / 100), msg.sender, this.address);
                                                        if not msg.sender:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                        if not arg1:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                        if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100):
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                        balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100)
                                                        if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100)):
                                                            revert with 'NH{q', 17
                                                        balanceOf[arg1] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100)
                                                        emit Transfer((arg2 - (arg2 * totalFees / 100)), msg.sender, arg1);
                                                    else:
                                                        if arg2 and sellFeeIncreaseFactor > -1 / arg2:
                                                            revert with 'NH{q', 17
                                                        if arg2 * totalFees / 100 > !(arg2 * sellFeeIncreaseFactor / 100):
                                                            revert with 'NH{q', 17
                                                        if arg2 < (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100):
                                                            revert with 'NH{q', 17
                                                        if not msg.sender:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                        if not this.address:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                        if balanceOf[address(msg.sender)] < (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100):
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                        balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)
                                                        if balanceOf[this.address] > !((arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)):
                                                            revert with 'NH{q', 17
                                                        balanceOf[this.address] = balanceOf[this.address] + (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)
                                                        emit Transfer(((arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)), msg.sender, this.address);
                                                        if not msg.sender:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                        if not arg1:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                        if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100):
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                        balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)
                                                        if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)):
                                                            revert with 'NH{q', 17
                                                        balanceOf[arg1] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)
                                                        emit Transfer((arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)), msg.sender, arg1);
                                        require ext_code.size(dividendTrackerAddress)
                                        call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                             gas gas_remaining wei
                                            args msg.sender, balanceOf[address(msg.sender)]
                                        require ext_code.size(dividendTrackerAddress)
                                        call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                             gas gas_remaining wei
                                            args address(arg1), balanceOf[address(arg1)]
                                        if not stor7:
                                            call dividendTrackerAddress.process(uint256 arg1) with:
                                                 gas gas_remaining wei
                                                args gasForProcessing
                                            if ext_call.success:
                                                require return_data.size >= 96
                                                emit ProcessedDividendTracker(ext_call.return_data[0], ext_call.return_data[32], ext_call.return_data[64], gasForProcessing, 1, tx.origin);
                                    else:
                                        if owner == arg1:
                                            if stor21[address(msg.sender)]:
                                                if not msg.sender:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                if not arg1:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                if balanceOf[address(msg.sender)] < arg2:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                balanceOf[address(msg.sender)] -= arg2
                                                if balanceOf[arg1] > !arg2:
                                                    revert with 'NH{q', 17
                                                balanceOf[arg1] += arg2
                                                emit Transfer(arg2, msg.sender, arg1);
                                            else:
                                                if stor21[address(arg1)]:
                                                    if not msg.sender:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                    if not arg1:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                    if balanceOf[address(msg.sender)] < arg2:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                    balanceOf[address(msg.sender)] -= arg2
                                                    if balanceOf[arg1] > !arg2:
                                                        revert with 'NH{q', 17
                                                    balanceOf[arg1] += arg2
                                                    emit Transfer(arg2, msg.sender, arg1);
                                                else:
                                                    if stor7:
                                                        if not msg.sender:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                        if not arg1:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                        if balanceOf[address(msg.sender)] < arg2:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                        balanceOf[address(msg.sender)] -= arg2
                                                        if balanceOf[arg1] > !arg2:
                                                            revert with 'NH{q', 17
                                                        balanceOf[arg1] += arg2
                                                        emit Transfer(arg2, msg.sender, arg1);
                                                    else:
                                                        if arg2 and totalFees > -1 / arg2:
                                                            revert with 'NH{q', 17
                                                        if not stor22[address(arg1)]:
                                                            if arg2 < arg2 * totalFees / 100:
                                                                revert with 'NH{q', 17
                                                            if not msg.sender:
                                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                            if not this.address:
                                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                            if balanceOf[address(msg.sender)] < arg2 * totalFees / 100:
                                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                            balanceOf[address(msg.sender)] -= arg2 * totalFees / 100
                                                            if balanceOf[this.address] > !(arg2 * totalFees / 100):
                                                                revert with 'NH{q', 17
                                                            balanceOf[this.address] += arg2 * totalFees / 100
                                                            emit Transfer((arg2 * totalFees / 100), msg.sender, this.address);
                                                            if not msg.sender:
                                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                            if not arg1:
                                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                            if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100):
                                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                            balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100)
                                                            if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100)):
                                                                revert with 'NH{q', 17
                                                            balanceOf[arg1] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100)
                                                            emit Transfer((arg2 - (arg2 * totalFees / 100)), msg.sender, arg1);
                                                        else:
                                                            if arg2 and sellFeeIncreaseFactor > -1 / arg2:
                                                                revert with 'NH{q', 17
                                                            if arg2 * totalFees / 100 > !(arg2 * sellFeeIncreaseFactor / 100):
                                                                revert with 'NH{q', 17
                                                            if arg2 < (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100):
                                                                revert with 'NH{q', 17
                                                            if not msg.sender:
                                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                            if not this.address:
                                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                            if balanceOf[address(msg.sender)] < (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100):
                                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                            balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)
                                                            if balanceOf[this.address] > !((arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)):
                                                                revert with 'NH{q', 17
                                                            balanceOf[this.address] = balanceOf[this.address] + (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)
                                                            emit Transfer(((arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)), msg.sender, this.address);
                                                            if not msg.sender:
                                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                            if not arg1:
                                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                            if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100):
                                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                            balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)
                                                            if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)):
                                                                revert with 'NH{q', 17
                                                            balanceOf[arg1] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)
                                                            emit Transfer((arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)), msg.sender, arg1);
                                            require ext_code.size(dividendTrackerAddress)
                                            call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args msg.sender, balanceOf[address(msg.sender)]
                                            require ext_code.size(dividendTrackerAddress)
                                            call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args address(arg1), balanceOf[address(arg1)]
                                            if not stor7:
                                                call dividendTrackerAddress.process(uint256 arg1) with:
                                                     gas gas_remaining wei
                                                    args gasForProcessing
                                                if ext_call.success:
                                                    require return_data.size >= 96
                                                    emit ProcessedDividendTracker(ext_call.return_data[0], ext_call.return_data[32], ext_call.return_data[64], gasForProcessing, 1, tx.origin);
                                        else:
                                            stor7 = 1
                                            if balanceOf[this.address] and marketingFee > -1 / balanceOf[this.address]:
                                                revert with 'NH{q', 17
                                            if not totalFees:
                                                revert with 'NH{q', 18
                                            mem[96] = 2
                                            mem[128] = this.address
                                            staticcall uniswapV2RouterAddress.WETH() with:
                                                    gas gas_remaining wei
                                            mem[192] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                            mem[160] = ext_call.return_data[12 len 20]
                                            if not this.address:
                                                revert with 0, 'ERC20: approve from the zero address'
                                            if not uniswapV2RouterAddress:
                                                revert with 0, 'ERC20: approve to the zero address'
                                            allowance[address(this.address)][stor6].field_0 = balanceOf[this.address] * marketingFee / totalFees
                                            emit Approval((balanceOf[this.address] * marketingFee / totalFees), this.address, uniswapV2RouterAddress);
                                            mem[ceil32(return_data.size) + 192] = 0x791ac94700000000000000000000000000000000000000000000000000000000
                                            mem[ceil32(return_data.size) + 196] = balanceOf[this.address] * marketingFee / totalFees
                                            mem[ceil32(return_data.size) + 356] = 2
                                            idx = 0
                                            s = ceil32(return_data.size) + 388
                                            t = 128
                                            while idx < 2:
                                                mem[s] = mem[t + 12 len 20]
                                                idx = idx + 1
                                                s = s + 32
                                                t = t + 32
                                                continue 
                                            mem[ceil32(return_data.size) + 292] = this.address
                                            mem[ceil32(return_data.size) + 324] = block.timestamp
                                            require ext_code.size(uniswapV2RouterAddress)
                                            call uniswapV2RouterAddress.swapExactTokensForETHSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args balanceOf[this.address] * marketingFee / totalFees, 0, 160, address(this.address), block.timestamp, 2, mem[ceil32(return_data.size) + 388 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            call _marketingWalletAddress with:
                                               value eth.balance(this.address) wei
                                                 gas 2300 * is_zero(value) wei
                                            if balanceOf[this.address] and liquidityFee > -1 / balanceOf[this.address]:
                                                revert with 'NH{q', 17
                                            if not totalFees:
                                                revert with 'NH{q', 18
                                            if balanceOf[this.address] * liquidityFee / totalFees < balanceOf[this.address] * liquidityFee / totalFees / 2:
                                                revert with 'NH{q', 17
                                            mem[ceil32(return_data.size) + 192] = 2
                                            mem[ceil32(return_data.size) + 224] = this.address
                                            staticcall uniswapV2RouterAddress.WETH() with:
                                                    gas gas_remaining wei
                                            mem[ceil32(return_data.size) + 288] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                            mem[ceil32(return_data.size) + 256] = ext_call.return_data[12 len 20]
                                            if not this.address:
                                                revert with 0, 'ERC20: approve from the zero address'
                                            if not uniswapV2RouterAddress:
                                                revert with 0, 'ERC20: approve to the zero address'
                                            allowance[address(this.address)][stor6].field_0 = balanceOf[this.address] * liquidityFee / totalFees / 2
                                            allowance[address(this.address)][stor6].field_255 = 0
                                            emit Approval((balanceOf[this.address] * liquidityFee / totalFees / 2), this.address, uniswapV2RouterAddress);
                                            mem[(2 * ceil32(return_data.size)) + 288] = 0x791ac94700000000000000000000000000000000000000000000000000000000
                                            mem[(2 * ceil32(return_data.size)) + 292] = balanceOf[this.address] * liquidityFee / totalFees / 2
                                            mem[(2 * ceil32(return_data.size)) + 324] = 0
                                            mem[(2 * ceil32(return_data.size)) + 356] = 160
                                            mem[(2 * ceil32(return_data.size)) + 452] = 2
                                            idx = 0
                                            s = (2 * ceil32(return_data.size)) + 484
                                            t = ceil32(return_data.size) + 224
                                            while idx < mem[ceil32(return_data.size) + 192]:
                                                mem[s] = mem[t + 12 len 20]
                                                idx = idx + 1
                                                s = s + 32
                                                t = t + 32
                                                continue 
                                            mem[(2 * ceil32(return_data.size)) + 388] = this.address
                                            mem[(2 * ceil32(return_data.size)) + 420] = block.timestamp
                                            require ext_code.size(uniswapV2RouterAddress)
                                            call uniswapV2RouterAddress.swapExactTokensForETHSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args Mask(255, 1, balanceOf[this.address] * liquidityFee / totalFees), 0, 160, address(this.address), block.timestamp, mem[(2 * ceil32(return_data.size)) + 452 len (32 * mem[ceil32(return_data.size) + 192]) + 32]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            if eth.balance(this.address) < eth.balance(this.address):
                                                revert with 'NH{q', 17
                                            if not this.address:
                                                mem[(2 * ceil32(return_data.size)) + 288] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[(2 * ceil32(return_data.size)) + 292] = 32
                                                mem[(2 * ceil32(return_data.size)) + 324] = 36
                                                mem[(2 * ceil32(return_data.size)) + 356] = 'ERC20: approve from the zero add'
                                                mem[(2 * ceil32(return_data.size)) + 388] = 'ress'
                                                revert with memory
                                                  from (2 * ceil32(return_data.size)) + 288
                                                   len ceil32(return_data.size) + 132
                                            if not uniswapV2RouterAddress:
                                                mem[(2 * ceil32(return_data.size)) + 288] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[(2 * ceil32(return_data.size)) + 292] = 32
                                                mem[(2 * ceil32(return_data.size)) + 324] = 34
                                                mem[(2 * ceil32(return_data.size)) + 356] = 'ERC20: approve to the zero addre'
                                                mem[(2 * ceil32(return_data.size)) + 388] = 'ss'
                                                revert with memory
                                                  from (2 * ceil32(return_data.size)) + 288
                                                   len ceil32(return_data.size) + 132
                                            allowance[address(this.address)][stor6].field_0 = (balanceOf[this.address] * liquidityFee / totalFees) - (balanceOf[this.address] * liquidityFee / totalFees / 2)
                                            emit Approval(((balanceOf[this.address] * liquidityFee / totalFees) - (balanceOf[this.address] * liquidityFee / totalFees / 2)), this.address, uniswapV2RouterAddress);
                                            mem[(2 * ceil32(return_data.size)) + 292] = this.address
                                            mem[(2 * ceil32(return_data.size)) + 324] = (balanceOf[this.address] * liquidityFee / totalFees) - (balanceOf[this.address] * liquidityFee / totalFees / 2)
                                            mem[(2 * ceil32(return_data.size)) + 356] = 0
                                            mem[(2 * ceil32(return_data.size)) + 388] = 0
                                            mem[(2 * ceil32(return_data.size)) + 420] = 0
                                            mem[(2 * ceil32(return_data.size)) + 452] = block.timestamp
                                            call uniswapV2RouterAddress.addLiquidityETH(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                                 gas gas_remaining wei
                                                args mem[(2 * ceil32(return_data.size)) + 292 len ceil32(return_data.size) + 192]
                                            mem[(2 * ceil32(return_data.size)) + 288 len 96] = ext_call.return_data[0 len 96]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 96
                                            mem[(4 * ceil32(return_data.size)) + 288] = balanceOf[this.address] * liquidityFee / totalFees / 2
                                            mem[(4 * ceil32(return_data.size)) + 320] = 0
                                            mem[(4 * ceil32(return_data.size)) + 352] = (balanceOf[this.address] * liquidityFee / totalFees) - (balanceOf[this.address] * liquidityFee / totalFees / 2)
                                            emit SwapAndLiquify(uint256 arg1, uint256 arg2, uint256 arg3):
                                                                mem[(4 * ceil32(return_data.size)) + 288 len (5 * ceil32(return_data.size)) + 96],
                                            mem[(4 * ceil32(return_data.size)) + 288] = 2
                                            mem[(4 * ceil32(return_data.size)) + 320] = this.address
                                            staticcall uniswapV2RouterAddress.WETH() with:
                                                    gas gas_remaining wei
                                            mem[(4 * ceil32(return_data.size)) + 384] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[64] = (6 * ceil32(return_data.size)) + 384
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                            mem[(4 * ceil32(return_data.size)) + 352] = ext_call.return_data[12 len 20]
                                            if not this.address:
                                                revert with 0, 'ERC20: approve from the zero address'
                                            if not uniswapV2RouterAddress:
                                                revert with 0, 'ERC20: approve to the zero address'
                                            mem[0] = uniswapV2RouterAddress
                                            mem[32] = sha3(address(this.address), 1)
                                            allowance[address(this.address)][stor6].field_0 = balanceOf[this.address]
                                            emit Approval(balanceOf[this.address], this.address, uniswapV2RouterAddress);
                                            mem[(6 * ceil32(return_data.size)) + 384] = 0x791ac94700000000000000000000000000000000000000000000000000000000
                                            mem[(6 * ceil32(return_data.size)) + 388] = balanceOf[this.address]
                                            mem[(6 * ceil32(return_data.size)) + 420] = 0
                                            mem[(6 * ceil32(return_data.size)) + 452] = 160
                                            mem[(6 * ceil32(return_data.size)) + 548] = 2
                                            idx = 0
                                            s = (6 * ceil32(return_data.size)) + 580
                                            t = (4 * ceil32(return_data.size)) + 320
                                            while idx < mem[(4 * ceil32(return_data.size)) + 288]:
                                                mem[s] = mem[t + 12 len 20]
                                                idx = idx + 1
                                                s = s + 32
                                                t = t + 32
                                                continue 
                                            mem[(6 * ceil32(return_data.size)) + 484] = this.address
                                            mem[(6 * ceil32(return_data.size)) + 516] = block.timestamp
                                            require ext_code.size(uniswapV2RouterAddress)
                                            call uniswapV2RouterAddress.swapExactTokensForETHSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args balanceOf[this.address], 0, 160, address(this.address), block.timestamp, mem[(6 * ceil32(return_data.size)) + 548 len (32 * mem[(4 * ceil32(return_data.size)) + 288]) + 32]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            call dividendTrackerAddress with:
                                               value eth.balance(this.address) wei
                                                 gas gas_remaining wei
                                            if not return_data.size:
                                                if ext_call.success:
                                                    emit SendDividends(balanceOf[this.address], eth.balance(this.address));
                                                stor7 = 0
                                                if stor21[address(msg.sender)]:
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address', mem[(6 * ceil32(return_data.size)) + 516 len 9 * ceil32(return_data.size)]
                                                    if not arg1:
                                                        revert with 0, 'ERC20: transfer to the zero address', mem[(6 * ceil32(return_data.size)) + 516 len 9 * ceil32(return_data.size)]
                                                    if balanceOf[address(msg.sender)] < arg2:
                                                        revert with 0, 'ERC20: transfer amount exceeds balance', mem[(6 * ceil32(return_data.size)) + 516 len 9 * ceil32(return_data.size)]
                                                    balanceOf[address(msg.sender)] -= arg2
                                                    if balanceOf[arg1] > !arg2:
                                                        revert with 'NH{q', 17
                                                    balanceOf[arg1] += arg2
                                                    emit Transfer(arg2, msg.sender, arg1);
                                                else:
                                                    if stor21[address(arg1)]:
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address', mem[(6 * ceil32(return_data.size)) + 516 len 9 * ceil32(return_data.size)]
                                                        if not arg1:
                                                            revert with 0, 'ERC20: transfer to the zero address', mem[(6 * ceil32(return_data.size)) + 516 len 9 * ceil32(return_data.size)]
                                                        if balanceOf[address(msg.sender)] < arg2:
                                                            revert with 0, 'ERC20: transfer amount exceeds balance', mem[(6 * ceil32(return_data.size)) + 516 len 9 * ceil32(return_data.size)]
                                                        balanceOf[address(msg.sender)] -= arg2
                                                        if balanceOf[arg1] > !arg2:
                                                            revert with 'NH{q', 17
                                                        balanceOf[arg1] += arg2
                                                        emit Transfer(arg2, msg.sender, arg1);
                                                    else:
                                                        if stor7:
                                                            if not msg.sender:
                                                                revert with 0, 'ERC20: transfer from the zero address', mem[(6 * ceil32(return_data.size)) + 516 len 9 * ceil32(return_data.size)]
                                                            if not arg1:
                                                                revert with 0, 'ERC20: transfer to the zero address', mem[(6 * ceil32(return_data.size)) + 516 len 9 * ceil32(return_data.size)]
                                                            if balanceOf[address(msg.sender)] < arg2:
                                                                revert with 0, 'ERC20: transfer amount exceeds balance', mem[(6 * ceil32(return_data.size)) + 516 len 9 * ceil32(return_data.size)]
                                                            balanceOf[address(msg.sender)] -= arg2
                                                            if balanceOf[arg1] > !arg2:
                                                                revert with 'NH{q', 17
                                                            balanceOf[arg1] += arg2
                                                            emit Transfer(arg2, msg.sender, arg1);
                                                        else:
                                                            if arg2 and totalFees > -1 / arg2:
                                                                revert with 'NH{q', 17
                                                            if not stor22[address(arg1)]:
                                                                if arg2 < arg2 * totalFees / 100:
                                                                    revert with 'NH{q', 17
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address', mem[(6 * ceil32(return_data.size)) + 516 len 9 * ceil32(return_data.size)]
                                                                if not this.address:
                                                                    revert with 0, 'ERC20: transfer to the zero address', mem[(6 * ceil32(return_data.size)) + 516 len 9 * ceil32(return_data.size)]
                                                                if balanceOf[address(msg.sender)] < arg2 * totalFees / 100:
                                                                    revert with 0, 'ERC20: transfer amount exceeds balance', mem[(6 * ceil32(return_data.size)) + 516 len 9 * ceil32(return_data.size)]
                                                                balanceOf[address(msg.sender)] -= arg2 * totalFees / 100
                                                                if balanceOf[this.address] > !(arg2 * totalFees / 100):
                                                                    revert with 'NH{q', 17
                                                                balanceOf[this.address] += arg2 * totalFees / 100
                                                                emit Transfer((arg2 * totalFees / 100), msg.sender, this.address);
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address', mem[(6 * ceil32(return_data.size)) + 516 len 9 * ceil32(return_data.size)]
                                                                if not arg1:
                                                                    revert with 0, 'ERC20: transfer to the zero address', mem[(6 * ceil32(return_data.size)) + 516 len 9 * ceil32(return_data.size)]
                                                                if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100):
                                                                    revert with 0, 'ERC20: transfer amount exceeds balance', mem[(6 * ceil32(return_data.size)) + 516 len 9 * ceil32(return_data.size)]
                                                                balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100)
                                                                if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100)):
                                                                    revert with 'NH{q', 17
                                                                balanceOf[arg1] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100)
                                                                emit Transfer((arg2 - (arg2 * totalFees / 100)), msg.sender, arg1);
                                                            else:
                                                                if arg2 and sellFeeIncreaseFactor > -1 / arg2:
                                                                    revert with 'NH{q', 17
                                                                if arg2 * totalFees / 100 > !(arg2 * sellFeeIncreaseFactor / 100):
                                                                    revert with 'NH{q', 17
                                                                if arg2 < (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100):
                                                                    revert with 'NH{q', 17
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address', mem[(6 * ceil32(return_data.size)) + 516 len 9 * ceil32(return_data.size)]
                                                                if not this.address:
                                                                    revert with 0, 'ERC20: transfer to the zero address', mem[(6 * ceil32(return_data.size)) + 516 len 9 * ceil32(return_data.size)]
                                                                if balanceOf[address(msg.sender)] < (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100):
                                                                    revert with 0, 'ERC20: transfer amount exceeds balance', mem[(6 * ceil32(return_data.size)) + 516 len 9 * ceil32(return_data.size)]
                                                                balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)
                                                                if balanceOf[this.address] > !((arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)):
                                                                    revert with 'NH{q', 17
                                                                balanceOf[this.address] = balanceOf[this.address] + (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)
                                                                emit Transfer(((arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)), msg.sender, this.address);
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address', mem[(6 * ceil32(return_data.size)) + 516 len 9 * ceil32(return_data.size)]
                                                                if not arg1:
                                                                    revert with 0, 'ERC20: transfer to the zero address', mem[(6 * ceil32(return_data.size)) + 516 len 9 * ceil32(return_data.size)]
                                                                if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100):
                                                                    revert with 0, 'ERC20: transfer amount exceeds balance', mem[(6 * ceil32(return_data.size)) + 516 len 9 * ceil32(return_data.size)]
                                                                balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)
                                                                if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)):
                                                                    revert with 'NH{q', 17
                                                                balanceOf[arg1] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)
                                                                emit Transfer((arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)), msg.sender, arg1);
                                                require ext_code.size(dividendTrackerAddress)
                                                call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args msg.sender, balanceOf[address(msg.sender)], mem[(6 * ceil32(return_data.size)) + 452 len 9 * ceil32(return_data.size)]
                                                require ext_code.size(dividendTrackerAddress)
                                                call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(arg1), balanceOf[address(arg1)], mem[(6 * ceil32(return_data.size)) + 452 len 9 * ceil32(return_data.size)]
                                                if not stor7:
                                                    call dividendTrackerAddress.process(uint256 arg1) with:
                                                         gas gas_remaining wei
                                                        args gasForProcessing
                                                    mem[(6 * ceil32(return_data.size)) + 384 len 96] = ext_call.return_data[0 len 96]
                                                    if ext_call.success:
                                                        require return_data.size >= 96
                                                        mem[(8 * ceil32(return_data.size)) + 384] = ext_call.return_data[0]
                                                        mem[(8 * ceil32(return_data.size)) + 416] = ext_call.return_data[32]
                                                        mem[(8 * ceil32(return_data.size)) + 448] = ext_call.return_data[64]
                                                        mem[(8 * ceil32(return_data.size)) + 480] = gasForProcessing
                                                        emit ProcessedDividendTracker(uint256 arg1, uint256 arg2, uint256 arg3, bool arg4, uint256 arg5, address arg6):
                                                                                      mem[(8 * ceil32(return_data.size)) + 384 len (13 * ceil32(return_data.size)) + 128],
                                                                                      1,
                                                                                      tx.origin,
                                            else:
                                                mem[(6 * ceil32(return_data.size)) + 416 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                if ext_call.success:
                                                    emit SendDividends(balanceOf[this.address], eth.balance(this.address));
                                                stor7 = 0
                                                if stor21[address(msg.sender)]:
                                                    if not msg.sender:
                                                        revert with 0, 
                                                                    'ERC20: transfer from the zero address',
                                                                    mem[(6 * ceil32(return_data.size)) + ceil32(return_data.size) + 517 len 9 * ceil32(return_data.size)]
                                                    if not arg1:
                                                        revert with 0, 
                                                                    'ERC20: transfer to the zero address',
                                                                    mem[(6 * ceil32(return_data.size)) + ceil32(return_data.size) + 517 len 9 * ceil32(return_data.size)]
                                                    if balanceOf[address(msg.sender)] < arg2:
                                                        revert with 0, 
                                                                    'ERC20: transfer amount exceeds balance',
                                                                    mem[(6 * ceil32(return_data.size)) + ceil32(return_data.size) + 517 len 9 * ceil32(return_data.size)]
                                                    balanceOf[address(msg.sender)] -= arg2
                                                    if balanceOf[arg1] > !arg2:
                                                        revert with 'NH{q', 17
                                                    balanceOf[arg1] += arg2
                                                    emit Transfer(arg2, msg.sender, arg1);
                                                else:
                                                    if stor21[address(arg1)]:
                                                        if not msg.sender:
                                                            revert with 0, 
                                                                        'ERC20: transfer from the zero address',
                                                                        mem[(6 * ceil32(return_data.size)) + ceil32(return_data.size) + 517 len 9 * ceil32(return_data.size)]
                                                        if not arg1:
                                                            revert with 0, 
                                                                        'ERC20: transfer to the zero address',
                                                                        mem[(6 * ceil32(return_data.size)) + ceil32(return_data.size) + 517 len 9 * ceil32(return_data.size)]
                                                        if balanceOf[address(msg.sender)] < arg2:
                                                            revert with 0, 
                                                                        'ERC20: transfer amount exceeds balance',
                                                                        mem[(6 * ceil32(return_data.size)) + ceil32(return_data.size) + 517 len 9 * ceil32(return_data.size)]
                                                        balanceOf[address(msg.sender)] -= arg2
                                                        if balanceOf[arg1] > !arg2:
                                                            revert with 'NH{q', 17
                                                        balanceOf[arg1] += arg2
                                                        emit Transfer(arg2, msg.sender, arg1);
                                                    else:
                                                        if stor7:
                                                            if not msg.sender:
                                                                revert with 0, 
                                                                            'ERC20: transfer from the zero address',
                                                                            mem[(6 * ceil32(return_data.size)) + ceil32(return_data.size) + 517 len 9 * ceil32(return_data.size)]
                                                            if not arg1:
                                                                revert with 0, 
                                                                            'ERC20: transfer to the zero address',
                                                                            mem[(6 * ceil32(return_data.size)) + ceil32(return_data.size) + 517 len 9 * ceil32(return_data.size)]
                                                            if balanceOf[address(msg.sender)] < arg2:
                                                                revert with 0, 
                                                                            'ERC20: transfer amount exceeds balance',
                                                                            mem[(6 * ceil32(return_data.size)) + ceil32(return_data.size) + 517 len 9 * ceil32(return_data.size)]
                                                            balanceOf[address(msg.sender)] -= arg2
                                                            if balanceOf[arg1] > !arg2:
                                                                revert with 'NH{q', 17
                                                            balanceOf[arg1] += arg2
                                                            emit Transfer(arg2, msg.sender, arg1);
                                                        else:
                                                            if arg2 and totalFees > -1 / arg2:
                                                                revert with 'NH{q', 17
                                                            if not stor22[address(arg1)]:
                                                                if arg2 < arg2 * totalFees / 100:
                                                                    revert with 'NH{q', 17
                                                                if not msg.sender:
                                                                    revert with 0, 
                                                                                'ERC20: transfer from the zero address',
                                                                                mem[(6 * ceil32(return_data.size)) + ceil32(return_data.size) + 517 len 9 * ceil32(return_data.size)]
                                                                if not this.address:
                                                                    revert with 0, 
                                                                                'ERC20: transfer to the zero address',
                                                                                mem[(6 * ceil32(return_data.size)) + ceil32(return_data.size) + 517 len 9 * ceil32(return_data.size)]
                                                                if balanceOf[address(msg.sender)] < arg2 * totalFees / 100:
                                                                    revert with 0, 
                                                                                'ERC20: transfer amount exceeds balance',
                                                                                mem[(6 * ceil32(return_data.size)) + ceil32(return_data.size) + 517 len 9 * ceil32(return_data.size)]
                                                                balanceOf[address(msg.sender)] -= arg2 * totalFees / 100
                                                                if balanceOf[this.address] > !(arg2 * totalFees / 100):
                                                                    revert with 'NH{q', 17
                                                                balanceOf[this.address] += arg2 * totalFees / 100
                                                                emit Transfer((arg2 * totalFees / 100), msg.sender, this.address);
                                                                if not msg.sender:
                                                                    revert with 0, 
                                                                                'ERC20: transfer from the zero address',
                                                                                mem[(6 * ceil32(return_data.size)) + ceil32(return_data.size) + 517 len 9 * ceil32(return_data.size)]
                                                                if not arg1:
                                                                    revert with 0, 
                                                                                'ERC20: transfer to the zero address',
                                                                                mem[(6 * ceil32(return_data.size)) + ceil32(return_data.size) + 517 len 9 * ceil32(return_data.size)]
                                                                if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100):
                                                                    revert with 0, 
                                                                                'ERC20: transfer amount exceeds balance',
                                                                                mem[(6 * ceil32(return_data.size)) + ceil32(return_data.size) + 517 len 9 * ceil32(return_data.size)]
                                                                balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100)
                                                                if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100)):
                                                                    revert with 'NH{q', 17
                                                                balanceOf[arg1] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100)
                                                                emit Transfer((arg2 - (arg2 * totalFees / 100)), msg.sender, arg1);
                                                            else:
                                                                if arg2 and sellFeeIncreaseFactor > -1 / arg2:
                                                                    revert with 'NH{q', 17
                                                                if arg2 * totalFees / 100 > !(arg2 * sellFeeIncreaseFactor / 100):
                                                                    revert with 'NH{q', 17
                                                                if arg2 < (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100):
                                                                    revert with 'NH{q', 17
                                                                if not msg.sender:
                                                                    revert with 0, 
                                                                                'ERC20: transfer from the zero address',
                                                                                mem[(6 * ceil32(return_data.size)) + ceil32(return_data.size) + 517 len 9 * ceil32(return_data.size)]
                                                                if not this.address:
                                                                    revert with 0, 
                                                                                'ERC20: transfer to the zero address',
                                                                                mem[(6 * ceil32(return_data.size)) + ceil32(return_data.size) + 517 len 9 * ceil32(return_data.size)]
                                                                if balanceOf[address(msg.sender)] < (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100):
                                                                    revert with 0, 
                                                                                'ERC20: transfer amount exceeds balance',
                                                                                mem[(6 * ceil32(return_data.size)) + ceil32(return_data.size) + 517 len 9 * ceil32(return_data.size)]
                                                                balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)
                                                                if balanceOf[this.address] > !((arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)):
                                                                    revert with 'NH{q', 17
                                                                balanceOf[this.address] = balanceOf[this.address] + (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)
                                                                emit Transfer(((arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)), msg.sender, this.address);
                                                                if not msg.sender:
                                                                    revert with 0, 
                                                                                'ERC20: transfer from the zero address',
                                                                                mem[(6 * ceil32(return_data.size)) + ceil32(return_data.size) + 517 len 9 * ceil32(return_data.size)]
                                                                if not arg1:
                                                                    revert with 0, 
                                                                                'ERC20: transfer to the zero address',
                                                                                mem[(6 * ceil32(return_data.size)) + ceil32(return_data.size) + 517 len 9 * ceil32(return_data.size)]
                                                                if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100):
                                                                    revert with 0, 
                                                                                'ERC20: transfer amount exceeds balance',
                                                                                mem[(6 * ceil32(return_data.size)) + ceil32(return_data.size) + 517 len 9 * ceil32(return_data.size)]
                                                                balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)
                                                                if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)):
                                                                    revert with 'NH{q', 17
                                                                balanceOf[arg1] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)
                                                                emit Transfer((arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)), msg.sender, arg1);
                                                require ext_code.size(dividendTrackerAddress)
                                                call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args msg.sender, balanceOf[address(msg.sender)], mem[(6 * ceil32(return_data.size)) + ceil32(return_data.size) + 453 len 9 * ceil32(return_data.size)]
                                                require ext_code.size(dividendTrackerAddress)
                                                call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(arg1), balanceOf[address(arg1)], mem[(6 * ceil32(return_data.size)) + ceil32(return_data.size) + 453 len 9 * ceil32(return_data.size)]
                                                if not stor7:
                                                    call dividendTrackerAddress.process(uint256 arg1) with:
                                                         gas gas_remaining wei
                                                        args gasForProcessing
                                                    mem[(6 * ceil32(return_data.size)) + ceil32(return_data.size) + 385 len 96] = ext_call.return_data[0 len 96]
                                                    if ext_call.success:
                                                        require return_data.size >= 96
                                                        mem[(8 * ceil32(return_data.size)) + ceil32(return_data.size) + 385] = ext_call.return_data[0]
                                                        mem[(8 * ceil32(return_data.size)) + ceil32(return_data.size) + 417] = ext_call.return_data[32]
                                                        mem[(8 * ceil32(return_data.size)) + ceil32(return_data.size) + 449] = ext_call.return_data[64]
                                                        mem[(8 * ceil32(return_data.size)) + ceil32(return_data.size) + 481] = gasForProcessing
                                                        emit ProcessedDividendTracker(uint256 arg1, uint256 arg2, uint256 arg3, bool arg4, uint256 arg5, address arg6):
                                                                                      mem[(8 * ceil32(return_data.size)) + ceil32(return_data.size) + 385 len (13 * ceil32(return_data.size)) + 128],
                                                                                      1,
                                                                                      tx.origin,
                else:
                    if balanceOf[this.address] < swapTokensAtAmount:
                        if stor21[address(msg.sender)]:
                            if not msg.sender:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                            if not arg1:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                            if balanceOf[address(msg.sender)] < arg2:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                            balanceOf[address(msg.sender)] -= arg2
                            if balanceOf[arg1] > !arg2:
                                revert with 'NH{q', 17
                            balanceOf[arg1] += arg2
                            emit Transfer(arg2, msg.sender, arg1);
                        else:
                            if stor21[address(arg1)]:
                                if not msg.sender:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                if not arg1:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                if balanceOf[address(msg.sender)] < arg2:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                balanceOf[address(msg.sender)] -= arg2
                                if balanceOf[arg1] > !arg2:
                                    revert with 'NH{q', 17
                                balanceOf[arg1] += arg2
                                emit Transfer(arg2, msg.sender, arg1);
                            else:
                                if stor7:
                                    if not msg.sender:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                    if not arg1:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                    if balanceOf[address(msg.sender)] < arg2:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                    balanceOf[address(msg.sender)] -= arg2
                                    if balanceOf[arg1] > !arg2:
                                        revert with 'NH{q', 17
                                    balanceOf[arg1] += arg2
                                    emit Transfer(arg2, msg.sender, arg1);
                                else:
                                    if arg2 and totalFees > -1 / arg2:
                                        revert with 'NH{q', 17
                                    if not stor22[address(arg1)]:
                                        if arg2 < arg2 * totalFees / 100:
                                            revert with 'NH{q', 17
                                        if not msg.sender:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                        if not this.address:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                        if balanceOf[address(msg.sender)] < arg2 * totalFees / 100:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                        balanceOf[address(msg.sender)] -= arg2 * totalFees / 100
                                        if balanceOf[this.address] > !(arg2 * totalFees / 100):
                                            revert with 'NH{q', 17
                                        balanceOf[this.address] += arg2 * totalFees / 100
                                        emit Transfer((arg2 * totalFees / 100), msg.sender, this.address);
                                        if not msg.sender:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                        if not arg1:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                        if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100):
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                        balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100)
                                        if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100)):
                                            revert with 'NH{q', 17
                                        balanceOf[arg1] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100)
                                        emit Transfer((arg2 - (arg2 * totalFees / 100)), msg.sender, arg1);
                                    else:
                                        if arg2 and sellFeeIncreaseFactor > -1 / arg2:
                                            revert with 'NH{q', 17
                                        if arg2 * totalFees / 100 > !(arg2 * sellFeeIncreaseFactor / 100):
                                            revert with 'NH{q', 17
                                        if arg2 < (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100):
                                            revert with 'NH{q', 17
                                        if not msg.sender:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                        if not this.address:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                        if balanceOf[address(msg.sender)] < (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100):
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                        balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)
                                        if balanceOf[this.address] > !((arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)):
                                            revert with 'NH{q', 17
                                        balanceOf[this.address] = balanceOf[this.address] + (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)
                                        emit Transfer(((arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)), msg.sender, this.address);
                                        if not msg.sender:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                        if not arg1:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                        if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100):
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                        balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)
                                        if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)):
                                            revert with 'NH{q', 17
                                        balanceOf[arg1] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)
                                        emit Transfer((arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)), msg.sender, arg1);
                        require ext_code.size(dividendTrackerAddress)
                        call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                             gas gas_remaining wei
                            args msg.sender, balanceOf[address(msg.sender)]
                        require ext_code.size(dividendTrackerAddress)
                        call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                             gas gas_remaining wei
                            args address(arg1), balanceOf[address(arg1)]
                        if not stor7:
                            call dividendTrackerAddress.process(uint256 arg1) with:
                                 gas gas_remaining wei
                                args gasForProcessing
                            if ext_call.success:
                                require return_data.size >= 96
                                emit ProcessedDividendTracker(ext_call.return_data[0], ext_call.return_data[32], ext_call.return_data[64], gasForProcessing, 1, tx.origin);
                    else:
                        if stor7:
                            if stor21[address(msg.sender)]:
                                if not msg.sender:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                if not arg1:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                if balanceOf[address(msg.sender)] < arg2:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                balanceOf[address(msg.sender)] -= arg2
                                if balanceOf[arg1] > !arg2:
                                    revert with 'NH{q', 17
                                balanceOf[arg1] += arg2
                                emit Transfer(arg2, msg.sender, arg1);
                            else:
                                if stor21[address(arg1)]:
                                    if not msg.sender:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                    if not arg1:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                    if balanceOf[address(msg.sender)] < arg2:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                    balanceOf[address(msg.sender)] -= arg2
                                    if balanceOf[arg1] > !arg2:
                                        revert with 'NH{q', 17
                                    balanceOf[arg1] += arg2
                                    emit Transfer(arg2, msg.sender, arg1);
                                else:
                                    if stor7:
                                        if not msg.sender:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                        if not arg1:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                        if balanceOf[address(msg.sender)] < arg2:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                        balanceOf[address(msg.sender)] -= arg2
                                        if balanceOf[arg1] > !arg2:
                                            revert with 'NH{q', 17
                                        balanceOf[arg1] += arg2
                                        emit Transfer(arg2, msg.sender, arg1);
                                    else:
                                        if arg2 and totalFees > -1 / arg2:
                                            revert with 'NH{q', 17
                                        if not stor22[address(arg1)]:
                                            if arg2 < arg2 * totalFees / 100:
                                                revert with 'NH{q', 17
                                            if not msg.sender:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                            if not this.address:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                            if balanceOf[address(msg.sender)] < arg2 * totalFees / 100:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                            balanceOf[address(msg.sender)] -= arg2 * totalFees / 100
                                            if balanceOf[this.address] > !(arg2 * totalFees / 100):
                                                revert with 'NH{q', 17
                                            balanceOf[this.address] += arg2 * totalFees / 100
                                            emit Transfer((arg2 * totalFees / 100), msg.sender, this.address);
                                            if not msg.sender:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                            if not arg1:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                            if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100):
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                            balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100)
                                            if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100)):
                                                revert with 'NH{q', 17
                                            balanceOf[arg1] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100)
                                            emit Transfer((arg2 - (arg2 * totalFees / 100)), msg.sender, arg1);
                                        else:
                                            if arg2 and sellFeeIncreaseFactor > -1 / arg2:
                                                revert with 'NH{q', 17
                                            if arg2 * totalFees / 100 > !(arg2 * sellFeeIncreaseFactor / 100):
                                                revert with 'NH{q', 17
                                            if arg2 < (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100):
                                                revert with 'NH{q', 17
                                            if not msg.sender:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                            if not this.address:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                            if balanceOf[address(msg.sender)] < (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100):
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                            balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)
                                            if balanceOf[this.address] > !((arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)):
                                                revert with 'NH{q', 17
                                            balanceOf[this.address] = balanceOf[this.address] + (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)
                                            emit Transfer(((arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)), msg.sender, this.address);
                                            if not msg.sender:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                            if not arg1:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                            if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100):
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                            balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)
                                            if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)):
                                                revert with 'NH{q', 17
                                            balanceOf[arg1] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)
                                            emit Transfer((arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)), msg.sender, arg1);
                            require ext_code.size(dividendTrackerAddress)
                            call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                 gas gas_remaining wei
                                args msg.sender, balanceOf[address(msg.sender)]
                            require ext_code.size(dividendTrackerAddress)
                            call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                 gas gas_remaining wei
                                args address(arg1), balanceOf[address(arg1)]
                            if not stor7:
                                call dividendTrackerAddress.process(uint256 arg1) with:
                                     gas gas_remaining wei
                                    args gasForProcessing
                                if ext_call.success:
                                    require return_data.size >= 96
                                    emit ProcessedDividendTracker(ext_call.return_data[0], ext_call.return_data[32], ext_call.return_data[64], gasForProcessing, 1, tx.origin);
                        else:
                            if stor22[address(msg.sender)]:
                                if stor21[address(msg.sender)]:
                                    if not msg.sender:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                    if not arg1:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                    if balanceOf[address(msg.sender)] < arg2:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                    balanceOf[address(msg.sender)] -= arg2
                                    if balanceOf[arg1] > !arg2:
                                        revert with 'NH{q', 17
                                    balanceOf[arg1] += arg2
                                    emit Transfer(arg2, msg.sender, arg1);
                                else:
                                    if stor21[address(arg1)]:
                                        if not msg.sender:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                        if not arg1:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                        if balanceOf[address(msg.sender)] < arg2:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                        balanceOf[address(msg.sender)] -= arg2
                                        if balanceOf[arg1] > !arg2:
                                            revert with 'NH{q', 17
                                        balanceOf[arg1] += arg2
                                        emit Transfer(arg2, msg.sender, arg1);
                                    else:
                                        if stor7:
                                            if not msg.sender:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                            if not arg1:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                            if balanceOf[address(msg.sender)] < arg2:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                            balanceOf[address(msg.sender)] -= arg2
                                            if balanceOf[arg1] > !arg2:
                                                revert with 'NH{q', 17
                                            balanceOf[arg1] += arg2
                                            emit Transfer(arg2, msg.sender, arg1);
                                        else:
                                            if arg2 and totalFees > -1 / arg2:
                                                revert with 'NH{q', 17
                                            if not stor22[address(arg1)]:
                                                if arg2 < arg2 * totalFees / 100:
                                                    revert with 'NH{q', 17
                                                if not msg.sender:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                if not this.address:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                if balanceOf[address(msg.sender)] < arg2 * totalFees / 100:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                balanceOf[address(msg.sender)] -= arg2 * totalFees / 100
                                                if balanceOf[this.address] > !(arg2 * totalFees / 100):
                                                    revert with 'NH{q', 17
                                                balanceOf[this.address] += arg2 * totalFees / 100
                                                emit Transfer((arg2 * totalFees / 100), msg.sender, this.address);
                                                if not msg.sender:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                if not arg1:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100):
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100)
                                                if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100)):
                                                    revert with 'NH{q', 17
                                                balanceOf[arg1] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100)
                                                emit Transfer((arg2 - (arg2 * totalFees / 100)), msg.sender, arg1);
                                            else:
                                                if arg2 and sellFeeIncreaseFactor > -1 / arg2:
                                                    revert with 'NH{q', 17
                                                if arg2 * totalFees / 100 > !(arg2 * sellFeeIncreaseFactor / 100):
                                                    revert with 'NH{q', 17
                                                if arg2 < (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100):
                                                    revert with 'NH{q', 17
                                                if not msg.sender:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                if not this.address:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                if balanceOf[address(msg.sender)] < (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100):
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)
                                                if balanceOf[this.address] > !((arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)):
                                                    revert with 'NH{q', 17
                                                balanceOf[this.address] = balanceOf[this.address] + (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)
                                                emit Transfer(((arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)), msg.sender, this.address);
                                                if not msg.sender:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                if not arg1:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100):
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)
                                                if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)):
                                                    revert with 'NH{q', 17
                                                balanceOf[arg1] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)
                                                emit Transfer((arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)), msg.sender, arg1);
                                require ext_code.size(dividendTrackerAddress)
                                call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                     gas gas_remaining wei
                                    args msg.sender, balanceOf[address(msg.sender)]
                                require ext_code.size(dividendTrackerAddress)
                                call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                     gas gas_remaining wei
                                    args address(arg1), balanceOf[address(arg1)]
                                if not stor7:
                                    call dividendTrackerAddress.process(uint256 arg1) with:
                                         gas gas_remaining wei
                                        args gasForProcessing
                                    if ext_call.success:
                                        require return_data.size >= 96
                                        emit ProcessedDividendTracker(ext_call.return_data[0], ext_call.return_data[32], ext_call.return_data[64], gasForProcessing, 1, tx.origin);
                            else:
                                if owner == msg.sender:
                                    if stor21[address(msg.sender)]:
                                        if not msg.sender:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                        if not arg1:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                        if balanceOf[address(msg.sender)] < arg2:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                        balanceOf[address(msg.sender)] -= arg2
                                        if balanceOf[arg1] > !arg2:
                                            revert with 'NH{q', 17
                                        balanceOf[arg1] += arg2
                                        emit Transfer(arg2, msg.sender, arg1);
                                    else:
                                        if stor21[address(arg1)]:
                                            if not msg.sender:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                            if not arg1:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                            if balanceOf[address(msg.sender)] < arg2:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                            balanceOf[address(msg.sender)] -= arg2
                                            if balanceOf[arg1] > !arg2:
                                                revert with 'NH{q', 17
                                            balanceOf[arg1] += arg2
                                            emit Transfer(arg2, msg.sender, arg1);
                                        else:
                                            if stor7:
                                                if not msg.sender:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                if not arg1:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                if balanceOf[address(msg.sender)] < arg2:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                balanceOf[address(msg.sender)] -= arg2
                                                if balanceOf[arg1] > !arg2:
                                                    revert with 'NH{q', 17
                                                balanceOf[arg1] += arg2
                                                emit Transfer(arg2, msg.sender, arg1);
                                            else:
                                                if arg2 and totalFees > -1 / arg2:
                                                    revert with 'NH{q', 17
                                                if not stor22[address(arg1)]:
                                                    if arg2 < arg2 * totalFees / 100:
                                                        revert with 'NH{q', 17
                                                    if not msg.sender:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                    if not this.address:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                    if balanceOf[address(msg.sender)] < arg2 * totalFees / 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                    balanceOf[address(msg.sender)] -= arg2 * totalFees / 100
                                                    if balanceOf[this.address] > !(arg2 * totalFees / 100):
                                                        revert with 'NH{q', 17
                                                    balanceOf[this.address] += arg2 * totalFees / 100
                                                    emit Transfer((arg2 * totalFees / 100), msg.sender, this.address);
                                                    if not msg.sender:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                    if not arg1:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                    if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100):
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                    balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100)
                                                    if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100)):
                                                        revert with 'NH{q', 17
                                                    balanceOf[arg1] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100)
                                                    emit Transfer((arg2 - (arg2 * totalFees / 100)), msg.sender, arg1);
                                                else:
                                                    if arg2 and sellFeeIncreaseFactor > -1 / arg2:
                                                        revert with 'NH{q', 17
                                                    if arg2 * totalFees / 100 > !(arg2 * sellFeeIncreaseFactor / 100):
                                                        revert with 'NH{q', 17
                                                    if arg2 < (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100):
                                                        revert with 'NH{q', 17
                                                    if not msg.sender:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                    if not this.address:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                    if balanceOf[address(msg.sender)] < (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100):
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                    balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)
                                                    if balanceOf[this.address] > !((arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)):
                                                        revert with 'NH{q', 17
                                                    balanceOf[this.address] = balanceOf[this.address] + (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)
                                                    emit Transfer(((arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)), msg.sender, this.address);
                                                    if not msg.sender:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                    if not arg1:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                    if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100):
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                    balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)
                                                    if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)):
                                                        revert with 'NH{q', 17
                                                    balanceOf[arg1] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)
                                                    emit Transfer((arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)), msg.sender, arg1);
                                    require ext_code.size(dividendTrackerAddress)
                                    call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                         gas gas_remaining wei
                                        args msg.sender, balanceOf[address(msg.sender)]
                                    require ext_code.size(dividendTrackerAddress)
                                    call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                         gas gas_remaining wei
                                        args address(arg1), balanceOf[address(arg1)]
                                    if not stor7:
                                        call dividendTrackerAddress.process(uint256 arg1) with:
                                             gas gas_remaining wei
                                            args gasForProcessing
                                        if ext_call.success:
                                            require return_data.size >= 96
                                            emit ProcessedDividendTracker(ext_call.return_data[0], ext_call.return_data[32], ext_call.return_data[64], gasForProcessing, 1, tx.origin);
                                else:
                                    if owner == arg1:
                                        if stor21[address(msg.sender)]:
                                            if not msg.sender:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                            if not arg1:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                            if balanceOf[address(msg.sender)] < arg2:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                            balanceOf[address(msg.sender)] -= arg2
                                            if balanceOf[arg1] > !arg2:
                                                revert with 'NH{q', 17
                                            balanceOf[arg1] += arg2
                                            emit Transfer(arg2, msg.sender, arg1);
                                        else:
                                            if stor21[address(arg1)]:
                                                if not msg.sender:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                if not arg1:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                if balanceOf[address(msg.sender)] < arg2:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                balanceOf[address(msg.sender)] -= arg2
                                                if balanceOf[arg1] > !arg2:
                                                    revert with 'NH{q', 17
                                                balanceOf[arg1] += arg2
                                                emit Transfer(arg2, msg.sender, arg1);
                                            else:
                                                if stor7:
                                                    if not msg.sender:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                    if not arg1:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                    if balanceOf[address(msg.sender)] < arg2:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                    balanceOf[address(msg.sender)] -= arg2
                                                    if balanceOf[arg1] > !arg2:
                                                        revert with 'NH{q', 17
                                                    balanceOf[arg1] += arg2
                                                    emit Transfer(arg2, msg.sender, arg1);
                                                else:
                                                    if arg2 and totalFees > -1 / arg2:
                                                        revert with 'NH{q', 17
                                                    if not stor22[address(arg1)]:
                                                        if arg2 < arg2 * totalFees / 100:
                                                            revert with 'NH{q', 17
                                                        if not msg.sender:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                        if not this.address:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                        if balanceOf[address(msg.sender)] < arg2 * totalFees / 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                        balanceOf[address(msg.sender)] -= arg2 * totalFees / 100
                                                        if balanceOf[this.address] > !(arg2 * totalFees / 100):
                                                            revert with 'NH{q', 17
                                                        balanceOf[this.address] += arg2 * totalFees / 100
                                                        emit Transfer((arg2 * totalFees / 100), msg.sender, this.address);
                                                        if not msg.sender:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                        if not arg1:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                        if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100):
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                        balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100)
                                                        if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100)):
                                                            revert with 'NH{q', 17
                                                        balanceOf[arg1] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100)
                                                        emit Transfer((arg2 - (arg2 * totalFees / 100)), msg.sender, arg1);
                                                    else:
                                                        if arg2 and sellFeeIncreaseFactor > -1 / arg2:
                                                            revert with 'NH{q', 17
                                                        if arg2 * totalFees / 100 > !(arg2 * sellFeeIncreaseFactor / 100):
                                                            revert with 'NH{q', 17
                                                        if arg2 < (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100):
                                                            revert with 'NH{q', 17
                                                        if not msg.sender:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                        if not this.address:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                        if balanceOf[address(msg.sender)] < (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100):
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                        balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)
                                                        if balanceOf[this.address] > !((arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)):
                                                            revert with 'NH{q', 17
                                                        balanceOf[this.address] = balanceOf[this.address] + (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)
                                                        emit Transfer(((arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)), msg.sender, this.address);
                                                        if not msg.sender:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                        if not arg1:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                        if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100):
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                        balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)
                                                        if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)):
                                                            revert with 'NH{q', 17
                                                        balanceOf[arg1] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)
                                                        emit Transfer((arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)), msg.sender, arg1);
                                        require ext_code.size(dividendTrackerAddress)
                                        call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                             gas gas_remaining wei
                                            args msg.sender, balanceOf[address(msg.sender)]
                                        require ext_code.size(dividendTrackerAddress)
                                        call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                             gas gas_remaining wei
                                            args address(arg1), balanceOf[address(arg1)]
                                        if not stor7:
                                            call dividendTrackerAddress.process(uint256 arg1) with:
                                                 gas gas_remaining wei
                                                args gasForProcessing
                                            if ext_call.success:
                                                require return_data.size >= 96
                                                emit ProcessedDividendTracker(ext_call.return_data[0], ext_call.return_data[32], ext_call.return_data[64], gasForProcessing, 1, tx.origin);
                                    else:
                                        stor7 = 1
                                        if balanceOf[this.address] and marketingFee > -1 / balanceOf[this.address]:
                                            revert with 'NH{q', 17
                                        if not totalFees:
                                            revert with 'NH{q', 18
                                        mem[96] = 2
                                        mem[128] = this.address
                                        staticcall uniswapV2RouterAddress.WETH() with:
                                                gas gas_remaining wei
                                        mem[192] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                        mem[160] = ext_call.return_data[12 len 20]
                                        if not this.address:
                                            revert with 0, 'ERC20: approve from the zero address'
                                        if not uniswapV2RouterAddress:
                                            revert with 0, 'ERC20: approve to the zero address'
                                        allowance[address(this.address)][stor6].field_0 = balanceOf[this.address] * marketingFee / totalFees
                                        emit Approval((balanceOf[this.address] * marketingFee / totalFees), this.address, uniswapV2RouterAddress);
                                        mem[ceil32(return_data.size) + 192] = 0x791ac94700000000000000000000000000000000000000000000000000000000
                                        mem[ceil32(return_data.size) + 196] = balanceOf[this.address] * marketingFee / totalFees
                                        mem[ceil32(return_data.size) + 356] = 2
                                        idx = 0
                                        s = ceil32(return_data.size) + 388
                                        t = 128
                                        while idx < 2:
                                            mem[s] = mem[t + 12 len 20]
                                            idx = idx + 1
                                            s = s + 32
                                            t = t + 32
                                            continue 
                                        mem[ceil32(return_data.size) + 292] = this.address
                                        mem[ceil32(return_data.size) + 324] = block.timestamp
                                        require ext_code.size(uniswapV2RouterAddress)
                                        call uniswapV2RouterAddress.swapExactTokensForETHSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args balanceOf[this.address] * marketingFee / totalFees, 0, 160, address(this.address), block.timestamp, 2, mem[ceil32(return_data.size) + 388 len 64]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        call _marketingWalletAddress with:
                                           value eth.balance(this.address) wei
                                             gas 2300 * is_zero(value) wei
                                        if balanceOf[this.address] and liquidityFee > -1 / balanceOf[this.address]:
                                            revert with 'NH{q', 17
                                        if not totalFees:
                                            revert with 'NH{q', 18
                                        if balanceOf[this.address] * liquidityFee / totalFees < balanceOf[this.address] * liquidityFee / totalFees / 2:
                                            revert with 'NH{q', 17
                                        mem[ceil32(return_data.size) + 192] = 2
                                        mem[ceil32(return_data.size) + 224] = this.address
                                        staticcall uniswapV2RouterAddress.WETH() with:
                                                gas gas_remaining wei
                                        mem[ceil32(return_data.size) + 288] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                        mem[ceil32(return_data.size) + 256] = ext_call.return_data[12 len 20]
                                        if not this.address:
                                            revert with 0, 'ERC20: approve from the zero address'
                                        if not uniswapV2RouterAddress:
                                            revert with 0, 'ERC20: approve to the zero address'
                                        allowance[address(this.address)][stor6].field_0 = balanceOf[this.address] * liquidityFee / totalFees / 2
                                        allowance[address(this.address)][stor6].field_255 = 0
                                        emit Approval((balanceOf[this.address] * liquidityFee / totalFees / 2), this.address, uniswapV2RouterAddress);
                                        mem[(2 * ceil32(return_data.size)) + 288] = 0x791ac94700000000000000000000000000000000000000000000000000000000
                                        mem[(2 * ceil32(return_data.size)) + 292] = balanceOf[this.address] * liquidityFee / totalFees / 2
                                        mem[(2 * ceil32(return_data.size)) + 324] = 0
                                        mem[(2 * ceil32(return_data.size)) + 356] = 160
                                        mem[(2 * ceil32(return_data.size)) + 452] = 2
                                        idx = 0
                                        s = (2 * ceil32(return_data.size)) + 484
                                        t = ceil32(return_data.size) + 224
                                        while idx < mem[ceil32(return_data.size) + 192]:
                                            mem[s] = mem[t + 12 len 20]
                                            idx = idx + 1
                                            s = s + 32
                                            t = t + 32
                                            continue 
                                        mem[(2 * ceil32(return_data.size)) + 388] = this.address
                                        mem[(2 * ceil32(return_data.size)) + 420] = block.timestamp
                                        require ext_code.size(uniswapV2RouterAddress)
                                        call uniswapV2RouterAddress.swapExactTokensForETHSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args Mask(255, 1, balanceOf[this.address] * liquidityFee / totalFees), 0, 160, address(this.address), block.timestamp, mem[(2 * ceil32(return_data.size)) + 452 len (32 * mem[ceil32(return_data.size) + 192]) + 32]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        if eth.balance(this.address) < eth.balance(this.address):
                                            revert with 'NH{q', 17
                                        if not this.address:
                                            revert with 0, 'ERC20: approve from the zero address'
                                        if not uniswapV2RouterAddress:
                                            revert with 0, 'ERC20: approve to the zero address'
                                        allowance[address(this.address)][stor6].field_0 = (balanceOf[this.address] * liquidityFee / totalFees) - (balanceOf[this.address] * liquidityFee / totalFees / 2)
                                        emit Approval(((balanceOf[this.address] * liquidityFee / totalFees) - (balanceOf[this.address] * liquidityFee / totalFees / 2)), this.address, uniswapV2RouterAddress);
                                        mem[(2 * ceil32(return_data.size)) + 292] = this.address
                                        mem[(2 * ceil32(return_data.size)) + 324] = (balanceOf[this.address] * liquidityFee / totalFees) - (balanceOf[this.address] * liquidityFee / totalFees / 2)
                                        mem[(2 * ceil32(return_data.size)) + 356] = 0
                                        mem[(2 * ceil32(return_data.size)) + 388] = 0
                                        mem[(2 * ceil32(return_data.size)) + 420] = 0
                                        mem[(2 * ceil32(return_data.size)) + 452] = block.timestamp
                                        call uniswapV2RouterAddress.addLiquidityETH(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                             gas gas_remaining wei
                                            args this.address, (balanceOf[this.address] * liquidityFee / totalFees) - (balanceOf[this.address] * liquidityFee / totalFees / 2), 0, 0, 0, block.timestamp
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 96
                                        emit SwapAndLiquify(Mask(255, 1, balanceOf[this.address] * liquidityFee / totalFees), 0, (balanceOf[this.address] * liquidityFee / totalFees) - (balanceOf[this.address] * liquidityFee / totalFees / 2));
                                        mem[(4 * ceil32(return_data.size)) + 288] = 2
                                        mem[(4 * ceil32(return_data.size)) + 320] = this.address
                                        staticcall uniswapV2RouterAddress.WETH() with:
                                                gas gas_remaining wei
                                        mem[(4 * ceil32(return_data.size)) + 384] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[64] = (6 * ceil32(return_data.size)) + 384
                                        require return_data.size >= 32
                                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                        mem[(4 * ceil32(return_data.size)) + 352] = ext_call.return_data[12 len 20]
                                        if not this.address:
                                            revert with 0, 'ERC20: approve from the zero address'
                                        if not uniswapV2RouterAddress:
                                            revert with 0, 'ERC20: approve to the zero address'
                                        mem[0] = uniswapV2RouterAddress
                                        mem[32] = sha3(address(this.address), 1)
                                        allowance[address(this.address)][stor6].field_0 = balanceOf[this.address]
                                        emit Approval(balanceOf[this.address], this.address, uniswapV2RouterAddress);
                                        mem[(6 * ceil32(return_data.size)) + 384] = 0x791ac94700000000000000000000000000000000000000000000000000000000
                                        mem[(6 * ceil32(return_data.size)) + 388] = balanceOf[this.address]
                                        mem[(6 * ceil32(return_data.size)) + 420] = 0
                                        mem[(6 * ceil32(return_data.size)) + 452] = 160
                                        mem[(6 * ceil32(return_data.size)) + 548] = 2
                                        idx = 0
                                        s = (6 * ceil32(return_data.size)) + 580
                                        t = (4 * ceil32(return_data.size)) + 320
                                        while idx < mem[(4 * ceil32(return_data.size)) + 288]:
                                            mem[s] = mem[t + 12 len 20]
                                            idx = idx + 1
                                            s = s + 32
                                            t = t + 32
                                            continue 
                                        mem[(6 * ceil32(return_data.size)) + 484] = this.address
                                        mem[(6 * ceil32(return_data.size)) + 516] = block.timestamp
                                        require ext_code.size(uniswapV2RouterAddress)
                                        call uniswapV2RouterAddress.mem[mem[64] len 4] with:
                                             gas gas_remaining wei
                                            args mem[mem[64] + 4 len (6 * ceil32(return_data.size)) + (32 * mem[(4 * ceil32(return_data.size)) + 288]) + -mem[64] + 576]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        call dividendTrackerAddress with:
                                           value eth.balance(this.address) wei
                                             gas gas_remaining wei
                                        if not return_data.size:
                                            if not ext_call.success:
                                                stor7 = 0
                                                if stor21[address(msg.sender)]:
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if not arg1:
                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                    if balanceOf[address(msg.sender)] < arg2:
                                                        revert with 0, 'ERC20: transfer amount exceeds balance'
                                                    balanceOf[address(msg.sender)] -= arg2
                                                    if balanceOf[arg1] > !arg2:
                                                        revert with 'NH{q', 17
                                                    balanceOf[arg1] += arg2
                                                    emit Transfer(arg2, msg.sender, arg1);
                                                    require ext_code.size(dividendTrackerAddress)
                                                    call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args msg.sender, balanceOf[address(msg.sender)]
                                                    mem[0] = arg1
                                                    mem[32] = 0
                                                    require ext_code.size(dividendTrackerAddress)
                                                    call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args address(arg1), balanceOf[address(arg1)]
                                                    if not ext_call.success:
                                                        if not ext_call.success:
                                                            if not stor7:
                                                                call dividendTrackerAddress.process(uint256 arg1) with:
                                                                     gas gas_remaining wei
                                                                    args gasForProcessing
                                                                mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                if ext_call.success:
                                                                    _83259 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 96
                                                                    _84449 = mem[_83259 + 32]
                                                                    _84450 = mem[_83259 + 64]
                                                                    mem[mem[64]] = mem[_83259]
                                                                    mem[mem[64] + 64] = _84450
                                                                    mem[mem[64] + 96] = gasForProcessing
                                                                    emit ProcessedDividendTracker(mem[mem[64]], _84449, _84450, gasForProcessing, 1, tx.origin);
                                                        else:
                                                            if not stor7:
                                                                call dividendTrackerAddress.process(uint256 arg1) with:
                                                                     gas gas_remaining wei
                                                                    args gasForProcessing
                                                                mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                if ext_call.success:
                                                                    _83716 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 96
                                                                    _85439 = mem[_83716 + 32]
                                                                    _85440 = mem[_83716 + 64]
                                                                    mem[mem[64]] = mem[_83716]
                                                                    mem[mem[64] + 64] = _85440
                                                                    mem[mem[64] + 96] = gasForProcessing
                                                                    emit ProcessedDividendTracker(mem[mem[64]], _85439, _85440, gasForProcessing, 1, tx.origin);
                                                    else:
                                                        if not ext_call.success:
                                                            if not stor7:
                                                                call dividendTrackerAddress.process(uint256 arg1) with:
                                                                     gas gas_remaining wei
                                                                    args gasForProcessing
                                                                mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                if ext_call.success:
                                                                    _83717 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 96
                                                                    _85443 = mem[_83717 + 32]
                                                                    _85444 = mem[_83717 + 64]
                                                                    mem[mem[64]] = mem[_83717]
                                                                    mem[mem[64] + 64] = _85444
                                                                    mem[mem[64] + 96] = gasForProcessing
                                                                    emit ProcessedDividendTracker(mem[mem[64]], _85443, _85444, gasForProcessing, 1, tx.origin);
                                                        else:
                                                            if not stor7:
                                                                call dividendTrackerAddress.process(uint256 arg1) with:
                                                                     gas gas_remaining wei
                                                                    args gasForProcessing
                                                                mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                if ext_call.success:
                                                                    _84453 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 96
                                                                    _86652 = mem[_84453 + 32]
                                                                    _86653 = mem[_84453 + 64]
                                                                    mem[mem[64]] = mem[_84453]
                                                                    mem[mem[64] + 64] = _86653
                                                                    mem[mem[64] + 96] = gasForProcessing
                                                                    emit ProcessedDividendTracker(mem[mem[64]], _86652, _86653, gasForProcessing, 1, tx.origin);
                                                else:
                                                    if stor21[address(arg1)]:
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if not arg1:
                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                        if balanceOf[address(msg.sender)] < arg2:
                                                            revert with 0, 'ERC20: transfer amount exceeds balance'
                                                        balanceOf[address(msg.sender)] -= arg2
                                                        if balanceOf[arg1] > !arg2:
                                                            revert with 'NH{q', 17
                                                        balanceOf[arg1] += arg2
                                                        emit Transfer(arg2, msg.sender, arg1);
                                                        require ext_code.size(dividendTrackerAddress)
                                                        call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                             gas gas_remaining wei
                                                            args msg.sender, balanceOf[address(msg.sender)]
                                                        mem[0] = arg1
                                                        mem[32] = 0
                                                        require ext_code.size(dividendTrackerAddress)
                                                        call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                             gas gas_remaining wei
                                                            args address(arg1), balanceOf[address(arg1)]
                                                        if not ext_call.success:
                                                            if not ext_call.success:
                                                                if not stor7:
                                                                    call dividendTrackerAddress.process(uint256 arg1) with:
                                                                         gas gas_remaining wei
                                                                        args gasForProcessing
                                                                    mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                    if ext_call.success:
                                                                        _83726 = mem[64]
                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                        require return_data.size >= 96
                                                                        _85461 = mem[_83726 + 32]
                                                                        _85462 = mem[_83726 + 64]
                                                                        mem[mem[64]] = mem[_83726]
                                                                        mem[mem[64] + 64] = _85462
                                                                        mem[mem[64] + 96] = gasForProcessing
                                                                        emit ProcessedDividendTracker(mem[mem[64]], _85461, _85462, gasForProcessing, 1, tx.origin);
                                                            else:
                                                                if not stor7:
                                                                    call dividendTrackerAddress.process(uint256 arg1) with:
                                                                         gas gas_remaining wei
                                                                        args gasForProcessing
                                                                    mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                    if ext_call.success:
                                                                        _84465 = mem[64]
                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                        require return_data.size >= 96
                                                                        _86662 = mem[_84465 + 32]
                                                                        _86663 = mem[_84465 + 64]
                                                                        mem[mem[64]] = mem[_84465]
                                                                        mem[mem[64] + 64] = _86663
                                                                        mem[mem[64] + 96] = gasForProcessing
                                                                        emit ProcessedDividendTracker(mem[mem[64]], _86662, _86663, gasForProcessing, 1, tx.origin);
                                                        else:
                                                            if not ext_call.success:
                                                                if not stor7:
                                                                    call dividendTrackerAddress.process(uint256 arg1) with:
                                                                         gas gas_remaining wei
                                                                        args gasForProcessing
                                                                    mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                    if ext_call.success:
                                                                        _84466 = mem[64]
                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                        require return_data.size >= 96
                                                                        _86666 = mem[_84466 + 32]
                                                                        _86667 = mem[_84466 + 64]
                                                                        mem[mem[64]] = mem[_84466]
                                                                        mem[mem[64] + 64] = _86667
                                                                        mem[mem[64] + 96] = gasForProcessing
                                                                        emit ProcessedDividendTracker(mem[mem[64]], _86666, _86667, gasForProcessing, 1, tx.origin);
                                                            else:
                                                                if not stor7:
                                                                    call dividendTrackerAddress.process(uint256 arg1) with:
                                                                         gas gas_remaining wei
                                                                        args gasForProcessing
                                                                    mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                    if ext_call.success:
                                                                        _85465 = mem[64]
                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                        require return_data.size >= 96
                                                                        _87754 = mem[_85465 + 32]
                                                                        _87755 = mem[_85465 + 64]
                                                                        mem[mem[64]] = mem[_85465]
                                                                        mem[mem[64] + 64] = _87755
                                                                        mem[mem[64] + 96] = gasForProcessing
                                                                        emit ProcessedDividendTracker(mem[mem[64]], _87754, _87755, gasForProcessing, 1, tx.origin);
                                                    else:
                                                        if stor7:
                                                            if not msg.sender:
                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                            if not arg1:
                                                                revert with 0, 'ERC20: transfer to the zero address'
                                                            if balanceOf[address(msg.sender)] < arg2:
                                                                revert with 0, 'ERC20: transfer amount exceeds balance'
                                                            balanceOf[address(msg.sender)] -= arg2
                                                            if balanceOf[arg1] > !arg2:
                                                                revert with 'NH{q', 17
                                                            balanceOf[arg1] += arg2
                                                            emit Transfer(arg2, msg.sender, arg1);
                                                            require ext_code.size(dividendTrackerAddress)
                                                            call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                                 gas gas_remaining wei
                                                                args msg.sender, balanceOf[address(msg.sender)]
                                                            mem[0] = arg1
                                                            mem[32] = 0
                                                            require ext_code.size(dividendTrackerAddress)
                                                            call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                                 gas gas_remaining wei
                                                                args address(arg1), balanceOf[address(arg1)]
                                                            if not ext_call.success:
                                                                if not ext_call.success:
                                                                    if not stor7:
                                                                        call dividendTrackerAddress.process(uint256 arg1) with:
                                                                             gas gas_remaining wei
                                                                            args gasForProcessing
                                                                        mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                        if ext_call.success:
                                                                            _83264 = mem[64]
                                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                                            require return_data.size >= 96
                                                                            _84456 = mem[_83264 + 32]
                                                                            _84457 = mem[_83264 + 64]
                                                                            mem[mem[64]] = mem[_83264]
                                                                            mem[mem[64] + 64] = _84457
                                                                            mem[mem[64] + 96] = gasForProcessing
                                                                            emit ProcessedDividendTracker(mem[mem[64]], _84456, _84457, gasForProcessing, 1, tx.origin);
                                                                else:
                                                                    if not stor7:
                                                                        call dividendTrackerAddress.process(uint256 arg1) with:
                                                                             gas gas_remaining wei
                                                                            args gasForProcessing
                                                                        mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                        if ext_call.success:
                                                                            _83721 = mem[64]
                                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                                            require return_data.size >= 96
                                                                            _85448 = mem[_83721 + 32]
                                                                            _85449 = mem[_83721 + 64]
                                                                            mem[mem[64]] = mem[_83721]
                                                                            mem[mem[64] + 64] = _85449
                                                                            mem[mem[64] + 96] = gasForProcessing
                                                                            emit ProcessedDividendTracker(mem[mem[64]], _85448, _85449, gasForProcessing, 1, tx.origin);
                                                            else:
                                                                if not ext_call.success:
                                                                    if not stor7:
                                                                        call dividendTrackerAddress.process(uint256 arg1) with:
                                                                             gas gas_remaining wei
                                                                            args gasForProcessing
                                                                        mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                        if ext_call.success:
                                                                            _83722 = mem[64]
                                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                                            require return_data.size >= 96
                                                                            _85452 = mem[_83722 + 32]
                                                                            _85453 = mem[_83722 + 64]
                                                                            mem[mem[64]] = mem[_83722]
                                                                            mem[mem[64] + 64] = _85453
                                                                            mem[mem[64] + 96] = gasForProcessing
                                                                            emit ProcessedDividendTracker(mem[mem[64]], _85452, _85453, gasForProcessing, 1, tx.origin);
                                                                else:
                                                                    if not stor7:
                                                                        call dividendTrackerAddress.process(uint256 arg1) with:
                                                                             gas gas_remaining wei
                                                                            args gasForProcessing
                                                                        mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                        if ext_call.success:
                                                                            _84460 = mem[64]
                                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                                            require return_data.size >= 96
                                                                            _86657 = mem[_84460 + 32]
                                                                            _86658 = mem[_84460 + 64]
                                                                            mem[mem[64]] = mem[_84460]
                                                                            mem[mem[64] + 64] = _86658
                                                                            mem[mem[64] + 96] = gasForProcessing
                                                                            emit ProcessedDividendTracker(mem[mem[64]], _86657, _86658, gasForProcessing, 1, tx.origin);
                                                        else:
                                                            if arg2 and totalFees > -1 / arg2:
                                                                revert with 'NH{q', 17
                                                            if not stor22[address(arg1)]:
                                                                if arg2 < arg2 * totalFees / 100:
                                                                    revert with 'NH{q', 17
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                if not this.address:
                                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                                if balanceOf[address(msg.sender)] < arg2 * totalFees / 100:
                                                                    revert with 0, 'ERC20: transfer amount exceeds balance'
                                                                balanceOf[address(msg.sender)] -= arg2 * totalFees / 100
                                                                if balanceOf[this.address] > !(arg2 * totalFees / 100):
                                                                    revert with 'NH{q', 17
                                                                balanceOf[this.address] += arg2 * totalFees / 100
                                                                emit Transfer((arg2 * totalFees / 100), msg.sender, this.address);
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                if not arg1:
                                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                                if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100):
                                                                    revert with 0, 'ERC20: transfer amount exceeds balance'
                                                                balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100)
                                                                if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100)):
                                                                    revert with 'NH{q', 17
                                                                balanceOf[arg1] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100)
                                                                emit Transfer((arg2 - (arg2 * totalFees / 100)), msg.sender, arg1);
                                                                require ext_code.size(dividendTrackerAddress)
                                                                call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                                     gas gas_remaining wei
                                                                    args msg.sender, balanceOf[address(msg.sender)]
                                                                mem[0] = arg1
                                                                mem[32] = 0
                                                                require ext_code.size(dividendTrackerAddress)
                                                                call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                                     gas gas_remaining wei
                                                                    args address(arg1), balanceOf[address(arg1)]
                                                                if not ext_call.success:
                                                                    if not ext_call.success:
                                                                        if not stor7:
                                                                            call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                 gas gas_remaining wei
                                                                                args gasForProcessing
                                                                            mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                            if ext_call.success:
                                                                                _93285 = mem[64]
                                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                                require return_data.size >= 96
                                                                                _93995 = mem[_93285 + 32]
                                                                                _93996 = mem[_93285 + 64]
                                                                                mem[mem[64]] = mem[_93285]
                                                                                mem[mem[64] + 64] = _93996
                                                                                mem[mem[64] + 96] = gasForProcessing
                                                                                emit ProcessedDividendTracker(mem[mem[64]], _93995, _93996, gasForProcessing, 1, tx.origin);
                                                                    else:
                                                                        if not stor7:
                                                                            call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                 gas gas_remaining wei
                                                                                args gasForProcessing
                                                                            mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                            if ext_call.success:
                                                                                _93586 = mem[64]
                                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                                require return_data.size >= 96
                                                                                _94403 = mem[_93586 + 32]
                                                                                _94404 = mem[_93586 + 64]
                                                                                mem[mem[64]] = mem[_93586]
                                                                                mem[mem[64] + 64] = _94404
                                                                                mem[mem[64] + 96] = gasForProcessing
                                                                                emit ProcessedDividendTracker(mem[mem[64]], _94403, _94404, gasForProcessing, 1, tx.origin);
                                                                else:
                                                                    if not ext_call.success:
                                                                        if not stor7:
                                                                            call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                 gas gas_remaining wei
                                                                                args gasForProcessing
                                                                            mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                            if ext_call.success:
                                                                                _93587 = mem[64]
                                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                                require return_data.size >= 96
                                                                                _94407 = mem[_93587 + 32]
                                                                                _94408 = mem[_93587 + 64]
                                                                                mem[mem[64]] = mem[_93587]
                                                                                mem[mem[64] + 64] = _94408
                                                                                mem[mem[64] + 96] = gasForProcessing
                                                                                emit ProcessedDividendTracker(mem[mem[64]], _94407, _94408, gasForProcessing, 1, tx.origin);
                                                                    else:
                                                                        if not stor7:
                                                                            call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                 gas gas_remaining wei
                                                                                args gasForProcessing
                                                                            mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                            if ext_call.success:
                                                                                _93999 = mem[64]
                                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                                require return_data.size >= 96
                                                                                _94800 = mem[_93999 + 32]
                                                                                _94801 = mem[_93999 + 64]
                                                                                mem[mem[64]] = mem[_93999]
                                                                                mem[mem[64] + 64] = _94801
                                                                                mem[mem[64] + 96] = gasForProcessing
                                                                                emit ProcessedDividendTracker(mem[mem[64]], _94800, _94801, gasForProcessing, 1, tx.origin);
                                                            else:
                                                                if arg2 and sellFeeIncreaseFactor > -1 / arg2:
                                                                    revert with 'NH{q', 17
                                                                if arg2 * totalFees / 100 > !(arg2 * sellFeeIncreaseFactor / 100):
                                                                    revert with 'NH{q', 17
                                                                if arg2 < (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100):
                                                                    revert with 'NH{q', 17
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                if not this.address:
                                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                                if balanceOf[address(msg.sender)] < (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100):
                                                                    revert with 0, 'ERC20: transfer amount exceeds balance'
                                                                balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)
                                                                if balanceOf[this.address] > !((arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)):
                                                                    revert with 'NH{q', 17
                                                                balanceOf[this.address] = balanceOf[this.address] + (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)
                                                                emit Transfer(((arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)), msg.sender, this.address);
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                if not arg1:
                                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                                if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100):
                                                                    revert with 0, 'ERC20: transfer amount exceeds balance'
                                                                balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)
                                                                if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)):
                                                                    revert with 'NH{q', 17
                                                                balanceOf[arg1] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)
                                                                emit Transfer((arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)), msg.sender, arg1);
                                                                require ext_code.size(dividendTrackerAddress)
                                                                call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                                     gas gas_remaining wei
                                                                    args msg.sender, balanceOf[address(msg.sender)]
                                                                mem[0] = arg1
                                                                mem[32] = 0
                                                                require ext_code.size(dividendTrackerAddress)
                                                                call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                                     gas gas_remaining wei
                                                                    args address(arg1), balanceOf[address(arg1)]
                                                                if not ext_call.success:
                                                                    if not ext_call.success:
                                                                        if not stor7:
                                                                            call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                 gas gas_remaining wei
                                                                                args gasForProcessing
                                                                            mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                            if ext_call.success:
                                                                                _96885 = mem[64]
                                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                                require return_data.size >= 96
                                                                                _97325 = mem[_96885 + 32]
                                                                                _97326 = mem[_96885 + 64]
                                                                                mem[mem[64]] = mem[_96885]
                                                                                mem[mem[64] + 64] = _97326
                                                                                mem[mem[64] + 96] = gasForProcessing
                                                                                emit ProcessedDividendTracker(mem[mem[64]], _97325, _97326, gasForProcessing, 1, tx.origin);
                                                                    else:
                                                                        if not stor7:
                                                                            call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                 gas gas_remaining wei
                                                                                args gasForProcessing
                                                                            mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                            if ext_call.success:
                                                                                _97072 = mem[64]
                                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                                require return_data.size >= 96
                                                                                _97637 = mem[_97072 + 32]
                                                                                _97638 = mem[_97072 + 64]
                                                                                mem[mem[64]] = mem[_97072]
                                                                                mem[mem[64] + 64] = _97638
                                                                                mem[mem[64] + 96] = gasForProcessing
                                                                                emit ProcessedDividendTracker(mem[mem[64]], _97637, _97638, gasForProcessing, 1, tx.origin);
                                                                else:
                                                                    if not ext_call.success:
                                                                        if not stor7:
                                                                            call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                 gas gas_remaining wei
                                                                                args gasForProcessing
                                                                            mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                            if ext_call.success:
                                                                                _97073 = mem[64]
                                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                                require return_data.size >= 96
                                                                                _97641 = mem[_97073 + 32]
                                                                                _97642 = mem[_97073 + 64]
                                                                                mem[mem[64]] = mem[_97073]
                                                                                mem[mem[64] + 64] = _97642
                                                                                mem[mem[64] + 96] = gasForProcessing
                                                                                emit ProcessedDividendTracker(mem[mem[64]], _97641, _97642, gasForProcessing, 1, tx.origin);
                                                                    else:
                                                                        if not stor7:
                                                                            call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                 gas gas_remaining wei
                                                                                args gasForProcessing
                                                                            mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                            if ext_call.success:
                                                                                _97329 = mem[64]
                                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                                require return_data.size >= 96
                                                                                _98010 = mem[_97329 + 32]
                                                                                _98011 = mem[_97329 + 64]
                                                                                mem[mem[64]] = mem[_97329]
                                                                                mem[mem[64] + 64] = _98011
                                                                                mem[mem[64] + 96] = gasForProcessing
                                                                                emit ProcessedDividendTracker(mem[mem[64]], _98010, _98011, gasForProcessing, 1, tx.origin);
                                            else:
                                                emit SendDividends(balanceOf[this.address], eth.balance(this.address));
                                                stor7 = 0
                                                if stor21[address(msg.sender)]:
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if not arg1:
                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                    if balanceOf[address(msg.sender)] < arg2:
                                                        revert with 0, 'ERC20: transfer amount exceeds balance'
                                                    balanceOf[address(msg.sender)] -= arg2
                                                    if balanceOf[arg1] > !arg2:
                                                        revert with 'NH{q', 17
                                                    balanceOf[arg1] += arg2
                                                    emit Transfer(arg2, msg.sender, arg1);
                                                    require ext_code.size(dividendTrackerAddress)
                                                    call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args msg.sender, balanceOf[address(msg.sender)]
                                                    mem[0] = arg1
                                                    mem[32] = 0
                                                    require ext_code.size(dividendTrackerAddress)
                                                    call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args address(arg1), balanceOf[address(arg1)]
                                                    if not ext_call.success:
                                                        if not ext_call.success:
                                                            if not stor7:
                                                                call dividendTrackerAddress.process(uint256 arg1) with:
                                                                     gas gas_remaining wei
                                                                    args gasForProcessing
                                                                mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                if ext_call.success:
                                                                    _83731 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 96
                                                                    _85468 = mem[_83731 + 32]
                                                                    _85469 = mem[_83731 + 64]
                                                                    mem[mem[64]] = mem[_83731]
                                                                    mem[mem[64] + 64] = _85469
                                                                    mem[mem[64] + 96] = gasForProcessing
                                                                    emit ProcessedDividendTracker(mem[mem[64]], _85468, _85469, gasForProcessing, 1, tx.origin);
                                                        else:
                                                            if not stor7:
                                                                call dividendTrackerAddress.process(uint256 arg1) with:
                                                                     gas gas_remaining wei
                                                                    args gasForProcessing
                                                                mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                if ext_call.success:
                                                                    _84470 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 96
                                                                    _86671 = mem[_84470 + 32]
                                                                    _86672 = mem[_84470 + 64]
                                                                    mem[mem[64]] = mem[_84470]
                                                                    mem[mem[64] + 64] = _86672
                                                                    mem[mem[64] + 96] = gasForProcessing
                                                                    emit ProcessedDividendTracker(mem[mem[64]], _86671, _86672, gasForProcessing, 1, tx.origin);
                                                    else:
                                                        if not ext_call.success:
                                                            if not stor7:
                                                                call dividendTrackerAddress.process(uint256 arg1) with:
                                                                     gas gas_remaining wei
                                                                    args gasForProcessing
                                                                mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                if ext_call.success:
                                                                    _84471 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 96
                                                                    _86675 = mem[_84471 + 32]
                                                                    _86676 = mem[_84471 + 64]
                                                                    mem[mem[64]] = mem[_84471]
                                                                    mem[mem[64] + 64] = _86676
                                                                    mem[mem[64] + 96] = gasForProcessing
                                                                    emit ProcessedDividendTracker(mem[mem[64]], _86675, _86676, gasForProcessing, 1, tx.origin);
                                                        else:
                                                            if not stor7:
                                                                call dividendTrackerAddress.process(uint256 arg1) with:
                                                                     gas gas_remaining wei
                                                                    args gasForProcessing
                                                                mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                if ext_call.success:
                                                                    _85472 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 96
                                                                    _87759 = mem[_85472 + 32]
                                                                    _87760 = mem[_85472 + 64]
                                                                    mem[mem[64]] = mem[_85472]
                                                                    mem[mem[64] + 64] = _87760
                                                                    mem[mem[64] + 96] = gasForProcessing
                                                                    emit ProcessedDividendTracker(mem[mem[64]], _87759, _87760, gasForProcessing, 1, tx.origin);
                                                else:
                                                    if stor21[address(arg1)]:
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if not arg1:
                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                        if balanceOf[address(msg.sender)] < arg2:
                                                            revert with 0, 'ERC20: transfer amount exceeds balance'
                                                        balanceOf[address(msg.sender)] -= arg2
                                                        if balanceOf[arg1] > !arg2:
                                                            revert with 'NH{q', 17
                                                        balanceOf[arg1] += arg2
                                                        emit Transfer(arg2, msg.sender, arg1);
                                                        require ext_code.size(dividendTrackerAddress)
                                                        call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                             gas gas_remaining wei
                                                            args msg.sender, balanceOf[address(msg.sender)]
                                                        mem[0] = arg1
                                                        mem[32] = 0
                                                        require ext_code.size(dividendTrackerAddress)
                                                        call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                             gas gas_remaining wei
                                                            args address(arg1), balanceOf[address(arg1)]
                                                        if not ext_call.success:
                                                            if not ext_call.success:
                                                                if not stor7:
                                                                    call dividendTrackerAddress.process(uint256 arg1) with:
                                                                         gas gas_remaining wei
                                                                        args gasForProcessing
                                                                    mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                    if ext_call.success:
                                                                        _84480 = mem[64]
                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                        require return_data.size >= 96
                                                                        _86693 = mem[_84480 + 32]
                                                                        _86694 = mem[_84480 + 64]
                                                                        mem[mem[64]] = mem[_84480]
                                                                        mem[mem[64] + 64] = _86694
                                                                        mem[mem[64] + 96] = gasForProcessing
                                                                        emit ProcessedDividendTracker(mem[mem[64]], _86693, _86694, gasForProcessing, 1, tx.origin);
                                                            else:
                                                                if not stor7:
                                                                    call dividendTrackerAddress.process(uint256 arg1) with:
                                                                         gas gas_remaining wei
                                                                        args gasForProcessing
                                                                    mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                    if ext_call.success:
                                                                        _85484 = mem[64]
                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                        require return_data.size >= 96
                                                                        _87769 = mem[_85484 + 32]
                                                                        _87770 = mem[_85484 + 64]
                                                                        mem[mem[64]] = mem[_85484]
                                                                        mem[mem[64] + 64] = _87770
                                                                        mem[mem[64] + 96] = gasForProcessing
                                                                        emit ProcessedDividendTracker(mem[mem[64]], _87769, _87770, gasForProcessing, 1, tx.origin);
                                                        else:
                                                            if not ext_call.success:
                                                                if not stor7:
                                                                    call dividendTrackerAddress.process(uint256 arg1) with:
                                                                         gas gas_remaining wei
                                                                        args gasForProcessing
                                                                    mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                    if ext_call.success:
                                                                        _85485 = mem[64]
                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                        require return_data.size >= 96
                                                                        _87773 = mem[_85485 + 32]
                                                                        _87774 = mem[_85485 + 64]
                                                                        mem[mem[64]] = mem[_85485]
                                                                        mem[mem[64] + 64] = _87774
                                                                        mem[mem[64] + 96] = gasForProcessing
                                                                        emit ProcessedDividendTracker(mem[mem[64]], _87773, _87774, gasForProcessing, 1, tx.origin);
                                                            else:
                                                                if not stor7:
                                                                    call dividendTrackerAddress.process(uint256 arg1) with:
                                                                         gas gas_remaining wei
                                                                        args gasForProcessing
                                                                    mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                    if ext_call.success:
                                                                        _86697 = mem[64]
                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                        require return_data.size >= 96
                                                                        _88614 = mem[_86697 + 32]
                                                                        _88615 = mem[_86697 + 64]
                                                                        mem[mem[64]] = mem[_86697]
                                                                        mem[mem[64] + 64] = _88615
                                                                        mem[mem[64] + 96] = gasForProcessing
                                                                        emit ProcessedDividendTracker(mem[mem[64]], _88614, _88615, gasForProcessing, 1, tx.origin);
                                                    else:
                                                        if stor7:
                                                            if not msg.sender:
                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                            if not arg1:
                                                                revert with 0, 'ERC20: transfer to the zero address'
                                                            if balanceOf[address(msg.sender)] < arg2:
                                                                revert with 0, 'ERC20: transfer amount exceeds balance'
                                                            balanceOf[address(msg.sender)] -= arg2
                                                            if balanceOf[arg1] > !arg2:
                                                                revert with 'NH{q', 17
                                                            balanceOf[arg1] += arg2
                                                            emit Transfer(arg2, msg.sender, arg1);
                                                            require ext_code.size(dividendTrackerAddress)
                                                            call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                                 gas gas_remaining wei
                                                                args msg.sender, balanceOf[address(msg.sender)]
                                                            mem[0] = arg1
                                                            mem[32] = 0
                                                            require ext_code.size(dividendTrackerAddress)
                                                            call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                                 gas gas_remaining wei
                                                                args address(arg1), balanceOf[address(arg1)]
                                                            if not ext_call.success:
                                                                if not ext_call.success:
                                                                    if not stor7:
                                                                        call dividendTrackerAddress.process(uint256 arg1) with:
                                                                             gas gas_remaining wei
                                                                            args gasForProcessing
                                                                        mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                        if ext_call.success:
                                                                            _83736 = mem[64]
                                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                                            require return_data.size >= 96
                                                                            _85475 = mem[_83736 + 32]
                                                                            _85476 = mem[_83736 + 64]
                                                                            mem[mem[64]] = mem[_83736]
                                                                            mem[mem[64] + 64] = _85476
                                                                            mem[mem[64] + 96] = gasForProcessing
                                                                            emit ProcessedDividendTracker(mem[mem[64]], _85475, _85476, gasForProcessing, 1, tx.origin);
                                                                else:
                                                                    if not stor7:
                                                                        call dividendTrackerAddress.process(uint256 arg1) with:
                                                                             gas gas_remaining wei
                                                                            args gasForProcessing
                                                                        mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                        if ext_call.success:
                                                                            _84475 = mem[64]
                                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                                            require return_data.size >= 96
                                                                            _86680 = mem[_84475 + 32]
                                                                            _86681 = mem[_84475 + 64]
                                                                            mem[mem[64]] = mem[_84475]
                                                                            mem[mem[64] + 64] = _86681
                                                                            mem[mem[64] + 96] = gasForProcessing
                                                                            emit ProcessedDividendTracker(mem[mem[64]], _86680, _86681, gasForProcessing, 1, tx.origin);
                                                            else:
                                                                if not ext_call.success:
                                                                    if not stor7:
                                                                        call dividendTrackerAddress.process(uint256 arg1) with:
                                                                             gas gas_remaining wei
                                                                            args gasForProcessing
                                                                        mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                        if ext_call.success:
                                                                            _84476 = mem[64]
                                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                                            require return_data.size >= 96
                                                                            _86684 = mem[_84476 + 32]
                                                                            _86685 = mem[_84476 + 64]
                                                                            mem[mem[64]] = mem[_84476]
                                                                            mem[mem[64] + 64] = _86685
                                                                            mem[mem[64] + 96] = gasForProcessing
                                                                            emit ProcessedDividendTracker(mem[mem[64]], _86684, _86685, gasForProcessing, 1, tx.origin);
                                                                else:
                                                                    if not stor7:
                                                                        call dividendTrackerAddress.process(uint256 arg1) with:
                                                                             gas gas_remaining wei
                                                                            args gasForProcessing
                                                                        mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                        if ext_call.success:
                                                                            _85479 = mem[64]
                                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                                            require return_data.size >= 96
                                                                            _87764 = mem[_85479 + 32]
                                                                            _87765 = mem[_85479 + 64]
                                                                            mem[mem[64]] = mem[_85479]
                                                                            mem[mem[64] + 64] = _87765
                                                                            mem[mem[64] + 96] = gasForProcessing
                                                                            emit ProcessedDividendTracker(mem[mem[64]], _87764, _87765, gasForProcessing, 1, tx.origin);
                                                        else:
                                                            if arg2 and totalFees > -1 / arg2:
                                                                revert with 'NH{q', 17
                                                            if not stor22[address(arg1)]:
                                                                if arg2 < arg2 * totalFees / 100:
                                                                    revert with 'NH{q', 17
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                if not this.address:
                                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                                if balanceOf[address(msg.sender)] < arg2 * totalFees / 100:
                                                                    revert with 0, 'ERC20: transfer amount exceeds balance'
                                                                balanceOf[address(msg.sender)] -= arg2 * totalFees / 100
                                                                if balanceOf[this.address] > !(arg2 * totalFees / 100):
                                                                    revert with 'NH{q', 17
                                                                balanceOf[this.address] += arg2 * totalFees / 100
                                                                emit Transfer((arg2 * totalFees / 100), msg.sender, this.address);
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                if not arg1:
                                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                                if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100):
                                                                    revert with 0, 'ERC20: transfer amount exceeds balance'
                                                                balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100)
                                                                if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100)):
                                                                    revert with 'NH{q', 17
                                                                balanceOf[arg1] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100)
                                                                emit Transfer((arg2 - (arg2 * totalFees / 100)), msg.sender, arg1);
                                                                require ext_code.size(dividendTrackerAddress)
                                                                call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                                     gas gas_remaining wei
                                                                    args msg.sender, balanceOf[address(msg.sender)]
                                                                mem[0] = arg1
                                                                mem[32] = 0
                                                                require ext_code.size(dividendTrackerAddress)
                                                                call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                                     gas gas_remaining wei
                                                                    args address(arg1), balanceOf[address(arg1)]
                                                                if not ext_call.success:
                                                                    if not ext_call.success:
                                                                        if not stor7:
                                                                            call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                 gas gas_remaining wei
                                                                                args gasForProcessing
                                                                            mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                            if ext_call.success:
                                                                                _93594 = mem[64]
                                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                                require return_data.size >= 96
                                                                                _94412 = mem[_93594 + 32]
                                                                                _94413 = mem[_93594 + 64]
                                                                                mem[mem[64]] = mem[_93594]
                                                                                mem[mem[64] + 64] = _94413
                                                                                mem[mem[64] + 96] = gasForProcessing
                                                                                emit ProcessedDividendTracker(mem[mem[64]], _94412, _94413, gasForProcessing, 1, tx.origin);
                                                                    else:
                                                                        if not stor7:
                                                                            call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                 gas gas_remaining wei
                                                                                args gasForProcessing
                                                                            mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                            if ext_call.success:
                                                                                _94002 = mem[64]
                                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                                require return_data.size >= 96
                                                                                _94805 = mem[_94002 + 32]
                                                                                _94806 = mem[_94002 + 64]
                                                                                mem[mem[64]] = mem[_94002]
                                                                                mem[mem[64] + 64] = _94806
                                                                                mem[mem[64] + 96] = gasForProcessing
                                                                                emit ProcessedDividendTracker(mem[mem[64]], _94805, _94806, gasForProcessing, 1, tx.origin);
                                                                else:
                                                                    if not ext_call.success:
                                                                        if not stor7:
                                                                            call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                 gas gas_remaining wei
                                                                                args gasForProcessing
                                                                            mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                            if ext_call.success:
                                                                                _94003 = mem[64]
                                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                                require return_data.size >= 96
                                                                                _94809 = mem[_94003 + 32]
                                                                                _94810 = mem[_94003 + 64]
                                                                                mem[mem[64]] = mem[_94003]
                                                                                mem[mem[64] + 64] = _94810
                                                                                mem[mem[64] + 96] = gasForProcessing
                                                                                emit ProcessedDividendTracker(mem[mem[64]], _94809, _94810, gasForProcessing, 1, tx.origin);
                                                                    else:
                                                                        if not stor7:
                                                                            call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                 gas gas_remaining wei
                                                                                args gasForProcessing
                                                                            mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                            if ext_call.success:
                                                                                _94416 = mem[64]
                                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                                require return_data.size >= 96
                                                                                _95148 = mem[_94416 + 32]
                                                                                _95149 = mem[_94416 + 64]
                                                                                mem[mem[64]] = mem[_94416]
                                                                                mem[mem[64] + 64] = _95149
                                                                                mem[mem[64] + 96] = gasForProcessing
                                                                                emit ProcessedDividendTracker(mem[mem[64]], _95148, _95149, gasForProcessing, 1, tx.origin);
                                                            else:
                                                                if arg2 and sellFeeIncreaseFactor > -1 / arg2:
                                                                    revert with 'NH{q', 17
                                                                if arg2 * totalFees / 100 > !(arg2 * sellFeeIncreaseFactor / 100):
                                                                    revert with 'NH{q', 17
                                                                if arg2 < (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100):
                                                                    revert with 'NH{q', 17
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                if not this.address:
                                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                                if balanceOf[address(msg.sender)] < (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100):
                                                                    revert with 0, 'ERC20: transfer amount exceeds balance'
                                                                balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)
                                                                if balanceOf[this.address] > !((arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)):
                                                                    revert with 'NH{q', 17
                                                                balanceOf[this.address] = balanceOf[this.address] + (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)
                                                                emit Transfer(((arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)), msg.sender, this.address);
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                if not arg1:
                                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                                if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100):
                                                                    revert with 0, 'ERC20: transfer amount exceeds balance'
                                                                balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)
                                                                if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)):
                                                                    revert with 'NH{q', 17
                                                                balanceOf[arg1] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)
                                                                emit Transfer((arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)), msg.sender, arg1);
                                                                require ext_code.size(dividendTrackerAddress)
                                                                call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                                     gas gas_remaining wei
                                                                    args msg.sender, balanceOf[address(msg.sender)]
                                                                mem[0] = arg1
                                                                mem[32] = 0
                                                                require ext_code.size(dividendTrackerAddress)
                                                                call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                                     gas gas_remaining wei
                                                                    args address(arg1), balanceOf[address(arg1)]
                                                                if not ext_call.success:
                                                                    if not ext_call.success:
                                                                        if not stor7:
                                                                            call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                 gas gas_remaining wei
                                                                                args gasForProcessing
                                                                            mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                            if ext_call.success:
                                                                                _97076 = mem[64]
                                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                                require return_data.size >= 96
                                                                                _97646 = mem[_97076 + 32]
                                                                                _97647 = mem[_97076 + 64]
                                                                                mem[mem[64]] = mem[_97076]
                                                                                mem[mem[64] + 64] = _97647
                                                                                mem[mem[64] + 96] = gasForProcessing
                                                                                emit ProcessedDividendTracker(mem[mem[64]], _97646, _97647, gasForProcessing, 1, tx.origin);
                                                                    else:
                                                                        if not stor7:
                                                                            call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                 gas gas_remaining wei
                                                                                args gasForProcessing
                                                                            mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                            if ext_call.success:
                                                                                _97331 = mem[64]
                                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                                require return_data.size >= 96
                                                                                _98014 = mem[_97331 + 32]
                                                                                _98015 = mem[_97331 + 64]
                                                                                mem[mem[64]] = mem[_97331]
                                                                                mem[mem[64] + 64] = _98015
                                                                                mem[mem[64] + 96] = gasForProcessing
                                                                                emit ProcessedDividendTracker(mem[mem[64]], _98014, _98015, gasForProcessing, 1, tx.origin);
                                                                else:
                                                                    if not ext_call.success:
                                                                        if not stor7:
                                                                            call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                 gas gas_remaining wei
                                                                                args gasForProcessing
                                                                            mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                            if ext_call.success:
                                                                                _97332 = mem[64]
                                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                                require return_data.size >= 96
                                                                                _98018 = mem[_97332 + 32]
                                                                                _98019 = mem[_97332 + 64]
                                                                                mem[mem[64]] = mem[_97332]
                                                                                mem[mem[64] + 64] = _98019
                                                                                mem[mem[64] + 96] = gasForProcessing
                                                                                emit ProcessedDividendTracker(mem[mem[64]], _98018, _98019, gasForProcessing, 1, tx.origin);
                                                                    else:
                                                                        if not stor7:
                                                                            call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                 gas gas_remaining wei
                                                                                args gasForProcessing
                                                                            mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                            if ext_call.success:
                                                                                _97650 = mem[64]
                                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                                require return_data.size >= 96
                                                                                _98327 = mem[_97650 + 32]
                                                                                _98328 = mem[_97650 + 64]
                                                                                mem[mem[64]] = mem[_97650]
                                                                                mem[mem[64] + 64] = _98328
                                                                                mem[mem[64] + 96] = gasForProcessing
                                                                                emit ProcessedDividendTracker(mem[mem[64]], _98327, _98328, gasForProcessing, 1, tx.origin);
                                        else:
                                            _79986 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size) + 1
                                            mem[_79986] = return_data.size
                                            mem[_79986 + 32 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            if not ext_call.success:
                                                stor7 = 0
                                                if stor21[address(msg.sender)]:
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if not arg1:
                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                    if balanceOf[address(msg.sender)] < arg2:
                                                        revert with 0, 'ERC20: transfer amount exceeds balance'
                                                    balanceOf[address(msg.sender)] -= arg2
                                                    if balanceOf[arg1] > !arg2:
                                                        revert with 'NH{q', 17
                                                    balanceOf[arg1] += arg2
                                                    emit Transfer(arg2, msg.sender, arg1);
                                                    require ext_code.size(dividendTrackerAddress)
                                                    call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args msg.sender, balanceOf[address(msg.sender)]
                                                    mem[0] = arg1
                                                    mem[32] = 0
                                                    require ext_code.size(dividendTrackerAddress)
                                                    call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args address(arg1), balanceOf[address(arg1)]
                                                    if not ext_call.success:
                                                        if not ext_call.success:
                                                            if not stor7:
                                                                call dividendTrackerAddress.process(uint256 arg1) with:
                                                                     gas gas_remaining wei
                                                                    args gasForProcessing
                                                                mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                if ext_call.success:
                                                                    _83275 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 96
                                                                    _84487 = mem[_83275 + 32]
                                                                    _84488 = mem[_83275 + 64]
                                                                    mem[mem[64]] = mem[_83275]
                                                                    mem[mem[64] + 64] = _84488
                                                                    mem[mem[64] + 96] = gasForProcessing
                                                                    emit ProcessedDividendTracker(mem[mem[64]], _84487, _84488, gasForProcessing, 1, tx.origin);
                                                        else:
                                                            if not stor7:
                                                                call dividendTrackerAddress.process(uint256 arg1) with:
                                                                     gas gas_remaining wei
                                                                    args gasForProcessing
                                                                mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                if ext_call.success:
                                                                    _83744 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 96
                                                                    _85490 = mem[_83744 + 32]
                                                                    _85491 = mem[_83744 + 64]
                                                                    mem[mem[64]] = mem[_83744]
                                                                    mem[mem[64] + 64] = _85491
                                                                    mem[mem[64] + 96] = gasForProcessing
                                                                    emit ProcessedDividendTracker(mem[mem[64]], _85490, _85491, gasForProcessing, 1, tx.origin);
                                                    else:
                                                        if not ext_call.success:
                                                            if not stor7:
                                                                call dividendTrackerAddress.process(uint256 arg1) with:
                                                                     gas gas_remaining wei
                                                                    args gasForProcessing
                                                                mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                if ext_call.success:
                                                                    _83745 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 96
                                                                    _85494 = mem[_83745 + 32]
                                                                    _85495 = mem[_83745 + 64]
                                                                    mem[mem[64]] = mem[_83745]
                                                                    mem[mem[64] + 64] = _85495
                                                                    mem[mem[64] + 96] = gasForProcessing
                                                                    emit ProcessedDividendTracker(mem[mem[64]], _85494, _85495, gasForProcessing, 1, tx.origin);
                                                        else:
                                                            if not stor7:
                                                                call dividendTrackerAddress.process(uint256 arg1) with:
                                                                     gas gas_remaining wei
                                                                    args gasForProcessing
                                                                mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                if ext_call.success:
                                                                    _84491 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 96
                                                                    _86701 = mem[_84491 + 32]
                                                                    _86702 = mem[_84491 + 64]
                                                                    mem[mem[64]] = mem[_84491]
                                                                    mem[mem[64] + 64] = _86702
                                                                    mem[mem[64] + 96] = gasForProcessing
                                                                    emit ProcessedDividendTracker(mem[mem[64]], _86701, _86702, gasForProcessing, 1, tx.origin);
                                                else:
                                                    if stor21[address(arg1)]:
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if not arg1:
                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                        if balanceOf[address(msg.sender)] < arg2:
                                                            revert with 0, 'ERC20: transfer amount exceeds balance'
                                                        balanceOf[address(msg.sender)] -= arg2
                                                        if balanceOf[arg1] > !arg2:
                                                            revert with 'NH{q', 17
                                                        balanceOf[arg1] += arg2
                                                        emit Transfer(arg2, msg.sender, arg1);
                                                        require ext_code.size(dividendTrackerAddress)
                                                        call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                             gas gas_remaining wei
                                                            args msg.sender, balanceOf[address(msg.sender)]
                                                        mem[0] = arg1
                                                        mem[32] = 0
                                                        require ext_code.size(dividendTrackerAddress)
                                                        call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                             gas gas_remaining wei
                                                            args address(arg1), balanceOf[address(arg1)]
                                                        if not ext_call.success:
                                                            if not ext_call.success:
                                                                if not stor7:
                                                                    call dividendTrackerAddress.process(uint256 arg1) with:
                                                                         gas gas_remaining wei
                                                                        args gasForProcessing
                                                                    mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                    if ext_call.success:
                                                                        _83754 = mem[64]
                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                        require return_data.size >= 96
                                                                        _85512 = mem[_83754 + 32]
                                                                        _85513 = mem[_83754 + 64]
                                                                        mem[mem[64]] = mem[_83754]
                                                                        mem[mem[64] + 64] = _85513
                                                                        mem[mem[64] + 96] = gasForProcessing
                                                                        emit ProcessedDividendTracker(mem[mem[64]], _85512, _85513, gasForProcessing, 1, tx.origin);
                                                            else:
                                                                if not stor7:
                                                                    call dividendTrackerAddress.process(uint256 arg1) with:
                                                                         gas gas_remaining wei
                                                                        args gasForProcessing
                                                                    mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                    if ext_call.success:
                                                                        _84503 = mem[64]
                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                        require return_data.size >= 96
                                                                        _86711 = mem[_84503 + 32]
                                                                        _86712 = mem[_84503 + 64]
                                                                        mem[mem[64]] = mem[_84503]
                                                                        mem[mem[64] + 64] = _86712
                                                                        mem[mem[64] + 96] = gasForProcessing
                                                                        emit ProcessedDividendTracker(mem[mem[64]], _86711, _86712, gasForProcessing, 1, tx.origin);
                                                        else:
                                                            if not ext_call.success:
                                                                if not stor7:
                                                                    call dividendTrackerAddress.process(uint256 arg1) with:
                                                                         gas gas_remaining wei
                                                                        args gasForProcessing
                                                                    mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                    if ext_call.success:
                                                                        _84504 = mem[64]
                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                        require return_data.size >= 96
                                                                        _86715 = mem[_84504 + 32]
                                                                        _86716 = mem[_84504 + 64]
                                                                        mem[mem[64]] = mem[_84504]
                                                                        mem[mem[64] + 64] = _86716
                                                                        mem[mem[64] + 96] = gasForProcessing
                                                                        emit ProcessedDividendTracker(mem[mem[64]], _86715, _86716, gasForProcessing, 1, tx.origin);
                                                            else:
                                                                if not stor7:
                                                                    call dividendTrackerAddress.process(uint256 arg1) with:
                                                                         gas gas_remaining wei
                                                                        args gasForProcessing
                                                                    mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                    if ext_call.success:
                                                                        _85516 = mem[64]
                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                        require return_data.size >= 96
                                                                        _87789 = mem[_85516 + 32]
                                                                        _87790 = mem[_85516 + 64]
                                                                        mem[mem[64]] = mem[_85516]
                                                                        mem[mem[64] + 64] = _87790
                                                                        mem[mem[64] + 96] = gasForProcessing
                                                                        emit ProcessedDividendTracker(mem[mem[64]], _87789, _87790, gasForProcessing, 1, tx.origin);
                                                    else:
                                                        if stor7:
                                                            if not msg.sender:
                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                            if not arg1:
                                                                revert with 0, 'ERC20: transfer to the zero address'
                                                            if balanceOf[address(msg.sender)] < arg2:
                                                                revert with 0, 'ERC20: transfer amount exceeds balance'
                                                            balanceOf[address(msg.sender)] -= arg2
                                                            if balanceOf[arg1] > !arg2:
                                                                revert with 'NH{q', 17
                                                            balanceOf[arg1] += arg2
                                                            emit Transfer(arg2, msg.sender, arg1);
                                                            require ext_code.size(dividendTrackerAddress)
                                                            call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                                 gas gas_remaining wei
                                                                args msg.sender, balanceOf[address(msg.sender)]
                                                            mem[0] = arg1
                                                            mem[32] = 0
                                                            require ext_code.size(dividendTrackerAddress)
                                                            call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                                 gas gas_remaining wei
                                                                args address(arg1), balanceOf[address(arg1)]
                                                            if not ext_call.success:
                                                                if not ext_call.success:
                                                                    if not stor7:
                                                                        call dividendTrackerAddress.process(uint256 arg1) with:
                                                                             gas gas_remaining wei
                                                                            args gasForProcessing
                                                                        mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                        if ext_call.success:
                                                                            _83280 = mem[64]
                                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                                            require return_data.size >= 96
                                                                            _84494 = mem[_83280 + 32]
                                                                            _84495 = mem[_83280 + 64]
                                                                            mem[mem[64]] = mem[_83280]
                                                                            mem[mem[64] + 64] = _84495
                                                                            mem[mem[64] + 96] = gasForProcessing
                                                                            emit ProcessedDividendTracker(mem[mem[64]], _84494, _84495, gasForProcessing, 1, tx.origin);
                                                                else:
                                                                    if not stor7:
                                                                        call dividendTrackerAddress.process(uint256 arg1) with:
                                                                             gas gas_remaining wei
                                                                            args gasForProcessing
                                                                        mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                        if ext_call.success:
                                                                            _83749 = mem[64]
                                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                                            require return_data.size >= 96
                                                                            _85499 = mem[_83749 + 32]
                                                                            _85500 = mem[_83749 + 64]
                                                                            mem[mem[64]] = mem[_83749]
                                                                            mem[mem[64] + 64] = _85500
                                                                            mem[mem[64] + 96] = gasForProcessing
                                                                            emit ProcessedDividendTracker(mem[mem[64]], _85499, _85500, gasForProcessing, 1, tx.origin);
                                                            else:
                                                                if not ext_call.success:
                                                                    if not stor7:
                                                                        call dividendTrackerAddress.process(uint256 arg1) with:
                                                                             gas gas_remaining wei
                                                                            args gasForProcessing
                                                                        mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                        if ext_call.success:
                                                                            _83750 = mem[64]
                                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                                            require return_data.size >= 96
                                                                            _85503 = mem[_83750 + 32]
                                                                            _85504 = mem[_83750 + 64]
                                                                            mem[mem[64]] = mem[_83750]
                                                                            mem[mem[64] + 64] = _85504
                                                                            mem[mem[64] + 96] = gasForProcessing
                                                                            emit ProcessedDividendTracker(mem[mem[64]], _85503, _85504, gasForProcessing, 1, tx.origin);
                                                                else:
                                                                    if not stor7:
                                                                        call dividendTrackerAddress.process(uint256 arg1) with:
                                                                             gas gas_remaining wei
                                                                            args gasForProcessing
                                                                        mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                        if ext_call.success:
                                                                            _84498 = mem[64]
                                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                                            require return_data.size >= 96
                                                                            _86706 = mem[_84498 + 32]
                                                                            _86707 = mem[_84498 + 64]
                                                                            mem[mem[64]] = mem[_84498]
                                                                            mem[mem[64] + 64] = _86707
                                                                            mem[mem[64] + 96] = gasForProcessing
                                                                            emit ProcessedDividendTracker(mem[mem[64]], _86706, _86707, gasForProcessing, 1, tx.origin);
                                                        else:
                                                            if arg2 and totalFees > -1 / arg2:
                                                                revert with 'NH{q', 17
                                                            if not stor22[address(arg1)]:
                                                                if arg2 < arg2 * totalFees / 100:
                                                                    revert with 'NH{q', 17
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                if not this.address:
                                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                                if balanceOf[address(msg.sender)] < arg2 * totalFees / 100:
                                                                    revert with 0, 'ERC20: transfer amount exceeds balance'
                                                                balanceOf[address(msg.sender)] -= arg2 * totalFees / 100
                                                                if balanceOf[this.address] > !(arg2 * totalFees / 100):
                                                                    revert with 'NH{q', 17
                                                                balanceOf[this.address] += arg2 * totalFees / 100
                                                                emit Transfer((arg2 * totalFees / 100), msg.sender, this.address);
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                if not arg1:
                                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                                if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100):
                                                                    revert with 0, 'ERC20: transfer amount exceeds balance'
                                                                balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100)
                                                                if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100)):
                                                                    revert with 'NH{q', 17
                                                                balanceOf[arg1] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100)
                                                                emit Transfer((arg2 - (arg2 * totalFees / 100)), msg.sender, arg1);
                                                                require ext_code.size(dividendTrackerAddress)
                                                                call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                                     gas gas_remaining wei
                                                                    args msg.sender, balanceOf[address(msg.sender)]
                                                                mem[0] = arg1
                                                                mem[32] = 0
                                                                require ext_code.size(dividendTrackerAddress)
                                                                call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                                     gas gas_remaining wei
                                                                    args address(arg1), balanceOf[address(arg1)]
                                                                if not ext_call.success:
                                                                    if not ext_call.success:
                                                                        if not stor7:
                                                                            call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                 gas gas_remaining wei
                                                                                args gasForProcessing
                                                                            mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                            if ext_call.success:
                                                                                _93296 = mem[64]
                                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                                require return_data.size >= 96
                                                                                _94012 = mem[_93296 + 32]
                                                                                _94013 = mem[_93296 + 64]
                                                                                mem[mem[64]] = mem[_93296]
                                                                                mem[mem[64] + 64] = _94013
                                                                                mem[mem[64] + 96] = gasForProcessing
                                                                                emit ProcessedDividendTracker(mem[mem[64]], _94012, _94013, gasForProcessing, 1, tx.origin);
                                                                    else:
                                                                        if not stor7:
                                                                            call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                 gas gas_remaining wei
                                                                                args gasForProcessing
                                                                            mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                            if ext_call.success:
                                                                                _93603 = mem[64]
                                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                                require return_data.size >= 96
                                                                                _94420 = mem[_93603 + 32]
                                                                                _94421 = mem[_93603 + 64]
                                                                                mem[mem[64]] = mem[_93603]
                                                                                mem[mem[64] + 64] = _94421
                                                                                mem[mem[64] + 96] = gasForProcessing
                                                                                emit ProcessedDividendTracker(mem[mem[64]], _94420, _94421, gasForProcessing, 1, tx.origin);
                                                                else:
                                                                    if not ext_call.success:
                                                                        if not stor7:
                                                                            call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                 gas gas_remaining wei
                                                                                args gasForProcessing
                                                                            mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                            if ext_call.success:
                                                                                _93604 = mem[64]
                                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                                require return_data.size >= 96
                                                                                _94424 = mem[_93604 + 32]
                                                                                _94425 = mem[_93604 + 64]
                                                                                mem[mem[64]] = mem[_93604]
                                                                                mem[mem[64] + 64] = _94425
                                                                                mem[mem[64] + 96] = gasForProcessing
                                                                                emit ProcessedDividendTracker(mem[mem[64]], _94424, _94425, gasForProcessing, 1, tx.origin);
                                                                    else:
                                                                        if not stor7:
                                                                            call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                 gas gas_remaining wei
                                                                                args gasForProcessing
                                                                            mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                            if ext_call.success:
                                                                                _94016 = mem[64]
                                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                                require return_data.size >= 96
                                                                                _94815 = mem[_94016 + 32]
                                                                                _94816 = mem[_94016 + 64]
                                                                                mem[mem[64]] = mem[_94016]
                                                                                mem[mem[64] + 64] = _94816
                                                                                mem[mem[64] + 96] = gasForProcessing
                                                                                emit ProcessedDividendTracker(mem[mem[64]], _94815, _94816, gasForProcessing, 1, tx.origin);
                                                            else:
                                                                if arg2 and sellFeeIncreaseFactor > -1 / arg2:
                                                                    revert with 'NH{q', 17
                                                                if arg2 * totalFees / 100 > !(arg2 * sellFeeIncreaseFactor / 100):
                                                                    revert with 'NH{q', 17
                                                                if arg2 < (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100):
                                                                    revert with 'NH{q', 17
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                if not this.address:
                                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                                if balanceOf[address(msg.sender)] < (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100):
                                                                    revert with 0, 'ERC20: transfer amount exceeds balance'
                                                                balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)
                                                                if balanceOf[this.address] > !((arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)):
                                                                    revert with 'NH{q', 17
                                                                balanceOf[this.address] = balanceOf[this.address] + (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)
                                                                emit Transfer(((arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)), msg.sender, this.address);
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                if not arg1:
                                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                                if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100):
                                                                    revert with 0, 'ERC20: transfer amount exceeds balance'
                                                                balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)
                                                                if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)):
                                                                    revert with 'NH{q', 17
                                                                balanceOf[arg1] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)
                                                                emit Transfer((arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)), msg.sender, arg1);
                                                                require ext_code.size(dividendTrackerAddress)
                                                                call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                                     gas gas_remaining wei
                                                                    args msg.sender, balanceOf[address(msg.sender)]
                                                                mem[0] = arg1
                                                                mem[32] = 0
                                                                require ext_code.size(dividendTrackerAddress)
                                                                call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                                     gas gas_remaining wei
                                                                    args address(arg1), balanceOf[address(arg1)]
                                                                if not ext_call.success:
                                                                    if not ext_call.success:
                                                                        if not stor7:
                                                                            call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                 gas gas_remaining wei
                                                                                args gasForProcessing
                                                                            mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                            if ext_call.success:
                                                                                _96892 = mem[64]
                                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                                require return_data.size >= 96
                                                                                _97337 = mem[_96892 + 32]
                                                                                _97338 = mem[_96892 + 64]
                                                                                mem[mem[64]] = mem[_96892]
                                                                                mem[mem[64] + 64] = _97338
                                                                                mem[mem[64] + 96] = gasForProcessing
                                                                                emit ProcessedDividendTracker(mem[mem[64]], _97337, _97338, gasForProcessing, 1, tx.origin);
                                                                    else:
                                                                        if not stor7:
                                                                            call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                 gas gas_remaining wei
                                                                                args gasForProcessing
                                                                            mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                            if ext_call.success:
                                                                                _97082 = mem[64]
                                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                                require return_data.size >= 96
                                                                                _97653 = mem[_97082 + 32]
                                                                                _97654 = mem[_97082 + 64]
                                                                                mem[mem[64]] = mem[_97082]
                                                                                mem[mem[64] + 64] = _97654
                                                                                mem[mem[64] + 96] = gasForProcessing
                                                                                emit ProcessedDividendTracker(mem[mem[64]], _97653, _97654, gasForProcessing, 1, tx.origin);
                                                                else:
                                                                    if not ext_call.success:
                                                                        if not stor7:
                                                                            call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                 gas gas_remaining wei
                                                                                args gasForProcessing
                                                                            mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                            if ext_call.success:
                                                                                _97083 = mem[64]
                                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                                require return_data.size >= 96
                                                                                _97657 = mem[_97083 + 32]
                                                                                _97658 = mem[_97083 + 64]
                                                                                mem[mem[64]] = mem[_97083]
                                                                                mem[mem[64] + 64] = _97658
                                                                                mem[mem[64] + 96] = gasForProcessing
                                                                                emit ProcessedDividendTracker(mem[mem[64]], _97657, _97658, gasForProcessing, 1, tx.origin);
                                                                    else:
                                                                        if not stor7:
                                                                            call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                 gas gas_remaining wei
                                                                                args gasForProcessing
                                                                            mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                            if ext_call.success:
                                                                                _97341 = mem[64]
                                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                                require return_data.size >= 96
                                                                                _98024 = mem[_97341 + 32]
                                                                                _98025 = mem[_97341 + 64]
                                                                                mem[mem[64]] = mem[_97341]
                                                                                mem[mem[64] + 64] = _98025
                                                                                mem[mem[64] + 96] = gasForProcessing
                                                                                emit ProcessedDividendTracker(mem[mem[64]], _98024, _98025, gasForProcessing, 1, tx.origin);
                                            else:
                                                emit SendDividends(balanceOf[this.address], eth.balance(this.address));
                                                stor7 = 0
                                                if stor21[address(msg.sender)]:
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if not arg1:
                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                    if balanceOf[address(msg.sender)] < arg2:
                                                        revert with 0, 'ERC20: transfer amount exceeds balance'
                                                    balanceOf[address(msg.sender)] -= arg2
                                                    if balanceOf[arg1] > !arg2:
                                                        revert with 'NH{q', 17
                                                    balanceOf[arg1] += arg2
                                                    emit Transfer(arg2, msg.sender, arg1);
                                                    require ext_code.size(dividendTrackerAddress)
                                                    call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args msg.sender, balanceOf[address(msg.sender)]
                                                    mem[0] = arg1
                                                    mem[32] = 0
                                                    require ext_code.size(dividendTrackerAddress)
                                                    call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args address(arg1), balanceOf[address(arg1)]
                                                    if not ext_call.success:
                                                        if not ext_call.success:
                                                            if not stor7:
                                                                call dividendTrackerAddress.process(uint256 arg1) with:
                                                                     gas gas_remaining wei
                                                                    args gasForProcessing
                                                                mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                if ext_call.success:
                                                                    _83759 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 96
                                                                    _85519 = mem[_83759 + 32]
                                                                    _85520 = mem[_83759 + 64]
                                                                    mem[mem[64]] = mem[_83759]
                                                                    mem[mem[64] + 64] = _85520
                                                                    mem[mem[64] + 96] = gasForProcessing
                                                                    emit ProcessedDividendTracker(mem[mem[64]], _85519, _85520, gasForProcessing, 1, tx.origin);
                                                        else:
                                                            if not stor7:
                                                                call dividendTrackerAddress.process(uint256 arg1) with:
                                                                     gas gas_remaining wei
                                                                    args gasForProcessing
                                                                mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                if ext_call.success:
                                                                    _84508 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 96
                                                                    _86720 = mem[_84508 + 32]
                                                                    _86721 = mem[_84508 + 64]
                                                                    mem[mem[64]] = mem[_84508]
                                                                    mem[mem[64] + 64] = _86721
                                                                    mem[mem[64] + 96] = gasForProcessing
                                                                    emit ProcessedDividendTracker(mem[mem[64]], _86720, _86721, gasForProcessing, 1, tx.origin);
                                                    else:
                                                        if not ext_call.success:
                                                            if not stor7:
                                                                call dividendTrackerAddress.process(uint256 arg1) with:
                                                                     gas gas_remaining wei
                                                                    args gasForProcessing
                                                                mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                if ext_call.success:
                                                                    _84509 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 96
                                                                    _86724 = mem[_84509 + 32]
                                                                    _86725 = mem[_84509 + 64]
                                                                    mem[mem[64]] = mem[_84509]
                                                                    mem[mem[64] + 64] = _86725
                                                                    mem[mem[64] + 96] = gasForProcessing
                                                                    emit ProcessedDividendTracker(mem[mem[64]], _86724, _86725, gasForProcessing, 1, tx.origin);
                                                        else:
                                                            if not stor7:
                                                                call dividendTrackerAddress.process(uint256 arg1) with:
                                                                     gas gas_remaining wei
                                                                    args gasForProcessing
                                                                mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                if ext_call.success:
                                                                    _85523 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 96
                                                                    _87794 = mem[_85523 + 32]
                                                                    _87795 = mem[_85523 + 64]
                                                                    mem[mem[64]] = mem[_85523]
                                                                    mem[mem[64] + 64] = _87795
                                                                    mem[mem[64] + 96] = gasForProcessing
                                                                    emit ProcessedDividendTracker(mem[mem[64]], _87794, _87795, gasForProcessing, 1, tx.origin);
                                                else:
                                                    if stor21[address(arg1)]:
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if not arg1:
                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                        if balanceOf[address(msg.sender)] < arg2:
                                                            revert with 0, 'ERC20: transfer amount exceeds balance'
                                                        balanceOf[address(msg.sender)] -= arg2
                                                        if balanceOf[arg1] > !arg2:
                                                            revert with 'NH{q', 17
                                                        balanceOf[arg1] += arg2
                                                        emit Transfer(arg2, msg.sender, arg1);
                                                        require ext_code.size(dividendTrackerAddress)
                                                        call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                             gas gas_remaining wei
                                                            args msg.sender, balanceOf[address(msg.sender)]
                                                        mem[0] = arg1
                                                        mem[32] = 0
                                                        require ext_code.size(dividendTrackerAddress)
                                                        call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                             gas gas_remaining wei
                                                            args address(arg1), balanceOf[address(arg1)]
                                                        if not ext_call.success:
                                                            if not ext_call.success:
                                                                if not stor7:
                                                                    call dividendTrackerAddress.process(uint256 arg1) with:
                                                                         gas gas_remaining wei
                                                                        args gasForProcessing
                                                                    mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                    if ext_call.success:
                                                                        _84518 = mem[64]
                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                        require return_data.size >= 96
                                                                        _86742 = mem[_84518 + 32]
                                                                        _86743 = mem[_84518 + 64]
                                                                        mem[mem[64]] = mem[_84518]
                                                                        mem[mem[64] + 64] = _86743
                                                                        mem[mem[64] + 96] = gasForProcessing
                                                                        emit ProcessedDividendTracker(mem[mem[64]], _86742, _86743, gasForProcessing, 1, tx.origin);
                                                            else:
                                                                if not stor7:
                                                                    call dividendTrackerAddress.process(uint256 arg1) with:
                                                                         gas gas_remaining wei
                                                                        args gasForProcessing
                                                                    mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                    if ext_call.success:
                                                                        _85535 = mem[64]
                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                        require return_data.size >= 96
                                                                        _87804 = mem[_85535 + 32]
                                                                        _87805 = mem[_85535 + 64]
                                                                        mem[mem[64]] = mem[_85535]
                                                                        mem[mem[64] + 64] = _87805
                                                                        mem[mem[64] + 96] = gasForProcessing
                                                                        emit ProcessedDividendTracker(mem[mem[64]], _87804, _87805, gasForProcessing, 1, tx.origin);
                                                        else:
                                                            if not ext_call.success:
                                                                if not stor7:
                                                                    call dividendTrackerAddress.process(uint256 arg1) with:
                                                                         gas gas_remaining wei
                                                                        args gasForProcessing
                                                                    mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                    if ext_call.success:
                                                                        _85536 = mem[64]
                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                        require return_data.size >= 96
                                                                        _87808 = mem[_85536 + 32]
                                                                        _87809 = mem[_85536 + 64]
                                                                        mem[mem[64]] = mem[_85536]
                                                                        mem[mem[64] + 64] = _87809
                                                                        mem[mem[64] + 96] = gasForProcessing
                                                                        emit ProcessedDividendTracker(mem[mem[64]], _87808, _87809, gasForProcessing, 1, tx.origin);
                                                            else:
                                                                if not stor7:
                                                                    call dividendTrackerAddress.process(uint256 arg1) with:
                                                                         gas gas_remaining wei
                                                                        args gasForProcessing
                                                                    mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                    if ext_call.success:
                                                                        _86746 = mem[64]
                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                        require return_data.size >= 96
                                                                        _88649 = mem[_86746 + 32]
                                                                        _88650 = mem[_86746 + 64]
                                                                        mem[mem[64]] = mem[_86746]
                                                                        mem[mem[64] + 64] = _88650
                                                                        mem[mem[64] + 96] = gasForProcessing
                                                                        emit ProcessedDividendTracker(mem[mem[64]], _88649, _88650, gasForProcessing, 1, tx.origin);
                                                    else:
                                                        if stor7:
                                                            if not msg.sender:
                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                            if not arg1:
                                                                revert with 0, 'ERC20: transfer to the zero address'
                                                            if balanceOf[address(msg.sender)] < arg2:
                                                                revert with 0, 'ERC20: transfer amount exceeds balance'
                                                            balanceOf[address(msg.sender)] -= arg2
                                                            if balanceOf[arg1] > !arg2:
                                                                revert with 'NH{q', 17
                                                            balanceOf[arg1] += arg2
                                                            emit Transfer(arg2, msg.sender, arg1);
                                                            require ext_code.size(dividendTrackerAddress)
                                                            call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                                 gas gas_remaining wei
                                                                args msg.sender, balanceOf[address(msg.sender)]
                                                            mem[0] = arg1
                                                            mem[32] = 0
                                                            require ext_code.size(dividendTrackerAddress)
                                                            call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                                 gas gas_remaining wei
                                                                args address(arg1), balanceOf[address(arg1)]
                                                            if not ext_call.success:
                                                                if not ext_call.success:
                                                                    if not stor7:
                                                                        call dividendTrackerAddress.process(uint256 arg1) with:
                                                                             gas gas_remaining wei
                                                                            args gasForProcessing
                                                                        mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                        if ext_call.success:
                                                                            _83764 = mem[64]
                                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                                            require return_data.size >= 96
                                                                            _85526 = mem[_83764 + 32]
                                                                            _85527 = mem[_83764 + 64]
                                                                            mem[mem[64]] = mem[_83764]
                                                                            mem[mem[64] + 64] = _85527
                                                                            mem[mem[64] + 96] = gasForProcessing
                                                                            emit ProcessedDividendTracker(mem[mem[64]], _85526, _85527, gasForProcessing, 1, tx.origin);
                                                                else:
                                                                    if not stor7:
                                                                        call dividendTrackerAddress.process(uint256 arg1) with:
                                                                             gas gas_remaining wei
                                                                            args gasForProcessing
                                                                        mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                        if ext_call.success:
                                                                            _84513 = mem[64]
                                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                                            require return_data.size >= 96
                                                                            _86729 = mem[_84513 + 32]
                                                                            _86730 = mem[_84513 + 64]
                                                                            mem[mem[64]] = mem[_84513]
                                                                            mem[mem[64] + 64] = _86730
                                                                            mem[mem[64] + 96] = gasForProcessing
                                                                            emit ProcessedDividendTracker(mem[mem[64]], _86729, _86730, gasForProcessing, 1, tx.origin);
                                                            else:
                                                                if not ext_call.success:
                                                                    if not stor7:
                                                                        call dividendTrackerAddress.process(uint256 arg1) with:
                                                                             gas gas_remaining wei
                                                                            args gasForProcessing
                                                                        mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                        if ext_call.success:
                                                                            _84514 = mem[64]
                                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                                            require return_data.size >= 96
                                                                            _86733 = mem[_84514 + 32]
                                                                            _86734 = mem[_84514 + 64]
                                                                            mem[mem[64]] = mem[_84514]
                                                                            mem[mem[64] + 64] = _86734
                                                                            mem[mem[64] + 96] = gasForProcessing
                                                                            emit ProcessedDividendTracker(mem[mem[64]], _86733, _86734, gasForProcessing, 1, tx.origin);
                                                                else:
                                                                    if not stor7:
                                                                        call dividendTrackerAddress.process(uint256 arg1) with:
                                                                             gas gas_remaining wei
                                                                            args gasForProcessing
                                                                        mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                        if ext_call.success:
                                                                            _85530 = mem[64]
                                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                                            require return_data.size >= 96
                                                                            _87799 = mem[_85530 + 32]
                                                                            _87800 = mem[_85530 + 64]
                                                                            mem[mem[64]] = mem[_85530]
                                                                            mem[mem[64] + 64] = _87800
                                                                            mem[mem[64] + 96] = gasForProcessing
                                                                            emit ProcessedDividendTracker(mem[mem[64]], _87799, _87800, gasForProcessing, 1, tx.origin);
                                                        else:
                                                            if arg2 and totalFees > -1 / arg2:
                                                                revert with 'NH{q', 17
                                                            if not stor22[address(arg1)]:
                                                                if arg2 < arg2 * totalFees / 100:
                                                                    revert with 'NH{q', 17
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                if not this.address:
                                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                                if balanceOf[address(msg.sender)] < arg2 * totalFees / 100:
                                                                    revert with 0, 'ERC20: transfer amount exceeds balance'
                                                                balanceOf[address(msg.sender)] -= arg2 * totalFees / 100
                                                                if balanceOf[this.address] > !(arg2 * totalFees / 100):
                                                                    revert with 'NH{q', 17
                                                                balanceOf[this.address] += arg2 * totalFees / 100
                                                                emit Transfer((arg2 * totalFees / 100), msg.sender, this.address);
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                if not arg1:
                                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                                if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100):
                                                                    revert with 0, 'ERC20: transfer amount exceeds balance'
                                                                balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100)
                                                                if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100)):
                                                                    revert with 'NH{q', 17
                                                                balanceOf[arg1] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100)
                                                                emit Transfer((arg2 - (arg2 * totalFees / 100)), msg.sender, arg1);
                                                                require ext_code.size(dividendTrackerAddress)
                                                                call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                                     gas gas_remaining wei
                                                                    args msg.sender, balanceOf[address(msg.sender)]
                                                                mem[0] = arg1
                                                                mem[32] = 0
                                                                require ext_code.size(dividendTrackerAddress)
                                                                call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                                     gas gas_remaining wei
                                                                    args address(arg1), balanceOf[address(arg1)]
                                                                if not ext_call.success:
                                                                    if not ext_call.success:
                                                                        if not stor7:
                                                                            call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                 gas gas_remaining wei
                                                                                args gasForProcessing
                                                                            mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                            if ext_call.success:
                                                                                _93611 = mem[64]
                                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                                require return_data.size >= 96
                                                                                _94429 = mem[_93611 + 32]
                                                                                _94430 = mem[_93611 + 64]
                                                                                mem[mem[64]] = mem[_93611]
                                                                                mem[mem[64] + 64] = _94430
                                                                                mem[mem[64] + 96] = gasForProcessing
                                                                                emit ProcessedDividendTracker(mem[mem[64]], _94429, _94430, gasForProcessing, 1, tx.origin);
                                                                    else:
                                                                        if not stor7:
                                                                            call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                 gas gas_remaining wei
                                                                                args gasForProcessing
                                                                            mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                            if ext_call.success:
                                                                                _94019 = mem[64]
                                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                                require return_data.size >= 96
                                                                                _94820 = mem[_94019 + 32]
                                                                                _94821 = mem[_94019 + 64]
                                                                                mem[mem[64]] = mem[_94019]
                                                                                mem[mem[64] + 64] = _94821
                                                                                mem[mem[64] + 96] = gasForProcessing
                                                                                emit ProcessedDividendTracker(mem[mem[64]], _94820, _94821, gasForProcessing, 1, tx.origin);
                                                                else:
                                                                    if not ext_call.success:
                                                                        if not stor7:
                                                                            call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                 gas gas_remaining wei
                                                                                args gasForProcessing
                                                                            mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                            if ext_call.success:
                                                                                _94020 = mem[64]
                                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                                require return_data.size >= 96
                                                                                _94824 = mem[_94020 + 32]
                                                                                _94825 = mem[_94020 + 64]
                                                                                mem[mem[64]] = mem[_94020]
                                                                                mem[mem[64] + 64] = _94825
                                                                                mem[mem[64] + 96] = gasForProcessing
                                                                                emit ProcessedDividendTracker(mem[mem[64]], _94824, _94825, gasForProcessing, 1, tx.origin);
                                                                    else:
                                                                        if not stor7:
                                                                            call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                 gas gas_remaining wei
                                                                                args gasForProcessing
                                                                            mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                            if ext_call.success:
                                                                                _94433 = mem[64]
                                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                                require return_data.size >= 96
                                                                                _95160 = mem[_94433 + 32]
                                                                                _95161 = mem[_94433 + 64]
                                                                                mem[mem[64]] = mem[_94433]
                                                                                mem[mem[64] + 64] = _95161
                                                                                mem[mem[64] + 96] = gasForProcessing
                                                                                emit ProcessedDividendTracker(mem[mem[64]], _95160, _95161, gasForProcessing, 1, tx.origin);
                                                            else:
                                                                if arg2 and sellFeeIncreaseFactor > -1 / arg2:
                                                                    revert with 'NH{q', 17
                                                                if arg2 * totalFees / 100 > !(arg2 * sellFeeIncreaseFactor / 100):
                                                                    revert with 'NH{q', 17
                                                                if arg2 < (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100):
                                                                    revert with 'NH{q', 17
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                if not this.address:
                                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                                if balanceOf[address(msg.sender)] < (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100):
                                                                    revert with 0, 'ERC20: transfer amount exceeds balance'
                                                                balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)
                                                                if balanceOf[this.address] > !((arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)):
                                                                    revert with 'NH{q', 17
                                                                balanceOf[this.address] = balanceOf[this.address] + (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)
                                                                emit Transfer(((arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)), msg.sender, this.address);
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                if not arg1:
                                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                                if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100):
                                                                    revert with 0, 'ERC20: transfer amount exceeds balance'
                                                                balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)
                                                                if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)):
                                                                    revert with 'NH{q', 17
                                                                balanceOf[arg1] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)
                                                                emit Transfer((arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)), msg.sender, arg1);
                                                                require ext_code.size(dividendTrackerAddress)
                                                                call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                                     gas gas_remaining wei
                                                                    args msg.sender, balanceOf[address(msg.sender)]
                                                                mem[0] = arg1
                                                                mem[32] = 0
                                                                require ext_code.size(dividendTrackerAddress)
                                                                call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                                     gas gas_remaining wei
                                                                    args address(arg1), balanceOf[address(arg1)]
                                                                if not ext_call.success:
                                                                    if not ext_call.success:
                                                                        if not stor7:
                                                                            call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                 gas gas_remaining wei
                                                                                args gasForProcessing
                                                                            mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                            if ext_call.success:
                                                                                _97086 = mem[64]
                                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                                require return_data.size >= 96
                                                                                _97662 = mem[_97086 + 32]
                                                                                _97663 = mem[_97086 + 64]
                                                                                mem[mem[64]] = mem[_97086]
                                                                                mem[mem[64] + 64] = _97663
                                                                                mem[mem[64] + 96] = gasForProcessing
                                                                                emit ProcessedDividendTracker(mem[mem[64]], _97662, _97663, gasForProcessing, 1, tx.origin);
                                                                    else:
                                                                        if not stor7:
                                                                            call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                 gas gas_remaining wei
                                                                                args gasForProcessing
                                                                            mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                            if ext_call.success:
                                                                                _97343 = mem[64]
                                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                                require return_data.size >= 96
                                                                                _98028 = mem[_97343 + 32]
                                                                                _98029 = mem[_97343 + 64]
                                                                                mem[mem[64]] = mem[_97343]
                                                                                mem[mem[64] + 64] = _98029
                                                                                mem[mem[64] + 96] = gasForProcessing
                                                                                emit ProcessedDividendTracker(mem[mem[64]], _98028, _98029, gasForProcessing, 1, tx.origin);
                                                                else:
                                                                    if not ext_call.success:
                                                                        if not stor7:
                                                                            call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                 gas gas_remaining wei
                                                                                args gasForProcessing
                                                                            mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                            if ext_call.success:
                                                                                _97344 = mem[64]
                                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                                require return_data.size >= 96
                                                                                _98032 = mem[_97344 + 32]
                                                                                _98033 = mem[_97344 + 64]
                                                                                mem[mem[64]] = mem[_97344]
                                                                                mem[mem[64] + 64] = _98033
                                                                                mem[mem[64] + 96] = gasForProcessing
                                                                                emit ProcessedDividendTracker(mem[mem[64]], _98032, _98033, gasForProcessing, 1, tx.origin);
                                                                    else:
                                                                        if not stor7:
                                                                            call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                 gas gas_remaining wei
                                                                                args gasForProcessing
                                                                            mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                            if ext_call.success:
                                                                                _97666 = mem[64]
                                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                                require return_data.size >= 96
                                                                                _98337 = mem[_97666 + 32]
                                                                                _98338 = mem[_97666 + 64]
                                                                                mem[mem[64]] = mem[_97666]
                                                                                mem[mem[64] + 64] = _98338
                                                                                mem[mem[64] + 96] = gasForProcessing
                                                                                emit ProcessedDividendTracker(mem[mem[64]], _98337, _98338, gasForProcessing, 1, tx.origin);
            else:
                if arg2 > maxTxAmount:
                    revert with 0, 'amount is exceeding maxTxAmount'
                if not stor22[address(arg1)]:
                    if not stor21[address(arg1)]:
                        if uniswapV2PairAddress != arg1:
                            if balanceOf[address(arg1)] > !arg2:
                                revert with 'NH{q', 17
                            if balanceOf[address(arg1)] + arg2 > maxWalletBalance:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'Recipient balance is exceeding maxWalletBalance'
                            if balanceOf[this.address] < swapTokensAtAmount:
                                if stor21[address(msg.sender)]:
                                    if not msg.sender:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                    if not arg1:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                    if balanceOf[address(msg.sender)] < arg2:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                    balanceOf[address(msg.sender)] -= arg2
                                    if balanceOf[arg1] > !arg2:
                                        revert with 'NH{q', 17
                                    balanceOf[arg1] += arg2
                                    emit Transfer(arg2, msg.sender, arg1);
                                else:
                                    if stor21[address(arg1)]:
                                        if not msg.sender:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                        if not arg1:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                        if balanceOf[address(msg.sender)] < arg2:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                        balanceOf[address(msg.sender)] -= arg2
                                        if balanceOf[arg1] > !arg2:
                                            revert with 'NH{q', 17
                                        balanceOf[arg1] += arg2
                                        emit Transfer(arg2, msg.sender, arg1);
                                    else:
                                        if stor7:
                                            if not msg.sender:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                            if not arg1:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                            if balanceOf[address(msg.sender)] < arg2:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                            balanceOf[address(msg.sender)] -= arg2
                                            if balanceOf[arg1] > !arg2:
                                                revert with 'NH{q', 17
                                            balanceOf[arg1] += arg2
                                            emit Transfer(arg2, msg.sender, arg1);
                                        else:
                                            if arg2 and totalFees > -1 / arg2:
                                                revert with 'NH{q', 17
                                            if not stor22[address(arg1)]:
                                                if arg2 < arg2 * totalFees / 100:
                                                    revert with 'NH{q', 17
                                                if not msg.sender:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                if not this.address:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                if balanceOf[address(msg.sender)] < arg2 * totalFees / 100:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                balanceOf[address(msg.sender)] -= arg2 * totalFees / 100
                                                if balanceOf[this.address] > !(arg2 * totalFees / 100):
                                                    revert with 'NH{q', 17
                                                balanceOf[this.address] += arg2 * totalFees / 100
                                                emit Transfer((arg2 * totalFees / 100), msg.sender, this.address);
                                                if not msg.sender:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                if not arg1:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100):
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100)
                                                if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100)):
                                                    revert with 'NH{q', 17
                                                balanceOf[arg1] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100)
                                                emit Transfer((arg2 - (arg2 * totalFees / 100)), msg.sender, arg1);
                                            else:
                                                if arg2 and sellFeeIncreaseFactor > -1 / arg2:
                                                    revert with 'NH{q', 17
                                                if arg2 * totalFees / 100 > !(arg2 * sellFeeIncreaseFactor / 100):
                                                    revert with 'NH{q', 17
                                                if arg2 < (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100):
                                                    revert with 'NH{q', 17
                                                if not msg.sender:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                if not this.address:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                if balanceOf[address(msg.sender)] < (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100):
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)
                                                if balanceOf[this.address] > !((arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)):
                                                    revert with 'NH{q', 17
                                                balanceOf[this.address] = balanceOf[this.address] + (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)
                                                emit Transfer(((arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)), msg.sender, this.address);
                                                if not msg.sender:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                if not arg1:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100):
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)
                                                if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)):
                                                    revert with 'NH{q', 17
                                                balanceOf[arg1] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)
                                                emit Transfer((arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)), msg.sender, arg1);
                            else:
                                if stor7:
                                    if stor21[address(msg.sender)]:
                                        if not msg.sender:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                        if not arg1:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                        if balanceOf[address(msg.sender)] < arg2:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                        balanceOf[address(msg.sender)] -= arg2
                                        if balanceOf[arg1] > !arg2:
                                            revert with 'NH{q', 17
                                        balanceOf[arg1] += arg2
                                        emit Transfer(arg2, msg.sender, arg1);
                                    else:
                                        if stor21[address(arg1)]:
                                            if not msg.sender:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                            if not arg1:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                            if balanceOf[address(msg.sender)] < arg2:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                            balanceOf[address(msg.sender)] -= arg2
                                            if balanceOf[arg1] > !arg2:
                                                revert with 'NH{q', 17
                                            balanceOf[arg1] += arg2
                                            emit Transfer(arg2, msg.sender, arg1);
                                        else:
                                            if stor7:
                                                if not msg.sender:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                if not arg1:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                if balanceOf[address(msg.sender)] < arg2:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                balanceOf[address(msg.sender)] -= arg2
                                                if balanceOf[arg1] > !arg2:
                                                    revert with 'NH{q', 17
                                                balanceOf[arg1] += arg2
                                                emit Transfer(arg2, msg.sender, arg1);
                                            else:
                                                if arg2 and totalFees > -1 / arg2:
                                                    revert with 'NH{q', 17
                                                if not stor22[address(arg1)]:
                                                    if arg2 < arg2 * totalFees / 100:
                                                        revert with 'NH{q', 17
                                                    if not msg.sender:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                    if not this.address:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                    if balanceOf[address(msg.sender)] < arg2 * totalFees / 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                    balanceOf[address(msg.sender)] -= arg2 * totalFees / 100
                                                    if balanceOf[this.address] > !(arg2 * totalFees / 100):
                                                        revert with 'NH{q', 17
                                                    balanceOf[this.address] += arg2 * totalFees / 100
                                                    emit Transfer((arg2 * totalFees / 100), msg.sender, this.address);
                                                    if not msg.sender:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                    if not arg1:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                    if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100):
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                    balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100)
                                                    if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100)):
                                                        revert with 'NH{q', 17
                                                    balanceOf[arg1] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100)
                                                    emit Transfer((arg2 - (arg2 * totalFees / 100)), msg.sender, arg1);
                                                else:
                                                    if arg2 and sellFeeIncreaseFactor > -1 / arg2:
                                                        revert with 'NH{q', 17
                                                    if arg2 * totalFees / 100 > !(arg2 * sellFeeIncreaseFactor / 100):
                                                        revert with 'NH{q', 17
                                                    if arg2 < (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100):
                                                        revert with 'NH{q', 17
                                                    if not msg.sender:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                    if not this.address:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                    if balanceOf[address(msg.sender)] < (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100):
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                    balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)
                                                    if balanceOf[this.address] > !((arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)):
                                                        revert with 'NH{q', 17
                                                    balanceOf[this.address] = balanceOf[this.address] + (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)
                                                    emit Transfer(((arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)), msg.sender, this.address);
                                                    if not msg.sender:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                    if not arg1:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                    if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100):
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                    balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)
                                                    if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)):
                                                        revert with 'NH{q', 17
                                                    balanceOf[arg1] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)
                                                    emit Transfer((arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)), msg.sender, arg1);
                                else:
                                    if stor22[address(msg.sender)]:
                                        if stor21[address(msg.sender)]:
                                            if not msg.sender:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                            if not arg1:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                            if balanceOf[address(msg.sender)] < arg2:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                            balanceOf[address(msg.sender)] -= arg2
                                            if balanceOf[arg1] > !arg2:
                                                revert with 'NH{q', 17
                                            balanceOf[arg1] += arg2
                                            emit Transfer(arg2, msg.sender, arg1);
                                        else:
                                            if stor21[address(arg1)]:
                                                if not msg.sender:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                if not arg1:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                if balanceOf[address(msg.sender)] < arg2:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                balanceOf[address(msg.sender)] -= arg2
                                                if balanceOf[arg1] > !arg2:
                                                    revert with 'NH{q', 17
                                                balanceOf[arg1] += arg2
                                                emit Transfer(arg2, msg.sender, arg1);
                                            else:
                                                if stor7:
                                                    if not msg.sender:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                    if not arg1:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                    if balanceOf[address(msg.sender)] < arg2:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                    balanceOf[address(msg.sender)] -= arg2
                                                    if balanceOf[arg1] > !arg2:
                                                        revert with 'NH{q', 17
                                                    balanceOf[arg1] += arg2
                                                    emit Transfer(arg2, msg.sender, arg1);
                                                else:
                                                    if arg2 and totalFees > -1 / arg2:
                                                        revert with 'NH{q', 17
                                                    if not stor22[address(arg1)]:
                                                        if arg2 < arg2 * totalFees / 100:
                                                            revert with 'NH{q', 17
                                                        if not msg.sender:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                        if not this.address:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                        if balanceOf[address(msg.sender)] < arg2 * totalFees / 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                        balanceOf[address(msg.sender)] -= arg2 * totalFees / 100
                                                        if balanceOf[this.address] > !(arg2 * totalFees / 100):
                                                            revert with 'NH{q', 17
                                                        balanceOf[this.address] += arg2 * totalFees / 100
                                                        emit Transfer((arg2 * totalFees / 100), msg.sender, this.address);
                                                        if not msg.sender:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                        if not arg1:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                        if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100):
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                        balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100)
                                                        if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100)):
                                                            revert with 'NH{q', 17
                                                        balanceOf[arg1] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100)
                                                        emit Transfer((arg2 - (arg2 * totalFees / 100)), msg.sender, arg1);
                                                    else:
                                                        if arg2 and sellFeeIncreaseFactor > -1 / arg2:
                                                            revert with 'NH{q', 17
                                                        if arg2 * totalFees / 100 > !(arg2 * sellFeeIncreaseFactor / 100):
                                                            revert with 'NH{q', 17
                                                        if arg2 < (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100):
                                                            revert with 'NH{q', 17
                                                        if not msg.sender:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                        if not this.address:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                        if balanceOf[address(msg.sender)] < (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100):
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                        balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)
                                                        if balanceOf[this.address] > !((arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)):
                                                            revert with 'NH{q', 17
                                                        balanceOf[this.address] = balanceOf[this.address] + (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)
                                                        emit Transfer(((arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)), msg.sender, this.address);
                                                        if not msg.sender:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                        if not arg1:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                        if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100):
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                        balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)
                                                        if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)):
                                                            revert with 'NH{q', 17
                                                        balanceOf[arg1] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)
                                                        emit Transfer((arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)), msg.sender, arg1);
                                    else:
                                        if owner == msg.sender:
                                            if stor21[address(msg.sender)]:
                                                if not msg.sender:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                if not arg1:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                if balanceOf[address(msg.sender)] < arg2:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                balanceOf[address(msg.sender)] -= arg2
                                                if balanceOf[arg1] > !arg2:
                                                    revert with 'NH{q', 17
                                                balanceOf[arg1] += arg2
                                                emit Transfer(arg2, msg.sender, arg1);
                                            else:
                                                if stor21[address(arg1)]:
                                                    if not msg.sender:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                    if not arg1:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                    if balanceOf[address(msg.sender)] < arg2:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                    balanceOf[address(msg.sender)] -= arg2
                                                    if balanceOf[arg1] > !arg2:
                                                        revert with 'NH{q', 17
                                                    balanceOf[arg1] += arg2
                                                    emit Transfer(arg2, msg.sender, arg1);
                                                else:
                                                    if stor7:
                                                        if not msg.sender:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                        if not arg1:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                        if balanceOf[address(msg.sender)] < arg2:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                        balanceOf[address(msg.sender)] -= arg2
                                                        if balanceOf[arg1] > !arg2:
                                                            revert with 'NH{q', 17
                                                        balanceOf[arg1] += arg2
                                                        emit Transfer(arg2, msg.sender, arg1);
                                                    else:
                                                        if arg2 and totalFees > -1 / arg2:
                                                            revert with 'NH{q', 17
                                                        if not stor22[address(arg1)]:
                                                            if arg2 < arg2 * totalFees / 100:
                                                                revert with 'NH{q', 17
                                                            if not msg.sender:
                                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                            if not this.address:
                                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                            if balanceOf[address(msg.sender)] < arg2 * totalFees / 100:
                                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                            balanceOf[address(msg.sender)] -= arg2 * totalFees / 100
                                                            if balanceOf[this.address] > !(arg2 * totalFees / 100):
                                                                revert with 'NH{q', 17
                                                            balanceOf[this.address] += arg2 * totalFees / 100
                                                            emit Transfer((arg2 * totalFees / 100), msg.sender, this.address);
                                                            if not msg.sender:
                                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                            if not arg1:
                                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                            if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100):
                                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                            balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100)
                                                            if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100)):
                                                                revert with 'NH{q', 17
                                                            balanceOf[arg1] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100)
                                                            emit Transfer((arg2 - (arg2 * totalFees / 100)), msg.sender, arg1);
                                                        else:
                                                            if arg2 and sellFeeIncreaseFactor > -1 / arg2:
                                                                revert with 'NH{q', 17
                                                            if arg2 * totalFees / 100 > !(arg2 * sellFeeIncreaseFactor / 100):
                                                                revert with 'NH{q', 17
                                                            if arg2 < (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100):
                                                                revert with 'NH{q', 17
                                                            if not msg.sender:
                                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                            if not this.address:
                                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                            if balanceOf[address(msg.sender)] < (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100):
                                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                            balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)
                                                            if balanceOf[this.address] > !((arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)):
                                                                revert with 'NH{q', 17
                                                            balanceOf[this.address] = balanceOf[this.address] + (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)
                                                            emit Transfer(((arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)), msg.sender, this.address);
                                                            if not msg.sender:
                                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                            if not arg1:
                                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                            if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100):
                                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                            balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)
                                                            if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)):
                                                                revert with 'NH{q', 17
                                                            balanceOf[arg1] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)
                                                            emit Transfer((arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)), msg.sender, arg1);
                                        else:
                                            if owner == arg1:
                                                if stor21[address(msg.sender)]:
                                                    if not msg.sender:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                    if not arg1:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                    if balanceOf[address(msg.sender)] < arg2:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                    balanceOf[address(msg.sender)] -= arg2
                                                    if balanceOf[arg1] > !arg2:
                                                        revert with 'NH{q', 17
                                                    balanceOf[arg1] += arg2
                                                    emit Transfer(arg2, msg.sender, arg1);
                                                else:
                                                    if stor21[address(arg1)]:
                                                        if not msg.sender:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                        if not arg1:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                        if balanceOf[address(msg.sender)] < arg2:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                        balanceOf[address(msg.sender)] -= arg2
                                                        if balanceOf[arg1] > !arg2:
                                                            revert with 'NH{q', 17
                                                        balanceOf[arg1] += arg2
                                                        emit Transfer(arg2, msg.sender, arg1);
                                                    else:
                                                        if stor7:
                                                            if not msg.sender:
                                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                            if not arg1:
                                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                            if balanceOf[address(msg.sender)] < arg2:
                                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                            balanceOf[address(msg.sender)] -= arg2
                                                            if balanceOf[arg1] > !arg2:
                                                                revert with 'NH{q', 17
                                                            balanceOf[arg1] += arg2
                                                            emit Transfer(arg2, msg.sender, arg1);
                                                        else:
                                                            if arg2 and totalFees > -1 / arg2:
                                                                revert with 'NH{q', 17
                                                            if not stor22[address(arg1)]:
                                                                if arg2 < arg2 * totalFees / 100:
                                                                    revert with 'NH{q', 17
                                                                if not msg.sender:
                                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                                if not this.address:
                                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                                if balanceOf[address(msg.sender)] < arg2 * totalFees / 100:
                                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                                balanceOf[address(msg.sender)] -= arg2 * totalFees / 100
                                                                if balanceOf[this.address] > !(arg2 * totalFees / 100):
                                                                    revert with 'NH{q', 17
                                                                balanceOf[this.address] += arg2 * totalFees / 100
                                                                emit Transfer((arg2 * totalFees / 100), msg.sender, this.address);
                                                                if not msg.sender:
                                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                                if not arg1:
                                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                                if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100):
                                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                                balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100)
                                                                if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100)):
                                                                    revert with 'NH{q', 17
                                                                balanceOf[arg1] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100)
                                                                emit Transfer((arg2 - (arg2 * totalFees / 100)), msg.sender, arg1);
                                                            else:
                                                                if arg2 and sellFeeIncreaseFactor > -1 / arg2:
                                                                    revert with 'NH{q', 17
                                                                if arg2 * totalFees / 100 > !(arg2 * sellFeeIncreaseFactor / 100):
                                                                    revert with 'NH{q', 17
                                                                if arg2 < (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100):
                                                                    revert with 'NH{q', 17
                                                                if not msg.sender:
                                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                                if not this.address:
                                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                                if balanceOf[address(msg.sender)] < (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100):
                                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                                balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)
                                                                if balanceOf[this.address] > !((arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)):
                                                                    revert with 'NH{q', 17
                                                                balanceOf[this.address] = balanceOf[this.address] + (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)
                                                                emit Transfer(((arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)), msg.sender, this.address);
                                                                if not msg.sender:
                                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                                if not arg1:
                                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                                if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100):
                                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                                balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)
                                                                if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)):
                                                                    revert with 'NH{q', 17
                                                                balanceOf[arg1] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)
                                                                emit Transfer((arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)), msg.sender, arg1);
                                            else:
                                                stor7 = 1
                                                if balanceOf[this.address] and marketingFee > -1 / balanceOf[this.address]:
                                                    revert with 'NH{q', 17
                                                if not totalFees:
                                                    revert with 'NH{q', 18
                                                mem[96] = 2
                                                mem[128] = this.address
                                                staticcall uniswapV2RouterAddress.WETH() with:
                                                        gas gas_remaining wei
                                                mem[192] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                mem[160] = ext_call.return_data[12 len 20]
                                                if not this.address:
                                                    revert with 0, 'ERC20: approve from the zero address'
                                                if not uniswapV2RouterAddress:
                                                    revert with 0, 'ERC20: approve to the zero address'
                                                allowance[address(this.address)][stor6].field_0 = balanceOf[this.address] * marketingFee / totalFees
                                                emit Approval((balanceOf[this.address] * marketingFee / totalFees), this.address, uniswapV2RouterAddress);
                                                mem[ceil32(return_data.size) + 192] = 0x791ac94700000000000000000000000000000000000000000000000000000000
                                                mem[ceil32(return_data.size) + 196] = balanceOf[this.address] * marketingFee / totalFees
                                                mem[ceil32(return_data.size) + 356] = 2
                                                idx = 0
                                                s = ceil32(return_data.size) + 388
                                                t = 128
                                                while idx < 2:
                                                    mem[s] = mem[t + 12 len 20]
                                                    idx = idx + 1
                                                    s = s + 32
                                                    t = t + 32
                                                    continue 
                                                mem[ceil32(return_data.size) + 292] = this.address
                                                mem[ceil32(return_data.size) + 324] = block.timestamp
                                                require ext_code.size(uniswapV2RouterAddress)
                                                call uniswapV2RouterAddress.swapExactTokensForETHSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                     gas gas_remaining wei
                                                    args balanceOf[this.address] * marketingFee / totalFees, 0, 160, address(this.address), block.timestamp, 2, mem[ceil32(return_data.size) + 388 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                call _marketingWalletAddress with:
                                                   value eth.balance(this.address) wei
                                                     gas 2300 * is_zero(value) wei
                                                if balanceOf[this.address] and liquidityFee > -1 / balanceOf[this.address]:
                                                    revert with 'NH{q', 17
                                                if not totalFees:
                                                    revert with 'NH{q', 18
                                                if balanceOf[this.address] * liquidityFee / totalFees < balanceOf[this.address] * liquidityFee / totalFees / 2:
                                                    revert with 'NH{q', 17
                                                mem[ceil32(return_data.size) + 192] = 2
                                                mem[ceil32(return_data.size) + 224] = this.address
                                                staticcall uniswapV2RouterAddress.WETH() with:
                                                        gas gas_remaining wei
                                                mem[ceil32(return_data.size) + 288] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                mem[ceil32(return_data.size) + 256] = ext_call.return_data[12 len 20]
                                                if not this.address:
                                                    revert with 0, 'ERC20: approve from the zero address'
                                                if not uniswapV2RouterAddress:
                                                    revert with 0, 'ERC20: approve to the zero address'
                                                allowance[address(this.address)][stor6].field_0 = balanceOf[this.address] * liquidityFee / totalFees / 2
                                                allowance[address(this.address)][stor6].field_255 = 0
                                                emit Approval((balanceOf[this.address] * liquidityFee / totalFees / 2), this.address, uniswapV2RouterAddress);
                                                mem[(2 * ceil32(return_data.size)) + 288] = 0x791ac94700000000000000000000000000000000000000000000000000000000
                                                mem[(2 * ceil32(return_data.size)) + 292] = balanceOf[this.address] * liquidityFee / totalFees / 2
                                                mem[(2 * ceil32(return_data.size)) + 324] = 0
                                                mem[(2 * ceil32(return_data.size)) + 356] = 160
                                                mem[(2 * ceil32(return_data.size)) + 452] = 2
                                                idx = 0
                                                s = (2 * ceil32(return_data.size)) + 484
                                                t = ceil32(return_data.size) + 224
                                                while idx < mem[ceil32(return_data.size) + 192]:
                                                    mem[s] = mem[t + 12 len 20]
                                                    idx = idx + 1
                                                    s = s + 32
                                                    t = t + 32
                                                    continue 
                                                mem[(2 * ceil32(return_data.size)) + 388] = this.address
                                                mem[(2 * ceil32(return_data.size)) + 420] = block.timestamp
                                                require ext_code.size(uniswapV2RouterAddress)
                                                call uniswapV2RouterAddress.swapExactTokensForETHSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                     gas gas_remaining wei
                                                    args Mask(255, 1, balanceOf[this.address] * liquidityFee / totalFees), 0, 160, address(this.address), block.timestamp, mem[(2 * ceil32(return_data.size)) + 452 len (32 * mem[ceil32(return_data.size) + 192]) + 32]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                if eth.balance(this.address) < eth.balance(this.address):
                                                    revert with 'NH{q', 17
                                                if not this.address:
                                                    revert with 0, 'ERC20: approve from the zero address'
                                                if not uniswapV2RouterAddress:
                                                    revert with 0, 'ERC20: approve to the zero address'
                                                allowance[address(this.address)][stor6].field_0 = (balanceOf[this.address] * liquidityFee / totalFees) - (balanceOf[this.address] * liquidityFee / totalFees / 2)
                                                emit Approval(((balanceOf[this.address] * liquidityFee / totalFees) - (balanceOf[this.address] * liquidityFee / totalFees / 2)), this.address, uniswapV2RouterAddress);
                                                mem[(2 * ceil32(return_data.size)) + 292] = this.address
                                                mem[(2 * ceil32(return_data.size)) + 324] = (balanceOf[this.address] * liquidityFee / totalFees) - (balanceOf[this.address] * liquidityFee / totalFees / 2)
                                                mem[(2 * ceil32(return_data.size)) + 356] = 0
                                                mem[(2 * ceil32(return_data.size)) + 388] = 0
                                                mem[(2 * ceil32(return_data.size)) + 420] = 0
                                                mem[(2 * ceil32(return_data.size)) + 452] = block.timestamp
                                                call uniswapV2RouterAddress.addLiquidityETH(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                                     gas gas_remaining wei
                                                    args this.address, (balanceOf[this.address] * liquidityFee / totalFees) - (balanceOf[this.address] * liquidityFee / totalFees / 2), 0, 0, 0, block.timestamp
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 96
                                                emit SwapAndLiquify(Mask(255, 1, balanceOf[this.address] * liquidityFee / totalFees), 0, (balanceOf[this.address] * liquidityFee / totalFees) - (balanceOf[this.address] * liquidityFee / totalFees / 2));
                                                mem[(4 * ceil32(return_data.size)) + 288] = 2
                                                mem[(4 * ceil32(return_data.size)) + 320] = this.address
                                                staticcall uniswapV2RouterAddress.WETH() with:
                                                        gas gas_remaining wei
                                                mem[(4 * ceil32(return_data.size)) + 384] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[64] = (6 * ceil32(return_data.size)) + 384
                                                require return_data.size >= 32
                                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                mem[(4 * ceil32(return_data.size)) + 352] = ext_call.return_data[12 len 20]
                                                if not this.address:
                                                    revert with 0, 'ERC20: approve from the zero address'
                                                if not uniswapV2RouterAddress:
                                                    revert with 0, 'ERC20: approve to the zero address'
                                                mem[0] = uniswapV2RouterAddress
                                                mem[32] = sha3(address(this.address), 1)
                                                allowance[address(this.address)][stor6].field_0 = balanceOf[this.address]
                                                emit Approval(balanceOf[this.address], this.address, uniswapV2RouterAddress);
                                                mem[(6 * ceil32(return_data.size)) + 384] = 0x791ac94700000000000000000000000000000000000000000000000000000000
                                                mem[(6 * ceil32(return_data.size)) + 388] = balanceOf[this.address]
                                                mem[(6 * ceil32(return_data.size)) + 420] = 0
                                                mem[(6 * ceil32(return_data.size)) + 452] = 160
                                                mem[(6 * ceil32(return_data.size)) + 548] = 2
                                                idx = 0
                                                s = (6 * ceil32(return_data.size)) + 580
                                                t = (4 * ceil32(return_data.size)) + 320
                                                while idx < mem[(4 * ceil32(return_data.size)) + 288]:
                                                    mem[s] = mem[t + 12 len 20]
                                                    idx = idx + 1
                                                    s = s + 32
                                                    t = t + 32
                                                    continue 
                                                require ext_code.size(uniswapV2RouterAddress)
                                                call uniswapV2RouterAddress.swapExactTokensForETHSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                     gas gas_remaining wei
                                                    args balanceOf[this.address], 0, 160, address(this.address), block.timestamp, mem[(6 * ceil32(return_data.size)) + 548 len (32 * mem[(4 * ceil32(return_data.size)) + 288]) + 32]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                call dividendTrackerAddress with:
                                                   value eth.balance(this.address) wei
                                                     gas gas_remaining wei
                                                if ext_call.success:
                                                    emit SendDividends(balanceOf[this.address], eth.balance(this.address));
                                                stor7 = 0
                                                if stor21[address(msg.sender)]:
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if not arg1:
                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                    if balanceOf[address(msg.sender)] < arg2:
                                                        revert with 0, 'ERC20: transfer amount exceeds balance'
                                                    balanceOf[address(msg.sender)] -= arg2
                                                    if balanceOf[arg1] > !arg2:
                                                        revert with 'NH{q', 17
                                                    balanceOf[arg1] += arg2
                                                    emit Transfer(arg2, msg.sender, arg1);
                                                else:
                                                    if stor21[address(arg1)]:
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if not arg1:
                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                        if balanceOf[address(msg.sender)] < arg2:
                                                            revert with 0, 'ERC20: transfer amount exceeds balance'
                                                        balanceOf[address(msg.sender)] -= arg2
                                                        if balanceOf[arg1] > !arg2:
                                                            revert with 'NH{q', 17
                                                        balanceOf[arg1] += arg2
                                                        emit Transfer(arg2, msg.sender, arg1);
                                                    else:
                                                        if stor7:
                                                            if not msg.sender:
                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                            if not arg1:
                                                                revert with 0, 'ERC20: transfer to the zero address'
                                                            if balanceOf[address(msg.sender)] < arg2:
                                                                revert with 0, 'ERC20: transfer amount exceeds balance'
                                                            balanceOf[address(msg.sender)] -= arg2
                                                            if balanceOf[arg1] > !arg2:
                                                                revert with 'NH{q', 17
                                                            balanceOf[arg1] += arg2
                                                            emit Transfer(arg2, msg.sender, arg1);
                                                        else:
                                                            if arg2 and totalFees > -1 / arg2:
                                                                revert with 'NH{q', 17
                                                            if not stor22[address(arg1)]:
                                                                if arg2 < arg2 * totalFees / 100:
                                                                    revert with 'NH{q', 17
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                if not this.address:
                                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                                if balanceOf[address(msg.sender)] < arg2 * totalFees / 100:
                                                                    revert with 0, 'ERC20: transfer amount exceeds balance'
                                                                balanceOf[address(msg.sender)] -= arg2 * totalFees / 100
                                                                if balanceOf[this.address] > !(arg2 * totalFees / 100):
                                                                    revert with 'NH{q', 17
                                                                balanceOf[this.address] += arg2 * totalFees / 100
                                                                emit Transfer((arg2 * totalFees / 100), msg.sender, this.address);
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                if not arg1:
                                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                                if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100):
                                                                    revert with 0, 'ERC20: transfer amount exceeds balance'
                                                                balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100)
                                                                if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100)):
                                                                    revert with 'NH{q', 17
                                                                balanceOf[arg1] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100)
                                                                emit Transfer((arg2 - (arg2 * totalFees / 100)), msg.sender, arg1);
                                                            else:
                                                                if arg2 and sellFeeIncreaseFactor > -1 / arg2:
                                                                    revert with 'NH{q', 17
                                                                if arg2 * totalFees / 100 > !(arg2 * sellFeeIncreaseFactor / 100):
                                                                    revert with 'NH{q', 17
                                                                if arg2 < (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100):
                                                                    revert with 'NH{q', 17
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                if not this.address:
                                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                                if balanceOf[address(msg.sender)] < (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100):
                                                                    revert with 0, 'ERC20: transfer amount exceeds balance'
                                                                balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)
                                                                if balanceOf[this.address] > !((arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)):
                                                                    revert with 'NH{q', 17
                                                                balanceOf[this.address] = balanceOf[this.address] + (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)
                                                                emit Transfer(((arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)), msg.sender, this.address);
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                if not arg1:
                                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                                if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100):
                                                                    revert with 0, 'ERC20: transfer amount exceeds balance'
                                                                balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)
                                                                if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)):
                                                                    revert with 'NH{q', 17
                                                                balanceOf[arg1] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)
                                                                emit Transfer((arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)), msg.sender, arg1);
                            require ext_code.size(dividendTrackerAddress)
                            call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                 gas gas_remaining wei
                                args msg.sender, balanceOf[address(msg.sender)]
                            require ext_code.size(dividendTrackerAddress)
                            call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                 gas gas_remaining wei
                                args address(arg1), balanceOf[address(arg1)]
                            if not stor7:
                                call dividendTrackerAddress.process(uint256 arg1) with:
                                     gas gas_remaining wei
                                    args gasForProcessing
                                if ext_call.success:
                                    require return_data.size >= 96
                                    emit ProcessedDividendTracker(ext_call.return_data[0], ext_call.return_data[32], ext_call.return_data[64], gasForProcessing, 1, tx.origin);
                        else:
                            if balanceOf[this.address] < swapTokensAtAmount:
                                if stor21[address(msg.sender)]:
                                    if not msg.sender:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                    if not arg1:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                    if balanceOf[address(msg.sender)] < arg2:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                    balanceOf[address(msg.sender)] -= arg2
                                    if balanceOf[arg1] > !arg2:
                                        revert with 'NH{q', 17
                                    balanceOf[arg1] += arg2
                                    emit Transfer(arg2, msg.sender, arg1);
                                else:
                                    if stor21[address(arg1)]:
                                        if not msg.sender:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                        if not arg1:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                        if balanceOf[address(msg.sender)] < arg2:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                        balanceOf[address(msg.sender)] -= arg2
                                        if balanceOf[arg1] > !arg2:
                                            revert with 'NH{q', 17
                                        balanceOf[arg1] += arg2
                                        emit Transfer(arg2, msg.sender, arg1);
                                    else:
                                        if stor7:
                                            if not msg.sender:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                            if not arg1:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                            if balanceOf[address(msg.sender)] < arg2:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                            balanceOf[address(msg.sender)] -= arg2
                                            if balanceOf[arg1] > !arg2:
                                                revert with 'NH{q', 17
                                            balanceOf[arg1] += arg2
                                            emit Transfer(arg2, msg.sender, arg1);
                                        else:
                                            if arg2 and totalFees > -1 / arg2:
                                                revert with 'NH{q', 17
                                            if not stor22[address(arg1)]:
                                                if arg2 < arg2 * totalFees / 100:
                                                    revert with 'NH{q', 17
                                                if not msg.sender:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                if not this.address:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                if balanceOf[address(msg.sender)] < arg2 * totalFees / 100:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                balanceOf[address(msg.sender)] -= arg2 * totalFees / 100
                                                if balanceOf[this.address] > !(arg2 * totalFees / 100):
                                                    revert with 'NH{q', 17
                                                balanceOf[this.address] += arg2 * totalFees / 100
                                                emit Transfer((arg2 * totalFees / 100), msg.sender, this.address);
                                                if not msg.sender:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                if not arg1:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100):
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100)
                                                if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100)):
                                                    revert with 'NH{q', 17
                                                balanceOf[arg1] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100)
                                                emit Transfer((arg2 - (arg2 * totalFees / 100)), msg.sender, arg1);
                                            else:
                                                if arg2 and sellFeeIncreaseFactor > -1 / arg2:
                                                    revert with 'NH{q', 17
                                                if arg2 * totalFees / 100 > !(arg2 * sellFeeIncreaseFactor / 100):
                                                    revert with 'NH{q', 17
                                                if arg2 < (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100):
                                                    revert with 'NH{q', 17
                                                if not msg.sender:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                if not this.address:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                if balanceOf[address(msg.sender)] < (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100):
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)
                                                if balanceOf[this.address] > !((arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)):
                                                    revert with 'NH{q', 17
                                                balanceOf[this.address] = balanceOf[this.address] + (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)
                                                emit Transfer(((arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)), msg.sender, this.address);
                                                if not msg.sender:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                if not arg1:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100):
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)
                                                if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)):
                                                    revert with 'NH{q', 17
                                                balanceOf[arg1] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)
                                                emit Transfer((arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)), msg.sender, arg1);
                                require ext_code.size(dividendTrackerAddress)
                                call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                     gas gas_remaining wei
                                    args msg.sender, balanceOf[address(msg.sender)]
                                require ext_code.size(dividendTrackerAddress)
                                call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                     gas gas_remaining wei
                                    args address(arg1), balanceOf[address(arg1)]
                                if not stor7:
                                    call dividendTrackerAddress.process(uint256 arg1) with:
                                         gas gas_remaining wei
                                        args gasForProcessing
                                    if ext_call.success:
                                        require return_data.size >= 96
                                        emit ProcessedDividendTracker(ext_call.return_data[0], ext_call.return_data[32], ext_call.return_data[64], gasForProcessing, 1, tx.origin);
                            else:
                                if stor7:
                                    if stor21[address(msg.sender)]:
                                        if not msg.sender:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                        if not arg1:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                        if balanceOf[address(msg.sender)] < arg2:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                        balanceOf[address(msg.sender)] -= arg2
                                        if balanceOf[arg1] > !arg2:
                                            revert with 'NH{q', 17
                                        balanceOf[arg1] += arg2
                                        emit Transfer(arg2, msg.sender, arg1);
                                    else:
                                        if stor21[address(arg1)]:
                                            if not msg.sender:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                            if not arg1:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                            if balanceOf[address(msg.sender)] < arg2:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                            balanceOf[address(msg.sender)] -= arg2
                                            if balanceOf[arg1] > !arg2:
                                                revert with 'NH{q', 17
                                            balanceOf[arg1] += arg2
                                            emit Transfer(arg2, msg.sender, arg1);
                                        else:
                                            if stor7:
                                                if not msg.sender:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                if not arg1:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                if balanceOf[address(msg.sender)] < arg2:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                balanceOf[address(msg.sender)] -= arg2
                                                if balanceOf[arg1] > !arg2:
                                                    revert with 'NH{q', 17
                                                balanceOf[arg1] += arg2
                                                emit Transfer(arg2, msg.sender, arg1);
                                            else:
                                                if arg2 and totalFees > -1 / arg2:
                                                    revert with 'NH{q', 17
                                                if not stor22[address(arg1)]:
                                                    if arg2 < arg2 * totalFees / 100:
                                                        revert with 'NH{q', 17
                                                    if not msg.sender:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                    if not this.address:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                    if balanceOf[address(msg.sender)] < arg2 * totalFees / 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                    balanceOf[address(msg.sender)] -= arg2 * totalFees / 100
                                                    if balanceOf[this.address] > !(arg2 * totalFees / 100):
                                                        revert with 'NH{q', 17
                                                    balanceOf[this.address] += arg2 * totalFees / 100
                                                    emit Transfer((arg2 * totalFees / 100), msg.sender, this.address);
                                                    if not msg.sender:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                    if not arg1:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                    if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100):
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                    balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100)
                                                    if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100)):
                                                        revert with 'NH{q', 17
                                                    balanceOf[arg1] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100)
                                                    emit Transfer((arg2 - (arg2 * totalFees / 100)), msg.sender, arg1);
                                                else:
                                                    if arg2 and sellFeeIncreaseFactor > -1 / arg2:
                                                        revert with 'NH{q', 17
                                                    if arg2 * totalFees / 100 > !(arg2 * sellFeeIncreaseFactor / 100):
                                                        revert with 'NH{q', 17
                                                    if arg2 < (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100):
                                                        revert with 'NH{q', 17
                                                    if not msg.sender:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                    if not this.address:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                    if balanceOf[address(msg.sender)] < (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100):
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                    balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)
                                                    if balanceOf[this.address] > !((arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)):
                                                        revert with 'NH{q', 17
                                                    balanceOf[this.address] = balanceOf[this.address] + (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)
                                                    emit Transfer(((arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)), msg.sender, this.address);
                                                    if not msg.sender:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                    if not arg1:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                    if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100):
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                    balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)
                                                    if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)):
                                                        revert with 'NH{q', 17
                                                    balanceOf[arg1] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)
                                                    emit Transfer((arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)), msg.sender, arg1);
                                    require ext_code.size(dividendTrackerAddress)
                                    call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                         gas gas_remaining wei
                                        args msg.sender, balanceOf[address(msg.sender)]
                                    require ext_code.size(dividendTrackerAddress)
                                    call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                         gas gas_remaining wei
                                        args address(arg1), balanceOf[address(arg1)]
                                    if not stor7:
                                        call dividendTrackerAddress.process(uint256 arg1) with:
                                             gas gas_remaining wei
                                            args gasForProcessing
                                        if ext_call.success:
                                            require return_data.size >= 96
                                            emit ProcessedDividendTracker(ext_call.return_data[0], ext_call.return_data[32], ext_call.return_data[64], gasForProcessing, 1, tx.origin);
                                else:
                                    if stor22[address(msg.sender)]:
                                        if stor21[address(msg.sender)]:
                                            if not msg.sender:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                            if not arg1:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                            if balanceOf[address(msg.sender)] < arg2:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                            balanceOf[address(msg.sender)] -= arg2
                                            if balanceOf[arg1] > !arg2:
                                                revert with 'NH{q', 17
                                            balanceOf[arg1] += arg2
                                            emit Transfer(arg2, msg.sender, arg1);
                                        else:
                                            if stor21[address(arg1)]:
                                                if not msg.sender:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                if not arg1:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                if balanceOf[address(msg.sender)] < arg2:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                balanceOf[address(msg.sender)] -= arg2
                                                if balanceOf[arg1] > !arg2:
                                                    revert with 'NH{q', 17
                                                balanceOf[arg1] += arg2
                                                emit Transfer(arg2, msg.sender, arg1);
                                            else:
                                                if stor7:
                                                    if not msg.sender:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                    if not arg1:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                    if balanceOf[address(msg.sender)] < arg2:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                    balanceOf[address(msg.sender)] -= arg2
                                                    if balanceOf[arg1] > !arg2:
                                                        revert with 'NH{q', 17
                                                    balanceOf[arg1] += arg2
                                                    emit Transfer(arg2, msg.sender, arg1);
                                                else:
                                                    if arg2 and totalFees > -1 / arg2:
                                                        revert with 'NH{q', 17
                                                    if not stor22[address(arg1)]:
                                                        if arg2 < arg2 * totalFees / 100:
                                                            revert with 'NH{q', 17
                                                        if not msg.sender:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                        if not this.address:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                        if balanceOf[address(msg.sender)] < arg2 * totalFees / 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                        balanceOf[address(msg.sender)] -= arg2 * totalFees / 100
                                                        if balanceOf[this.address] > !(arg2 * totalFees / 100):
                                                            revert with 'NH{q', 17
                                                        balanceOf[this.address] += arg2 * totalFees / 100
                                                        emit Transfer((arg2 * totalFees / 100), msg.sender, this.address);
                                                        if not msg.sender:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                        if not arg1:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                        if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100):
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                        balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100)
                                                        if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100)):
                                                            revert with 'NH{q', 17
                                                        balanceOf[arg1] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100)
                                                        emit Transfer((arg2 - (arg2 * totalFees / 100)), msg.sender, arg1);
                                                    else:
                                                        if arg2 and sellFeeIncreaseFactor > -1 / arg2:
                                                            revert with 'NH{q', 17
                                                        if arg2 * totalFees / 100 > !(arg2 * sellFeeIncreaseFactor / 100):
                                                            revert with 'NH{q', 17
                                                        if arg2 < (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100):
                                                            revert with 'NH{q', 17
                                                        if not msg.sender:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                        if not this.address:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                        if balanceOf[address(msg.sender)] < (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100):
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                        balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)
                                                        if balanceOf[this.address] > !((arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)):
                                                            revert with 'NH{q', 17
                                                        balanceOf[this.address] = balanceOf[this.address] + (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)
                                                        emit Transfer(((arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)), msg.sender, this.address);
                                                        if not msg.sender:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                        if not arg1:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                        if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100):
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                        balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)
                                                        if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)):
                                                            revert with 'NH{q', 17
                                                        balanceOf[arg1] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)
                                                        emit Transfer((arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)), msg.sender, arg1);
                                        require ext_code.size(dividendTrackerAddress)
                                        call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                             gas gas_remaining wei
                                            args msg.sender, balanceOf[address(msg.sender)]
                                        require ext_code.size(dividendTrackerAddress)
                                        call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                             gas gas_remaining wei
                                            args address(arg1), balanceOf[address(arg1)]
                                        if not stor7:
                                            call dividendTrackerAddress.process(uint256 arg1) with:
                                                 gas gas_remaining wei
                                                args gasForProcessing
                                            if ext_call.success:
                                                require return_data.size >= 96
                                                emit ProcessedDividendTracker(ext_call.return_data[0], ext_call.return_data[32], ext_call.return_data[64], gasForProcessing, 1, tx.origin);
                                    else:
                                        if owner == msg.sender:
                                            if stor21[address(msg.sender)]:
                                                if not msg.sender:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                if not arg1:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                if balanceOf[address(msg.sender)] < arg2:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                balanceOf[address(msg.sender)] -= arg2
                                                if balanceOf[arg1] > !arg2:
                                                    revert with 'NH{q', 17
                                                balanceOf[arg1] += arg2
                                                emit Transfer(arg2, msg.sender, arg1);
                                            else:
                                                if stor21[address(arg1)]:
                                                    if not msg.sender:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                    if not arg1:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                    if balanceOf[address(msg.sender)] < arg2:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                    balanceOf[address(msg.sender)] -= arg2
                                                    if balanceOf[arg1] > !arg2:
                                                        revert with 'NH{q', 17
                                                    balanceOf[arg1] += arg2
                                                    emit Transfer(arg2, msg.sender, arg1);
                                                else:
                                                    if stor7:
                                                        if not msg.sender:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                        if not arg1:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                        if balanceOf[address(msg.sender)] < arg2:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                        balanceOf[address(msg.sender)] -= arg2
                                                        if balanceOf[arg1] > !arg2:
                                                            revert with 'NH{q', 17
                                                        balanceOf[arg1] += arg2
                                                        emit Transfer(arg2, msg.sender, arg1);
                                                    else:
                                                        if arg2 and totalFees > -1 / arg2:
                                                            revert with 'NH{q', 17
                                                        if not stor22[address(arg1)]:
                                                            if arg2 < arg2 * totalFees / 100:
                                                                revert with 'NH{q', 17
                                                            if not msg.sender:
                                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                            if not this.address:
                                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                            if balanceOf[address(msg.sender)] < arg2 * totalFees / 100:
                                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                            balanceOf[address(msg.sender)] -= arg2 * totalFees / 100
                                                            if balanceOf[this.address] > !(arg2 * totalFees / 100):
                                                                revert with 'NH{q', 17
                                                            balanceOf[this.address] += arg2 * totalFees / 100
                                                            emit Transfer((arg2 * totalFees / 100), msg.sender, this.address);
                                                            if not msg.sender:
                                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                            if not arg1:
                                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                            if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100):
                                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                            balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100)
                                                            if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100)):
                                                                revert with 'NH{q', 17
                                                            balanceOf[arg1] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100)
                                                            emit Transfer((arg2 - (arg2 * totalFees / 100)), msg.sender, arg1);
                                                        else:
                                                            if arg2 and sellFeeIncreaseFactor > -1 / arg2:
                                                                revert with 'NH{q', 17
                                                            if arg2 * totalFees / 100 > !(arg2 * sellFeeIncreaseFactor / 100):
                                                                revert with 'NH{q', 17
                                                            if arg2 < (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100):
                                                                revert with 'NH{q', 17
                                                            if not msg.sender:
                                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                            if not this.address:
                                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                            if balanceOf[address(msg.sender)] < (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100):
                                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                            balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)
                                                            if balanceOf[this.address] > !((arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)):
                                                                revert with 'NH{q', 17
                                                            balanceOf[this.address] = balanceOf[this.address] + (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)
                                                            emit Transfer(((arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)), msg.sender, this.address);
                                                            if not msg.sender:
                                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                            if not arg1:
                                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                            if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100):
                                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                            balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)
                                                            if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)):
                                                                revert with 'NH{q', 17
                                                            balanceOf[arg1] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)
                                                            emit Transfer((arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)), msg.sender, arg1);
                                            require ext_code.size(dividendTrackerAddress)
                                            call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args msg.sender, balanceOf[address(msg.sender)]
                                            require ext_code.size(dividendTrackerAddress)
                                            call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args address(arg1), balanceOf[address(arg1)]
                                            if not stor7:
                                                call dividendTrackerAddress.process(uint256 arg1) with:
                                                     gas gas_remaining wei
                                                    args gasForProcessing
                                                if ext_call.success:
                                                    require return_data.size >= 96
                                                    emit ProcessedDividendTracker(ext_call.return_data[0], ext_call.return_data[32], ext_call.return_data[64], gasForProcessing, 1, tx.origin);
                                        else:
                                            if owner == arg1:
                                                if stor21[address(msg.sender)]:
                                                    if not msg.sender:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                    if not arg1:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                    if balanceOf[address(msg.sender)] < arg2:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                    balanceOf[address(msg.sender)] -= arg2
                                                    if balanceOf[arg1] > !arg2:
                                                        revert with 'NH{q', 17
                                                    balanceOf[arg1] += arg2
                                                    emit Transfer(arg2, msg.sender, arg1);
                                                else:
                                                    if stor21[address(arg1)]:
                                                        if not msg.sender:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                        if not arg1:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                        if balanceOf[address(msg.sender)] < arg2:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                        balanceOf[address(msg.sender)] -= arg2
                                                        if balanceOf[arg1] > !arg2:
                                                            revert with 'NH{q', 17
                                                        balanceOf[arg1] += arg2
                                                        emit Transfer(arg2, msg.sender, arg1);
                                                    else:
                                                        if stor7:
                                                            if not msg.sender:
                                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                            if not arg1:
                                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                            if balanceOf[address(msg.sender)] < arg2:
                                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                            balanceOf[address(msg.sender)] -= arg2
                                                            if balanceOf[arg1] > !arg2:
                                                                revert with 'NH{q', 17
                                                            balanceOf[arg1] += arg2
                                                            emit Transfer(arg2, msg.sender, arg1);
                                                        else:
                                                            if arg2 and totalFees > -1 / arg2:
                                                                revert with 'NH{q', 17
                                                            if not stor22[address(arg1)]:
                                                                if arg2 < arg2 * totalFees / 100:
                                                                    revert with 'NH{q', 17
                                                                if not msg.sender:
                                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                                if not this.address:
                                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                                if balanceOf[address(msg.sender)] < arg2 * totalFees / 100:
                                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                                balanceOf[address(msg.sender)] -= arg2 * totalFees / 100
                                                                if balanceOf[this.address] > !(arg2 * totalFees / 100):
                                                                    revert with 'NH{q', 17
                                                                balanceOf[this.address] += arg2 * totalFees / 100
                                                                emit Transfer((arg2 * totalFees / 100), msg.sender, this.address);
                                                                if not msg.sender:
                                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                                if not arg1:
                                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                                if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100):
                                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                                balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100)
                                                                if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100)):
                                                                    revert with 'NH{q', 17
                                                                balanceOf[arg1] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100)
                                                                emit Transfer((arg2 - (arg2 * totalFees / 100)), msg.sender, arg1);
                                                            else:
                                                                if arg2 and sellFeeIncreaseFactor > -1 / arg2:
                                                                    revert with 'NH{q', 17
                                                                if arg2 * totalFees / 100 > !(arg2 * sellFeeIncreaseFactor / 100):
                                                                    revert with 'NH{q', 17
                                                                if arg2 < (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100):
                                                                    revert with 'NH{q', 17
                                                                if not msg.sender:
                                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                                if not this.address:
                                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                                if balanceOf[address(msg.sender)] < (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100):
                                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                                balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)
                                                                if balanceOf[this.address] > !((arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)):
                                                                    revert with 'NH{q', 17
                                                                balanceOf[this.address] = balanceOf[this.address] + (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)
                                                                emit Transfer(((arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)), msg.sender, this.address);
                                                                if not msg.sender:
                                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                                if not arg1:
                                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                                if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100):
                                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                                balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)
                                                                if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)):
                                                                    revert with 'NH{q', 17
                                                                balanceOf[arg1] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)
                                                                emit Transfer((arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)), msg.sender, arg1);
                                                require ext_code.size(dividendTrackerAddress)
                                                call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args msg.sender, balanceOf[address(msg.sender)]
                                                require ext_code.size(dividendTrackerAddress)
                                                call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(arg1), balanceOf[address(arg1)]
                                                if not stor7:
                                                    call dividendTrackerAddress.process(uint256 arg1) with:
                                                         gas gas_remaining wei
                                                        args gasForProcessing
                                                    if ext_call.success:
                                                        require return_data.size >= 96
                                                        emit ProcessedDividendTracker(ext_call.return_data[0], ext_call.return_data[32], ext_call.return_data[64], gasForProcessing, 1, tx.origin);
                                            else:
                                                stor7 = 1
                                                if balanceOf[this.address] and marketingFee > -1 / balanceOf[this.address]:
                                                    revert with 'NH{q', 17
                                                if not totalFees:
                                                    revert with 'NH{q', 18
                                                mem[96] = 2
                                                mem[128] = this.address
                                                staticcall uniswapV2RouterAddress.WETH() with:
                                                        gas gas_remaining wei
                                                mem[192] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                mem[160] = ext_call.return_data[12 len 20]
                                                if not this.address:
                                                    revert with 0, 'ERC20: approve from the zero address'
                                                if not uniswapV2RouterAddress:
                                                    revert with 0, 'ERC20: approve to the zero address'
                                                allowance[address(this.address)][stor6].field_0 = balanceOf[this.address] * marketingFee / totalFees
                                                emit Approval((balanceOf[this.address] * marketingFee / totalFees), this.address, uniswapV2RouterAddress);
                                                mem[ceil32(return_data.size) + 192] = 0x791ac94700000000000000000000000000000000000000000000000000000000
                                                mem[ceil32(return_data.size) + 196] = balanceOf[this.address] * marketingFee / totalFees
                                                mem[ceil32(return_data.size) + 356] = 2
                                                idx = 0
                                                s = ceil32(return_data.size) + 388
                                                t = 128
                                                while idx < 2:
                                                    mem[s] = mem[t + 12 len 20]
                                                    idx = idx + 1
                                                    s = s + 32
                                                    t = t + 32
                                                    continue 
                                                mem[ceil32(return_data.size) + 292] = this.address
                                                mem[ceil32(return_data.size) + 324] = block.timestamp
                                                require ext_code.size(uniswapV2RouterAddress)
                                                call uniswapV2RouterAddress.swapExactTokensForETHSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                     gas gas_remaining wei
                                                    args balanceOf[this.address] * marketingFee / totalFees, 0, 160, address(this.address), block.timestamp, 2, mem[ceil32(return_data.size) + 388 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                call _marketingWalletAddress with:
                                                   value eth.balance(this.address) wei
                                                     gas 2300 * is_zero(value) wei
                                                if balanceOf[this.address] and liquidityFee > -1 / balanceOf[this.address]:
                                                    revert with 'NH{q', 17
                                                if not totalFees:
                                                    revert with 'NH{q', 18
                                                if balanceOf[this.address] * liquidityFee / totalFees < balanceOf[this.address] * liquidityFee / totalFees / 2:
                                                    revert with 'NH{q', 17
                                                mem[ceil32(return_data.size) + 192] = 2
                                                mem[ceil32(return_data.size) + 224] = this.address
                                                staticcall uniswapV2RouterAddress.WETH() with:
                                                        gas gas_remaining wei
                                                mem[ceil32(return_data.size) + 288] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                mem[ceil32(return_data.size) + 256] = ext_call.return_data[12 len 20]
                                                if not this.address:
                                                    revert with 0, 'ERC20: approve from the zero address'
                                                if not uniswapV2RouterAddress:
                                                    revert with 0, 'ERC20: approve to the zero address'
                                                allowance[address(this.address)][stor6].field_0 = balanceOf[this.address] * liquidityFee / totalFees / 2
                                                allowance[address(this.address)][stor6].field_255 = 0
                                                emit Approval((balanceOf[this.address] * liquidityFee / totalFees / 2), this.address, uniswapV2RouterAddress);
                                                mem[(2 * ceil32(return_data.size)) + 288] = 0x791ac94700000000000000000000000000000000000000000000000000000000
                                                mem[(2 * ceil32(return_data.size)) + 292] = balanceOf[this.address] * liquidityFee / totalFees / 2
                                                mem[(2 * ceil32(return_data.size)) + 324] = 0
                                                mem[(2 * ceil32(return_data.size)) + 356] = 160
                                                mem[(2 * ceil32(return_data.size)) + 452] = 2
                                                idx = 0
                                                s = (2 * ceil32(return_data.size)) + 484
                                                t = ceil32(return_data.size) + 224
                                                while idx < mem[ceil32(return_data.size) + 192]:
                                                    mem[s] = mem[t + 12 len 20]
                                                    idx = idx + 1
                                                    s = s + 32
                                                    t = t + 32
                                                    continue 
                                                mem[(2 * ceil32(return_data.size)) + 388] = this.address
                                                mem[(2 * ceil32(return_data.size)) + 420] = block.timestamp
                                                require ext_code.size(uniswapV2RouterAddress)
                                                call uniswapV2RouterAddress.swapExactTokensForETHSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                     gas gas_remaining wei
                                                    args Mask(255, 1, balanceOf[this.address] * liquidityFee / totalFees), 0, 160, address(this.address), block.timestamp, mem[(2 * ceil32(return_data.size)) + 452 len (32 * mem[ceil32(return_data.size) + 192]) + 32]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                if eth.balance(this.address) < eth.balance(this.address):
                                                    revert with 'NH{q', 17
                                                if not this.address:
                                                    mem[(2 * ceil32(return_data.size)) + 288] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(2 * ceil32(return_data.size)) + 292] = 32
                                                    mem[(2 * ceil32(return_data.size)) + 324] = 36
                                                    mem[(2 * ceil32(return_data.size)) + 356] = 'ERC20: approve from the zero add'
                                                    mem[(2 * ceil32(return_data.size)) + 388] = 'ress'
                                                    revert with memory
                                                      from (2 * ceil32(return_data.size)) + 288
                                                       len ceil32(return_data.size) + 132
                                                if not uniswapV2RouterAddress:
                                                    mem[(2 * ceil32(return_data.size)) + 288] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(2 * ceil32(return_data.size)) + 292] = 32
                                                    mem[(2 * ceil32(return_data.size)) + 324] = 34
                                                    mem[(2 * ceil32(return_data.size)) + 356] = 'ERC20: approve to the zero addre'
                                                    mem[(2 * ceil32(return_data.size)) + 388] = 'ss'
                                                    revert with memory
                                                      from (2 * ceil32(return_data.size)) + 288
                                                       len ceil32(return_data.size) + 132
                                                allowance[address(this.address)][stor6].field_0 = (balanceOf[this.address] * liquidityFee / totalFees) - (balanceOf[this.address] * liquidityFee / totalFees / 2)
                                                emit Approval(((balanceOf[this.address] * liquidityFee / totalFees) - (balanceOf[this.address] * liquidityFee / totalFees / 2)), this.address, uniswapV2RouterAddress);
                                                mem[(2 * ceil32(return_data.size)) + 292] = this.address
                                                mem[(2 * ceil32(return_data.size)) + 324] = (balanceOf[this.address] * liquidityFee / totalFees) - (balanceOf[this.address] * liquidityFee / totalFees / 2)
                                                mem[(2 * ceil32(return_data.size)) + 356] = 0
                                                mem[(2 * ceil32(return_data.size)) + 388] = 0
                                                mem[(2 * ceil32(return_data.size)) + 420] = 0
                                                mem[(2 * ceil32(return_data.size)) + 452] = block.timestamp
                                                call uniswapV2RouterAddress.addLiquidityETH(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                                     gas gas_remaining wei
                                                    args mem[(2 * ceil32(return_data.size)) + 292 len ceil32(return_data.size) + 192]
                                                mem[(2 * ceil32(return_data.size)) + 288 len 96] = ext_call.return_data[0 len 96]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 96
                                                mem[(4 * ceil32(return_data.size)) + 288] = balanceOf[this.address] * liquidityFee / totalFees / 2
                                                mem[(4 * ceil32(return_data.size)) + 320] = 0
                                                mem[(4 * ceil32(return_data.size)) + 352] = (balanceOf[this.address] * liquidityFee / totalFees) - (balanceOf[this.address] * liquidityFee / totalFees / 2)
                                                emit SwapAndLiquify(uint256 arg1, uint256 arg2, uint256 arg3):
                                                                    mem[(4 * ceil32(return_data.size)) + 288 len (5 * ceil32(return_data.size)) + 96],
                                                mem[(4 * ceil32(return_data.size)) + 288] = 2
                                                mem[(4 * ceil32(return_data.size)) + 320] = this.address
                                                staticcall uniswapV2RouterAddress.WETH() with:
                                                        gas gas_remaining wei
                                                mem[(4 * ceil32(return_data.size)) + 384] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[64] = (6 * ceil32(return_data.size)) + 384
                                                require return_data.size >= 32
                                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                mem[(4 * ceil32(return_data.size)) + 352] = ext_call.return_data[12 len 20]
                                                if not this.address:
                                                    revert with 0, 'ERC20: approve from the zero address'
                                                if not uniswapV2RouterAddress:
                                                    revert with 0, 'ERC20: approve to the zero address'
                                                mem[0] = uniswapV2RouterAddress
                                                mem[32] = sha3(address(this.address), 1)
                                                allowance[address(this.address)][stor6].field_0 = balanceOf[this.address]
                                                emit Approval(balanceOf[this.address], this.address, uniswapV2RouterAddress);
                                                mem[(6 * ceil32(return_data.size)) + 384] = 0x791ac94700000000000000000000000000000000000000000000000000000000
                                                mem[(6 * ceil32(return_data.size)) + 388] = balanceOf[this.address]
                                                mem[(6 * ceil32(return_data.size)) + 420] = 0
                                                mem[(6 * ceil32(return_data.size)) + 452] = 160
                                                mem[(6 * ceil32(return_data.size)) + 548] = 2
                                                idx = 0
                                                s = (6 * ceil32(return_data.size)) + 580
                                                t = (4 * ceil32(return_data.size)) + 320
                                                while idx < mem[(4 * ceil32(return_data.size)) + 288]:
                                                    mem[s] = mem[t + 12 len 20]
                                                    idx = idx + 1
                                                    s = s + 32
                                                    t = t + 32
                                                    continue 
                                                mem[(6 * ceil32(return_data.size)) + 484] = this.address
                                                mem[(6 * ceil32(return_data.size)) + 516] = block.timestamp
                                                require ext_code.size(uniswapV2RouterAddress)
                                                call uniswapV2RouterAddress.swapExactTokensForETHSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                     gas gas_remaining wei
                                                    args balanceOf[this.address], 0, 160, address(this.address), block.timestamp, mem[(6 * ceil32(return_data.size)) + 548 len (32 * mem[(4 * ceil32(return_data.size)) + 288]) + 32]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                call dividendTrackerAddress with:
                                                   value eth.balance(this.address) wei
                                                     gas gas_remaining wei
                                                if not return_data.size:
                                                    if ext_call.success:
                                                        emit SendDividends(balanceOf[this.address], eth.balance(this.address));
                                                    stor7 = 0
                                                    if stor21[address(msg.sender)]:
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address', mem[(6 * ceil32(return_data.size)) + 516 len 9 * ceil32(return_data.size)]
                                                        if not arg1:
                                                            revert with 0, 'ERC20: transfer to the zero address', mem[(6 * ceil32(return_data.size)) + 516 len 9 * ceil32(return_data.size)]
                                                        if balanceOf[address(msg.sender)] < arg2:
                                                            revert with 0, 'ERC20: transfer amount exceeds balance', mem[(6 * ceil32(return_data.size)) + 516 len 9 * ceil32(return_data.size)]
                                                        balanceOf[address(msg.sender)] -= arg2
                                                        if balanceOf[arg1] > !arg2:
                                                            revert with 'NH{q', 17
                                                        balanceOf[arg1] += arg2
                                                        emit Transfer(arg2, msg.sender, arg1);
                                                    else:
                                                        if stor21[address(arg1)]:
                                                            if not msg.sender:
                                                                revert with 0, 'ERC20: transfer from the zero address', mem[(6 * ceil32(return_data.size)) + 516 len 9 * ceil32(return_data.size)]
                                                            if not arg1:
                                                                revert with 0, 'ERC20: transfer to the zero address', mem[(6 * ceil32(return_data.size)) + 516 len 9 * ceil32(return_data.size)]
                                                            if balanceOf[address(msg.sender)] < arg2:
                                                                revert with 0, 'ERC20: transfer amount exceeds balance', mem[(6 * ceil32(return_data.size)) + 516 len 9 * ceil32(return_data.size)]
                                                            balanceOf[address(msg.sender)] -= arg2
                                                            if balanceOf[arg1] > !arg2:
                                                                revert with 'NH{q', 17
                                                            balanceOf[arg1] += arg2
                                                            emit Transfer(arg2, msg.sender, arg1);
                                                        else:
                                                            if stor7:
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address', mem[(6 * ceil32(return_data.size)) + 516 len 9 * ceil32(return_data.size)]
                                                                if not arg1:
                                                                    revert with 0, 'ERC20: transfer to the zero address', mem[(6 * ceil32(return_data.size)) + 516 len 9 * ceil32(return_data.size)]
                                                                if balanceOf[address(msg.sender)] < arg2:
                                                                    revert with 0, 'ERC20: transfer amount exceeds balance', mem[(6 * ceil32(return_data.size)) + 516 len 9 * ceil32(return_data.size)]
                                                                balanceOf[address(msg.sender)] -= arg2
                                                                if balanceOf[arg1] > !arg2:
                                                                    revert with 'NH{q', 17
                                                                balanceOf[arg1] += arg2
                                                                emit Transfer(arg2, msg.sender, arg1);
                                                            else:
                                                                if arg2 and totalFees > -1 / arg2:
                                                                    revert with 'NH{q', 17
                                                                if not stor22[address(arg1)]:
                                                                    if arg2 < arg2 * totalFees / 100:
                                                                        revert with 'NH{q', 17
                                                                    if not msg.sender:
                                                                        revert with 0, 'ERC20: transfer from the zero address', mem[(6 * ceil32(return_data.size)) + 516 len 9 * ceil32(return_data.size)]
                                                                    if not this.address:
                                                                        revert with 0, 'ERC20: transfer to the zero address', mem[(6 * ceil32(return_data.size)) + 516 len 9 * ceil32(return_data.size)]
                                                                    if balanceOf[address(msg.sender)] < arg2 * totalFees / 100:
                                                                        revert with 0, 'ERC20: transfer amount exceeds balance', mem[(6 * ceil32(return_data.size)) + 516 len 9 * ceil32(return_data.size)]
                                                                    balanceOf[address(msg.sender)] -= arg2 * totalFees / 100
                                                                    if balanceOf[this.address] > !(arg2 * totalFees / 100):
                                                                        revert with 'NH{q', 17
                                                                    balanceOf[this.address] += arg2 * totalFees / 100
                                                                    emit Transfer((arg2 * totalFees / 100), msg.sender, this.address);
                                                                    if not msg.sender:
                                                                        revert with 0, 'ERC20: transfer from the zero address', mem[(6 * ceil32(return_data.size)) + 516 len 9 * ceil32(return_data.size)]
                                                                    if not arg1:
                                                                        revert with 0, 'ERC20: transfer to the zero address', mem[(6 * ceil32(return_data.size)) + 516 len 9 * ceil32(return_data.size)]
                                                                    if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100):
                                                                        revert with 0, 'ERC20: transfer amount exceeds balance', mem[(6 * ceil32(return_data.size)) + 516 len 9 * ceil32(return_data.size)]
                                                                    balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100)
                                                                    if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100)):
                                                                        revert with 'NH{q', 17
                                                                    balanceOf[arg1] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100)
                                                                    emit Transfer((arg2 - (arg2 * totalFees / 100)), msg.sender, arg1);
                                                                else:
                                                                    if arg2 and sellFeeIncreaseFactor > -1 / arg2:
                                                                        revert with 'NH{q', 17
                                                                    if arg2 * totalFees / 100 > !(arg2 * sellFeeIncreaseFactor / 100):
                                                                        revert with 'NH{q', 17
                                                                    if arg2 < (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100):
                                                                        revert with 'NH{q', 17
                                                                    if not msg.sender:
                                                                        revert with 0, 'ERC20: transfer from the zero address', mem[(6 * ceil32(return_data.size)) + 516 len 9 * ceil32(return_data.size)]
                                                                    if not this.address:
                                                                        revert with 0, 'ERC20: transfer to the zero address', mem[(6 * ceil32(return_data.size)) + 516 len 9 * ceil32(return_data.size)]
                                                                    if balanceOf[address(msg.sender)] < (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100):
                                                                        revert with 0, 'ERC20: transfer amount exceeds balance', mem[(6 * ceil32(return_data.size)) + 516 len 9 * ceil32(return_data.size)]
                                                                    balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)
                                                                    if balanceOf[this.address] > !((arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)):
                                                                        revert with 'NH{q', 17
                                                                    balanceOf[this.address] = balanceOf[this.address] + (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)
                                                                    emit Transfer(((arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)), msg.sender, this.address);
                                                                    if not msg.sender:
                                                                        revert with 0, 'ERC20: transfer from the zero address', mem[(6 * ceil32(return_data.size)) + 516 len 9 * ceil32(return_data.size)]
                                                                    if not arg1:
                                                                        revert with 0, 'ERC20: transfer to the zero address', mem[(6 * ceil32(return_data.size)) + 516 len 9 * ceil32(return_data.size)]
                                                                    if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100):
                                                                        revert with 0, 'ERC20: transfer amount exceeds balance', mem[(6 * ceil32(return_data.size)) + 516 len 9 * ceil32(return_data.size)]
                                                                    balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)
                                                                    if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)):
                                                                        revert with 'NH{q', 17
                                                                    balanceOf[arg1] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)
                                                                    emit Transfer((arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)), msg.sender, arg1);
                                                    require ext_code.size(dividendTrackerAddress)
                                                    call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args msg.sender, balanceOf[address(msg.sender)], mem[(6 * ceil32(return_data.size)) + 452 len 9 * ceil32(return_data.size)]
                                                    require ext_code.size(dividendTrackerAddress)
                                                    call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args address(arg1), balanceOf[address(arg1)], mem[(6 * ceil32(return_data.size)) + 452 len 9 * ceil32(return_data.size)]
                                                    if not stor7:
                                                        call dividendTrackerAddress.process(uint256 arg1) with:
                                                             gas gas_remaining wei
                                                            args gasForProcessing
                                                        mem[(6 * ceil32(return_data.size)) + 384 len 96] = ext_call.return_data[0 len 96]
                                                        if ext_call.success:
                                                            require return_data.size >= 96
                                                            mem[(8 * ceil32(return_data.size)) + 384] = ext_call.return_data[0]
                                                            mem[(8 * ceil32(return_data.size)) + 416] = ext_call.return_data[32]
                                                            mem[(8 * ceil32(return_data.size)) + 448] = ext_call.return_data[64]
                                                            mem[(8 * ceil32(return_data.size)) + 480] = gasForProcessing
                                                            emit ProcessedDividendTracker(uint256 arg1, uint256 arg2, uint256 arg3, bool arg4, uint256 arg5, address arg6):
                                                                                          mem[(8 * ceil32(return_data.size)) + 384 len (13 * ceil32(return_data.size)) + 128],
                                                                                          1,
                                                                                          tx.origin,
                                                else:
                                                    mem[(6 * ceil32(return_data.size)) + 416 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                    if ext_call.success:
                                                        emit SendDividends(balanceOf[this.address], eth.balance(this.address));
                                                    stor7 = 0
                                                    if stor21[address(msg.sender)]:
                                                        if not msg.sender:
                                                            revert with 0, 
                                                                        'ERC20: transfer from the zero address',
                                                                        mem[(6 * ceil32(return_data.size)) + ceil32(return_data.size) + 517 len 9 * ceil32(return_data.size)]
                                                        if not arg1:
                                                            revert with 0, 
                                                                        'ERC20: transfer to the zero address',
                                                                        mem[(6 * ceil32(return_data.size)) + ceil32(return_data.size) + 517 len 9 * ceil32(return_data.size)]
                                                        if balanceOf[address(msg.sender)] < arg2:
                                                            revert with 0, 
                                                                        'ERC20: transfer amount exceeds balance',
                                                                        mem[(6 * ceil32(return_data.size)) + ceil32(return_data.size) + 517 len 9 * ceil32(return_data.size)]
                                                        balanceOf[address(msg.sender)] -= arg2
                                                        if balanceOf[arg1] > !arg2:
                                                            revert with 'NH{q', 17
                                                        balanceOf[arg1] += arg2
                                                        emit Transfer(arg2, msg.sender, arg1);
                                                    else:
                                                        if stor21[address(arg1)]:
                                                            if not msg.sender:
                                                                revert with 0, 
                                                                            'ERC20: transfer from the zero address',
                                                                            mem[(6 * ceil32(return_data.size)) + ceil32(return_data.size) + 517 len 9 * ceil32(return_data.size)]
                                                            if not arg1:
                                                                revert with 0, 
                                                                            'ERC20: transfer to the zero address',
                                                                            mem[(6 * ceil32(return_data.size)) + ceil32(return_data.size) + 517 len 9 * ceil32(return_data.size)]
                                                            if balanceOf[address(msg.sender)] < arg2:
                                                                revert with 0, 
                                                                            'ERC20: transfer amount exceeds balance',
                                                                            mem[(6 * ceil32(return_data.size)) + ceil32(return_data.size) + 517 len 9 * ceil32(return_data.size)]
                                                            balanceOf[address(msg.sender)] -= arg2
                                                            if balanceOf[arg1] > !arg2:
                                                                revert with 'NH{q', 17
                                                            balanceOf[arg1] += arg2
                                                            emit Transfer(arg2, msg.sender, arg1);
                                                        else:
                                                            if stor7:
                                                                if not msg.sender:
                                                                    revert with 0, 
                                                                                'ERC20: transfer from the zero address',
                                                                                mem[(6 * ceil32(return_data.size)) + ceil32(return_data.size) + 517 len 9 * ceil32(return_data.size)]
                                                                if not arg1:
                                                                    revert with 0, 
                                                                                'ERC20: transfer to the zero address',
                                                                                mem[(6 * ceil32(return_data.size)) + ceil32(return_data.size) + 517 len 9 * ceil32(return_data.size)]
                                                                if balanceOf[address(msg.sender)] < arg2:
                                                                    revert with 0, 
                                                                                'ERC20: transfer amount exceeds balance',
                                                                                mem[(6 * ceil32(return_data.size)) + ceil32(return_data.size) + 517 len 9 * ceil32(return_data.size)]
                                                                balanceOf[address(msg.sender)] -= arg2
                                                                if balanceOf[arg1] > !arg2:
                                                                    revert with 'NH{q', 17
                                                                balanceOf[arg1] += arg2
                                                                emit Transfer(arg2, msg.sender, arg1);
                                                            else:
                                                                if arg2 and totalFees > -1 / arg2:
                                                                    revert with 'NH{q', 17
                                                                if not stor22[address(arg1)]:
                                                                    if arg2 < arg2 * totalFees / 100:
                                                                        revert with 'NH{q', 17
                                                                    if not msg.sender:
                                                                        revert with 0, 
                                                                                    'ERC20: transfer from the zero address',
                                                                                    mem[(6 * ceil32(return_data.size)) + ceil32(return_data.size) + 517 len 9 * ceil32(return_data.size)]
                                                                    if not this.address:
                                                                        revert with 0, 
                                                                                    'ERC20: transfer to the zero address',
                                                                                    mem[(6 * ceil32(return_data.size)) + ceil32(return_data.size) + 517 len 9 * ceil32(return_data.size)]
                                                                    if balanceOf[address(msg.sender)] < arg2 * totalFees / 100:
                                                                        revert with 0, 
                                                                                    'ERC20: transfer amount exceeds balance',
                                                                                    mem[(6 * ceil32(return_data.size)) + ceil32(return_data.size) + 517 len 9 * ceil32(return_data.size)]
                                                                    balanceOf[address(msg.sender)] -= arg2 * totalFees / 100
                                                                    if balanceOf[this.address] > !(arg2 * totalFees / 100):
                                                                        revert with 'NH{q', 17
                                                                    balanceOf[this.address] += arg2 * totalFees / 100
                                                                    emit Transfer((arg2 * totalFees / 100), msg.sender, this.address);
                                                                    if not msg.sender:
                                                                        revert with 0, 
                                                                                    'ERC20: transfer from the zero address',
                                                                                    mem[(6 * ceil32(return_data.size)) + ceil32(return_data.size) + 517 len 9 * ceil32(return_data.size)]
                                                                    if not arg1:
                                                                        revert with 0, 
                                                                                    'ERC20: transfer to the zero address',
                                                                                    mem[(6 * ceil32(return_data.size)) + ceil32(return_data.size) + 517 len 9 * ceil32(return_data.size)]
                                                                    if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100):
                                                                        revert with 0, 
                                                                                    'ERC20: transfer amount exceeds balance',
                                                                                    mem[(6 * ceil32(return_data.size)) + ceil32(return_data.size) + 517 len 9 * ceil32(return_data.size)]
                                                                    balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100)
                                                                    if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100)):
                                                                        revert with 'NH{q', 17
                                                                    balanceOf[arg1] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100)
                                                                    emit Transfer((arg2 - (arg2 * totalFees / 100)), msg.sender, arg1);
                                                                else:
                                                                    if arg2 and sellFeeIncreaseFactor > -1 / arg2:
                                                                        revert with 'NH{q', 17
                                                                    if arg2 * totalFees / 100 > !(arg2 * sellFeeIncreaseFactor / 100):
                                                                        revert with 'NH{q', 17
                                                                    if arg2 < (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100):
                                                                        revert with 'NH{q', 17
                                                                    if not msg.sender:
                                                                        revert with 0, 
                                                                                    'ERC20: transfer from the zero address',
                                                                                    mem[(6 * ceil32(return_data.size)) + ceil32(return_data.size) + 517 len 9 * ceil32(return_data.size)]
                                                                    if not this.address:
                                                                        revert with 0, 
                                                                                    'ERC20: transfer to the zero address',
                                                                                    mem[(6 * ceil32(return_data.size)) + ceil32(return_data.size) + 517 len 9 * ceil32(return_data.size)]
                                                                    if balanceOf[address(msg.sender)] < (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100):
                                                                        revert with 0, 
                                                                                    'ERC20: transfer amount exceeds balance',
                                                                                    mem[(6 * ceil32(return_data.size)) + ceil32(return_data.size) + 517 len 9 * ceil32(return_data.size)]
                                                                    balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)
                                                                    if balanceOf[this.address] > !((arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)):
                                                                        revert with 'NH{q', 17
                                                                    balanceOf[this.address] = balanceOf[this.address] + (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)
                                                                    emit Transfer(((arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)), msg.sender, this.address);
                                                                    if not msg.sender:
                                                                        revert with 0, 
                                                                                    'ERC20: transfer from the zero address',
                                                                                    mem[(6 * ceil32(return_data.size)) + ceil32(return_data.size) + 517 len 9 * ceil32(return_data.size)]
                                                                    if not arg1:
                                                                        revert with 0, 
                                                                                    'ERC20: transfer to the zero address',
                                                                                    mem[(6 * ceil32(return_data.size)) + ceil32(return_data.size) + 517 len 9 * ceil32(return_data.size)]
                                                                    if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100):
                                                                        revert with 0, 
                                                                                    'ERC20: transfer amount exceeds balance',
                                                                                    mem[(6 * ceil32(return_data.size)) + ceil32(return_data.size) + 517 len 9 * ceil32(return_data.size)]
                                                                    balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)
                                                                    if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)):
                                                                        revert with 'NH{q', 17
                                                                    balanceOf[arg1] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)
                                                                    emit Transfer((arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)), msg.sender, arg1);
                                                    require ext_code.size(dividendTrackerAddress)
                                                    call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args msg.sender, balanceOf[address(msg.sender)], mem[(6 * ceil32(return_data.size)) + ceil32(return_data.size) + 453 len 9 * ceil32(return_data.size)]
                                                    require ext_code.size(dividendTrackerAddress)
                                                    call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                         gas gas_remaining wei
                                                        args address(arg1), balanceOf[address(arg1)], mem[(6 * ceil32(return_data.size)) + ceil32(return_data.size) + 453 len 9 * ceil32(return_data.size)]
                                                    if not stor7:
                                                        call dividendTrackerAddress.process(uint256 arg1) with:
                                                             gas gas_remaining wei
                                                            args gasForProcessing
                                                        mem[(6 * ceil32(return_data.size)) + ceil32(return_data.size) + 385 len 96] = ext_call.return_data[0 len 96]
                                                        if ext_call.success:
                                                            require return_data.size >= 96
                                                            mem[(8 * ceil32(return_data.size)) + ceil32(return_data.size) + 385] = ext_call.return_data[0]
                                                            mem[(8 * ceil32(return_data.size)) + ceil32(return_data.size) + 417] = ext_call.return_data[32]
                                                            mem[(8 * ceil32(return_data.size)) + ceil32(return_data.size) + 449] = ext_call.return_data[64]
                                                            mem[(8 * ceil32(return_data.size)) + ceil32(return_data.size) + 481] = gasForProcessing
                                                            emit ProcessedDividendTracker(uint256 arg1, uint256 arg2, uint256 arg3, bool arg4, uint256 arg5, address arg6):
                                                                                          mem[(8 * ceil32(return_data.size)) + ceil32(return_data.size) + 385 len (13 * ceil32(return_data.size)) + 128],
                                                                                          1,
                                                                                          tx.origin,
                    else:
                        if balanceOf[this.address] < swapTokensAtAmount:
                            if stor21[address(msg.sender)]:
                                if not msg.sender:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                if not arg1:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                if balanceOf[address(msg.sender)] < arg2:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                balanceOf[address(msg.sender)] -= arg2
                                if balanceOf[arg1] > !arg2:
                                    revert with 'NH{q', 17
                                balanceOf[arg1] += arg2
                                emit Transfer(arg2, msg.sender, arg1);
                            else:
                                if stor21[address(arg1)]:
                                    if not msg.sender:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                    if not arg1:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                    if balanceOf[address(msg.sender)] < arg2:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                    balanceOf[address(msg.sender)] -= arg2
                                    if balanceOf[arg1] > !arg2:
                                        revert with 'NH{q', 17
                                    balanceOf[arg1] += arg2
                                    emit Transfer(arg2, msg.sender, arg1);
                                else:
                                    if stor7:
                                        if not msg.sender:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                        if not arg1:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                        if balanceOf[address(msg.sender)] < arg2:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                        balanceOf[address(msg.sender)] -= arg2
                                        if balanceOf[arg1] > !arg2:
                                            revert with 'NH{q', 17
                                        balanceOf[arg1] += arg2
                                        emit Transfer(arg2, msg.sender, arg1);
                                    else:
                                        if arg2 and totalFees > -1 / arg2:
                                            revert with 'NH{q', 17
                                        if not stor22[address(arg1)]:
                                            if arg2 < arg2 * totalFees / 100:
                                                revert with 'NH{q', 17
                                            if not msg.sender:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                            if not this.address:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                            if balanceOf[address(msg.sender)] < arg2 * totalFees / 100:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                            balanceOf[address(msg.sender)] -= arg2 * totalFees / 100
                                            if balanceOf[this.address] > !(arg2 * totalFees / 100):
                                                revert with 'NH{q', 17
                                            balanceOf[this.address] += arg2 * totalFees / 100
                                            emit Transfer((arg2 * totalFees / 100), msg.sender, this.address);
                                            if not msg.sender:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                            if not arg1:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                            if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100):
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                            balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100)
                                            if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100)):
                                                revert with 'NH{q', 17
                                            balanceOf[arg1] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100)
                                            emit Transfer((arg2 - (arg2 * totalFees / 100)), msg.sender, arg1);
                                        else:
                                            if arg2 and sellFeeIncreaseFactor > -1 / arg2:
                                                revert with 'NH{q', 17
                                            if arg2 * totalFees / 100 > !(arg2 * sellFeeIncreaseFactor / 100):
                                                revert with 'NH{q', 17
                                            if arg2 < (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100):
                                                revert with 'NH{q', 17
                                            if not msg.sender:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                            if not this.address:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                            if balanceOf[address(msg.sender)] < (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100):
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                            balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)
                                            if balanceOf[this.address] > !((arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)):
                                                revert with 'NH{q', 17
                                            balanceOf[this.address] = balanceOf[this.address] + (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)
                                            emit Transfer(((arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)), msg.sender, this.address);
                                            if not msg.sender:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                            if not arg1:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                            if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100):
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                            balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)
                                            if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)):
                                                revert with 'NH{q', 17
                                            balanceOf[arg1] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)
                                            emit Transfer((arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)), msg.sender, arg1);
                            require ext_code.size(dividendTrackerAddress)
                            call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                 gas gas_remaining wei
                                args msg.sender, balanceOf[address(msg.sender)]
                            require ext_code.size(dividendTrackerAddress)
                            call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                 gas gas_remaining wei
                                args address(arg1), balanceOf[address(arg1)]
                            if not stor7:
                                call dividendTrackerAddress.process(uint256 arg1) with:
                                     gas gas_remaining wei
                                    args gasForProcessing
                                if ext_call.success:
                                    require return_data.size >= 96
                                    emit ProcessedDividendTracker(ext_call.return_data[0], ext_call.return_data[32], ext_call.return_data[64], gasForProcessing, 1, tx.origin);
                        else:
                            if stor7:
                                if stor21[address(msg.sender)]:
                                    if not msg.sender:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                    if not arg1:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                    if balanceOf[address(msg.sender)] < arg2:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                    balanceOf[address(msg.sender)] -= arg2
                                    if balanceOf[arg1] > !arg2:
                                        revert with 'NH{q', 17
                                    balanceOf[arg1] += arg2
                                    emit Transfer(arg2, msg.sender, arg1);
                                else:
                                    if stor21[address(arg1)]:
                                        if not msg.sender:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                        if not arg1:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                        if balanceOf[address(msg.sender)] < arg2:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                        balanceOf[address(msg.sender)] -= arg2
                                        if balanceOf[arg1] > !arg2:
                                            revert with 'NH{q', 17
                                        balanceOf[arg1] += arg2
                                        emit Transfer(arg2, msg.sender, arg1);
                                    else:
                                        if stor7:
                                            if not msg.sender:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                            if not arg1:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                            if balanceOf[address(msg.sender)] < arg2:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                            balanceOf[address(msg.sender)] -= arg2
                                            if balanceOf[arg1] > !arg2:
                                                revert with 'NH{q', 17
                                            balanceOf[arg1] += arg2
                                            emit Transfer(arg2, msg.sender, arg1);
                                        else:
                                            if arg2 and totalFees > -1 / arg2:
                                                revert with 'NH{q', 17
                                            if not stor22[address(arg1)]:
                                                if arg2 < arg2 * totalFees / 100:
                                                    revert with 'NH{q', 17
                                                if not msg.sender:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                if not this.address:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                if balanceOf[address(msg.sender)] < arg2 * totalFees / 100:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                balanceOf[address(msg.sender)] -= arg2 * totalFees / 100
                                                if balanceOf[this.address] > !(arg2 * totalFees / 100):
                                                    revert with 'NH{q', 17
                                                balanceOf[this.address] += arg2 * totalFees / 100
                                                emit Transfer((arg2 * totalFees / 100), msg.sender, this.address);
                                                if not msg.sender:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                if not arg1:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100):
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100)
                                                if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100)):
                                                    revert with 'NH{q', 17
                                                balanceOf[arg1] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100)
                                                emit Transfer((arg2 - (arg2 * totalFees / 100)), msg.sender, arg1);
                                            else:
                                                if arg2 and sellFeeIncreaseFactor > -1 / arg2:
                                                    revert with 'NH{q', 17
                                                if arg2 * totalFees / 100 > !(arg2 * sellFeeIncreaseFactor / 100):
                                                    revert with 'NH{q', 17
                                                if arg2 < (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100):
                                                    revert with 'NH{q', 17
                                                if not msg.sender:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                if not this.address:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                if balanceOf[address(msg.sender)] < (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100):
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)
                                                if balanceOf[this.address] > !((arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)):
                                                    revert with 'NH{q', 17
                                                balanceOf[this.address] = balanceOf[this.address] + (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)
                                                emit Transfer(((arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)), msg.sender, this.address);
                                                if not msg.sender:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                if not arg1:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100):
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)
                                                if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)):
                                                    revert with 'NH{q', 17
                                                balanceOf[arg1] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)
                                                emit Transfer((arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)), msg.sender, arg1);
                                require ext_code.size(dividendTrackerAddress)
                                call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                     gas gas_remaining wei
                                    args msg.sender, balanceOf[address(msg.sender)]
                                require ext_code.size(dividendTrackerAddress)
                                call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                     gas gas_remaining wei
                                    args address(arg1), balanceOf[address(arg1)]
                                if not stor7:
                                    call dividendTrackerAddress.process(uint256 arg1) with:
                                         gas gas_remaining wei
                                        args gasForProcessing
                                    if ext_call.success:
                                        require return_data.size >= 96
                                        emit ProcessedDividendTracker(ext_call.return_data[0], ext_call.return_data[32], ext_call.return_data[64], gasForProcessing, 1, tx.origin);
                            else:
                                if stor22[address(msg.sender)]:
                                    if stor21[address(msg.sender)]:
                                        if not msg.sender:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                        if not arg1:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                        if balanceOf[address(msg.sender)] < arg2:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                        balanceOf[address(msg.sender)] -= arg2
                                        if balanceOf[arg1] > !arg2:
                                            revert with 'NH{q', 17
                                        balanceOf[arg1] += arg2
                                        emit Transfer(arg2, msg.sender, arg1);
                                    else:
                                        if stor21[address(arg1)]:
                                            if not msg.sender:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                            if not arg1:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                            if balanceOf[address(msg.sender)] < arg2:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                            balanceOf[address(msg.sender)] -= arg2
                                            if balanceOf[arg1] > !arg2:
                                                revert with 'NH{q', 17
                                            balanceOf[arg1] += arg2
                                            emit Transfer(arg2, msg.sender, arg1);
                                        else:
                                            if stor7:
                                                if not msg.sender:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                if not arg1:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                if balanceOf[address(msg.sender)] < arg2:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                balanceOf[address(msg.sender)] -= arg2
                                                if balanceOf[arg1] > !arg2:
                                                    revert with 'NH{q', 17
                                                balanceOf[arg1] += arg2
                                                emit Transfer(arg2, msg.sender, arg1);
                                            else:
                                                if arg2 and totalFees > -1 / arg2:
                                                    revert with 'NH{q', 17
                                                if not stor22[address(arg1)]:
                                                    if arg2 < arg2 * totalFees / 100:
                                                        revert with 'NH{q', 17
                                                    if not msg.sender:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                    if not this.address:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                    if balanceOf[address(msg.sender)] < arg2 * totalFees / 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                    balanceOf[address(msg.sender)] -= arg2 * totalFees / 100
                                                    if balanceOf[this.address] > !(arg2 * totalFees / 100):
                                                        revert with 'NH{q', 17
                                                    balanceOf[this.address] += arg2 * totalFees / 100
                                                    emit Transfer((arg2 * totalFees / 100), msg.sender, this.address);
                                                    if not msg.sender:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                    if not arg1:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                    if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100):
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                    balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100)
                                                    if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100)):
                                                        revert with 'NH{q', 17
                                                    balanceOf[arg1] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100)
                                                    emit Transfer((arg2 - (arg2 * totalFees / 100)), msg.sender, arg1);
                                                else:
                                                    if arg2 and sellFeeIncreaseFactor > -1 / arg2:
                                                        revert with 'NH{q', 17
                                                    if arg2 * totalFees / 100 > !(arg2 * sellFeeIncreaseFactor / 100):
                                                        revert with 'NH{q', 17
                                                    if arg2 < (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100):
                                                        revert with 'NH{q', 17
                                                    if not msg.sender:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                    if not this.address:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                    if balanceOf[address(msg.sender)] < (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100):
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                    balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)
                                                    if balanceOf[this.address] > !((arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)):
                                                        revert with 'NH{q', 17
                                                    balanceOf[this.address] = balanceOf[this.address] + (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)
                                                    emit Transfer(((arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)), msg.sender, this.address);
                                                    if not msg.sender:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                    if not arg1:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                    if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100):
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                    balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)
                                                    if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)):
                                                        revert with 'NH{q', 17
                                                    balanceOf[arg1] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)
                                                    emit Transfer((arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)), msg.sender, arg1);
                                    require ext_code.size(dividendTrackerAddress)
                                    call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                         gas gas_remaining wei
                                        args msg.sender, balanceOf[address(msg.sender)]
                                    require ext_code.size(dividendTrackerAddress)
                                    call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                         gas gas_remaining wei
                                        args address(arg1), balanceOf[address(arg1)]
                                    if not stor7:
                                        call dividendTrackerAddress.process(uint256 arg1) with:
                                             gas gas_remaining wei
                                            args gasForProcessing
                                        if ext_call.success:
                                            require return_data.size >= 96
                                            emit ProcessedDividendTracker(ext_call.return_data[0], ext_call.return_data[32], ext_call.return_data[64], gasForProcessing, 1, tx.origin);
                                else:
                                    if owner == msg.sender:
                                        if stor21[address(msg.sender)]:
                                            if not msg.sender:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                            if not arg1:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                            if balanceOf[address(msg.sender)] < arg2:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                            balanceOf[address(msg.sender)] -= arg2
                                            if balanceOf[arg1] > !arg2:
                                                revert with 'NH{q', 17
                                            balanceOf[arg1] += arg2
                                            emit Transfer(arg2, msg.sender, arg1);
                                        else:
                                            if stor21[address(arg1)]:
                                                if not msg.sender:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                if not arg1:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                if balanceOf[address(msg.sender)] < arg2:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                balanceOf[address(msg.sender)] -= arg2
                                                if balanceOf[arg1] > !arg2:
                                                    revert with 'NH{q', 17
                                                balanceOf[arg1] += arg2
                                                emit Transfer(arg2, msg.sender, arg1);
                                            else:
                                                if stor7:
                                                    if not msg.sender:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                    if not arg1:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                    if balanceOf[address(msg.sender)] < arg2:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                    balanceOf[address(msg.sender)] -= arg2
                                                    if balanceOf[arg1] > !arg2:
                                                        revert with 'NH{q', 17
                                                    balanceOf[arg1] += arg2
                                                    emit Transfer(arg2, msg.sender, arg1);
                                                else:
                                                    if arg2 and totalFees > -1 / arg2:
                                                        revert with 'NH{q', 17
                                                    if not stor22[address(arg1)]:
                                                        if arg2 < arg2 * totalFees / 100:
                                                            revert with 'NH{q', 17
                                                        if not msg.sender:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                        if not this.address:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                        if balanceOf[address(msg.sender)] < arg2 * totalFees / 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                        balanceOf[address(msg.sender)] -= arg2 * totalFees / 100
                                                        if balanceOf[this.address] > !(arg2 * totalFees / 100):
                                                            revert with 'NH{q', 17
                                                        balanceOf[this.address] += arg2 * totalFees / 100
                                                        emit Transfer((arg2 * totalFees / 100), msg.sender, this.address);
                                                        if not msg.sender:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                        if not arg1:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                        if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100):
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                        balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100)
                                                        if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100)):
                                                            revert with 'NH{q', 17
                                                        balanceOf[arg1] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100)
                                                        emit Transfer((arg2 - (arg2 * totalFees / 100)), msg.sender, arg1);
                                                    else:
                                                        if arg2 and sellFeeIncreaseFactor > -1 / arg2:
                                                            revert with 'NH{q', 17
                                                        if arg2 * totalFees / 100 > !(arg2 * sellFeeIncreaseFactor / 100):
                                                            revert with 'NH{q', 17
                                                        if arg2 < (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100):
                                                            revert with 'NH{q', 17
                                                        if not msg.sender:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                        if not this.address:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                        if balanceOf[address(msg.sender)] < (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100):
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                        balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)
                                                        if balanceOf[this.address] > !((arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)):
                                                            revert with 'NH{q', 17
                                                        balanceOf[this.address] = balanceOf[this.address] + (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)
                                                        emit Transfer(((arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)), msg.sender, this.address);
                                                        if not msg.sender:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                        if not arg1:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                        if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100):
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                        balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)
                                                        if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)):
                                                            revert with 'NH{q', 17
                                                        balanceOf[arg1] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)
                                                        emit Transfer((arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)), msg.sender, arg1);
                                        require ext_code.size(dividendTrackerAddress)
                                        call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                             gas gas_remaining wei
                                            args msg.sender, balanceOf[address(msg.sender)]
                                        require ext_code.size(dividendTrackerAddress)
                                        call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                             gas gas_remaining wei
                                            args address(arg1), balanceOf[address(arg1)]
                                        if not stor7:
                                            call dividendTrackerAddress.process(uint256 arg1) with:
                                                 gas gas_remaining wei
                                                args gasForProcessing
                                            if ext_call.success:
                                                require return_data.size >= 96
                                                emit ProcessedDividendTracker(ext_call.return_data[0], ext_call.return_data[32], ext_call.return_data[64], gasForProcessing, 1, tx.origin);
                                    else:
                                        if owner == arg1:
                                            if stor21[address(msg.sender)]:
                                                if not msg.sender:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                if not arg1:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                if balanceOf[address(msg.sender)] < arg2:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                balanceOf[address(msg.sender)] -= arg2
                                                if balanceOf[arg1] > !arg2:
                                                    revert with 'NH{q', 17
                                                balanceOf[arg1] += arg2
                                                emit Transfer(arg2, msg.sender, arg1);
                                            else:
                                                if stor21[address(arg1)]:
                                                    if not msg.sender:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                    if not arg1:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                    if balanceOf[address(msg.sender)] < arg2:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                    balanceOf[address(msg.sender)] -= arg2
                                                    if balanceOf[arg1] > !arg2:
                                                        revert with 'NH{q', 17
                                                    balanceOf[arg1] += arg2
                                                    emit Transfer(arg2, msg.sender, arg1);
                                                else:
                                                    if stor7:
                                                        if not msg.sender:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                        if not arg1:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                        if balanceOf[address(msg.sender)] < arg2:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                        balanceOf[address(msg.sender)] -= arg2
                                                        if balanceOf[arg1] > !arg2:
                                                            revert with 'NH{q', 17
                                                        balanceOf[arg1] += arg2
                                                        emit Transfer(arg2, msg.sender, arg1);
                                                    else:
                                                        if arg2 and totalFees > -1 / arg2:
                                                            revert with 'NH{q', 17
                                                        if not stor22[address(arg1)]:
                                                            if arg2 < arg2 * totalFees / 100:
                                                                revert with 'NH{q', 17
                                                            if not msg.sender:
                                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                            if not this.address:
                                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                            if balanceOf[address(msg.sender)] < arg2 * totalFees / 100:
                                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                            balanceOf[address(msg.sender)] -= arg2 * totalFees / 100
                                                            if balanceOf[this.address] > !(arg2 * totalFees / 100):
                                                                revert with 'NH{q', 17
                                                            balanceOf[this.address] += arg2 * totalFees / 100
                                                            emit Transfer((arg2 * totalFees / 100), msg.sender, this.address);
                                                            if not msg.sender:
                                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                            if not arg1:
                                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                            if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100):
                                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                            balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100)
                                                            if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100)):
                                                                revert with 'NH{q', 17
                                                            balanceOf[arg1] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100)
                                                            emit Transfer((arg2 - (arg2 * totalFees / 100)), msg.sender, arg1);
                                                        else:
                                                            if arg2 and sellFeeIncreaseFactor > -1 / arg2:
                                                                revert with 'NH{q', 17
                                                            if arg2 * totalFees / 100 > !(arg2 * sellFeeIncreaseFactor / 100):
                                                                revert with 'NH{q', 17
                                                            if arg2 < (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100):
                                                                revert with 'NH{q', 17
                                                            if not msg.sender:
                                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                            if not this.address:
                                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                            if balanceOf[address(msg.sender)] < (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100):
                                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                            balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)
                                                            if balanceOf[this.address] > !((arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)):
                                                                revert with 'NH{q', 17
                                                            balanceOf[this.address] = balanceOf[this.address] + (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)
                                                            emit Transfer(((arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)), msg.sender, this.address);
                                                            if not msg.sender:
                                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                            if not arg1:
                                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                            if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100):
                                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                            balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)
                                                            if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)):
                                                                revert with 'NH{q', 17
                                                            balanceOf[arg1] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)
                                                            emit Transfer((arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)), msg.sender, arg1);
                                            require ext_code.size(dividendTrackerAddress)
                                            call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args msg.sender, balanceOf[address(msg.sender)]
                                            require ext_code.size(dividendTrackerAddress)
                                            call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args address(arg1), balanceOf[address(arg1)]
                                            if not stor7:
                                                call dividendTrackerAddress.process(uint256 arg1) with:
                                                     gas gas_remaining wei
                                                    args gasForProcessing
                                                if ext_call.success:
                                                    require return_data.size >= 96
                                                    emit ProcessedDividendTracker(ext_call.return_data[0], ext_call.return_data[32], ext_call.return_data[64], gasForProcessing, 1, tx.origin);
                                        else:
                                            stor7 = 1
                                            if balanceOf[this.address] and marketingFee > -1 / balanceOf[this.address]:
                                                revert with 'NH{q', 17
                                            if not totalFees:
                                                revert with 'NH{q', 18
                                            mem[96] = 2
                                            mem[128] = this.address
                                            staticcall uniswapV2RouterAddress.WETH() with:
                                                    gas gas_remaining wei
                                            mem[192] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                            mem[160] = ext_call.return_data[12 len 20]
                                            if not this.address:
                                                revert with 0, 'ERC20: approve from the zero address'
                                            if not uniswapV2RouterAddress:
                                                revert with 0, 'ERC20: approve to the zero address'
                                            allowance[address(this.address)][stor6].field_0 = balanceOf[this.address] * marketingFee / totalFees
                                            emit Approval((balanceOf[this.address] * marketingFee / totalFees), this.address, uniswapV2RouterAddress);
                                            mem[ceil32(return_data.size) + 192] = 0x791ac94700000000000000000000000000000000000000000000000000000000
                                            mem[ceil32(return_data.size) + 196] = balanceOf[this.address] * marketingFee / totalFees
                                            mem[ceil32(return_data.size) + 356] = 2
                                            idx = 0
                                            s = ceil32(return_data.size) + 388
                                            t = 128
                                            while idx < 2:
                                                mem[s] = mem[t + 12 len 20]
                                                idx = idx + 1
                                                s = s + 32
                                                t = t + 32
                                                continue 
                                            mem[ceil32(return_data.size) + 292] = this.address
                                            mem[ceil32(return_data.size) + 324] = block.timestamp
                                            require ext_code.size(uniswapV2RouterAddress)
                                            call uniswapV2RouterAddress.swapExactTokensForETHSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args balanceOf[this.address] * marketingFee / totalFees, 0, 160, address(this.address), block.timestamp, 2, mem[ceil32(return_data.size) + 388 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            call _marketingWalletAddress with:
                                               value eth.balance(this.address) wei
                                                 gas 2300 * is_zero(value) wei
                                            if balanceOf[this.address] and liquidityFee > -1 / balanceOf[this.address]:
                                                revert with 'NH{q', 17
                                            if not totalFees:
                                                revert with 'NH{q', 18
                                            if balanceOf[this.address] * liquidityFee / totalFees < balanceOf[this.address] * liquidityFee / totalFees / 2:
                                                revert with 'NH{q', 17
                                            mem[ceil32(return_data.size) + 192] = 2
                                            mem[ceil32(return_data.size) + 224] = this.address
                                            staticcall uniswapV2RouterAddress.WETH() with:
                                                    gas gas_remaining wei
                                            mem[ceil32(return_data.size) + 288] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                            mem[ceil32(return_data.size) + 256] = ext_call.return_data[12 len 20]
                                            if not this.address:
                                                revert with 0, 'ERC20: approve from the zero address'
                                            if not uniswapV2RouterAddress:
                                                revert with 0, 'ERC20: approve to the zero address'
                                            allowance[address(this.address)][stor6].field_0 = balanceOf[this.address] * liquidityFee / totalFees / 2
                                            allowance[address(this.address)][stor6].field_255 = 0
                                            emit Approval((balanceOf[this.address] * liquidityFee / totalFees / 2), this.address, uniswapV2RouterAddress);
                                            mem[(2 * ceil32(return_data.size)) + 288] = 0x791ac94700000000000000000000000000000000000000000000000000000000
                                            mem[(2 * ceil32(return_data.size)) + 292] = balanceOf[this.address] * liquidityFee / totalFees / 2
                                            mem[(2 * ceil32(return_data.size)) + 324] = 0
                                            mem[(2 * ceil32(return_data.size)) + 356] = 160
                                            mem[(2 * ceil32(return_data.size)) + 452] = 2
                                            idx = 0
                                            s = (2 * ceil32(return_data.size)) + 484
                                            t = ceil32(return_data.size) + 224
                                            while idx < mem[ceil32(return_data.size) + 192]:
                                                mem[s] = mem[t + 12 len 20]
                                                idx = idx + 1
                                                s = s + 32
                                                t = t + 32
                                                continue 
                                            mem[(2 * ceil32(return_data.size)) + 388] = this.address
                                            mem[(2 * ceil32(return_data.size)) + 420] = block.timestamp
                                            require ext_code.size(uniswapV2RouterAddress)
                                            call uniswapV2RouterAddress.swapExactTokensForETHSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args Mask(255, 1, balanceOf[this.address] * liquidityFee / totalFees), 0, 160, address(this.address), block.timestamp, mem[(2 * ceil32(return_data.size)) + 452 len (32 * mem[ceil32(return_data.size) + 192]) + 32]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            if eth.balance(this.address) < eth.balance(this.address):
                                                revert with 'NH{q', 17
                                            if not this.address:
                                                mem[(2 * ceil32(return_data.size)) + 288] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[(2 * ceil32(return_data.size)) + 292] = 32
                                                mem[(2 * ceil32(return_data.size)) + 324] = 36
                                                mem[(2 * ceil32(return_data.size)) + 356] = 'ERC20: approve from the zero add'
                                                mem[(2 * ceil32(return_data.size)) + 388] = 'ress'
                                                revert with memory
                                                  from (2 * ceil32(return_data.size)) + 288
                                                   len ceil32(return_data.size) + 132
                                            if not uniswapV2RouterAddress:
                                                mem[(2 * ceil32(return_data.size)) + 288] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[(2 * ceil32(return_data.size)) + 292] = 32
                                                mem[(2 * ceil32(return_data.size)) + 324] = 34
                                                mem[(2 * ceil32(return_data.size)) + 356] = 'ERC20: approve to the zero addre'
                                                mem[(2 * ceil32(return_data.size)) + 388] = 'ss'
                                                revert with memory
                                                  from (2 * ceil32(return_data.size)) + 288
                                                   len ceil32(return_data.size) + 132
                                            allowance[address(this.address)][stor6].field_0 = (balanceOf[this.address] * liquidityFee / totalFees) - (balanceOf[this.address] * liquidityFee / totalFees / 2)
                                            emit Approval(((balanceOf[this.address] * liquidityFee / totalFees) - (balanceOf[this.address] * liquidityFee / totalFees / 2)), this.address, uniswapV2RouterAddress);
                                            mem[(2 * ceil32(return_data.size)) + 292] = this.address
                                            mem[(2 * ceil32(return_data.size)) + 324] = (balanceOf[this.address] * liquidityFee / totalFees) - (balanceOf[this.address] * liquidityFee / totalFees / 2)
                                            mem[(2 * ceil32(return_data.size)) + 356] = 0
                                            mem[(2 * ceil32(return_data.size)) + 388] = 0
                                            mem[(2 * ceil32(return_data.size)) + 420] = 0
                                            mem[(2 * ceil32(return_data.size)) + 452] = block.timestamp
                                            call uniswapV2RouterAddress.addLiquidityETH(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                                 gas gas_remaining wei
                                                args mem[(2 * ceil32(return_data.size)) + 292 len ceil32(return_data.size) + 192]
                                            mem[(2 * ceil32(return_data.size)) + 288 len 96] = ext_call.return_data[0 len 96]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 96
                                            mem[(4 * ceil32(return_data.size)) + 288] = balanceOf[this.address] * liquidityFee / totalFees / 2
                                            mem[(4 * ceil32(return_data.size)) + 320] = 0
                                            mem[(4 * ceil32(return_data.size)) + 352] = (balanceOf[this.address] * liquidityFee / totalFees) - (balanceOf[this.address] * liquidityFee / totalFees / 2)
                                            emit SwapAndLiquify(uint256 arg1, uint256 arg2, uint256 arg3):
                                                                mem[(4 * ceil32(return_data.size)) + 288 len (5 * ceil32(return_data.size)) + 96],
                                            mem[(4 * ceil32(return_data.size)) + 288] = 2
                                            mem[(4 * ceil32(return_data.size)) + 320] = this.address
                                            staticcall uniswapV2RouterAddress.WETH() with:
                                                    gas gas_remaining wei
                                            mem[(4 * ceil32(return_data.size)) + 384] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[64] = (6 * ceil32(return_data.size)) + 384
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                            mem[(4 * ceil32(return_data.size)) + 352] = ext_call.return_data[12 len 20]
                                            if not this.address:
                                                revert with 0, 'ERC20: approve from the zero address'
                                            if not uniswapV2RouterAddress:
                                                revert with 0, 'ERC20: approve to the zero address'
                                            mem[0] = uniswapV2RouterAddress
                                            mem[32] = sha3(address(this.address), 1)
                                            allowance[address(this.address)][stor6].field_0 = balanceOf[this.address]
                                            emit Approval(balanceOf[this.address], this.address, uniswapV2RouterAddress);
                                            mem[(6 * ceil32(return_data.size)) + 384] = 0x791ac94700000000000000000000000000000000000000000000000000000000
                                            mem[(6 * ceil32(return_data.size)) + 388] = balanceOf[this.address]
                                            mem[(6 * ceil32(return_data.size)) + 420] = 0
                                            mem[(6 * ceil32(return_data.size)) + 452] = 160
                                            mem[(6 * ceil32(return_data.size)) + 548] = 2
                                            idx = 0
                                            s = (6 * ceil32(return_data.size)) + 580
                                            t = (4 * ceil32(return_data.size)) + 320
                                            while idx < mem[(4 * ceil32(return_data.size)) + 288]:
                                                mem[s] = mem[t + 12 len 20]
                                                idx = idx + 1
                                                s = s + 32
                                                t = t + 32
                                                continue 
                                            mem[(6 * ceil32(return_data.size)) + 484] = this.address
                                            mem[(6 * ceil32(return_data.size)) + 516] = block.timestamp
                                            require ext_code.size(uniswapV2RouterAddress)
                                            call uniswapV2RouterAddress.mem[mem[64] len 4] with:
                                                 gas gas_remaining wei
                                                args mem[mem[64] + 4 len (6 * ceil32(return_data.size)) + (32 * mem[(4 * ceil32(return_data.size)) + 288]) + -mem[64] + 576]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            call dividendTrackerAddress with:
                                               value eth.balance(this.address) wei
                                                 gas gas_remaining wei
                                            if not return_data.size:
                                                if not ext_call.success:
                                                    stor7 = 0
                                                    if stor21[address(msg.sender)]:
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if not arg1:
                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                        if balanceOf[address(msg.sender)] < arg2:
                                                            revert with 0, 'ERC20: transfer amount exceeds balance'
                                                        balanceOf[address(msg.sender)] -= arg2
                                                        if balanceOf[arg1] > !arg2:
                                                            revert with 'NH{q', 17
                                                        balanceOf[arg1] += arg2
                                                        emit Transfer(arg2, msg.sender, arg1);
                                                        require ext_code.size(dividendTrackerAddress)
                                                        call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                             gas gas_remaining wei
                                                            args msg.sender, balanceOf[address(msg.sender)]
                                                        mem[0] = arg1
                                                        mem[32] = 0
                                                        require ext_code.size(dividendTrackerAddress)
                                                        call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                             gas gas_remaining wei
                                                            args address(arg1), balanceOf[address(arg1)]
                                                        if not ext_call.success:
                                                            if not ext_call.success:
                                                                if not stor7:
                                                                    call dividendTrackerAddress.process(uint256 arg1) with:
                                                                         gas gas_remaining wei
                                                                        args gasForProcessing
                                                                    mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                    if ext_call.success:
                                                                        _83355 = mem[64]
                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                        require return_data.size >= 96
                                                                        _84677 = mem[_83355 + 32]
                                                                        _84678 = mem[_83355 + 64]
                                                                        mem[mem[64]] = mem[_83355]
                                                                        mem[mem[64] + 64] = _84678
                                                                        mem[mem[64] + 96] = gasForProcessing
                                                                        emit ProcessedDividendTracker(mem[mem[64]], _84677, _84678, gasForProcessing, 1, tx.origin);
                                                            else:
                                                                if not stor7:
                                                                    call dividendTrackerAddress.process(uint256 arg1) with:
                                                                         gas gas_remaining wei
                                                                        args gasForProcessing
                                                                    mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                    if ext_call.success:
                                                                        _83884 = mem[64]
                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                        require return_data.size >= 96
                                                                        _85745 = mem[_83884 + 32]
                                                                        _85746 = mem[_83884 + 64]
                                                                        mem[mem[64]] = mem[_83884]
                                                                        mem[mem[64] + 64] = _85746
                                                                        mem[mem[64] + 96] = gasForProcessing
                                                                        emit ProcessedDividendTracker(mem[mem[64]], _85745, _85746, gasForProcessing, 1, tx.origin);
                                                        else:
                                                            if not ext_call.success:
                                                                if not stor7:
                                                                    call dividendTrackerAddress.process(uint256 arg1) with:
                                                                         gas gas_remaining wei
                                                                        args gasForProcessing
                                                                    mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                    if ext_call.success:
                                                                        _83885 = mem[64]
                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                        require return_data.size >= 96
                                                                        _85749 = mem[_83885 + 32]
                                                                        _85750 = mem[_83885 + 64]
                                                                        mem[mem[64]] = mem[_83885]
                                                                        mem[mem[64] + 64] = _85750
                                                                        mem[mem[64] + 96] = gasForProcessing
                                                                        emit ProcessedDividendTracker(mem[mem[64]], _85749, _85750, gasForProcessing, 1, tx.origin);
                                                            else:
                                                                if not stor7:
                                                                    call dividendTrackerAddress.process(uint256 arg1) with:
                                                                         gas gas_remaining wei
                                                                        args gasForProcessing
                                                                    mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                    if ext_call.success:
                                                                        _84681 = mem[64]
                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                        require return_data.size >= 96
                                                                        _86946 = mem[_84681 + 32]
                                                                        _86947 = mem[_84681 + 64]
                                                                        mem[mem[64]] = mem[_84681]
                                                                        mem[mem[64] + 64] = _86947
                                                                        mem[mem[64] + 96] = gasForProcessing
                                                                        emit ProcessedDividendTracker(mem[mem[64]], _86946, _86947, gasForProcessing, 1, tx.origin);
                                                    else:
                                                        if stor21[address(arg1)]:
                                                            if not msg.sender:
                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                            if not arg1:
                                                                revert with 0, 'ERC20: transfer to the zero address'
                                                            if balanceOf[address(msg.sender)] < arg2:
                                                                revert with 0, 'ERC20: transfer amount exceeds balance'
                                                            balanceOf[address(msg.sender)] -= arg2
                                                            if balanceOf[arg1] > !arg2:
                                                                revert with 'NH{q', 17
                                                            balanceOf[arg1] += arg2
                                                            emit Transfer(arg2, msg.sender, arg1);
                                                            require ext_code.size(dividendTrackerAddress)
                                                            call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                                 gas gas_remaining wei
                                                                args msg.sender, balanceOf[address(msg.sender)]
                                                            mem[0] = arg1
                                                            mem[32] = 0
                                                            require ext_code.size(dividendTrackerAddress)
                                                            call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                                 gas gas_remaining wei
                                                                args address(arg1), balanceOf[address(arg1)]
                                                            if not ext_call.success:
                                                                if not ext_call.success:
                                                                    if not stor7:
                                                                        call dividendTrackerAddress.process(uint256 arg1) with:
                                                                             gas gas_remaining wei
                                                                            args gasForProcessing
                                                                        mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                        if ext_call.success:
                                                                            _83894 = mem[64]
                                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                                            require return_data.size >= 96
                                                                            _85767 = mem[_83894 + 32]
                                                                            _85768 = mem[_83894 + 64]
                                                                            mem[mem[64]] = mem[_83894]
                                                                            mem[mem[64] + 64] = _85768
                                                                            mem[mem[64] + 96] = gasForProcessing
                                                                            emit ProcessedDividendTracker(mem[mem[64]], _85767, _85768, gasForProcessing, 1, tx.origin);
                                                                else:
                                                                    if not stor7:
                                                                        call dividendTrackerAddress.process(uint256 arg1) with:
                                                                             gas gas_remaining wei
                                                                            args gasForProcessing
                                                                        mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                        if ext_call.success:
                                                                            _84693 = mem[64]
                                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                                            require return_data.size >= 96
                                                                            _86956 = mem[_84693 + 32]
                                                                            _86957 = mem[_84693 + 64]
                                                                            mem[mem[64]] = mem[_84693]
                                                                            mem[mem[64] + 64] = _86957
                                                                            mem[mem[64] + 96] = gasForProcessing
                                                                            emit ProcessedDividendTracker(mem[mem[64]], _86956, _86957, gasForProcessing, 1, tx.origin);
                                                            else:
                                                                if not ext_call.success:
                                                                    if not stor7:
                                                                        call dividendTrackerAddress.process(uint256 arg1) with:
                                                                             gas gas_remaining wei
                                                                            args gasForProcessing
                                                                        mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                        if ext_call.success:
                                                                            _84694 = mem[64]
                                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                                            require return_data.size >= 96
                                                                            _86960 = mem[_84694 + 32]
                                                                            _86961 = mem[_84694 + 64]
                                                                            mem[mem[64]] = mem[_84694]
                                                                            mem[mem[64] + 64] = _86961
                                                                            mem[mem[64] + 96] = gasForProcessing
                                                                            emit ProcessedDividendTracker(mem[mem[64]], _86960, _86961, gasForProcessing, 1, tx.origin);
                                                                else:
                                                                    if not stor7:
                                                                        call dividendTrackerAddress.process(uint256 arg1) with:
                                                                             gas gas_remaining wei
                                                                            args gasForProcessing
                                                                        mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                        if ext_call.success:
                                                                            _85771 = mem[64]
                                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                                            require return_data.size >= 96
                                                                            _87964 = mem[_85771 + 32]
                                                                            _87965 = mem[_85771 + 64]
                                                                            mem[mem[64]] = mem[_85771]
                                                                            mem[mem[64] + 64] = _87965
                                                                            mem[mem[64] + 96] = gasForProcessing
                                                                            emit ProcessedDividendTracker(mem[mem[64]], _87964, _87965, gasForProcessing, 1, tx.origin);
                                                        else:
                                                            if stor7:
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                if not arg1:
                                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                                if balanceOf[address(msg.sender)] < arg2:
                                                                    revert with 0, 'ERC20: transfer amount exceeds balance'
                                                                balanceOf[address(msg.sender)] -= arg2
                                                                if balanceOf[arg1] > !arg2:
                                                                    revert with 'NH{q', 17
                                                                balanceOf[arg1] += arg2
                                                                emit Transfer(arg2, msg.sender, arg1);
                                                                require ext_code.size(dividendTrackerAddress)
                                                                call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                                     gas gas_remaining wei
                                                                    args msg.sender, balanceOf[address(msg.sender)]
                                                                mem[0] = arg1
                                                                mem[32] = 0
                                                                require ext_code.size(dividendTrackerAddress)
                                                                call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                                     gas gas_remaining wei
                                                                    args address(arg1), balanceOf[address(arg1)]
                                                                if not ext_call.success:
                                                                    if not ext_call.success:
                                                                        if not stor7:
                                                                            call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                 gas gas_remaining wei
                                                                                args gasForProcessing
                                                                            mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                            if ext_call.success:
                                                                                _83360 = mem[64]
                                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                                require return_data.size >= 96
                                                                                _84684 = mem[_83360 + 32]
                                                                                _84685 = mem[_83360 + 64]
                                                                                mem[mem[64]] = mem[_83360]
                                                                                mem[mem[64] + 64] = _84685
                                                                                mem[mem[64] + 96] = gasForProcessing
                                                                                emit ProcessedDividendTracker(mem[mem[64]], _84684, _84685, gasForProcessing, 1, tx.origin);
                                                                    else:
                                                                        if not stor7:
                                                                            call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                 gas gas_remaining wei
                                                                                args gasForProcessing
                                                                            mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                            if ext_call.success:
                                                                                _83889 = mem[64]
                                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                                require return_data.size >= 96
                                                                                _85754 = mem[_83889 + 32]
                                                                                _85755 = mem[_83889 + 64]
                                                                                mem[mem[64]] = mem[_83889]
                                                                                mem[mem[64] + 64] = _85755
                                                                                mem[mem[64] + 96] = gasForProcessing
                                                                                emit ProcessedDividendTracker(mem[mem[64]], _85754, _85755, gasForProcessing, 1, tx.origin);
                                                                else:
                                                                    if not ext_call.success:
                                                                        if not stor7:
                                                                            call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                 gas gas_remaining wei
                                                                                args gasForProcessing
                                                                            mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                            if ext_call.success:
                                                                                _83890 = mem[64]
                                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                                require return_data.size >= 96
                                                                                _85758 = mem[_83890 + 32]
                                                                                _85759 = mem[_83890 + 64]
                                                                                mem[mem[64]] = mem[_83890]
                                                                                mem[mem[64] + 64] = _85759
                                                                                mem[mem[64] + 96] = gasForProcessing
                                                                                emit ProcessedDividendTracker(mem[mem[64]], _85758, _85759, gasForProcessing, 1, tx.origin);
                                                                    else:
                                                                        if not stor7:
                                                                            call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                 gas gas_remaining wei
                                                                                args gasForProcessing
                                                                            mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                            if ext_call.success:
                                                                                _84688 = mem[64]
                                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                                require return_data.size >= 96
                                                                                _86951 = mem[_84688 + 32]
                                                                                _86952 = mem[_84688 + 64]
                                                                                mem[mem[64]] = mem[_84688]
                                                                                mem[mem[64] + 64] = _86952
                                                                                mem[mem[64] + 96] = gasForProcessing
                                                                                emit ProcessedDividendTracker(mem[mem[64]], _86951, _86952, gasForProcessing, 1, tx.origin);
                                                            else:
                                                                if arg2 and totalFees > -1 / arg2:
                                                                    revert with 'NH{q', 17
                                                                if not stor22[address(arg1)]:
                                                                    if arg2 < arg2 * totalFees / 100:
                                                                        revert with 'NH{q', 17
                                                                    if not msg.sender:
                                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                                    if not this.address:
                                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                                    if balanceOf[address(msg.sender)] < arg2 * totalFees / 100:
                                                                        revert with 0, 'ERC20: transfer amount exceeds balance'
                                                                    balanceOf[address(msg.sender)] -= arg2 * totalFees / 100
                                                                    if balanceOf[this.address] > !(arg2 * totalFees / 100):
                                                                        revert with 'NH{q', 17
                                                                    balanceOf[this.address] += arg2 * totalFees / 100
                                                                    emit Transfer((arg2 * totalFees / 100), msg.sender, this.address);
                                                                    if not msg.sender:
                                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                                    if not arg1:
                                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                                    if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100):
                                                                        revert with 0, 'ERC20: transfer amount exceeds balance'
                                                                    balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100)
                                                                    if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100)):
                                                                        revert with 'NH{q', 17
                                                                    balanceOf[arg1] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100)
                                                                    emit Transfer((arg2 - (arg2 * totalFees / 100)), msg.sender, arg1);
                                                                    require ext_code.size(dividendTrackerAddress)
                                                                    call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                                         gas gas_remaining wei
                                                                        args msg.sender, balanceOf[address(msg.sender)]
                                                                    mem[0] = arg1
                                                                    mem[32] = 0
                                                                    require ext_code.size(dividendTrackerAddress)
                                                                    call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                                         gas gas_remaining wei
                                                                        args address(arg1), balanceOf[address(arg1)]
                                                                    if not ext_call.success:
                                                                        if not ext_call.success:
                                                                            if not stor7:
                                                                                call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                     gas gas_remaining wei
                                                                                    args gasForProcessing
                                                                                mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                                if ext_call.success:
                                                                                    _93351 = mem[64]
                                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                                    require return_data.size >= 96
                                                                                    _94097 = mem[_93351 + 32]
                                                                                    _94098 = mem[_93351 + 64]
                                                                                    mem[mem[64]] = mem[_93351]
                                                                                    mem[mem[64] + 64] = _94098
                                                                                    mem[mem[64] + 96] = gasForProcessing
                                                                                    emit ProcessedDividendTracker(mem[mem[64]], _94097, _94098, gasForProcessing, 1, tx.origin);
                                                                        else:
                                                                            if not stor7:
                                                                                call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                     gas gas_remaining wei
                                                                                    args gasForProcessing
                                                                                mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                                if ext_call.success:
                                                                                    _93688 = mem[64]
                                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                                    require return_data.size >= 96
                                                                                    _94505 = mem[_93688 + 32]
                                                                                    _94506 = mem[_93688 + 64]
                                                                                    mem[mem[64]] = mem[_93688]
                                                                                    mem[mem[64] + 64] = _94506
                                                                                    mem[mem[64] + 96] = gasForProcessing
                                                                                    emit ProcessedDividendTracker(mem[mem[64]], _94505, _94506, gasForProcessing, 1, tx.origin);
                                                                    else:
                                                                        if not ext_call.success:
                                                                            if not stor7:
                                                                                call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                     gas gas_remaining wei
                                                                                    args gasForProcessing
                                                                                mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                                if ext_call.success:
                                                                                    _93689 = mem[64]
                                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                                    require return_data.size >= 96
                                                                                    _94509 = mem[_93689 + 32]
                                                                                    _94510 = mem[_93689 + 64]
                                                                                    mem[mem[64]] = mem[_93689]
                                                                                    mem[mem[64] + 64] = _94510
                                                                                    mem[mem[64] + 96] = gasForProcessing
                                                                                    emit ProcessedDividendTracker(mem[mem[64]], _94509, _94510, gasForProcessing, 1, tx.origin);
                                                                        else:
                                                                            if not stor7:
                                                                                call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                     gas gas_remaining wei
                                                                                    args gasForProcessing
                                                                                mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                                if ext_call.success:
                                                                                    _94101 = mem[64]
                                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                                    require return_data.size >= 96
                                                                                    _94890 = mem[_94101 + 32]
                                                                                    _94891 = mem[_94101 + 64]
                                                                                    mem[mem[64]] = mem[_94101]
                                                                                    mem[mem[64] + 64] = _94891
                                                                                    mem[mem[64] + 96] = gasForProcessing
                                                                                    emit ProcessedDividendTracker(mem[mem[64]], _94890, _94891, gasForProcessing, 1, tx.origin);
                                                                else:
                                                                    if arg2 and sellFeeIncreaseFactor > -1 / arg2:
                                                                        revert with 'NH{q', 17
                                                                    if arg2 * totalFees / 100 > !(arg2 * sellFeeIncreaseFactor / 100):
                                                                        revert with 'NH{q', 17
                                                                    if arg2 < (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100):
                                                                        revert with 'NH{q', 17
                                                                    if not msg.sender:
                                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                                    if not this.address:
                                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                                    if balanceOf[address(msg.sender)] < (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100):
                                                                        revert with 0, 'ERC20: transfer amount exceeds balance'
                                                                    balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)
                                                                    if balanceOf[this.address] > !((arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)):
                                                                        revert with 'NH{q', 17
                                                                    balanceOf[this.address] = balanceOf[this.address] + (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)
                                                                    emit Transfer(((arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)), msg.sender, this.address);
                                                                    if not msg.sender:
                                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                                    if not arg1:
                                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                                    if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100):
                                                                        revert with 0, 'ERC20: transfer amount exceeds balance'
                                                                    balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)
                                                                    if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)):
                                                                        revert with 'NH{q', 17
                                                                    balanceOf[arg1] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)
                                                                    emit Transfer((arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)), msg.sender, arg1);
                                                                    require ext_code.size(dividendTrackerAddress)
                                                                    call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                                         gas gas_remaining wei
                                                                        args msg.sender, balanceOf[address(msg.sender)]
                                                                    mem[0] = arg1
                                                                    mem[32] = 0
                                                                    require ext_code.size(dividendTrackerAddress)
                                                                    call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                                         gas gas_remaining wei
                                                                        args address(arg1), balanceOf[address(arg1)]
                                                                    if not ext_call.success:
                                                                        if not ext_call.success:
                                                                            if not stor7:
                                                                                call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                     gas gas_remaining wei
                                                                                    args gasForProcessing
                                                                                mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                                if ext_call.success:
                                                                                    _96927 = mem[64]
                                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                                    require return_data.size >= 96
                                                                                    _97397 = mem[_96927 + 32]
                                                                                    _97398 = mem[_96927 + 64]
                                                                                    mem[mem[64]] = mem[_96927]
                                                                                    mem[mem[64] + 64] = _97398
                                                                                    mem[mem[64] + 96] = gasForProcessing
                                                                                    emit ProcessedDividendTracker(mem[mem[64]], _97397, _97398, gasForProcessing, 1, tx.origin);
                                                                        else:
                                                                            if not stor7:
                                                                                call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                     gas gas_remaining wei
                                                                                    args gasForProcessing
                                                                                mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                                if ext_call.success:
                                                                                    _97132 = mem[64]
                                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                                    require return_data.size >= 96
                                                                                    _97733 = mem[_97132 + 32]
                                                                                    _97734 = mem[_97132 + 64]
                                                                                    mem[mem[64]] = mem[_97132]
                                                                                    mem[mem[64] + 64] = _97734
                                                                                    mem[mem[64] + 96] = gasForProcessing
                                                                                    emit ProcessedDividendTracker(mem[mem[64]], _97733, _97734, gasForProcessing, 1, tx.origin);
                                                                    else:
                                                                        if not ext_call.success:
                                                                            if not stor7:
                                                                                call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                     gas gas_remaining wei
                                                                                    args gasForProcessing
                                                                                mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                                if ext_call.success:
                                                                                    _97133 = mem[64]
                                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                                    require return_data.size >= 96
                                                                                    _97737 = mem[_97133 + 32]
                                                                                    _97738 = mem[_97133 + 64]
                                                                                    mem[mem[64]] = mem[_97133]
                                                                                    mem[mem[64] + 64] = _97738
                                                                                    mem[mem[64] + 96] = gasForProcessing
                                                                                    emit ProcessedDividendTracker(mem[mem[64]], _97737, _97738, gasForProcessing, 1, tx.origin);
                                                                        else:
                                                                            if not stor7:
                                                                                call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                     gas gas_remaining wei
                                                                                    args gasForProcessing
                                                                                mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                                if ext_call.success:
                                                                                    _97401 = mem[64]
                                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                                    require return_data.size >= 96
                                                                                    _98094 = mem[_97401 + 32]
                                                                                    _98095 = mem[_97401 + 64]
                                                                                    mem[mem[64]] = mem[_97401]
                                                                                    mem[mem[64] + 64] = _98095
                                                                                    mem[mem[64] + 96] = gasForProcessing
                                                                                    emit ProcessedDividendTracker(mem[mem[64]], _98094, _98095, gasForProcessing, 1, tx.origin);
                                                else:
                                                    emit SendDividends(balanceOf[this.address], eth.balance(this.address));
                                                    stor7 = 0
                                                    if stor21[address(msg.sender)]:
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if not arg1:
                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                        if balanceOf[address(msg.sender)] < arg2:
                                                            revert with 0, 'ERC20: transfer amount exceeds balance'
                                                        balanceOf[address(msg.sender)] -= arg2
                                                        if balanceOf[arg1] > !arg2:
                                                            revert with 'NH{q', 17
                                                        balanceOf[arg1] += arg2
                                                        emit Transfer(arg2, msg.sender, arg1);
                                                        require ext_code.size(dividendTrackerAddress)
                                                        call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                             gas gas_remaining wei
                                                            args msg.sender, balanceOf[address(msg.sender)]
                                                        mem[0] = arg1
                                                        mem[32] = 0
                                                        require ext_code.size(dividendTrackerAddress)
                                                        call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                             gas gas_remaining wei
                                                            args address(arg1), balanceOf[address(arg1)]
                                                        if not ext_call.success:
                                                            if not ext_call.success:
                                                                if not stor7:
                                                                    call dividendTrackerAddress.process(uint256 arg1) with:
                                                                         gas gas_remaining wei
                                                                        args gasForProcessing
                                                                    mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                    if ext_call.success:
                                                                        _83899 = mem[64]
                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                        require return_data.size >= 96
                                                                        _85774 = mem[_83899 + 32]
                                                                        _85775 = mem[_83899 + 64]
                                                                        mem[mem[64]] = mem[_83899]
                                                                        mem[mem[64] + 64] = _85775
                                                                        mem[mem[64] + 96] = gasForProcessing
                                                                        emit ProcessedDividendTracker(mem[mem[64]], _85774, _85775, gasForProcessing, 1, tx.origin);
                                                            else:
                                                                if not stor7:
                                                                    call dividendTrackerAddress.process(uint256 arg1) with:
                                                                         gas gas_remaining wei
                                                                        args gasForProcessing
                                                                    mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                    if ext_call.success:
                                                                        _84698 = mem[64]
                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                        require return_data.size >= 96
                                                                        _86965 = mem[_84698 + 32]
                                                                        _86966 = mem[_84698 + 64]
                                                                        mem[mem[64]] = mem[_84698]
                                                                        mem[mem[64] + 64] = _86966
                                                                        mem[mem[64] + 96] = gasForProcessing
                                                                        emit ProcessedDividendTracker(mem[mem[64]], _86965, _86966, gasForProcessing, 1, tx.origin);
                                                        else:
                                                            if not ext_call.success:
                                                                if not stor7:
                                                                    call dividendTrackerAddress.process(uint256 arg1) with:
                                                                         gas gas_remaining wei
                                                                        args gasForProcessing
                                                                    mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                    if ext_call.success:
                                                                        _84699 = mem[64]
                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                        require return_data.size >= 96
                                                                        _86969 = mem[_84699 + 32]
                                                                        _86970 = mem[_84699 + 64]
                                                                        mem[mem[64]] = mem[_84699]
                                                                        mem[mem[64] + 64] = _86970
                                                                        mem[mem[64] + 96] = gasForProcessing
                                                                        emit ProcessedDividendTracker(mem[mem[64]], _86969, _86970, gasForProcessing, 1, tx.origin);
                                                            else:
                                                                if not stor7:
                                                                    call dividendTrackerAddress.process(uint256 arg1) with:
                                                                         gas gas_remaining wei
                                                                        args gasForProcessing
                                                                    mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                    if ext_call.success:
                                                                        _85778 = mem[64]
                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                        require return_data.size >= 96
                                                                        _87969 = mem[_85778 + 32]
                                                                        _87970 = mem[_85778 + 64]
                                                                        mem[mem[64]] = mem[_85778]
                                                                        mem[mem[64] + 64] = _87970
                                                                        mem[mem[64] + 96] = gasForProcessing
                                                                        emit ProcessedDividendTracker(mem[mem[64]], _87969, _87970, gasForProcessing, 1, tx.origin);
                                                    else:
                                                        if stor21[address(arg1)]:
                                                            if not msg.sender:
                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                            if not arg1:
                                                                revert with 0, 'ERC20: transfer to the zero address'
                                                            if balanceOf[address(msg.sender)] < arg2:
                                                                revert with 0, 'ERC20: transfer amount exceeds balance'
                                                            balanceOf[address(msg.sender)] -= arg2
                                                            if balanceOf[arg1] > !arg2:
                                                                revert with 'NH{q', 17
                                                            balanceOf[arg1] += arg2
                                                            emit Transfer(arg2, msg.sender, arg1);
                                                            require ext_code.size(dividendTrackerAddress)
                                                            call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                                 gas gas_remaining wei
                                                                args msg.sender, balanceOf[address(msg.sender)]
                                                            mem[0] = arg1
                                                            mem[32] = 0
                                                            require ext_code.size(dividendTrackerAddress)
                                                            call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                                 gas gas_remaining wei
                                                                args address(arg1), balanceOf[address(arg1)]
                                                            if not ext_call.success:
                                                                if not ext_call.success:
                                                                    if not stor7:
                                                                        call dividendTrackerAddress.process(uint256 arg1) with:
                                                                             gas gas_remaining wei
                                                                            args gasForProcessing
                                                                        mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                        if ext_call.success:
                                                                            _84708 = mem[64]
                                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                                            require return_data.size >= 96
                                                                            _86987 = mem[_84708 + 32]
                                                                            _86988 = mem[_84708 + 64]
                                                                            mem[mem[64]] = mem[_84708]
                                                                            mem[mem[64] + 64] = _86988
                                                                            mem[mem[64] + 96] = gasForProcessing
                                                                            emit ProcessedDividendTracker(mem[mem[64]], _86987, _86988, gasForProcessing, 1, tx.origin);
                                                                else:
                                                                    if not stor7:
                                                                        call dividendTrackerAddress.process(uint256 arg1) with:
                                                                             gas gas_remaining wei
                                                                            args gasForProcessing
                                                                        mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                        if ext_call.success:
                                                                            _85790 = mem[64]
                                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                                            require return_data.size >= 96
                                                                            _87979 = mem[_85790 + 32]
                                                                            _87980 = mem[_85790 + 64]
                                                                            mem[mem[64]] = mem[_85790]
                                                                            mem[mem[64] + 64] = _87980
                                                                            mem[mem[64] + 96] = gasForProcessing
                                                                            emit ProcessedDividendTracker(mem[mem[64]], _87979, _87980, gasForProcessing, 1, tx.origin);
                                                            else:
                                                                if not ext_call.success:
                                                                    if not stor7:
                                                                        call dividendTrackerAddress.process(uint256 arg1) with:
                                                                             gas gas_remaining wei
                                                                            args gasForProcessing
                                                                        mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                        if ext_call.success:
                                                                            _85791 = mem[64]
                                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                                            require return_data.size >= 96
                                                                            _87983 = mem[_85791 + 32]
                                                                            _87984 = mem[_85791 + 64]
                                                                            mem[mem[64]] = mem[_85791]
                                                                            mem[mem[64] + 64] = _87984
                                                                            mem[mem[64] + 96] = gasForProcessing
                                                                            emit ProcessedDividendTracker(mem[mem[64]], _87983, _87984, gasForProcessing, 1, tx.origin);
                                                                else:
                                                                    if not stor7:
                                                                        call dividendTrackerAddress.process(uint256 arg1) with:
                                                                             gas gas_remaining wei
                                                                            args gasForProcessing
                                                                        mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                        if ext_call.success:
                                                                            _86991 = mem[64]
                                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                                            require return_data.size >= 96
                                                                            _88824 = mem[_86991 + 32]
                                                                            _88825 = mem[_86991 + 64]
                                                                            mem[mem[64]] = mem[_86991]
                                                                            mem[mem[64] + 64] = _88825
                                                                            mem[mem[64] + 96] = gasForProcessing
                                                                            emit ProcessedDividendTracker(mem[mem[64]], _88824, _88825, gasForProcessing, 1, tx.origin);
                                                        else:
                                                            if stor7:
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                if not arg1:
                                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                                if balanceOf[address(msg.sender)] < arg2:
                                                                    revert with 0, 'ERC20: transfer amount exceeds balance'
                                                                balanceOf[address(msg.sender)] -= arg2
                                                                if balanceOf[arg1] > !arg2:
                                                                    revert with 'NH{q', 17
                                                                balanceOf[arg1] += arg2
                                                                emit Transfer(arg2, msg.sender, arg1);
                                                                require ext_code.size(dividendTrackerAddress)
                                                                call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                                     gas gas_remaining wei
                                                                    args msg.sender, balanceOf[address(msg.sender)]
                                                                mem[0] = arg1
                                                                mem[32] = 0
                                                                require ext_code.size(dividendTrackerAddress)
                                                                call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                                     gas gas_remaining wei
                                                                    args address(arg1), balanceOf[address(arg1)]
                                                                if not ext_call.success:
                                                                    if not ext_call.success:
                                                                        if not stor7:
                                                                            call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                 gas gas_remaining wei
                                                                                args gasForProcessing
                                                                            mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                            if ext_call.success:
                                                                                _83904 = mem[64]
                                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                                require return_data.size >= 96
                                                                                _85781 = mem[_83904 + 32]
                                                                                _85782 = mem[_83904 + 64]
                                                                                mem[mem[64]] = mem[_83904]
                                                                                mem[mem[64] + 64] = _85782
                                                                                mem[mem[64] + 96] = gasForProcessing
                                                                                emit ProcessedDividendTracker(mem[mem[64]], _85781, _85782, gasForProcessing, 1, tx.origin);
                                                                    else:
                                                                        if not stor7:
                                                                            call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                 gas gas_remaining wei
                                                                                args gasForProcessing
                                                                            mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                            if ext_call.success:
                                                                                _84703 = mem[64]
                                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                                require return_data.size >= 96
                                                                                _86974 = mem[_84703 + 32]
                                                                                _86975 = mem[_84703 + 64]
                                                                                mem[mem[64]] = mem[_84703]
                                                                                mem[mem[64] + 64] = _86975
                                                                                mem[mem[64] + 96] = gasForProcessing
                                                                                emit ProcessedDividendTracker(mem[mem[64]], _86974, _86975, gasForProcessing, 1, tx.origin);
                                                                else:
                                                                    if not ext_call.success:
                                                                        if not stor7:
                                                                            call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                 gas gas_remaining wei
                                                                                args gasForProcessing
                                                                            mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                            if ext_call.success:
                                                                                _84704 = mem[64]
                                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                                require return_data.size >= 96
                                                                                _86978 = mem[_84704 + 32]
                                                                                _86979 = mem[_84704 + 64]
                                                                                mem[mem[64]] = mem[_84704]
                                                                                mem[mem[64] + 64] = _86979
                                                                                mem[mem[64] + 96] = gasForProcessing
                                                                                emit ProcessedDividendTracker(mem[mem[64]], _86978, _86979, gasForProcessing, 1, tx.origin);
                                                                    else:
                                                                        if not stor7:
                                                                            call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                 gas gas_remaining wei
                                                                                args gasForProcessing
                                                                            mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                            if ext_call.success:
                                                                                _85785 = mem[64]
                                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                                require return_data.size >= 96
                                                                                _87974 = mem[_85785 + 32]
                                                                                _87975 = mem[_85785 + 64]
                                                                                mem[mem[64]] = mem[_85785]
                                                                                mem[mem[64] + 64] = _87975
                                                                                mem[mem[64] + 96] = gasForProcessing
                                                                                emit ProcessedDividendTracker(mem[mem[64]], _87974, _87975, gasForProcessing, 1, tx.origin);
                                                            else:
                                                                if arg2 and totalFees > -1 / arg2:
                                                                    revert with 'NH{q', 17
                                                                if not stor22[address(arg1)]:
                                                                    if arg2 < arg2 * totalFees / 100:
                                                                        revert with 'NH{q', 17
                                                                    if not msg.sender:
                                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                                    if not this.address:
                                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                                    if balanceOf[address(msg.sender)] < arg2 * totalFees / 100:
                                                                        revert with 0, 'ERC20: transfer amount exceeds balance'
                                                                    balanceOf[address(msg.sender)] -= arg2 * totalFees / 100
                                                                    if balanceOf[this.address] > !(arg2 * totalFees / 100):
                                                                        revert with 'NH{q', 17
                                                                    balanceOf[this.address] += arg2 * totalFees / 100
                                                                    emit Transfer((arg2 * totalFees / 100), msg.sender, this.address);
                                                                    if not msg.sender:
                                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                                    if not arg1:
                                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                                    if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100):
                                                                        revert with 0, 'ERC20: transfer amount exceeds balance'
                                                                    balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100)
                                                                    if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100)):
                                                                        revert with 'NH{q', 17
                                                                    balanceOf[arg1] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100)
                                                                    emit Transfer((arg2 - (arg2 * totalFees / 100)), msg.sender, arg1);
                                                                    require ext_code.size(dividendTrackerAddress)
                                                                    call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                                         gas gas_remaining wei
                                                                        args msg.sender, balanceOf[address(msg.sender)]
                                                                    mem[0] = arg1
                                                                    mem[32] = 0
                                                                    require ext_code.size(dividendTrackerAddress)
                                                                    call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                                         gas gas_remaining wei
                                                                        args address(arg1), balanceOf[address(arg1)]
                                                                    if not ext_call.success:
                                                                        if not ext_call.success:
                                                                            if not stor7:
                                                                                call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                     gas gas_remaining wei
                                                                                    args gasForProcessing
                                                                                mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                                if ext_call.success:
                                                                                    _93696 = mem[64]
                                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                                    require return_data.size >= 96
                                                                                    _94514 = mem[_93696 + 32]
                                                                                    _94515 = mem[_93696 + 64]
                                                                                    mem[mem[64]] = mem[_93696]
                                                                                    mem[mem[64] + 64] = _94515
                                                                                    mem[mem[64] + 96] = gasForProcessing
                                                                                    emit ProcessedDividendTracker(mem[mem[64]], _94514, _94515, gasForProcessing, 1, tx.origin);
                                                                        else:
                                                                            if not stor7:
                                                                                call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                     gas gas_remaining wei
                                                                                    args gasForProcessing
                                                                                mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                                if ext_call.success:
                                                                                    _94104 = mem[64]
                                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                                    require return_data.size >= 96
                                                                                    _94895 = mem[_94104 + 32]
                                                                                    _94896 = mem[_94104 + 64]
                                                                                    mem[mem[64]] = mem[_94104]
                                                                                    mem[mem[64] + 64] = _94896
                                                                                    mem[mem[64] + 96] = gasForProcessing
                                                                                    emit ProcessedDividendTracker(mem[mem[64]], _94895, _94896, gasForProcessing, 1, tx.origin);
                                                                    else:
                                                                        if not ext_call.success:
                                                                            if not stor7:
                                                                                call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                     gas gas_remaining wei
                                                                                    args gasForProcessing
                                                                                mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                                if ext_call.success:
                                                                                    _94105 = mem[64]
                                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                                    require return_data.size >= 96
                                                                                    _94899 = mem[_94105 + 32]
                                                                                    _94900 = mem[_94105 + 64]
                                                                                    mem[mem[64]] = mem[_94105]
                                                                                    mem[mem[64] + 64] = _94900
                                                                                    mem[mem[64] + 96] = gasForProcessing
                                                                                    emit ProcessedDividendTracker(mem[mem[64]], _94899, _94900, gasForProcessing, 1, tx.origin);
                                                                        else:
                                                                            if not stor7:
                                                                                call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                     gas gas_remaining wei
                                                                                    args gasForProcessing
                                                                                mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                                if ext_call.success:
                                                                                    _94518 = mem[64]
                                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                                    require return_data.size >= 96
                                                                                    _95220 = mem[_94518 + 32]
                                                                                    _95221 = mem[_94518 + 64]
                                                                                    mem[mem[64]] = mem[_94518]
                                                                                    mem[mem[64] + 64] = _95221
                                                                                    mem[mem[64] + 96] = gasForProcessing
                                                                                    emit ProcessedDividendTracker(mem[mem[64]], _95220, _95221, gasForProcessing, 1, tx.origin);
                                                                else:
                                                                    if arg2 and sellFeeIncreaseFactor > -1 / arg2:
                                                                        revert with 'NH{q', 17
                                                                    if arg2 * totalFees / 100 > !(arg2 * sellFeeIncreaseFactor / 100):
                                                                        revert with 'NH{q', 17
                                                                    if arg2 < (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100):
                                                                        revert with 'NH{q', 17
                                                                    if not msg.sender:
                                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                                    if not this.address:
                                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                                    if balanceOf[address(msg.sender)] < (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100):
                                                                        revert with 0, 'ERC20: transfer amount exceeds balance'
                                                                    balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)
                                                                    if balanceOf[this.address] > !((arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)):
                                                                        revert with 'NH{q', 17
                                                                    balanceOf[this.address] = balanceOf[this.address] + (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)
                                                                    emit Transfer(((arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)), msg.sender, this.address);
                                                                    if not msg.sender:
                                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                                    if not arg1:
                                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                                    if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100):
                                                                        revert with 0, 'ERC20: transfer amount exceeds balance'
                                                                    balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)
                                                                    if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)):
                                                                        revert with 'NH{q', 17
                                                                    balanceOf[arg1] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)
                                                                    emit Transfer((arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)), msg.sender, arg1);
                                                                    require ext_code.size(dividendTrackerAddress)
                                                                    call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                                         gas gas_remaining wei
                                                                        args msg.sender, balanceOf[address(msg.sender)]
                                                                    mem[0] = arg1
                                                                    mem[32] = 0
                                                                    require ext_code.size(dividendTrackerAddress)
                                                                    call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                                         gas gas_remaining wei
                                                                        args address(arg1), balanceOf[address(arg1)]
                                                                    if not ext_call.success:
                                                                        if not ext_call.success:
                                                                            if not stor7:
                                                                                call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                     gas gas_remaining wei
                                                                                    args gasForProcessing
                                                                                mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                                if ext_call.success:
                                                                                    _97136 = mem[64]
                                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                                    require return_data.size >= 96
                                                                                    _97742 = mem[_97136 + 32]
                                                                                    _97743 = mem[_97136 + 64]
                                                                                    mem[mem[64]] = mem[_97136]
                                                                                    mem[mem[64] + 64] = _97743
                                                                                    mem[mem[64] + 96] = gasForProcessing
                                                                                    emit ProcessedDividendTracker(mem[mem[64]], _97742, _97743, gasForProcessing, 1, tx.origin);
                                                                        else:
                                                                            if not stor7:
                                                                                call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                     gas gas_remaining wei
                                                                                    args gasForProcessing
                                                                                mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                                if ext_call.success:
                                                                                    _97403 = mem[64]
                                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                                    require return_data.size >= 96
                                                                                    _98098 = mem[_97403 + 32]
                                                                                    _98099 = mem[_97403 + 64]
                                                                                    mem[mem[64]] = mem[_97403]
                                                                                    mem[mem[64] + 64] = _98099
                                                                                    mem[mem[64] + 96] = gasForProcessing
                                                                                    emit ProcessedDividendTracker(mem[mem[64]], _98098, _98099, gasForProcessing, 1, tx.origin);
                                                                    else:
                                                                        if not ext_call.success:
                                                                            if not stor7:
                                                                                call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                     gas gas_remaining wei
                                                                                    args gasForProcessing
                                                                                mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                                if ext_call.success:
                                                                                    _97404 = mem[64]
                                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                                    require return_data.size >= 96
                                                                                    _98102 = mem[_97404 + 32]
                                                                                    _98103 = mem[_97404 + 64]
                                                                                    mem[mem[64]] = mem[_97404]
                                                                                    mem[mem[64] + 64] = _98103
                                                                                    mem[mem[64] + 96] = gasForProcessing
                                                                                    emit ProcessedDividendTracker(mem[mem[64]], _98102, _98103, gasForProcessing, 1, tx.origin);
                                                                        else:
                                                                            if not stor7:
                                                                                call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                     gas gas_remaining wei
                                                                                    args gasForProcessing
                                                                                mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                                if ext_call.success:
                                                                                    _97746 = mem[64]
                                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                                    require return_data.size >= 96
                                                                                    _98387 = mem[_97746 + 32]
                                                                                    _98388 = mem[_97746 + 64]
                                                                                    mem[mem[64]] = mem[_97746]
                                                                                    mem[mem[64] + 64] = _98388
                                                                                    mem[mem[64] + 96] = gasForProcessing
                                                                                    emit ProcessedDividendTracker(mem[mem[64]], _98387, _98388, gasForProcessing, 1, tx.origin);
                                            else:
                                                _79989 = mem[64]
                                                mem[64] = mem[64] + ceil32(return_data.size) + 1
                                                mem[_79989] = return_data.size
                                                mem[_79989 + 32 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                if not ext_call.success:
                                                    stor7 = 0
                                                    if stor21[address(msg.sender)]:
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if not arg1:
                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                        if balanceOf[address(msg.sender)] < arg2:
                                                            revert with 0, 'ERC20: transfer amount exceeds balance'
                                                        balanceOf[address(msg.sender)] -= arg2
                                                        if balanceOf[arg1] > !arg2:
                                                            revert with 'NH{q', 17
                                                        balanceOf[arg1] += arg2
                                                        emit Transfer(arg2, msg.sender, arg1);
                                                        require ext_code.size(dividendTrackerAddress)
                                                        call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                             gas gas_remaining wei
                                                            args msg.sender, balanceOf[address(msg.sender)]
                                                        mem[0] = arg1
                                                        mem[32] = 0
                                                        require ext_code.size(dividendTrackerAddress)
                                                        call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                             gas gas_remaining wei
                                                            args address(arg1), balanceOf[address(arg1)]
                                                        if not ext_call.success:
                                                            if not ext_call.success:
                                                                if not stor7:
                                                                    call dividendTrackerAddress.process(uint256 arg1) with:
                                                                         gas gas_remaining wei
                                                                        args gasForProcessing
                                                                    mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                    if ext_call.success:
                                                                        _83371 = mem[64]
                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                        require return_data.size >= 96
                                                                        _84715 = mem[_83371 + 32]
                                                                        _84716 = mem[_83371 + 64]
                                                                        mem[mem[64]] = mem[_83371]
                                                                        mem[mem[64] + 64] = _84716
                                                                        mem[mem[64] + 96] = gasForProcessing
                                                                        emit ProcessedDividendTracker(mem[mem[64]], _84715, _84716, gasForProcessing, 1, tx.origin);
                                                            else:
                                                                if not stor7:
                                                                    call dividendTrackerAddress.process(uint256 arg1) with:
                                                                         gas gas_remaining wei
                                                                        args gasForProcessing
                                                                    mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                    if ext_call.success:
                                                                        _83912 = mem[64]
                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                        require return_data.size >= 96
                                                                        _85796 = mem[_83912 + 32]
                                                                        _85797 = mem[_83912 + 64]
                                                                        mem[mem[64]] = mem[_83912]
                                                                        mem[mem[64] + 64] = _85797
                                                                        mem[mem[64] + 96] = gasForProcessing
                                                                        emit ProcessedDividendTracker(mem[mem[64]], _85796, _85797, gasForProcessing, 1, tx.origin);
                                                        else:
                                                            if not ext_call.success:
                                                                if not stor7:
                                                                    call dividendTrackerAddress.process(uint256 arg1) with:
                                                                         gas gas_remaining wei
                                                                        args gasForProcessing
                                                                    mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                    if ext_call.success:
                                                                        _83913 = mem[64]
                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                        require return_data.size >= 96
                                                                        _85800 = mem[_83913 + 32]
                                                                        _85801 = mem[_83913 + 64]
                                                                        mem[mem[64]] = mem[_83913]
                                                                        mem[mem[64] + 64] = _85801
                                                                        mem[mem[64] + 96] = gasForProcessing
                                                                        emit ProcessedDividendTracker(mem[mem[64]], _85800, _85801, gasForProcessing, 1, tx.origin);
                                                            else:
                                                                if not stor7:
                                                                    call dividendTrackerAddress.process(uint256 arg1) with:
                                                                         gas gas_remaining wei
                                                                        args gasForProcessing
                                                                    mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                    if ext_call.success:
                                                                        _84719 = mem[64]
                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                        require return_data.size >= 96
                                                                        _86995 = mem[_84719 + 32]
                                                                        _86996 = mem[_84719 + 64]
                                                                        mem[mem[64]] = mem[_84719]
                                                                        mem[mem[64] + 64] = _86996
                                                                        mem[mem[64] + 96] = gasForProcessing
                                                                        emit ProcessedDividendTracker(mem[mem[64]], _86995, _86996, gasForProcessing, 1, tx.origin);
                                                    else:
                                                        if stor21[address(arg1)]:
                                                            if not msg.sender:
                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                            if not arg1:
                                                                revert with 0, 'ERC20: transfer to the zero address'
                                                            if balanceOf[address(msg.sender)] < arg2:
                                                                revert with 0, 'ERC20: transfer amount exceeds balance'
                                                            balanceOf[address(msg.sender)] -= arg2
                                                            if balanceOf[arg1] > !arg2:
                                                                revert with 'NH{q', 17
                                                            balanceOf[arg1] += arg2
                                                            emit Transfer(arg2, msg.sender, arg1);
                                                            require ext_code.size(dividendTrackerAddress)
                                                            call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                                 gas gas_remaining wei
                                                                args msg.sender, balanceOf[address(msg.sender)]
                                                            mem[0] = arg1
                                                            mem[32] = 0
                                                            require ext_code.size(dividendTrackerAddress)
                                                            call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                                 gas gas_remaining wei
                                                                args address(arg1), balanceOf[address(arg1)]
                                                            if not ext_call.success:
                                                                if not ext_call.success:
                                                                    if not stor7:
                                                                        call dividendTrackerAddress.process(uint256 arg1) with:
                                                                             gas gas_remaining wei
                                                                            args gasForProcessing
                                                                        mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                        if ext_call.success:
                                                                            _83922 = mem[64]
                                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                                            require return_data.size >= 96
                                                                            _85818 = mem[_83922 + 32]
                                                                            _85819 = mem[_83922 + 64]
                                                                            mem[mem[64]] = mem[_83922]
                                                                            mem[mem[64] + 64] = _85819
                                                                            mem[mem[64] + 96] = gasForProcessing
                                                                            emit ProcessedDividendTracker(mem[mem[64]], _85818, _85819, gasForProcessing, 1, tx.origin);
                                                                else:
                                                                    if not stor7:
                                                                        call dividendTrackerAddress.process(uint256 arg1) with:
                                                                             gas gas_remaining wei
                                                                            args gasForProcessing
                                                                        mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                        if ext_call.success:
                                                                            _84731 = mem[64]
                                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                                            require return_data.size >= 96
                                                                            _87005 = mem[_84731 + 32]
                                                                            _87006 = mem[_84731 + 64]
                                                                            mem[mem[64]] = mem[_84731]
                                                                            mem[mem[64] + 64] = _87006
                                                                            mem[mem[64] + 96] = gasForProcessing
                                                                            emit ProcessedDividendTracker(mem[mem[64]], _87005, _87006, gasForProcessing, 1, tx.origin);
                                                            else:
                                                                if not ext_call.success:
                                                                    if not stor7:
                                                                        call dividendTrackerAddress.process(uint256 arg1) with:
                                                                             gas gas_remaining wei
                                                                            args gasForProcessing
                                                                        mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                        if ext_call.success:
                                                                            _84732 = mem[64]
                                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                                            require return_data.size >= 96
                                                                            _87009 = mem[_84732 + 32]
                                                                            _87010 = mem[_84732 + 64]
                                                                            mem[mem[64]] = mem[_84732]
                                                                            mem[mem[64] + 64] = _87010
                                                                            mem[mem[64] + 96] = gasForProcessing
                                                                            emit ProcessedDividendTracker(mem[mem[64]], _87009, _87010, gasForProcessing, 1, tx.origin);
                                                                else:
                                                                    if not stor7:
                                                                        call dividendTrackerAddress.process(uint256 arg1) with:
                                                                             gas gas_remaining wei
                                                                            args gasForProcessing
                                                                        mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                        if ext_call.success:
                                                                            _85822 = mem[64]
                                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                                            require return_data.size >= 96
                                                                            _87999 = mem[_85822 + 32]
                                                                            _88000 = mem[_85822 + 64]
                                                                            mem[mem[64]] = mem[_85822]
                                                                            mem[mem[64] + 64] = _88000
                                                                            mem[mem[64] + 96] = gasForProcessing
                                                                            emit ProcessedDividendTracker(mem[mem[64]], _87999, _88000, gasForProcessing, 1, tx.origin);
                                                        else:
                                                            if stor7:
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                if not arg1:
                                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                                if balanceOf[address(msg.sender)] < arg2:
                                                                    revert with 0, 'ERC20: transfer amount exceeds balance'
                                                                balanceOf[address(msg.sender)] -= arg2
                                                                if balanceOf[arg1] > !arg2:
                                                                    revert with 'NH{q', 17
                                                                balanceOf[arg1] += arg2
                                                                emit Transfer(arg2, msg.sender, arg1);
                                                                require ext_code.size(dividendTrackerAddress)
                                                                call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                                     gas gas_remaining wei
                                                                    args msg.sender, balanceOf[address(msg.sender)]
                                                                mem[0] = arg1
                                                                mem[32] = 0
                                                                require ext_code.size(dividendTrackerAddress)
                                                                call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                                     gas gas_remaining wei
                                                                    args address(arg1), balanceOf[address(arg1)]
                                                                if not ext_call.success:
                                                                    if not ext_call.success:
                                                                        if not stor7:
                                                                            call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                 gas gas_remaining wei
                                                                                args gasForProcessing
                                                                            mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                            if ext_call.success:
                                                                                _83376 = mem[64]
                                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                                require return_data.size >= 96
                                                                                _84722 = mem[_83376 + 32]
                                                                                _84723 = mem[_83376 + 64]
                                                                                mem[mem[64]] = mem[_83376]
                                                                                mem[mem[64] + 64] = _84723
                                                                                mem[mem[64] + 96] = gasForProcessing
                                                                                emit ProcessedDividendTracker(mem[mem[64]], _84722, _84723, gasForProcessing, 1, tx.origin);
                                                                    else:
                                                                        if not stor7:
                                                                            call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                 gas gas_remaining wei
                                                                                args gasForProcessing
                                                                            mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                            if ext_call.success:
                                                                                _83917 = mem[64]
                                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                                require return_data.size >= 96
                                                                                _85805 = mem[_83917 + 32]
                                                                                _85806 = mem[_83917 + 64]
                                                                                mem[mem[64]] = mem[_83917]
                                                                                mem[mem[64] + 64] = _85806
                                                                                mem[mem[64] + 96] = gasForProcessing
                                                                                emit ProcessedDividendTracker(mem[mem[64]], _85805, _85806, gasForProcessing, 1, tx.origin);
                                                                else:
                                                                    if not ext_call.success:
                                                                        if not stor7:
                                                                            call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                 gas gas_remaining wei
                                                                                args gasForProcessing
                                                                            mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                            if ext_call.success:
                                                                                _83918 = mem[64]
                                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                                require return_data.size >= 96
                                                                                _85809 = mem[_83918 + 32]
                                                                                _85810 = mem[_83918 + 64]
                                                                                mem[mem[64]] = mem[_83918]
                                                                                mem[mem[64] + 64] = _85810
                                                                                mem[mem[64] + 96] = gasForProcessing
                                                                                emit ProcessedDividendTracker(mem[mem[64]], _85809, _85810, gasForProcessing, 1, tx.origin);
                                                                    else:
                                                                        if not stor7:
                                                                            call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                 gas gas_remaining wei
                                                                                args gasForProcessing
                                                                            mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                            if ext_call.success:
                                                                                _84726 = mem[64]
                                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                                require return_data.size >= 96
                                                                                _87000 = mem[_84726 + 32]
                                                                                _87001 = mem[_84726 + 64]
                                                                                mem[mem[64]] = mem[_84726]
                                                                                mem[mem[64] + 64] = _87001
                                                                                mem[mem[64] + 96] = gasForProcessing
                                                                                emit ProcessedDividendTracker(mem[mem[64]], _87000, _87001, gasForProcessing, 1, tx.origin);
                                                            else:
                                                                if arg2 and totalFees > -1 / arg2:
                                                                    revert with 'NH{q', 17
                                                                if not stor22[address(arg1)]:
                                                                    if arg2 < arg2 * totalFees / 100:
                                                                        revert with 'NH{q', 17
                                                                    if not msg.sender:
                                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                                    if not this.address:
                                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                                    if balanceOf[address(msg.sender)] < arg2 * totalFees / 100:
                                                                        revert with 0, 'ERC20: transfer amount exceeds balance'
                                                                    balanceOf[address(msg.sender)] -= arg2 * totalFees / 100
                                                                    if balanceOf[this.address] > !(arg2 * totalFees / 100):
                                                                        revert with 'NH{q', 17
                                                                    balanceOf[this.address] += arg2 * totalFees / 100
                                                                    emit Transfer((arg2 * totalFees / 100), msg.sender, this.address);
                                                                    if not msg.sender:
                                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                                    if not arg1:
                                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                                    if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100):
                                                                        revert with 0, 'ERC20: transfer amount exceeds balance'
                                                                    balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100)
                                                                    if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100)):
                                                                        revert with 'NH{q', 17
                                                                    balanceOf[arg1] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100)
                                                                    emit Transfer((arg2 - (arg2 * totalFees / 100)), msg.sender, arg1);
                                                                    require ext_code.size(dividendTrackerAddress)
                                                                    call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                                         gas gas_remaining wei
                                                                        args msg.sender, balanceOf[address(msg.sender)]
                                                                    mem[0] = arg1
                                                                    mem[32] = 0
                                                                    require ext_code.size(dividendTrackerAddress)
                                                                    call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                                         gas gas_remaining wei
                                                                        args address(arg1), balanceOf[address(arg1)]
                                                                    if not ext_call.success:
                                                                        if not ext_call.success:
                                                                            if not stor7:
                                                                                call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                     gas gas_remaining wei
                                                                                    args gasForProcessing
                                                                                mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                                if ext_call.success:
                                                                                    _93362 = mem[64]
                                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                                    require return_data.size >= 96
                                                                                    _94114 = mem[_93362 + 32]
                                                                                    _94115 = mem[_93362 + 64]
                                                                                    mem[mem[64]] = mem[_93362]
                                                                                    mem[mem[64] + 64] = _94115
                                                                                    mem[mem[64] + 96] = gasForProcessing
                                                                                    emit ProcessedDividendTracker(mem[mem[64]], _94114, _94115, gasForProcessing, 1, tx.origin);
                                                                        else:
                                                                            if not stor7:
                                                                                call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                     gas gas_remaining wei
                                                                                    args gasForProcessing
                                                                                mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                                if ext_call.success:
                                                                                    _93705 = mem[64]
                                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                                    require return_data.size >= 96
                                                                                    _94522 = mem[_93705 + 32]
                                                                                    _94523 = mem[_93705 + 64]
                                                                                    mem[mem[64]] = mem[_93705]
                                                                                    mem[mem[64] + 64] = _94523
                                                                                    mem[mem[64] + 96] = gasForProcessing
                                                                                    emit ProcessedDividendTracker(mem[mem[64]], _94522, _94523, gasForProcessing, 1, tx.origin);
                                                                    else:
                                                                        if not ext_call.success:
                                                                            if not stor7:
                                                                                call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                     gas gas_remaining wei
                                                                                    args gasForProcessing
                                                                                mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                                if ext_call.success:
                                                                                    _93706 = mem[64]
                                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                                    require return_data.size >= 96
                                                                                    _94526 = mem[_93706 + 32]
                                                                                    _94527 = mem[_93706 + 64]
                                                                                    mem[mem[64]] = mem[_93706]
                                                                                    mem[mem[64] + 64] = _94527
                                                                                    mem[mem[64] + 96] = gasForProcessing
                                                                                    emit ProcessedDividendTracker(mem[mem[64]], _94526, _94527, gasForProcessing, 1, tx.origin);
                                                                        else:
                                                                            if not stor7:
                                                                                call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                     gas gas_remaining wei
                                                                                    args gasForProcessing
                                                                                mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                                if ext_call.success:
                                                                                    _94118 = mem[64]
                                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                                    require return_data.size >= 96
                                                                                    _94905 = mem[_94118 + 32]
                                                                                    _94906 = mem[_94118 + 64]
                                                                                    mem[mem[64]] = mem[_94118]
                                                                                    mem[mem[64] + 64] = _94906
                                                                                    mem[mem[64] + 96] = gasForProcessing
                                                                                    emit ProcessedDividendTracker(mem[mem[64]], _94905, _94906, gasForProcessing, 1, tx.origin);
                                                                else:
                                                                    if arg2 and sellFeeIncreaseFactor > -1 / arg2:
                                                                        revert with 'NH{q', 17
                                                                    if arg2 * totalFees / 100 > !(arg2 * sellFeeIncreaseFactor / 100):
                                                                        revert with 'NH{q', 17
                                                                    if arg2 < (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100):
                                                                        revert with 'NH{q', 17
                                                                    if not msg.sender:
                                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                                    if not this.address:
                                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                                    if balanceOf[address(msg.sender)] < (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100):
                                                                        revert with 0, 'ERC20: transfer amount exceeds balance'
                                                                    balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)
                                                                    if balanceOf[this.address] > !((arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)):
                                                                        revert with 'NH{q', 17
                                                                    balanceOf[this.address] = balanceOf[this.address] + (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)
                                                                    emit Transfer(((arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)), msg.sender, this.address);
                                                                    if not msg.sender:
                                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                                    if not arg1:
                                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                                    if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100):
                                                                        revert with 0, 'ERC20: transfer amount exceeds balance'
                                                                    balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)
                                                                    if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)):
                                                                        revert with 'NH{q', 17
                                                                    balanceOf[arg1] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)
                                                                    emit Transfer((arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)), msg.sender, arg1);
                                                                    require ext_code.size(dividendTrackerAddress)
                                                                    call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                                         gas gas_remaining wei
                                                                        args msg.sender, balanceOf[address(msg.sender)]
                                                                    mem[0] = arg1
                                                                    mem[32] = 0
                                                                    require ext_code.size(dividendTrackerAddress)
                                                                    call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                                         gas gas_remaining wei
                                                                        args address(arg1), balanceOf[address(arg1)]
                                                                    if not ext_call.success:
                                                                        if not ext_call.success:
                                                                            if not stor7:
                                                                                call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                     gas gas_remaining wei
                                                                                    args gasForProcessing
                                                                                mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                                if ext_call.success:
                                                                                    _96934 = mem[64]
                                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                                    require return_data.size >= 96
                                                                                    _97409 = mem[_96934 + 32]
                                                                                    _97410 = mem[_96934 + 64]
                                                                                    mem[mem[64]] = mem[_96934]
                                                                                    mem[mem[64] + 64] = _97410
                                                                                    mem[mem[64] + 96] = gasForProcessing
                                                                                    emit ProcessedDividendTracker(mem[mem[64]], _97409, _97410, gasForProcessing, 1, tx.origin);
                                                                        else:
                                                                            if not stor7:
                                                                                call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                     gas gas_remaining wei
                                                                                    args gasForProcessing
                                                                                mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                                if ext_call.success:
                                                                                    _97142 = mem[64]
                                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                                    require return_data.size >= 96
                                                                                    _97749 = mem[_97142 + 32]
                                                                                    _97750 = mem[_97142 + 64]
                                                                                    mem[mem[64]] = mem[_97142]
                                                                                    mem[mem[64] + 64] = _97750
                                                                                    mem[mem[64] + 96] = gasForProcessing
                                                                                    emit ProcessedDividendTracker(mem[mem[64]], _97749, _97750, gasForProcessing, 1, tx.origin);
                                                                    else:
                                                                        if not ext_call.success:
                                                                            if not stor7:
                                                                                call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                     gas gas_remaining wei
                                                                                    args gasForProcessing
                                                                                mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                                if ext_call.success:
                                                                                    _97143 = mem[64]
                                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                                    require return_data.size >= 96
                                                                                    _97753 = mem[_97143 + 32]
                                                                                    _97754 = mem[_97143 + 64]
                                                                                    mem[mem[64]] = mem[_97143]
                                                                                    mem[mem[64] + 64] = _97754
                                                                                    mem[mem[64] + 96] = gasForProcessing
                                                                                    emit ProcessedDividendTracker(mem[mem[64]], _97753, _97754, gasForProcessing, 1, tx.origin);
                                                                        else:
                                                                            if not stor7:
                                                                                call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                     gas gas_remaining wei
                                                                                    args gasForProcessing
                                                                                mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                                if ext_call.success:
                                                                                    _97413 = mem[64]
                                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                                    require return_data.size >= 96
                                                                                    _98108 = mem[_97413 + 32]
                                                                                    _98109 = mem[_97413 + 64]
                                                                                    mem[mem[64]] = mem[_97413]
                                                                                    mem[mem[64] + 64] = _98109
                                                                                    mem[mem[64] + 96] = gasForProcessing
                                                                                    emit ProcessedDividendTracker(mem[mem[64]], _98108, _98109, gasForProcessing, 1, tx.origin);
                                                else:
                                                    emit SendDividends(balanceOf[this.address], eth.balance(this.address));
                                                    stor7 = 0
                                                    if stor21[address(msg.sender)]:
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if not arg1:
                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                        if balanceOf[address(msg.sender)] < arg2:
                                                            revert with 0, 'ERC20: transfer amount exceeds balance'
                                                        balanceOf[address(msg.sender)] -= arg2
                                                        if balanceOf[arg1] > !arg2:
                                                            revert with 'NH{q', 17
                                                        balanceOf[arg1] += arg2
                                                        emit Transfer(arg2, msg.sender, arg1);
                                                        require ext_code.size(dividendTrackerAddress)
                                                        call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                             gas gas_remaining wei
                                                            args msg.sender, balanceOf[address(msg.sender)]
                                                        mem[0] = arg1
                                                        mem[32] = 0
                                                        require ext_code.size(dividendTrackerAddress)
                                                        call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                             gas gas_remaining wei
                                                            args address(arg1), balanceOf[address(arg1)]
                                                        if not ext_call.success:
                                                            if not ext_call.success:
                                                                if not stor7:
                                                                    call dividendTrackerAddress.process(uint256 arg1) with:
                                                                         gas gas_remaining wei
                                                                        args gasForProcessing
                                                                    mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                    if ext_call.success:
                                                                        _83927 = mem[64]
                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                        require return_data.size >= 96
                                                                        _85825 = mem[_83927 + 32]
                                                                        _85826 = mem[_83927 + 64]
                                                                        mem[mem[64]] = mem[_83927]
                                                                        mem[mem[64] + 64] = _85826
                                                                        mem[mem[64] + 96] = gasForProcessing
                                                                        emit ProcessedDividendTracker(mem[mem[64]], _85825, _85826, gasForProcessing, 1, tx.origin);
                                                            else:
                                                                if not stor7:
                                                                    call dividendTrackerAddress.process(uint256 arg1) with:
                                                                         gas gas_remaining wei
                                                                        args gasForProcessing
                                                                    mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                    if ext_call.success:
                                                                        _84736 = mem[64]
                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                        require return_data.size >= 96
                                                                        _87014 = mem[_84736 + 32]
                                                                        _87015 = mem[_84736 + 64]
                                                                        mem[mem[64]] = mem[_84736]
                                                                        mem[mem[64] + 64] = _87015
                                                                        mem[mem[64] + 96] = gasForProcessing
                                                                        emit ProcessedDividendTracker(mem[mem[64]], _87014, _87015, gasForProcessing, 1, tx.origin);
                                                        else:
                                                            if not ext_call.success:
                                                                if not stor7:
                                                                    call dividendTrackerAddress.process(uint256 arg1) with:
                                                                         gas gas_remaining wei
                                                                        args gasForProcessing
                                                                    mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                    if ext_call.success:
                                                                        _84737 = mem[64]
                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                        require return_data.size >= 96
                                                                        _87018 = mem[_84737 + 32]
                                                                        _87019 = mem[_84737 + 64]
                                                                        mem[mem[64]] = mem[_84737]
                                                                        mem[mem[64] + 64] = _87019
                                                                        mem[mem[64] + 96] = gasForProcessing
                                                                        emit ProcessedDividendTracker(mem[mem[64]], _87018, _87019, gasForProcessing, 1, tx.origin);
                                                            else:
                                                                if not stor7:
                                                                    call dividendTrackerAddress.process(uint256 arg1) with:
                                                                         gas gas_remaining wei
                                                                        args gasForProcessing
                                                                    mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                    if ext_call.success:
                                                                        _85829 = mem[64]
                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                        require return_data.size >= 96
                                                                        _88004 = mem[_85829 + 32]
                                                                        _88005 = mem[_85829 + 64]
                                                                        mem[mem[64]] = mem[_85829]
                                                                        mem[mem[64] + 64] = _88005
                                                                        mem[mem[64] + 96] = gasForProcessing
                                                                        emit ProcessedDividendTracker(mem[mem[64]], _88004, _88005, gasForProcessing, 1, tx.origin);
                                                    else:
                                                        if stor21[address(arg1)]:
                                                            if not msg.sender:
                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                            if not arg1:
                                                                revert with 0, 'ERC20: transfer to the zero address'
                                                            if balanceOf[address(msg.sender)] < arg2:
                                                                revert with 0, 'ERC20: transfer amount exceeds balance'
                                                            balanceOf[address(msg.sender)] -= arg2
                                                            if balanceOf[arg1] > !arg2:
                                                                revert with 'NH{q', 17
                                                            balanceOf[arg1] += arg2
                                                            emit Transfer(arg2, msg.sender, arg1);
                                                            require ext_code.size(dividendTrackerAddress)
                                                            call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                                 gas gas_remaining wei
                                                                args msg.sender, balanceOf[address(msg.sender)]
                                                            mem[0] = arg1
                                                            mem[32] = 0
                                                            require ext_code.size(dividendTrackerAddress)
                                                            call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                                 gas gas_remaining wei
                                                                args address(arg1), balanceOf[address(arg1)]
                                                            if not ext_call.success:
                                                                if not ext_call.success:
                                                                    if not stor7:
                                                                        call dividendTrackerAddress.process(uint256 arg1) with:
                                                                             gas gas_remaining wei
                                                                            args gasForProcessing
                                                                        mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                        if ext_call.success:
                                                                            _84746 = mem[64]
                                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                                            require return_data.size >= 96
                                                                            _87036 = mem[_84746 + 32]
                                                                            _87037 = mem[_84746 + 64]
                                                                            mem[mem[64]] = mem[_84746]
                                                                            mem[mem[64] + 64] = _87037
                                                                            mem[mem[64] + 96] = gasForProcessing
                                                                            emit ProcessedDividendTracker(mem[mem[64]], _87036, _87037, gasForProcessing, 1, tx.origin);
                                                                else:
                                                                    if not stor7:
                                                                        call dividendTrackerAddress.process(uint256 arg1) with:
                                                                             gas gas_remaining wei
                                                                            args gasForProcessing
                                                                        mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                        if ext_call.success:
                                                                            _85841 = mem[64]
                                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                                            require return_data.size >= 96
                                                                            _88014 = mem[_85841 + 32]
                                                                            _88015 = mem[_85841 + 64]
                                                                            mem[mem[64]] = mem[_85841]
                                                                            mem[mem[64] + 64] = _88015
                                                                            mem[mem[64] + 96] = gasForProcessing
                                                                            emit ProcessedDividendTracker(mem[mem[64]], _88014, _88015, gasForProcessing, 1, tx.origin);
                                                            else:
                                                                if not ext_call.success:
                                                                    if not stor7:
                                                                        call dividendTrackerAddress.process(uint256 arg1) with:
                                                                             gas gas_remaining wei
                                                                            args gasForProcessing
                                                                        mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                        if ext_call.success:
                                                                            _85842 = mem[64]
                                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                                            require return_data.size >= 96
                                                                            _88018 = mem[_85842 + 32]
                                                                            _88019 = mem[_85842 + 64]
                                                                            mem[mem[64]] = mem[_85842]
                                                                            mem[mem[64] + 64] = _88019
                                                                            mem[mem[64] + 96] = gasForProcessing
                                                                            emit ProcessedDividendTracker(mem[mem[64]], _88018, _88019, gasForProcessing, 1, tx.origin);
                                                                else:
                                                                    if not stor7:
                                                                        call dividendTrackerAddress.process(uint256 arg1) with:
                                                                             gas gas_remaining wei
                                                                            args gasForProcessing
                                                                        mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                        if ext_call.success:
                                                                            _87040 = mem[64]
                                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                                            require return_data.size >= 96
                                                                            _88859 = mem[_87040 + 32]
                                                                            _88860 = mem[_87040 + 64]
                                                                            mem[mem[64]] = mem[_87040]
                                                                            mem[mem[64] + 64] = _88860
                                                                            mem[mem[64] + 96] = gasForProcessing
                                                                            emit ProcessedDividendTracker(mem[mem[64]], _88859, _88860, gasForProcessing, 1, tx.origin);
                                                        else:
                                                            if stor7:
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                if not arg1:
                                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                                if balanceOf[address(msg.sender)] < arg2:
                                                                    revert with 0, 'ERC20: transfer amount exceeds balance'
                                                                balanceOf[address(msg.sender)] -= arg2
                                                                if balanceOf[arg1] > !arg2:
                                                                    revert with 'NH{q', 17
                                                                balanceOf[arg1] += arg2
                                                                emit Transfer(arg2, msg.sender, arg1);
                                                                require ext_code.size(dividendTrackerAddress)
                                                                call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                                     gas gas_remaining wei
                                                                    args msg.sender, balanceOf[address(msg.sender)]
                                                                mem[0] = arg1
                                                                mem[32] = 0
                                                                require ext_code.size(dividendTrackerAddress)
                                                                call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                                     gas gas_remaining wei
                                                                    args address(arg1), balanceOf[address(arg1)]
                                                                if not ext_call.success:
                                                                    if not ext_call.success:
                                                                        if not stor7:
                                                                            call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                 gas gas_remaining wei
                                                                                args gasForProcessing
                                                                            mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                            if ext_call.success:
                                                                                _83932 = mem[64]
                                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                                require return_data.size >= 96
                                                                                _85832 = mem[_83932 + 32]
                                                                                _85833 = mem[_83932 + 64]
                                                                                mem[mem[64]] = mem[_83932]
                                                                                mem[mem[64] + 64] = _85833
                                                                                mem[mem[64] + 96] = gasForProcessing
                                                                                emit ProcessedDividendTracker(mem[mem[64]], _85832, _85833, gasForProcessing, 1, tx.origin);
                                                                    else:
                                                                        if not stor7:
                                                                            call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                 gas gas_remaining wei
                                                                                args gasForProcessing
                                                                            mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                            if ext_call.success:
                                                                                _84741 = mem[64]
                                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                                require return_data.size >= 96
                                                                                _87023 = mem[_84741 + 32]
                                                                                _87024 = mem[_84741 + 64]
                                                                                mem[mem[64]] = mem[_84741]
                                                                                mem[mem[64] + 64] = _87024
                                                                                mem[mem[64] + 96] = gasForProcessing
                                                                                emit ProcessedDividendTracker(mem[mem[64]], _87023, _87024, gasForProcessing, 1, tx.origin);
                                                                else:
                                                                    if not ext_call.success:
                                                                        if not stor7:
                                                                            call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                 gas gas_remaining wei
                                                                                args gasForProcessing
                                                                            mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                            if ext_call.success:
                                                                                _84742 = mem[64]
                                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                                require return_data.size >= 96
                                                                                _87027 = mem[_84742 + 32]
                                                                                _87028 = mem[_84742 + 64]
                                                                                mem[mem[64]] = mem[_84742]
                                                                                mem[mem[64] + 64] = _87028
                                                                                mem[mem[64] + 96] = gasForProcessing
                                                                                emit ProcessedDividendTracker(mem[mem[64]], _87027, _87028, gasForProcessing, 1, tx.origin);
                                                                    else:
                                                                        if not stor7:
                                                                            call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                 gas gas_remaining wei
                                                                                args gasForProcessing
                                                                            mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                            if ext_call.success:
                                                                                _85836 = mem[64]
                                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                                require return_data.size >= 96
                                                                                _88009 = mem[_85836 + 32]
                                                                                _88010 = mem[_85836 + 64]
                                                                                mem[mem[64]] = mem[_85836]
                                                                                mem[mem[64] + 64] = _88010
                                                                                mem[mem[64] + 96] = gasForProcessing
                                                                                emit ProcessedDividendTracker(mem[mem[64]], _88009, _88010, gasForProcessing, 1, tx.origin);
                                                            else:
                                                                if arg2 and totalFees > -1 / arg2:
                                                                    revert with 'NH{q', 17
                                                                if not stor22[address(arg1)]:
                                                                    if arg2 < arg2 * totalFees / 100:
                                                                        revert with 'NH{q', 17
                                                                    if not msg.sender:
                                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                                    if not this.address:
                                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                                    if balanceOf[address(msg.sender)] < arg2 * totalFees / 100:
                                                                        revert with 0, 'ERC20: transfer amount exceeds balance'
                                                                    balanceOf[address(msg.sender)] -= arg2 * totalFees / 100
                                                                    if balanceOf[this.address] > !(arg2 * totalFees / 100):
                                                                        revert with 'NH{q', 17
                                                                    balanceOf[this.address] += arg2 * totalFees / 100
                                                                    emit Transfer((arg2 * totalFees / 100), msg.sender, this.address);
                                                                    if not msg.sender:
                                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                                    if not arg1:
                                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                                    if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100):
                                                                        revert with 0, 'ERC20: transfer amount exceeds balance'
                                                                    balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100)
                                                                    if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100)):
                                                                        revert with 'NH{q', 17
                                                                    balanceOf[arg1] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100)
                                                                    emit Transfer((arg2 - (arg2 * totalFees / 100)), msg.sender, arg1);
                                                                    require ext_code.size(dividendTrackerAddress)
                                                                    call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                                         gas gas_remaining wei
                                                                        args msg.sender, balanceOf[address(msg.sender)]
                                                                    mem[0] = arg1
                                                                    mem[32] = 0
                                                                    require ext_code.size(dividendTrackerAddress)
                                                                    call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                                         gas gas_remaining wei
                                                                        args address(arg1), balanceOf[address(arg1)]
                                                                    if not ext_call.success:
                                                                        if not ext_call.success:
                                                                            if not stor7:
                                                                                call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                     gas gas_remaining wei
                                                                                    args gasForProcessing
                                                                                mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                                if ext_call.success:
                                                                                    _93713 = mem[64]
                                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                                    require return_data.size >= 96
                                                                                    _94531 = mem[_93713 + 32]
                                                                                    _94532 = mem[_93713 + 64]
                                                                                    mem[mem[64]] = mem[_93713]
                                                                                    mem[mem[64] + 64] = _94532
                                                                                    mem[mem[64] + 96] = gasForProcessing
                                                                                    emit ProcessedDividendTracker(mem[mem[64]], _94531, _94532, gasForProcessing, 1, tx.origin);
                                                                        else:
                                                                            if not stor7:
                                                                                call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                     gas gas_remaining wei
                                                                                    args gasForProcessing
                                                                                mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                                if ext_call.success:
                                                                                    _94121 = mem[64]
                                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                                    require return_data.size >= 96
                                                                                    _94910 = mem[_94121 + 32]
                                                                                    _94911 = mem[_94121 + 64]
                                                                                    mem[mem[64]] = mem[_94121]
                                                                                    mem[mem[64] + 64] = _94911
                                                                                    mem[mem[64] + 96] = gasForProcessing
                                                                                    emit ProcessedDividendTracker(mem[mem[64]], _94910, _94911, gasForProcessing, 1, tx.origin);
                                                                    else:
                                                                        if not ext_call.success:
                                                                            if not stor7:
                                                                                call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                     gas gas_remaining wei
                                                                                    args gasForProcessing
                                                                                mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                                if ext_call.success:
                                                                                    _94122 = mem[64]
                                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                                    require return_data.size >= 96
                                                                                    _94914 = mem[_94122 + 32]
                                                                                    _94915 = mem[_94122 + 64]
                                                                                    mem[mem[64]] = mem[_94122]
                                                                                    mem[mem[64] + 64] = _94915
                                                                                    mem[mem[64] + 96] = gasForProcessing
                                                                                    emit ProcessedDividendTracker(mem[mem[64]], _94914, _94915, gasForProcessing, 1, tx.origin);
                                                                        else:
                                                                            if not stor7:
                                                                                call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                     gas gas_remaining wei
                                                                                    args gasForProcessing
                                                                                mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                                if ext_call.success:
                                                                                    _94535 = mem[64]
                                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                                    require return_data.size >= 96
                                                                                    _95232 = mem[_94535 + 32]
                                                                                    _95233 = mem[_94535 + 64]
                                                                                    mem[mem[64]] = mem[_94535]
                                                                                    mem[mem[64] + 64] = _95233
                                                                                    mem[mem[64] + 96] = gasForProcessing
                                                                                    emit ProcessedDividendTracker(mem[mem[64]], _95232, _95233, gasForProcessing, 1, tx.origin);
                                                                else:
                                                                    if arg2 and sellFeeIncreaseFactor > -1 / arg2:
                                                                        revert with 'NH{q', 17
                                                                    if arg2 * totalFees / 100 > !(arg2 * sellFeeIncreaseFactor / 100):
                                                                        revert with 'NH{q', 17
                                                                    if arg2 < (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100):
                                                                        revert with 'NH{q', 17
                                                                    if not msg.sender:
                                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                                    if not this.address:
                                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                                    if balanceOf[address(msg.sender)] < (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100):
                                                                        revert with 0, 'ERC20: transfer amount exceeds balance'
                                                                    balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)
                                                                    if balanceOf[this.address] > !((arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)):
                                                                        revert with 'NH{q', 17
                                                                    balanceOf[this.address] = balanceOf[this.address] + (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)
                                                                    emit Transfer(((arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)), msg.sender, this.address);
                                                                    if not msg.sender:
                                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                                    if not arg1:
                                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                                    if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100):
                                                                        revert with 0, 'ERC20: transfer amount exceeds balance'
                                                                    balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)
                                                                    if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)):
                                                                        revert with 'NH{q', 17
                                                                    balanceOf[arg1] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)
                                                                    emit Transfer((arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)), msg.sender, arg1);
                                                                    require ext_code.size(dividendTrackerAddress)
                                                                    call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                                         gas gas_remaining wei
                                                                        args msg.sender, balanceOf[address(msg.sender)]
                                                                    mem[0] = arg1
                                                                    mem[32] = 0
                                                                    require ext_code.size(dividendTrackerAddress)
                                                                    call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                                         gas gas_remaining wei
                                                                        args address(arg1), balanceOf[address(arg1)]
                                                                    if not ext_call.success:
                                                                        if not ext_call.success:
                                                                            if not stor7:
                                                                                call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                     gas gas_remaining wei
                                                                                    args gasForProcessing
                                                                                mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                                if ext_call.success:
                                                                                    _97146 = mem[64]
                                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                                    require return_data.size >= 96
                                                                                    _97758 = mem[_97146 + 32]
                                                                                    _97759 = mem[_97146 + 64]
                                                                                    mem[mem[64]] = mem[_97146]
                                                                                    mem[mem[64] + 64] = _97759
                                                                                    mem[mem[64] + 96] = gasForProcessing
                                                                                    emit ProcessedDividendTracker(mem[mem[64]], _97758, _97759, gasForProcessing, 1, tx.origin);
                                                                        else:
                                                                            if not stor7:
                                                                                call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                     gas gas_remaining wei
                                                                                    args gasForProcessing
                                                                                mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                                if ext_call.success:
                                                                                    _97415 = mem[64]
                                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                                    require return_data.size >= 96
                                                                                    _98112 = mem[_97415 + 32]
                                                                                    _98113 = mem[_97415 + 64]
                                                                                    mem[mem[64]] = mem[_97415]
                                                                                    mem[mem[64] + 64] = _98113
                                                                                    mem[mem[64] + 96] = gasForProcessing
                                                                                    emit ProcessedDividendTracker(mem[mem[64]], _98112, _98113, gasForProcessing, 1, tx.origin);
                                                                    else:
                                                                        if not ext_call.success:
                                                                            if not stor7:
                                                                                call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                     gas gas_remaining wei
                                                                                    args gasForProcessing
                                                                                mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                                if ext_call.success:
                                                                                    _97416 = mem[64]
                                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                                    require return_data.size >= 96
                                                                                    _98116 = mem[_97416 + 32]
                                                                                    _98117 = mem[_97416 + 64]
                                                                                    mem[mem[64]] = mem[_97416]
                                                                                    mem[mem[64] + 64] = _98117
                                                                                    mem[mem[64] + 96] = gasForProcessing
                                                                                    emit ProcessedDividendTracker(mem[mem[64]], _98116, _98117, gasForProcessing, 1, tx.origin);
                                                                        else:
                                                                            if not stor7:
                                                                                call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                     gas gas_remaining wei
                                                                                    args gasForProcessing
                                                                                mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                                if ext_call.success:
                                                                                    _97762 = mem[64]
                                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                                    require return_data.size >= 96
                                                                                    _98397 = mem[_97762 + 32]
                                                                                    _98398 = mem[_97762 + 64]
                                                                                    mem[mem[64]] = mem[_97762]
                                                                                    mem[mem[64] + 64] = _98398
                                                                                    mem[mem[64] + 96] = gasForProcessing
                                                                                    emit ProcessedDividendTracker(mem[mem[64]], _98397, _98398, gasForProcessing, 1, tx.origin);
                else:
                    if arg2 > maxSellTransactionAmount:
                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                    'Sell transfer amount exceeds the maxSellTransactionAmount.'
                    if stor21[address(arg1)]:
                        if balanceOf[this.address] < swapTokensAtAmount:
                            if stor21[address(msg.sender)]:
                                if not msg.sender:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                if not arg1:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                if balanceOf[address(msg.sender)] < arg2:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                balanceOf[address(msg.sender)] -= arg2
                                if balanceOf[arg1] > !arg2:
                                    revert with 'NH{q', 17
                                balanceOf[arg1] += arg2
                                emit Transfer(arg2, msg.sender, arg1);
                            else:
                                if stor21[address(arg1)]:
                                    if not msg.sender:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                    if not arg1:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                    if balanceOf[address(msg.sender)] < arg2:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                    balanceOf[address(msg.sender)] -= arg2
                                    if balanceOf[arg1] > !arg2:
                                        revert with 'NH{q', 17
                                    balanceOf[arg1] += arg2
                                    emit Transfer(arg2, msg.sender, arg1);
                                else:
                                    if stor7:
                                        if not msg.sender:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                        if not arg1:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                        if balanceOf[address(msg.sender)] < arg2:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                        balanceOf[address(msg.sender)] -= arg2
                                        if balanceOf[arg1] > !arg2:
                                            revert with 'NH{q', 17
                                        balanceOf[arg1] += arg2
                                        emit Transfer(arg2, msg.sender, arg1);
                                    else:
                                        if arg2 and totalFees > -1 / arg2:
                                            revert with 'NH{q', 17
                                        if not stor22[address(arg1)]:
                                            if arg2 < arg2 * totalFees / 100:
                                                revert with 'NH{q', 17
                                            if not msg.sender:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                            if not this.address:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                            if balanceOf[address(msg.sender)] < arg2 * totalFees / 100:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                            balanceOf[address(msg.sender)] -= arg2 * totalFees / 100
                                            if balanceOf[this.address] > !(arg2 * totalFees / 100):
                                                revert with 'NH{q', 17
                                            balanceOf[this.address] += arg2 * totalFees / 100
                                            emit Transfer((arg2 * totalFees / 100), msg.sender, this.address);
                                            if not msg.sender:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                            if not arg1:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                            if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100):
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                            balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100)
                                            if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100)):
                                                revert with 'NH{q', 17
                                            balanceOf[arg1] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100)
                                            emit Transfer((arg2 - (arg2 * totalFees / 100)), msg.sender, arg1);
                                        else:
                                            if arg2 and sellFeeIncreaseFactor > -1 / arg2:
                                                revert with 'NH{q', 17
                                            if arg2 * totalFees / 100 > !(arg2 * sellFeeIncreaseFactor / 100):
                                                revert with 'NH{q', 17
                                            if arg2 < (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100):
                                                revert with 'NH{q', 17
                                            if not msg.sender:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                            if not this.address:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                            if balanceOf[address(msg.sender)] < (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100):
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                            balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)
                                            if balanceOf[this.address] > !((arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)):
                                                revert with 'NH{q', 17
                                            balanceOf[this.address] = balanceOf[this.address] + (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)
                                            emit Transfer(((arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)), msg.sender, this.address);
                                            if not msg.sender:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                            if not arg1:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                            if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100):
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                            balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)
                                            if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)):
                                                revert with 'NH{q', 17
                                            balanceOf[arg1] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)
                                            emit Transfer((arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)), msg.sender, arg1);
                        else:
                            if stor7:
                                if stor21[address(msg.sender)]:
                                    if not msg.sender:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                    if not arg1:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                    if balanceOf[address(msg.sender)] < arg2:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                    balanceOf[address(msg.sender)] -= arg2
                                    if balanceOf[arg1] > !arg2:
                                        revert with 'NH{q', 17
                                    balanceOf[arg1] += arg2
                                    emit Transfer(arg2, msg.sender, arg1);
                                else:
                                    if stor21[address(arg1)]:
                                        if not msg.sender:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                        if not arg1:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                        if balanceOf[address(msg.sender)] < arg2:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                        balanceOf[address(msg.sender)] -= arg2
                                        if balanceOf[arg1] > !arg2:
                                            revert with 'NH{q', 17
                                        balanceOf[arg1] += arg2
                                        emit Transfer(arg2, msg.sender, arg1);
                                    else:
                                        if stor7:
                                            if not msg.sender:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                            if not arg1:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                            if balanceOf[address(msg.sender)] < arg2:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                            balanceOf[address(msg.sender)] -= arg2
                                            if balanceOf[arg1] > !arg2:
                                                revert with 'NH{q', 17
                                            balanceOf[arg1] += arg2
                                            emit Transfer(arg2, msg.sender, arg1);
                                        else:
                                            if arg2 and totalFees > -1 / arg2:
                                                revert with 'NH{q', 17
                                            if not stor22[address(arg1)]:
                                                if arg2 < arg2 * totalFees / 100:
                                                    revert with 'NH{q', 17
                                                if not msg.sender:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                if not this.address:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                if balanceOf[address(msg.sender)] < arg2 * totalFees / 100:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                balanceOf[address(msg.sender)] -= arg2 * totalFees / 100
                                                if balanceOf[this.address] > !(arg2 * totalFees / 100):
                                                    revert with 'NH{q', 17
                                                balanceOf[this.address] += arg2 * totalFees / 100
                                                emit Transfer((arg2 * totalFees / 100), msg.sender, this.address);
                                                if not msg.sender:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                if not arg1:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100):
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100)
                                                if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100)):
                                                    revert with 'NH{q', 17
                                                balanceOf[arg1] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100)
                                                emit Transfer((arg2 - (arg2 * totalFees / 100)), msg.sender, arg1);
                                            else:
                                                if arg2 and sellFeeIncreaseFactor > -1 / arg2:
                                                    revert with 'NH{q', 17
                                                if arg2 * totalFees / 100 > !(arg2 * sellFeeIncreaseFactor / 100):
                                                    revert with 'NH{q', 17
                                                if arg2 < (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100):
                                                    revert with 'NH{q', 17
                                                if not msg.sender:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                if not this.address:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                if balanceOf[address(msg.sender)] < (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100):
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)
                                                if balanceOf[this.address] > !((arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)):
                                                    revert with 'NH{q', 17
                                                balanceOf[this.address] = balanceOf[this.address] + (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)
                                                emit Transfer(((arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)), msg.sender, this.address);
                                                if not msg.sender:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                if not arg1:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100):
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)
                                                if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)):
                                                    revert with 'NH{q', 17
                                                balanceOf[arg1] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)
                                                emit Transfer((arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)), msg.sender, arg1);
                            else:
                                if stor22[address(msg.sender)]:
                                    if stor21[address(msg.sender)]:
                                        if not msg.sender:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                        if not arg1:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                        if balanceOf[address(msg.sender)] < arg2:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                        balanceOf[address(msg.sender)] -= arg2
                                        if balanceOf[arg1] > !arg2:
                                            revert with 'NH{q', 17
                                        balanceOf[arg1] += arg2
                                        emit Transfer(arg2, msg.sender, arg1);
                                    else:
                                        if stor21[address(arg1)]:
                                            if not msg.sender:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                            if not arg1:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                            if balanceOf[address(msg.sender)] < arg2:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                            balanceOf[address(msg.sender)] -= arg2
                                            if balanceOf[arg1] > !arg2:
                                                revert with 'NH{q', 17
                                            balanceOf[arg1] += arg2
                                            emit Transfer(arg2, msg.sender, arg1);
                                        else:
                                            if stor7:
                                                if not msg.sender:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                if not arg1:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                if balanceOf[address(msg.sender)] < arg2:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                balanceOf[address(msg.sender)] -= arg2
                                                if balanceOf[arg1] > !arg2:
                                                    revert with 'NH{q', 17
                                                balanceOf[arg1] += arg2
                                                emit Transfer(arg2, msg.sender, arg1);
                                            else:
                                                if arg2 and totalFees > -1 / arg2:
                                                    revert with 'NH{q', 17
                                                if not stor22[address(arg1)]:
                                                    if arg2 < arg2 * totalFees / 100:
                                                        revert with 'NH{q', 17
                                                    if not msg.sender:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                    if not this.address:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                    if balanceOf[address(msg.sender)] < arg2 * totalFees / 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                    balanceOf[address(msg.sender)] -= arg2 * totalFees / 100
                                                    if balanceOf[this.address] > !(arg2 * totalFees / 100):
                                                        revert with 'NH{q', 17
                                                    balanceOf[this.address] += arg2 * totalFees / 100
                                                    emit Transfer((arg2 * totalFees / 100), msg.sender, this.address);
                                                    if not msg.sender:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                    if not arg1:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                    if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100):
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                    balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100)
                                                    if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100)):
                                                        revert with 'NH{q', 17
                                                    balanceOf[arg1] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100)
                                                    emit Transfer((arg2 - (arg2 * totalFees / 100)), msg.sender, arg1);
                                                else:
                                                    if arg2 and sellFeeIncreaseFactor > -1 / arg2:
                                                        revert with 'NH{q', 17
                                                    if arg2 * totalFees / 100 > !(arg2 * sellFeeIncreaseFactor / 100):
                                                        revert with 'NH{q', 17
                                                    if arg2 < (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100):
                                                        revert with 'NH{q', 17
                                                    if not msg.sender:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                    if not this.address:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                    if balanceOf[address(msg.sender)] < (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100):
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                    balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)
                                                    if balanceOf[this.address] > !((arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)):
                                                        revert with 'NH{q', 17
                                                    balanceOf[this.address] = balanceOf[this.address] + (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)
                                                    emit Transfer(((arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)), msg.sender, this.address);
                                                    if not msg.sender:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                    if not arg1:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                    if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100):
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                    balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)
                                                    if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)):
                                                        revert with 'NH{q', 17
                                                    balanceOf[arg1] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)
                                                    emit Transfer((arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)), msg.sender, arg1);
                                else:
                                    if owner == msg.sender:
                                        if stor21[address(msg.sender)]:
                                            if not msg.sender:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                            if not arg1:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                            if balanceOf[address(msg.sender)] < arg2:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                            balanceOf[address(msg.sender)] -= arg2
                                            if balanceOf[arg1] > !arg2:
                                                revert with 'NH{q', 17
                                            balanceOf[arg1] += arg2
                                            emit Transfer(arg2, msg.sender, arg1);
                                        else:
                                            if stor21[address(arg1)]:
                                                if not msg.sender:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                if not arg1:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                if balanceOf[address(msg.sender)] < arg2:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                balanceOf[address(msg.sender)] -= arg2
                                                if balanceOf[arg1] > !arg2:
                                                    revert with 'NH{q', 17
                                                balanceOf[arg1] += arg2
                                                emit Transfer(arg2, msg.sender, arg1);
                                            else:
                                                if stor7:
                                                    if not msg.sender:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                    if not arg1:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                    if balanceOf[address(msg.sender)] < arg2:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                    balanceOf[address(msg.sender)] -= arg2
                                                    if balanceOf[arg1] > !arg2:
                                                        revert with 'NH{q', 17
                                                    balanceOf[arg1] += arg2
                                                    emit Transfer(arg2, msg.sender, arg1);
                                                else:
                                                    if arg2 and totalFees > -1 / arg2:
                                                        revert with 'NH{q', 17
                                                    if not stor22[address(arg1)]:
                                                        if arg2 < arg2 * totalFees / 100:
                                                            revert with 'NH{q', 17
                                                        if not msg.sender:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                        if not this.address:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                        if balanceOf[address(msg.sender)] < arg2 * totalFees / 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                        balanceOf[address(msg.sender)] -= arg2 * totalFees / 100
                                                        if balanceOf[this.address] > !(arg2 * totalFees / 100):
                                                            revert with 'NH{q', 17
                                                        balanceOf[this.address] += arg2 * totalFees / 100
                                                        emit Transfer((arg2 * totalFees / 100), msg.sender, this.address);
                                                        if not msg.sender:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                        if not arg1:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                        if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100):
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                        balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100)
                                                        if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100)):
                                                            revert with 'NH{q', 17
                                                        balanceOf[arg1] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100)
                                                        emit Transfer((arg2 - (arg2 * totalFees / 100)), msg.sender, arg1);
                                                    else:
                                                        if arg2 and sellFeeIncreaseFactor > -1 / arg2:
                                                            revert with 'NH{q', 17
                                                        if arg2 * totalFees / 100 > !(arg2 * sellFeeIncreaseFactor / 100):
                                                            revert with 'NH{q', 17
                                                        if arg2 < (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100):
                                                            revert with 'NH{q', 17
                                                        if not msg.sender:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                        if not this.address:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                        if balanceOf[address(msg.sender)] < (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100):
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                        balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)
                                                        if balanceOf[this.address] > !((arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)):
                                                            revert with 'NH{q', 17
                                                        balanceOf[this.address] = balanceOf[this.address] + (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)
                                                        emit Transfer(((arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)), msg.sender, this.address);
                                                        if not msg.sender:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                        if not arg1:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                        if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100):
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                        balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)
                                                        if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)):
                                                            revert with 'NH{q', 17
                                                        balanceOf[arg1] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)
                                                        emit Transfer((arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)), msg.sender, arg1);
                                    else:
                                        if owner == arg1:
                                            if stor21[address(msg.sender)]:
                                                if not msg.sender:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                if not arg1:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                if balanceOf[address(msg.sender)] < arg2:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                balanceOf[address(msg.sender)] -= arg2
                                                if balanceOf[arg1] > !arg2:
                                                    revert with 'NH{q', 17
                                                balanceOf[arg1] += arg2
                                                emit Transfer(arg2, msg.sender, arg1);
                                            else:
                                                if stor21[address(arg1)]:
                                                    if not msg.sender:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                    if not arg1:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                    if balanceOf[address(msg.sender)] < arg2:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                    balanceOf[address(msg.sender)] -= arg2
                                                    if balanceOf[arg1] > !arg2:
                                                        revert with 'NH{q', 17
                                                    balanceOf[arg1] += arg2
                                                    emit Transfer(arg2, msg.sender, arg1);
                                                else:
                                                    if stor7:
                                                        if not msg.sender:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                        if not arg1:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                        if balanceOf[address(msg.sender)] < arg2:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                        balanceOf[address(msg.sender)] -= arg2
                                                        if balanceOf[arg1] > !arg2:
                                                            revert with 'NH{q', 17
                                                        balanceOf[arg1] += arg2
                                                        emit Transfer(arg2, msg.sender, arg1);
                                                    else:
                                                        if arg2 and totalFees > -1 / arg2:
                                                            revert with 'NH{q', 17
                                                        if not stor22[address(arg1)]:
                                                            if arg2 < arg2 * totalFees / 100:
                                                                revert with 'NH{q', 17
                                                            if not msg.sender:
                                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                            if not this.address:
                                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                            if balanceOf[address(msg.sender)] < arg2 * totalFees / 100:
                                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                            balanceOf[address(msg.sender)] -= arg2 * totalFees / 100
                                                            if balanceOf[this.address] > !(arg2 * totalFees / 100):
                                                                revert with 'NH{q', 17
                                                            balanceOf[this.address] += arg2 * totalFees / 100
                                                            emit Transfer((arg2 * totalFees / 100), msg.sender, this.address);
                                                            if not msg.sender:
                                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                            if not arg1:
                                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                            if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100):
                                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                            balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100)
                                                            if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100)):
                                                                revert with 'NH{q', 17
                                                            balanceOf[arg1] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100)
                                                            emit Transfer((arg2 - (arg2 * totalFees / 100)), msg.sender, arg1);
                                                        else:
                                                            if arg2 and sellFeeIncreaseFactor > -1 / arg2:
                                                                revert with 'NH{q', 17
                                                            if arg2 * totalFees / 100 > !(arg2 * sellFeeIncreaseFactor / 100):
                                                                revert with 'NH{q', 17
                                                            if arg2 < (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100):
                                                                revert with 'NH{q', 17
                                                            if not msg.sender:
                                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                            if not this.address:
                                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                            if balanceOf[address(msg.sender)] < (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100):
                                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                            balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)
                                                            if balanceOf[this.address] > !((arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)):
                                                                revert with 'NH{q', 17
                                                            balanceOf[this.address] = balanceOf[this.address] + (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)
                                                            emit Transfer(((arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)), msg.sender, this.address);
                                                            if not msg.sender:
                                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                            if not arg1:
                                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                            if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100):
                                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                            balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)
                                                            if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)):
                                                                revert with 'NH{q', 17
                                                            balanceOf[arg1] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)
                                                            emit Transfer((arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)), msg.sender, arg1);
                                        else:
                                            stor7 = 1
                                            if balanceOf[this.address] and marketingFee > -1 / balanceOf[this.address]:
                                                revert with 'NH{q', 17
                                            if not totalFees:
                                                revert with 'NH{q', 18
                                            mem[96] = 2
                                            mem[128] = this.address
                                            staticcall uniswapV2RouterAddress.WETH() with:
                                                    gas gas_remaining wei
                                            mem[192] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                            mem[160] = ext_call.return_data[12 len 20]
                                            if not this.address:
                                                revert with 0, 'ERC20: approve from the zero address'
                                            if not uniswapV2RouterAddress:
                                                revert with 0, 'ERC20: approve to the zero address'
                                            allowance[address(this.address)][stor6].field_0 = balanceOf[this.address] * marketingFee / totalFees
                                            emit Approval((balanceOf[this.address] * marketingFee / totalFees), this.address, uniswapV2RouterAddress);
                                            mem[ceil32(return_data.size) + 192] = 0x791ac94700000000000000000000000000000000000000000000000000000000
                                            mem[ceil32(return_data.size) + 196] = balanceOf[this.address] * marketingFee / totalFees
                                            mem[ceil32(return_data.size) + 356] = 2
                                            idx = 0
                                            s = ceil32(return_data.size) + 388
                                            t = 128
                                            while idx < 2:
                                                mem[s] = mem[t + 12 len 20]
                                                idx = idx + 1
                                                s = s + 32
                                                t = t + 32
                                                continue 
                                            mem[ceil32(return_data.size) + 292] = this.address
                                            mem[ceil32(return_data.size) + 324] = block.timestamp
                                            require ext_code.size(uniswapV2RouterAddress)
                                            call uniswapV2RouterAddress.swapExactTokensForETHSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args balanceOf[this.address] * marketingFee / totalFees, 0, 160, address(this.address), block.timestamp, 2, mem[ceil32(return_data.size) + 388 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            call _marketingWalletAddress with:
                                               value eth.balance(this.address) wei
                                                 gas 2300 * is_zero(value) wei
                                            if balanceOf[this.address] and liquidityFee > -1 / balanceOf[this.address]:
                                                revert with 'NH{q', 17
                                            if not totalFees:
                                                revert with 'NH{q', 18
                                            if balanceOf[this.address] * liquidityFee / totalFees < balanceOf[this.address] * liquidityFee / totalFees / 2:
                                                revert with 'NH{q', 17
                                            mem[ceil32(return_data.size) + 192] = 2
                                            mem[ceil32(return_data.size) + 224] = this.address
                                            staticcall uniswapV2RouterAddress.WETH() with:
                                                    gas gas_remaining wei
                                            mem[ceil32(return_data.size) + 288] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                            mem[ceil32(return_data.size) + 256] = ext_call.return_data[12 len 20]
                                            if not this.address:
                                                revert with 0, 'ERC20: approve from the zero address'
                                            if not uniswapV2RouterAddress:
                                                revert with 0, 'ERC20: approve to the zero address'
                                            allowance[address(this.address)][stor6].field_0 = balanceOf[this.address] * liquidityFee / totalFees / 2
                                            allowance[address(this.address)][stor6].field_255 = 0
                                            emit Approval((balanceOf[this.address] * liquidityFee / totalFees / 2), this.address, uniswapV2RouterAddress);
                                            mem[(2 * ceil32(return_data.size)) + 288] = 0x791ac94700000000000000000000000000000000000000000000000000000000
                                            mem[(2 * ceil32(return_data.size)) + 292] = balanceOf[this.address] * liquidityFee / totalFees / 2
                                            mem[(2 * ceil32(return_data.size)) + 324] = 0
                                            mem[(2 * ceil32(return_data.size)) + 356] = 160
                                            mem[(2 * ceil32(return_data.size)) + 452] = 2
                                            idx = 0
                                            s = (2 * ceil32(return_data.size)) + 484
                                            t = ceil32(return_data.size) + 224
                                            while idx < mem[ceil32(return_data.size) + 192]:
                                                mem[s] = mem[t + 12 len 20]
                                                idx = idx + 1
                                                s = s + 32
                                                t = t + 32
                                                continue 
                                            mem[(2 * ceil32(return_data.size)) + 388] = this.address
                                            mem[(2 * ceil32(return_data.size)) + 420] = block.timestamp
                                            require ext_code.size(uniswapV2RouterAddress)
                                            call uniswapV2RouterAddress.swapExactTokensForETHSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args Mask(255, 1, balanceOf[this.address] * liquidityFee / totalFees), 0, 160, address(this.address), block.timestamp, mem[(2 * ceil32(return_data.size)) + 452 len (32 * mem[ceil32(return_data.size) + 192]) + 32]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            if eth.balance(this.address) < eth.balance(this.address):
                                                revert with 'NH{q', 17
                                            if not this.address:
                                                revert with 0, 'ERC20: approve from the zero address'
                                            if not uniswapV2RouterAddress:
                                                revert with 0, 'ERC20: approve to the zero address'
                                            allowance[address(this.address)][stor6].field_0 = (balanceOf[this.address] * liquidityFee / totalFees) - (balanceOf[this.address] * liquidityFee / totalFees / 2)
                                            emit Approval(((balanceOf[this.address] * liquidityFee / totalFees) - (balanceOf[this.address] * liquidityFee / totalFees / 2)), this.address, uniswapV2RouterAddress);
                                            mem[(2 * ceil32(return_data.size)) + 292] = this.address
                                            mem[(2 * ceil32(return_data.size)) + 324] = (balanceOf[this.address] * liquidityFee / totalFees) - (balanceOf[this.address] * liquidityFee / totalFees / 2)
                                            mem[(2 * ceil32(return_data.size)) + 356] = 0
                                            mem[(2 * ceil32(return_data.size)) + 388] = 0
                                            mem[(2 * ceil32(return_data.size)) + 420] = 0
                                            mem[(2 * ceil32(return_data.size)) + 452] = block.timestamp
                                            call uniswapV2RouterAddress.addLiquidityETH(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                                 gas gas_remaining wei
                                                args this.address, (balanceOf[this.address] * liquidityFee / totalFees) - (balanceOf[this.address] * liquidityFee / totalFees / 2), 0, 0, 0, block.timestamp
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 96
                                            emit SwapAndLiquify(Mask(255, 1, balanceOf[this.address] * liquidityFee / totalFees), 0, (balanceOf[this.address] * liquidityFee / totalFees) - (balanceOf[this.address] * liquidityFee / totalFees / 2));
                                            mem[(4 * ceil32(return_data.size)) + 288] = 2
                                            mem[(4 * ceil32(return_data.size)) + 320] = this.address
                                            staticcall uniswapV2RouterAddress.WETH() with:
                                                    gas gas_remaining wei
                                            mem[(4 * ceil32(return_data.size)) + 384] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[64] = (6 * ceil32(return_data.size)) + 384
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                            mem[(4 * ceil32(return_data.size)) + 352] = ext_call.return_data[12 len 20]
                                            if not this.address:
                                                revert with 0, 'ERC20: approve from the zero address'
                                            if not uniswapV2RouterAddress:
                                                revert with 0, 'ERC20: approve to the zero address'
                                            mem[0] = uniswapV2RouterAddress
                                            mem[32] = sha3(address(this.address), 1)
                                            allowance[address(this.address)][stor6].field_0 = balanceOf[this.address]
                                            emit Approval(balanceOf[this.address], this.address, uniswapV2RouterAddress);
                                            mem[(6 * ceil32(return_data.size)) + 384] = 0x791ac94700000000000000000000000000000000000000000000000000000000
                                            mem[(6 * ceil32(return_data.size)) + 388] = balanceOf[this.address]
                                            mem[(6 * ceil32(return_data.size)) + 420] = 0
                                            mem[(6 * ceil32(return_data.size)) + 452] = 160
                                            mem[(6 * ceil32(return_data.size)) + 548] = 2
                                            idx = 0
                                            s = (6 * ceil32(return_data.size)) + 580
                                            t = (4 * ceil32(return_data.size)) + 320
                                            while idx < mem[(4 * ceil32(return_data.size)) + 288]:
                                                mem[s] = mem[t + 12 len 20]
                                                idx = idx + 1
                                                s = s + 32
                                                t = t + 32
                                                continue 
                                            require ext_code.size(uniswapV2RouterAddress)
                                            call uniswapV2RouterAddress.swapExactTokensForETHSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args balanceOf[this.address], 0, 160, address(this.address), block.timestamp, mem[(6 * ceil32(return_data.size)) + 548 len (32 * mem[(4 * ceil32(return_data.size)) + 288]) + 32]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            call dividendTrackerAddress with:
                                               value eth.balance(this.address) wei
                                                 gas gas_remaining wei
                                            if ext_call.success:
                                                emit SendDividends(balanceOf[this.address], eth.balance(this.address));
                                            stor7 = 0
                                            if stor21[address(msg.sender)]:
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if not arg1:
                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                if balanceOf[address(msg.sender)] < arg2:
                                                    revert with 0, 'ERC20: transfer amount exceeds balance'
                                                balanceOf[address(msg.sender)] -= arg2
                                                if balanceOf[arg1] > !arg2:
                                                    revert with 'NH{q', 17
                                                balanceOf[arg1] += arg2
                                                emit Transfer(arg2, msg.sender, arg1);
                                            else:
                                                if stor21[address(arg1)]:
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if not arg1:
                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                    if balanceOf[address(msg.sender)] < arg2:
                                                        revert with 0, 'ERC20: transfer amount exceeds balance'
                                                    balanceOf[address(msg.sender)] -= arg2
                                                    if balanceOf[arg1] > !arg2:
                                                        revert with 'NH{q', 17
                                                    balanceOf[arg1] += arg2
                                                    emit Transfer(arg2, msg.sender, arg1);
                                                else:
                                                    if stor7:
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if not arg1:
                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                        if balanceOf[address(msg.sender)] < arg2:
                                                            revert with 0, 'ERC20: transfer amount exceeds balance'
                                                        balanceOf[address(msg.sender)] -= arg2
                                                        if balanceOf[arg1] > !arg2:
                                                            revert with 'NH{q', 17
                                                        balanceOf[arg1] += arg2
                                                        emit Transfer(arg2, msg.sender, arg1);
                                                    else:
                                                        if arg2 and totalFees > -1 / arg2:
                                                            revert with 'NH{q', 17
                                                        if not stor22[address(arg1)]:
                                                            if arg2 < arg2 * totalFees / 100:
                                                                revert with 'NH{q', 17
                                                            if not msg.sender:
                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                            if not this.address:
                                                                revert with 0, 'ERC20: transfer to the zero address'
                                                            if balanceOf[address(msg.sender)] < arg2 * totalFees / 100:
                                                                revert with 0, 'ERC20: transfer amount exceeds balance'
                                                            balanceOf[address(msg.sender)] -= arg2 * totalFees / 100
                                                            if balanceOf[this.address] > !(arg2 * totalFees / 100):
                                                                revert with 'NH{q', 17
                                                            balanceOf[this.address] += arg2 * totalFees / 100
                                                            emit Transfer((arg2 * totalFees / 100), msg.sender, this.address);
                                                            if not msg.sender:
                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                            if not arg1:
                                                                revert with 0, 'ERC20: transfer to the zero address'
                                                            if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100):
                                                                revert with 0, 'ERC20: transfer amount exceeds balance'
                                                            balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100)
                                                            if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100)):
                                                                revert with 'NH{q', 17
                                                            balanceOf[arg1] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100)
                                                            emit Transfer((arg2 - (arg2 * totalFees / 100)), msg.sender, arg1);
                                                        else:
                                                            if arg2 and sellFeeIncreaseFactor > -1 / arg2:
                                                                revert with 'NH{q', 17
                                                            if arg2 * totalFees / 100 > !(arg2 * sellFeeIncreaseFactor / 100):
                                                                revert with 'NH{q', 17
                                                            if arg2 < (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100):
                                                                revert with 'NH{q', 17
                                                            if not msg.sender:
                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                            if not this.address:
                                                                revert with 0, 'ERC20: transfer to the zero address'
                                                            if balanceOf[address(msg.sender)] < (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100):
                                                                revert with 0, 'ERC20: transfer amount exceeds balance'
                                                            balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)
                                                            if balanceOf[this.address] > !((arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)):
                                                                revert with 'NH{q', 17
                                                            balanceOf[this.address] = balanceOf[this.address] + (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)
                                                            emit Transfer(((arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)), msg.sender, this.address);
                                                            if not msg.sender:
                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                            if not arg1:
                                                                revert with 0, 'ERC20: transfer to the zero address'
                                                            if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100):
                                                                revert with 0, 'ERC20: transfer amount exceeds balance'
                                                            balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)
                                                            if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)):
                                                                revert with 'NH{q', 17
                                                            balanceOf[arg1] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)
                                                            emit Transfer((arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)), msg.sender, arg1);
                        require ext_code.size(dividendTrackerAddress)
                        call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                             gas gas_remaining wei
                            args msg.sender, balanceOf[address(msg.sender)]
                        require ext_code.size(dividendTrackerAddress)
                        call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                             gas gas_remaining wei
                            args address(arg1), balanceOf[address(arg1)]
                        if not stor7:
                            call dividendTrackerAddress.process(uint256 arg1) with:
                                 gas gas_remaining wei
                                args gasForProcessing
                            if ext_call.success:
                                require return_data.size >= 96
                                emit ProcessedDividendTracker(ext_call.return_data[0], ext_call.return_data[32], ext_call.return_data[64], gasForProcessing, 1, tx.origin);
                    else:
                        if uniswapV2PairAddress == arg1:
                            if balanceOf[this.address] < swapTokensAtAmount:
                                if stor21[address(msg.sender)]:
                                    if not msg.sender:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                    if not arg1:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                    if balanceOf[address(msg.sender)] < arg2:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                    balanceOf[address(msg.sender)] -= arg2
                                    if balanceOf[arg1] > !arg2:
                                        revert with 'NH{q', 17
                                    balanceOf[arg1] += arg2
                                    emit Transfer(arg2, msg.sender, arg1);
                                else:
                                    if stor21[address(arg1)]:
                                        if not msg.sender:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                        if not arg1:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                        if balanceOf[address(msg.sender)] < arg2:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                        balanceOf[address(msg.sender)] -= arg2
                                        if balanceOf[arg1] > !arg2:
                                            revert with 'NH{q', 17
                                        balanceOf[arg1] += arg2
                                        emit Transfer(arg2, msg.sender, arg1);
                                    else:
                                        if stor7:
                                            if not msg.sender:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                            if not arg1:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                            if balanceOf[address(msg.sender)] < arg2:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                            balanceOf[address(msg.sender)] -= arg2
                                            if balanceOf[arg1] > !arg2:
                                                revert with 'NH{q', 17
                                            balanceOf[arg1] += arg2
                                            emit Transfer(arg2, msg.sender, arg1);
                                        else:
                                            if arg2 and totalFees > -1 / arg2:
                                                revert with 'NH{q', 17
                                            if not stor22[address(arg1)]:
                                                if arg2 < arg2 * totalFees / 100:
                                                    revert with 'NH{q', 17
                                                if not msg.sender:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                if not this.address:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                if balanceOf[address(msg.sender)] < arg2 * totalFees / 100:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                balanceOf[address(msg.sender)] -= arg2 * totalFees / 100
                                                if balanceOf[this.address] > !(arg2 * totalFees / 100):
                                                    revert with 'NH{q', 17
                                                balanceOf[this.address] += arg2 * totalFees / 100
                                                emit Transfer((arg2 * totalFees / 100), msg.sender, this.address);
                                                if not msg.sender:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                if not arg1:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100):
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100)
                                                if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100)):
                                                    revert with 'NH{q', 17
                                                balanceOf[arg1] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100)
                                                emit Transfer((arg2 - (arg2 * totalFees / 100)), msg.sender, arg1);
                                            else:
                                                if arg2 and sellFeeIncreaseFactor > -1 / arg2:
                                                    revert with 'NH{q', 17
                                                if arg2 * totalFees / 100 > !(arg2 * sellFeeIncreaseFactor / 100):
                                                    revert with 'NH{q', 17
                                                if arg2 < (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100):
                                                    revert with 'NH{q', 17
                                                if not msg.sender:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                if not this.address:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                if balanceOf[address(msg.sender)] < (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100):
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)
                                                if balanceOf[this.address] > !((arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)):
                                                    revert with 'NH{q', 17
                                                balanceOf[this.address] = balanceOf[this.address] + (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)
                                                emit Transfer(((arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)), msg.sender, this.address);
                                                if not msg.sender:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                if not arg1:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100):
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)
                                                if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)):
                                                    revert with 'NH{q', 17
                                                balanceOf[arg1] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)
                                                emit Transfer((arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)), msg.sender, arg1);
                                require ext_code.size(dividendTrackerAddress)
                                call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                     gas gas_remaining wei
                                    args msg.sender, balanceOf[address(msg.sender)]
                                require ext_code.size(dividendTrackerAddress)
                                call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                     gas gas_remaining wei
                                    args address(arg1), balanceOf[address(arg1)]
                                if not stor7:
                                    call dividendTrackerAddress.process(uint256 arg1) with:
                                         gas gas_remaining wei
                                        args gasForProcessing
                                    if ext_call.success:
                                        require return_data.size >= 96
                                        emit ProcessedDividendTracker(ext_call.return_data[0], ext_call.return_data[32], ext_call.return_data[64], gasForProcessing, 1, tx.origin);
                            else:
                                if stor7:
                                    if stor21[address(msg.sender)]:
                                        if not msg.sender:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                        if not arg1:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                        if balanceOf[address(msg.sender)] < arg2:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                        balanceOf[address(msg.sender)] -= arg2
                                        if balanceOf[arg1] > !arg2:
                                            revert with 'NH{q', 17
                                        balanceOf[arg1] += arg2
                                        emit Transfer(arg2, msg.sender, arg1);
                                    else:
                                        if stor21[address(arg1)]:
                                            if not msg.sender:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                            if not arg1:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                            if balanceOf[address(msg.sender)] < arg2:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                            balanceOf[address(msg.sender)] -= arg2
                                            if balanceOf[arg1] > !arg2:
                                                revert with 'NH{q', 17
                                            balanceOf[arg1] += arg2
                                            emit Transfer(arg2, msg.sender, arg1);
                                        else:
                                            if stor7:
                                                if not msg.sender:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                if not arg1:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                if balanceOf[address(msg.sender)] < arg2:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                balanceOf[address(msg.sender)] -= arg2
                                                if balanceOf[arg1] > !arg2:
                                                    revert with 'NH{q', 17
                                                balanceOf[arg1] += arg2
                                                emit Transfer(arg2, msg.sender, arg1);
                                            else:
                                                if arg2 and totalFees > -1 / arg2:
                                                    revert with 'NH{q', 17
                                                if not stor22[address(arg1)]:
                                                    if arg2 < arg2 * totalFees / 100:
                                                        revert with 'NH{q', 17
                                                    if not msg.sender:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                    if not this.address:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                    if balanceOf[address(msg.sender)] < arg2 * totalFees / 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                    balanceOf[address(msg.sender)] -= arg2 * totalFees / 100
                                                    if balanceOf[this.address] > !(arg2 * totalFees / 100):
                                                        revert with 'NH{q', 17
                                                    balanceOf[this.address] += arg2 * totalFees / 100
                                                    emit Transfer((arg2 * totalFees / 100), msg.sender, this.address);
                                                    if not msg.sender:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                    if not arg1:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                    if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100):
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                    balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100)
                                                    if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100)):
                                                        revert with 'NH{q', 17
                                                    balanceOf[arg1] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100)
                                                    emit Transfer((arg2 - (arg2 * totalFees / 100)), msg.sender, arg1);
                                                else:
                                                    if arg2 and sellFeeIncreaseFactor > -1 / arg2:
                                                        revert with 'NH{q', 17
                                                    if arg2 * totalFees / 100 > !(arg2 * sellFeeIncreaseFactor / 100):
                                                        revert with 'NH{q', 17
                                                    if arg2 < (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100):
                                                        revert with 'NH{q', 17
                                                    if not msg.sender:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                    if not this.address:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                    if balanceOf[address(msg.sender)] < (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100):
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                    balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)
                                                    if balanceOf[this.address] > !((arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)):
                                                        revert with 'NH{q', 17
                                                    balanceOf[this.address] = balanceOf[this.address] + (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)
                                                    emit Transfer(((arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)), msg.sender, this.address);
                                                    if not msg.sender:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                    if not arg1:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                    if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100):
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                    balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)
                                                    if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)):
                                                        revert with 'NH{q', 17
                                                    balanceOf[arg1] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)
                                                    emit Transfer((arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)), msg.sender, arg1);
                                    require ext_code.size(dividendTrackerAddress)
                                    call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                         gas gas_remaining wei
                                        args msg.sender, balanceOf[address(msg.sender)]
                                    require ext_code.size(dividendTrackerAddress)
                                    call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                         gas gas_remaining wei
                                        args address(arg1), balanceOf[address(arg1)]
                                    if not stor7:
                                        call dividendTrackerAddress.process(uint256 arg1) with:
                                             gas gas_remaining wei
                                            args gasForProcessing
                                        if ext_call.success:
                                            require return_data.size >= 96
                                            emit ProcessedDividendTracker(ext_call.return_data[0], ext_call.return_data[32], ext_call.return_data[64], gasForProcessing, 1, tx.origin);
                                else:
                                    if stor22[address(msg.sender)]:
                                        if stor21[address(msg.sender)]:
                                            if not msg.sender:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                            if not arg1:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                            if balanceOf[address(msg.sender)] < arg2:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                            balanceOf[address(msg.sender)] -= arg2
                                            if balanceOf[arg1] > !arg2:
                                                revert with 'NH{q', 17
                                            balanceOf[arg1] += arg2
                                            emit Transfer(arg2, msg.sender, arg1);
                                        else:
                                            if stor21[address(arg1)]:
                                                if not msg.sender:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                if not arg1:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                if balanceOf[address(msg.sender)] < arg2:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                balanceOf[address(msg.sender)] -= arg2
                                                if balanceOf[arg1] > !arg2:
                                                    revert with 'NH{q', 17
                                                balanceOf[arg1] += arg2
                                                emit Transfer(arg2, msg.sender, arg1);
                                            else:
                                                if stor7:
                                                    if not msg.sender:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                    if not arg1:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                    if balanceOf[address(msg.sender)] < arg2:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                    balanceOf[address(msg.sender)] -= arg2
                                                    if balanceOf[arg1] > !arg2:
                                                        revert with 'NH{q', 17
                                                    balanceOf[arg1] += arg2
                                                    emit Transfer(arg2, msg.sender, arg1);
                                                else:
                                                    if arg2 and totalFees > -1 / arg2:
                                                        revert with 'NH{q', 17
                                                    if not stor22[address(arg1)]:
                                                        if arg2 < arg2 * totalFees / 100:
                                                            revert with 'NH{q', 17
                                                        if not msg.sender:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                        if not this.address:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                        if balanceOf[address(msg.sender)] < arg2 * totalFees / 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                        balanceOf[address(msg.sender)] -= arg2 * totalFees / 100
                                                        if balanceOf[this.address] > !(arg2 * totalFees / 100):
                                                            revert with 'NH{q', 17
                                                        balanceOf[this.address] += arg2 * totalFees / 100
                                                        emit Transfer((arg2 * totalFees / 100), msg.sender, this.address);
                                                        if not msg.sender:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                        if not arg1:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                        if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100):
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                        balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100)
                                                        if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100)):
                                                            revert with 'NH{q', 17
                                                        balanceOf[arg1] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100)
                                                        emit Transfer((arg2 - (arg2 * totalFees / 100)), msg.sender, arg1);
                                                    else:
                                                        if arg2 and sellFeeIncreaseFactor > -1 / arg2:
                                                            revert with 'NH{q', 17
                                                        if arg2 * totalFees / 100 > !(arg2 * sellFeeIncreaseFactor / 100):
                                                            revert with 'NH{q', 17
                                                        if arg2 < (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100):
                                                            revert with 'NH{q', 17
                                                        if not msg.sender:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                        if not this.address:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                        if balanceOf[address(msg.sender)] < (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100):
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                        balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)
                                                        if balanceOf[this.address] > !((arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)):
                                                            revert with 'NH{q', 17
                                                        balanceOf[this.address] = balanceOf[this.address] + (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)
                                                        emit Transfer(((arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)), msg.sender, this.address);
                                                        if not msg.sender:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                        if not arg1:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                        if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100):
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                        balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)
                                                        if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)):
                                                            revert with 'NH{q', 17
                                                        balanceOf[arg1] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)
                                                        emit Transfer((arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)), msg.sender, arg1);
                                        require ext_code.size(dividendTrackerAddress)
                                        call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                             gas gas_remaining wei
                                            args msg.sender, balanceOf[address(msg.sender)]
                                        require ext_code.size(dividendTrackerAddress)
                                        call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                             gas gas_remaining wei
                                            args address(arg1), balanceOf[address(arg1)]
                                        if not stor7:
                                            call dividendTrackerAddress.process(uint256 arg1) with:
                                                 gas gas_remaining wei
                                                args gasForProcessing
                                            if ext_call.success:
                                                require return_data.size >= 96
                                                emit ProcessedDividendTracker(ext_call.return_data[0], ext_call.return_data[32], ext_call.return_data[64], gasForProcessing, 1, tx.origin);
                                    else:
                                        if owner == msg.sender:
                                            if stor21[address(msg.sender)]:
                                                if not msg.sender:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                if not arg1:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                if balanceOf[address(msg.sender)] < arg2:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                balanceOf[address(msg.sender)] -= arg2
                                                if balanceOf[arg1] > !arg2:
                                                    revert with 'NH{q', 17
                                                balanceOf[arg1] += arg2
                                                emit Transfer(arg2, msg.sender, arg1);
                                            else:
                                                if stor21[address(arg1)]:
                                                    if not msg.sender:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                    if not arg1:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                    if balanceOf[address(msg.sender)] < arg2:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                    balanceOf[address(msg.sender)] -= arg2
                                                    if balanceOf[arg1] > !arg2:
                                                        revert with 'NH{q', 17
                                                    balanceOf[arg1] += arg2
                                                    emit Transfer(arg2, msg.sender, arg1);
                                                else:
                                                    if stor7:
                                                        if not msg.sender:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                        if not arg1:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                        if balanceOf[address(msg.sender)] < arg2:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                        balanceOf[address(msg.sender)] -= arg2
                                                        if balanceOf[arg1] > !arg2:
                                                            revert with 'NH{q', 17
                                                        balanceOf[arg1] += arg2
                                                        emit Transfer(arg2, msg.sender, arg1);
                                                    else:
                                                        if arg2 and totalFees > -1 / arg2:
                                                            revert with 'NH{q', 17
                                                        if not stor22[address(arg1)]:
                                                            if arg2 < arg2 * totalFees / 100:
                                                                revert with 'NH{q', 17
                                                            if not msg.sender:
                                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                            if not this.address:
                                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                            if balanceOf[address(msg.sender)] < arg2 * totalFees / 100:
                                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                            balanceOf[address(msg.sender)] -= arg2 * totalFees / 100
                                                            if balanceOf[this.address] > !(arg2 * totalFees / 100):
                                                                revert with 'NH{q', 17
                                                            balanceOf[this.address] += arg2 * totalFees / 100
                                                            emit Transfer((arg2 * totalFees / 100), msg.sender, this.address);
                                                            if not msg.sender:
                                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                            if not arg1:
                                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                            if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100):
                                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                            balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100)
                                                            if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100)):
                                                                revert with 'NH{q', 17
                                                            balanceOf[arg1] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100)
                                                            emit Transfer((arg2 - (arg2 * totalFees / 100)), msg.sender, arg1);
                                                        else:
                                                            if arg2 and sellFeeIncreaseFactor > -1 / arg2:
                                                                revert with 'NH{q', 17
                                                            if arg2 * totalFees / 100 > !(arg2 * sellFeeIncreaseFactor / 100):
                                                                revert with 'NH{q', 17
                                                            if arg2 < (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100):
                                                                revert with 'NH{q', 17
                                                            if not msg.sender:
                                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                            if not this.address:
                                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                            if balanceOf[address(msg.sender)] < (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100):
                                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                            balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)
                                                            if balanceOf[this.address] > !((arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)):
                                                                revert with 'NH{q', 17
                                                            balanceOf[this.address] = balanceOf[this.address] + (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)
                                                            emit Transfer(((arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)), msg.sender, this.address);
                                                            if not msg.sender:
                                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                            if not arg1:
                                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                            if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100):
                                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                            balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)
                                                            if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)):
                                                                revert with 'NH{q', 17
                                                            balanceOf[arg1] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)
                                                            emit Transfer((arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)), msg.sender, arg1);
                                            require ext_code.size(dividendTrackerAddress)
                                            call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args msg.sender, balanceOf[address(msg.sender)]
                                            require ext_code.size(dividendTrackerAddress)
                                            call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args address(arg1), balanceOf[address(arg1)]
                                            if not stor7:
                                                call dividendTrackerAddress.process(uint256 arg1) with:
                                                     gas gas_remaining wei
                                                    args gasForProcessing
                                                if ext_call.success:
                                                    require return_data.size >= 96
                                                    emit ProcessedDividendTracker(ext_call.return_data[0], ext_call.return_data[32], ext_call.return_data[64], gasForProcessing, 1, tx.origin);
                                        else:
                                            if owner == arg1:
                                                if stor21[address(msg.sender)]:
                                                    if not msg.sender:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                    if not arg1:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                    if balanceOf[address(msg.sender)] < arg2:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                    balanceOf[address(msg.sender)] -= arg2
                                                    if balanceOf[arg1] > !arg2:
                                                        revert with 'NH{q', 17
                                                    balanceOf[arg1] += arg2
                                                    emit Transfer(arg2, msg.sender, arg1);
                                                else:
                                                    if stor21[address(arg1)]:
                                                        if not msg.sender:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                        if not arg1:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                        if balanceOf[address(msg.sender)] < arg2:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                        balanceOf[address(msg.sender)] -= arg2
                                                        if balanceOf[arg1] > !arg2:
                                                            revert with 'NH{q', 17
                                                        balanceOf[arg1] += arg2
                                                        emit Transfer(arg2, msg.sender, arg1);
                                                    else:
                                                        if stor7:
                                                            if not msg.sender:
                                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                            if not arg1:
                                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                            if balanceOf[address(msg.sender)] < arg2:
                                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                            balanceOf[address(msg.sender)] -= arg2
                                                            if balanceOf[arg1] > !arg2:
                                                                revert with 'NH{q', 17
                                                            balanceOf[arg1] += arg2
                                                            emit Transfer(arg2, msg.sender, arg1);
                                                        else:
                                                            if arg2 and totalFees > -1 / arg2:
                                                                revert with 'NH{q', 17
                                                            if not stor22[address(arg1)]:
                                                                if arg2 < arg2 * totalFees / 100:
                                                                    revert with 'NH{q', 17
                                                                if not msg.sender:
                                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                                if not this.address:
                                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                                if balanceOf[address(msg.sender)] < arg2 * totalFees / 100:
                                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                                balanceOf[address(msg.sender)] -= arg2 * totalFees / 100
                                                                if balanceOf[this.address] > !(arg2 * totalFees / 100):
                                                                    revert with 'NH{q', 17
                                                                balanceOf[this.address] += arg2 * totalFees / 100
                                                                emit Transfer((arg2 * totalFees / 100), msg.sender, this.address);
                                                                if not msg.sender:
                                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                                if not arg1:
                                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                                if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100):
                                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                                balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100)
                                                                if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100)):
                                                                    revert with 'NH{q', 17
                                                                balanceOf[arg1] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100)
                                                                emit Transfer((arg2 - (arg2 * totalFees / 100)), msg.sender, arg1);
                                                            else:
                                                                if arg2 and sellFeeIncreaseFactor > -1 / arg2:
                                                                    revert with 'NH{q', 17
                                                                if arg2 * totalFees / 100 > !(arg2 * sellFeeIncreaseFactor / 100):
                                                                    revert with 'NH{q', 17
                                                                if arg2 < (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100):
                                                                    revert with 'NH{q', 17
                                                                if not msg.sender:
                                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                                if not this.address:
                                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                                if balanceOf[address(msg.sender)] < (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100):
                                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                                balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)
                                                                if balanceOf[this.address] > !((arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)):
                                                                    revert with 'NH{q', 17
                                                                balanceOf[this.address] = balanceOf[this.address] + (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)
                                                                emit Transfer(((arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)), msg.sender, this.address);
                                                                if not msg.sender:
                                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                                if not arg1:
                                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                                if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100):
                                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                                balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)
                                                                if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)):
                                                                    revert with 'NH{q', 17
                                                                balanceOf[arg1] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)
                                                                emit Transfer((arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)), msg.sender, arg1);
                                                require ext_code.size(dividendTrackerAddress)
                                                call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args msg.sender, balanceOf[address(msg.sender)]
                                                require ext_code.size(dividendTrackerAddress)
                                                call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(arg1), balanceOf[address(arg1)]
                                                if not stor7:
                                                    call dividendTrackerAddress.process(uint256 arg1) with:
                                                         gas gas_remaining wei
                                                        args gasForProcessing
                                                    if ext_call.success:
                                                        require return_data.size >= 96
                                                        emit ProcessedDividendTracker(ext_call.return_data[0], ext_call.return_data[32], ext_call.return_data[64], gasForProcessing, 1, tx.origin);
                                            else:
                                                stor7 = 1
                                                if balanceOf[this.address] and marketingFee > -1 / balanceOf[this.address]:
                                                    revert with 'NH{q', 17
                                                if not totalFees:
                                                    revert with 'NH{q', 18
                                                mem[96] = 2
                                                mem[128] = this.address
                                                staticcall uniswapV2RouterAddress.WETH() with:
                                                        gas gas_remaining wei
                                                mem[192] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                mem[160] = ext_call.return_data[12 len 20]
                                                if not this.address:
                                                    revert with 0, 'ERC20: approve from the zero address'
                                                if not uniswapV2RouterAddress:
                                                    revert with 0, 'ERC20: approve to the zero address'
                                                allowance[address(this.address)][stor6].field_0 = balanceOf[this.address] * marketingFee / totalFees
                                                emit Approval((balanceOf[this.address] * marketingFee / totalFees), this.address, uniswapV2RouterAddress);
                                                mem[ceil32(return_data.size) + 192] = 0x791ac94700000000000000000000000000000000000000000000000000000000
                                                mem[ceil32(return_data.size) + 196] = balanceOf[this.address] * marketingFee / totalFees
                                                mem[ceil32(return_data.size) + 356] = 2
                                                idx = 0
                                                s = ceil32(return_data.size) + 388
                                                t = 128
                                                while idx < 2:
                                                    mem[s] = mem[t + 12 len 20]
                                                    idx = idx + 1
                                                    s = s + 32
                                                    t = t + 32
                                                    continue 
                                                mem[ceil32(return_data.size) + 292] = this.address
                                                mem[ceil32(return_data.size) + 324] = block.timestamp
                                                require ext_code.size(uniswapV2RouterAddress)
                                                call uniswapV2RouterAddress.swapExactTokensForETHSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                     gas gas_remaining wei
                                                    args balanceOf[this.address] * marketingFee / totalFees, 0, 160, address(this.address), block.timestamp, 2, mem[ceil32(return_data.size) + 388 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                call _marketingWalletAddress with:
                                                   value eth.balance(this.address) wei
                                                     gas 2300 * is_zero(value) wei
                                                if balanceOf[this.address] and liquidityFee > -1 / balanceOf[this.address]:
                                                    revert with 'NH{q', 17
                                                if not totalFees:
                                                    revert with 'NH{q', 18
                                                if balanceOf[this.address] * liquidityFee / totalFees < balanceOf[this.address] * liquidityFee / totalFees / 2:
                                                    revert with 'NH{q', 17
                                                mem[ceil32(return_data.size) + 192] = 2
                                                mem[ceil32(return_data.size) + 224] = this.address
                                                staticcall uniswapV2RouterAddress.WETH() with:
                                                        gas gas_remaining wei
                                                mem[ceil32(return_data.size) + 288] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                mem[ceil32(return_data.size) + 256] = ext_call.return_data[12 len 20]
                                                if not this.address:
                                                    revert with 0, 'ERC20: approve from the zero address'
                                                if not uniswapV2RouterAddress:
                                                    revert with 0, 'ERC20: approve to the zero address'
                                                allowance[address(this.address)][stor6].field_0 = balanceOf[this.address] * liquidityFee / totalFees / 2
                                                allowance[address(this.address)][stor6].field_255 = 0
                                                emit Approval((balanceOf[this.address] * liquidityFee / totalFees / 2), this.address, uniswapV2RouterAddress);
                                                mem[(2 * ceil32(return_data.size)) + 288] = 0x791ac94700000000000000000000000000000000000000000000000000000000
                                                mem[(2 * ceil32(return_data.size)) + 292] = balanceOf[this.address] * liquidityFee / totalFees / 2
                                                mem[(2 * ceil32(return_data.size)) + 324] = 0
                                                mem[(2 * ceil32(return_data.size)) + 356] = 160
                                                mem[(2 * ceil32(return_data.size)) + 452] = 2
                                                idx = 0
                                                s = (2 * ceil32(return_data.size)) + 484
                                                t = ceil32(return_data.size) + 224
                                                while idx < mem[ceil32(return_data.size) + 192]:
                                                    mem[s] = mem[t + 12 len 20]
                                                    idx = idx + 1
                                                    s = s + 32
                                                    t = t + 32
                                                    continue 
                                                mem[(2 * ceil32(return_data.size)) + 388] = this.address
                                                mem[(2 * ceil32(return_data.size)) + 420] = block.timestamp
                                                require ext_code.size(uniswapV2RouterAddress)
                                                call uniswapV2RouterAddress.swapExactTokensForETHSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                     gas gas_remaining wei
                                                    args Mask(255, 1, balanceOf[this.address] * liquidityFee / totalFees), 0, 160, address(this.address), block.timestamp, mem[(2 * ceil32(return_data.size)) + 452 len (32 * mem[ceil32(return_data.size) + 192]) + 32]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                if eth.balance(this.address) < eth.balance(this.address):
                                                    revert with 'NH{q', 17
                                                if not this.address:
                                                    revert with 0, 'ERC20: approve from the zero address'
                                                if not uniswapV2RouterAddress:
                                                    revert with 0, 'ERC20: approve to the zero address'
                                                allowance[address(this.address)][stor6].field_0 = (balanceOf[this.address] * liquidityFee / totalFees) - (balanceOf[this.address] * liquidityFee / totalFees / 2)
                                                emit Approval(((balanceOf[this.address] * liquidityFee / totalFees) - (balanceOf[this.address] * liquidityFee / totalFees / 2)), this.address, uniswapV2RouterAddress);
                                                mem[(2 * ceil32(return_data.size)) + 292] = this.address
                                                mem[(2 * ceil32(return_data.size)) + 324] = (balanceOf[this.address] * liquidityFee / totalFees) - (balanceOf[this.address] * liquidityFee / totalFees / 2)
                                                mem[(2 * ceil32(return_data.size)) + 356] = 0
                                                mem[(2 * ceil32(return_data.size)) + 388] = 0
                                                mem[(2 * ceil32(return_data.size)) + 420] = 0
                                                mem[(2 * ceil32(return_data.size)) + 452] = block.timestamp
                                                call uniswapV2RouterAddress.addLiquidityETH(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                                     gas gas_remaining wei
                                                    args this.address, (balanceOf[this.address] * liquidityFee / totalFees) - (balanceOf[this.address] * liquidityFee / totalFees / 2), 0, 0, 0, block.timestamp
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 96
                                                emit SwapAndLiquify(Mask(255, 1, balanceOf[this.address] * liquidityFee / totalFees), 0, (balanceOf[this.address] * liquidityFee / totalFees) - (balanceOf[this.address] * liquidityFee / totalFees / 2));
                                                mem[(4 * ceil32(return_data.size)) + 288] = 2
                                                mem[(4 * ceil32(return_data.size)) + 320] = this.address
                                                staticcall uniswapV2RouterAddress.WETH() with:
                                                        gas gas_remaining wei
                                                mem[(4 * ceil32(return_data.size)) + 384] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[64] = (6 * ceil32(return_data.size)) + 384
                                                require return_data.size >= 32
                                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                mem[(4 * ceil32(return_data.size)) + 352] = ext_call.return_data[12 len 20]
                                                if not this.address:
                                                    revert with 0, 'ERC20: approve from the zero address'
                                                if not uniswapV2RouterAddress:
                                                    revert with 0, 'ERC20: approve to the zero address'
                                                mem[0] = uniswapV2RouterAddress
                                                mem[32] = sha3(address(this.address), 1)
                                                allowance[address(this.address)][stor6].field_0 = balanceOf[this.address]
                                                emit Approval(balanceOf[this.address], this.address, uniswapV2RouterAddress);
                                                mem[(6 * ceil32(return_data.size)) + 384] = 0x791ac94700000000000000000000000000000000000000000000000000000000
                                                mem[(6 * ceil32(return_data.size)) + 388] = balanceOf[this.address]
                                                mem[(6 * ceil32(return_data.size)) + 420] = 0
                                                mem[(6 * ceil32(return_data.size)) + 452] = 160
                                                mem[(6 * ceil32(return_data.size)) + 548] = 2
                                                idx = 0
                                                s = (6 * ceil32(return_data.size)) + 580
                                                t = (4 * ceil32(return_data.size)) + 320
                                                while idx < mem[(4 * ceil32(return_data.size)) + 288]:
                                                    mem[s] = mem[t + 12 len 20]
                                                    idx = idx + 1
                                                    s = s + 32
                                                    t = t + 32
                                                    continue 
                                                mem[(6 * ceil32(return_data.size)) + 484] = this.address
                                                mem[(6 * ceil32(return_data.size)) + 516] = block.timestamp
                                                require ext_code.size(uniswapV2RouterAddress)
                                                call uniswapV2RouterAddress.mem[mem[64] len 4] with:
                                                     gas gas_remaining wei
                                                    args mem[mem[64] + 4 len (6 * ceil32(return_data.size)) + (32 * mem[(4 * ceil32(return_data.size)) + 288]) + -mem[64] + 576]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                call dividendTrackerAddress with:
                                                   value eth.balance(this.address) wei
                                                     gas gas_remaining wei
                                                if not return_data.size:
                                                    if not ext_call.success:
                                                        stor7 = 0
                                                        if stor21[address(msg.sender)]:
                                                            if not msg.sender:
                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                            if not arg1:
                                                                revert with 0, 'ERC20: transfer to the zero address'
                                                            if balanceOf[address(msg.sender)] < arg2:
                                                                revert with 0, 'ERC20: transfer amount exceeds balance'
                                                            balanceOf[address(msg.sender)] -= arg2
                                                            if balanceOf[arg1] > !arg2:
                                                                revert with 'NH{q', 17
                                                            balanceOf[arg1] += arg2
                                                            emit Transfer(arg2, msg.sender, arg1);
                                                            require ext_code.size(dividendTrackerAddress)
                                                            call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                                 gas gas_remaining wei
                                                                args msg.sender, balanceOf[address(msg.sender)]
                                                            mem[0] = arg1
                                                            mem[32] = 0
                                                            require ext_code.size(dividendTrackerAddress)
                                                            call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                                 gas gas_remaining wei
                                                                args address(arg1), balanceOf[address(arg1)]
                                                            if not ext_call.success:
                                                                if not ext_call.success:
                                                                    if not stor7:
                                                                        call dividendTrackerAddress.process(uint256 arg1) with:
                                                                             gas gas_remaining wei
                                                                            args gasForProcessing
                                                                        mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                        if ext_call.success:
                                                                            _83483 = mem[64]
                                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                                            require return_data.size >= 96
                                                                            _84981 = mem[_83483 + 32]
                                                                            _84982 = mem[_83483 + 64]
                                                                            mem[mem[64]] = mem[_83483]
                                                                            mem[mem[64] + 64] = _84982
                                                                            mem[mem[64] + 96] = gasForProcessing
                                                                            emit ProcessedDividendTracker(mem[mem[64]], _84981, _84982, gasForProcessing, 1, tx.origin);
                                                                else:
                                                                    if not stor7:
                                                                        call dividendTrackerAddress.process(uint256 arg1) with:
                                                                             gas gas_remaining wei
                                                                            args gasForProcessing
                                                                        mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                        if ext_call.success:
                                                                            _84108 = mem[64]
                                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                                            require return_data.size >= 96
                                                                            _86153 = mem[_84108 + 32]
                                                                            _86154 = mem[_84108 + 64]
                                                                            mem[mem[64]] = mem[_84108]
                                                                            mem[mem[64] + 64] = _86154
                                                                            mem[mem[64] + 96] = gasForProcessing
                                                                            emit ProcessedDividendTracker(mem[mem[64]], _86153, _86154, gasForProcessing, 1, tx.origin);
                                                            else:
                                                                if not ext_call.success:
                                                                    if not stor7:
                                                                        call dividendTrackerAddress.process(uint256 arg1) with:
                                                                             gas gas_remaining wei
                                                                            args gasForProcessing
                                                                        mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                        if ext_call.success:
                                                                            _84109 = mem[64]
                                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                                            require return_data.size >= 96
                                                                            _86157 = mem[_84109 + 32]
                                                                            _86158 = mem[_84109 + 64]
                                                                            mem[mem[64]] = mem[_84109]
                                                                            mem[mem[64] + 64] = _86158
                                                                            mem[mem[64] + 96] = gasForProcessing
                                                                            emit ProcessedDividendTracker(mem[mem[64]], _86157, _86158, gasForProcessing, 1, tx.origin);
                                                                else:
                                                                    if not stor7:
                                                                        call dividendTrackerAddress.process(uint256 arg1) with:
                                                                             gas gas_remaining wei
                                                                            args gasForProcessing
                                                                        mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                        if ext_call.success:
                                                                            _84985 = mem[64]
                                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                                            require return_data.size >= 96
                                                                            _87338 = mem[_84985 + 32]
                                                                            _87339 = mem[_84985 + 64]
                                                                            mem[mem[64]] = mem[_84985]
                                                                            mem[mem[64] + 64] = _87339
                                                                            mem[mem[64] + 96] = gasForProcessing
                                                                            emit ProcessedDividendTracker(mem[mem[64]], _87338, _87339, gasForProcessing, 1, tx.origin);
                                                        else:
                                                            if stor21[address(arg1)]:
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                if not arg1:
                                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                                if balanceOf[address(msg.sender)] < arg2:
                                                                    revert with 0, 'ERC20: transfer amount exceeds balance'
                                                                balanceOf[address(msg.sender)] -= arg2
                                                                if balanceOf[arg1] > !arg2:
                                                                    revert with 'NH{q', 17
                                                                balanceOf[arg1] += arg2
                                                                emit Transfer(arg2, msg.sender, arg1);
                                                                require ext_code.size(dividendTrackerAddress)
                                                                call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                                     gas gas_remaining wei
                                                                    args msg.sender, balanceOf[address(msg.sender)]
                                                                mem[0] = arg1
                                                                mem[32] = 0
                                                                require ext_code.size(dividendTrackerAddress)
                                                                call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                                     gas gas_remaining wei
                                                                    args address(arg1), balanceOf[address(arg1)]
                                                                if not ext_call.success:
                                                                    if not ext_call.success:
                                                                        if not stor7:
                                                                            call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                 gas gas_remaining wei
                                                                                args gasForProcessing
                                                                            mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                            if ext_call.success:
                                                                                _84118 = mem[64]
                                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                                require return_data.size >= 96
                                                                                _86175 = mem[_84118 + 32]
                                                                                _86176 = mem[_84118 + 64]
                                                                                mem[mem[64]] = mem[_84118]
                                                                                mem[mem[64] + 64] = _86176
                                                                                mem[mem[64] + 96] = gasForProcessing
                                                                                emit ProcessedDividendTracker(mem[mem[64]], _86175, _86176, gasForProcessing, 1, tx.origin);
                                                                    else:
                                                                        if not stor7:
                                                                            call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                 gas gas_remaining wei
                                                                                args gasForProcessing
                                                                            mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                            if ext_call.success:
                                                                                _84997 = mem[64]
                                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                                require return_data.size >= 96
                                                                                _87348 = mem[_84997 + 32]
                                                                                _87349 = mem[_84997 + 64]
                                                                                mem[mem[64]] = mem[_84997]
                                                                                mem[mem[64] + 64] = _87349
                                                                                mem[mem[64] + 96] = gasForProcessing
                                                                                emit ProcessedDividendTracker(mem[mem[64]], _87348, _87349, gasForProcessing, 1, tx.origin);
                                                                else:
                                                                    if not ext_call.success:
                                                                        if not stor7:
                                                                            call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                 gas gas_remaining wei
                                                                                args gasForProcessing
                                                                            mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                            if ext_call.success:
                                                                                _84998 = mem[64]
                                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                                require return_data.size >= 96
                                                                                _87352 = mem[_84998 + 32]
                                                                                _87353 = mem[_84998 + 64]
                                                                                mem[mem[64]] = mem[_84998]
                                                                                mem[mem[64] + 64] = _87353
                                                                                mem[mem[64] + 96] = gasForProcessing
                                                                                emit ProcessedDividendTracker(mem[mem[64]], _87352, _87353, gasForProcessing, 1, tx.origin);
                                                                    else:
                                                                        if not stor7:
                                                                            call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                 gas gas_remaining wei
                                                                                args gasForProcessing
                                                                            mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                            if ext_call.success:
                                                                                _86179 = mem[64]
                                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                                require return_data.size >= 96
                                                                                _88244 = mem[_86179 + 32]
                                                                                _88245 = mem[_86179 + 64]
                                                                                mem[mem[64]] = mem[_86179]
                                                                                mem[mem[64] + 64] = _88245
                                                                                mem[mem[64] + 96] = gasForProcessing
                                                                                emit ProcessedDividendTracker(mem[mem[64]], _88244, _88245, gasForProcessing, 1, tx.origin);
                                                            else:
                                                                if stor7:
                                                                    if not msg.sender:
                                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                                    if not arg1:
                                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                                    if balanceOf[address(msg.sender)] < arg2:
                                                                        revert with 0, 'ERC20: transfer amount exceeds balance'
                                                                    balanceOf[address(msg.sender)] -= arg2
                                                                    if balanceOf[arg1] > !arg2:
                                                                        revert with 'NH{q', 17
                                                                    balanceOf[arg1] += arg2
                                                                    emit Transfer(arg2, msg.sender, arg1);
                                                                    require ext_code.size(dividendTrackerAddress)
                                                                    call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                                         gas gas_remaining wei
                                                                        args msg.sender, balanceOf[address(msg.sender)]
                                                                    mem[0] = arg1
                                                                    mem[32] = 0
                                                                    require ext_code.size(dividendTrackerAddress)
                                                                    call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                                         gas gas_remaining wei
                                                                        args address(arg1), balanceOf[address(arg1)]
                                                                    if not ext_call.success:
                                                                        if not ext_call.success:
                                                                            if not stor7:
                                                                                call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                     gas gas_remaining wei
                                                                                    args gasForProcessing
                                                                                mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                                if ext_call.success:
                                                                                    _83488 = mem[64]
                                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                                    require return_data.size >= 96
                                                                                    _84988 = mem[_83488 + 32]
                                                                                    _84989 = mem[_83488 + 64]
                                                                                    mem[mem[64]] = mem[_83488]
                                                                                    mem[mem[64] + 64] = _84989
                                                                                    mem[mem[64] + 96] = gasForProcessing
                                                                                    emit ProcessedDividendTracker(mem[mem[64]], _84988, _84989, gasForProcessing, 1, tx.origin);
                                                                        else:
                                                                            if not stor7:
                                                                                call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                     gas gas_remaining wei
                                                                                    args gasForProcessing
                                                                                mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                                if ext_call.success:
                                                                                    _84113 = mem[64]
                                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                                    require return_data.size >= 96
                                                                                    _86162 = mem[_84113 + 32]
                                                                                    _86163 = mem[_84113 + 64]
                                                                                    mem[mem[64]] = mem[_84113]
                                                                                    mem[mem[64] + 64] = _86163
                                                                                    mem[mem[64] + 96] = gasForProcessing
                                                                                    emit ProcessedDividendTracker(mem[mem[64]], _86162, _86163, gasForProcessing, 1, tx.origin);
                                                                    else:
                                                                        if not ext_call.success:
                                                                            if not stor7:
                                                                                call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                     gas gas_remaining wei
                                                                                    args gasForProcessing
                                                                                mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                                if ext_call.success:
                                                                                    _84114 = mem[64]
                                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                                    require return_data.size >= 96
                                                                                    _86166 = mem[_84114 + 32]
                                                                                    _86167 = mem[_84114 + 64]
                                                                                    mem[mem[64]] = mem[_84114]
                                                                                    mem[mem[64] + 64] = _86167
                                                                                    mem[mem[64] + 96] = gasForProcessing
                                                                                    emit ProcessedDividendTracker(mem[mem[64]], _86166, _86167, gasForProcessing, 1, tx.origin);
                                                                        else:
                                                                            if not stor7:
                                                                                call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                     gas gas_remaining wei
                                                                                    args gasForProcessing
                                                                                mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                                if ext_call.success:
                                                                                    _84992 = mem[64]
                                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                                    require return_data.size >= 96
                                                                                    _87343 = mem[_84992 + 32]
                                                                                    _87344 = mem[_84992 + 64]
                                                                                    mem[mem[64]] = mem[_84992]
                                                                                    mem[mem[64] + 64] = _87344
                                                                                    mem[mem[64] + 96] = gasForProcessing
                                                                                    emit ProcessedDividendTracker(mem[mem[64]], _87343, _87344, gasForProcessing, 1, tx.origin);
                                                                else:
                                                                    if arg2 and totalFees > -1 / arg2:
                                                                        revert with 'NH{q', 17
                                                                    if not stor22[address(arg1)]:
                                                                        if arg2 < arg2 * totalFees / 100:
                                                                            revert with 'NH{q', 17
                                                                        if not msg.sender:
                                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                                        if not this.address:
                                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                                        if balanceOf[address(msg.sender)] < arg2 * totalFees / 100:
                                                                            revert with 0, 'ERC20: transfer amount exceeds balance'
                                                                        balanceOf[address(msg.sender)] -= arg2 * totalFees / 100
                                                                        if balanceOf[this.address] > !(arg2 * totalFees / 100):
                                                                            revert with 'NH{q', 17
                                                                        balanceOf[this.address] += arg2 * totalFees / 100
                                                                        emit Transfer((arg2 * totalFees / 100), msg.sender, this.address);
                                                                        if not msg.sender:
                                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                                        if not arg1:
                                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                                        if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100):
                                                                            revert with 0, 'ERC20: transfer amount exceeds balance'
                                                                        balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100)
                                                                        if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100)):
                                                                            revert with 'NH{q', 17
                                                                        balanceOf[arg1] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100)
                                                                        emit Transfer((arg2 - (arg2 * totalFees / 100)), msg.sender, arg1);
                                                                        require ext_code.size(dividendTrackerAddress)
                                                                        call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                                             gas gas_remaining wei
                                                                            args msg.sender, balanceOf[address(msg.sender)]
                                                                        mem[0] = arg1
                                                                        mem[32] = 0
                                                                        require ext_code.size(dividendTrackerAddress)
                                                                        call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                                             gas gas_remaining wei
                                                                            args address(arg1), balanceOf[address(arg1)]
                                                                        if not ext_call.success:
                                                                            if not ext_call.success:
                                                                                if not stor7:
                                                                                    call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                         gas gas_remaining wei
                                                                                        args gasForProcessing
                                                                                    mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                                    if ext_call.success:
                                                                                        _93439 = mem[64]
                                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                                        require return_data.size >= 96
                                                                                        _94233 = mem[_93439 + 32]
                                                                                        _94234 = mem[_93439 + 64]
                                                                                        mem[mem[64]] = mem[_93439]
                                                                                        mem[mem[64] + 64] = _94234
                                                                                        mem[mem[64] + 96] = gasForProcessing
                                                                                        emit ProcessedDividendTracker(mem[mem[64]], _94233, _94234, gasForProcessing, 1, tx.origin);
                                                                            else:
                                                                                if not stor7:
                                                                                    call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                         gas gas_remaining wei
                                                                                        args gasForProcessing
                                                                                    mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                                    if ext_call.success:
                                                                                        _93824 = mem[64]
                                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                                        require return_data.size >= 96
                                                                                        _94641 = mem[_93824 + 32]
                                                                                        _94642 = mem[_93824 + 64]
                                                                                        mem[mem[64]] = mem[_93824]
                                                                                        mem[mem[64] + 64] = _94642
                                                                                        mem[mem[64] + 96] = gasForProcessing
                                                                                        emit ProcessedDividendTracker(mem[mem[64]], _94641, _94642, gasForProcessing, 1, tx.origin);
                                                                        else:
                                                                            if not ext_call.success:
                                                                                if not stor7:
                                                                                    call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                         gas gas_remaining wei
                                                                                        args gasForProcessing
                                                                                    mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                                    if ext_call.success:
                                                                                        _93825 = mem[64]
                                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                                        require return_data.size >= 96
                                                                                        _94645 = mem[_93825 + 32]
                                                                                        _94646 = mem[_93825 + 64]
                                                                                        mem[mem[64]] = mem[_93825]
                                                                                        mem[mem[64] + 64] = _94646
                                                                                        mem[mem[64] + 96] = gasForProcessing
                                                                                        emit ProcessedDividendTracker(mem[mem[64]], _94645, _94646, gasForProcessing, 1, tx.origin);
                                                                            else:
                                                                                if not stor7:
                                                                                    call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                         gas gas_remaining wei
                                                                                        args gasForProcessing
                                                                                    mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                                    if ext_call.success:
                                                                                        _94237 = mem[64]
                                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                                        require return_data.size >= 96
                                                                                        _95010 = mem[_94237 + 32]
                                                                                        _95011 = mem[_94237 + 64]
                                                                                        mem[mem[64]] = mem[_94237]
                                                                                        mem[mem[64] + 64] = _95011
                                                                                        mem[mem[64] + 96] = gasForProcessing
                                                                                        emit ProcessedDividendTracker(mem[mem[64]], _95010, _95011, gasForProcessing, 1, tx.origin);
                                                                    else:
                                                                        if arg2 and sellFeeIncreaseFactor > -1 / arg2:
                                                                            revert with 'NH{q', 17
                                                                        if arg2 * totalFees / 100 > !(arg2 * sellFeeIncreaseFactor / 100):
                                                                            revert with 'NH{q', 17
                                                                        if arg2 < (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100):
                                                                            revert with 'NH{q', 17
                                                                        if not msg.sender:
                                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                                        if not this.address:
                                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                                        if balanceOf[address(msg.sender)] < (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100):
                                                                            revert with 0, 'ERC20: transfer amount exceeds balance'
                                                                        balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)
                                                                        if balanceOf[this.address] > !((arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)):
                                                                            revert with 'NH{q', 17
                                                                        balanceOf[this.address] = balanceOf[this.address] + (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)
                                                                        emit Transfer(((arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)), msg.sender, this.address);
                                                                        if not msg.sender:
                                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                                        if not arg1:
                                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                                        if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100):
                                                                            revert with 0, 'ERC20: transfer amount exceeds balance'
                                                                        balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)
                                                                        if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)):
                                                                            revert with 'NH{q', 17
                                                                        balanceOf[arg1] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)
                                                                        emit Transfer((arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)), msg.sender, arg1);
                                                                        require ext_code.size(dividendTrackerAddress)
                                                                        call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                                             gas gas_remaining wei
                                                                            args msg.sender, balanceOf[address(msg.sender)]
                                                                        mem[0] = arg1
                                                                        mem[32] = 0
                                                                        require ext_code.size(dividendTrackerAddress)
                                                                        call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                                             gas gas_remaining wei
                                                                            args address(arg1), balanceOf[address(arg1)]
                                                                        if not ext_call.success:
                                                                            if not ext_call.success:
                                                                                if not stor7:
                                                                                    call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                         gas gas_remaining wei
                                                                                        args gasForProcessing
                                                                                    mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                                    if ext_call.success:
                                                                                        _96983 = mem[64]
                                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                                        require return_data.size >= 96
                                                                                        _97493 = mem[_96983 + 32]
                                                                                        _97494 = mem[_96983 + 64]
                                                                                        mem[mem[64]] = mem[_96983]
                                                                                        mem[mem[64] + 64] = _97494
                                                                                        mem[mem[64] + 96] = gasForProcessing
                                                                                        emit ProcessedDividendTracker(mem[mem[64]], _97493, _97494, gasForProcessing, 1, tx.origin);
                                                                            else:
                                                                                if not stor7:
                                                                                    call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                         gas gas_remaining wei
                                                                                        args gasForProcessing
                                                                                    mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                                    if ext_call.success:
                                                                                        _97212 = mem[64]
                                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                                        require return_data.size >= 96
                                                                                        _97861 = mem[_97212 + 32]
                                                                                        _97862 = mem[_97212 + 64]
                                                                                        mem[mem[64]] = mem[_97212]
                                                                                        mem[mem[64] + 64] = _97862
                                                                                        mem[mem[64] + 96] = gasForProcessing
                                                                                        emit ProcessedDividendTracker(mem[mem[64]], _97861, _97862, gasForProcessing, 1, tx.origin);
                                                                        else:
                                                                            if not ext_call.success:
                                                                                if not stor7:
                                                                                    call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                         gas gas_remaining wei
                                                                                        args gasForProcessing
                                                                                    mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                                    if ext_call.success:
                                                                                        _97213 = mem[64]
                                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                                        require return_data.size >= 96
                                                                                        _97865 = mem[_97213 + 32]
                                                                                        _97866 = mem[_97213 + 64]
                                                                                        mem[mem[64]] = mem[_97213]
                                                                                        mem[mem[64] + 64] = _97866
                                                                                        mem[mem[64] + 96] = gasForProcessing
                                                                                        emit ProcessedDividendTracker(mem[mem[64]], _97865, _97866, gasForProcessing, 1, tx.origin);
                                                                            else:
                                                                                if not stor7:
                                                                                    call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                         gas gas_remaining wei
                                                                                        args gasForProcessing
                                                                                    mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                                    if ext_call.success:
                                                                                        _97497 = mem[64]
                                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                                        require return_data.size >= 96
                                                                                        _98206 = mem[_97497 + 32]
                                                                                        _98207 = mem[_97497 + 64]
                                                                                        mem[mem[64]] = mem[_97497]
                                                                                        mem[mem[64] + 64] = _98207
                                                                                        mem[mem[64] + 96] = gasForProcessing
                                                                                        emit ProcessedDividendTracker(mem[mem[64]], _98206, _98207, gasForProcessing, 1, tx.origin);
                                                    else:
                                                        emit SendDividends(balanceOf[this.address], eth.balance(this.address));
                                                        stor7 = 0
                                                        if stor21[address(msg.sender)]:
                                                            if not msg.sender:
                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                            if not arg1:
                                                                revert with 0, 'ERC20: transfer to the zero address'
                                                            if balanceOf[address(msg.sender)] < arg2:
                                                                revert with 0, 'ERC20: transfer amount exceeds balance'
                                                            balanceOf[address(msg.sender)] -= arg2
                                                            if balanceOf[arg1] > !arg2:
                                                                revert with 'NH{q', 17
                                                            balanceOf[arg1] += arg2
                                                            emit Transfer(arg2, msg.sender, arg1);
                                                            require ext_code.size(dividendTrackerAddress)
                                                            call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                                 gas gas_remaining wei
                                                                args msg.sender, balanceOf[address(msg.sender)]
                                                            mem[0] = arg1
                                                            mem[32] = 0
                                                            require ext_code.size(dividendTrackerAddress)
                                                            call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                                 gas gas_remaining wei
                                                                args address(arg1), balanceOf[address(arg1)]
                                                            if not ext_call.success:
                                                                if not ext_call.success:
                                                                    if not stor7:
                                                                        call dividendTrackerAddress.process(uint256 arg1) with:
                                                                             gas gas_remaining wei
                                                                            args gasForProcessing
                                                                        mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                        if ext_call.success:
                                                                            _84123 = mem[64]
                                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                                            require return_data.size >= 96
                                                                            _86182 = mem[_84123 + 32]
                                                                            _86183 = mem[_84123 + 64]
                                                                            mem[mem[64]] = mem[_84123]
                                                                            mem[mem[64] + 64] = _86183
                                                                            mem[mem[64] + 96] = gasForProcessing
                                                                            emit ProcessedDividendTracker(mem[mem[64]], _86182, _86183, gasForProcessing, 1, tx.origin);
                                                                else:
                                                                    if not stor7:
                                                                        call dividendTrackerAddress.process(uint256 arg1) with:
                                                                             gas gas_remaining wei
                                                                            args gasForProcessing
                                                                        mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                        if ext_call.success:
                                                                            _85002 = mem[64]
                                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                                            require return_data.size >= 96
                                                                            _87357 = mem[_85002 + 32]
                                                                            _87358 = mem[_85002 + 64]
                                                                            mem[mem[64]] = mem[_85002]
                                                                            mem[mem[64] + 64] = _87358
                                                                            mem[mem[64] + 96] = gasForProcessing
                                                                            emit ProcessedDividendTracker(mem[mem[64]], _87357, _87358, gasForProcessing, 1, tx.origin);
                                                            else:
                                                                if not ext_call.success:
                                                                    if not stor7:
                                                                        call dividendTrackerAddress.process(uint256 arg1) with:
                                                                             gas gas_remaining wei
                                                                            args gasForProcessing
                                                                        mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                        if ext_call.success:
                                                                            _85003 = mem[64]
                                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                                            require return_data.size >= 96
                                                                            _87361 = mem[_85003 + 32]
                                                                            _87362 = mem[_85003 + 64]
                                                                            mem[mem[64]] = mem[_85003]
                                                                            mem[mem[64] + 64] = _87362
                                                                            mem[mem[64] + 96] = gasForProcessing
                                                                            emit ProcessedDividendTracker(mem[mem[64]], _87361, _87362, gasForProcessing, 1, tx.origin);
                                                                else:
                                                                    if not stor7:
                                                                        call dividendTrackerAddress.process(uint256 arg1) with:
                                                                             gas gas_remaining wei
                                                                            args gasForProcessing
                                                                        mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                        if ext_call.success:
                                                                            _86186 = mem[64]
                                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                                            require return_data.size >= 96
                                                                            _88249 = mem[_86186 + 32]
                                                                            _88250 = mem[_86186 + 64]
                                                                            mem[mem[64]] = mem[_86186]
                                                                            mem[mem[64] + 64] = _88250
                                                                            mem[mem[64] + 96] = gasForProcessing
                                                                            emit ProcessedDividendTracker(mem[mem[64]], _88249, _88250, gasForProcessing, 1, tx.origin);
                                                        else:
                                                            if stor21[address(arg1)]:
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                if not arg1:
                                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                                if balanceOf[address(msg.sender)] < arg2:
                                                                    revert with 0, 'ERC20: transfer amount exceeds balance'
                                                                balanceOf[address(msg.sender)] -= arg2
                                                                if balanceOf[arg1] > !arg2:
                                                                    revert with 'NH{q', 17
                                                                balanceOf[arg1] += arg2
                                                                emit Transfer(arg2, msg.sender, arg1);
                                                                require ext_code.size(dividendTrackerAddress)
                                                                call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                                     gas gas_remaining wei
                                                                    args msg.sender, balanceOf[address(msg.sender)]
                                                                mem[0] = arg1
                                                                mem[32] = 0
                                                                require ext_code.size(dividendTrackerAddress)
                                                                call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                                     gas gas_remaining wei
                                                                    args address(arg1), balanceOf[address(arg1)]
                                                                if not ext_call.success:
                                                                    if not ext_call.success:
                                                                        if not stor7:
                                                                            call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                 gas gas_remaining wei
                                                                                args gasForProcessing
                                                                            mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                            if ext_call.success:
                                                                                _85012 = mem[64]
                                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                                require return_data.size >= 96
                                                                                _87379 = mem[_85012 + 32]
                                                                                _87380 = mem[_85012 + 64]
                                                                                mem[mem[64]] = mem[_85012]
                                                                                mem[mem[64] + 64] = _87380
                                                                                mem[mem[64] + 96] = gasForProcessing
                                                                                emit ProcessedDividendTracker(mem[mem[64]], _87379, _87380, gasForProcessing, 1, tx.origin);
                                                                    else:
                                                                        if not stor7:
                                                                            call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                 gas gas_remaining wei
                                                                                args gasForProcessing
                                                                            mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                            if ext_call.success:
                                                                                _86198 = mem[64]
                                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                                require return_data.size >= 96
                                                                                _88259 = mem[_86198 + 32]
                                                                                _88260 = mem[_86198 + 64]
                                                                                mem[mem[64]] = mem[_86198]
                                                                                mem[mem[64] + 64] = _88260
                                                                                mem[mem[64] + 96] = gasForProcessing
                                                                                emit ProcessedDividendTracker(mem[mem[64]], _88259, _88260, gasForProcessing, 1, tx.origin);
                                                                else:
                                                                    if not ext_call.success:
                                                                        if not stor7:
                                                                            call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                 gas gas_remaining wei
                                                                                args gasForProcessing
                                                                            mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                            if ext_call.success:
                                                                                _86199 = mem[64]
                                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                                require return_data.size >= 96
                                                                                _88263 = mem[_86199 + 32]
                                                                                _88264 = mem[_86199 + 64]
                                                                                mem[mem[64]] = mem[_86199]
                                                                                mem[mem[64] + 64] = _88264
                                                                                mem[mem[64] + 96] = gasForProcessing
                                                                                emit ProcessedDividendTracker(mem[mem[64]], _88263, _88264, gasForProcessing, 1, tx.origin);
                                                                    else:
                                                                        if not stor7:
                                                                            call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                 gas gas_remaining wei
                                                                                args gasForProcessing
                                                                            mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                            if ext_call.success:
                                                                                _87383 = mem[64]
                                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                                require return_data.size >= 96
                                                                                _89104 = mem[_87383 + 32]
                                                                                _89105 = mem[_87383 + 64]
                                                                                mem[mem[64]] = mem[_87383]
                                                                                mem[mem[64] + 64] = _89105
                                                                                mem[mem[64] + 96] = gasForProcessing
                                                                                emit ProcessedDividendTracker(mem[mem[64]], _89104, _89105, gasForProcessing, 1, tx.origin);
                                                            else:
                                                                if stor7:
                                                                    if not msg.sender:
                                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                                    if not arg1:
                                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                                    if balanceOf[address(msg.sender)] < arg2:
                                                                        revert with 0, 'ERC20: transfer amount exceeds balance'
                                                                    balanceOf[address(msg.sender)] -= arg2
                                                                    if balanceOf[arg1] > !arg2:
                                                                        revert with 'NH{q', 17
                                                                    balanceOf[arg1] += arg2
                                                                    emit Transfer(arg2, msg.sender, arg1);
                                                                    require ext_code.size(dividendTrackerAddress)
                                                                    call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                                         gas gas_remaining wei
                                                                        args msg.sender, balanceOf[address(msg.sender)]
                                                                    mem[0] = arg1
                                                                    mem[32] = 0
                                                                    require ext_code.size(dividendTrackerAddress)
                                                                    call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                                         gas gas_remaining wei
                                                                        args address(arg1), balanceOf[address(arg1)]
                                                                    if not ext_call.success:
                                                                        if not ext_call.success:
                                                                            if not stor7:
                                                                                call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                     gas gas_remaining wei
                                                                                    args gasForProcessing
                                                                                mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                                if ext_call.success:
                                                                                    _84128 = mem[64]
                                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                                    require return_data.size >= 96
                                                                                    _86189 = mem[_84128 + 32]
                                                                                    _86190 = mem[_84128 + 64]
                                                                                    mem[mem[64]] = mem[_84128]
                                                                                    mem[mem[64] + 64] = _86190
                                                                                    mem[mem[64] + 96] = gasForProcessing
                                                                                    emit ProcessedDividendTracker(mem[mem[64]], _86189, _86190, gasForProcessing, 1, tx.origin);
                                                                        else:
                                                                            if not stor7:
                                                                                call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                     gas gas_remaining wei
                                                                                    args gasForProcessing
                                                                                mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                                if ext_call.success:
                                                                                    _85007 = mem[64]
                                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                                    require return_data.size >= 96
                                                                                    _87366 = mem[_85007 + 32]
                                                                                    _87367 = mem[_85007 + 64]
                                                                                    mem[mem[64]] = mem[_85007]
                                                                                    mem[mem[64] + 64] = _87367
                                                                                    mem[mem[64] + 96] = gasForProcessing
                                                                                    emit ProcessedDividendTracker(mem[mem[64]], _87366, _87367, gasForProcessing, 1, tx.origin);
                                                                    else:
                                                                        if not ext_call.success:
                                                                            if not stor7:
                                                                                call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                     gas gas_remaining wei
                                                                                    args gasForProcessing
                                                                                mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                                if ext_call.success:
                                                                                    _85008 = mem[64]
                                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                                    require return_data.size >= 96
                                                                                    _87370 = mem[_85008 + 32]
                                                                                    _87371 = mem[_85008 + 64]
                                                                                    mem[mem[64]] = mem[_85008]
                                                                                    mem[mem[64] + 64] = _87371
                                                                                    mem[mem[64] + 96] = gasForProcessing
                                                                                    emit ProcessedDividendTracker(mem[mem[64]], _87370, _87371, gasForProcessing, 1, tx.origin);
                                                                        else:
                                                                            if not stor7:
                                                                                call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                     gas gas_remaining wei
                                                                                    args gasForProcessing
                                                                                mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                                if ext_call.success:
                                                                                    _86193 = mem[64]
                                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                                    require return_data.size >= 96
                                                                                    _88254 = mem[_86193 + 32]
                                                                                    _88255 = mem[_86193 + 64]
                                                                                    mem[mem[64]] = mem[_86193]
                                                                                    mem[mem[64] + 64] = _88255
                                                                                    mem[mem[64] + 96] = gasForProcessing
                                                                                    emit ProcessedDividendTracker(mem[mem[64]], _88254, _88255, gasForProcessing, 1, tx.origin);
                                                                else:
                                                                    if arg2 and totalFees > -1 / arg2:
                                                                        revert with 'NH{q', 17
                                                                    if not stor22[address(arg1)]:
                                                                        if arg2 < arg2 * totalFees / 100:
                                                                            revert with 'NH{q', 17
                                                                        if not msg.sender:
                                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                                        if not this.address:
                                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                                        if balanceOf[address(msg.sender)] < arg2 * totalFees / 100:
                                                                            revert with 0, 'ERC20: transfer amount exceeds balance'
                                                                        balanceOf[address(msg.sender)] -= arg2 * totalFees / 100
                                                                        if balanceOf[this.address] > !(arg2 * totalFees / 100):
                                                                            revert with 'NH{q', 17
                                                                        balanceOf[this.address] += arg2 * totalFees / 100
                                                                        emit Transfer((arg2 * totalFees / 100), msg.sender, this.address);
                                                                        if not msg.sender:
                                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                                        if not arg1:
                                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                                        if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100):
                                                                            revert with 0, 'ERC20: transfer amount exceeds balance'
                                                                        balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100)
                                                                        if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100)):
                                                                            revert with 'NH{q', 17
                                                                        balanceOf[arg1] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100)
                                                                        emit Transfer((arg2 - (arg2 * totalFees / 100)), msg.sender, arg1);
                                                                        require ext_code.size(dividendTrackerAddress)
                                                                        call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                                             gas gas_remaining wei
                                                                            args msg.sender, balanceOf[address(msg.sender)]
                                                                        mem[0] = arg1
                                                                        mem[32] = 0
                                                                        require ext_code.size(dividendTrackerAddress)
                                                                        call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                                             gas gas_remaining wei
                                                                            args address(arg1), balanceOf[address(arg1)]
                                                                        if not ext_call.success:
                                                                            if not ext_call.success:
                                                                                if not stor7:
                                                                                    call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                         gas gas_remaining wei
                                                                                        args gasForProcessing
                                                                                    mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                                    if ext_call.success:
                                                                                        _93832 = mem[64]
                                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                                        require return_data.size >= 96
                                                                                        _94650 = mem[_93832 + 32]
                                                                                        _94651 = mem[_93832 + 64]
                                                                                        mem[mem[64]] = mem[_93832]
                                                                                        mem[mem[64] + 64] = _94651
                                                                                        mem[mem[64] + 96] = gasForProcessing
                                                                                        emit ProcessedDividendTracker(mem[mem[64]], _94650, _94651, gasForProcessing, 1, tx.origin);
                                                                            else:
                                                                                if not stor7:
                                                                                    call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                         gas gas_remaining wei
                                                                                        args gasForProcessing
                                                                                    mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                                    if ext_call.success:
                                                                                        _94240 = mem[64]
                                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                                        require return_data.size >= 96
                                                                                        _95015 = mem[_94240 + 32]
                                                                                        _95016 = mem[_94240 + 64]
                                                                                        mem[mem[64]] = mem[_94240]
                                                                                        mem[mem[64] + 64] = _95016
                                                                                        mem[mem[64] + 96] = gasForProcessing
                                                                                        emit ProcessedDividendTracker(mem[mem[64]], _95015, _95016, gasForProcessing, 1, tx.origin);
                                                                        else:
                                                                            if not ext_call.success:
                                                                                if not stor7:
                                                                                    call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                         gas gas_remaining wei
                                                                                        args gasForProcessing
                                                                                    mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                                    if ext_call.success:
                                                                                        _94241 = mem[64]
                                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                                        require return_data.size >= 96
                                                                                        _95019 = mem[_94241 + 32]
                                                                                        _95020 = mem[_94241 + 64]
                                                                                        mem[mem[64]] = mem[_94241]
                                                                                        mem[mem[64] + 64] = _95020
                                                                                        mem[mem[64] + 96] = gasForProcessing
                                                                                        emit ProcessedDividendTracker(mem[mem[64]], _95019, _95020, gasForProcessing, 1, tx.origin);
                                                                            else:
                                                                                if not stor7:
                                                                                    call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                         gas gas_remaining wei
                                                                                        args gasForProcessing
                                                                                    mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                                    if ext_call.success:
                                                                                        _94654 = mem[64]
                                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                                        require return_data.size >= 96
                                                                                        _95316 = mem[_94654 + 32]
                                                                                        _95317 = mem[_94654 + 64]
                                                                                        mem[mem[64]] = mem[_94654]
                                                                                        mem[mem[64] + 64] = _95317
                                                                                        mem[mem[64] + 96] = gasForProcessing
                                                                                        emit ProcessedDividendTracker(mem[mem[64]], _95316, _95317, gasForProcessing, 1, tx.origin);
                                                                    else:
                                                                        if arg2 and sellFeeIncreaseFactor > -1 / arg2:
                                                                            revert with 'NH{q', 17
                                                                        if arg2 * totalFees / 100 > !(arg2 * sellFeeIncreaseFactor / 100):
                                                                            revert with 'NH{q', 17
                                                                        if arg2 < (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100):
                                                                            revert with 'NH{q', 17
                                                                        if not msg.sender:
                                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                                        if not this.address:
                                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                                        if balanceOf[address(msg.sender)] < (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100):
                                                                            revert with 0, 'ERC20: transfer amount exceeds balance'
                                                                        balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)
                                                                        if balanceOf[this.address] > !((arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)):
                                                                            revert with 'NH{q', 17
                                                                        balanceOf[this.address] = balanceOf[this.address] + (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)
                                                                        emit Transfer(((arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)), msg.sender, this.address);
                                                                        if not msg.sender:
                                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                                        if not arg1:
                                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                                        if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100):
                                                                            revert with 0, 'ERC20: transfer amount exceeds balance'
                                                                        balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)
                                                                        if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)):
                                                                            revert with 'NH{q', 17
                                                                        balanceOf[arg1] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)
                                                                        emit Transfer((arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)), msg.sender, arg1);
                                                                        require ext_code.size(dividendTrackerAddress)
                                                                        call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                                             gas gas_remaining wei
                                                                            args msg.sender, balanceOf[address(msg.sender)]
                                                                        mem[0] = arg1
                                                                        mem[32] = 0
                                                                        require ext_code.size(dividendTrackerAddress)
                                                                        call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                                             gas gas_remaining wei
                                                                            args address(arg1), balanceOf[address(arg1)]
                                                                        if not ext_call.success:
                                                                            if not ext_call.success:
                                                                                if not stor7:
                                                                                    call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                         gas gas_remaining wei
                                                                                        args gasForProcessing
                                                                                    mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                                    if ext_call.success:
                                                                                        _97216 = mem[64]
                                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                                        require return_data.size >= 96
                                                                                        _97870 = mem[_97216 + 32]
                                                                                        _97871 = mem[_97216 + 64]
                                                                                        mem[mem[64]] = mem[_97216]
                                                                                        mem[mem[64] + 64] = _97871
                                                                                        mem[mem[64] + 96] = gasForProcessing
                                                                                        emit ProcessedDividendTracker(mem[mem[64]], _97870, _97871, gasForProcessing, 1, tx.origin);
                                                                            else:
                                                                                if not stor7:
                                                                                    call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                         gas gas_remaining wei
                                                                                        args gasForProcessing
                                                                                    mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                                    if ext_call.success:
                                                                                        _97499 = mem[64]
                                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                                        require return_data.size >= 96
                                                                                        _98210 = mem[_97499 + 32]
                                                                                        _98211 = mem[_97499 + 64]
                                                                                        mem[mem[64]] = mem[_97499]
                                                                                        mem[mem[64] + 64] = _98211
                                                                                        mem[mem[64] + 96] = gasForProcessing
                                                                                        emit ProcessedDividendTracker(mem[mem[64]], _98210, _98211, gasForProcessing, 1, tx.origin);
                                                                        else:
                                                                            if not ext_call.success:
                                                                                if not stor7:
                                                                                    call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                         gas gas_remaining wei
                                                                                        args gasForProcessing
                                                                                    mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                                    if ext_call.success:
                                                                                        _97500 = mem[64]
                                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                                        require return_data.size >= 96
                                                                                        _98214 = mem[_97500 + 32]
                                                                                        _98215 = mem[_97500 + 64]
                                                                                        mem[mem[64]] = mem[_97500]
                                                                                        mem[mem[64] + 64] = _98215
                                                                                        mem[mem[64] + 96] = gasForProcessing
                                                                                        emit ProcessedDividendTracker(mem[mem[64]], _98214, _98215, gasForProcessing, 1, tx.origin);
                                                                            else:
                                                                                if not stor7:
                                                                                    call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                         gas gas_remaining wei
                                                                                        args gasForProcessing
                                                                                    mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                                    if ext_call.success:
                                                                                        _97874 = mem[64]
                                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                                        require return_data.size >= 96
                                                                                        _98467 = mem[_97874 + 32]
                                                                                        _98468 = mem[_97874 + 64]
                                                                                        mem[mem[64]] = mem[_97874]
                                                                                        mem[mem[64] + 64] = _98468
                                                                                        mem[mem[64] + 96] = gasForProcessing
                                                                                        emit ProcessedDividendTracker(mem[mem[64]], _98467, _98468, gasForProcessing, 1, tx.origin);
                                                else:
                                                    _79993 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size) + 1
                                                    mem[_79993] = return_data.size
                                                    mem[_79993 + 32 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                    if not ext_call.success:
                                                        stor7 = 0
                                                        if stor21[address(msg.sender)]:
                                                            if not msg.sender:
                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                            if not arg1:
                                                                revert with 0, 'ERC20: transfer to the zero address'
                                                            if balanceOf[address(msg.sender)] < arg2:
                                                                revert with 0, 'ERC20: transfer amount exceeds balance'
                                                            balanceOf[address(msg.sender)] -= arg2
                                                            if balanceOf[arg1] > !arg2:
                                                                revert with 'NH{q', 17
                                                            balanceOf[arg1] += arg2
                                                            emit Transfer(arg2, msg.sender, arg1);
                                                            require ext_code.size(dividendTrackerAddress)
                                                            call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                                 gas gas_remaining wei
                                                                args msg.sender, balanceOf[address(msg.sender)]
                                                            mem[0] = arg1
                                                            mem[32] = 0
                                                            require ext_code.size(dividendTrackerAddress)
                                                            call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                                 gas gas_remaining wei
                                                                args address(arg1), balanceOf[address(arg1)]
                                                            if not ext_call.success:
                                                                if not ext_call.success:
                                                                    if not stor7:
                                                                        call dividendTrackerAddress.process(uint256 arg1) with:
                                                                             gas gas_remaining wei
                                                                            args gasForProcessing
                                                                        mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                        if ext_call.success:
                                                                            _83499 = mem[64]
                                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                                            require return_data.size >= 96
                                                                            _85019 = mem[_83499 + 32]
                                                                            _85020 = mem[_83499 + 64]
                                                                            mem[mem[64]] = mem[_83499]
                                                                            mem[mem[64] + 64] = _85020
                                                                            mem[mem[64] + 96] = gasForProcessing
                                                                            emit ProcessedDividendTracker(mem[mem[64]], _85019, _85020, gasForProcessing, 1, tx.origin);
                                                                else:
                                                                    if not stor7:
                                                                        call dividendTrackerAddress.process(uint256 arg1) with:
                                                                             gas gas_remaining wei
                                                                            args gasForProcessing
                                                                        mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                        if ext_call.success:
                                                                            _84136 = mem[64]
                                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                                            require return_data.size >= 96
                                                                            _86204 = mem[_84136 + 32]
                                                                            _86205 = mem[_84136 + 64]
                                                                            mem[mem[64]] = mem[_84136]
                                                                            mem[mem[64] + 64] = _86205
                                                                            mem[mem[64] + 96] = gasForProcessing
                                                                            emit ProcessedDividendTracker(mem[mem[64]], _86204, _86205, gasForProcessing, 1, tx.origin);
                                                            else:
                                                                if not ext_call.success:
                                                                    if not stor7:
                                                                        call dividendTrackerAddress.process(uint256 arg1) with:
                                                                             gas gas_remaining wei
                                                                            args gasForProcessing
                                                                        mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                        if ext_call.success:
                                                                            _84137 = mem[64]
                                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                                            require return_data.size >= 96
                                                                            _86208 = mem[_84137 + 32]
                                                                            _86209 = mem[_84137 + 64]
                                                                            mem[mem[64]] = mem[_84137]
                                                                            mem[mem[64] + 64] = _86209
                                                                            mem[mem[64] + 96] = gasForProcessing
                                                                            emit ProcessedDividendTracker(mem[mem[64]], _86208, _86209, gasForProcessing, 1, tx.origin);
                                                                else:
                                                                    if not stor7:
                                                                        call dividendTrackerAddress.process(uint256 arg1) with:
                                                                             gas gas_remaining wei
                                                                            args gasForProcessing
                                                                        mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                        if ext_call.success:
                                                                            _85023 = mem[64]
                                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                                            require return_data.size >= 96
                                                                            _87387 = mem[_85023 + 32]
                                                                            _87388 = mem[_85023 + 64]
                                                                            mem[mem[64]] = mem[_85023]
                                                                            mem[mem[64] + 64] = _87388
                                                                            mem[mem[64] + 96] = gasForProcessing
                                                                            emit ProcessedDividendTracker(mem[mem[64]], _87387, _87388, gasForProcessing, 1, tx.origin);
                                                        else:
                                                            if stor21[address(arg1)]:
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                if not arg1:
                                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                                if balanceOf[address(msg.sender)] < arg2:
                                                                    revert with 0, 'ERC20: transfer amount exceeds balance'
                                                                balanceOf[address(msg.sender)] -= arg2
                                                                if balanceOf[arg1] > !arg2:
                                                                    revert with 'NH{q', 17
                                                                balanceOf[arg1] += arg2
                                                                emit Transfer(arg2, msg.sender, arg1);
                                                                require ext_code.size(dividendTrackerAddress)
                                                                call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                                     gas gas_remaining wei
                                                                    args msg.sender, balanceOf[address(msg.sender)]
                                                                mem[0] = arg1
                                                                mem[32] = 0
                                                                require ext_code.size(dividendTrackerAddress)
                                                                call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                                     gas gas_remaining wei
                                                                    args address(arg1), balanceOf[address(arg1)]
                                                                if not ext_call.success:
                                                                    if not ext_call.success:
                                                                        if not stor7:
                                                                            call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                 gas gas_remaining wei
                                                                                args gasForProcessing
                                                                            mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                            if ext_call.success:
                                                                                _84146 = mem[64]
                                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                                require return_data.size >= 96
                                                                                _86226 = mem[_84146 + 32]
                                                                                _86227 = mem[_84146 + 64]
                                                                                mem[mem[64]] = mem[_84146]
                                                                                mem[mem[64] + 64] = _86227
                                                                                mem[mem[64] + 96] = gasForProcessing
                                                                                emit ProcessedDividendTracker(mem[mem[64]], _86226, _86227, gasForProcessing, 1, tx.origin);
                                                                    else:
                                                                        if not stor7:
                                                                            call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                 gas gas_remaining wei
                                                                                args gasForProcessing
                                                                            mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                            if ext_call.success:
                                                                                _85035 = mem[64]
                                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                                require return_data.size >= 96
                                                                                _87397 = mem[_85035 + 32]
                                                                                _87398 = mem[_85035 + 64]
                                                                                mem[mem[64]] = mem[_85035]
                                                                                mem[mem[64] + 64] = _87398
                                                                                mem[mem[64] + 96] = gasForProcessing
                                                                                emit ProcessedDividendTracker(mem[mem[64]], _87397, _87398, gasForProcessing, 1, tx.origin);
                                                                else:
                                                                    if not ext_call.success:
                                                                        if not stor7:
                                                                            call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                 gas gas_remaining wei
                                                                                args gasForProcessing
                                                                            mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                            if ext_call.success:
                                                                                _85036 = mem[64]
                                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                                require return_data.size >= 96
                                                                                _87401 = mem[_85036 + 32]
                                                                                _87402 = mem[_85036 + 64]
                                                                                mem[mem[64]] = mem[_85036]
                                                                                mem[mem[64] + 64] = _87402
                                                                                mem[mem[64] + 96] = gasForProcessing
                                                                                emit ProcessedDividendTracker(mem[mem[64]], _87401, _87402, gasForProcessing, 1, tx.origin);
                                                                    else:
                                                                        if not stor7:
                                                                            call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                 gas gas_remaining wei
                                                                                args gasForProcessing
                                                                            mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                            if ext_call.success:
                                                                                _86230 = mem[64]
                                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                                require return_data.size >= 96
                                                                                _88279 = mem[_86230 + 32]
                                                                                _88280 = mem[_86230 + 64]
                                                                                mem[mem[64]] = mem[_86230]
                                                                                mem[mem[64] + 64] = _88280
                                                                                mem[mem[64] + 96] = gasForProcessing
                                                                                emit ProcessedDividendTracker(mem[mem[64]], _88279, _88280, gasForProcessing, 1, tx.origin);
                                                            else:
                                                                if stor7:
                                                                    if not msg.sender:
                                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                                    if not arg1:
                                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                                    if balanceOf[address(msg.sender)] < arg2:
                                                                        revert with 0, 'ERC20: transfer amount exceeds balance'
                                                                    balanceOf[address(msg.sender)] -= arg2
                                                                    if balanceOf[arg1] > !arg2:
                                                                        revert with 'NH{q', 17
                                                                    balanceOf[arg1] += arg2
                                                                    emit Transfer(arg2, msg.sender, arg1);
                                                                    require ext_code.size(dividendTrackerAddress)
                                                                    call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                                         gas gas_remaining wei
                                                                        args msg.sender, balanceOf[address(msg.sender)]
                                                                    mem[0] = arg1
                                                                    mem[32] = 0
                                                                    require ext_code.size(dividendTrackerAddress)
                                                                    call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                                         gas gas_remaining wei
                                                                        args address(arg1), balanceOf[address(arg1)]
                                                                    if not ext_call.success:
                                                                        if not ext_call.success:
                                                                            if not stor7:
                                                                                call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                     gas gas_remaining wei
                                                                                    args gasForProcessing
                                                                                mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                                if ext_call.success:
                                                                                    _83504 = mem[64]
                                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                                    require return_data.size >= 96
                                                                                    _85026 = mem[_83504 + 32]
                                                                                    _85027 = mem[_83504 + 64]
                                                                                    mem[mem[64]] = mem[_83504]
                                                                                    mem[mem[64] + 64] = _85027
                                                                                    mem[mem[64] + 96] = gasForProcessing
                                                                                    emit ProcessedDividendTracker(mem[mem[64]], _85026, _85027, gasForProcessing, 1, tx.origin);
                                                                        else:
                                                                            if not stor7:
                                                                                call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                     gas gas_remaining wei
                                                                                    args gasForProcessing
                                                                                mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                                if ext_call.success:
                                                                                    _84141 = mem[64]
                                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                                    require return_data.size >= 96
                                                                                    _86213 = mem[_84141 + 32]
                                                                                    _86214 = mem[_84141 + 64]
                                                                                    mem[mem[64]] = mem[_84141]
                                                                                    mem[mem[64] + 64] = _86214
                                                                                    mem[mem[64] + 96] = gasForProcessing
                                                                                    emit ProcessedDividendTracker(mem[mem[64]], _86213, _86214, gasForProcessing, 1, tx.origin);
                                                                    else:
                                                                        if not ext_call.success:
                                                                            if not stor7:
                                                                                call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                     gas gas_remaining wei
                                                                                    args gasForProcessing
                                                                                mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                                if ext_call.success:
                                                                                    _84142 = mem[64]
                                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                                    require return_data.size >= 96
                                                                                    _86217 = mem[_84142 + 32]
                                                                                    _86218 = mem[_84142 + 64]
                                                                                    mem[mem[64]] = mem[_84142]
                                                                                    mem[mem[64] + 64] = _86218
                                                                                    mem[mem[64] + 96] = gasForProcessing
                                                                                    emit ProcessedDividendTracker(mem[mem[64]], _86217, _86218, gasForProcessing, 1, tx.origin);
                                                                        else:
                                                                            if not stor7:
                                                                                call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                     gas gas_remaining wei
                                                                                    args gasForProcessing
                                                                                mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                                if ext_call.success:
                                                                                    _85030 = mem[64]
                                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                                    require return_data.size >= 96
                                                                                    _87392 = mem[_85030 + 32]
                                                                                    _87393 = mem[_85030 + 64]
                                                                                    mem[mem[64]] = mem[_85030]
                                                                                    mem[mem[64] + 64] = _87393
                                                                                    mem[mem[64] + 96] = gasForProcessing
                                                                                    emit ProcessedDividendTracker(mem[mem[64]], _87392, _87393, gasForProcessing, 1, tx.origin);
                                                                else:
                                                                    if arg2 and totalFees > -1 / arg2:
                                                                        revert with 'NH{q', 17
                                                                    if not stor22[address(arg1)]:
                                                                        if arg2 < arg2 * totalFees / 100:
                                                                            revert with 'NH{q', 17
                                                                        if not msg.sender:
                                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                                        if not this.address:
                                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                                        if balanceOf[address(msg.sender)] < arg2 * totalFees / 100:
                                                                            revert with 0, 'ERC20: transfer amount exceeds balance'
                                                                        balanceOf[address(msg.sender)] -= arg2 * totalFees / 100
                                                                        if balanceOf[this.address] > !(arg2 * totalFees / 100):
                                                                            revert with 'NH{q', 17
                                                                        balanceOf[this.address] += arg2 * totalFees / 100
                                                                        emit Transfer((arg2 * totalFees / 100), msg.sender, this.address);
                                                                        if not msg.sender:
                                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                                        if not arg1:
                                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                                        if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100):
                                                                            revert with 0, 'ERC20: transfer amount exceeds balance'
                                                                        balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100)
                                                                        if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100)):
                                                                            revert with 'NH{q', 17
                                                                        balanceOf[arg1] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100)
                                                                        emit Transfer((arg2 - (arg2 * totalFees / 100)), msg.sender, arg1);
                                                                        require ext_code.size(dividendTrackerAddress)
                                                                        call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                                             gas gas_remaining wei
                                                                            args msg.sender, balanceOf[address(msg.sender)]
                                                                        mem[0] = arg1
                                                                        mem[32] = 0
                                                                        require ext_code.size(dividendTrackerAddress)
                                                                        call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                                             gas gas_remaining wei
                                                                            args address(arg1), balanceOf[address(arg1)]
                                                                        if not ext_call.success:
                                                                            if not ext_call.success:
                                                                                if not stor7:
                                                                                    call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                         gas gas_remaining wei
                                                                                        args gasForProcessing
                                                                                    mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                                    if ext_call.success:
                                                                                        _93450 = mem[64]
                                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                                        require return_data.size >= 96
                                                                                        _94250 = mem[_93450 + 32]
                                                                                        _94251 = mem[_93450 + 64]
                                                                                        mem[mem[64]] = mem[_93450]
                                                                                        mem[mem[64] + 64] = _94251
                                                                                        mem[mem[64] + 96] = gasForProcessing
                                                                                        emit ProcessedDividendTracker(mem[mem[64]], _94250, _94251, gasForProcessing, 1, tx.origin);
                                                                            else:
                                                                                if not stor7:
                                                                                    call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                         gas gas_remaining wei
                                                                                        args gasForProcessing
                                                                                    mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                                    if ext_call.success:
                                                                                        _93841 = mem[64]
                                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                                        require return_data.size >= 96
                                                                                        _94658 = mem[_93841 + 32]
                                                                                        _94659 = mem[_93841 + 64]
                                                                                        mem[mem[64]] = mem[_93841]
                                                                                        mem[mem[64] + 64] = _94659
                                                                                        mem[mem[64] + 96] = gasForProcessing
                                                                                        emit ProcessedDividendTracker(mem[mem[64]], _94658, _94659, gasForProcessing, 1, tx.origin);
                                                                        else:
                                                                            if not ext_call.success:
                                                                                if not stor7:
                                                                                    call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                         gas gas_remaining wei
                                                                                        args gasForProcessing
                                                                                    mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                                    if ext_call.success:
                                                                                        _93842 = mem[64]
                                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                                        require return_data.size >= 96
                                                                                        _94662 = mem[_93842 + 32]
                                                                                        _94663 = mem[_93842 + 64]
                                                                                        mem[mem[64]] = mem[_93842]
                                                                                        mem[mem[64] + 64] = _94663
                                                                                        mem[mem[64] + 96] = gasForProcessing
                                                                                        emit ProcessedDividendTracker(mem[mem[64]], _94662, _94663, gasForProcessing, 1, tx.origin);
                                                                            else:
                                                                                if not stor7:
                                                                                    call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                         gas gas_remaining wei
                                                                                        args gasForProcessing
                                                                                    mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                                    if ext_call.success:
                                                                                        _94254 = mem[64]
                                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                                        require return_data.size >= 96
                                                                                        _95025 = mem[_94254 + 32]
                                                                                        _95026 = mem[_94254 + 64]
                                                                                        mem[mem[64]] = mem[_94254]
                                                                                        mem[mem[64] + 64] = _95026
                                                                                        mem[mem[64] + 96] = gasForProcessing
                                                                                        emit ProcessedDividendTracker(mem[mem[64]], _95025, _95026, gasForProcessing, 1, tx.origin);
                                                                    else:
                                                                        if arg2 and sellFeeIncreaseFactor > -1 / arg2:
                                                                            revert with 'NH{q', 17
                                                                        if arg2 * totalFees / 100 > !(arg2 * sellFeeIncreaseFactor / 100):
                                                                            revert with 'NH{q', 17
                                                                        if arg2 < (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100):
                                                                            revert with 'NH{q', 17
                                                                        if not msg.sender:
                                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                                        if not this.address:
                                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                                        if balanceOf[address(msg.sender)] < (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100):
                                                                            revert with 0, 'ERC20: transfer amount exceeds balance'
                                                                        balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)
                                                                        if balanceOf[this.address] > !((arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)):
                                                                            revert with 'NH{q', 17
                                                                        balanceOf[this.address] = balanceOf[this.address] + (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)
                                                                        emit Transfer(((arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)), msg.sender, this.address);
                                                                        if not msg.sender:
                                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                                        if not arg1:
                                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                                        if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100):
                                                                            revert with 0, 'ERC20: transfer amount exceeds balance'
                                                                        balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)
                                                                        if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)):
                                                                            revert with 'NH{q', 17
                                                                        balanceOf[arg1] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)
                                                                        emit Transfer((arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)), msg.sender, arg1);
                                                                        require ext_code.size(dividendTrackerAddress)
                                                                        call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                                             gas gas_remaining wei
                                                                            args msg.sender, balanceOf[address(msg.sender)]
                                                                        mem[0] = arg1
                                                                        mem[32] = 0
                                                                        require ext_code.size(dividendTrackerAddress)
                                                                        call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                                             gas gas_remaining wei
                                                                            args address(arg1), balanceOf[address(arg1)]
                                                                        if not ext_call.success:
                                                                            if not ext_call.success:
                                                                                if not stor7:
                                                                                    call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                         gas gas_remaining wei
                                                                                        args gasForProcessing
                                                                                    mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                                    if ext_call.success:
                                                                                        _96990 = mem[64]
                                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                                        require return_data.size >= 96
                                                                                        _97505 = mem[_96990 + 32]
                                                                                        _97506 = mem[_96990 + 64]
                                                                                        mem[mem[64]] = mem[_96990]
                                                                                        mem[mem[64] + 64] = _97506
                                                                                        mem[mem[64] + 96] = gasForProcessing
                                                                                        emit ProcessedDividendTracker(mem[mem[64]], _97505, _97506, gasForProcessing, 1, tx.origin);
                                                                            else:
                                                                                if not stor7:
                                                                                    call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                         gas gas_remaining wei
                                                                                        args gasForProcessing
                                                                                    mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                                    if ext_call.success:
                                                                                        _97222 = mem[64]
                                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                                        require return_data.size >= 96
                                                                                        _97877 = mem[_97222 + 32]
                                                                                        _97878 = mem[_97222 + 64]
                                                                                        mem[mem[64]] = mem[_97222]
                                                                                        mem[mem[64] + 64] = _97878
                                                                                        mem[mem[64] + 96] = gasForProcessing
                                                                                        emit ProcessedDividendTracker(mem[mem[64]], _97877, _97878, gasForProcessing, 1, tx.origin);
                                                                        else:
                                                                            if not ext_call.success:
                                                                                if not stor7:
                                                                                    call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                         gas gas_remaining wei
                                                                                        args gasForProcessing
                                                                                    mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                                    if ext_call.success:
                                                                                        _97223 = mem[64]
                                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                                        require return_data.size >= 96
                                                                                        _97881 = mem[_97223 + 32]
                                                                                        _97882 = mem[_97223 + 64]
                                                                                        mem[mem[64]] = mem[_97223]
                                                                                        mem[mem[64] + 64] = _97882
                                                                                        mem[mem[64] + 96] = gasForProcessing
                                                                                        emit ProcessedDividendTracker(mem[mem[64]], _97881, _97882, gasForProcessing, 1, tx.origin);
                                                                            else:
                                                                                if not stor7:
                                                                                    call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                         gas gas_remaining wei
                                                                                        args gasForProcessing
                                                                                    mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                                    if ext_call.success:
                                                                                        _97509 = mem[64]
                                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                                        require return_data.size >= 96
                                                                                        _98220 = mem[_97509 + 32]
                                                                                        _98221 = mem[_97509 + 64]
                                                                                        mem[mem[64]] = mem[_97509]
                                                                                        mem[mem[64] + 64] = _98221
                                                                                        mem[mem[64] + 96] = gasForProcessing
                                                                                        emit ProcessedDividendTracker(mem[mem[64]], _98220, _98221, gasForProcessing, 1, tx.origin);
                                                    else:
                                                        emit SendDividends(balanceOf[this.address], eth.balance(this.address));
                                                        stor7 = 0
                                                        if stor21[address(msg.sender)]:
                                                            if not msg.sender:
                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                            if not arg1:
                                                                revert with 0, 'ERC20: transfer to the zero address'
                                                            if balanceOf[address(msg.sender)] < arg2:
                                                                revert with 0, 'ERC20: transfer amount exceeds balance'
                                                            balanceOf[address(msg.sender)] -= arg2
                                                            if balanceOf[arg1] > !arg2:
                                                                revert with 'NH{q', 17
                                                            balanceOf[arg1] += arg2
                                                            emit Transfer(arg2, msg.sender, arg1);
                                                            require ext_code.size(dividendTrackerAddress)
                                                            call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                                 gas gas_remaining wei
                                                                args msg.sender, balanceOf[address(msg.sender)]
                                                            mem[0] = arg1
                                                            mem[32] = 0
                                                            require ext_code.size(dividendTrackerAddress)
                                                            call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                                 gas gas_remaining wei
                                                                args address(arg1), balanceOf[address(arg1)]
                                                            if not ext_call.success:
                                                                if not ext_call.success:
                                                                    if not stor7:
                                                                        call dividendTrackerAddress.process(uint256 arg1) with:
                                                                             gas gas_remaining wei
                                                                            args gasForProcessing
                                                                        mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                        if ext_call.success:
                                                                            _84151 = mem[64]
                                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                                            require return_data.size >= 96
                                                                            _86233 = mem[_84151 + 32]
                                                                            _86234 = mem[_84151 + 64]
                                                                            mem[mem[64]] = mem[_84151]
                                                                            mem[mem[64] + 64] = _86234
                                                                            mem[mem[64] + 96] = gasForProcessing
                                                                            emit ProcessedDividendTracker(mem[mem[64]], _86233, _86234, gasForProcessing, 1, tx.origin);
                                                                else:
                                                                    if not stor7:
                                                                        call dividendTrackerAddress.process(uint256 arg1) with:
                                                                             gas gas_remaining wei
                                                                            args gasForProcessing
                                                                        mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                        if ext_call.success:
                                                                            _85040 = mem[64]
                                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                                            require return_data.size >= 96
                                                                            _87406 = mem[_85040 + 32]
                                                                            _87407 = mem[_85040 + 64]
                                                                            mem[mem[64]] = mem[_85040]
                                                                            mem[mem[64] + 64] = _87407
                                                                            mem[mem[64] + 96] = gasForProcessing
                                                                            emit ProcessedDividendTracker(mem[mem[64]], _87406, _87407, gasForProcessing, 1, tx.origin);
                                                            else:
                                                                if not ext_call.success:
                                                                    if not stor7:
                                                                        call dividendTrackerAddress.process(uint256 arg1) with:
                                                                             gas gas_remaining wei
                                                                            args gasForProcessing
                                                                        mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                        if ext_call.success:
                                                                            _85041 = mem[64]
                                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                                            require return_data.size >= 96
                                                                            _87410 = mem[_85041 + 32]
                                                                            _87411 = mem[_85041 + 64]
                                                                            mem[mem[64]] = mem[_85041]
                                                                            mem[mem[64] + 64] = _87411
                                                                            mem[mem[64] + 96] = gasForProcessing
                                                                            emit ProcessedDividendTracker(mem[mem[64]], _87410, _87411, gasForProcessing, 1, tx.origin);
                                                                else:
                                                                    if not stor7:
                                                                        call dividendTrackerAddress.process(uint256 arg1) with:
                                                                             gas gas_remaining wei
                                                                            args gasForProcessing
                                                                        mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                        if ext_call.success:
                                                                            _86237 = mem[64]
                                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                                            require return_data.size >= 96
                                                                            _88284 = mem[_86237 + 32]
                                                                            _88285 = mem[_86237 + 64]
                                                                            mem[mem[64]] = mem[_86237]
                                                                            mem[mem[64] + 64] = _88285
                                                                            mem[mem[64] + 96] = gasForProcessing
                                                                            emit ProcessedDividendTracker(mem[mem[64]], _88284, _88285, gasForProcessing, 1, tx.origin);
                                                        else:
                                                            if stor21[address(arg1)]:
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                if not arg1:
                                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                                if balanceOf[address(msg.sender)] < arg2:
                                                                    revert with 0, 'ERC20: transfer amount exceeds balance'
                                                                balanceOf[address(msg.sender)] -= arg2
                                                                if balanceOf[arg1] > !arg2:
                                                                    revert with 'NH{q', 17
                                                                balanceOf[arg1] += arg2
                                                                emit Transfer(arg2, msg.sender, arg1);
                                                                require ext_code.size(dividendTrackerAddress)
                                                                call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                                     gas gas_remaining wei
                                                                    args msg.sender, balanceOf[address(msg.sender)]
                                                                mem[0] = arg1
                                                                mem[32] = 0
                                                                require ext_code.size(dividendTrackerAddress)
                                                                call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                                     gas gas_remaining wei
                                                                    args address(arg1), balanceOf[address(arg1)]
                                                                if not ext_call.success:
                                                                    if not ext_call.success:
                                                                        if not stor7:
                                                                            call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                 gas gas_remaining wei
                                                                                args gasForProcessing
                                                                            mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                            if ext_call.success:
                                                                                _85050 = mem[64]
                                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                                require return_data.size >= 96
                                                                                _87428 = mem[_85050 + 32]
                                                                                _87429 = mem[_85050 + 64]
                                                                                mem[mem[64]] = mem[_85050]
                                                                                mem[mem[64] + 64] = _87429
                                                                                mem[mem[64] + 96] = gasForProcessing
                                                                                emit ProcessedDividendTracker(mem[mem[64]], _87428, _87429, gasForProcessing, 1, tx.origin);
                                                                    else:
                                                                        if not stor7:
                                                                            call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                 gas gas_remaining wei
                                                                                args gasForProcessing
                                                                            mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                            if ext_call.success:
                                                                                _86249 = mem[64]
                                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                                require return_data.size >= 96
                                                                                _88294 = mem[_86249 + 32]
                                                                                _88295 = mem[_86249 + 64]
                                                                                mem[mem[64]] = mem[_86249]
                                                                                mem[mem[64] + 64] = _88295
                                                                                mem[mem[64] + 96] = gasForProcessing
                                                                                emit ProcessedDividendTracker(mem[mem[64]], _88294, _88295, gasForProcessing, 1, tx.origin);
                                                                else:
                                                                    if not ext_call.success:
                                                                        if not stor7:
                                                                            call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                 gas gas_remaining wei
                                                                                args gasForProcessing
                                                                            mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                            if ext_call.success:
                                                                                _86250 = mem[64]
                                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                                require return_data.size >= 96
                                                                                _88298 = mem[_86250 + 32]
                                                                                _88299 = mem[_86250 + 64]
                                                                                mem[mem[64]] = mem[_86250]
                                                                                mem[mem[64] + 64] = _88299
                                                                                mem[mem[64] + 96] = gasForProcessing
                                                                                emit ProcessedDividendTracker(mem[mem[64]], _88298, _88299, gasForProcessing, 1, tx.origin);
                                                                    else:
                                                                        if not stor7:
                                                                            call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                 gas gas_remaining wei
                                                                                args gasForProcessing
                                                                            mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                            if ext_call.success:
                                                                                _87432 = mem[64]
                                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                                require return_data.size >= 96
                                                                                _89139 = mem[_87432 + 32]
                                                                                _89140 = mem[_87432 + 64]
                                                                                mem[mem[64]] = mem[_87432]
                                                                                mem[mem[64] + 64] = _89140
                                                                                mem[mem[64] + 96] = gasForProcessing
                                                                                emit ProcessedDividendTracker(mem[mem[64]], _89139, _89140, gasForProcessing, 1, tx.origin);
                                                            else:
                                                                if stor7:
                                                                    if not msg.sender:
                                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                                    if not arg1:
                                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                                    if balanceOf[address(msg.sender)] < arg2:
                                                                        revert with 0, 'ERC20: transfer amount exceeds balance'
                                                                    balanceOf[address(msg.sender)] -= arg2
                                                                    if balanceOf[arg1] > !arg2:
                                                                        revert with 'NH{q', 17
                                                                    balanceOf[arg1] += arg2
                                                                    emit Transfer(arg2, msg.sender, arg1);
                                                                    require ext_code.size(dividendTrackerAddress)
                                                                    call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                                         gas gas_remaining wei
                                                                        args msg.sender, balanceOf[address(msg.sender)]
                                                                    mem[0] = arg1
                                                                    mem[32] = 0
                                                                    require ext_code.size(dividendTrackerAddress)
                                                                    call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                                         gas gas_remaining wei
                                                                        args address(arg1), balanceOf[address(arg1)]
                                                                    if not ext_call.success:
                                                                        if not ext_call.success:
                                                                            if not stor7:
                                                                                call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                     gas gas_remaining wei
                                                                                    args gasForProcessing
                                                                                mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                                if ext_call.success:
                                                                                    _84156 = mem[64]
                                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                                    require return_data.size >= 96
                                                                                    _86240 = mem[_84156 + 32]
                                                                                    _86241 = mem[_84156 + 64]
                                                                                    mem[mem[64]] = mem[_84156]
                                                                                    mem[mem[64] + 64] = _86241
                                                                                    mem[mem[64] + 96] = gasForProcessing
                                                                                    emit ProcessedDividendTracker(mem[mem[64]], _86240, _86241, gasForProcessing, 1, tx.origin);
                                                                        else:
                                                                            if not stor7:
                                                                                call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                     gas gas_remaining wei
                                                                                    args gasForProcessing
                                                                                mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                                if ext_call.success:
                                                                                    _85045 = mem[64]
                                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                                    require return_data.size >= 96
                                                                                    _87415 = mem[_85045 + 32]
                                                                                    _87416 = mem[_85045 + 64]
                                                                                    mem[mem[64]] = mem[_85045]
                                                                                    mem[mem[64] + 64] = _87416
                                                                                    mem[mem[64] + 96] = gasForProcessing
                                                                                    emit ProcessedDividendTracker(mem[mem[64]], _87415, _87416, gasForProcessing, 1, tx.origin);
                                                                    else:
                                                                        if not ext_call.success:
                                                                            if not stor7:
                                                                                call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                     gas gas_remaining wei
                                                                                    args gasForProcessing
                                                                                mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                                if ext_call.success:
                                                                                    _85046 = mem[64]
                                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                                    require return_data.size >= 96
                                                                                    _87419 = mem[_85046 + 32]
                                                                                    _87420 = mem[_85046 + 64]
                                                                                    mem[mem[64]] = mem[_85046]
                                                                                    mem[mem[64] + 64] = _87420
                                                                                    mem[mem[64] + 96] = gasForProcessing
                                                                                    emit ProcessedDividendTracker(mem[mem[64]], _87419, _87420, gasForProcessing, 1, tx.origin);
                                                                        else:
                                                                            if not stor7:
                                                                                call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                     gas gas_remaining wei
                                                                                    args gasForProcessing
                                                                                mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                                if ext_call.success:
                                                                                    _86244 = mem[64]
                                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                                    require return_data.size >= 96
                                                                                    _88289 = mem[_86244 + 32]
                                                                                    _88290 = mem[_86244 + 64]
                                                                                    mem[mem[64]] = mem[_86244]
                                                                                    mem[mem[64] + 64] = _88290
                                                                                    mem[mem[64] + 96] = gasForProcessing
                                                                                    emit ProcessedDividendTracker(mem[mem[64]], _88289, _88290, gasForProcessing, 1, tx.origin);
                                                                else:
                                                                    if arg2 and totalFees > -1 / arg2:
                                                                        revert with 'NH{q', 17
                                                                    if not stor22[address(arg1)]:
                                                                        if arg2 < arg2 * totalFees / 100:
                                                                            revert with 'NH{q', 17
                                                                        if not msg.sender:
                                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                                        if not this.address:
                                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                                        if balanceOf[address(msg.sender)] < arg2 * totalFees / 100:
                                                                            revert with 0, 'ERC20: transfer amount exceeds balance'
                                                                        balanceOf[address(msg.sender)] -= arg2 * totalFees / 100
                                                                        if balanceOf[this.address] > !(arg2 * totalFees / 100):
                                                                            revert with 'NH{q', 17
                                                                        balanceOf[this.address] += arg2 * totalFees / 100
                                                                        emit Transfer((arg2 * totalFees / 100), msg.sender, this.address);
                                                                        if not msg.sender:
                                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                                        if not arg1:
                                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                                        if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100):
                                                                            revert with 0, 'ERC20: transfer amount exceeds balance'
                                                                        balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100)
                                                                        if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100)):
                                                                            revert with 'NH{q', 17
                                                                        balanceOf[arg1] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100)
                                                                        emit Transfer((arg2 - (arg2 * totalFees / 100)), msg.sender, arg1);
                                                                        require ext_code.size(dividendTrackerAddress)
                                                                        call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                                             gas gas_remaining wei
                                                                            args msg.sender, balanceOf[address(msg.sender)]
                                                                        mem[0] = arg1
                                                                        mem[32] = 0
                                                                        require ext_code.size(dividendTrackerAddress)
                                                                        call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                                             gas gas_remaining wei
                                                                            args address(arg1), balanceOf[address(arg1)]
                                                                        if not ext_call.success:
                                                                            if not ext_call.success:
                                                                                if not stor7:
                                                                                    call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                         gas gas_remaining wei
                                                                                        args gasForProcessing
                                                                                    mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                                    if ext_call.success:
                                                                                        _93849 = mem[64]
                                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                                        require return_data.size >= 96
                                                                                        _94667 = mem[_93849 + 32]
                                                                                        _94668 = mem[_93849 + 64]
                                                                                        mem[mem[64]] = mem[_93849]
                                                                                        mem[mem[64] + 64] = _94668
                                                                                        mem[mem[64] + 96] = gasForProcessing
                                                                                        emit ProcessedDividendTracker(mem[mem[64]], _94667, _94668, gasForProcessing, 1, tx.origin);
                                                                            else:
                                                                                if not stor7:
                                                                                    call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                         gas gas_remaining wei
                                                                                        args gasForProcessing
                                                                                    mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                                    if ext_call.success:
                                                                                        _94257 = mem[64]
                                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                                        require return_data.size >= 96
                                                                                        _95030 = mem[_94257 + 32]
                                                                                        _95031 = mem[_94257 + 64]
                                                                                        mem[mem[64]] = mem[_94257]
                                                                                        mem[mem[64] + 64] = _95031
                                                                                        mem[mem[64] + 96] = gasForProcessing
                                                                                        emit ProcessedDividendTracker(mem[mem[64]], _95030, _95031, gasForProcessing, 1, tx.origin);
                                                                        else:
                                                                            if not ext_call.success:
                                                                                if not stor7:
                                                                                    call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                         gas gas_remaining wei
                                                                                        args gasForProcessing
                                                                                    mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                                    if ext_call.success:
                                                                                        _94258 = mem[64]
                                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                                        require return_data.size >= 96
                                                                                        _95034 = mem[_94258 + 32]
                                                                                        _95035 = mem[_94258 + 64]
                                                                                        mem[mem[64]] = mem[_94258]
                                                                                        mem[mem[64] + 64] = _95035
                                                                                        mem[mem[64] + 96] = gasForProcessing
                                                                                        emit ProcessedDividendTracker(mem[mem[64]], _95034, _95035, gasForProcessing, 1, tx.origin);
                                                                            else:
                                                                                if not stor7:
                                                                                    call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                         gas gas_remaining wei
                                                                                        args gasForProcessing
                                                                                    mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                                    if ext_call.success:
                                                                                        _94671 = mem[64]
                                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                                        require return_data.size >= 96
                                                                                        _95328 = mem[_94671 + 32]
                                                                                        _95329 = mem[_94671 + 64]
                                                                                        mem[mem[64]] = mem[_94671]
                                                                                        mem[mem[64] + 64] = _95329
                                                                                        mem[mem[64] + 96] = gasForProcessing
                                                                                        emit ProcessedDividendTracker(mem[mem[64]], _95328, _95329, gasForProcessing, 1, tx.origin);
                                                                    else:
                                                                        if arg2 and sellFeeIncreaseFactor > -1 / arg2:
                                                                            revert with 'NH{q', 17
                                                                        if arg2 * totalFees / 100 > !(arg2 * sellFeeIncreaseFactor / 100):
                                                                            revert with 'NH{q', 17
                                                                        if arg2 < (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100):
                                                                            revert with 'NH{q', 17
                                                                        if not msg.sender:
                                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                                        if not this.address:
                                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                                        if balanceOf[address(msg.sender)] < (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100):
                                                                            revert with 0, 'ERC20: transfer amount exceeds balance'
                                                                        balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)
                                                                        if balanceOf[this.address] > !((arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)):
                                                                            revert with 'NH{q', 17
                                                                        balanceOf[this.address] = balanceOf[this.address] + (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)
                                                                        emit Transfer(((arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)), msg.sender, this.address);
                                                                        if not msg.sender:
                                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                                        if not arg1:
                                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                                        if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100):
                                                                            revert with 0, 'ERC20: transfer amount exceeds balance'
                                                                        balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)
                                                                        if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)):
                                                                            revert with 'NH{q', 17
                                                                        balanceOf[arg1] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)
                                                                        emit Transfer((arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)), msg.sender, arg1);
                                                                        require ext_code.size(dividendTrackerAddress)
                                                                        call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                                             gas gas_remaining wei
                                                                            args msg.sender, balanceOf[address(msg.sender)]
                                                                        mem[0] = arg1
                                                                        mem[32] = 0
                                                                        require ext_code.size(dividendTrackerAddress)
                                                                        call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                                             gas gas_remaining wei
                                                                            args address(arg1), balanceOf[address(arg1)]
                                                                        if not ext_call.success:
                                                                            if not ext_call.success:
                                                                                if not stor7:
                                                                                    call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                         gas gas_remaining wei
                                                                                        args gasForProcessing
                                                                                    mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                                    if ext_call.success:
                                                                                        _97226 = mem[64]
                                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                                        require return_data.size >= 96
                                                                                        _97886 = mem[_97226 + 32]
                                                                                        _97887 = mem[_97226 + 64]
                                                                                        mem[mem[64]] = mem[_97226]
                                                                                        mem[mem[64] + 64] = _97887
                                                                                        mem[mem[64] + 96] = gasForProcessing
                                                                                        emit ProcessedDividendTracker(mem[mem[64]], _97886, _97887, gasForProcessing, 1, tx.origin);
                                                                            else:
                                                                                if not stor7:
                                                                                    call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                         gas gas_remaining wei
                                                                                        args gasForProcessing
                                                                                    mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                                    if ext_call.success:
                                                                                        _97511 = mem[64]
                                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                                        require return_data.size >= 96
                                                                                        _98224 = mem[_97511 + 32]
                                                                                        _98225 = mem[_97511 + 64]
                                                                                        mem[mem[64]] = mem[_97511]
                                                                                        mem[mem[64] + 64] = _98225
                                                                                        mem[mem[64] + 96] = gasForProcessing
                                                                                        emit ProcessedDividendTracker(mem[mem[64]], _98224, _98225, gasForProcessing, 1, tx.origin);
                                                                        else:
                                                                            if not ext_call.success:
                                                                                if not stor7:
                                                                                    call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                         gas gas_remaining wei
                                                                                        args gasForProcessing
                                                                                    mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                                    if ext_call.success:
                                                                                        _97512 = mem[64]
                                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                                        require return_data.size >= 96
                                                                                        _98228 = mem[_97512 + 32]
                                                                                        _98229 = mem[_97512 + 64]
                                                                                        mem[mem[64]] = mem[_97512]
                                                                                        mem[mem[64] + 64] = _98229
                                                                                        mem[mem[64] + 96] = gasForProcessing
                                                                                        emit ProcessedDividendTracker(mem[mem[64]], _98228, _98229, gasForProcessing, 1, tx.origin);
                                                                            else:
                                                                                if not stor7:
                                                                                    call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                         gas gas_remaining wei
                                                                                        args gasForProcessing
                                                                                    mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                                    if ext_call.success:
                                                                                        _97890 = mem[64]
                                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                                        require return_data.size >= 96
                                                                                        _98477 = mem[_97890 + 32]
                                                                                        _98478 = mem[_97890 + 64]
                                                                                        mem[mem[64]] = mem[_97890]
                                                                                        mem[mem[64] + 64] = _98478
                                                                                        mem[mem[64] + 96] = gasForProcessing
                                                                                        emit ProcessedDividendTracker(mem[mem[64]], _98477, _98478, gasForProcessing, 1, tx.origin);
                        else:
                            if balanceOf[address(arg1)] > !arg2:
                                revert with 'NH{q', 17
                            if balanceOf[address(arg1)] + arg2 > maxWalletBalance:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'Recipient balance is exceeding maxWalletBalance'
                            if balanceOf[this.address] < swapTokensAtAmount:
                                if stor21[address(msg.sender)]:
                                    if not msg.sender:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                    if not arg1:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                    if balanceOf[address(msg.sender)] < arg2:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                    balanceOf[address(msg.sender)] -= arg2
                                    if balanceOf[arg1] > !arg2:
                                        revert with 'NH{q', 17
                                    balanceOf[arg1] += arg2
                                    emit Transfer(arg2, msg.sender, arg1);
                                else:
                                    if stor21[address(arg1)]:
                                        if not msg.sender:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                        if not arg1:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                        if balanceOf[address(msg.sender)] < arg2:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                        balanceOf[address(msg.sender)] -= arg2
                                        if balanceOf[arg1] > !arg2:
                                            revert with 'NH{q', 17
                                        balanceOf[arg1] += arg2
                                        emit Transfer(arg2, msg.sender, arg1);
                                    else:
                                        if stor7:
                                            if not msg.sender:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                            if not arg1:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                            if balanceOf[address(msg.sender)] < arg2:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                            balanceOf[address(msg.sender)] -= arg2
                                            if balanceOf[arg1] > !arg2:
                                                revert with 'NH{q', 17
                                            balanceOf[arg1] += arg2
                                            emit Transfer(arg2, msg.sender, arg1);
                                        else:
                                            if arg2 and totalFees > -1 / arg2:
                                                revert with 'NH{q', 17
                                            if not stor22[address(arg1)]:
                                                if arg2 < arg2 * totalFees / 100:
                                                    revert with 'NH{q', 17
                                                if not msg.sender:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                if not this.address:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                if balanceOf[address(msg.sender)] < arg2 * totalFees / 100:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                balanceOf[address(msg.sender)] -= arg2 * totalFees / 100
                                                if balanceOf[this.address] > !(arg2 * totalFees / 100):
                                                    revert with 'NH{q', 17
                                                balanceOf[this.address] += arg2 * totalFees / 100
                                                emit Transfer((arg2 * totalFees / 100), msg.sender, this.address);
                                                if not msg.sender:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                if not arg1:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100):
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100)
                                                if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100)):
                                                    revert with 'NH{q', 17
                                                balanceOf[arg1] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100)
                                                emit Transfer((arg2 - (arg2 * totalFees / 100)), msg.sender, arg1);
                                            else:
                                                if arg2 and sellFeeIncreaseFactor > -1 / arg2:
                                                    revert with 'NH{q', 17
                                                if arg2 * totalFees / 100 > !(arg2 * sellFeeIncreaseFactor / 100):
                                                    revert with 'NH{q', 17
                                                if arg2 < (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100):
                                                    revert with 'NH{q', 17
                                                if not msg.sender:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                if not this.address:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                if balanceOf[address(msg.sender)] < (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100):
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)
                                                if balanceOf[this.address] > !((arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)):
                                                    revert with 'NH{q', 17
                                                balanceOf[this.address] = balanceOf[this.address] + (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)
                                                emit Transfer(((arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)), msg.sender, this.address);
                                                if not msg.sender:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                if not arg1:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100):
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)
                                                if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)):
                                                    revert with 'NH{q', 17
                                                balanceOf[arg1] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)
                                                emit Transfer((arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)), msg.sender, arg1);
                                require ext_code.size(dividendTrackerAddress)
                                call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                     gas gas_remaining wei
                                    args msg.sender, balanceOf[address(msg.sender)]
                                require ext_code.size(dividendTrackerAddress)
                                call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                     gas gas_remaining wei
                                    args address(arg1), balanceOf[address(arg1)]
                                if not stor7:
                                    call dividendTrackerAddress.process(uint256 arg1) with:
                                         gas gas_remaining wei
                                        args gasForProcessing
                                    if ext_call.success:
                                        require return_data.size >= 96
                                        emit ProcessedDividendTracker(ext_call.return_data[0], ext_call.return_data[32], ext_call.return_data[64], gasForProcessing, 1, tx.origin);
                            else:
                                if stor7:
                                    if stor21[address(msg.sender)]:
                                        if not msg.sender:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                        if not arg1:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                        if balanceOf[address(msg.sender)] < arg2:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                        balanceOf[address(msg.sender)] -= arg2
                                        if balanceOf[arg1] > !arg2:
                                            revert with 'NH{q', 17
                                        balanceOf[arg1] += arg2
                                        emit Transfer(arg2, msg.sender, arg1);
                                    else:
                                        if stor21[address(arg1)]:
                                            if not msg.sender:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                            if not arg1:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                            if balanceOf[address(msg.sender)] < arg2:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                            balanceOf[address(msg.sender)] -= arg2
                                            if balanceOf[arg1] > !arg2:
                                                revert with 'NH{q', 17
                                            balanceOf[arg1] += arg2
                                            emit Transfer(arg2, msg.sender, arg1);
                                        else:
                                            if stor7:
                                                if not msg.sender:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                if not arg1:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                if balanceOf[address(msg.sender)] < arg2:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                balanceOf[address(msg.sender)] -= arg2
                                                if balanceOf[arg1] > !arg2:
                                                    revert with 'NH{q', 17
                                                balanceOf[arg1] += arg2
                                                emit Transfer(arg2, msg.sender, arg1);
                                            else:
                                                if arg2 and totalFees > -1 / arg2:
                                                    revert with 'NH{q', 17
                                                if not stor22[address(arg1)]:
                                                    if arg2 < arg2 * totalFees / 100:
                                                        revert with 'NH{q', 17
                                                    if not msg.sender:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                    if not this.address:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                    if balanceOf[address(msg.sender)] < arg2 * totalFees / 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                    balanceOf[address(msg.sender)] -= arg2 * totalFees / 100
                                                    if balanceOf[this.address] > !(arg2 * totalFees / 100):
                                                        revert with 'NH{q', 17
                                                    balanceOf[this.address] += arg2 * totalFees / 100
                                                    emit Transfer((arg2 * totalFees / 100), msg.sender, this.address);
                                                    if not msg.sender:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                    if not arg1:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                    if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100):
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                    balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100)
                                                    if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100)):
                                                        revert with 'NH{q', 17
                                                    balanceOf[arg1] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100)
                                                    emit Transfer((arg2 - (arg2 * totalFees / 100)), msg.sender, arg1);
                                                else:
                                                    if arg2 and sellFeeIncreaseFactor > -1 / arg2:
                                                        revert with 'NH{q', 17
                                                    if arg2 * totalFees / 100 > !(arg2 * sellFeeIncreaseFactor / 100):
                                                        revert with 'NH{q', 17
                                                    if arg2 < (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100):
                                                        revert with 'NH{q', 17
                                                    if not msg.sender:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                    if not this.address:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                    if balanceOf[address(msg.sender)] < (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100):
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                    balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)
                                                    if balanceOf[this.address] > !((arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)):
                                                        revert with 'NH{q', 17
                                                    balanceOf[this.address] = balanceOf[this.address] + (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)
                                                    emit Transfer(((arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)), msg.sender, this.address);
                                                    if not msg.sender:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                    if not arg1:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                    if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100):
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                    balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)
                                                    if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)):
                                                        revert with 'NH{q', 17
                                                    balanceOf[arg1] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)
                                                    emit Transfer((arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)), msg.sender, arg1);
                                    require ext_code.size(dividendTrackerAddress)
                                    call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                         gas gas_remaining wei
                                        args msg.sender, balanceOf[address(msg.sender)]
                                    require ext_code.size(dividendTrackerAddress)
                                    call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                         gas gas_remaining wei
                                        args address(arg1), balanceOf[address(arg1)]
                                    if not stor7:
                                        call dividendTrackerAddress.process(uint256 arg1) with:
                                             gas gas_remaining wei
                                            args gasForProcessing
                                        if ext_call.success:
                                            require return_data.size >= 96
                                            emit ProcessedDividendTracker(ext_call.return_data[0], ext_call.return_data[32], ext_call.return_data[64], gasForProcessing, 1, tx.origin);
                                else:
                                    if stor22[address(msg.sender)]:
                                        if stor21[address(msg.sender)]:
                                            if not msg.sender:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                            if not arg1:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                            if balanceOf[address(msg.sender)] < arg2:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                            balanceOf[address(msg.sender)] -= arg2
                                            if balanceOf[arg1] > !arg2:
                                                revert with 'NH{q', 17
                                            balanceOf[arg1] += arg2
                                            emit Transfer(arg2, msg.sender, arg1);
                                        else:
                                            if stor21[address(arg1)]:
                                                if not msg.sender:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                if not arg1:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                if balanceOf[address(msg.sender)] < arg2:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                balanceOf[address(msg.sender)] -= arg2
                                                if balanceOf[arg1] > !arg2:
                                                    revert with 'NH{q', 17
                                                balanceOf[arg1] += arg2
                                                emit Transfer(arg2, msg.sender, arg1);
                                            else:
                                                if stor7:
                                                    if not msg.sender:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                    if not arg1:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                    if balanceOf[address(msg.sender)] < arg2:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                    balanceOf[address(msg.sender)] -= arg2
                                                    if balanceOf[arg1] > !arg2:
                                                        revert with 'NH{q', 17
                                                    balanceOf[arg1] += arg2
                                                    emit Transfer(arg2, msg.sender, arg1);
                                                else:
                                                    if arg2 and totalFees > -1 / arg2:
                                                        revert with 'NH{q', 17
                                                    if not stor22[address(arg1)]:
                                                        if arg2 < arg2 * totalFees / 100:
                                                            revert with 'NH{q', 17
                                                        if not msg.sender:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                        if not this.address:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                        if balanceOf[address(msg.sender)] < arg2 * totalFees / 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                        balanceOf[address(msg.sender)] -= arg2 * totalFees / 100
                                                        if balanceOf[this.address] > !(arg2 * totalFees / 100):
                                                            revert with 'NH{q', 17
                                                        balanceOf[this.address] += arg2 * totalFees / 100
                                                        emit Transfer((arg2 * totalFees / 100), msg.sender, this.address);
                                                        if not msg.sender:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                        if not arg1:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                        if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100):
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                        balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100)
                                                        if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100)):
                                                            revert with 'NH{q', 17
                                                        balanceOf[arg1] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100)
                                                        emit Transfer((arg2 - (arg2 * totalFees / 100)), msg.sender, arg1);
                                                    else:
                                                        if arg2 and sellFeeIncreaseFactor > -1 / arg2:
                                                            revert with 'NH{q', 17
                                                        if arg2 * totalFees / 100 > !(arg2 * sellFeeIncreaseFactor / 100):
                                                            revert with 'NH{q', 17
                                                        if arg2 < (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100):
                                                            revert with 'NH{q', 17
                                                        if not msg.sender:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                        if not this.address:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                        if balanceOf[address(msg.sender)] < (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100):
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                        balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)
                                                        if balanceOf[this.address] > !((arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)):
                                                            revert with 'NH{q', 17
                                                        balanceOf[this.address] = balanceOf[this.address] + (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)
                                                        emit Transfer(((arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)), msg.sender, this.address);
                                                        if not msg.sender:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                        if not arg1:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                        if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100):
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                        balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)
                                                        if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)):
                                                            revert with 'NH{q', 17
                                                        balanceOf[arg1] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)
                                                        emit Transfer((arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)), msg.sender, arg1);
                                        require ext_code.size(dividendTrackerAddress)
                                        call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                             gas gas_remaining wei
                                            args msg.sender, balanceOf[address(msg.sender)]
                                        require ext_code.size(dividendTrackerAddress)
                                        call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                             gas gas_remaining wei
                                            args address(arg1), balanceOf[address(arg1)]
                                        if not stor7:
                                            call dividendTrackerAddress.process(uint256 arg1) with:
                                                 gas gas_remaining wei
                                                args gasForProcessing
                                            if ext_call.success:
                                                require return_data.size >= 96
                                                emit ProcessedDividendTracker(ext_call.return_data[0], ext_call.return_data[32], ext_call.return_data[64], gasForProcessing, 1, tx.origin);
                                    else:
                                        if owner == msg.sender:
                                            if stor21[address(msg.sender)]:
                                                if not msg.sender:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                if not arg1:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                if balanceOf[address(msg.sender)] < arg2:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                balanceOf[address(msg.sender)] -= arg2
                                                if balanceOf[arg1] > !arg2:
                                                    revert with 'NH{q', 17
                                                balanceOf[arg1] += arg2
                                                emit Transfer(arg2, msg.sender, arg1);
                                            else:
                                                if stor21[address(arg1)]:
                                                    if not msg.sender:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                    if not arg1:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                    if balanceOf[address(msg.sender)] < arg2:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                    balanceOf[address(msg.sender)] -= arg2
                                                    if balanceOf[arg1] > !arg2:
                                                        revert with 'NH{q', 17
                                                    balanceOf[arg1] += arg2
                                                    emit Transfer(arg2, msg.sender, arg1);
                                                else:
                                                    if stor7:
                                                        if not msg.sender:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                        if not arg1:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                        if balanceOf[address(msg.sender)] < arg2:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                        balanceOf[address(msg.sender)] -= arg2
                                                        if balanceOf[arg1] > !arg2:
                                                            revert with 'NH{q', 17
                                                        balanceOf[arg1] += arg2
                                                        emit Transfer(arg2, msg.sender, arg1);
                                                    else:
                                                        if arg2 and totalFees > -1 / arg2:
                                                            revert with 'NH{q', 17
                                                        if not stor22[address(arg1)]:
                                                            if arg2 < arg2 * totalFees / 100:
                                                                revert with 'NH{q', 17
                                                            if not msg.sender:
                                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                            if not this.address:
                                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                            if balanceOf[address(msg.sender)] < arg2 * totalFees / 100:
                                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                            balanceOf[address(msg.sender)] -= arg2 * totalFees / 100
                                                            if balanceOf[this.address] > !(arg2 * totalFees / 100):
                                                                revert with 'NH{q', 17
                                                            balanceOf[this.address] += arg2 * totalFees / 100
                                                            emit Transfer((arg2 * totalFees / 100), msg.sender, this.address);
                                                            if not msg.sender:
                                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                            if not arg1:
                                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                            if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100):
                                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                            balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100)
                                                            if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100)):
                                                                revert with 'NH{q', 17
                                                            balanceOf[arg1] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100)
                                                            emit Transfer((arg2 - (arg2 * totalFees / 100)), msg.sender, arg1);
                                                        else:
                                                            if arg2 and sellFeeIncreaseFactor > -1 / arg2:
                                                                revert with 'NH{q', 17
                                                            if arg2 * totalFees / 100 > !(arg2 * sellFeeIncreaseFactor / 100):
                                                                revert with 'NH{q', 17
                                                            if arg2 < (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100):
                                                                revert with 'NH{q', 17
                                                            if not msg.sender:
                                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                            if not this.address:
                                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                            if balanceOf[address(msg.sender)] < (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100):
                                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                            balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)
                                                            if balanceOf[this.address] > !((arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)):
                                                                revert with 'NH{q', 17
                                                            balanceOf[this.address] = balanceOf[this.address] + (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)
                                                            emit Transfer(((arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)), msg.sender, this.address);
                                                            if not msg.sender:
                                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                            if not arg1:
                                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                            if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100):
                                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                            balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)
                                                            if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)):
                                                                revert with 'NH{q', 17
                                                            balanceOf[arg1] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)
                                                            emit Transfer((arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)), msg.sender, arg1);
                                            require ext_code.size(dividendTrackerAddress)
                                            call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args msg.sender, balanceOf[address(msg.sender)]
                                            require ext_code.size(dividendTrackerAddress)
                                            call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args address(arg1), balanceOf[address(arg1)]
                                            if not stor7:
                                                call dividendTrackerAddress.process(uint256 arg1) with:
                                                     gas gas_remaining wei
                                                    args gasForProcessing
                                                if ext_call.success:
                                                    require return_data.size >= 96
                                                    emit ProcessedDividendTracker(ext_call.return_data[0], ext_call.return_data[32], ext_call.return_data[64], gasForProcessing, 1, tx.origin);
                                        else:
                                            if owner == arg1:
                                                if stor21[address(msg.sender)]:
                                                    if not msg.sender:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                    if not arg1:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                    if balanceOf[address(msg.sender)] < arg2:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                    balanceOf[address(msg.sender)] -= arg2
                                                    if balanceOf[arg1] > !arg2:
                                                        revert with 'NH{q', 17
                                                    balanceOf[arg1] += arg2
                                                    emit Transfer(arg2, msg.sender, arg1);
                                                else:
                                                    if stor21[address(arg1)]:
                                                        if not msg.sender:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                        if not arg1:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                        if balanceOf[address(msg.sender)] < arg2:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                        balanceOf[address(msg.sender)] -= arg2
                                                        if balanceOf[arg1] > !arg2:
                                                            revert with 'NH{q', 17
                                                        balanceOf[arg1] += arg2
                                                        emit Transfer(arg2, msg.sender, arg1);
                                                    else:
                                                        if stor7:
                                                            if not msg.sender:
                                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                            if not arg1:
                                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                            if balanceOf[address(msg.sender)] < arg2:
                                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                            balanceOf[address(msg.sender)] -= arg2
                                                            if balanceOf[arg1] > !arg2:
                                                                revert with 'NH{q', 17
                                                            balanceOf[arg1] += arg2
                                                            emit Transfer(arg2, msg.sender, arg1);
                                                        else:
                                                            if arg2 and totalFees > -1 / arg2:
                                                                revert with 'NH{q', 17
                                                            if not stor22[address(arg1)]:
                                                                if arg2 < arg2 * totalFees / 100:
                                                                    revert with 'NH{q', 17
                                                                if not msg.sender:
                                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                                if not this.address:
                                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                                if balanceOf[address(msg.sender)] < arg2 * totalFees / 100:
                                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                                balanceOf[address(msg.sender)] -= arg2 * totalFees / 100
                                                                if balanceOf[this.address] > !(arg2 * totalFees / 100):
                                                                    revert with 'NH{q', 17
                                                                balanceOf[this.address] += arg2 * totalFees / 100
                                                                emit Transfer((arg2 * totalFees / 100), msg.sender, this.address);
                                                                if not msg.sender:
                                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                                if not arg1:
                                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                                if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100):
                                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                                balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100)
                                                                if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100)):
                                                                    revert with 'NH{q', 17
                                                                balanceOf[arg1] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100)
                                                                emit Transfer((arg2 - (arg2 * totalFees / 100)), msg.sender, arg1);
                                                            else:
                                                                if arg2 and sellFeeIncreaseFactor > -1 / arg2:
                                                                    revert with 'NH{q', 17
                                                                if arg2 * totalFees / 100 > !(arg2 * sellFeeIncreaseFactor / 100):
                                                                    revert with 'NH{q', 17
                                                                if arg2 < (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100):
                                                                    revert with 'NH{q', 17
                                                                if not msg.sender:
                                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                                if not this.address:
                                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                                if balanceOf[address(msg.sender)] < (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100):
                                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                                balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)
                                                                if balanceOf[this.address] > !((arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)):
                                                                    revert with 'NH{q', 17
                                                                balanceOf[this.address] = balanceOf[this.address] + (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)
                                                                emit Transfer(((arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)), msg.sender, this.address);
                                                                if not msg.sender:
                                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                                if not arg1:
                                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                                if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100):
                                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
                                                                balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)
                                                                if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)):
                                                                    revert with 'NH{q', 17
                                                                balanceOf[arg1] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)
                                                                emit Transfer((arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)), msg.sender, arg1);
                                                require ext_code.size(dividendTrackerAddress)
                                                call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args msg.sender, balanceOf[address(msg.sender)]
                                                require ext_code.size(dividendTrackerAddress)
                                                call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(arg1), balanceOf[address(arg1)]
                                                if not stor7:
                                                    call dividendTrackerAddress.process(uint256 arg1) with:
                                                         gas gas_remaining wei
                                                        args gasForProcessing
                                                    if ext_call.success:
                                                        require return_data.size >= 96
                                                        emit ProcessedDividendTracker(ext_call.return_data[0], ext_call.return_data[32], ext_call.return_data[64], gasForProcessing, 1, tx.origin);
                                            else:
                                                stor7 = 1
                                                if balanceOf[this.address] and marketingFee > -1 / balanceOf[this.address]:
                                                    revert with 'NH{q', 17
                                                if not totalFees:
                                                    revert with 'NH{q', 18
                                                mem[96] = 2
                                                mem[128] = this.address
                                                staticcall uniswapV2RouterAddress.WETH() with:
                                                        gas gas_remaining wei
                                                mem[192] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                mem[160] = ext_call.return_data[12 len 20]
                                                if not this.address:
                                                    revert with 0, 'ERC20: approve from the zero address'
                                                if not uniswapV2RouterAddress:
                                                    revert with 0, 'ERC20: approve to the zero address'
                                                allowance[address(this.address)][stor6].field_0 = balanceOf[this.address] * marketingFee / totalFees
                                                emit Approval((balanceOf[this.address] * marketingFee / totalFees), this.address, uniswapV2RouterAddress);
                                                mem[ceil32(return_data.size) + 192] = 0x791ac94700000000000000000000000000000000000000000000000000000000
                                                mem[ceil32(return_data.size) + 196] = balanceOf[this.address] * marketingFee / totalFees
                                                mem[ceil32(return_data.size) + 356] = 2
                                                idx = 0
                                                s = ceil32(return_data.size) + 388
                                                t = 128
                                                while idx < 2:
                                                    mem[s] = mem[t + 12 len 20]
                                                    idx = idx + 1
                                                    s = s + 32
                                                    t = t + 32
                                                    continue 
                                                mem[ceil32(return_data.size) + 292] = this.address
                                                mem[ceil32(return_data.size) + 324] = block.timestamp
                                                require ext_code.size(uniswapV2RouterAddress)
                                                call uniswapV2RouterAddress.swapExactTokensForETHSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                     gas gas_remaining wei
                                                    args balanceOf[this.address] * marketingFee / totalFees, 0, 160, address(this.address), block.timestamp, 2, mem[ceil32(return_data.size) + 388 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                call _marketingWalletAddress with:
                                                   value eth.balance(this.address) wei
                                                     gas 2300 * is_zero(value) wei
                                                if balanceOf[this.address] and liquidityFee > -1 / balanceOf[this.address]:
                                                    revert with 'NH{q', 17
                                                if not totalFees:
                                                    revert with 'NH{q', 18
                                                if balanceOf[this.address] * liquidityFee / totalFees < balanceOf[this.address] * liquidityFee / totalFees / 2:
                                                    revert with 'NH{q', 17
                                                mem[ceil32(return_data.size) + 192] = 2
                                                mem[ceil32(return_data.size) + 224] = this.address
                                                staticcall uniswapV2RouterAddress.WETH() with:
                                                        gas gas_remaining wei
                                                mem[ceil32(return_data.size) + 288] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                mem[ceil32(return_data.size) + 256] = ext_call.return_data[12 len 20]
                                                if not this.address:
                                                    revert with 0, 'ERC20: approve from the zero address'
                                                if not uniswapV2RouterAddress:
                                                    revert with 0, 'ERC20: approve to the zero address'
                                                allowance[address(this.address)][stor6].field_0 = balanceOf[this.address] * liquidityFee / totalFees / 2
                                                allowance[address(this.address)][stor6].field_255 = 0
                                                emit Approval((balanceOf[this.address] * liquidityFee / totalFees / 2), this.address, uniswapV2RouterAddress);
                                                mem[(2 * ceil32(return_data.size)) + 288] = 0x791ac94700000000000000000000000000000000000000000000000000000000
                                                mem[(2 * ceil32(return_data.size)) + 292] = balanceOf[this.address] * liquidityFee / totalFees / 2
                                                mem[(2 * ceil32(return_data.size)) + 324] = 0
                                                mem[(2 * ceil32(return_data.size)) + 356] = 160
                                                mem[(2 * ceil32(return_data.size)) + 452] = 2
                                                idx = 0
                                                s = (2 * ceil32(return_data.size)) + 484
                                                t = ceil32(return_data.size) + 224
                                                while idx < mem[ceil32(return_data.size) + 192]:
                                                    mem[s] = mem[t + 12 len 20]
                                                    idx = idx + 1
                                                    s = s + 32
                                                    t = t + 32
                                                    continue 
                                                mem[(2 * ceil32(return_data.size)) + 388] = this.address
                                                mem[(2 * ceil32(return_data.size)) + 420] = block.timestamp
                                                require ext_code.size(uniswapV2RouterAddress)
                                                call uniswapV2RouterAddress.swapExactTokensForETHSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                     gas gas_remaining wei
                                                    args Mask(255, 1, balanceOf[this.address] * liquidityFee / totalFees), 0, 160, address(this.address), block.timestamp, mem[(2 * ceil32(return_data.size)) + 452 len (32 * mem[ceil32(return_data.size) + 192]) + 32]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                if eth.balance(this.address) < eth.balance(this.address):
                                                    revert with 'NH{q', 17
                                                if not this.address:
                                                    revert with 0, 'ERC20: approve from the zero address'
                                                if not uniswapV2RouterAddress:
                                                    revert with 0, 'ERC20: approve to the zero address'
                                                allowance[address(this.address)][stor6].field_0 = (balanceOf[this.address] * liquidityFee / totalFees) - (balanceOf[this.address] * liquidityFee / totalFees / 2)
                                                emit Approval(((balanceOf[this.address] * liquidityFee / totalFees) - (balanceOf[this.address] * liquidityFee / totalFees / 2)), this.address, uniswapV2RouterAddress);
                                                mem[(2 * ceil32(return_data.size)) + 292] = this.address
                                                mem[(2 * ceil32(return_data.size)) + 324] = (balanceOf[this.address] * liquidityFee / totalFees) - (balanceOf[this.address] * liquidityFee / totalFees / 2)
                                                mem[(2 * ceil32(return_data.size)) + 356] = 0
                                                mem[(2 * ceil32(return_data.size)) + 388] = 0
                                                mem[(2 * ceil32(return_data.size)) + 420] = 0
                                                mem[(2 * ceil32(return_data.size)) + 452] = block.timestamp
                                                call uniswapV2RouterAddress.addLiquidityETH(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                                     gas gas_remaining wei
                                                    args this.address, (balanceOf[this.address] * liquidityFee / totalFees) - (balanceOf[this.address] * liquidityFee / totalFees / 2), 0, 0, 0, block.timestamp
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 96
                                                emit SwapAndLiquify(Mask(255, 1, balanceOf[this.address] * liquidityFee / totalFees), 0, (balanceOf[this.address] * liquidityFee / totalFees) - (balanceOf[this.address] * liquidityFee / totalFees / 2));
                                                mem[(4 * ceil32(return_data.size)) + 288] = 2
                                                mem[(4 * ceil32(return_data.size)) + 320] = this.address
                                                staticcall uniswapV2RouterAddress.WETH() with:
                                                        gas gas_remaining wei
                                                mem[(4 * ceil32(return_data.size)) + 384] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[64] = (6 * ceil32(return_data.size)) + 384
                                                require return_data.size >= 32
                                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                mem[(4 * ceil32(return_data.size)) + 352] = ext_call.return_data[12 len 20]
                                                if not this.address:
                                                    revert with 0, 'ERC20: approve from the zero address'
                                                if not uniswapV2RouterAddress:
                                                    revert with 0, 'ERC20: approve to the zero address'
                                                mem[0] = uniswapV2RouterAddress
                                                mem[32] = sha3(address(this.address), 1)
                                                allowance[address(this.address)][stor6].field_0 = balanceOf[this.address]
                                                emit Approval(balanceOf[this.address], this.address, uniswapV2RouterAddress);
                                                mem[(6 * ceil32(return_data.size)) + 384] = 0x791ac94700000000000000000000000000000000000000000000000000000000
                                                mem[(6 * ceil32(return_data.size)) + 388] = balanceOf[this.address]
                                                mem[(6 * ceil32(return_data.size)) + 420] = 0
                                                mem[(6 * ceil32(return_data.size)) + 452] = 160
                                                mem[(6 * ceil32(return_data.size)) + 548] = 2
                                                idx = 0
                                                s = (6 * ceil32(return_data.size)) + 580
                                                t = (4 * ceil32(return_data.size)) + 320
                                                while idx < mem[(4 * ceil32(return_data.size)) + 288]:
                                                    mem[s] = mem[t + 12 len 20]
                                                    idx = idx + 1
                                                    s = s + 32
                                                    t = t + 32
                                                    continue 
                                                mem[(6 * ceil32(return_data.size)) + 484] = this.address
                                                mem[(6 * ceil32(return_data.size)) + 516] = block.timestamp
                                                require ext_code.size(uniswapV2RouterAddress)
                                                call uniswapV2RouterAddress.mem[mem[64] len 4] with:
                                                     gas gas_remaining wei
                                                    args mem[mem[64] + 4 len (6 * ceil32(return_data.size)) + (32 * mem[(4 * ceil32(return_data.size)) + 288]) + -mem[64] + 576]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                call dividendTrackerAddress with:
                                                   value eth.balance(this.address) wei
                                                     gas gas_remaining wei
                                                if not return_data.size:
                                                    if not ext_call.success:
                                                        stor7 = 0
                                                        if stor21[address(msg.sender)]:
                                                            if not msg.sender:
                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                            if not arg1:
                                                                revert with 0, 'ERC20: transfer to the zero address'
                                                            if balanceOf[address(msg.sender)] < arg2:
                                                                revert with 0, 'ERC20: transfer amount exceeds balance'
                                                            balanceOf[address(msg.sender)] -= arg2
                                                            if balanceOf[arg1] > !arg2:
                                                                revert with 'NH{q', 17
                                                            balanceOf[arg1] += arg2
                                                            emit Transfer(arg2, msg.sender, arg1);
                                                            require ext_code.size(dividendTrackerAddress)
                                                            call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                                 gas gas_remaining wei
                                                                args msg.sender, balanceOf[address(msg.sender)]
                                                            mem[0] = arg1
                                                            mem[32] = 0
                                                            require ext_code.size(dividendTrackerAddress)
                                                            call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                                 gas gas_remaining wei
                                                                args address(arg1), balanceOf[address(arg1)]
                                                            if not ext_call.success:
                                                                if not ext_call.success:
                                                                    if not stor7:
                                                                        call dividendTrackerAddress.process(uint256 arg1) with:
                                                                             gas gas_remaining wei
                                                                            args gasForProcessing
                                                                        mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                        if ext_call.success:
                                                                            _83515 = mem[64]
                                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                                            require return_data.size >= 96
                                                                            _85057 = mem[_83515 + 32]
                                                                            _85058 = mem[_83515 + 64]
                                                                            mem[mem[64]] = mem[_83515]
                                                                            mem[mem[64] + 64] = _85058
                                                                            mem[mem[64] + 96] = gasForProcessing
                                                                            emit ProcessedDividendTracker(mem[mem[64]], _85057, _85058, gasForProcessing, 1, tx.origin);
                                                                else:
                                                                    if not stor7:
                                                                        call dividendTrackerAddress.process(uint256 arg1) with:
                                                                             gas gas_remaining wei
                                                                            args gasForProcessing
                                                                        mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                        if ext_call.success:
                                                                            _84164 = mem[64]
                                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                                            require return_data.size >= 96
                                                                            _86255 = mem[_84164 + 32]
                                                                            _86256 = mem[_84164 + 64]
                                                                            mem[mem[64]] = mem[_84164]
                                                                            mem[mem[64] + 64] = _86256
                                                                            mem[mem[64] + 96] = gasForProcessing
                                                                            emit ProcessedDividendTracker(mem[mem[64]], _86255, _86256, gasForProcessing, 1, tx.origin);
                                                            else:
                                                                if not ext_call.success:
                                                                    if not stor7:
                                                                        call dividendTrackerAddress.process(uint256 arg1) with:
                                                                             gas gas_remaining wei
                                                                            args gasForProcessing
                                                                        mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                        if ext_call.success:
                                                                            _84165 = mem[64]
                                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                                            require return_data.size >= 96
                                                                            _86259 = mem[_84165 + 32]
                                                                            _86260 = mem[_84165 + 64]
                                                                            mem[mem[64]] = mem[_84165]
                                                                            mem[mem[64] + 64] = _86260
                                                                            mem[mem[64] + 96] = gasForProcessing
                                                                            emit ProcessedDividendTracker(mem[mem[64]], _86259, _86260, gasForProcessing, 1, tx.origin);
                                                                else:
                                                                    if not stor7:
                                                                        call dividendTrackerAddress.process(uint256 arg1) with:
                                                                             gas gas_remaining wei
                                                                            args gasForProcessing
                                                                        mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                        if ext_call.success:
                                                                            _85061 = mem[64]
                                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                                            require return_data.size >= 96
                                                                            _87436 = mem[_85061 + 32]
                                                                            _87437 = mem[_85061 + 64]
                                                                            mem[mem[64]] = mem[_85061]
                                                                            mem[mem[64] + 64] = _87437
                                                                            mem[mem[64] + 96] = gasForProcessing
                                                                            emit ProcessedDividendTracker(mem[mem[64]], _87436, _87437, gasForProcessing, 1, tx.origin);
                                                        else:
                                                            if stor21[address(arg1)]:
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                if not arg1:
                                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                                if balanceOf[address(msg.sender)] < arg2:
                                                                    revert with 0, 'ERC20: transfer amount exceeds balance'
                                                                balanceOf[address(msg.sender)] -= arg2
                                                                if balanceOf[arg1] > !arg2:
                                                                    revert with 'NH{q', 17
                                                                balanceOf[arg1] += arg2
                                                                emit Transfer(arg2, msg.sender, arg1);
                                                                require ext_code.size(dividendTrackerAddress)
                                                                call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                                     gas gas_remaining wei
                                                                    args msg.sender, balanceOf[address(msg.sender)]
                                                                mem[0] = arg1
                                                                mem[32] = 0
                                                                require ext_code.size(dividendTrackerAddress)
                                                                call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                                     gas gas_remaining wei
                                                                    args address(arg1), balanceOf[address(arg1)]
                                                                if not ext_call.success:
                                                                    if not ext_call.success:
                                                                        if not stor7:
                                                                            call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                 gas gas_remaining wei
                                                                                args gasForProcessing
                                                                            mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                            if ext_call.success:
                                                                                _84174 = mem[64]
                                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                                require return_data.size >= 96
                                                                                _86277 = mem[_84174 + 32]
                                                                                _86278 = mem[_84174 + 64]
                                                                                mem[mem[64]] = mem[_84174]
                                                                                mem[mem[64] + 64] = _86278
                                                                                mem[mem[64] + 96] = gasForProcessing
                                                                                emit ProcessedDividendTracker(mem[mem[64]], _86277, _86278, gasForProcessing, 1, tx.origin);
                                                                    else:
                                                                        if not stor7:
                                                                            call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                 gas gas_remaining wei
                                                                                args gasForProcessing
                                                                            mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                            if ext_call.success:
                                                                                _85073 = mem[64]
                                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                                require return_data.size >= 96
                                                                                _87446 = mem[_85073 + 32]
                                                                                _87447 = mem[_85073 + 64]
                                                                                mem[mem[64]] = mem[_85073]
                                                                                mem[mem[64] + 64] = _87447
                                                                                mem[mem[64] + 96] = gasForProcessing
                                                                                emit ProcessedDividendTracker(mem[mem[64]], _87446, _87447, gasForProcessing, 1, tx.origin);
                                                                else:
                                                                    if not ext_call.success:
                                                                        if not stor7:
                                                                            call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                 gas gas_remaining wei
                                                                                args gasForProcessing
                                                                            mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                            if ext_call.success:
                                                                                _85074 = mem[64]
                                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                                require return_data.size >= 96
                                                                                _87450 = mem[_85074 + 32]
                                                                                _87451 = mem[_85074 + 64]
                                                                                mem[mem[64]] = mem[_85074]
                                                                                mem[mem[64] + 64] = _87451
                                                                                mem[mem[64] + 96] = gasForProcessing
                                                                                emit ProcessedDividendTracker(mem[mem[64]], _87450, _87451, gasForProcessing, 1, tx.origin);
                                                                    else:
                                                                        if not stor7:
                                                                            call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                 gas gas_remaining wei
                                                                                args gasForProcessing
                                                                            mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                            if ext_call.success:
                                                                                _86281 = mem[64]
                                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                                require return_data.size >= 96
                                                                                _88314 = mem[_86281 + 32]
                                                                                _88315 = mem[_86281 + 64]
                                                                                mem[mem[64]] = mem[_86281]
                                                                                mem[mem[64] + 64] = _88315
                                                                                mem[mem[64] + 96] = gasForProcessing
                                                                                emit ProcessedDividendTracker(mem[mem[64]], _88314, _88315, gasForProcessing, 1, tx.origin);
                                                            else:
                                                                if stor7:
                                                                    if not msg.sender:
                                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                                    if not arg1:
                                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                                    if balanceOf[address(msg.sender)] < arg2:
                                                                        revert with 0, 'ERC20: transfer amount exceeds balance'
                                                                    balanceOf[address(msg.sender)] -= arg2
                                                                    if balanceOf[arg1] > !arg2:
                                                                        revert with 'NH{q', 17
                                                                    balanceOf[arg1] += arg2
                                                                    emit Transfer(arg2, msg.sender, arg1);
                                                                    require ext_code.size(dividendTrackerAddress)
                                                                    call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                                         gas gas_remaining wei
                                                                        args msg.sender, balanceOf[address(msg.sender)]
                                                                    mem[0] = arg1
                                                                    mem[32] = 0
                                                                    require ext_code.size(dividendTrackerAddress)
                                                                    call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                                         gas gas_remaining wei
                                                                        args address(arg1), balanceOf[address(arg1)]
                                                                    if not ext_call.success:
                                                                        if not ext_call.success:
                                                                            if not stor7:
                                                                                call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                     gas gas_remaining wei
                                                                                    args gasForProcessing
                                                                                mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                                if ext_call.success:
                                                                                    _83520 = mem[64]
                                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                                    require return_data.size >= 96
                                                                                    _85064 = mem[_83520 + 32]
                                                                                    _85065 = mem[_83520 + 64]
                                                                                    mem[mem[64]] = mem[_83520]
                                                                                    mem[mem[64] + 64] = _85065
                                                                                    mem[mem[64] + 96] = gasForProcessing
                                                                                    emit ProcessedDividendTracker(mem[mem[64]], _85064, _85065, gasForProcessing, 1, tx.origin);
                                                                        else:
                                                                            if not stor7:
                                                                                call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                     gas gas_remaining wei
                                                                                    args gasForProcessing
                                                                                mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                                if ext_call.success:
                                                                                    _84169 = mem[64]
                                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                                    require return_data.size >= 96
                                                                                    _86264 = mem[_84169 + 32]
                                                                                    _86265 = mem[_84169 + 64]
                                                                                    mem[mem[64]] = mem[_84169]
                                                                                    mem[mem[64] + 64] = _86265
                                                                                    mem[mem[64] + 96] = gasForProcessing
                                                                                    emit ProcessedDividendTracker(mem[mem[64]], _86264, _86265, gasForProcessing, 1, tx.origin);
                                                                    else:
                                                                        if not ext_call.success:
                                                                            if not stor7:
                                                                                call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                     gas gas_remaining wei
                                                                                    args gasForProcessing
                                                                                mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                                if ext_call.success:
                                                                                    _84170 = mem[64]
                                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                                    require return_data.size >= 96
                                                                                    _86268 = mem[_84170 + 32]
                                                                                    _86269 = mem[_84170 + 64]
                                                                                    mem[mem[64]] = mem[_84170]
                                                                                    mem[mem[64] + 64] = _86269
                                                                                    mem[mem[64] + 96] = gasForProcessing
                                                                                    emit ProcessedDividendTracker(mem[mem[64]], _86268, _86269, gasForProcessing, 1, tx.origin);
                                                                        else:
                                                                            if not stor7:
                                                                                call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                     gas gas_remaining wei
                                                                                    args gasForProcessing
                                                                                mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                                if ext_call.success:
                                                                                    _85068 = mem[64]
                                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                                    require return_data.size >= 96
                                                                                    _87441 = mem[_85068 + 32]
                                                                                    _87442 = mem[_85068 + 64]
                                                                                    mem[mem[64]] = mem[_85068]
                                                                                    mem[mem[64] + 64] = _87442
                                                                                    mem[mem[64] + 96] = gasForProcessing
                                                                                    emit ProcessedDividendTracker(mem[mem[64]], _87441, _87442, gasForProcessing, 1, tx.origin);
                                                                else:
                                                                    if arg2 and totalFees > -1 / arg2:
                                                                        revert with 'NH{q', 17
                                                                    if not stor22[address(arg1)]:
                                                                        if arg2 < arg2 * totalFees / 100:
                                                                            revert with 'NH{q', 17
                                                                        if not msg.sender:
                                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                                        if not this.address:
                                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                                        if balanceOf[address(msg.sender)] < arg2 * totalFees / 100:
                                                                            revert with 0, 'ERC20: transfer amount exceeds balance'
                                                                        balanceOf[address(msg.sender)] -= arg2 * totalFees / 100
                                                                        if balanceOf[this.address] > !(arg2 * totalFees / 100):
                                                                            revert with 'NH{q', 17
                                                                        balanceOf[this.address] += arg2 * totalFees / 100
                                                                        emit Transfer((arg2 * totalFees / 100), msg.sender, this.address);
                                                                        if not msg.sender:
                                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                                        if not arg1:
                                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                                        if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100):
                                                                            revert with 0, 'ERC20: transfer amount exceeds balance'
                                                                        balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100)
                                                                        if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100)):
                                                                            revert with 'NH{q', 17
                                                                        balanceOf[arg1] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100)
                                                                        emit Transfer((arg2 - (arg2 * totalFees / 100)), msg.sender, arg1);
                                                                        require ext_code.size(dividendTrackerAddress)
                                                                        call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                                             gas gas_remaining wei
                                                                            args msg.sender, balanceOf[address(msg.sender)]
                                                                        mem[0] = arg1
                                                                        mem[32] = 0
                                                                        require ext_code.size(dividendTrackerAddress)
                                                                        call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                                             gas gas_remaining wei
                                                                            args address(arg1), balanceOf[address(arg1)]
                                                                        if not ext_call.success:
                                                                            if not ext_call.success:
                                                                                if not stor7:
                                                                                    call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                         gas gas_remaining wei
                                                                                        args gasForProcessing
                                                                                    mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                                    if ext_call.success:
                                                                                        _93461 = mem[64]
                                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                                        require return_data.size >= 96
                                                                                        _94267 = mem[_93461 + 32]
                                                                                        _94268 = mem[_93461 + 64]
                                                                                        mem[mem[64]] = mem[_93461]
                                                                                        mem[mem[64] + 64] = _94268
                                                                                        mem[mem[64] + 96] = gasForProcessing
                                                                                        emit ProcessedDividendTracker(mem[mem[64]], _94267, _94268, gasForProcessing, 1, tx.origin);
                                                                            else:
                                                                                if not stor7:
                                                                                    call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                         gas gas_remaining wei
                                                                                        args gasForProcessing
                                                                                    mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                                    if ext_call.success:
                                                                                        _93858 = mem[64]
                                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                                        require return_data.size >= 96
                                                                                        _94675 = mem[_93858 + 32]
                                                                                        _94676 = mem[_93858 + 64]
                                                                                        mem[mem[64]] = mem[_93858]
                                                                                        mem[mem[64] + 64] = _94676
                                                                                        mem[mem[64] + 96] = gasForProcessing
                                                                                        emit ProcessedDividendTracker(mem[mem[64]], _94675, _94676, gasForProcessing, 1, tx.origin);
                                                                        else:
                                                                            if not ext_call.success:
                                                                                if not stor7:
                                                                                    call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                         gas gas_remaining wei
                                                                                        args gasForProcessing
                                                                                    mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                                    if ext_call.success:
                                                                                        _93859 = mem[64]
                                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                                        require return_data.size >= 96
                                                                                        _94679 = mem[_93859 + 32]
                                                                                        _94680 = mem[_93859 + 64]
                                                                                        mem[mem[64]] = mem[_93859]
                                                                                        mem[mem[64] + 64] = _94680
                                                                                        mem[mem[64] + 96] = gasForProcessing
                                                                                        emit ProcessedDividendTracker(mem[mem[64]], _94679, _94680, gasForProcessing, 1, tx.origin);
                                                                            else:
                                                                                if not stor7:
                                                                                    call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                         gas gas_remaining wei
                                                                                        args gasForProcessing
                                                                                    mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                                    if ext_call.success:
                                                                                        _94271 = mem[64]
                                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                                        require return_data.size >= 96
                                                                                        _95040 = mem[_94271 + 32]
                                                                                        _95041 = mem[_94271 + 64]
                                                                                        mem[mem[64]] = mem[_94271]
                                                                                        mem[mem[64] + 64] = _95041
                                                                                        mem[mem[64] + 96] = gasForProcessing
                                                                                        emit ProcessedDividendTracker(mem[mem[64]], _95040, _95041, gasForProcessing, 1, tx.origin);
                                                                    else:
                                                                        if arg2 and sellFeeIncreaseFactor > -1 / arg2:
                                                                            revert with 'NH{q', 17
                                                                        if arg2 * totalFees / 100 > !(arg2 * sellFeeIncreaseFactor / 100):
                                                                            revert with 'NH{q', 17
                                                                        if arg2 < (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100):
                                                                            revert with 'NH{q', 17
                                                                        if not msg.sender:
                                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                                        if not this.address:
                                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                                        if balanceOf[address(msg.sender)] < (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100):
                                                                            revert with 0, 'ERC20: transfer amount exceeds balance'
                                                                        balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)
                                                                        if balanceOf[this.address] > !((arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)):
                                                                            revert with 'NH{q', 17
                                                                        balanceOf[this.address] = balanceOf[this.address] + (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)
                                                                        emit Transfer(((arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)), msg.sender, this.address);
                                                                        if not msg.sender:
                                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                                        if not arg1:
                                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                                        if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100):
                                                                            revert with 0, 'ERC20: transfer amount exceeds balance'
                                                                        balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)
                                                                        if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)):
                                                                            revert with 'NH{q', 17
                                                                        balanceOf[arg1] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)
                                                                        emit Transfer((arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)), msg.sender, arg1);
                                                                        require ext_code.size(dividendTrackerAddress)
                                                                        call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                                             gas gas_remaining wei
                                                                            args msg.sender, balanceOf[address(msg.sender)]
                                                                        mem[0] = arg1
                                                                        mem[32] = 0
                                                                        require ext_code.size(dividendTrackerAddress)
                                                                        call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                                             gas gas_remaining wei
                                                                            args address(arg1), balanceOf[address(arg1)]
                                                                        if not ext_call.success:
                                                                            if not ext_call.success:
                                                                                if not stor7:
                                                                                    call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                         gas gas_remaining wei
                                                                                        args gasForProcessing
                                                                                    mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                                    if ext_call.success:
                                                                                        _96997 = mem[64]
                                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                                        require return_data.size >= 96
                                                                                        _97517 = mem[_96997 + 32]
                                                                                        _97518 = mem[_96997 + 64]
                                                                                        mem[mem[64]] = mem[_96997]
                                                                                        mem[mem[64] + 64] = _97518
                                                                                        mem[mem[64] + 96] = gasForProcessing
                                                                                        emit ProcessedDividendTracker(mem[mem[64]], _97517, _97518, gasForProcessing, 1, tx.origin);
                                                                            else:
                                                                                if not stor7:
                                                                                    call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                         gas gas_remaining wei
                                                                                        args gasForProcessing
                                                                                    mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                                    if ext_call.success:
                                                                                        _97232 = mem[64]
                                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                                        require return_data.size >= 96
                                                                                        _97893 = mem[_97232 + 32]
                                                                                        _97894 = mem[_97232 + 64]
                                                                                        mem[mem[64]] = mem[_97232]
                                                                                        mem[mem[64] + 64] = _97894
                                                                                        mem[mem[64] + 96] = gasForProcessing
                                                                                        emit ProcessedDividendTracker(mem[mem[64]], _97893, _97894, gasForProcessing, 1, tx.origin);
                                                                        else:
                                                                            if not ext_call.success:
                                                                                if not stor7:
                                                                                    call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                         gas gas_remaining wei
                                                                                        args gasForProcessing
                                                                                    mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                                    if ext_call.success:
                                                                                        _97233 = mem[64]
                                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                                        require return_data.size >= 96
                                                                                        _97897 = mem[_97233 + 32]
                                                                                        _97898 = mem[_97233 + 64]
                                                                                        mem[mem[64]] = mem[_97233]
                                                                                        mem[mem[64] + 64] = _97898
                                                                                        mem[mem[64] + 96] = gasForProcessing
                                                                                        emit ProcessedDividendTracker(mem[mem[64]], _97897, _97898, gasForProcessing, 1, tx.origin);
                                                                            else:
                                                                                if not stor7:
                                                                                    call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                         gas gas_remaining wei
                                                                                        args gasForProcessing
                                                                                    mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                                    if ext_call.success:
                                                                                        _97521 = mem[64]
                                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                                        require return_data.size >= 96
                                                                                        _98234 = mem[_97521 + 32]
                                                                                        _98235 = mem[_97521 + 64]
                                                                                        mem[mem[64]] = mem[_97521]
                                                                                        mem[mem[64] + 64] = _98235
                                                                                        mem[mem[64] + 96] = gasForProcessing
                                                                                        emit ProcessedDividendTracker(mem[mem[64]], _98234, _98235, gasForProcessing, 1, tx.origin);
                                                    else:
                                                        emit SendDividends(balanceOf[this.address], eth.balance(this.address));
                                                        stor7 = 0
                                                        if stor21[address(msg.sender)]:
                                                            if not msg.sender:
                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                            if not arg1:
                                                                revert with 0, 'ERC20: transfer to the zero address'
                                                            if balanceOf[address(msg.sender)] < arg2:
                                                                revert with 0, 'ERC20: transfer amount exceeds balance'
                                                            balanceOf[address(msg.sender)] -= arg2
                                                            if balanceOf[arg1] > !arg2:
                                                                revert with 'NH{q', 17
                                                            balanceOf[arg1] += arg2
                                                            emit Transfer(arg2, msg.sender, arg1);
                                                            require ext_code.size(dividendTrackerAddress)
                                                            call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                                 gas gas_remaining wei
                                                                args msg.sender, balanceOf[address(msg.sender)]
                                                            mem[0] = arg1
                                                            mem[32] = 0
                                                            require ext_code.size(dividendTrackerAddress)
                                                            call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                                 gas gas_remaining wei
                                                                args address(arg1), balanceOf[address(arg1)]
                                                            if not ext_call.success:
                                                                if not ext_call.success:
                                                                    if not stor7:
                                                                        call dividendTrackerAddress.process(uint256 arg1) with:
                                                                             gas gas_remaining wei
                                                                            args gasForProcessing
                                                                        mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                        if ext_call.success:
                                                                            _84179 = mem[64]
                                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                                            require return_data.size >= 96
                                                                            _86284 = mem[_84179 + 32]
                                                                            _86285 = mem[_84179 + 64]
                                                                            mem[mem[64]] = mem[_84179]
                                                                            mem[mem[64] + 64] = _86285
                                                                            mem[mem[64] + 96] = gasForProcessing
                                                                            emit ProcessedDividendTracker(mem[mem[64]], _86284, _86285, gasForProcessing, 1, tx.origin);
                                                                else:
                                                                    if not stor7:
                                                                        call dividendTrackerAddress.process(uint256 arg1) with:
                                                                             gas gas_remaining wei
                                                                            args gasForProcessing
                                                                        mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                        if ext_call.success:
                                                                            _85078 = mem[64]
                                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                                            require return_data.size >= 96
                                                                            _87455 = mem[_85078 + 32]
                                                                            _87456 = mem[_85078 + 64]
                                                                            mem[mem[64]] = mem[_85078]
                                                                            mem[mem[64] + 64] = _87456
                                                                            mem[mem[64] + 96] = gasForProcessing
                                                                            emit ProcessedDividendTracker(mem[mem[64]], _87455, _87456, gasForProcessing, 1, tx.origin);
                                                            else:
                                                                if not ext_call.success:
                                                                    if not stor7:
                                                                        call dividendTrackerAddress.process(uint256 arg1) with:
                                                                             gas gas_remaining wei
                                                                            args gasForProcessing
                                                                        mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                        if ext_call.success:
                                                                            _85079 = mem[64]
                                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                                            require return_data.size >= 96
                                                                            _87459 = mem[_85079 + 32]
                                                                            _87460 = mem[_85079 + 64]
                                                                            mem[mem[64]] = mem[_85079]
                                                                            mem[mem[64] + 64] = _87460
                                                                            mem[mem[64] + 96] = gasForProcessing
                                                                            emit ProcessedDividendTracker(mem[mem[64]], _87459, _87460, gasForProcessing, 1, tx.origin);
                                                                else:
                                                                    if not stor7:
                                                                        call dividendTrackerAddress.process(uint256 arg1) with:
                                                                             gas gas_remaining wei
                                                                            args gasForProcessing
                                                                        mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                        if ext_call.success:
                                                                            _86288 = mem[64]
                                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                                            require return_data.size >= 96
                                                                            _88319 = mem[_86288 + 32]
                                                                            _88320 = mem[_86288 + 64]
                                                                            mem[mem[64]] = mem[_86288]
                                                                            mem[mem[64] + 64] = _88320
                                                                            mem[mem[64] + 96] = gasForProcessing
                                                                            emit ProcessedDividendTracker(mem[mem[64]], _88319, _88320, gasForProcessing, 1, tx.origin);
                                                        else:
                                                            if stor21[address(arg1)]:
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                if not arg1:
                                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                                if balanceOf[address(msg.sender)] < arg2:
                                                                    revert with 0, 'ERC20: transfer amount exceeds balance'
                                                                balanceOf[address(msg.sender)] -= arg2
                                                                if balanceOf[arg1] > !arg2:
                                                                    revert with 'NH{q', 17
                                                                balanceOf[arg1] += arg2
                                                                emit Transfer(arg2, msg.sender, arg1);
                                                                require ext_code.size(dividendTrackerAddress)
                                                                call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                                     gas gas_remaining wei
                                                                    args msg.sender, balanceOf[address(msg.sender)]
                                                                mem[0] = arg1
                                                                mem[32] = 0
                                                                require ext_code.size(dividendTrackerAddress)
                                                                call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                                     gas gas_remaining wei
                                                                    args address(arg1), balanceOf[address(arg1)]
                                                                if not ext_call.success:
                                                                    if not ext_call.success:
                                                                        if not stor7:
                                                                            call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                 gas gas_remaining wei
                                                                                args gasForProcessing
                                                                            mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                            if ext_call.success:
                                                                                _85088 = mem[64]
                                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                                require return_data.size >= 96
                                                                                _87477 = mem[_85088 + 32]
                                                                                _87478 = mem[_85088 + 64]
                                                                                mem[mem[64]] = mem[_85088]
                                                                                mem[mem[64] + 64] = _87478
                                                                                mem[mem[64] + 96] = gasForProcessing
                                                                                emit ProcessedDividendTracker(mem[mem[64]], _87477, _87478, gasForProcessing, 1, tx.origin);
                                                                    else:
                                                                        if not stor7:
                                                                            call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                 gas gas_remaining wei
                                                                                args gasForProcessing
                                                                            mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                            if ext_call.success:
                                                                                _86300 = mem[64]
                                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                                require return_data.size >= 96
                                                                                _88329 = mem[_86300 + 32]
                                                                                _88330 = mem[_86300 + 64]
                                                                                mem[mem[64]] = mem[_86300]
                                                                                mem[mem[64] + 64] = _88330
                                                                                mem[mem[64] + 96] = gasForProcessing
                                                                                emit ProcessedDividendTracker(mem[mem[64]], _88329, _88330, gasForProcessing, 1, tx.origin);
                                                                else:
                                                                    if not ext_call.success:
                                                                        if not stor7:
                                                                            call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                 gas gas_remaining wei
                                                                                args gasForProcessing
                                                                            mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                            if ext_call.success:
                                                                                _86301 = mem[64]
                                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                                require return_data.size >= 96
                                                                                _88333 = mem[_86301 + 32]
                                                                                _88334 = mem[_86301 + 64]
                                                                                mem[mem[64]] = mem[_86301]
                                                                                mem[mem[64] + 64] = _88334
                                                                                mem[mem[64] + 96] = gasForProcessing
                                                                                emit ProcessedDividendTracker(mem[mem[64]], _88333, _88334, gasForProcessing, 1, tx.origin);
                                                                    else:
                                                                        if not stor7:
                                                                            call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                 gas gas_remaining wei
                                                                                args gasForProcessing
                                                                            mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                            if ext_call.success:
                                                                                _87481 = mem[64]
                                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                                require return_data.size >= 96
                                                                                _89174 = mem[_87481 + 32]
                                                                                _89175 = mem[_87481 + 64]
                                                                                mem[mem[64]] = mem[_87481]
                                                                                mem[mem[64] + 64] = _89175
                                                                                mem[mem[64] + 96] = gasForProcessing
                                                                                emit ProcessedDividendTracker(mem[mem[64]], _89174, _89175, gasForProcessing, 1, tx.origin);
                                                            else:
                                                                if stor7:
                                                                    if not msg.sender:
                                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                                    if not arg1:
                                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                                    if balanceOf[address(msg.sender)] < arg2:
                                                                        revert with 0, 'ERC20: transfer amount exceeds balance'
                                                                    balanceOf[address(msg.sender)] -= arg2
                                                                    if balanceOf[arg1] > !arg2:
                                                                        revert with 'NH{q', 17
                                                                    balanceOf[arg1] += arg2
                                                                    emit Transfer(arg2, msg.sender, arg1);
                                                                    require ext_code.size(dividendTrackerAddress)
                                                                    call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                                         gas gas_remaining wei
                                                                        args msg.sender, balanceOf[address(msg.sender)]
                                                                    mem[0] = arg1
                                                                    mem[32] = 0
                                                                    require ext_code.size(dividendTrackerAddress)
                                                                    call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                                         gas gas_remaining wei
                                                                        args address(arg1), balanceOf[address(arg1)]
                                                                    if not ext_call.success:
                                                                        if not ext_call.success:
                                                                            if not stor7:
                                                                                call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                     gas gas_remaining wei
                                                                                    args gasForProcessing
                                                                                mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                                if ext_call.success:
                                                                                    _84184 = mem[64]
                                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                                    require return_data.size >= 96
                                                                                    _86291 = mem[_84184 + 32]
                                                                                    _86292 = mem[_84184 + 64]
                                                                                    mem[mem[64]] = mem[_84184]
                                                                                    mem[mem[64] + 64] = _86292
                                                                                    mem[mem[64] + 96] = gasForProcessing
                                                                                    emit ProcessedDividendTracker(mem[mem[64]], _86291, _86292, gasForProcessing, 1, tx.origin);
                                                                        else:
                                                                            if not stor7:
                                                                                call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                     gas gas_remaining wei
                                                                                    args gasForProcessing
                                                                                mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                                if ext_call.success:
                                                                                    _85083 = mem[64]
                                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                                    require return_data.size >= 96
                                                                                    _87464 = mem[_85083 + 32]
                                                                                    _87465 = mem[_85083 + 64]
                                                                                    mem[mem[64]] = mem[_85083]
                                                                                    mem[mem[64] + 64] = _87465
                                                                                    mem[mem[64] + 96] = gasForProcessing
                                                                                    emit ProcessedDividendTracker(mem[mem[64]], _87464, _87465, gasForProcessing, 1, tx.origin);
                                                                    else:
                                                                        if not ext_call.success:
                                                                            if not stor7:
                                                                                call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                     gas gas_remaining wei
                                                                                    args gasForProcessing
                                                                                mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                                if ext_call.success:
                                                                                    _85084 = mem[64]
                                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                                    require return_data.size >= 96
                                                                                    _87468 = mem[_85084 + 32]
                                                                                    _87469 = mem[_85084 + 64]
                                                                                    mem[mem[64]] = mem[_85084]
                                                                                    mem[mem[64] + 64] = _87469
                                                                                    mem[mem[64] + 96] = gasForProcessing
                                                                                    emit ProcessedDividendTracker(mem[mem[64]], _87468, _87469, gasForProcessing, 1, tx.origin);
                                                                        else:
                                                                            if not stor7:
                                                                                call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                     gas gas_remaining wei
                                                                                    args gasForProcessing
                                                                                mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                                if ext_call.success:
                                                                                    _86295 = mem[64]
                                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                                    require return_data.size >= 96
                                                                                    _88324 = mem[_86295 + 32]
                                                                                    _88325 = mem[_86295 + 64]
                                                                                    mem[mem[64]] = mem[_86295]
                                                                                    mem[mem[64] + 64] = _88325
                                                                                    mem[mem[64] + 96] = gasForProcessing
                                                                                    emit ProcessedDividendTracker(mem[mem[64]], _88324, _88325, gasForProcessing, 1, tx.origin);
                                                                else:
                                                                    if arg2 and totalFees > -1 / arg2:
                                                                        revert with 'NH{q', 17
                                                                    if not stor22[address(arg1)]:
                                                                        if arg2 < arg2 * totalFees / 100:
                                                                            revert with 'NH{q', 17
                                                                        if not msg.sender:
                                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                                        if not this.address:
                                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                                        if balanceOf[address(msg.sender)] < arg2 * totalFees / 100:
                                                                            revert with 0, 'ERC20: transfer amount exceeds balance'
                                                                        balanceOf[address(msg.sender)] -= arg2 * totalFees / 100
                                                                        if balanceOf[this.address] > !(arg2 * totalFees / 100):
                                                                            revert with 'NH{q', 17
                                                                        balanceOf[this.address] += arg2 * totalFees / 100
                                                                        emit Transfer((arg2 * totalFees / 100), msg.sender, this.address);
                                                                        if not msg.sender:
                                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                                        if not arg1:
                                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                                        if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100):
                                                                            revert with 0, 'ERC20: transfer amount exceeds balance'
                                                                        balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100)
                                                                        if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100)):
                                                                            revert with 'NH{q', 17
                                                                        balanceOf[arg1] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100)
                                                                        emit Transfer((arg2 - (arg2 * totalFees / 100)), msg.sender, arg1);
                                                                        require ext_code.size(dividendTrackerAddress)
                                                                        call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                                             gas gas_remaining wei
                                                                            args msg.sender, balanceOf[address(msg.sender)]
                                                                        mem[0] = arg1
                                                                        mem[32] = 0
                                                                        require ext_code.size(dividendTrackerAddress)
                                                                        call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                                             gas gas_remaining wei
                                                                            args address(arg1), balanceOf[address(arg1)]
                                                                        if not ext_call.success:
                                                                            if not ext_call.success:
                                                                                if not stor7:
                                                                                    call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                         gas gas_remaining wei
                                                                                        args gasForProcessing
                                                                                    mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                                    if ext_call.success:
                                                                                        _93866 = mem[64]
                                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                                        require return_data.size >= 96
                                                                                        _94684 = mem[_93866 + 32]
                                                                                        _94685 = mem[_93866 + 64]
                                                                                        mem[mem[64]] = mem[_93866]
                                                                                        mem[mem[64] + 64] = _94685
                                                                                        mem[mem[64] + 96] = gasForProcessing
                                                                                        emit ProcessedDividendTracker(mem[mem[64]], _94684, _94685, gasForProcessing, 1, tx.origin);
                                                                            else:
                                                                                if not stor7:
                                                                                    call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                         gas gas_remaining wei
                                                                                        args gasForProcessing
                                                                                    mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                                    if ext_call.success:
                                                                                        _94274 = mem[64]
                                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                                        require return_data.size >= 96
                                                                                        _95045 = mem[_94274 + 32]
                                                                                        _95046 = mem[_94274 + 64]
                                                                                        mem[mem[64]] = mem[_94274]
                                                                                        mem[mem[64] + 64] = _95046
                                                                                        mem[mem[64] + 96] = gasForProcessing
                                                                                        emit ProcessedDividendTracker(mem[mem[64]], _95045, _95046, gasForProcessing, 1, tx.origin);
                                                                        else:
                                                                            if not ext_call.success:
                                                                                if not stor7:
                                                                                    call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                         gas gas_remaining wei
                                                                                        args gasForProcessing
                                                                                    mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                                    if ext_call.success:
                                                                                        _94275 = mem[64]
                                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                                        require return_data.size >= 96
                                                                                        _95049 = mem[_94275 + 32]
                                                                                        _95050 = mem[_94275 + 64]
                                                                                        mem[mem[64]] = mem[_94275]
                                                                                        mem[mem[64] + 64] = _95050
                                                                                        mem[mem[64] + 96] = gasForProcessing
                                                                                        emit ProcessedDividendTracker(mem[mem[64]], _95049, _95050, gasForProcessing, 1, tx.origin);
                                                                            else:
                                                                                if not stor7:
                                                                                    call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                         gas gas_remaining wei
                                                                                        args gasForProcessing
                                                                                    mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                                    if ext_call.success:
                                                                                        _94688 = mem[64]
                                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                                        require return_data.size >= 96
                                                                                        _95340 = mem[_94688 + 32]
                                                                                        _95341 = mem[_94688 + 64]
                                                                                        mem[mem[64]] = mem[_94688]
                                                                                        mem[mem[64] + 64] = _95341
                                                                                        mem[mem[64] + 96] = gasForProcessing
                                                                                        emit ProcessedDividendTracker(mem[mem[64]], _95340, _95341, gasForProcessing, 1, tx.origin);
                                                                    else:
                                                                        if arg2 and sellFeeIncreaseFactor > -1 / arg2:
                                                                            revert with 'NH{q', 17
                                                                        if arg2 * totalFees / 100 > !(arg2 * sellFeeIncreaseFactor / 100):
                                                                            revert with 'NH{q', 17
                                                                        if arg2 < (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100):
                                                                            revert with 'NH{q', 17
                                                                        if not msg.sender:
                                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                                        if not this.address:
                                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                                        if balanceOf[address(msg.sender)] < (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100):
                                                                            revert with 0, 'ERC20: transfer amount exceeds balance'
                                                                        balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)
                                                                        if balanceOf[this.address] > !((arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)):
                                                                            revert with 'NH{q', 17
                                                                        balanceOf[this.address] = balanceOf[this.address] + (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)
                                                                        emit Transfer(((arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)), msg.sender, this.address);
                                                                        if not msg.sender:
                                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                                        if not arg1:
                                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                                        if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100):
                                                                            revert with 0, 'ERC20: transfer amount exceeds balance'
                                                                        balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)
                                                                        if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)):
                                                                            revert with 'NH{q', 17
                                                                        balanceOf[arg1] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)
                                                                        emit Transfer((arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)), msg.sender, arg1);
                                                                        require ext_code.size(dividendTrackerAddress)
                                                                        call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                                             gas gas_remaining wei
                                                                            args msg.sender, balanceOf[address(msg.sender)]
                                                                        mem[0] = arg1
                                                                        mem[32] = 0
                                                                        require ext_code.size(dividendTrackerAddress)
                                                                        call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                                             gas gas_remaining wei
                                                                            args address(arg1), balanceOf[address(arg1)]
                                                                        if not ext_call.success:
                                                                            if not ext_call.success:
                                                                                if not stor7:
                                                                                    call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                         gas gas_remaining wei
                                                                                        args gasForProcessing
                                                                                    mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                                    if ext_call.success:
                                                                                        _97236 = mem[64]
                                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                                        require return_data.size >= 96
                                                                                        _97902 = mem[_97236 + 32]
                                                                                        _97903 = mem[_97236 + 64]
                                                                                        mem[mem[64]] = mem[_97236]
                                                                                        mem[mem[64] + 64] = _97903
                                                                                        mem[mem[64] + 96] = gasForProcessing
                                                                                        emit ProcessedDividendTracker(mem[mem[64]], _97902, _97903, gasForProcessing, 1, tx.origin);
                                                                            else:
                                                                                if not stor7:
                                                                                    call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                         gas gas_remaining wei
                                                                                        args gasForProcessing
                                                                                    mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                                    if ext_call.success:
                                                                                        _97523 = mem[64]
                                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                                        require return_data.size >= 96
                                                                                        _98238 = mem[_97523 + 32]
                                                                                        _98239 = mem[_97523 + 64]
                                                                                        mem[mem[64]] = mem[_97523]
                                                                                        mem[mem[64] + 64] = _98239
                                                                                        mem[mem[64] + 96] = gasForProcessing
                                                                                        emit ProcessedDividendTracker(mem[mem[64]], _98238, _98239, gasForProcessing, 1, tx.origin);
                                                                        else:
                                                                            if not ext_call.success:
                                                                                if not stor7:
                                                                                    call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                         gas gas_remaining wei
                                                                                        args gasForProcessing
                                                                                    mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                                    if ext_call.success:
                                                                                        _97524 = mem[64]
                                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                                        require return_data.size >= 96
                                                                                        _98242 = mem[_97524 + 32]
                                                                                        _98243 = mem[_97524 + 64]
                                                                                        mem[mem[64]] = mem[_97524]
                                                                                        mem[mem[64] + 64] = _98243
                                                                                        mem[mem[64] + 96] = gasForProcessing
                                                                                        emit ProcessedDividendTracker(mem[mem[64]], _98242, _98243, gasForProcessing, 1, tx.origin);
                                                                            else:
                                                                                if not stor7:
                                                                                    call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                         gas gas_remaining wei
                                                                                        args gasForProcessing
                                                                                    mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                                    if ext_call.success:
                                                                                        _97906 = mem[64]
                                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                                        require return_data.size >= 96
                                                                                        _98487 = mem[_97906 + 32]
                                                                                        _98488 = mem[_97906 + 64]
                                                                                        mem[mem[64]] = mem[_97906]
                                                                                        mem[mem[64] + 64] = _98488
                                                                                        mem[mem[64] + 96] = gasForProcessing
                                                                                        emit ProcessedDividendTracker(mem[mem[64]], _98487, _98488, gasForProcessing, 1, tx.origin);
                                                else:
                                                    _79994 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size) + 1
                                                    mem[_79994] = return_data.size
                                                    mem[_79994 + 32 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                    if not ext_call.success:
                                                        stor7 = 0
                                                        if stor21[address(msg.sender)]:
                                                            if not msg.sender:
                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                            if not arg1:
                                                                revert with 0, 'ERC20: transfer to the zero address'
                                                            if balanceOf[address(msg.sender)] < arg2:
                                                                revert with 0, 'ERC20: transfer amount exceeds balance'
                                                            balanceOf[address(msg.sender)] -= arg2
                                                            if balanceOf[arg1] > !arg2:
                                                                revert with 'NH{q', 17
                                                            balanceOf[arg1] += arg2
                                                            emit Transfer(arg2, msg.sender, arg1);
                                                            require ext_code.size(dividendTrackerAddress)
                                                            call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                                 gas gas_remaining wei
                                                                args msg.sender, balanceOf[address(msg.sender)]
                                                            mem[0] = arg1
                                                            mem[32] = 0
                                                            require ext_code.size(dividendTrackerAddress)
                                                            call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                                 gas gas_remaining wei
                                                                args address(arg1), balanceOf[address(arg1)]
                                                            if not ext_call.success:
                                                                if not ext_call.success:
                                                                    if not stor7:
                                                                        call dividendTrackerAddress.process(uint256 arg1) with:
                                                                             gas gas_remaining wei
                                                                            args gasForProcessing
                                                                        mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                        if ext_call.success:
                                                                            _83531 = mem[64]
                                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                                            require return_data.size >= 96
                                                                            _85095 = mem[_83531 + 32]
                                                                            _85096 = mem[_83531 + 64]
                                                                            mem[mem[64]] = mem[_83531]
                                                                            mem[mem[64] + 64] = _85096
                                                                            mem[mem[64] + 96] = gasForProcessing
                                                                            emit ProcessedDividendTracker(mem[mem[64]], _85095, _85096, gasForProcessing, 1, tx.origin);
                                                                else:
                                                                    if not stor7:
                                                                        call dividendTrackerAddress.process(uint256 arg1) with:
                                                                             gas gas_remaining wei
                                                                            args gasForProcessing
                                                                        mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                        if ext_call.success:
                                                                            _84192 = mem[64]
                                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                                            require return_data.size >= 96
                                                                            _86306 = mem[_84192 + 32]
                                                                            _86307 = mem[_84192 + 64]
                                                                            mem[mem[64]] = mem[_84192]
                                                                            mem[mem[64] + 64] = _86307
                                                                            mem[mem[64] + 96] = gasForProcessing
                                                                            emit ProcessedDividendTracker(mem[mem[64]], _86306, _86307, gasForProcessing, 1, tx.origin);
                                                            else:
                                                                if not ext_call.success:
                                                                    if not stor7:
                                                                        call dividendTrackerAddress.process(uint256 arg1) with:
                                                                             gas gas_remaining wei
                                                                            args gasForProcessing
                                                                        mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                        if ext_call.success:
                                                                            _84193 = mem[64]
                                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                                            require return_data.size >= 96
                                                                            _86310 = mem[_84193 + 32]
                                                                            _86311 = mem[_84193 + 64]
                                                                            mem[mem[64]] = mem[_84193]
                                                                            mem[mem[64] + 64] = _86311
                                                                            mem[mem[64] + 96] = gasForProcessing
                                                                            emit ProcessedDividendTracker(mem[mem[64]], _86310, _86311, gasForProcessing, 1, tx.origin);
                                                                else:
                                                                    if not stor7:
                                                                        call dividendTrackerAddress.process(uint256 arg1) with:
                                                                             gas gas_remaining wei
                                                                            args gasForProcessing
                                                                        mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                        if ext_call.success:
                                                                            _85099 = mem[64]
                                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                                            require return_data.size >= 96
                                                                            _87485 = mem[_85099 + 32]
                                                                            _87486 = mem[_85099 + 64]
                                                                            mem[mem[64]] = mem[_85099]
                                                                            mem[mem[64] + 64] = _87486
                                                                            mem[mem[64] + 96] = gasForProcessing
                                                                            emit ProcessedDividendTracker(mem[mem[64]], _87485, _87486, gasForProcessing, 1, tx.origin);
                                                        else:
                                                            if stor21[address(arg1)]:
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                if not arg1:
                                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                                if balanceOf[address(msg.sender)] < arg2:
                                                                    revert with 0, 'ERC20: transfer amount exceeds balance'
                                                                balanceOf[address(msg.sender)] -= arg2
                                                                if balanceOf[arg1] > !arg2:
                                                                    revert with 'NH{q', 17
                                                                balanceOf[arg1] += arg2
                                                                emit Transfer(arg2, msg.sender, arg1);
                                                                require ext_code.size(dividendTrackerAddress)
                                                                call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                                     gas gas_remaining wei
                                                                    args msg.sender, balanceOf[address(msg.sender)]
                                                                mem[0] = arg1
                                                                mem[32] = 0
                                                                require ext_code.size(dividendTrackerAddress)
                                                                call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                                     gas gas_remaining wei
                                                                    args address(arg1), balanceOf[address(arg1)]
                                                                if not ext_call.success:
                                                                    if not ext_call.success:
                                                                        if not stor7:
                                                                            call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                 gas gas_remaining wei
                                                                                args gasForProcessing
                                                                            mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                            if ext_call.success:
                                                                                _84202 = mem[64]
                                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                                require return_data.size >= 96
                                                                                _86328 = mem[_84202 + 32]
                                                                                _86329 = mem[_84202 + 64]
                                                                                mem[mem[64]] = mem[_84202]
                                                                                mem[mem[64] + 64] = _86329
                                                                                mem[mem[64] + 96] = gasForProcessing
                                                                                emit ProcessedDividendTracker(mem[mem[64]], _86328, _86329, gasForProcessing, 1, tx.origin);
                                                                    else:
                                                                        if not stor7:
                                                                            call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                 gas gas_remaining wei
                                                                                args gasForProcessing
                                                                            mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                            if ext_call.success:
                                                                                _85111 = mem[64]
                                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                                require return_data.size >= 96
                                                                                _87495 = mem[_85111 + 32]
                                                                                _87496 = mem[_85111 + 64]
                                                                                mem[mem[64]] = mem[_85111]
                                                                                mem[mem[64] + 64] = _87496
                                                                                mem[mem[64] + 96] = gasForProcessing
                                                                                emit ProcessedDividendTracker(mem[mem[64]], _87495, _87496, gasForProcessing, 1, tx.origin);
                                                                else:
                                                                    if not ext_call.success:
                                                                        if not stor7:
                                                                            call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                 gas gas_remaining wei
                                                                                args gasForProcessing
                                                                            mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                            if ext_call.success:
                                                                                _85112 = mem[64]
                                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                                require return_data.size >= 96
                                                                                _87499 = mem[_85112 + 32]
                                                                                _87500 = mem[_85112 + 64]
                                                                                mem[mem[64]] = mem[_85112]
                                                                                mem[mem[64] + 64] = _87500
                                                                                mem[mem[64] + 96] = gasForProcessing
                                                                                emit ProcessedDividendTracker(mem[mem[64]], _87499, _87500, gasForProcessing, 1, tx.origin);
                                                                    else:
                                                                        if not stor7:
                                                                            call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                 gas gas_remaining wei
                                                                                args gasForProcessing
                                                                            mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                            if ext_call.success:
                                                                                _86332 = mem[64]
                                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                                require return_data.size >= 96
                                                                                _88349 = mem[_86332 + 32]
                                                                                _88350 = mem[_86332 + 64]
                                                                                mem[mem[64]] = mem[_86332]
                                                                                mem[mem[64] + 64] = _88350
                                                                                mem[mem[64] + 96] = gasForProcessing
                                                                                emit ProcessedDividendTracker(mem[mem[64]], _88349, _88350, gasForProcessing, 1, tx.origin);
                                                            else:
                                                                if stor7:
                                                                    if not msg.sender:
                                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                                    if not arg1:
                                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                                    if balanceOf[address(msg.sender)] < arg2:
                                                                        revert with 0, 'ERC20: transfer amount exceeds balance'
                                                                    balanceOf[address(msg.sender)] -= arg2
                                                                    if balanceOf[arg1] > !arg2:
                                                                        revert with 'NH{q', 17
                                                                    balanceOf[arg1] += arg2
                                                                    emit Transfer(arg2, msg.sender, arg1);
                                                                    require ext_code.size(dividendTrackerAddress)
                                                                    call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                                         gas gas_remaining wei
                                                                        args msg.sender, balanceOf[address(msg.sender)]
                                                                    mem[0] = arg1
                                                                    mem[32] = 0
                                                                    require ext_code.size(dividendTrackerAddress)
                                                                    call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                                         gas gas_remaining wei
                                                                        args address(arg1), balanceOf[address(arg1)]
                                                                    if not ext_call.success:
                                                                        if not ext_call.success:
                                                                            if not stor7:
                                                                                call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                     gas gas_remaining wei
                                                                                    args gasForProcessing
                                                                                mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                                if ext_call.success:
                                                                                    _83536 = mem[64]
                                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                                    require return_data.size >= 96
                                                                                    _85102 = mem[_83536 + 32]
                                                                                    _85103 = mem[_83536 + 64]
                                                                                    mem[mem[64]] = mem[_83536]
                                                                                    mem[mem[64] + 64] = _85103
                                                                                    mem[mem[64] + 96] = gasForProcessing
                                                                                    emit ProcessedDividendTracker(mem[mem[64]], _85102, _85103, gasForProcessing, 1, tx.origin);
                                                                        else:
                                                                            if not stor7:
                                                                                call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                     gas gas_remaining wei
                                                                                    args gasForProcessing
                                                                                mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                                if ext_call.success:
                                                                                    _84197 = mem[64]
                                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                                    require return_data.size >= 96
                                                                                    _86315 = mem[_84197 + 32]
                                                                                    _86316 = mem[_84197 + 64]
                                                                                    mem[mem[64]] = mem[_84197]
                                                                                    mem[mem[64] + 64] = _86316
                                                                                    mem[mem[64] + 96] = gasForProcessing
                                                                                    emit ProcessedDividendTracker(mem[mem[64]], _86315, _86316, gasForProcessing, 1, tx.origin);
                                                                    else:
                                                                        if not ext_call.success:
                                                                            if not stor7:
                                                                                call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                     gas gas_remaining wei
                                                                                    args gasForProcessing
                                                                                mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                                if ext_call.success:
                                                                                    _84198 = mem[64]
                                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                                    require return_data.size >= 96
                                                                                    _86319 = mem[_84198 + 32]
                                                                                    _86320 = mem[_84198 + 64]
                                                                                    mem[mem[64]] = mem[_84198]
                                                                                    mem[mem[64] + 64] = _86320
                                                                                    mem[mem[64] + 96] = gasForProcessing
                                                                                    emit ProcessedDividendTracker(mem[mem[64]], _86319, _86320, gasForProcessing, 1, tx.origin);
                                                                        else:
                                                                            if not stor7:
                                                                                call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                     gas gas_remaining wei
                                                                                    args gasForProcessing
                                                                                mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                                if ext_call.success:
                                                                                    _85106 = mem[64]
                                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                                    require return_data.size >= 96
                                                                                    _87490 = mem[_85106 + 32]
                                                                                    _87491 = mem[_85106 + 64]
                                                                                    mem[mem[64]] = mem[_85106]
                                                                                    mem[mem[64] + 64] = _87491
                                                                                    mem[mem[64] + 96] = gasForProcessing
                                                                                    emit ProcessedDividendTracker(mem[mem[64]], _87490, _87491, gasForProcessing, 1, tx.origin);
                                                                else:
                                                                    if arg2 and totalFees > -1 / arg2:
                                                                        revert with 'NH{q', 17
                                                                    if not stor22[address(arg1)]:
                                                                        if arg2 < arg2 * totalFees / 100:
                                                                            revert with 'NH{q', 17
                                                                        if not msg.sender:
                                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                                        if not this.address:
                                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                                        if balanceOf[address(msg.sender)] < arg2 * totalFees / 100:
                                                                            revert with 0, 'ERC20: transfer amount exceeds balance'
                                                                        balanceOf[address(msg.sender)] -= arg2 * totalFees / 100
                                                                        if balanceOf[this.address] > !(arg2 * totalFees / 100):
                                                                            revert with 'NH{q', 17
                                                                        balanceOf[this.address] += arg2 * totalFees / 100
                                                                        emit Transfer((arg2 * totalFees / 100), msg.sender, this.address);
                                                                        if not msg.sender:
                                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                                        if not arg1:
                                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                                        if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100):
                                                                            revert with 0, 'ERC20: transfer amount exceeds balance'
                                                                        balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100)
                                                                        if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100)):
                                                                            revert with 'NH{q', 17
                                                                        balanceOf[arg1] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100)
                                                                        emit Transfer((arg2 - (arg2 * totalFees / 100)), msg.sender, arg1);
                                                                        require ext_code.size(dividendTrackerAddress)
                                                                        call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                                             gas gas_remaining wei
                                                                            args msg.sender, balanceOf[address(msg.sender)]
                                                                        mem[0] = arg1
                                                                        mem[32] = 0
                                                                        require ext_code.size(dividendTrackerAddress)
                                                                        call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                                             gas gas_remaining wei
                                                                            args address(arg1), balanceOf[address(arg1)]
                                                                        if not ext_call.success:
                                                                            if not ext_call.success:
                                                                                if not stor7:
                                                                                    call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                         gas gas_remaining wei
                                                                                        args gasForProcessing
                                                                                    mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                                    if ext_call.success:
                                                                                        _93472 = mem[64]
                                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                                        require return_data.size >= 96
                                                                                        _94284 = mem[_93472 + 32]
                                                                                        _94285 = mem[_93472 + 64]
                                                                                        mem[mem[64]] = mem[_93472]
                                                                                        mem[mem[64] + 64] = _94285
                                                                                        mem[mem[64] + 96] = gasForProcessing
                                                                                        emit ProcessedDividendTracker(mem[mem[64]], _94284, _94285, gasForProcessing, 1, tx.origin);
                                                                            else:
                                                                                if not stor7:
                                                                                    call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                         gas gas_remaining wei
                                                                                        args gasForProcessing
                                                                                    mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                                    if ext_call.success:
                                                                                        _93875 = mem[64]
                                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                                        require return_data.size >= 96
                                                                                        _94692 = mem[_93875 + 32]
                                                                                        _94693 = mem[_93875 + 64]
                                                                                        mem[mem[64]] = mem[_93875]
                                                                                        mem[mem[64] + 64] = _94693
                                                                                        mem[mem[64] + 96] = gasForProcessing
                                                                                        emit ProcessedDividendTracker(mem[mem[64]], _94692, _94693, gasForProcessing, 1, tx.origin);
                                                                        else:
                                                                            if not ext_call.success:
                                                                                if not stor7:
                                                                                    call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                         gas gas_remaining wei
                                                                                        args gasForProcessing
                                                                                    mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                                    if ext_call.success:
                                                                                        _93876 = mem[64]
                                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                                        require return_data.size >= 96
                                                                                        _94696 = mem[_93876 + 32]
                                                                                        _94697 = mem[_93876 + 64]
                                                                                        mem[mem[64]] = mem[_93876]
                                                                                        mem[mem[64] + 64] = _94697
                                                                                        mem[mem[64] + 96] = gasForProcessing
                                                                                        emit ProcessedDividendTracker(mem[mem[64]], _94696, _94697, gasForProcessing, 1, tx.origin);
                                                                            else:
                                                                                if not stor7:
                                                                                    call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                         gas gas_remaining wei
                                                                                        args gasForProcessing
                                                                                    mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                                    if ext_call.success:
                                                                                        _94288 = mem[64]
                                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                                        require return_data.size >= 96
                                                                                        _95055 = mem[_94288 + 32]
                                                                                        _95056 = mem[_94288 + 64]
                                                                                        mem[mem[64]] = mem[_94288]
                                                                                        mem[mem[64] + 64] = _95056
                                                                                        mem[mem[64] + 96] = gasForProcessing
                                                                                        emit ProcessedDividendTracker(mem[mem[64]], _95055, _95056, gasForProcessing, 1, tx.origin);
                                                                    else:
                                                                        if arg2 and sellFeeIncreaseFactor > -1 / arg2:
                                                                            revert with 'NH{q', 17
                                                                        if arg2 * totalFees / 100 > !(arg2 * sellFeeIncreaseFactor / 100):
                                                                            revert with 'NH{q', 17
                                                                        if arg2 < (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100):
                                                                            revert with 'NH{q', 17
                                                                        if not msg.sender:
                                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                                        if not this.address:
                                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                                        if balanceOf[address(msg.sender)] < (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100):
                                                                            revert with 0, 'ERC20: transfer amount exceeds balance'
                                                                        balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)
                                                                        if balanceOf[this.address] > !((arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)):
                                                                            revert with 'NH{q', 17
                                                                        balanceOf[this.address] = balanceOf[this.address] + (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)
                                                                        emit Transfer(((arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)), msg.sender, this.address);
                                                                        if not msg.sender:
                                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                                        if not arg1:
                                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                                        if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100):
                                                                            revert with 0, 'ERC20: transfer amount exceeds balance'
                                                                        balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)
                                                                        if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)):
                                                                            revert with 'NH{q', 17
                                                                        balanceOf[arg1] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)
                                                                        emit Transfer((arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)), msg.sender, arg1);
                                                                        require ext_code.size(dividendTrackerAddress)
                                                                        call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                                             gas gas_remaining wei
                                                                            args msg.sender, balanceOf[address(msg.sender)]
                                                                        mem[0] = arg1
                                                                        mem[32] = 0
                                                                        require ext_code.size(dividendTrackerAddress)
                                                                        call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                                             gas gas_remaining wei
                                                                            args address(arg1), balanceOf[address(arg1)]
                                                                        if not ext_call.success:
                                                                            if not ext_call.success:
                                                                                if not stor7:
                                                                                    call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                         gas gas_remaining wei
                                                                                        args gasForProcessing
                                                                                    mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                                    if ext_call.success:
                                                                                        _97004 = mem[64]
                                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                                        require return_data.size >= 96
                                                                                        _97529 = mem[_97004 + 32]
                                                                                        _97530 = mem[_97004 + 64]
                                                                                        mem[mem[64]] = mem[_97004]
                                                                                        mem[mem[64] + 64] = _97530
                                                                                        mem[mem[64] + 96] = gasForProcessing
                                                                                        emit ProcessedDividendTracker(mem[mem[64]], _97529, _97530, gasForProcessing, 1, tx.origin);
                                                                            else:
                                                                                if not stor7:
                                                                                    call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                         gas gas_remaining wei
                                                                                        args gasForProcessing
                                                                                    mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                                    if ext_call.success:
                                                                                        _97242 = mem[64]
                                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                                        require return_data.size >= 96
                                                                                        _97909 = mem[_97242 + 32]
                                                                                        _97910 = mem[_97242 + 64]
                                                                                        mem[mem[64]] = mem[_97242]
                                                                                        mem[mem[64] + 64] = _97910
                                                                                        mem[mem[64] + 96] = gasForProcessing
                                                                                        emit ProcessedDividendTracker(mem[mem[64]], _97909, _97910, gasForProcessing, 1, tx.origin);
                                                                        else:
                                                                            if not ext_call.success:
                                                                                if not stor7:
                                                                                    call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                         gas gas_remaining wei
                                                                                        args gasForProcessing
                                                                                    mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                                    if ext_call.success:
                                                                                        _97243 = mem[64]
                                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                                        require return_data.size >= 96
                                                                                        _97913 = mem[_97243 + 32]
                                                                                        _97914 = mem[_97243 + 64]
                                                                                        mem[mem[64]] = mem[_97243]
                                                                                        mem[mem[64] + 64] = _97914
                                                                                        mem[mem[64] + 96] = gasForProcessing
                                                                                        emit ProcessedDividendTracker(mem[mem[64]], _97913, _97914, gasForProcessing, 1, tx.origin);
                                                                            else:
                                                                                if not stor7:
                                                                                    call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                         gas gas_remaining wei
                                                                                        args gasForProcessing
                                                                                    mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                                    if ext_call.success:
                                                                                        _97533 = mem[64]
                                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                                        require return_data.size >= 96
                                                                                        _98248 = mem[_97533 + 32]
                                                                                        _98249 = mem[_97533 + 64]
                                                                                        mem[mem[64]] = mem[_97533]
                                                                                        mem[mem[64] + 64] = _98249
                                                                                        mem[mem[64] + 96] = gasForProcessing
                                                                                        emit ProcessedDividendTracker(mem[mem[64]], _98248, _98249, gasForProcessing, 1, tx.origin);
                                                    else:
                                                        emit SendDividends(balanceOf[this.address], eth.balance(this.address));
                                                        stor7 = 0
                                                        if stor21[address(msg.sender)]:
                                                            if not msg.sender:
                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                            if not arg1:
                                                                revert with 0, 'ERC20: transfer to the zero address'
                                                            if balanceOf[address(msg.sender)] < arg2:
                                                                revert with 0, 'ERC20: transfer amount exceeds balance'
                                                            balanceOf[address(msg.sender)] -= arg2
                                                            if balanceOf[arg1] > !arg2:
                                                                revert with 'NH{q', 17
                                                            balanceOf[arg1] += arg2
                                                            emit Transfer(arg2, msg.sender, arg1);
                                                            require ext_code.size(dividendTrackerAddress)
                                                            call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                                 gas gas_remaining wei
                                                                args msg.sender, balanceOf[address(msg.sender)]
                                                            mem[0] = arg1
                                                            mem[32] = 0
                                                            require ext_code.size(dividendTrackerAddress)
                                                            call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                                 gas gas_remaining wei
                                                                args address(arg1), balanceOf[address(arg1)]
                                                            if not ext_call.success:
                                                                if not ext_call.success:
                                                                    if not stor7:
                                                                        call dividendTrackerAddress.process(uint256 arg1) with:
                                                                             gas gas_remaining wei
                                                                            args gasForProcessing
                                                                        mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                        if ext_call.success:
                                                                            _84207 = mem[64]
                                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                                            require return_data.size >= 96
                                                                            _86335 = mem[_84207 + 32]
                                                                            _86336 = mem[_84207 + 64]
                                                                            mem[mem[64]] = mem[_84207]
                                                                            mem[mem[64] + 64] = _86336
                                                                            mem[mem[64] + 96] = gasForProcessing
                                                                            emit ProcessedDividendTracker(mem[mem[64]], _86335, _86336, gasForProcessing, 1, tx.origin);
                                                                else:
                                                                    if not stor7:
                                                                        call dividendTrackerAddress.process(uint256 arg1) with:
                                                                             gas gas_remaining wei
                                                                            args gasForProcessing
                                                                        mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                        if ext_call.success:
                                                                            _85116 = mem[64]
                                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                                            require return_data.size >= 96
                                                                            _87504 = mem[_85116 + 32]
                                                                            _87505 = mem[_85116 + 64]
                                                                            mem[mem[64]] = mem[_85116]
                                                                            mem[mem[64] + 64] = _87505
                                                                            mem[mem[64] + 96] = gasForProcessing
                                                                            emit ProcessedDividendTracker(mem[mem[64]], _87504, _87505, gasForProcessing, 1, tx.origin);
                                                            else:
                                                                if not ext_call.success:
                                                                    if not stor7:
                                                                        call dividendTrackerAddress.process(uint256 arg1) with:
                                                                             gas gas_remaining wei
                                                                            args gasForProcessing
                                                                        mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                        if ext_call.success:
                                                                            _85117 = mem[64]
                                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                                            require return_data.size >= 96
                                                                            _87508 = mem[_85117 + 32]
                                                                            _87509 = mem[_85117 + 64]
                                                                            mem[mem[64]] = mem[_85117]
                                                                            mem[mem[64] + 64] = _87509
                                                                            mem[mem[64] + 96] = gasForProcessing
                                                                            emit ProcessedDividendTracker(mem[mem[64]], _87508, _87509, gasForProcessing, 1, tx.origin);
                                                                else:
                                                                    if not stor7:
                                                                        call dividendTrackerAddress.process(uint256 arg1) with:
                                                                             gas gas_remaining wei
                                                                            args gasForProcessing
                                                                        mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                        if ext_call.success:
                                                                            _86339 = mem[64]
                                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                                            require return_data.size >= 96
                                                                            _88354 = mem[_86339 + 32]
                                                                            _88355 = mem[_86339 + 64]
                                                                            mem[mem[64]] = mem[_86339]
                                                                            mem[mem[64] + 64] = _88355
                                                                            mem[mem[64] + 96] = gasForProcessing
                                                                            emit ProcessedDividendTracker(mem[mem[64]], _88354, _88355, gasForProcessing, 1, tx.origin);
                                                        else:
                                                            if stor21[address(arg1)]:
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                if not arg1:
                                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                                if balanceOf[address(msg.sender)] < arg2:
                                                                    revert with 0, 'ERC20: transfer amount exceeds balance'
                                                                balanceOf[address(msg.sender)] -= arg2
                                                                if balanceOf[arg1] > !arg2:
                                                                    revert with 'NH{q', 17
                                                                balanceOf[arg1] += arg2
                                                                emit Transfer(arg2, msg.sender, arg1);
                                                                require ext_code.size(dividendTrackerAddress)
                                                                call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                                     gas gas_remaining wei
                                                                    args msg.sender, balanceOf[address(msg.sender)]
                                                                mem[0] = arg1
                                                                mem[32] = 0
                                                                require ext_code.size(dividendTrackerAddress)
                                                                call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                                     gas gas_remaining wei
                                                                    args address(arg1), balanceOf[address(arg1)]
                                                                if not ext_call.success:
                                                                    if not ext_call.success:
                                                                        if not stor7:
                                                                            call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                 gas gas_remaining wei
                                                                                args gasForProcessing
                                                                            mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                            if ext_call.success:
                                                                                _85126 = mem[64]
                                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                                require return_data.size >= 96
                                                                                _87526 = mem[_85126 + 32]
                                                                                _87527 = mem[_85126 + 64]
                                                                                mem[mem[64]] = mem[_85126]
                                                                                mem[mem[64] + 64] = _87527
                                                                                mem[mem[64] + 96] = gasForProcessing
                                                                                emit ProcessedDividendTracker(mem[mem[64]], _87526, _87527, gasForProcessing, 1, tx.origin);
                                                                    else:
                                                                        if not stor7:
                                                                            call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                 gas gas_remaining wei
                                                                                args gasForProcessing
                                                                            mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                            if ext_call.success:
                                                                                _86351 = mem[64]
                                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                                require return_data.size >= 96
                                                                                _88364 = mem[_86351 + 32]
                                                                                _88365 = mem[_86351 + 64]
                                                                                mem[mem[64]] = mem[_86351]
                                                                                mem[mem[64] + 64] = _88365
                                                                                mem[mem[64] + 96] = gasForProcessing
                                                                                emit ProcessedDividendTracker(mem[mem[64]], _88364, _88365, gasForProcessing, 1, tx.origin);
                                                                else:
                                                                    if not ext_call.success:
                                                                        if not stor7:
                                                                            call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                 gas gas_remaining wei
                                                                                args gasForProcessing
                                                                            mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                            if ext_call.success:
                                                                                _86352 = mem[64]
                                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                                require return_data.size >= 96
                                                                                _88368 = mem[_86352 + 32]
                                                                                _88369 = mem[_86352 + 64]
                                                                                mem[mem[64]] = mem[_86352]
                                                                                mem[mem[64] + 64] = _88369
                                                                                mem[mem[64] + 96] = gasForProcessing
                                                                                emit ProcessedDividendTracker(mem[mem[64]], _88368, _88369, gasForProcessing, 1, tx.origin);
                                                                    else:
                                                                        if not stor7:
                                                                            call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                 gas gas_remaining wei
                                                                                args gasForProcessing
                                                                            mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                            if ext_call.success:
                                                                                _87530 = mem[64]
                                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                                require return_data.size >= 96
                                                                                _89209 = mem[_87530 + 32]
                                                                                _89210 = mem[_87530 + 64]
                                                                                mem[mem[64]] = mem[_87530]
                                                                                mem[mem[64] + 64] = _89210
                                                                                mem[mem[64] + 96] = gasForProcessing
                                                                                emit ProcessedDividendTracker(mem[mem[64]], _89209, _89210, gasForProcessing, 1, tx.origin);
                                                            else:
                                                                if stor7:
                                                                    if not msg.sender:
                                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                                    if not arg1:
                                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                                    if balanceOf[address(msg.sender)] < arg2:
                                                                        revert with 0, 'ERC20: transfer amount exceeds balance'
                                                                    balanceOf[address(msg.sender)] -= arg2
                                                                    if balanceOf[arg1] > !arg2:
                                                                        revert with 'NH{q', 17
                                                                    balanceOf[arg1] += arg2
                                                                    emit Transfer(arg2, msg.sender, arg1);
                                                                    require ext_code.size(dividendTrackerAddress)
                                                                    call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                                         gas gas_remaining wei
                                                                        args msg.sender, balanceOf[address(msg.sender)]
                                                                    mem[0] = arg1
                                                                    mem[32] = 0
                                                                    require ext_code.size(dividendTrackerAddress)
                                                                    call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                                         gas gas_remaining wei
                                                                        args address(arg1), balanceOf[address(arg1)]
                                                                    if not ext_call.success:
                                                                        if not ext_call.success:
                                                                            if not stor7:
                                                                                call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                     gas gas_remaining wei
                                                                                    args gasForProcessing
                                                                                mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                                if ext_call.success:
                                                                                    _84212 = mem[64]
                                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                                    require return_data.size >= 96
                                                                                    _86342 = mem[_84212 + 32]
                                                                                    _86343 = mem[_84212 + 64]
                                                                                    mem[mem[64]] = mem[_84212]
                                                                                    mem[mem[64] + 64] = _86343
                                                                                    mem[mem[64] + 96] = gasForProcessing
                                                                                    emit ProcessedDividendTracker(mem[mem[64]], _86342, _86343, gasForProcessing, 1, tx.origin);
                                                                        else:
                                                                            if not stor7:
                                                                                call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                     gas gas_remaining wei
                                                                                    args gasForProcessing
                                                                                mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                                if ext_call.success:
                                                                                    _85121 = mem[64]
                                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                                    require return_data.size >= 96
                                                                                    _87513 = mem[_85121 + 32]
                                                                                    _87514 = mem[_85121 + 64]
                                                                                    mem[mem[64]] = mem[_85121]
                                                                                    mem[mem[64] + 64] = _87514
                                                                                    mem[mem[64] + 96] = gasForProcessing
                                                                                    emit ProcessedDividendTracker(mem[mem[64]], _87513, _87514, gasForProcessing, 1, tx.origin);
                                                                    else:
                                                                        if not ext_call.success:
                                                                            if not stor7:
                                                                                call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                     gas gas_remaining wei
                                                                                    args gasForProcessing
                                                                                mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                                if ext_call.success:
                                                                                    _85122 = mem[64]
                                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                                    require return_data.size >= 96
                                                                                    _87517 = mem[_85122 + 32]
                                                                                    _87518 = mem[_85122 + 64]
                                                                                    mem[mem[64]] = mem[_85122]
                                                                                    mem[mem[64] + 64] = _87518
                                                                                    mem[mem[64] + 96] = gasForProcessing
                                                                                    emit ProcessedDividendTracker(mem[mem[64]], _87517, _87518, gasForProcessing, 1, tx.origin);
                                                                        else:
                                                                            if not stor7:
                                                                                call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                     gas gas_remaining wei
                                                                                    args gasForProcessing
                                                                                mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                                if ext_call.success:
                                                                                    _86346 = mem[64]
                                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                                    require return_data.size >= 96
                                                                                    _88359 = mem[_86346 + 32]
                                                                                    _88360 = mem[_86346 + 64]
                                                                                    mem[mem[64]] = mem[_86346]
                                                                                    mem[mem[64] + 64] = _88360
                                                                                    mem[mem[64] + 96] = gasForProcessing
                                                                                    emit ProcessedDividendTracker(mem[mem[64]], _88359, _88360, gasForProcessing, 1, tx.origin);
                                                                else:
                                                                    if arg2 and totalFees > -1 / arg2:
                                                                        revert with 'NH{q', 17
                                                                    if not stor22[address(arg1)]:
                                                                        if arg2 < arg2 * totalFees / 100:
                                                                            revert with 'NH{q', 17
                                                                        if not msg.sender:
                                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                                        if not this.address:
                                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                                        if balanceOf[address(msg.sender)] < arg2 * totalFees / 100:
                                                                            revert with 0, 'ERC20: transfer amount exceeds balance'
                                                                        balanceOf[address(msg.sender)] -= arg2 * totalFees / 100
                                                                        if balanceOf[this.address] > !(arg2 * totalFees / 100):
                                                                            revert with 'NH{q', 17
                                                                        balanceOf[this.address] += arg2 * totalFees / 100
                                                                        emit Transfer((arg2 * totalFees / 100), msg.sender, this.address);
                                                                        if not msg.sender:
                                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                                        if not arg1:
                                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                                        if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100):
                                                                            revert with 0, 'ERC20: transfer amount exceeds balance'
                                                                        balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100)
                                                                        if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100)):
                                                                            revert with 'NH{q', 17
                                                                        balanceOf[arg1] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100)
                                                                        emit Transfer((arg2 - (arg2 * totalFees / 100)), msg.sender, arg1);
                                                                        require ext_code.size(dividendTrackerAddress)
                                                                        call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                                             gas gas_remaining wei
                                                                            args msg.sender, balanceOf[address(msg.sender)]
                                                                        mem[0] = arg1
                                                                        mem[32] = 0
                                                                        require ext_code.size(dividendTrackerAddress)
                                                                        call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                                             gas gas_remaining wei
                                                                            args address(arg1), balanceOf[address(arg1)]
                                                                        if not ext_call.success:
                                                                            if not ext_call.success:
                                                                                if not stor7:
                                                                                    call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                         gas gas_remaining wei
                                                                                        args gasForProcessing
                                                                                    mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                                    if ext_call.success:
                                                                                        _93883 = mem[64]
                                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                                        require return_data.size >= 96
                                                                                        _94701 = mem[_93883 + 32]
                                                                                        _94702 = mem[_93883 + 64]
                                                                                        mem[mem[64]] = mem[_93883]
                                                                                        mem[mem[64] + 64] = _94702
                                                                                        mem[mem[64] + 96] = gasForProcessing
                                                                                        emit ProcessedDividendTracker(mem[mem[64]], _94701, _94702, gasForProcessing, 1, tx.origin);
                                                                            else:
                                                                                if not stor7:
                                                                                    call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                         gas gas_remaining wei
                                                                                        args gasForProcessing
                                                                                    mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                                    if ext_call.success:
                                                                                        _94291 = mem[64]
                                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                                        require return_data.size >= 96
                                                                                        _95060 = mem[_94291 + 32]
                                                                                        _95061 = mem[_94291 + 64]
                                                                                        mem[mem[64]] = mem[_94291]
                                                                                        mem[mem[64] + 64] = _95061
                                                                                        mem[mem[64] + 96] = gasForProcessing
                                                                                        emit ProcessedDividendTracker(mem[mem[64]], _95060, _95061, gasForProcessing, 1, tx.origin);
                                                                        else:
                                                                            if not ext_call.success:
                                                                                if not stor7:
                                                                                    call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                         gas gas_remaining wei
                                                                                        args gasForProcessing
                                                                                    mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                                    if ext_call.success:
                                                                                        _94292 = mem[64]
                                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                                        require return_data.size >= 96
                                                                                        _95064 = mem[_94292 + 32]
                                                                                        _95065 = mem[_94292 + 64]
                                                                                        mem[mem[64]] = mem[_94292]
                                                                                        mem[mem[64] + 64] = _95065
                                                                                        mem[mem[64] + 96] = gasForProcessing
                                                                                        emit ProcessedDividendTracker(mem[mem[64]], _95064, _95065, gasForProcessing, 1, tx.origin);
                                                                            else:
                                                                                if not stor7:
                                                                                    call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                         gas gas_remaining wei
                                                                                        args gasForProcessing
                                                                                    mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                                    if ext_call.success:
                                                                                        _94705 = mem[64]
                                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                                        require return_data.size >= 96
                                                                                        _95352 = mem[_94705 + 32]
                                                                                        _95353 = mem[_94705 + 64]
                                                                                        mem[mem[64]] = mem[_94705]
                                                                                        mem[mem[64] + 64] = _95353
                                                                                        mem[mem[64] + 96] = gasForProcessing
                                                                                        emit ProcessedDividendTracker(mem[mem[64]], _95352, _95353, gasForProcessing, 1, tx.origin);
                                                                    else:
                                                                        if arg2 and sellFeeIncreaseFactor > -1 / arg2:
                                                                            revert with 'NH{q', 17
                                                                        if arg2 * totalFees / 100 > !(arg2 * sellFeeIncreaseFactor / 100):
                                                                            revert with 'NH{q', 17
                                                                        if arg2 < (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100):
                                                                            revert with 'NH{q', 17
                                                                        if not msg.sender:
                                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                                        if not this.address:
                                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                                        if balanceOf[address(msg.sender)] < (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100):
                                                                            revert with 0, 'ERC20: transfer amount exceeds balance'
                                                                        balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)
                                                                        if balanceOf[this.address] > !((arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)):
                                                                            revert with 'NH{q', 17
                                                                        balanceOf[this.address] = balanceOf[this.address] + (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)
                                                                        emit Transfer(((arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)), msg.sender, this.address);
                                                                        if not msg.sender:
                                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                                        if not arg1:
                                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                                        if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100):
                                                                            revert with 0, 'ERC20: transfer amount exceeds balance'
                                                                        balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100) + (arg2 * sellFeeIncreaseFactor / 100)
                                                                        if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)):
                                                                            revert with 'NH{q', 17
                                                                        balanceOf[arg1] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)
                                                                        emit Transfer((arg2 - (arg2 * totalFees / 100) - (arg2 * sellFeeIncreaseFactor / 100)), msg.sender, arg1);
                                                                        require ext_code.size(dividendTrackerAddress)
                                                                        call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                                             gas gas_remaining wei
                                                                            args msg.sender, balanceOf[address(msg.sender)]
                                                                        mem[0] = arg1
                                                                        mem[32] = 0
                                                                        require ext_code.size(dividendTrackerAddress)
                                                                        call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                                             gas gas_remaining wei
                                                                            args address(arg1), balanceOf[address(arg1)]
                                                                        if not ext_call.success:
                                                                            if not ext_call.success:
                                                                                if not stor7:
                                                                                    call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                         gas gas_remaining wei
                                                                                        args gasForProcessing
                                                                                    mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                                    if ext_call.success:
                                                                                        _97246 = mem[64]
                                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                                        require return_data.size >= 96
                                                                                        _97918 = mem[_97246 + 32]
                                                                                        _97919 = mem[_97246 + 64]
                                                                                        mem[mem[64]] = mem[_97246]
                                                                                        mem[mem[64] + 64] = _97919
                                                                                        mem[mem[64] + 96] = gasForProcessing
                                                                                        emit ProcessedDividendTracker(mem[mem[64]], _97918, _97919, gasForProcessing, 1, tx.origin);
                                                                            else:
                                                                                if not stor7:
                                                                                    call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                         gas gas_remaining wei
                                                                                        args gasForProcessing
                                                                                    mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                                    if ext_call.success:
                                                                                        _97535 = mem[64]
                                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                                        require return_data.size >= 96
                                                                                        _98252 = mem[_97535 + 32]
                                                                                        _98253 = mem[_97535 + 64]
                                                                                        mem[mem[64]] = mem[_97535]
                                                                                        mem[mem[64] + 64] = _98253
                                                                                        mem[mem[64] + 96] = gasForProcessing
                                                                                        emit ProcessedDividendTracker(mem[mem[64]], _98252, _98253, gasForProcessing, 1, tx.origin);
                                                                        else:
                                                                            if not ext_call.success:
                                                                                if not stor7:
                                                                                    call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                         gas gas_remaining wei
                                                                                        args gasForProcessing
                                                                                    mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                                    if ext_call.success:
                                                                                        _97536 = mem[64]
                                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                                        require return_data.size >= 96
                                                                                        _98256 = mem[_97536 + 32]
                                                                                        _98257 = mem[_97536 + 64]
                                                                                        mem[mem[64]] = mem[_97536]
                                                                                        mem[mem[64] + 64] = _98257
                                                                                        mem[mem[64] + 96] = gasForProcessing
                                                                                        emit ProcessedDividendTracker(mem[mem[64]], _98256, _98257, gasForProcessing, 1, tx.origin);
                                                                            else:
                                                                                if not stor7:
                                                                                    call dividendTrackerAddress.process(uint256 arg1) with:
                                                                                         gas gas_remaining wei
                                                                                        args gasForProcessing
                                                                                    mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                                    if ext_call.success:
                                                                                        _97922 = mem[64]
                                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                                        require return_data.size >= 96
                                                                                        _98497 = mem[_97922 + 32]
                                                                                        _98498 = mem[_97922 + 64]
                                                                                        mem[mem[64]] = mem[_97922]
                                                                                        mem[mem[64] + 64] = _98498
                                                                                        mem[mem[64] + 96] = gasForProcessing
                                                                                        emit ProcessedDividendTracker(mem[mem[64]], _98497, _98498, gasForProcessing, 1, tx.origin);
    return 1
}



}
