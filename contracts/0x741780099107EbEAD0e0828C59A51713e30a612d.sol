contract main {




// =====================  Runtime code  =====================


address owner;
mapping of uint8 stor1;
address sub_9b8e5563Address;
uint128 stor3;
uint128 stor3; offset 128
uint256 rewardsPerSecond;
array of struct poolInfo;
array of struct sub_334d0bbd;
mapping of struct userInfo;
uint256 totalAllocPoint;
uint256 startTime;
array of uint256 stor62514009886607029107290561805838585334079798074568712924583230797734656856476;
array of uint256 stor62514009886607029107290561805838585334079798074568712924583230797734656856477;
array of uint256 stor62514009886607029107290561805838585334079798074568712924583230797734656856478;

function poolLength() payable {
    return poolInfo.length
}

function poolInfo(uint256 arg1) payable {
    require calldata.size - 4 >= 32
    require arg1 < poolInfo.length
    return poolInfo[arg1].field_0, poolInfo[arg1].field_256, poolInfo[arg1].field_512, poolInfo[arg1].field_768
}

function totalAllocPoint() payable {
    return totalAllocPoint
}

function sub_334d0bbd(?) payable {
    require calldata.size - 4 >= 32
    require arg1 < sub_334d0bbd.length
    return sub_334d0bbd[arg1].field_0, sub_334d0bbd[arg1].field_128
}

function startTime() payable {
    return startTime
}

function owner() payable {
    return owner
}

function userInfo(uint256 arg1, address arg2) payable {
    require calldata.size - 4 >= 64
    return userInfo[arg1][arg2].field_0, userInfo[arg1][arg2].field_256
}

function sub_9b8e5563(?) payable {
    return sub_9b8e5563Address
}

function keeper(address arg1) payable {
    require calldata.size - 4 >= 32
    return bool(uint8(stor1[address(arg1)]))
}

function rewardsPerSecond() payable {
    return rewardsPerSecond
}

function _fallback() payable {
    revert
}

function start() payable {
    if owner != msg.sender:
        revert with 0, 'wOwnable: caller is not the owne'
    require not startTime
    startTime = block.timestamp
}

function renounceOwnership() payable {
    if owner != msg.sender:
        revert with 0, 'wOwnable: caller is not the owne'
    emit OwnershipTransferred(owner, 0);
    owner = 0
}

function setMinter(address arg1) payable {
    require calldata.size - 4 >= 32
    if owner != msg.sender:
        revert with 0, 'wOwnable: caller is not the owne'
    require not sub_9b8e5563Address
    sub_9b8e5563Address = arg1
}

function sub_58e82a99(?) payable {
    require calldata.size - 4 >= 32
    if owner != msg.sender:
        revert with 0, 'wOwnable: caller is not the owne'
    emit 0x150c3811: arg1, not uint8(stor1[address(arg1)])
    uint256(stor1[address(arg1)]) = not bool(uint8(stor1[address(arg1)])) or Mask(248, 8, uint256(stor1[address(arg1)]))
}

function transferOwnership(address arg1) payable {
    require calldata.size - 4 >= 32
    if owner != msg.sender:
        revert with 0, 'wOwnable: caller is not the owne'
    if not arg1:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    32,
                    38,
                    0xfe4f776e61626c653a206e6577206f776e657220697320746865207a65726f20616464726573,
                    mem[202 len 26]
    emit OwnershipTransferred(owner, arg1);
    owner = arg1
}

function sub_cc708166(?) payable {
    if owner != msg.sender:
        revert with 0, 'wOwnable: caller is not the owne'
    if startTime:
        if sub_334d0bbd.length > 0:
            require sub_334d0bbd.length - 1 < sub_334d0bbd.length
            if startTime > block.timestamp:
                revert with 0, 'SafeMath: subtraction overflow'
            if block.timestamp - startTime > sub_334d0bbd[sub_334d0bbd.length].field_0:
                rewardsPerSecond = sub_334d0bbd[sub_334d0bbd.length].field_0
                require sub_334d0bbd.length
                sub_334d0bbd[sub_334d0bbd.length].field_0 = 0
                sub_334d0bbd.length--
}

function emergencyWithdraw(uint256 arg1) payable {
    require calldata.size - 4 >= 32
    require arg1 < poolInfo.length
    if eth.balance(this.address) < 0:
        revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
    if not ext_code.size(poolInfo[arg1].field_0):
        revert with 0, 'Address: call to non-contract'
    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, userInfo[arg1][msg.sender].field_32
    mem[324 len 0] = 0
    call poolInfo[arg1].field_0 with:
       funct uint32(msg.sender)
         gas gas_remaining wei
        args userInfo[arg1][msg.sender].field_0, mem[324 len 4]
    if not return_data.size:
        if not ext_call.success:
            revert with unknown_0xa9059cbb(?????), msg.sender, userInfo[arg1][msg.sender].field_0
        if not unknown_0xa9059cbb(?????), Mask(224, 32, msg.sender) >> 32:
            revert with 0, 32, 42, 0x725361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565, mem[370 len 22]
    else:
        mem[292 len return_data.size] = ext_call.return_data[0 len return_data.size]
        if not ext_call.success:
            if return_data.size:
                revert with ext_call.return_data[0 len return_data.size]
            revert with 0, 'SafeERC20: low-level call failed'
        if return_data.size:
            require return_data.size >= 32
            if not mem[292]:
                revert with 0, 
                            32,
                            42,
                            0x725361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565,
                            mem[ceil32(return_data.size) + 371 len 22]
    emit EmergencyWithdraw(userInfo[arg1][msg.sender].field_0, msg.sender, arg1);
    userInfo[arg1][msg.sender].field_0 = 0
    userInfo[arg1][msg.sender].field_256 = 0
}

function sub_25b71c2c(?) payable {
    require calldata.size - 4 >= 64
    if not uint8(stor1[address(msg.sender)]):
        revert with 0, 'Keepers: caller is not a keeper'
    require arg1 < poolInfo.length
    require ext_code.size(poolInfo[arg1].field_0)
    staticcall poolInfo[arg1].field_0.token0() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_code.size(poolInfo[arg1].field_0)
    staticcall poolInfo[arg1].field_0.token1() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_code.size(address(ext_call.return_data[0]))
    staticcall address(ext_call.return_data[0]).0x70a08231 with:
            gas gas_remaining wei
           args this.address
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_code.size(address(ext_call.return_data[0]))
    staticcall address(ext_call.return_data[0]).0x70a08231 with:
            gas gas_remaining wei
           args this.address
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_code.size(poolInfo[arg1].field_0)
    call poolInfo[arg1].field_0.claimFees() with:
         gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 64
    require ext_code.size(address(ext_call.return_data[0]))
    staticcall address(ext_call.return_data[0]).0x70a08231 with:
            gas gas_remaining wei
           args this.address
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_code.size(address(ext_call.return_data[0]))
    staticcall address(ext_call.return_data[0]).0x70a08231 with:
            gas gas_remaining wei
           args this.address
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_code.size(address(ext_call.return_data[0]))
    call address(ext_call.return_data[0]).0xa9059cbb with:
         gas gas_remaining wei
        args address(arg2), 0
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_code.size(address(ext_call.return_data[0]))
    call address(ext_call.return_data[0]).0xa9059cbb with:
         gas gas_remaining wei
        args address(arg2), 0
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
}

function set(uint256 arg1, uint256 arg2, bool arg3) payable {
    require calldata.size - 4 >= 96
    if owner != msg.sender:
        revert with 0, 'wOwnable: caller is not the owne'
    if arg3:
        idx = 0
        while idx < poolInfo.length:
            mem[0] = 4
            if block.timestamp > poolInfo[idx].field_512:
                mem[100] = this.address
                require ext_code.size(poolInfo[idx].field_0)
                staticcall poolInfo[idx].field_0.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                mem[96] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0]:
                    if totalAllocPoint:
                        if poolInfo[idx].field_512 > block.timestamp:
                            revert with 0, 'SafeMath: subtraction overflow'
                        if not block.timestamp - poolInfo[idx].field_512:
                            if totalAllocPoint <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require totalAllocPoint
                            if not 0 / totalAllocPoint:
                                if ext_call.return_data[0] <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_call.return_data[0]
                                if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                    revert with 0, 'SafeMath: addition overflow'
                                poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                            else:
                                if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                if ext_call.return_data[0] <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_call.return_data[0]
                                if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                    revert with 0, 'SafeMath: addition overflow'
                                poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                        else:
                            if (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond) / block.timestamp - poolInfo[idx].field_512 != rewardsPerSecond:
                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                            if not (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond):
                                if totalAllocPoint <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require totalAllocPoint
                                if not 0 / totalAllocPoint:
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                        revert with 0, 'SafeMath: addition overflow'
                                    poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                else:
                                    if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                        revert with 0, 'SafeMath: addition overflow'
                                    poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                            else:
                                if (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond) != poolInfo[idx].field_256:
                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                if totalAllocPoint <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require totalAllocPoint
                                if not (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint:
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                        revert with 0, 'SafeMath: addition overflow'
                                    poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                else:
                                    if 10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    if (10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                        revert with 0, 'SafeMath: addition overflow'
                                    poolInfo[idx].field_768 += 10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                poolInfo[idx].field_512 = block.timestamp
            idx = idx + 1
            continue 
    require arg1 < poolInfo.length
    if poolInfo[arg1].field_256 > totalAllocPoint:
        revert with 0, 'SafeMath: subtraction overflow'
    if arg2 < 0:
        revert with 0, 'SafeMath: addition overflow'
    totalAllocPoint = arg2 + totalAllocPoint - poolInfo[arg1].field_256
    require arg1 < poolInfo.length
    poolInfo[arg1].field_256 = arg2
}

function claimableReward(uint256 arg1, address arg2) payable {
    require calldata.size - 4 >= 64
    if not userInfo[arg1][address(arg2)].field_0:
        return 0
    require arg1 < poolInfo.length
    require ext_code.size(poolInfo[arg1].field_0)
    staticcall poolInfo[arg1].field_0.0x70a08231 with:
            gas gas_remaining wei
           args this.address
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if block.timestamp <= poolInfo[arg1].field_512:
        if not userInfo[arg1][address(arg2)].field_0:
            if userInfo[arg1][address(arg2)].field_256 > 0:
                revert with 0, 'SafeMath: subtraction overflow'
            return -userInfo[arg1][address(arg2)].field_256
        if poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0 / userInfo[arg1][address(arg2)].field_0 != poolInfo[arg1].field_768:
            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
        if userInfo[arg1][address(arg2)].field_256 > poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0 / 10^12:
            revert with 0, 'SafeMath: subtraction overflow'
        return ((poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0 / 10^12) - userInfo[arg1][address(arg2)].field_256)
    if not ext_call.return_data[0]:
        if not userInfo[arg1][address(arg2)].field_0:
            if userInfo[arg1][address(arg2)].field_256 > 0:
                revert with 0, 'SafeMath: subtraction overflow'
            return -userInfo[arg1][address(arg2)].field_256
        if poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0 / userInfo[arg1][address(arg2)].field_0 != poolInfo[arg1].field_768:
            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
        if userInfo[arg1][address(arg2)].field_256 > poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0 / 10^12:
            revert with 0, 'SafeMath: subtraction overflow'
        return ((poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0 / 10^12) - userInfo[arg1][address(arg2)].field_256)
    if not totalAllocPoint:
        if not userInfo[arg1][address(arg2)].field_0:
            if userInfo[arg1][address(arg2)].field_256 > 0:
                revert with 0, 'SafeMath: subtraction overflow'
            return -userInfo[arg1][address(arg2)].field_256
        if poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0 / userInfo[arg1][address(arg2)].field_0 != poolInfo[arg1].field_768:
            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
        if userInfo[arg1][address(arg2)].field_256 > poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0 / 10^12:
            revert with 0, 'SafeMath: subtraction overflow'
        return ((poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0 / 10^12) - userInfo[arg1][address(arg2)].field_256)
    if poolInfo[arg1].field_512 > block.timestamp:
        revert with 0, 'SafeMath: subtraction overflow'
    if not block.timestamp - poolInfo[arg1].field_512:
        if totalAllocPoint <= 0:
            revert with 0, 'SafeMath: division by zero'
        require totalAllocPoint
        if not 0 / totalAllocPoint:
            if ext_call.return_data[0] <= 0:
                revert with 0, 'SafeMath: division by zero'
            require ext_call.return_data[0]
            if (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                revert with 0, 'SafeMath: addition overflow'
            if not userInfo[arg1][address(arg2)].field_0:
                if userInfo[arg1][address(arg2)].field_256 > 0:
                    revert with 0, 'SafeMath: subtraction overflow'
                return -userInfo[arg1][address(arg2)].field_256
            if (0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / userInfo[arg1][address(arg2)].field_0 != (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768:
                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
            if userInfo[arg1][address(arg2)].field_256 > (0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12:
                revert with 0, 'SafeMath: subtraction overflow'
            return (((0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12) - userInfo[arg1][address(arg2)].field_256)
        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
        if ext_call.return_data[0] <= 0:
            revert with 0, 'SafeMath: division by zero'
        require ext_call.return_data[0]
        if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
            revert with 0, 'SafeMath: addition overflow'
        if not userInfo[arg1][address(arg2)].field_0:
            if userInfo[arg1][address(arg2)].field_256 > 0:
                revert with 0, 'SafeMath: subtraction overflow'
            return -userInfo[arg1][address(arg2)].field_256
        if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / userInfo[arg1][address(arg2)].field_0 != (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[arg1].field_768:
            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
        if userInfo[arg1][address(arg2)].field_256 > (10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12:
            revert with 0, 'SafeMath: subtraction overflow'
        return (((10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12) - userInfo[arg1][address(arg2)].field_256)
    if (block.timestamp * rewardsPerSecond) - (poolInfo[arg1].field_512 * rewardsPerSecond) / block.timestamp - poolInfo[arg1].field_512 != rewardsPerSecond:
        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
    if not (block.timestamp * rewardsPerSecond) - (poolInfo[arg1].field_512 * rewardsPerSecond):
        if totalAllocPoint <= 0:
            revert with 0, 'SafeMath: division by zero'
        require totalAllocPoint
        if not 0 / totalAllocPoint:
            if ext_call.return_data[0] <= 0:
                revert with 0, 'SafeMath: division by zero'
            require ext_call.return_data[0]
            if (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                revert with 0, 'SafeMath: addition overflow'
            if not userInfo[arg1][address(arg2)].field_0:
                if userInfo[arg1][address(arg2)].field_256 > 0:
                    revert with 0, 'SafeMath: subtraction overflow'
                return -userInfo[arg1][address(arg2)].field_256
            if (0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / userInfo[arg1][address(arg2)].field_0 != (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768:
                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
            if userInfo[arg1][address(arg2)].field_256 > (0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12:
                revert with 0, 'SafeMath: subtraction overflow'
            return (((0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12) - userInfo[arg1][address(arg2)].field_256)
        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
        if ext_call.return_data[0] <= 0:
            revert with 0, 'SafeMath: division by zero'
        require ext_call.return_data[0]
        if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
            revert with 0, 'SafeMath: addition overflow'
        if not userInfo[arg1][address(arg2)].field_0:
            if userInfo[arg1][address(arg2)].field_256 > 0:
                revert with 0, 'SafeMath: subtraction overflow'
            return -userInfo[arg1][address(arg2)].field_256
        if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / userInfo[arg1][address(arg2)].field_0 != (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[arg1].field_768:
            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
        if userInfo[arg1][address(arg2)].field_256 > (10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12:
            revert with 0, 'SafeMath: subtraction overflow'
        return (((10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12) - userInfo[arg1][address(arg2)].field_256)
    if (block.timestamp * rewardsPerSecond * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardsPerSecond * poolInfo[arg1].field_256) / (block.timestamp * rewardsPerSecond) - (poolInfo[arg1].field_512 * rewardsPerSecond) != poolInfo[arg1].field_256:
        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
    if totalAllocPoint <= 0:
        revert with 0, 'SafeMath: division by zero'
    require totalAllocPoint
    if not (block.timestamp * rewardsPerSecond * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardsPerSecond * poolInfo[arg1].field_256) / totalAllocPoint:
        if ext_call.return_data[0] <= 0:
            revert with 0, 'SafeMath: division by zero'
        require ext_call.return_data[0]
        if (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
            revert with 0, 'SafeMath: addition overflow'
        if not userInfo[arg1][address(arg2)].field_0:
            if userInfo[arg1][address(arg2)].field_256 > 0:
                revert with 0, 'SafeMath: subtraction overflow'
            return -userInfo[arg1][address(arg2)].field_256
        if (0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / userInfo[arg1][address(arg2)].field_0 != (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768:
            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
        if userInfo[arg1][address(arg2)].field_256 > (0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12:
            revert with 0, 'SafeMath: subtraction overflow'
        return (((0 / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12) - userInfo[arg1][address(arg2)].field_256)
    if 10^12 * (block.timestamp * rewardsPerSecond * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardsPerSecond * poolInfo[arg1].field_256) / totalAllocPoint / (block.timestamp * rewardsPerSecond * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardsPerSecond * poolInfo[arg1].field_256) / totalAllocPoint != 10^12:
        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
    if ext_call.return_data[0] <= 0:
        revert with 0, 'SafeMath: division by zero'
    require ext_call.return_data[0]
    if (10^12 * (block.timestamp * rewardsPerSecond * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardsPerSecond * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
        revert with 0, 'SafeMath: addition overflow'
    if not userInfo[arg1][address(arg2)].field_0:
        if userInfo[arg1][address(arg2)].field_256 > 0:
            revert with 0, 'SafeMath: subtraction overflow'
        return -userInfo[arg1][address(arg2)].field_256
    if (10^12 * (block.timestamp * rewardsPerSecond * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardsPerSecond * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / userInfo[arg1][address(arg2)].field_0 != (10^12 * (block.timestamp * rewardsPerSecond * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardsPerSecond * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0]) + poolInfo[arg1].field_768:
        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
    if userInfo[arg1][address(arg2)].field_256 > (10^12 * (block.timestamp * rewardsPerSecond * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardsPerSecond * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12:
        revert with 0, 'SafeMath: subtraction overflow'
    return (((10^12 * (block.timestamp * rewardsPerSecond * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardsPerSecond * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0] * userInfo[arg1][address(arg2)].field_0) + (poolInfo[arg1].field_768 * userInfo[arg1][address(arg2)].field_0) / 10^12) - userInfo[arg1][address(arg2)].field_256)
}

function sub_0c5ae93a(?) payable {
    mem[64] = 96
    require calldata.size - 4 >= 32
    idx = 0
    while idx < poolInfo.length:
        mem[0] = arg1
        mem[32] = sha3(idx, 6)
        _133 = mem[64]
        mem[64] = mem[64] + 64
        mem[_133] = userInfo[idx][address(arg1)].field_0
        mem[_133 + 32] = userInfo[idx][address(arg1)].field_256
        if userInfo[idx][address(arg1)].field_0:
            require idx < poolInfo.length
            mem[0] = 4
            _135 = mem[64]
            mem[64] = mem[64] + 128
            mem[_135] = poolInfo[idx].field_0
            mem[_135 + 32] = poolInfo[idx].field_256
            mem[_135 + 64] = poolInfo[idx].field_512
            mem[_135 + 96] = poolInfo[idx].field_768
            mem[mem[64] + 4] = this.address
            require ext_code.size(poolInfo[idx].field_0)
            staticcall poolInfo[idx].field_0.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if block.timestamp <= poolInfo[idx].field_512:
                if not userInfo[idx][address(arg1)].field_0:
                    if userInfo[idx][address(arg1)].field_256 > 0:
                        revert with 0, 'SafeMath: subtraction overflow'
                else:
                    if poolInfo[idx].field_768 * userInfo[idx][address(arg1)].field_0 / userInfo[idx][address(arg1)].field_0 != poolInfo[idx].field_768:
                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                    if userInfo[idx][address(arg1)].field_256 > poolInfo[idx].field_768 * userInfo[idx][address(arg1)].field_0 / 10^12:
                        revert with 0, 'SafeMath: subtraction overflow'
            else:
                if not ext_call.return_data[0]:
                    if not userInfo[idx][address(arg1)].field_0:
                        if userInfo[idx][address(arg1)].field_256 > 0:
                            revert with 0, 'SafeMath: subtraction overflow'
                    else:
                        if poolInfo[idx].field_768 * userInfo[idx][address(arg1)].field_0 / userInfo[idx][address(arg1)].field_0 != poolInfo[idx].field_768:
                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                        if userInfo[idx][address(arg1)].field_256 > poolInfo[idx].field_768 * userInfo[idx][address(arg1)].field_0 / 10^12:
                            revert with 0, 'SafeMath: subtraction overflow'
                else:
                    if not totalAllocPoint:
                        if not userInfo[idx][address(arg1)].field_0:
                            if userInfo[idx][address(arg1)].field_256 > 0:
                                revert with 0, 'SafeMath: subtraction overflow'
                        else:
                            if poolInfo[idx].field_768 * userInfo[idx][address(arg1)].field_0 / userInfo[idx][address(arg1)].field_0 != poolInfo[idx].field_768:
                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                            if userInfo[idx][address(arg1)].field_256 > poolInfo[idx].field_768 * userInfo[idx][address(arg1)].field_0 / 10^12:
                                revert with 0, 'SafeMath: subtraction overflow'
                    else:
                        if poolInfo[idx].field_512 > block.timestamp:
                            revert with 0, 'SafeMath: subtraction overflow'
                        if not block.timestamp - poolInfo[idx].field_512:
                            if totalAllocPoint <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require totalAllocPoint
                            if not 0 / totalAllocPoint:
                                if ext_call.return_data[0] <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_call.return_data[0]
                                if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                    revert with 0, 'SafeMath: addition overflow'
                                if not userInfo[idx][address(arg1)].field_0:
                                    if userInfo[idx][address(arg1)].field_256 > 0:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                else:
                                    if (0 / ext_call.return_data[0] * userInfo[idx][address(arg1)].field_0) + (poolInfo[idx].field_768 * userInfo[idx][address(arg1)].field_0) / userInfo[idx][address(arg1)].field_0 != (0 / ext_call.return_data[0]) + poolInfo[idx].field_768:
                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    if userInfo[idx][address(arg1)].field_256 > (0 / ext_call.return_data[0] * userInfo[idx][address(arg1)].field_0) + (poolInfo[idx].field_768 * userInfo[idx][address(arg1)].field_0) / 10^12:
                                        revert with 0, 'SafeMath: subtraction overflow'
                            else:
                                if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                if ext_call.return_data[0] <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_call.return_data[0]
                                if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                    revert with 0, 'SafeMath: addition overflow'
                                if not userInfo[idx][address(arg1)].field_0:
                                    if userInfo[idx][address(arg1)].field_256 > 0:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                else:
                                    if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[idx][address(arg1)].field_0) + (poolInfo[idx].field_768 * userInfo[idx][address(arg1)].field_0) / userInfo[idx][address(arg1)].field_0 != (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768:
                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    if userInfo[idx][address(arg1)].field_256 > (10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[idx][address(arg1)].field_0) + (poolInfo[idx].field_768 * userInfo[idx][address(arg1)].field_0) / 10^12:
                                        revert with 0, 'SafeMath: subtraction overflow'
                        else:
                            if (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond) / block.timestamp - poolInfo[idx].field_512 != rewardsPerSecond:
                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                            if not (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond):
                                if totalAllocPoint <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require totalAllocPoint
                                if not 0 / totalAllocPoint:
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                        revert with 0, 'SafeMath: addition overflow'
                                    if not userInfo[idx][address(arg1)].field_0:
                                        if userInfo[idx][address(arg1)].field_256 > 0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                    else:
                                        if (0 / ext_call.return_data[0] * userInfo[idx][address(arg1)].field_0) + (poolInfo[idx].field_768 * userInfo[idx][address(arg1)].field_0) / userInfo[idx][address(arg1)].field_0 != (0 / ext_call.return_data[0]) + poolInfo[idx].field_768:
                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if userInfo[idx][address(arg1)].field_256 > (0 / ext_call.return_data[0] * userInfo[idx][address(arg1)].field_0) + (poolInfo[idx].field_768 * userInfo[idx][address(arg1)].field_0) / 10^12:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                else:
                                    if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                        revert with 0, 'SafeMath: addition overflow'
                                    if not userInfo[idx][address(arg1)].field_0:
                                        if userInfo[idx][address(arg1)].field_256 > 0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                    else:
                                        if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[idx][address(arg1)].field_0) + (poolInfo[idx].field_768 * userInfo[idx][address(arg1)].field_0) / userInfo[idx][address(arg1)].field_0 != (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768:
                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if userInfo[idx][address(arg1)].field_256 > (10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[idx][address(arg1)].field_0) + (poolInfo[idx].field_768 * userInfo[idx][address(arg1)].field_0) / 10^12:
                                            revert with 0, 'SafeMath: subtraction overflow'
                            else:
                                if (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond) != poolInfo[idx].field_256:
                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                if totalAllocPoint <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require totalAllocPoint
                                if not (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint:
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                        revert with 0, 'SafeMath: addition overflow'
                                    if not userInfo[idx][address(arg1)].field_0:
                                        if userInfo[idx][address(arg1)].field_256 > 0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                    else:
                                        if (0 / ext_call.return_data[0] * userInfo[idx][address(arg1)].field_0) + (poolInfo[idx].field_768 * userInfo[idx][address(arg1)].field_0) / userInfo[idx][address(arg1)].field_0 != (0 / ext_call.return_data[0]) + poolInfo[idx].field_768:
                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if userInfo[idx][address(arg1)].field_256 > (0 / ext_call.return_data[0] * userInfo[idx][address(arg1)].field_0) + (poolInfo[idx].field_768 * userInfo[idx][address(arg1)].field_0) / 10^12:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                else:
                                    if 10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    if (10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                        revert with 0, 'SafeMath: addition overflow'
                                    if not userInfo[idx][address(arg1)].field_0:
                                        if userInfo[idx][address(arg1)].field_256 > 0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                    else:
                                        if (10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0] * userInfo[idx][address(arg1)].field_0) + (poolInfo[idx].field_768 * userInfo[idx][address(arg1)].field_0) / userInfo[idx][address(arg1)].field_0 != (10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768:
                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if userInfo[idx][address(arg1)].field_256 > (10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0] * userInfo[idx][address(arg1)].field_0) + (poolInfo[idx].field_768 * userInfo[idx][address(arg1)].field_0) / 10^12:
                                            revert with 0, 'SafeMath: subtraction overflow'
        idx = idx + 1
        continue 
    return 0
}

function addPool(address arg1, uint256 arg2, bool arg3) payable {
    require calldata.size - 4 >= 96
    if owner != msg.sender:
        revert with 0, 'wOwnable: caller is not the owne'
    if not startTime:
        if arg3:
            idx = 0
            while idx < poolInfo.length:
                mem[0] = 4
                if block.timestamp > poolInfo[idx].field_512:
                    mem[100] = this.address
                    require ext_code.size(poolInfo[idx].field_0)
                    staticcall poolInfo[idx].field_0.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    mem[96] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0]:
                        if totalAllocPoint:
                            if poolInfo[idx].field_512 > block.timestamp:
                                revert with 0, 'SafeMath: subtraction overflow'
                            if not block.timestamp - poolInfo[idx].field_512:
                                if totalAllocPoint <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require totalAllocPoint
                                if not 0 / totalAllocPoint:
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                        revert with 0, 'SafeMath: addition overflow'
                                    poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                else:
                                    if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                        revert with 0, 'SafeMath: addition overflow'
                                    poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                            else:
                                if (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond) / block.timestamp - poolInfo[idx].field_512 != rewardsPerSecond:
                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                if not (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond):
                                    if totalAllocPoint <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require totalAllocPoint
                                    if not 0 / totalAllocPoint:
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                    else:
                                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                else:
                                    if (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond) != poolInfo[idx].field_256:
                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                    if totalAllocPoint <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require totalAllocPoint
                                    if not (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint:
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                    else:
                                        if 10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if (10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[idx].field_768 += 10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                    poolInfo[idx].field_512 = block.timestamp
                idx = idx + 1
                continue 
    else:
        if sub_334d0bbd.length <= 0:
            if arg3:
                idx = 0
                while idx < poolInfo.length:
                    mem[0] = 4
                    if block.timestamp > poolInfo[idx].field_512:
                        mem[100] = this.address
                        require ext_code.size(poolInfo[idx].field_0)
                        staticcall poolInfo[idx].field_0.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[96] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0]:
                            if totalAllocPoint:
                                if poolInfo[idx].field_512 > block.timestamp:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if not block.timestamp - poolInfo[idx].field_512:
                                    if totalAllocPoint <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require totalAllocPoint
                                    if not 0 / totalAllocPoint:
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                    else:
                                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                else:
                                    if (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond) / block.timestamp - poolInfo[idx].field_512 != rewardsPerSecond:
                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                    if not (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond):
                                        if totalAllocPoint <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require totalAllocPoint
                                        if not 0 / totalAllocPoint:
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                        else:
                                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                    else:
                                        if (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond) != poolInfo[idx].field_256:
                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                        if totalAllocPoint <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require totalAllocPoint
                                        if not (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint:
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                        else:
                                            if 10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[197 len 31]
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if (10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[idx].field_768 += 10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                        poolInfo[idx].field_512 = block.timestamp
                    idx = idx + 1
                    continue 
        else:
            require sub_334d0bbd.length - 1 < sub_334d0bbd.length
            if startTime > block.timestamp:
                revert with 0, 'SafeMath: subtraction overflow'
            if block.timestamp - startTime > sub_334d0bbd[sub_334d0bbd.length].field_0:
                idx = 0
                while idx < poolInfo.length:
                    mem[0] = 4
                    if block.timestamp > poolInfo[idx].field_512:
                        mem[164] = this.address
                        require ext_code.size(poolInfo[idx].field_0)
                        staticcall poolInfo[idx].field_0.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[160] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0]:
                            if totalAllocPoint:
                                if poolInfo[idx].field_512 > block.timestamp:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if not block.timestamp - poolInfo[idx].field_512:
                                    if totalAllocPoint <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require totalAllocPoint
                                    if not 0 / totalAllocPoint:
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                    else:
                                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                else:
                                    if (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond) / block.timestamp - poolInfo[idx].field_512 != rewardsPerSecond:
                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
                                    if not (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond):
                                        if totalAllocPoint <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require totalAllocPoint
                                        if not 0 / totalAllocPoint:
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                        else:
                                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                    else:
                                        if (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond) != poolInfo[idx].field_256:
                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
                                        if totalAllocPoint <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require totalAllocPoint
                                        if not (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint:
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                        else:
                                            if 10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if (10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[idx].field_768 += 10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                        poolInfo[idx].field_512 = block.timestamp
                    idx = idx + 1
                    continue 
                uint128(stor3.field_0) = sub_334d0bbd[sub_334d0bbd.length].field_0
                uint128(stor3.field_128) = 0
                require sub_334d0bbd.length
                sub_334d0bbd[sub_334d0bbd.length].field_0 = 0
                sub_334d0bbd.length--
            if arg3:
                idx = 0
                while idx < poolInfo.length:
                    mem[0] = 4
                    if block.timestamp > poolInfo[idx].field_512:
                        mem[164] = this.address
                        require ext_code.size(poolInfo[idx].field_0)
                        staticcall poolInfo[idx].field_0.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[160] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0]:
                            if totalAllocPoint:
                                if poolInfo[idx].field_512 > block.timestamp:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if not block.timestamp - poolInfo[idx].field_512:
                                    if totalAllocPoint <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require totalAllocPoint
                                    if not 0 / totalAllocPoint:
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                    else:
                                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                else:
                                    if (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond) / block.timestamp - poolInfo[idx].field_512 != rewardsPerSecond:
                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
                                    if not (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond):
                                        if totalAllocPoint <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require totalAllocPoint
                                        if not 0 / totalAllocPoint:
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                        else:
                                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                    else:
                                        if (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond) != poolInfo[idx].field_256:
                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
                                        if totalAllocPoint <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require totalAllocPoint
                                        if not (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint:
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                        else:
                                            if 10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if (10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[idx].field_768 += 10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                        poolInfo[idx].field_512 = block.timestamp
                    idx = idx + 1
                    continue 
    poolInfo.length++
    poolInfo[poolInfo.length].field_0 = arg1
    stor8A35[stor4.length] = arg2
    stor8A35[stor4.length] = block.timestamp
    stor8A35[stor4.length] = 0
    if arg2 + totalAllocPoint < totalAllocPoint:
        revert with 0, 'SafeMath: addition overflow'
    totalAllocPoint += arg2
}

function withdraw(uint256 arg1, uint256 arg2) payable {
    require calldata.size - 4 >= 64
    require arg1 < poolInfo.length
    if arg2 > userInfo[arg1][msg.sender].field_0:
        revert with 0, 'withdraw: not good'
    if not startTime:
        require arg1 < poolInfo.length
        if block.timestamp > poolInfo[arg1].field_512:
            require ext_code.size(poolInfo[arg1].field_0)
            staticcall poolInfo[arg1].field_0.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if ext_call.return_data[0]:
                if totalAllocPoint:
                    if poolInfo[arg1].field_512 > block.timestamp:
                        revert with 0, 'SafeMath: subtraction overflow'
                    if not block.timestamp - poolInfo[arg1].field_512:
                        if totalAllocPoint <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require totalAllocPoint
                        if not 0 / totalAllocPoint:
                            if ext_call.return_data[0] <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_call.return_data[0]
                            if (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                revert with 0, 'SafeMath: addition overflow'
                            poolInfo[arg1].field_768 += 0 / ext_call.return_data[0]
                        else:
                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                            32,
                                            33,
                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[197 len 31]
                            if ext_call.return_data[0] <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_call.return_data[0]
                            if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                revert with 0, 'SafeMath: addition overflow'
                            poolInfo[arg1].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                    else:
                        if (block.timestamp * rewardsPerSecond) - (poolInfo[arg1].field_512 * rewardsPerSecond) / block.timestamp - poolInfo[arg1].field_512 != rewardsPerSecond:
                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                        32,
                                        33,
                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[197 len 31]
                        if not (block.timestamp * rewardsPerSecond) - (poolInfo[arg1].field_512 * rewardsPerSecond):
                            if totalAllocPoint <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require totalAllocPoint
                            if not 0 / totalAllocPoint:
                                if ext_call.return_data[0] <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_call.return_data[0]
                                if (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                    revert with 0, 'SafeMath: addition overflow'
                                poolInfo[arg1].field_768 += 0 / ext_call.return_data[0]
                            else:
                                if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                32,
                                                33,
                                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[197 len 31]
                                if ext_call.return_data[0] <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_call.return_data[0]
                                if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                    revert with 0, 'SafeMath: addition overflow'
                                poolInfo[arg1].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                        else:
                            if (block.timestamp * rewardsPerSecond * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardsPerSecond * poolInfo[arg1].field_256) / (block.timestamp * rewardsPerSecond) - (poolInfo[arg1].field_512 * rewardsPerSecond) != poolInfo[arg1].field_256:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                            32,
                                            33,
                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[197 len 31]
                            if totalAllocPoint <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require totalAllocPoint
                            if not (block.timestamp * rewardsPerSecond * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardsPerSecond * poolInfo[arg1].field_256) / totalAllocPoint:
                                if ext_call.return_data[0] <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_call.return_data[0]
                                if (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                    revert with 0, 'SafeMath: addition overflow'
                                poolInfo[arg1].field_768 += 0 / ext_call.return_data[0]
                            else:
                                if 10^12 * (block.timestamp * rewardsPerSecond * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardsPerSecond * poolInfo[arg1].field_256) / totalAllocPoint / (block.timestamp * rewardsPerSecond * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardsPerSecond * poolInfo[arg1].field_256) / totalAllocPoint != 10^12:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                32,
                                                33,
                                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[197 len 31]
                                if ext_call.return_data[0] <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_call.return_data[0]
                                if (10^12 * (block.timestamp * rewardsPerSecond * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardsPerSecond * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                    revert with 0, 'SafeMath: addition overflow'
                                poolInfo[arg1].field_768 += 10^12 * (block.timestamp * rewardsPerSecond * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardsPerSecond * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0]
            poolInfo[arg1].field_512 = block.timestamp
        if not userInfo[arg1][msg.sender].field_0:
            if userInfo[arg1][msg.sender].field_256 > 0:
                revert with 0, 'SafeMath: subtraction overflow'
            if -userInfo[arg1][msg.sender].field_256:
                require ext_code.size(sub_9b8e5563Address)
                call sub_9b8e5563Address.0x40c10f19 with:
                     gas gas_remaining wei
                    args msg.sender, -userInfo[arg1][msg.sender].field_256
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require ext_code.size(sub_9b8e5563Address)
                call sub_9b8e5563Address.0x40c10f19 with:
                     gas gas_remaining wei
                    args owner, -userInfo[arg1][msg.sender].field_256 / 10
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
        else:
            if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                            32,
                            33,
                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                            mem[197 len 31]
            if userInfo[arg1][msg.sender].field_256 > poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12:
                revert with 0, 'SafeMath: subtraction overflow'
            if (poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12) - userInfo[arg1][msg.sender].field_256:
                require ext_code.size(sub_9b8e5563Address)
                call sub_9b8e5563Address.0x40c10f19 with:
                     gas gas_remaining wei
                    args msg.sender, (poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12) - userInfo[arg1][msg.sender].field_256
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require ext_code.size(sub_9b8e5563Address)
                call sub_9b8e5563Address.0x40c10f19 with:
                     gas gas_remaining wei
                    args owner, (poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12) - userInfo[arg1][msg.sender].field_256 / 10
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
        if arg2 > userInfo[arg1][msg.sender].field_0:
            revert with 0, 'SafeMath: subtraction overflow'
        userInfo[arg1][msg.sender].field_0 -= arg2
        if not userInfo[arg1][msg.sender].field_0 - arg2:
            userInfo[arg1][msg.sender].field_256 = 0
        else:
            if (userInfo[arg1][msg.sender].field_0 * poolInfo[arg1].field_768) - (arg2 * poolInfo[arg1].field_768) / userInfo[arg1][msg.sender].field_0 - arg2 != poolInfo[arg1].field_768:
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                            32,
                            33,
                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                            mem[197 len 31]
            userInfo[arg1][msg.sender].field_256 = (userInfo[arg1][msg.sender].field_0 * poolInfo[arg1].field_768) - (arg2 * poolInfo[arg1].field_768) / 10^12
        if eth.balance(this.address) < 0:
            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
        if not ext_code.size(poolInfo[arg1].field_0):
            revert with 0, 'Address: call to non-contract'
        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg2) >> 32
        mem[324 len 0] = 0
        call poolInfo[arg1].field_0 with:
           funct uint32(msg.sender)
             gas gas_remaining wei
            args Mask(224, 32, arg2) << 224, mem[324 len 4]
        if not return_data.size:
            if not ext_call.success:
                revert with unknown_0xa9059cbb(?????), msg.sender, arg2
            if not unknown_0xa9059cbb(?????), Mask(224, 32, msg.sender) >> 32:
                revert with 0, 32, 42, 0x725361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565, mem[370 len 22]
        else:
            mem[292 len return_data.size] = ext_call.return_data[0 len return_data.size]
            if not ext_call.success:
                if return_data.size:
                    revert with ext_call.return_data[0 len return_data.size]
                revert with 0, 'SafeERC20: low-level call failed'
            if return_data.size:
                require return_data.size >= 32
                if not mem[292]:
                    revert with 0, 
                                32,
                                42,
                                0x725361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565,
                                mem[ceil32(return_data.size) + 371 len 22]
    else:
        if sub_334d0bbd.length <= 0:
            require arg1 < poolInfo.length
            if block.timestamp > poolInfo[arg1].field_512:
                require ext_code.size(poolInfo[arg1].field_0)
                staticcall poolInfo[arg1].field_0.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0]:
                    if totalAllocPoint:
                        if poolInfo[arg1].field_512 > block.timestamp:
                            revert with 0, 'SafeMath: subtraction overflow'
                        if not block.timestamp - poolInfo[arg1].field_512:
                            if totalAllocPoint <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require totalAllocPoint
                            if not 0 / totalAllocPoint:
                                if ext_call.return_data[0] <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_call.return_data[0]
                                if (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                    revert with 0, 'SafeMath: addition overflow'
                                poolInfo[arg1].field_768 += 0 / ext_call.return_data[0]
                            else:
                                if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                32,
                                                33,
                                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[197 len 31]
                                if ext_call.return_data[0] <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_call.return_data[0]
                                if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                    revert with 0, 'SafeMath: addition overflow'
                                poolInfo[arg1].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                        else:
                            if (block.timestamp * rewardsPerSecond) - (poolInfo[arg1].field_512 * rewardsPerSecond) / block.timestamp - poolInfo[arg1].field_512 != rewardsPerSecond:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                            32,
                                            33,
                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[197 len 31]
                            if not (block.timestamp * rewardsPerSecond) - (poolInfo[arg1].field_512 * rewardsPerSecond):
                                if totalAllocPoint <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require totalAllocPoint
                                if not 0 / totalAllocPoint:
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    if (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                        revert with 0, 'SafeMath: addition overflow'
                                    poolInfo[arg1].field_768 += 0 / ext_call.return_data[0]
                                else:
                                    if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                        revert with 0, 'SafeMath: addition overflow'
                                    poolInfo[arg1].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                            else:
                                if (block.timestamp * rewardsPerSecond * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardsPerSecond * poolInfo[arg1].field_256) / (block.timestamp * rewardsPerSecond) - (poolInfo[arg1].field_512 * rewardsPerSecond) != poolInfo[arg1].field_256:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                32,
                                                33,
                                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[197 len 31]
                                if totalAllocPoint <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require totalAllocPoint
                                if not (block.timestamp * rewardsPerSecond * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardsPerSecond * poolInfo[arg1].field_256) / totalAllocPoint:
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    if (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                        revert with 0, 'SafeMath: addition overflow'
                                    poolInfo[arg1].field_768 += 0 / ext_call.return_data[0]
                                else:
                                    if 10^12 * (block.timestamp * rewardsPerSecond * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardsPerSecond * poolInfo[arg1].field_256) / totalAllocPoint / (block.timestamp * rewardsPerSecond * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardsPerSecond * poolInfo[arg1].field_256) / totalAllocPoint != 10^12:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    if (10^12 * (block.timestamp * rewardsPerSecond * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardsPerSecond * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                        revert with 0, 'SafeMath: addition overflow'
                                    poolInfo[arg1].field_768 += 10^12 * (block.timestamp * rewardsPerSecond * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardsPerSecond * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0]
                poolInfo[arg1].field_512 = block.timestamp
            if not userInfo[arg1][msg.sender].field_0:
                if userInfo[arg1][msg.sender].field_256 > 0:
                    revert with 0, 'SafeMath: subtraction overflow'
                if -userInfo[arg1][msg.sender].field_256:
                    require ext_code.size(sub_9b8e5563Address)
                    call sub_9b8e5563Address.0x40c10f19 with:
                         gas gas_remaining wei
                        args msg.sender, -userInfo[arg1][msg.sender].field_256
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require ext_code.size(sub_9b8e5563Address)
                    call sub_9b8e5563Address.0x40c10f19 with:
                         gas gas_remaining wei
                        args owner, -userInfo[arg1][msg.sender].field_256 / 10
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
            else:
                if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                32,
                                33,
                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                mem[197 len 31]
                if userInfo[arg1][msg.sender].field_256 > poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12:
                    revert with 0, 'SafeMath: subtraction overflow'
                if (poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12) - userInfo[arg1][msg.sender].field_256:
                    require ext_code.size(sub_9b8e5563Address)
                    call sub_9b8e5563Address.0x40c10f19 with:
                         gas gas_remaining wei
                        args msg.sender, (poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12) - userInfo[arg1][msg.sender].field_256
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require ext_code.size(sub_9b8e5563Address)
                    call sub_9b8e5563Address.0x40c10f19 with:
                         gas gas_remaining wei
                        args owner, (poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12) - userInfo[arg1][msg.sender].field_256 / 10
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
            if arg2 > userInfo[arg1][msg.sender].field_0:
                revert with 0, 'SafeMath: subtraction overflow'
            userInfo[arg1][msg.sender].field_0 -= arg2
            if not userInfo[arg1][msg.sender].field_0 - arg2:
                userInfo[arg1][msg.sender].field_256 = 0
            else:
                if (userInfo[arg1][msg.sender].field_0 * poolInfo[arg1].field_768) - (arg2 * poolInfo[arg1].field_768) / userInfo[arg1][msg.sender].field_0 - arg2 != poolInfo[arg1].field_768:
                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                32,
                                33,
                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                mem[197 len 31]
                userInfo[arg1][msg.sender].field_256 = (userInfo[arg1][msg.sender].field_0 * poolInfo[arg1].field_768) - (arg2 * poolInfo[arg1].field_768) / 10^12
            if eth.balance(this.address) < 0:
                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[366 len 26]
            if not ext_code.size(poolInfo[arg1].field_0):
                revert with 0, 'Address: call to non-contract'
            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg2) >> 32
            mem[324 len 0] = 0
            call poolInfo[arg1].field_0 with:
               funct uint32(msg.sender)
                 gas gas_remaining wei
                args Mask(224, 32, arg2) << 224, mem[324 len 4]
            if not return_data.size:
                if not ext_call.success:
                    revert with unknown_0xa9059cbb(?????), msg.sender, arg2
                if not unknown_0xa9059cbb(?????), Mask(224, 32, msg.sender) >> 32:
                    revert with 0, 32, 42, 0x725361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565, mem[370 len 22]
            else:
                mem[292 len return_data.size] = ext_call.return_data[0 len return_data.size]
                if not ext_call.success:
                    if return_data.size:
                        revert with ext_call.return_data[0 len return_data.size]
                    revert with 0, 'SafeERC20: low-level call failed'
                if return_data.size:
                    require return_data.size >= 32
                    if not mem[292]:
                        revert with 0, 
                                    32,
                                    42,
                                    0x725361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565,
                                    mem[ceil32(return_data.size) + 371 len 22]
        else:
            require sub_334d0bbd.length - 1 < sub_334d0bbd.length
            mem[128] = sub_334d0bbd[sub_334d0bbd.length].field_0
            if startTime > block.timestamp:
                revert with 0, 'SafeMath: subtraction overflow'
            if block.timestamp - startTime <= sub_334d0bbd[sub_334d0bbd.length].field_0:
                require arg1 < poolInfo.length
                if block.timestamp > poolInfo[arg1].field_512:
                    require ext_code.size(poolInfo[arg1].field_0)
                    staticcall poolInfo[arg1].field_0.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0]:
                        if totalAllocPoint:
                            if poolInfo[arg1].field_512 > block.timestamp:
                                revert with 0, 'SafeMath: subtraction overflow'
                            if not block.timestamp - poolInfo[arg1].field_512:
                                if totalAllocPoint <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require totalAllocPoint
                                if not 0 / totalAllocPoint:
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    if (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                        revert with 0, 'SafeMath: addition overflow'
                                    poolInfo[arg1].field_768 += 0 / ext_call.return_data[0]
                                else:
                                    if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                        revert with 0, 'SafeMath: addition overflow'
                                    poolInfo[arg1].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                            else:
                                if (block.timestamp * rewardsPerSecond) - (poolInfo[arg1].field_512 * rewardsPerSecond) / block.timestamp - poolInfo[arg1].field_512 != rewardsPerSecond:
                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
                                if not (block.timestamp * rewardsPerSecond) - (poolInfo[arg1].field_512 * rewardsPerSecond):
                                    if totalAllocPoint <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require totalAllocPoint
                                    if not 0 / totalAllocPoint:
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[arg1].field_768 += 0 / ext_call.return_data[0]
                                    else:
                                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[arg1].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                else:
                                    if (block.timestamp * rewardsPerSecond * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardsPerSecond * poolInfo[arg1].field_256) / (block.timestamp * rewardsPerSecond) - (poolInfo[arg1].field_512 * rewardsPerSecond) != poolInfo[arg1].field_256:
                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
                                    if totalAllocPoint <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require totalAllocPoint
                                    if not (block.timestamp * rewardsPerSecond * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardsPerSecond * poolInfo[arg1].field_256) / totalAllocPoint:
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[arg1].field_768 += 0 / ext_call.return_data[0]
                                    else:
                                        if 10^12 * (block.timestamp * rewardsPerSecond * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardsPerSecond * poolInfo[arg1].field_256) / totalAllocPoint / (block.timestamp * rewardsPerSecond * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardsPerSecond * poolInfo[arg1].field_256) / totalAllocPoint != 10^12:
                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if (10^12 * (block.timestamp * rewardsPerSecond * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardsPerSecond * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[arg1].field_768 += 10^12 * (block.timestamp * rewardsPerSecond * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardsPerSecond * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0]
                    poolInfo[arg1].field_512 = block.timestamp
                if not userInfo[arg1][msg.sender].field_0:
                    if userInfo[arg1][msg.sender].field_256 > 0:
                        revert with 0, 'SafeMath: subtraction overflow'
                    if -userInfo[arg1][msg.sender].field_256:
                        require ext_code.size(sub_9b8e5563Address)
                        call sub_9b8e5563Address.0x40c10f19 with:
                             gas gas_remaining wei
                            args msg.sender, -userInfo[arg1][msg.sender].field_256
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require ext_code.size(sub_9b8e5563Address)
                        call sub_9b8e5563Address.0x40c10f19 with:
                             gas gas_remaining wei
                            args owner, -userInfo[arg1][msg.sender].field_256 / 10
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                else:
                    if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
                    if userInfo[arg1][msg.sender].field_256 > poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12:
                        revert with 0, 'SafeMath: subtraction overflow'
                    if (poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12) - userInfo[arg1][msg.sender].field_256:
                        require ext_code.size(sub_9b8e5563Address)
                        call sub_9b8e5563Address.0x40c10f19 with:
                             gas gas_remaining wei
                            args msg.sender, (poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12) - userInfo[arg1][msg.sender].field_256
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require ext_code.size(sub_9b8e5563Address)
                        call sub_9b8e5563Address.0x40c10f19 with:
                             gas gas_remaining wei
                            args owner, (poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12) - userInfo[arg1][msg.sender].field_256 / 10
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                if arg2 > userInfo[arg1][msg.sender].field_0:
                    revert with 0, 'SafeMath: subtraction overflow'
                userInfo[arg1][msg.sender].field_0 -= arg2
                if not userInfo[arg1][msg.sender].field_0 - arg2:
                    userInfo[arg1][msg.sender].field_256 = 0
                else:
                    if (userInfo[arg1][msg.sender].field_0 * poolInfo[arg1].field_768) - (arg2 * poolInfo[arg1].field_768) / userInfo[arg1][msg.sender].field_0 - arg2 != poolInfo[arg1].field_768:
                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
                    userInfo[arg1][msg.sender].field_256 = (userInfo[arg1][msg.sender].field_0 * poolInfo[arg1].field_768) - (arg2 * poolInfo[arg1].field_768) / 10^12
                mem[196] = msg.sender
                mem[228] = arg2
                mem[160] = 68
                mem[196 len 28] = Mask(224, 32, msg.sender) >> 32
                mem[192 len 4] = unknown_0xa9059cbb(?????)
                mem[260] = 32
                mem[292] = 'SafeERC20: low-level call failed'
                if eth.balance(this.address) < 0:
                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[430 len 26]
                if not ext_code.size(poolInfo[arg1].field_0):
                    revert with 0, 'Address: call to non-contract'
                mem[324 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg2) >> 32
                mem[416 len 4] = 0
                mem[388 len 0] = 0
                call poolInfo[arg1].field_0 with:
                   funct uint32(msg.sender)
                     gas gas_remaining wei
                    args Mask(224, 32, arg2) << 224, mem[388 len 4]
            else:
                idx = 0
                while idx < poolInfo.length:
                    mem[0] = 4
                    if block.timestamp > poolInfo[idx].field_512:
                        mem[164] = this.address
                        require ext_code.size(poolInfo[idx].field_0)
                        staticcall poolInfo[idx].field_0.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[160] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0]:
                            if totalAllocPoint:
                                if poolInfo[idx].field_512 > block.timestamp:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if not block.timestamp - poolInfo[idx].field_512:
                                    if totalAllocPoint <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require totalAllocPoint
                                    if not 0 / totalAllocPoint:
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                    else:
                                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                else:
                                    if (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond) / block.timestamp - poolInfo[idx].field_512 != rewardsPerSecond:
                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
                                    if not (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond):
                                        if totalAllocPoint <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require totalAllocPoint
                                        if not 0 / totalAllocPoint:
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                        else:
                                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                    else:
                                        if (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond) != poolInfo[idx].field_256:
                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
                                        if totalAllocPoint <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require totalAllocPoint
                                        if not (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint:
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                        else:
                                            if 10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if (10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[idx].field_768 += 10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                        poolInfo[idx].field_512 = block.timestamp
                    idx = idx + 1
                    continue 
                uint128(stor3.field_0) = sub_334d0bbd[sub_334d0bbd.length].field_0
                uint128(stor3.field_128) = 0
                require sub_334d0bbd.length
                sub_334d0bbd[sub_334d0bbd.length].field_0 = 0
                sub_334d0bbd.length--
                require arg1 < poolInfo.length
                if block.timestamp > poolInfo[arg1].field_512:
                    require ext_code.size(poolInfo[arg1].field_0)
                    staticcall poolInfo[arg1].field_0.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0]:
                        if totalAllocPoint:
                            if poolInfo[arg1].field_512 > block.timestamp:
                                revert with 0, 'SafeMath: subtraction overflow'
                            if not block.timestamp - poolInfo[arg1].field_512:
                                if totalAllocPoint <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require totalAllocPoint
                                if not 0 / totalAllocPoint:
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    if (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                        revert with 0, 'SafeMath: addition overflow'
                                    poolInfo[arg1].field_768 += 0 / ext_call.return_data[0]
                                else:
                                    if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                        revert with 0, 'SafeMath: addition overflow'
                                    poolInfo[arg1].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                            else:
                                if (block.timestamp * rewardsPerSecond) - (poolInfo[arg1].field_512 * rewardsPerSecond) / block.timestamp - poolInfo[arg1].field_512 != rewardsPerSecond:
                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
                                if not (block.timestamp * rewardsPerSecond) - (poolInfo[arg1].field_512 * rewardsPerSecond):
                                    if totalAllocPoint <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require totalAllocPoint
                                    if not 0 / totalAllocPoint:
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[arg1].field_768 += 0 / ext_call.return_data[0]
                                    else:
                                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[arg1].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                else:
                                    if (block.timestamp * rewardsPerSecond * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardsPerSecond * poolInfo[arg1].field_256) / (block.timestamp * rewardsPerSecond) - (poolInfo[arg1].field_512 * rewardsPerSecond) != poolInfo[arg1].field_256:
                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
                                    if totalAllocPoint <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require totalAllocPoint
                                    if not (block.timestamp * rewardsPerSecond * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardsPerSecond * poolInfo[arg1].field_256) / totalAllocPoint:
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[arg1].field_768 += 0 / ext_call.return_data[0]
                                    else:
                                        if 10^12 * (block.timestamp * rewardsPerSecond * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardsPerSecond * poolInfo[arg1].field_256) / totalAllocPoint / (block.timestamp * rewardsPerSecond * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardsPerSecond * poolInfo[arg1].field_256) / totalAllocPoint != 10^12:
                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if (10^12 * (block.timestamp * rewardsPerSecond * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardsPerSecond * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[arg1].field_768 += 10^12 * (block.timestamp * rewardsPerSecond * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardsPerSecond * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0]
                    poolInfo[arg1].field_512 = block.timestamp
                if not userInfo[arg1][msg.sender].field_0:
                    if userInfo[arg1][msg.sender].field_256 > 0:
                        revert with 0, 'SafeMath: subtraction overflow'
                    if -userInfo[arg1][msg.sender].field_256:
                        require ext_code.size(sub_9b8e5563Address)
                        call sub_9b8e5563Address.0x40c10f19 with:
                             gas gas_remaining wei
                            args msg.sender, -userInfo[arg1][msg.sender].field_256
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require ext_code.size(sub_9b8e5563Address)
                        call sub_9b8e5563Address.0x40c10f19 with:
                             gas gas_remaining wei
                            args owner, -userInfo[arg1][msg.sender].field_256 / 10
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                else:
                    if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
                    if userInfo[arg1][msg.sender].field_256 > poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12:
                        revert with 0, 'SafeMath: subtraction overflow'
                    if (poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12) - userInfo[arg1][msg.sender].field_256:
                        require ext_code.size(sub_9b8e5563Address)
                        call sub_9b8e5563Address.0x40c10f19 with:
                             gas gas_remaining wei
                            args msg.sender, (poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12) - userInfo[arg1][msg.sender].field_256
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require ext_code.size(sub_9b8e5563Address)
                        call sub_9b8e5563Address.0x40c10f19 with:
                             gas gas_remaining wei
                            args owner, (poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12) - userInfo[arg1][msg.sender].field_256 / 10
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                if arg2 > userInfo[arg1][msg.sender].field_0:
                    revert with 0, 'SafeMath: subtraction overflow'
                userInfo[arg1][msg.sender].field_0 -= arg2
                if not userInfo[arg1][msg.sender].field_0 - arg2:
                    userInfo[arg1][msg.sender].field_256 = 0
                else:
                    if (userInfo[arg1][msg.sender].field_0 * poolInfo[arg1].field_768) - (arg2 * poolInfo[arg1].field_768) / userInfo[arg1][msg.sender].field_0 - arg2 != poolInfo[arg1].field_768:
                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
                    userInfo[arg1][msg.sender].field_256 = (userInfo[arg1][msg.sender].field_0 * poolInfo[arg1].field_768) - (arg2 * poolInfo[arg1].field_768) / 10^12
                mem[196] = msg.sender
                mem[228] = arg2
                mem[160] = 68
                mem[192 len 4] = unknown_0xa9059cbb(?????)
                mem[260] = 32
                mem[292] = 'SafeERC20: low-level call failed'
                if eth.balance(this.address) < 0:
                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[430 len 26]
                if not ext_code.size(poolInfo[arg1].field_0):
                    revert with 0, 'Address: call to non-contract'
                mem[324 len 64] = 0, msg.sender, Mask(224, 32, arg2) >> 32
                mem[416 len 4] = 0
                call poolInfo[arg1].field_0 with:
                   funct uint32(msg.sender)
                     gas gas_remaining wei
                    args arg2, 0, mem[388 len 4]
            if not return_data.size:
                if not ext_call.success:
                    if sub_334d0bbd[sub_334d0bbd.length].field_0:
                        revert with memory
                          from 128
                           len sub_334d0bbd[sub_334d0bbd.length].field_0
                    revert with 0, 'SafeERC20: low-level call failed'
                if sub_334d0bbd[sub_334d0bbd.length].field_0:
                    require sub_334d0bbd[sub_334d0bbd.length].field_0 >= 32
                    if not sub_334d0bbd[sub_334d0bbd.length].field_0:
                        revert with 0, 32, 42, 0x725361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565, mem[434 len 22]
            else:
                mem[356 len return_data.size] = ext_call.return_data[0 len return_data.size]
                if not ext_call.success:
                    if return_data.size:
                        revert with ext_call.return_data[0 len return_data.size]
                    revert with 0, 'SafeERC20: low-level call failed'
                if return_data.size:
                    require return_data.size >= 32
                    if not mem[356]:
                        revert with 0, 
                                    32,
                                    42,
                                    0x725361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565,
                                    mem[ceil32(return_data.size) + 435 len 22]
    emit Withdraw(arg2, msg.sender, arg1);
}

function deposit(uint256 arg1, uint256 arg2) payable {
    require calldata.size - 4 >= 64
    require arg1 < poolInfo.length
    if not startTime:
        require arg1 < poolInfo.length
        if block.timestamp > poolInfo[arg1].field_512:
            require ext_code.size(poolInfo[arg1].field_0)
            staticcall poolInfo[arg1].field_0.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if ext_call.return_data[0]:
                if totalAllocPoint:
                    if poolInfo[arg1].field_512 > block.timestamp:
                        revert with 0, 'SafeMath: subtraction overflow'
                    if not block.timestamp - poolInfo[arg1].field_512:
                        if totalAllocPoint <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require totalAllocPoint
                        if not 0 / totalAllocPoint:
                            if ext_call.return_data[0] <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_call.return_data[0]
                            if (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                revert with 0, 'SafeMath: addition overflow'
                            poolInfo[arg1].field_768 += 0 / ext_call.return_data[0]
                        else:
                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                            32,
                                            33,
                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[197 len 31]
                            if ext_call.return_data[0] <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require ext_call.return_data[0]
                            if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                revert with 0, 'SafeMath: addition overflow'
                            poolInfo[arg1].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                    else:
                        if (block.timestamp * rewardsPerSecond) - (poolInfo[arg1].field_512 * rewardsPerSecond) / block.timestamp - poolInfo[arg1].field_512 != rewardsPerSecond:
                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                        32,
                                        33,
                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[197 len 31]
                        if not (block.timestamp * rewardsPerSecond) - (poolInfo[arg1].field_512 * rewardsPerSecond):
                            if totalAllocPoint <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require totalAllocPoint
                            if not 0 / totalAllocPoint:
                                if ext_call.return_data[0] <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_call.return_data[0]
                                if (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                    revert with 0, 'SafeMath: addition overflow'
                                poolInfo[arg1].field_768 += 0 / ext_call.return_data[0]
                            else:
                                if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                32,
                                                33,
                                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[197 len 31]
                                if ext_call.return_data[0] <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_call.return_data[0]
                                if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                    revert with 0, 'SafeMath: addition overflow'
                                poolInfo[arg1].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                        else:
                            if (block.timestamp * rewardsPerSecond * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardsPerSecond * poolInfo[arg1].field_256) / (block.timestamp * rewardsPerSecond) - (poolInfo[arg1].field_512 * rewardsPerSecond) != poolInfo[arg1].field_256:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                            32,
                                            33,
                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[197 len 31]
                            if totalAllocPoint <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require totalAllocPoint
                            if not (block.timestamp * rewardsPerSecond * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardsPerSecond * poolInfo[arg1].field_256) / totalAllocPoint:
                                if ext_call.return_data[0] <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_call.return_data[0]
                                if (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                    revert with 0, 'SafeMath: addition overflow'
                                poolInfo[arg1].field_768 += 0 / ext_call.return_data[0]
                            else:
                                if 10^12 * (block.timestamp * rewardsPerSecond * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardsPerSecond * poolInfo[arg1].field_256) / totalAllocPoint / (block.timestamp * rewardsPerSecond * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardsPerSecond * poolInfo[arg1].field_256) / totalAllocPoint != 10^12:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                32,
                                                33,
                                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[197 len 31]
                                if ext_call.return_data[0] <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_call.return_data[0]
                                if (10^12 * (block.timestamp * rewardsPerSecond * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardsPerSecond * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                    revert with 0, 'SafeMath: addition overflow'
                                poolInfo[arg1].field_768 += 10^12 * (block.timestamp * rewardsPerSecond * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardsPerSecond * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0]
            poolInfo[arg1].field_512 = block.timestamp
        if userInfo[arg1][msg.sender].field_0:
            if not userInfo[arg1][msg.sender].field_0:
                if userInfo[arg1][msg.sender].field_256 > 0:
                    revert with 0, 'SafeMath: subtraction overflow'
                require ext_code.size(sub_9b8e5563Address)
                call sub_9b8e5563Address.0x40c10f19 with:
                     gas gas_remaining wei
                    args msg.sender, -userInfo[arg1][msg.sender].field_256
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require ext_code.size(sub_9b8e5563Address)
                call sub_9b8e5563Address.0x40c10f19 with:
                     gas gas_remaining wei
                    args owner, -userInfo[arg1][msg.sender].field_256 / 10
            else:
                if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                32,
                                33,
                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                mem[197 len 31]
                if userInfo[arg1][msg.sender].field_256 > poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12:
                    revert with 0, 'SafeMath: subtraction overflow'
                require ext_code.size(sub_9b8e5563Address)
                call sub_9b8e5563Address.0x40c10f19 with:
                     gas gas_remaining wei
                    args msg.sender, (poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12) - userInfo[arg1][msg.sender].field_256
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require ext_code.size(sub_9b8e5563Address)
                call sub_9b8e5563Address.0x40c10f19 with:
                     gas gas_remaining wei
                    args owner, (poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12) - userInfo[arg1][msg.sender].field_256 / 10
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
        if eth.balance(this.address) < 0:
            revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[398 len 26]
        if not ext_code.size(poolInfo[arg1].field_0):
            revert with 0, 'Address: call to non-contract'
        mem[292 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
        mem[416 len 4] = 0
        mem[388 len 0] = 0
        call poolInfo[arg1].field_0 with:
             gas gas_remaining wei
            args Mask(224, 32, arg2) << 480, mem[388 len 4]
        if not return_data.size:
            if not ext_call.success:
                revert with unknown_0x23b872dd(?????), msg.sender, address(this.address), arg2
            if not unknown_0x23b872dd(?????), Mask(224, 32, msg.sender) >> 32:
                revert with 0, 
                            32,
                            42,
                            0x725361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565,
                            mem[402 len 14],
                            0,
                            mem[420 len 4]
            if arg2 + userInfo[arg1][msg.sender].field_0 < userInfo[arg1][msg.sender].field_0:
                revert with 0, 'SafeMath: addition overflow'
            userInfo[arg1][msg.sender].field_0 += arg2
            if not arg2 + userInfo[arg1][msg.sender].field_0:
                userInfo[arg1][msg.sender].field_256 = 0
            else:
                if (arg2 * poolInfo[arg1].field_768) + (userInfo[arg1][msg.sender].field_0 * poolInfo[arg1].field_768) / arg2 + userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[393 len 23], 0, mem[420 len 4]
                userInfo[arg1][msg.sender].field_256 = (arg2 * poolInfo[arg1].field_768) + (userInfo[arg1][msg.sender].field_0 * poolInfo[arg1].field_768) / 10^12
        else:
            mem[324 len return_data.size] = ext_call.return_data[0 len return_data.size]
            if not ext_call.success:
                if return_data.size:
                    revert with ext_call.return_data[0 len return_data.size]
                revert with 0, 'SafeERC20: low-level call failed'
            if return_data.size:
                require return_data.size >= 32
                if not mem[324]:
                    revert with 0, 
                                32,
                                42,
                                0x725361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565,
                                mem[ceil32(return_data.size) + 403 len 22]
            if arg2 + userInfo[arg1][msg.sender].field_0 < userInfo[arg1][msg.sender].field_0:
                revert with 0, 'SafeMath: addition overflow'
            userInfo[arg1][msg.sender].field_0 += arg2
            if not arg2 + userInfo[arg1][msg.sender].field_0:
                userInfo[arg1][msg.sender].field_256 = 0
            else:
                if (arg2 * poolInfo[arg1].field_768) + (userInfo[arg1][msg.sender].field_0 * poolInfo[arg1].field_768) / arg2 + userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                    revert with 0, 
                                32,
                                33,
                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                mem[ceil32(return_data.size) + 394 len 31]
                userInfo[arg1][msg.sender].field_256 = (arg2 * poolInfo[arg1].field_768) + (userInfo[arg1][msg.sender].field_0 * poolInfo[arg1].field_768) / 10^12
    else:
        if sub_334d0bbd.length <= 0:
            require arg1 < poolInfo.length
            if block.timestamp > poolInfo[arg1].field_512:
                require ext_code.size(poolInfo[arg1].field_0)
                staticcall poolInfo[arg1].field_0.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0]:
                    if totalAllocPoint:
                        if poolInfo[arg1].field_512 > block.timestamp:
                            revert with 0, 'SafeMath: subtraction overflow'
                        if not block.timestamp - poolInfo[arg1].field_512:
                            if totalAllocPoint <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require totalAllocPoint
                            if not 0 / totalAllocPoint:
                                if ext_call.return_data[0] <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_call.return_data[0]
                                if (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                    revert with 0, 'SafeMath: addition overflow'
                                poolInfo[arg1].field_768 += 0 / ext_call.return_data[0]
                            else:
                                if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                32,
                                                33,
                                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[197 len 31]
                                if ext_call.return_data[0] <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_call.return_data[0]
                                if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                    revert with 0, 'SafeMath: addition overflow'
                                poolInfo[arg1].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                        else:
                            if (block.timestamp * rewardsPerSecond) - (poolInfo[arg1].field_512 * rewardsPerSecond) / block.timestamp - poolInfo[arg1].field_512 != rewardsPerSecond:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                            32,
                                            33,
                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[197 len 31]
                            if not (block.timestamp * rewardsPerSecond) - (poolInfo[arg1].field_512 * rewardsPerSecond):
                                if totalAllocPoint <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require totalAllocPoint
                                if not 0 / totalAllocPoint:
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    if (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                        revert with 0, 'SafeMath: addition overflow'
                                    poolInfo[arg1].field_768 += 0 / ext_call.return_data[0]
                                else:
                                    if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                        revert with 0, 'SafeMath: addition overflow'
                                    poolInfo[arg1].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                            else:
                                if (block.timestamp * rewardsPerSecond * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardsPerSecond * poolInfo[arg1].field_256) / (block.timestamp * rewardsPerSecond) - (poolInfo[arg1].field_512 * rewardsPerSecond) != poolInfo[arg1].field_256:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                32,
                                                33,
                                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[197 len 31]
                                if totalAllocPoint <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require totalAllocPoint
                                if not (block.timestamp * rewardsPerSecond * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardsPerSecond * poolInfo[arg1].field_256) / totalAllocPoint:
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    if (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                        revert with 0, 'SafeMath: addition overflow'
                                    poolInfo[arg1].field_768 += 0 / ext_call.return_data[0]
                                else:
                                    if 10^12 * (block.timestamp * rewardsPerSecond * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardsPerSecond * poolInfo[arg1].field_256) / totalAllocPoint / (block.timestamp * rewardsPerSecond * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardsPerSecond * poolInfo[arg1].field_256) / totalAllocPoint != 10^12:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    if (10^12 * (block.timestamp * rewardsPerSecond * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardsPerSecond * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                        revert with 0, 'SafeMath: addition overflow'
                                    poolInfo[arg1].field_768 += 10^12 * (block.timestamp * rewardsPerSecond * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardsPerSecond * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0]
                poolInfo[arg1].field_512 = block.timestamp
            if userInfo[arg1][msg.sender].field_0:
                if not userInfo[arg1][msg.sender].field_0:
                    if userInfo[arg1][msg.sender].field_256 > 0:
                        revert with 0, 'SafeMath: subtraction overflow'
                    require ext_code.size(sub_9b8e5563Address)
                    call sub_9b8e5563Address.0x40c10f19 with:
                         gas gas_remaining wei
                        args msg.sender, -userInfo[arg1][msg.sender].field_256
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require ext_code.size(sub_9b8e5563Address)
                    call sub_9b8e5563Address.0x40c10f19 with:
                         gas gas_remaining wei
                        args owner, -userInfo[arg1][msg.sender].field_256 / 10
                else:
                    if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                    32,
                                    33,
                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[197 len 31]
                    if userInfo[arg1][msg.sender].field_256 > poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12:
                        revert with 0, 'SafeMath: subtraction overflow'
                    require ext_code.size(sub_9b8e5563Address)
                    call sub_9b8e5563Address.0x40c10f19 with:
                         gas gas_remaining wei
                        args msg.sender, (poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12) - userInfo[arg1][msg.sender].field_256
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require ext_code.size(sub_9b8e5563Address)
                    call sub_9b8e5563Address.0x40c10f19 with:
                         gas gas_remaining wei
                        args owner, (poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12) - userInfo[arg1][msg.sender].field_256 / 10
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
            if eth.balance(this.address) < 0:
                revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[398 len 26]
            if not ext_code.size(poolInfo[arg1].field_0):
                revert with 0, 'Address: call to non-contract'
            mem[292 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
            mem[416 len 4] = 0
            mem[388 len 0] = 0
            call poolInfo[arg1].field_0 with:
                 gas gas_remaining wei
                args Mask(224, 32, arg2) << 480, mem[388 len 4]
            if not return_data.size:
                if not ext_call.success:
                    revert with unknown_0x23b872dd(?????), msg.sender, address(this.address), arg2
                if not unknown_0x23b872dd(?????), Mask(224, 32, msg.sender) >> 32:
                    revert with 0, 
                                32,
                                42,
                                0x725361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565,
                                mem[402 len 14],
                                0,
                                mem[420 len 4]
                if arg2 + userInfo[arg1][msg.sender].field_0 < userInfo[arg1][msg.sender].field_0:
                    revert with 0, 'SafeMath: addition overflow'
                userInfo[arg1][msg.sender].field_0 += arg2
                if not arg2 + userInfo[arg1][msg.sender].field_0:
                    userInfo[arg1][msg.sender].field_256 = 0
                else:
                    if (arg2 * poolInfo[arg1].field_768) + (userInfo[arg1][msg.sender].field_0 * poolInfo[arg1].field_768) / arg2 + userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[393 len 23], 0, mem[420 len 4]
                    userInfo[arg1][msg.sender].field_256 = (arg2 * poolInfo[arg1].field_768) + (userInfo[arg1][msg.sender].field_0 * poolInfo[arg1].field_768) / 10^12
            else:
                mem[324 len return_data.size] = ext_call.return_data[0 len return_data.size]
                if not ext_call.success:
                    if return_data.size:
                        revert with ext_call.return_data[0 len return_data.size]
                    revert with 0, 'SafeERC20: low-level call failed'
                if return_data.size:
                    require return_data.size >= 32
                    if not mem[324]:
                        revert with 0, 
                                    32,
                                    42,
                                    0x725361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565,
                                    mem[ceil32(return_data.size) + 403 len 22]
                if arg2 + userInfo[arg1][msg.sender].field_0 < userInfo[arg1][msg.sender].field_0:
                    revert with 0, 'SafeMath: addition overflow'
                userInfo[arg1][msg.sender].field_0 += arg2
                if not arg2 + userInfo[arg1][msg.sender].field_0:
                    userInfo[arg1][msg.sender].field_256 = 0
                else:
                    if (arg2 * poolInfo[arg1].field_768) + (userInfo[arg1][msg.sender].field_0 * poolInfo[arg1].field_768) / arg2 + userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                        revert with 0, 
                                    32,
                                    33,
                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[ceil32(return_data.size) + 394 len 31]
                    userInfo[arg1][msg.sender].field_256 = (arg2 * poolInfo[arg1].field_768) + (userInfo[arg1][msg.sender].field_0 * poolInfo[arg1].field_768) / 10^12
        else:
            require sub_334d0bbd.length - 1 < sub_334d0bbd.length
            mem[128] = sub_334d0bbd[sub_334d0bbd.length].field_0
            if startTime > block.timestamp:
                revert with 0, 'SafeMath: subtraction overflow'
            if block.timestamp - startTime <= sub_334d0bbd[sub_334d0bbd.length].field_0:
                require arg1 < poolInfo.length
                if block.timestamp > poolInfo[arg1].field_512:
                    require ext_code.size(poolInfo[arg1].field_0)
                    staticcall poolInfo[arg1].field_0.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0]:
                        if totalAllocPoint:
                            if poolInfo[arg1].field_512 > block.timestamp:
                                revert with 0, 'SafeMath: subtraction overflow'
                            if not block.timestamp - poolInfo[arg1].field_512:
                                if totalAllocPoint <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require totalAllocPoint
                                if not 0 / totalAllocPoint:
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    if (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                        revert with 0, 'SafeMath: addition overflow'
                                    poolInfo[arg1].field_768 += 0 / ext_call.return_data[0]
                                else:
                                    if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                        revert with 0, 'SafeMath: addition overflow'
                                    poolInfo[arg1].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                            else:
                                if (block.timestamp * rewardsPerSecond) - (poolInfo[arg1].field_512 * rewardsPerSecond) / block.timestamp - poolInfo[arg1].field_512 != rewardsPerSecond:
                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
                                if not (block.timestamp * rewardsPerSecond) - (poolInfo[arg1].field_512 * rewardsPerSecond):
                                    if totalAllocPoint <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require totalAllocPoint
                                    if not 0 / totalAllocPoint:
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[arg1].field_768 += 0 / ext_call.return_data[0]
                                    else:
                                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[arg1].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                else:
                                    if (block.timestamp * rewardsPerSecond * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardsPerSecond * poolInfo[arg1].field_256) / (block.timestamp * rewardsPerSecond) - (poolInfo[arg1].field_512 * rewardsPerSecond) != poolInfo[arg1].field_256:
                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
                                    if totalAllocPoint <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require totalAllocPoint
                                    if not (block.timestamp * rewardsPerSecond * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardsPerSecond * poolInfo[arg1].field_256) / totalAllocPoint:
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[arg1].field_768 += 0 / ext_call.return_data[0]
                                    else:
                                        if 10^12 * (block.timestamp * rewardsPerSecond * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardsPerSecond * poolInfo[arg1].field_256) / totalAllocPoint / (block.timestamp * rewardsPerSecond * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardsPerSecond * poolInfo[arg1].field_256) / totalAllocPoint != 10^12:
                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if (10^12 * (block.timestamp * rewardsPerSecond * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardsPerSecond * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[arg1].field_768 += 10^12 * (block.timestamp * rewardsPerSecond * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardsPerSecond * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0]
                    poolInfo[arg1].field_512 = block.timestamp
                if userInfo[arg1][msg.sender].field_0:
                    if not userInfo[arg1][msg.sender].field_0:
                        if userInfo[arg1][msg.sender].field_256 > 0:
                            revert with 0, 'SafeMath: subtraction overflow'
                        require ext_code.size(sub_9b8e5563Address)
                        call sub_9b8e5563Address.0x40c10f19 with:
                             gas gas_remaining wei
                            args msg.sender, -userInfo[arg1][msg.sender].field_256
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require ext_code.size(sub_9b8e5563Address)
                        call sub_9b8e5563Address.0x40c10f19 with:
                             gas gas_remaining wei
                            args owner, -userInfo[arg1][msg.sender].field_256 / 10
                    else:
                        if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
                        if userInfo[arg1][msg.sender].field_256 > poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12:
                            revert with 0, 'SafeMath: subtraction overflow'
                        require ext_code.size(sub_9b8e5563Address)
                        call sub_9b8e5563Address.0x40c10f19 with:
                             gas gas_remaining wei
                            args msg.sender, (poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12) - userInfo[arg1][msg.sender].field_256
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require ext_code.size(sub_9b8e5563Address)
                        call sub_9b8e5563Address.0x40c10f19 with:
                             gas gas_remaining wei
                            args owner, (poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12) - userInfo[arg1][msg.sender].field_256 / 10
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                mem[196] = msg.sender
                mem[228] = this.address
                mem[260] = arg2
                mem[160] = 100
                mem[196 len 28] = Mask(224, 32, msg.sender) >> 32
                mem[192 len 4] = unknown_0x23b872dd(?????)
                mem[292] = 32
                mem[324] = 'SafeERC20: low-level call failed'
                if eth.balance(this.address) < 0:
                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[462 len 26]
                if not ext_code.size(poolInfo[arg1].field_0):
                    revert with 0, 'Address: call to non-contract'
                mem[356 len 96] = unknown_0x23b872dd(?????), msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                mem[480 len 4] = 0
                mem[452 len 0] = 0
                call poolInfo[arg1].field_0 with:
                     gas gas_remaining wei
                    args Mask(224, 32, arg2) << 480, mem[452 len 4]
            else:
                idx = 0
                while idx < poolInfo.length:
                    mem[0] = 4
                    if block.timestamp > poolInfo[idx].field_512:
                        mem[164] = this.address
                        require ext_code.size(poolInfo[idx].field_0)
                        staticcall poolInfo[idx].field_0.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[160] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0]:
                            if totalAllocPoint:
                                if poolInfo[idx].field_512 > block.timestamp:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if not block.timestamp - poolInfo[idx].field_512:
                                    if totalAllocPoint <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require totalAllocPoint
                                    if not 0 / totalAllocPoint:
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                    else:
                                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                else:
                                    if (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond) / block.timestamp - poolInfo[idx].field_512 != rewardsPerSecond:
                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
                                    if not (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond):
                                        if totalAllocPoint <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require totalAllocPoint
                                        if not 0 / totalAllocPoint:
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                        else:
                                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                    else:
                                        if (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond) != poolInfo[idx].field_256:
                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
                                        if totalAllocPoint <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require totalAllocPoint
                                        if not (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint:
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                        else:
                                            if 10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if (10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[idx].field_768 += 10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                        poolInfo[idx].field_512 = block.timestamp
                    idx = idx + 1
                    continue 
                uint128(stor3.field_0) = sub_334d0bbd[sub_334d0bbd.length].field_0
                uint128(stor3.field_128) = 0
                require sub_334d0bbd.length
                sub_334d0bbd[sub_334d0bbd.length].field_0 = 0
                sub_334d0bbd.length--
                require arg1 < poolInfo.length
                if block.timestamp > poolInfo[arg1].field_512:
                    require ext_code.size(poolInfo[arg1].field_0)
                    staticcall poolInfo[arg1].field_0.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if ext_call.return_data[0]:
                        if totalAllocPoint:
                            if poolInfo[arg1].field_512 > block.timestamp:
                                revert with 0, 'SafeMath: subtraction overflow'
                            if not block.timestamp - poolInfo[arg1].field_512:
                                if totalAllocPoint <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require totalAllocPoint
                                if not 0 / totalAllocPoint:
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    if (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                        revert with 0, 'SafeMath: addition overflow'
                                    poolInfo[arg1].field_768 += 0 / ext_call.return_data[0]
                                else:
                                    if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                        revert with 0, 'SafeMath: addition overflow'
                                    poolInfo[arg1].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                            else:
                                if (block.timestamp * rewardsPerSecond) - (poolInfo[arg1].field_512 * rewardsPerSecond) / block.timestamp - poolInfo[arg1].field_512 != rewardsPerSecond:
                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
                                if not (block.timestamp * rewardsPerSecond) - (poolInfo[arg1].field_512 * rewardsPerSecond):
                                    if totalAllocPoint <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require totalAllocPoint
                                    if not 0 / totalAllocPoint:
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[arg1].field_768 += 0 / ext_call.return_data[0]
                                    else:
                                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[arg1].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                else:
                                    if (block.timestamp * rewardsPerSecond * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardsPerSecond * poolInfo[arg1].field_256) / (block.timestamp * rewardsPerSecond) - (poolInfo[arg1].field_512 * rewardsPerSecond) != poolInfo[arg1].field_256:
                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
                                    if totalAllocPoint <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require totalAllocPoint
                                    if not (block.timestamp * rewardsPerSecond * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardsPerSecond * poolInfo[arg1].field_256) / totalAllocPoint:
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if (0 / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[arg1].field_768 += 0 / ext_call.return_data[0]
                                    else:
                                        if 10^12 * (block.timestamp * rewardsPerSecond * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardsPerSecond * poolInfo[arg1].field_256) / totalAllocPoint / (block.timestamp * rewardsPerSecond * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardsPerSecond * poolInfo[arg1].field_256) / totalAllocPoint != 10^12:
                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if (10^12 * (block.timestamp * rewardsPerSecond * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardsPerSecond * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0]) + poolInfo[arg1].field_768 < poolInfo[arg1].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[arg1].field_768 += 10^12 * (block.timestamp * rewardsPerSecond * poolInfo[arg1].field_256) - (poolInfo[arg1].field_512 * rewardsPerSecond * poolInfo[arg1].field_256) / totalAllocPoint / ext_call.return_data[0]
                    poolInfo[arg1].field_512 = block.timestamp
                if userInfo[arg1][msg.sender].field_0:
                    if not userInfo[arg1][msg.sender].field_0:
                        if userInfo[arg1][msg.sender].field_256 > 0:
                            revert with 0, 'SafeMath: subtraction overflow'
                        require ext_code.size(sub_9b8e5563Address)
                        call sub_9b8e5563Address.0x40c10f19 with:
                             gas gas_remaining wei
                            args msg.sender, -userInfo[arg1][msg.sender].field_256
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require ext_code.size(sub_9b8e5563Address)
                        call sub_9b8e5563Address.0x40c10f19 with:
                             gas gas_remaining wei
                            args owner, -userInfo[arg1][msg.sender].field_256 / 10
                    else:
                        if poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
                        if userInfo[arg1][msg.sender].field_256 > poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12:
                            revert with 0, 'SafeMath: subtraction overflow'
                        require ext_code.size(sub_9b8e5563Address)
                        call sub_9b8e5563Address.0x40c10f19 with:
                             gas gas_remaining wei
                            args msg.sender, (poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12) - userInfo[arg1][msg.sender].field_256
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require ext_code.size(sub_9b8e5563Address)
                        call sub_9b8e5563Address.0x40c10f19 with:
                             gas gas_remaining wei
                            args owner, (poolInfo[arg1].field_768 * userInfo[arg1][msg.sender].field_0 / 10^12) - userInfo[arg1][msg.sender].field_256 / 10
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                mem[196] = msg.sender
                mem[228] = this.address
                mem[260] = arg2
                mem[160] = 100
                mem[192 len 4] = unknown_0x23b872dd(?????)
                mem[292] = 32
                mem[324] = 'SafeERC20: low-level call failed'
                if eth.balance(this.address) < 0:
                    revert with 0, 32, 38, 0x73416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[462 len 26]
                if not ext_code.size(poolInfo[arg1].field_0):
                    revert with 0, 'Address: call to non-contract'
                mem[356 len 96] = 0, msg.sender, address(this.address), Mask(224, 32, arg2) >> 32
                mem[480 len 4] = 0
                call poolInfo[arg1].field_0 with:
                     gas gas_remaining wei
                    args arg2, 32, Mask(224, 32, 'SafeERC20: low-level call failed') >> 32, mem[452 len 4]
            if not return_data.size:
                if not ext_call.success:
                    if sub_334d0bbd[sub_334d0bbd.length].field_0:
                        revert with memory
                          from 128
                           len sub_334d0bbd[sub_334d0bbd.length].field_0
                    revert with 0, 'SafeERC20: low-level call failed'
                if sub_334d0bbd[sub_334d0bbd.length].field_0:
                    require sub_334d0bbd[sub_334d0bbd.length].field_0 >= 32
                    if not sub_334d0bbd[sub_334d0bbd.length].field_0:
                        revert with 0, 
                                    32,
                                    42,
                                    0x725361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565,
                                    mem[466 len 14],
                                    0,
                                    mem[484 len 4]
                if arg2 + userInfo[arg1][msg.sender].field_0 < userInfo[arg1][msg.sender].field_0:
                    revert with 0, 'SafeMath: addition overflow'
                userInfo[arg1][msg.sender].field_0 += arg2
                if not arg2 + userInfo[arg1][msg.sender].field_0:
                    userInfo[arg1][msg.sender].field_256 = 0
                else:
                    if (arg2 * poolInfo[arg1].field_768) + (userInfo[arg1][msg.sender].field_0 * poolInfo[arg1].field_768) / arg2 + userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[457 len 23], 0, mem[484 len 4]
                    userInfo[arg1][msg.sender].field_256 = (arg2 * poolInfo[arg1].field_768) + (userInfo[arg1][msg.sender].field_0 * poolInfo[arg1].field_768) / 10^12
            else:
                mem[388 len return_data.size] = ext_call.return_data[0 len return_data.size]
                if not ext_call.success:
                    if return_data.size:
                        revert with ext_call.return_data[0 len return_data.size]
                    revert with 0, 'SafeERC20: low-level call failed'
                if return_data.size:
                    require return_data.size >= 32
                    if not mem[388]:
                        revert with 0, 
                                    32,
                                    42,
                                    0x725361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565,
                                    mem[ceil32(return_data.size) + 467 len 22]
                if arg2 + userInfo[arg1][msg.sender].field_0 < userInfo[arg1][msg.sender].field_0:
                    revert with 0, 'SafeMath: addition overflow'
                userInfo[arg1][msg.sender].field_0 += arg2
                if not arg2 + userInfo[arg1][msg.sender].field_0:
                    userInfo[arg1][msg.sender].field_256 = 0
                else:
                    if (arg2 * poolInfo[arg1].field_768) + (userInfo[arg1][msg.sender].field_0 * poolInfo[arg1].field_768) / arg2 + userInfo[arg1][msg.sender].field_0 != poolInfo[arg1].field_768:
                        revert with 0, 
                                    32,
                                    33,
                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[ceil32(return_data.size) + 458 len 31]
                    userInfo[arg1][msg.sender].field_256 = (arg2 * poolInfo[arg1].field_768) + (userInfo[arg1][msg.sender].field_0 * poolInfo[arg1].field_768) / 10^12
    emit Deposit(arg2, msg.sender, arg1);
}

function claim(uint256[] arg1) payable {
    mem[64] = 96
    require calldata.size - 4 >= 32
    require arg1 <= 4294967296
    require arg1 + 36 <= calldata.size
    require arg1.length <= 4294967296 and arg1 + (32 * arg1.length) + 36 <= calldata.size
    if not startTime:
        idx = 0
        s = 0
        while idx < arg1.length:
            require cd[((32 * idx) + arg1 + 36)] < poolInfo.length
            if block.timestamp <= poolInfo[cd[((32 * idx) + arg1 + 36)]].field_512:
                require idx < arg1.length
                require cd[((32 * idx) + arg1 + 36)] < poolInfo.length
                mem[0] = 4
                _1033 = mem[64]
                mem[64] = mem[64] + 128
                mem[_1033] = poolInfo[cd[((32 * idx) + arg1 + 36)]].field_0
                mem[_1033 + 32] = poolInfo[cd[((32 * idx) + arg1 + 36)]].field_256
                mem[_1033 + 64] = poolInfo[cd[((32 * idx) + arg1 + 36)]].field_512
                mem[_1033 + 96] = poolInfo[cd[((32 * idx) + arg1 + 36)]].field_768
            else:
                mem[mem[64] + 4] = this.address
                require ext_code.size(poolInfo[cd[((32 * idx) + arg1 + 36)]].field_0)
                staticcall poolInfo[cd[((32 * idx) + arg1 + 36)]].field_0.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0]:
                    poolInfo[cd[((32 * idx) + arg1 + 36)]].field_512 = block.timestamp
                    require idx < arg1.length
                    require cd[((32 * idx) + arg1 + 36)] < poolInfo.length
                    mem[0] = 4
                    _1059 = mem[64]
                    mem[64] = mem[64] + 128
                    mem[_1059] = poolInfo[cd[((32 * idx) + arg1 + 36)]].field_0
                    mem[_1059 + 32] = poolInfo[cd[((32 * idx) + arg1 + 36)]].field_256
                    mem[_1059 + 64] = poolInfo[cd[((32 * idx) + arg1 + 36)]].field_512
                    mem[_1059 + 96] = poolInfo[cd[((32 * idx) + arg1 + 36)]].field_768
                else:
                    if not totalAllocPoint:
                        poolInfo[cd[((32 * idx) + arg1 + 36)]].field_512 = block.timestamp
                        require idx < arg1.length
                        require cd[((32 * idx) + arg1 + 36)] < poolInfo.length
                        mem[0] = 4
                        _1075 = mem[64]
                        mem[64] = mem[64] + 128
                        mem[_1075] = poolInfo[cd[((32 * idx) + arg1 + 36)]].field_0
                        mem[_1075 + 32] = poolInfo[cd[((32 * idx) + arg1 + 36)]].field_256
                        mem[_1075 + 64] = poolInfo[cd[((32 * idx) + arg1 + 36)]].field_512
                        mem[_1075 + 96] = poolInfo[cd[((32 * idx) + arg1 + 36)]].field_768
                    else:
                        if poolInfo[cd[((32 * idx) + arg1 + 36)]].field_512 > block.timestamp:
                            revert with 0, 'SafeMath: subtraction overflow'
                        if not block.timestamp - poolInfo[cd[((32 * idx) + arg1 + 36)]].field_512:
                            if totalAllocPoint <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require totalAllocPoint
                            if not 0 / totalAllocPoint:
                                if ext_call.return_data[0] <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_call.return_data[0]
                                if (0 / ext_call.return_data[0]) + poolInfo[cd[((32 * idx) + arg1 + 36)]].field_768 < poolInfo[cd[((32 * idx) + arg1 + 36)]].field_768:
                                    revert with 0, 'SafeMath: addition overflow'
                                poolInfo[cd[((32 * idx) + arg1 + 36)]].field_768 += 0 / ext_call.return_data[0]
                                poolInfo[cd[((32 * idx) + arg1 + 36)]].field_512 = block.timestamp
                                require idx < arg1.length
                                require cd[((32 * idx) + arg1 + 36)] < poolInfo.length
                                mem[0] = 4
                                _1470 = mem[64]
                                mem[64] = mem[64] + 128
                                mem[_1470] = poolInfo[cd[((32 * idx) + arg1 + 36)]].field_0
                                mem[_1470 + 32] = poolInfo[cd[((32 * idx) + arg1 + 36)]].field_256
                                mem[_1470 + 64] = poolInfo[cd[((32 * idx) + arg1 + 36)]].field_512
                                mem[_1470 + 96] = poolInfo[cd[((32 * idx) + arg1 + 36)]].field_768
                            else:
                                if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                if ext_call.return_data[0] <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_call.return_data[0]
                                if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[cd[((32 * idx) + arg1 + 36)]].field_768 < poolInfo[cd[((32 * idx) + arg1 + 36)]].field_768:
                                    revert with 0, 'SafeMath: addition overflow'
                                poolInfo[cd[((32 * idx) + arg1 + 36)]].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                poolInfo[cd[((32 * idx) + arg1 + 36)]].field_512 = block.timestamp
                                require idx < arg1.length
                                require cd[((32 * idx) + arg1 + 36)] < poolInfo.length
                                mem[0] = 4
                                _1484 = mem[64]
                                mem[64] = mem[64] + 128
                                mem[_1484] = poolInfo[cd[((32 * idx) + arg1 + 36)]].field_0
                                mem[_1484 + 32] = poolInfo[cd[((32 * idx) + arg1 + 36)]].field_256
                                mem[_1484 + 64] = poolInfo[cd[((32 * idx) + arg1 + 36)]].field_512
                                mem[_1484 + 96] = poolInfo[cd[((32 * idx) + arg1 + 36)]].field_768
                        else:
                            if (block.timestamp * rewardsPerSecond) - (poolInfo[cd[((32 * idx) + arg1 + 36)]].field_512 * rewardsPerSecond) / block.timestamp - poolInfo[cd[((32 * idx) + arg1 + 36)]].field_512 != rewardsPerSecond:
                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                            if not (block.timestamp * rewardsPerSecond) - (poolInfo[cd[((32 * idx) + arg1 + 36)]].field_512 * rewardsPerSecond):
                                if totalAllocPoint <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require totalAllocPoint
                                if not 0 / totalAllocPoint:
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    if (0 / ext_call.return_data[0]) + poolInfo[cd[((32 * idx) + arg1 + 36)]].field_768 < poolInfo[cd[((32 * idx) + arg1 + 36)]].field_768:
                                        revert with 0, 'SafeMath: addition overflow'
                                    poolInfo[cd[((32 * idx) + arg1 + 36)]].field_768 += 0 / ext_call.return_data[0]
                                    poolInfo[cd[((32 * idx) + arg1 + 36)]].field_512 = block.timestamp
                                    require idx < arg1.length
                                    require cd[((32 * idx) + arg1 + 36)] < poolInfo.length
                                    mem[0] = 4
                                    _1482 = mem[64]
                                    mem[64] = mem[64] + 128
                                    mem[_1482] = poolInfo[cd[((32 * idx) + arg1 + 36)]].field_0
                                    mem[_1482 + 32] = poolInfo[cd[((32 * idx) + arg1 + 36)]].field_256
                                    mem[_1482 + 64] = poolInfo[cd[((32 * idx) + arg1 + 36)]].field_512
                                    mem[_1482 + 96] = poolInfo[cd[((32 * idx) + arg1 + 36)]].field_768
                                else:
                                    if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[cd[((32 * idx) + arg1 + 36)]].field_768 < poolInfo[cd[((32 * idx) + arg1 + 36)]].field_768:
                                        revert with 0, 'SafeMath: addition overflow'
                                    poolInfo[cd[((32 * idx) + arg1 + 36)]].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                    poolInfo[cd[((32 * idx) + arg1 + 36)]].field_512 = block.timestamp
                                    require idx < arg1.length
                                    require cd[((32 * idx) + arg1 + 36)] < poolInfo.length
                                    mem[0] = 4
                                    _1513 = mem[64]
                                    mem[64] = mem[64] + 128
                                    mem[_1513] = poolInfo[cd[((32 * idx) + arg1 + 36)]].field_0
                                    mem[_1513 + 32] = poolInfo[cd[((32 * idx) + arg1 + 36)]].field_256
                                    mem[_1513 + 64] = poolInfo[cd[((32 * idx) + arg1 + 36)]].field_512
                                    mem[_1513 + 96] = poolInfo[cd[((32 * idx) + arg1 + 36)]].field_768
                            else:
                                if (block.timestamp * rewardsPerSecond * poolInfo[cd[((32 * idx) + arg1 + 36)]].field_256) - (poolInfo[cd[((32 * idx) + arg1 + 36)]].field_512 * rewardsPerSecond * poolInfo[cd[((32 * idx) + arg1 + 36)]].field_256) / (block.timestamp * rewardsPerSecond) - (poolInfo[cd[((32 * idx) + arg1 + 36)]].field_512 * rewardsPerSecond) != poolInfo[cd[((32 * idx) + arg1 + 36)]].field_256:
                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                if totalAllocPoint <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require totalAllocPoint
                                if not (block.timestamp * rewardsPerSecond * poolInfo[cd[((32 * idx) + arg1 + 36)]].field_256) - (poolInfo[cd[((32 * idx) + arg1 + 36)]].field_512 * rewardsPerSecond * poolInfo[cd[((32 * idx) + arg1 + 36)]].field_256) / totalAllocPoint:
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    if (0 / ext_call.return_data[0]) + poolInfo[cd[((32 * idx) + arg1 + 36)]].field_768 < poolInfo[cd[((32 * idx) + arg1 + 36)]].field_768:
                                        revert with 0, 'SafeMath: addition overflow'
                                    poolInfo[cd[((32 * idx) + arg1 + 36)]].field_768 += 0 / ext_call.return_data[0]
                                    poolInfo[cd[((32 * idx) + arg1 + 36)]].field_512 = block.timestamp
                                    require idx < arg1.length
                                    require cd[((32 * idx) + arg1 + 36)] < poolInfo.length
                                    mem[0] = 4
                                    _1511 = mem[64]
                                    mem[64] = mem[64] + 128
                                    mem[_1511] = poolInfo[cd[((32 * idx) + arg1 + 36)]].field_0
                                    mem[_1511 + 32] = poolInfo[cd[((32 * idx) + arg1 + 36)]].field_256
                                    mem[_1511 + 64] = poolInfo[cd[((32 * idx) + arg1 + 36)]].field_512
                                    mem[_1511 + 96] = poolInfo[cd[((32 * idx) + arg1 + 36)]].field_768
                                else:
                                    if 10^12 * (block.timestamp * rewardsPerSecond * poolInfo[cd[((32 * idx) + arg1 + 36)]].field_256) - (poolInfo[cd[((32 * idx) + arg1 + 36)]].field_512 * rewardsPerSecond * poolInfo[cd[((32 * idx) + arg1 + 36)]].field_256) / totalAllocPoint / (block.timestamp * rewardsPerSecond * poolInfo[cd[((32 * idx) + arg1 + 36)]].field_256) - (poolInfo[cd[((32 * idx) + arg1 + 36)]].field_512 * rewardsPerSecond * poolInfo[cd[((32 * idx) + arg1 + 36)]].field_256) / totalAllocPoint != 10^12:
                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    if (10^12 * (block.timestamp * rewardsPerSecond * poolInfo[cd[((32 * idx) + arg1 + 36)]].field_256) - (poolInfo[cd[((32 * idx) + arg1 + 36)]].field_512 * rewardsPerSecond * poolInfo[cd[((32 * idx) + arg1 + 36)]].field_256) / totalAllocPoint / ext_call.return_data[0]) + poolInfo[cd[((32 * idx) + arg1 + 36)]].field_768 < poolInfo[cd[((32 * idx) + arg1 + 36)]].field_768:
                                        revert with 0, 'SafeMath: addition overflow'
                                    poolInfo[cd[((32 * idx) + arg1 + 36)]].field_768 += 10^12 * (block.timestamp * rewardsPerSecond * poolInfo[cd[((32 * idx) + arg1 + 36)]].field_256) - (poolInfo[cd[((32 * idx) + arg1 + 36)]].field_512 * rewardsPerSecond * poolInfo[cd[((32 * idx) + arg1 + 36)]].field_256) / totalAllocPoint / ext_call.return_data[0]
                                    poolInfo[cd[((32 * idx) + arg1 + 36)]].field_512 = block.timestamp
                                    require idx < arg1.length
                                    require cd[((32 * idx) + arg1 + 36)] < poolInfo.length
                                    mem[0] = 4
                                    _1545 = mem[64]
                                    mem[64] = mem[64] + 128
                                    mem[_1545] = poolInfo[cd[((32 * idx) + arg1 + 36)]].field_0
                                    mem[_1545 + 32] = poolInfo[cd[((32 * idx) + arg1 + 36)]].field_256
                                    mem[_1545 + 64] = poolInfo[cd[((32 * idx) + arg1 + 36)]].field_512
                                    mem[_1545 + 96] = poolInfo[cd[((32 * idx) + arg1 + 36)]].field_768
            require idx < arg1.length
            mem[0] = msg.sender
            mem[32] = sha3(cd[((32 * idx) + arg1 + 36)], 6)
            if not userInfo[cd[((32 * idx) + arg1 + 36)]][address(msg.sender)].field_0:
                if userInfo[cd[((32 * idx) + arg1 + 36)]][address(msg.sender)].field_256 > 0:
                    revert with 0, 'SafeMath: subtraction overflow'
                if -userInfo[cd[((32 * idx) + arg1 + 36)]][address(msg.sender)].field_256 + s < s:
                    revert with 0, 'SafeMath: addition overflow'
                if not userInfo[cd[((32 * idx) + arg1 + 36)]][address(msg.sender)].field_0:
                    userInfo[cd[((32 * idx) + arg1 + 36)]][address(msg.sender)].field_256 = 0
                else:
                    if poolInfo[cd[((32 * idx) + arg1 + 36)]].field_768 * userInfo[cd[((32 * idx) + arg1 + 36)]][address(msg.sender)].field_0 / userInfo[cd[((32 * idx) + arg1 + 36)]][address(msg.sender)].field_0 != poolInfo[cd[((32 * idx) + arg1 + 36)]].field_768:
                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                    userInfo[cd[((32 * idx) + arg1 + 36)]][address(msg.sender)].field_256 = poolInfo[cd[((32 * idx) + arg1 + 36)]].field_768 * userInfo[cd[((32 * idx) + arg1 + 36)]][address(msg.sender)].field_0 / 10^12
                idx = idx + 1
                s = -userInfo[cd[((32 * idx) + arg1 + 36)]][address(msg.sender)].field_256 + s
                continue 
            if poolInfo[cd[((32 * idx) + arg1 + 36)]].field_768 * userInfo[cd[((32 * idx) + arg1 + 36)]][address(msg.sender)].field_0 / userInfo[cd[((32 * idx) + arg1 + 36)]][address(msg.sender)].field_0 != poolInfo[cd[((32 * idx) + arg1 + 36)]].field_768:
                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
            if userInfo[cd[((32 * idx) + arg1 + 36)]][address(msg.sender)].field_256 > poolInfo[cd[((32 * idx) + arg1 + 36)]].field_768 * userInfo[cd[((32 * idx) + arg1 + 36)]][address(msg.sender)].field_0 / 10^12:
                revert with 0, 'SafeMath: subtraction overflow'
            if (poolInfo[cd[((32 * idx) + arg1 + 36)]].field_768 * userInfo[cd[((32 * idx) + arg1 + 36)]][address(msg.sender)].field_0 / 10^12) - userInfo[cd[((32 * idx) + arg1 + 36)]][address(msg.sender)].field_256 + s < s:
                revert with 0, 'SafeMath: addition overflow'
            if not userInfo[cd[((32 * idx) + arg1 + 36)]][address(msg.sender)].field_0:
                userInfo[cd[((32 * idx) + arg1 + 36)]][address(msg.sender)].field_256 = 0
            else:
                if poolInfo[cd[((32 * idx) + arg1 + 36)]].field_768 * userInfo[cd[((32 * idx) + arg1 + 36)]][address(msg.sender)].field_0 / userInfo[cd[((32 * idx) + arg1 + 36)]][address(msg.sender)].field_0 != poolInfo[cd[((32 * idx) + arg1 + 36)]].field_768:
                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                userInfo[cd[((32 * idx) + arg1 + 36)]][address(msg.sender)].field_256 = poolInfo[cd[((32 * idx) + arg1 + 36)]].field_768 * userInfo[cd[((32 * idx) + arg1 + 36)]][address(msg.sender)].field_0 / 10^12
            idx = idx + 1
            s = (poolInfo[cd[((32 * idx) + arg1 + 36)]].field_768 * userInfo[cd[((32 * idx) + arg1 + 36)]][address(msg.sender)].field_0 / 10^12) - userInfo[cd[((32 * idx) + arg1 + 36)]][address(msg.sender)].field_256 + s
            continue 
    else:
        if sub_334d0bbd.length <= 0:
            idx = 0
            s = 0
            while idx < arg1.length:
                require cd[((32 * idx) + arg1 + 36)] < poolInfo.length
                if block.timestamp <= poolInfo[cd[((32 * idx) + arg1 + 36)]].field_512:
                    require idx < arg1.length
                    require cd[((32 * idx) + arg1 + 36)] < poolInfo.length
                    mem[0] = 4
                    _1035 = mem[64]
                    mem[64] = mem[64] + 128
                    mem[_1035] = poolInfo[cd[((32 * idx) + arg1 + 36)]].field_0
                    mem[_1035 + 32] = poolInfo[cd[((32 * idx) + arg1 + 36)]].field_256
                    mem[_1035 + 64] = poolInfo[cd[((32 * idx) + arg1 + 36)]].field_512
                    mem[_1035 + 96] = poolInfo[cd[((32 * idx) + arg1 + 36)]].field_768
                else:
                    mem[mem[64] + 4] = this.address
                    require ext_code.size(poolInfo[cd[((32 * idx) + arg1 + 36)]].field_0)
                    staticcall poolInfo[cd[((32 * idx) + arg1 + 36)]].field_0.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0]:
                        poolInfo[cd[((32 * idx) + arg1 + 36)]].field_512 = block.timestamp
                        require idx < arg1.length
                        require cd[((32 * idx) + arg1 + 36)] < poolInfo.length
                        mem[0] = 4
                        _1063 = mem[64]
                        mem[64] = mem[64] + 128
                        mem[_1063] = poolInfo[cd[((32 * idx) + arg1 + 36)]].field_0
                        mem[_1063 + 32] = poolInfo[cd[((32 * idx) + arg1 + 36)]].field_256
                        mem[_1063 + 64] = poolInfo[cd[((32 * idx) + arg1 + 36)]].field_512
                        mem[_1063 + 96] = poolInfo[cd[((32 * idx) + arg1 + 36)]].field_768
                    else:
                        if not totalAllocPoint:
                            poolInfo[cd[((32 * idx) + arg1 + 36)]].field_512 = block.timestamp
                            require idx < arg1.length
                            require cd[((32 * idx) + arg1 + 36)] < poolInfo.length
                            mem[0] = 4
                            _1080 = mem[64]
                            mem[64] = mem[64] + 128
                            mem[_1080] = poolInfo[cd[((32 * idx) + arg1 + 36)]].field_0
                            mem[_1080 + 32] = poolInfo[cd[((32 * idx) + arg1 + 36)]].field_256
                            mem[_1080 + 64] = poolInfo[cd[((32 * idx) + arg1 + 36)]].field_512
                            mem[_1080 + 96] = poolInfo[cd[((32 * idx) + arg1 + 36)]].field_768
                        else:
                            if poolInfo[cd[((32 * idx) + arg1 + 36)]].field_512 > block.timestamp:
                                revert with 0, 'SafeMath: subtraction overflow'
                            if not block.timestamp - poolInfo[cd[((32 * idx) + arg1 + 36)]].field_512:
                                if totalAllocPoint <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require totalAllocPoint
                                if not 0 / totalAllocPoint:
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    if (0 / ext_call.return_data[0]) + poolInfo[cd[((32 * idx) + arg1 + 36)]].field_768 < poolInfo[cd[((32 * idx) + arg1 + 36)]].field_768:
                                        revert with 0, 'SafeMath: addition overflow'
                                    poolInfo[cd[((32 * idx) + arg1 + 36)]].field_768 += 0 / ext_call.return_data[0]
                                    poolInfo[cd[((32 * idx) + arg1 + 36)]].field_512 = block.timestamp
                                    require idx < arg1.length
                                    require cd[((32 * idx) + arg1 + 36)] < poolInfo.length
                                    mem[0] = 4
                                    _1472 = mem[64]
                                    mem[64] = mem[64] + 128
                                    mem[_1472] = poolInfo[cd[((32 * idx) + arg1 + 36)]].field_0
                                    mem[_1472 + 32] = poolInfo[cd[((32 * idx) + arg1 + 36)]].field_256
                                    mem[_1472 + 64] = poolInfo[cd[((32 * idx) + arg1 + 36)]].field_512
                                    mem[_1472 + 96] = poolInfo[cd[((32 * idx) + arg1 + 36)]].field_768
                                else:
                                    if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[cd[((32 * idx) + arg1 + 36)]].field_768 < poolInfo[cd[((32 * idx) + arg1 + 36)]].field_768:
                                        revert with 0, 'SafeMath: addition overflow'
                                    poolInfo[cd[((32 * idx) + arg1 + 36)]].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                    poolInfo[cd[((32 * idx) + arg1 + 36)]].field_512 = block.timestamp
                                    require idx < arg1.length
                                    require cd[((32 * idx) + arg1 + 36)] < poolInfo.length
                                    mem[0] = 4
                                    _1491 = mem[64]
                                    mem[64] = mem[64] + 128
                                    mem[_1491] = poolInfo[cd[((32 * idx) + arg1 + 36)]].field_0
                                    mem[_1491 + 32] = poolInfo[cd[((32 * idx) + arg1 + 36)]].field_256
                                    mem[_1491 + 64] = poolInfo[cd[((32 * idx) + arg1 + 36)]].field_512
                                    mem[_1491 + 96] = poolInfo[cd[((32 * idx) + arg1 + 36)]].field_768
                            else:
                                if (block.timestamp * rewardsPerSecond) - (poolInfo[cd[((32 * idx) + arg1 + 36)]].field_512 * rewardsPerSecond) / block.timestamp - poolInfo[cd[((32 * idx) + arg1 + 36)]].field_512 != rewardsPerSecond:
                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                if not (block.timestamp * rewardsPerSecond) - (poolInfo[cd[((32 * idx) + arg1 + 36)]].field_512 * rewardsPerSecond):
                                    if totalAllocPoint <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require totalAllocPoint
                                    if not 0 / totalAllocPoint:
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if (0 / ext_call.return_data[0]) + poolInfo[cd[((32 * idx) + arg1 + 36)]].field_768 < poolInfo[cd[((32 * idx) + arg1 + 36)]].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[cd[((32 * idx) + arg1 + 36)]].field_768 += 0 / ext_call.return_data[0]
                                        poolInfo[cd[((32 * idx) + arg1 + 36)]].field_512 = block.timestamp
                                        require idx < arg1.length
                                        require cd[((32 * idx) + arg1 + 36)] < poolInfo.length
                                        mem[0] = 4
                                        _1489 = mem[64]
                                        mem[64] = mem[64] + 128
                                        mem[_1489] = poolInfo[cd[((32 * idx) + arg1 + 36)]].field_0
                                        mem[_1489 + 32] = poolInfo[cd[((32 * idx) + arg1 + 36)]].field_256
                                        mem[_1489 + 64] = poolInfo[cd[((32 * idx) + arg1 + 36)]].field_512
                                        mem[_1489 + 96] = poolInfo[cd[((32 * idx) + arg1 + 36)]].field_768
                                    else:
                                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[cd[((32 * idx) + arg1 + 36)]].field_768 < poolInfo[cd[((32 * idx) + arg1 + 36)]].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[cd[((32 * idx) + arg1 + 36)]].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                        poolInfo[cd[((32 * idx) + arg1 + 36)]].field_512 = block.timestamp
                                        require idx < arg1.length
                                        require cd[((32 * idx) + arg1 + 36)] < poolInfo.length
                                        mem[0] = 4
                                        _1523 = mem[64]
                                        mem[64] = mem[64] + 128
                                        mem[_1523] = poolInfo[cd[((32 * idx) + arg1 + 36)]].field_0
                                        mem[_1523 + 32] = poolInfo[cd[((32 * idx) + arg1 + 36)]].field_256
                                        mem[_1523 + 64] = poolInfo[cd[((32 * idx) + arg1 + 36)]].field_512
                                        mem[_1523 + 96] = poolInfo[cd[((32 * idx) + arg1 + 36)]].field_768
                                else:
                                    if (block.timestamp * rewardsPerSecond * poolInfo[cd[((32 * idx) + arg1 + 36)]].field_256) - (poolInfo[cd[((32 * idx) + arg1 + 36)]].field_512 * rewardsPerSecond * poolInfo[cd[((32 * idx) + arg1 + 36)]].field_256) / (block.timestamp * rewardsPerSecond) - (poolInfo[cd[((32 * idx) + arg1 + 36)]].field_512 * rewardsPerSecond) != poolInfo[cd[((32 * idx) + arg1 + 36)]].field_256:
                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    if totalAllocPoint <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require totalAllocPoint
                                    if not (block.timestamp * rewardsPerSecond * poolInfo[cd[((32 * idx) + arg1 + 36)]].field_256) - (poolInfo[cd[((32 * idx) + arg1 + 36)]].field_512 * rewardsPerSecond * poolInfo[cd[((32 * idx) + arg1 + 36)]].field_256) / totalAllocPoint:
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if (0 / ext_call.return_data[0]) + poolInfo[cd[((32 * idx) + arg1 + 36)]].field_768 < poolInfo[cd[((32 * idx) + arg1 + 36)]].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[cd[((32 * idx) + arg1 + 36)]].field_768 += 0 / ext_call.return_data[0]
                                        poolInfo[cd[((32 * idx) + arg1 + 36)]].field_512 = block.timestamp
                                        require idx < arg1.length
                                        require cd[((32 * idx) + arg1 + 36)] < poolInfo.length
                                        mem[0] = 4
                                        _1521 = mem[64]
                                        mem[64] = mem[64] + 128
                                        mem[_1521] = poolInfo[cd[((32 * idx) + arg1 + 36)]].field_0
                                        mem[_1521 + 32] = poolInfo[cd[((32 * idx) + arg1 + 36)]].field_256
                                        mem[_1521 + 64] = poolInfo[cd[((32 * idx) + arg1 + 36)]].field_512
                                        mem[_1521 + 96] = poolInfo[cd[((32 * idx) + arg1 + 36)]].field_768
                                    else:
                                        if 10^12 * (block.timestamp * rewardsPerSecond * poolInfo[cd[((32 * idx) + arg1 + 36)]].field_256) - (poolInfo[cd[((32 * idx) + arg1 + 36)]].field_512 * rewardsPerSecond * poolInfo[cd[((32 * idx) + arg1 + 36)]].field_256) / totalAllocPoint / (block.timestamp * rewardsPerSecond * poolInfo[cd[((32 * idx) + arg1 + 36)]].field_256) - (poolInfo[cd[((32 * idx) + arg1 + 36)]].field_512 * rewardsPerSecond * poolInfo[cd[((32 * idx) + arg1 + 36)]].field_256) / totalAllocPoint != 10^12:
                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if (10^12 * (block.timestamp * rewardsPerSecond * poolInfo[cd[((32 * idx) + arg1 + 36)]].field_256) - (poolInfo[cd[((32 * idx) + arg1 + 36)]].field_512 * rewardsPerSecond * poolInfo[cd[((32 * idx) + arg1 + 36)]].field_256) / totalAllocPoint / ext_call.return_data[0]) + poolInfo[cd[((32 * idx) + arg1 + 36)]].field_768 < poolInfo[cd[((32 * idx) + arg1 + 36)]].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[cd[((32 * idx) + arg1 + 36)]].field_768 += 10^12 * (block.timestamp * rewardsPerSecond * poolInfo[cd[((32 * idx) + arg1 + 36)]].field_256) - (poolInfo[cd[((32 * idx) + arg1 + 36)]].field_512 * rewardsPerSecond * poolInfo[cd[((32 * idx) + arg1 + 36)]].field_256) / totalAllocPoint / ext_call.return_data[0]
                                        poolInfo[cd[((32 * idx) + arg1 + 36)]].field_512 = block.timestamp
                                        require idx < arg1.length
                                        require cd[((32 * idx) + arg1 + 36)] < poolInfo.length
                                        mem[0] = 4
                                        _1553 = mem[64]
                                        mem[64] = mem[64] + 128
                                        mem[_1553] = poolInfo[cd[((32 * idx) + arg1 + 36)]].field_0
                                        mem[_1553 + 32] = poolInfo[cd[((32 * idx) + arg1 + 36)]].field_256
                                        mem[_1553 + 64] = poolInfo[cd[((32 * idx) + arg1 + 36)]].field_512
                                        mem[_1553 + 96] = poolInfo[cd[((32 * idx) + arg1 + 36)]].field_768
                require idx < arg1.length
                mem[0] = msg.sender
                mem[32] = sha3(cd[((32 * idx) + arg1 + 36)], 6)
                if not userInfo[cd[((32 * idx) + arg1 + 36)]][address(msg.sender)].field_0:
                    if userInfo[cd[((32 * idx) + arg1 + 36)]][address(msg.sender)].field_256 > 0:
                        revert with 0, 'SafeMath: subtraction overflow'
                    if -userInfo[cd[((32 * idx) + arg1 + 36)]][address(msg.sender)].field_256 + s < s:
                        revert with 0, 'SafeMath: addition overflow'
                    if not userInfo[cd[((32 * idx) + arg1 + 36)]][address(msg.sender)].field_0:
                        userInfo[cd[((32 * idx) + arg1 + 36)]][address(msg.sender)].field_256 = 0
                    else:
                        if poolInfo[cd[((32 * idx) + arg1 + 36)]].field_768 * userInfo[cd[((32 * idx) + arg1 + 36)]][address(msg.sender)].field_0 / userInfo[cd[((32 * idx) + arg1 + 36)]][address(msg.sender)].field_0 != poolInfo[cd[((32 * idx) + arg1 + 36)]].field_768:
                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                        userInfo[cd[((32 * idx) + arg1 + 36)]][address(msg.sender)].field_256 = poolInfo[cd[((32 * idx) + arg1 + 36)]].field_768 * userInfo[cd[((32 * idx) + arg1 + 36)]][address(msg.sender)].field_0 / 10^12
                    idx = idx + 1
                    s = -userInfo[cd[((32 * idx) + arg1 + 36)]][address(msg.sender)].field_256 + s
                    continue 
                if poolInfo[cd[((32 * idx) + arg1 + 36)]].field_768 * userInfo[cd[((32 * idx) + arg1 + 36)]][address(msg.sender)].field_0 / userInfo[cd[((32 * idx) + arg1 + 36)]][address(msg.sender)].field_0 != poolInfo[cd[((32 * idx) + arg1 + 36)]].field_768:
                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                if userInfo[cd[((32 * idx) + arg1 + 36)]][address(msg.sender)].field_256 > poolInfo[cd[((32 * idx) + arg1 + 36)]].field_768 * userInfo[cd[((32 * idx) + arg1 + 36)]][address(msg.sender)].field_0 / 10^12:
                    revert with 0, 'SafeMath: subtraction overflow'
                if (poolInfo[cd[((32 * idx) + arg1 + 36)]].field_768 * userInfo[cd[((32 * idx) + arg1 + 36)]][address(msg.sender)].field_0 / 10^12) - userInfo[cd[((32 * idx) + arg1 + 36)]][address(msg.sender)].field_256 + s < s:
                    revert with 0, 'SafeMath: addition overflow'
                if not userInfo[cd[((32 * idx) + arg1 + 36)]][address(msg.sender)].field_0:
                    userInfo[cd[((32 * idx) + arg1 + 36)]][address(msg.sender)].field_256 = 0
                else:
                    if poolInfo[cd[((32 * idx) + arg1 + 36)]].field_768 * userInfo[cd[((32 * idx) + arg1 + 36)]][address(msg.sender)].field_0 / userInfo[cd[((32 * idx) + arg1 + 36)]][address(msg.sender)].field_0 != poolInfo[cd[((32 * idx) + arg1 + 36)]].field_768:
                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                    userInfo[cd[((32 * idx) + arg1 + 36)]][address(msg.sender)].field_256 = poolInfo[cd[((32 * idx) + arg1 + 36)]].field_768 * userInfo[cd[((32 * idx) + arg1 + 36)]][address(msg.sender)].field_0 / 10^12
                idx = idx + 1
                s = (poolInfo[cd[((32 * idx) + arg1 + 36)]].field_768 * userInfo[cd[((32 * idx) + arg1 + 36)]][address(msg.sender)].field_0 / 10^12) - userInfo[cd[((32 * idx) + arg1 + 36)]][address(msg.sender)].field_256 + s
                continue 
        else:
            require sub_334d0bbd.length - 1 < sub_334d0bbd.length
            mem[64] = 160
            if startTime > block.timestamp:
                revert with 0, 'SafeMath: subtraction overflow'
            if block.timestamp - startTime <= sub_334d0bbd[sub_334d0bbd.length].field_0:
                idx = 0
                s = 0
                while idx < arg1.length:
                    require cd[((32 * idx) + arg1 + 36)] < poolInfo.length
                    if block.timestamp <= poolInfo[cd[((32 * idx) + arg1 + 36)]].field_512:
                        require idx < arg1.length
                        require cd[((32 * idx) + arg1 + 36)] < poolInfo.length
                        mem[0] = 4
                        _1037 = mem[64]
                        mem[64] = mem[64] + 128
                        mem[_1037] = poolInfo[cd[((32 * idx) + arg1 + 36)]].field_0
                        mem[_1037 + 32] = poolInfo[cd[((32 * idx) + arg1 + 36)]].field_256
                        mem[_1037 + 64] = poolInfo[cd[((32 * idx) + arg1 + 36)]].field_512
                        mem[_1037 + 96] = poolInfo[cd[((32 * idx) + arg1 + 36)]].field_768
                    else:
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(poolInfo[cd[((32 * idx) + arg1 + 36)]].field_0)
                        staticcall poolInfo[cd[((32 * idx) + arg1 + 36)]].field_0.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            poolInfo[cd[((32 * idx) + arg1 + 36)]].field_512 = block.timestamp
                            require idx < arg1.length
                            require cd[((32 * idx) + arg1 + 36)] < poolInfo.length
                            mem[0] = 4
                            _1067 = mem[64]
                            mem[64] = mem[64] + 128
                            mem[_1067] = poolInfo[cd[((32 * idx) + arg1 + 36)]].field_0
                            mem[_1067 + 32] = poolInfo[cd[((32 * idx) + arg1 + 36)]].field_256
                            mem[_1067 + 64] = poolInfo[cd[((32 * idx) + arg1 + 36)]].field_512
                            mem[_1067 + 96] = poolInfo[cd[((32 * idx) + arg1 + 36)]].field_768
                        else:
                            if not totalAllocPoint:
                                poolInfo[cd[((32 * idx) + arg1 + 36)]].field_512 = block.timestamp
                                require idx < arg1.length
                                require cd[((32 * idx) + arg1 + 36)] < poolInfo.length
                                mem[0] = 4
                                _1085 = mem[64]
                                mem[64] = mem[64] + 128
                                mem[_1085] = poolInfo[cd[((32 * idx) + arg1 + 36)]].field_0
                                mem[_1085 + 32] = poolInfo[cd[((32 * idx) + arg1 + 36)]].field_256
                                mem[_1085 + 64] = poolInfo[cd[((32 * idx) + arg1 + 36)]].field_512
                                mem[_1085 + 96] = poolInfo[cd[((32 * idx) + arg1 + 36)]].field_768
                            else:
                                if poolInfo[cd[((32 * idx) + arg1 + 36)]].field_512 > block.timestamp:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if not block.timestamp - poolInfo[cd[((32 * idx) + arg1 + 36)]].field_512:
                                    if totalAllocPoint <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require totalAllocPoint
                                    if not 0 / totalAllocPoint:
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if (0 / ext_call.return_data[0]) + poolInfo[cd[((32 * idx) + arg1 + 36)]].field_768 < poolInfo[cd[((32 * idx) + arg1 + 36)]].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[cd[((32 * idx) + arg1 + 36)]].field_768 += 0 / ext_call.return_data[0]
                                        poolInfo[cd[((32 * idx) + arg1 + 36)]].field_512 = block.timestamp
                                        require idx < arg1.length
                                        require cd[((32 * idx) + arg1 + 36)] < poolInfo.length
                                        mem[0] = 4
                                        _1474 = mem[64]
                                        mem[64] = mem[64] + 128
                                        mem[_1474] = poolInfo[cd[((32 * idx) + arg1 + 36)]].field_0
                                        mem[_1474 + 32] = poolInfo[cd[((32 * idx) + arg1 + 36)]].field_256
                                        mem[_1474 + 64] = poolInfo[cd[((32 * idx) + arg1 + 36)]].field_512
                                        mem[_1474 + 96] = poolInfo[cd[((32 * idx) + arg1 + 36)]].field_768
                                    else:
                                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[cd[((32 * idx) + arg1 + 36)]].field_768 < poolInfo[cd[((32 * idx) + arg1 + 36)]].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[cd[((32 * idx) + arg1 + 36)]].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                        poolInfo[cd[((32 * idx) + arg1 + 36)]].field_512 = block.timestamp
                                        require idx < arg1.length
                                        require cd[((32 * idx) + arg1 + 36)] < poolInfo.length
                                        mem[0] = 4
                                        _1498 = mem[64]
                                        mem[64] = mem[64] + 128
                                        mem[_1498] = poolInfo[cd[((32 * idx) + arg1 + 36)]].field_0
                                        mem[_1498 + 32] = poolInfo[cd[((32 * idx) + arg1 + 36)]].field_256
                                        mem[_1498 + 64] = poolInfo[cd[((32 * idx) + arg1 + 36)]].field_512
                                        mem[_1498 + 96] = poolInfo[cd[((32 * idx) + arg1 + 36)]].field_768
                                else:
                                    if (block.timestamp * rewardsPerSecond) - (poolInfo[cd[((32 * idx) + arg1 + 36)]].field_512 * rewardsPerSecond) / block.timestamp - poolInfo[cd[((32 * idx) + arg1 + 36)]].field_512 != rewardsPerSecond:
                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    if not (block.timestamp * rewardsPerSecond) - (poolInfo[cd[((32 * idx) + arg1 + 36)]].field_512 * rewardsPerSecond):
                                        if totalAllocPoint <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require totalAllocPoint
                                        if not 0 / totalAllocPoint:
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if (0 / ext_call.return_data[0]) + poolInfo[cd[((32 * idx) + arg1 + 36)]].field_768 < poolInfo[cd[((32 * idx) + arg1 + 36)]].field_768:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[cd[((32 * idx) + arg1 + 36)]].field_768 += 0 / ext_call.return_data[0]
                                            poolInfo[cd[((32 * idx) + arg1 + 36)]].field_512 = block.timestamp
                                            require idx < arg1.length
                                            require cd[((32 * idx) + arg1 + 36)] < poolInfo.length
                                            mem[0] = 4
                                            _1496 = mem[64]
                                            mem[64] = mem[64] + 128
                                            mem[_1496] = poolInfo[cd[((32 * idx) + arg1 + 36)]].field_0
                                            mem[_1496 + 32] = poolInfo[cd[((32 * idx) + arg1 + 36)]].field_256
                                            mem[_1496 + 64] = poolInfo[cd[((32 * idx) + arg1 + 36)]].field_512
                                            mem[_1496 + 96] = poolInfo[cd[((32 * idx) + arg1 + 36)]].field_768
                                        else:
                                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[cd[((32 * idx) + arg1 + 36)]].field_768 < poolInfo[cd[((32 * idx) + arg1 + 36)]].field_768:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[cd[((32 * idx) + arg1 + 36)]].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                            poolInfo[cd[((32 * idx) + arg1 + 36)]].field_512 = block.timestamp
                                            require idx < arg1.length
                                            require cd[((32 * idx) + arg1 + 36)] < poolInfo.length
                                            mem[0] = 4
                                            _1533 = mem[64]
                                            mem[64] = mem[64] + 128
                                            mem[_1533] = poolInfo[cd[((32 * idx) + arg1 + 36)]].field_0
                                            mem[_1533 + 32] = poolInfo[cd[((32 * idx) + arg1 + 36)]].field_256
                                            mem[_1533 + 64] = poolInfo[cd[((32 * idx) + arg1 + 36)]].field_512
                                            mem[_1533 + 96] = poolInfo[cd[((32 * idx) + arg1 + 36)]].field_768
                                    else:
                                        if (block.timestamp * rewardsPerSecond * poolInfo[cd[((32 * idx) + arg1 + 36)]].field_256) - (poolInfo[cd[((32 * idx) + arg1 + 36)]].field_512 * rewardsPerSecond * poolInfo[cd[((32 * idx) + arg1 + 36)]].field_256) / (block.timestamp * rewardsPerSecond) - (poolInfo[cd[((32 * idx) + arg1 + 36)]].field_512 * rewardsPerSecond) != poolInfo[cd[((32 * idx) + arg1 + 36)]].field_256:
                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if totalAllocPoint <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require totalAllocPoint
                                        if not (block.timestamp * rewardsPerSecond * poolInfo[cd[((32 * idx) + arg1 + 36)]].field_256) - (poolInfo[cd[((32 * idx) + arg1 + 36)]].field_512 * rewardsPerSecond * poolInfo[cd[((32 * idx) + arg1 + 36)]].field_256) / totalAllocPoint:
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if (0 / ext_call.return_data[0]) + poolInfo[cd[((32 * idx) + arg1 + 36)]].field_768 < poolInfo[cd[((32 * idx) + arg1 + 36)]].field_768:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[cd[((32 * idx) + arg1 + 36)]].field_768 += 0 / ext_call.return_data[0]
                                            poolInfo[cd[((32 * idx) + arg1 + 36)]].field_512 = block.timestamp
                                            require idx < arg1.length
                                            require cd[((32 * idx) + arg1 + 36)] < poolInfo.length
                                            mem[0] = 4
                                            _1531 = mem[64]
                                            mem[64] = mem[64] + 128
                                            mem[_1531] = poolInfo[cd[((32 * idx) + arg1 + 36)]].field_0
                                            mem[_1531 + 32] = poolInfo[cd[((32 * idx) + arg1 + 36)]].field_256
                                            mem[_1531 + 64] = poolInfo[cd[((32 * idx) + arg1 + 36)]].field_512
                                            mem[_1531 + 96] = poolInfo[cd[((32 * idx) + arg1 + 36)]].field_768
                                        else:
                                            if 10^12 * (block.timestamp * rewardsPerSecond * poolInfo[cd[((32 * idx) + arg1 + 36)]].field_256) - (poolInfo[cd[((32 * idx) + arg1 + 36)]].field_512 * rewardsPerSecond * poolInfo[cd[((32 * idx) + arg1 + 36)]].field_256) / totalAllocPoint / (block.timestamp * rewardsPerSecond * poolInfo[cd[((32 * idx) + arg1 + 36)]].field_256) - (poolInfo[cd[((32 * idx) + arg1 + 36)]].field_512 * rewardsPerSecond * poolInfo[cd[((32 * idx) + arg1 + 36)]].field_256) / totalAllocPoint != 10^12:
                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if (10^12 * (block.timestamp * rewardsPerSecond * poolInfo[cd[((32 * idx) + arg1 + 36)]].field_256) - (poolInfo[cd[((32 * idx) + arg1 + 36)]].field_512 * rewardsPerSecond * poolInfo[cd[((32 * idx) + arg1 + 36)]].field_256) / totalAllocPoint / ext_call.return_data[0]) + poolInfo[cd[((32 * idx) + arg1 + 36)]].field_768 < poolInfo[cd[((32 * idx) + arg1 + 36)]].field_768:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[cd[((32 * idx) + arg1 + 36)]].field_768 += 10^12 * (block.timestamp * rewardsPerSecond * poolInfo[cd[((32 * idx) + arg1 + 36)]].field_256) - (poolInfo[cd[((32 * idx) + arg1 + 36)]].field_512 * rewardsPerSecond * poolInfo[cd[((32 * idx) + arg1 + 36)]].field_256) / totalAllocPoint / ext_call.return_data[0]
                                            poolInfo[cd[((32 * idx) + arg1 + 36)]].field_512 = block.timestamp
                                            require idx < arg1.length
                                            require cd[((32 * idx) + arg1 + 36)] < poolInfo.length
                                            mem[0] = 4
                                            _1561 = mem[64]
                                            mem[64] = mem[64] + 128
                                            mem[_1561] = poolInfo[cd[((32 * idx) + arg1 + 36)]].field_0
                                            mem[_1561 + 32] = poolInfo[cd[((32 * idx) + arg1 + 36)]].field_256
                                            mem[_1561 + 64] = poolInfo[cd[((32 * idx) + arg1 + 36)]].field_512
                                            mem[_1561 + 96] = poolInfo[cd[((32 * idx) + arg1 + 36)]].field_768
                    require idx < arg1.length
                    mem[0] = msg.sender
                    mem[32] = sha3(cd[((32 * idx) + arg1 + 36)], 6)
                    if not userInfo[cd[((32 * idx) + arg1 + 36)]][address(msg.sender)].field_0:
                        if userInfo[cd[((32 * idx) + arg1 + 36)]][address(msg.sender)].field_256 > 0:
                            revert with 0, 'SafeMath: subtraction overflow'
                        if -userInfo[cd[((32 * idx) + arg1 + 36)]][address(msg.sender)].field_256 + s < s:
                            revert with 0, 'SafeMath: addition overflow'
                        if not userInfo[cd[((32 * idx) + arg1 + 36)]][address(msg.sender)].field_0:
                            userInfo[cd[((32 * idx) + arg1 + 36)]][address(msg.sender)].field_256 = 0
                        else:
                            if poolInfo[cd[((32 * idx) + arg1 + 36)]].field_768 * userInfo[cd[((32 * idx) + arg1 + 36)]][address(msg.sender)].field_0 / userInfo[cd[((32 * idx) + arg1 + 36)]][address(msg.sender)].field_0 != poolInfo[cd[((32 * idx) + arg1 + 36)]].field_768:
                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                            userInfo[cd[((32 * idx) + arg1 + 36)]][address(msg.sender)].field_256 = poolInfo[cd[((32 * idx) + arg1 + 36)]].field_768 * userInfo[cd[((32 * idx) + arg1 + 36)]][address(msg.sender)].field_0 / 10^12
                        idx = idx + 1
                        s = -userInfo[cd[((32 * idx) + arg1 + 36)]][address(msg.sender)].field_256 + s
                        continue 
                    if poolInfo[cd[((32 * idx) + arg1 + 36)]].field_768 * userInfo[cd[((32 * idx) + arg1 + 36)]][address(msg.sender)].field_0 / userInfo[cd[((32 * idx) + arg1 + 36)]][address(msg.sender)].field_0 != poolInfo[cd[((32 * idx) + arg1 + 36)]].field_768:
                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                    if userInfo[cd[((32 * idx) + arg1 + 36)]][address(msg.sender)].field_256 > poolInfo[cd[((32 * idx) + arg1 + 36)]].field_768 * userInfo[cd[((32 * idx) + arg1 + 36)]][address(msg.sender)].field_0 / 10^12:
                        revert with 0, 'SafeMath: subtraction overflow'
                    if (poolInfo[cd[((32 * idx) + arg1 + 36)]].field_768 * userInfo[cd[((32 * idx) + arg1 + 36)]][address(msg.sender)].field_0 / 10^12) - userInfo[cd[((32 * idx) + arg1 + 36)]][address(msg.sender)].field_256 + s < s:
                        revert with 0, 'SafeMath: addition overflow'
                    if not userInfo[cd[((32 * idx) + arg1 + 36)]][address(msg.sender)].field_0:
                        userInfo[cd[((32 * idx) + arg1 + 36)]][address(msg.sender)].field_256 = 0
                    else:
                        if poolInfo[cd[((32 * idx) + arg1 + 36)]].field_768 * userInfo[cd[((32 * idx) + arg1 + 36)]][address(msg.sender)].field_0 / userInfo[cd[((32 * idx) + arg1 + 36)]][address(msg.sender)].field_0 != poolInfo[cd[((32 * idx) + arg1 + 36)]].field_768:
                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                        userInfo[cd[((32 * idx) + arg1 + 36)]][address(msg.sender)].field_256 = poolInfo[cd[((32 * idx) + arg1 + 36)]].field_768 * userInfo[cd[((32 * idx) + arg1 + 36)]][address(msg.sender)].field_0 / 10^12
                    idx = idx + 1
                    s = (poolInfo[cd[((32 * idx) + arg1 + 36)]].field_768 * userInfo[cd[((32 * idx) + arg1 + 36)]][address(msg.sender)].field_0 / 10^12) - userInfo[cd[((32 * idx) + arg1 + 36)]][address(msg.sender)].field_256 + s
                    continue 
            else:
                idx = 0
                while idx < poolInfo.length:
                    mem[0] = 4
                    if block.timestamp > poolInfo[idx].field_512:
                        mem[164] = this.address
                        require ext_code.size(poolInfo[idx].field_0)
                        staticcall poolInfo[idx].field_0.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[160] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0]:
                            if totalAllocPoint:
                                if poolInfo[idx].field_512 > block.timestamp:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if not block.timestamp - poolInfo[idx].field_512:
                                    if totalAllocPoint <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require totalAllocPoint
                                    if not 0 / totalAllocPoint:
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                    else:
                                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                else:
                                    if (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond) / block.timestamp - poolInfo[idx].field_512 != rewardsPerSecond:
                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
                                    if not (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond):
                                        if totalAllocPoint <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require totalAllocPoint
                                        if not 0 / totalAllocPoint:
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                        else:
                                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                    else:
                                        if (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond) != poolInfo[idx].field_256:
                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
                                        if totalAllocPoint <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require totalAllocPoint
                                        if not (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint:
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                        else:
                                            if 10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if (10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[idx].field_768 += 10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                        poolInfo[idx].field_512 = block.timestamp
                    idx = idx + 1
                    continue 
                uint128(stor3.field_0) = sub_334d0bbd[sub_334d0bbd.length].field_0
                uint128(stor3.field_128) = 0
                require sub_334d0bbd.length
                sub_334d0bbd[sub_334d0bbd.length].field_0 = 0
                sub_334d0bbd.length--
                idx = 0
                s = 0
                while idx < arg1.length:
                    require cd[((32 * idx) + arg1 + 36)] < poolInfo.length
                    if block.timestamp <= poolInfo[cd[((32 * idx) + arg1 + 36)]].field_512:
                        require idx < arg1.length
                        require cd[((32 * idx) + arg1 + 36)] < poolInfo.length
                        mem[0] = 4
                        _2013 = mem[64]
                        mem[64] = mem[64] + 128
                        mem[_2013] = poolInfo[cd[((32 * idx) + arg1 + 36)]].field_0
                        mem[_2013 + 32] = poolInfo[cd[((32 * idx) + arg1 + 36)]].field_256
                        mem[_2013 + 64] = poolInfo[cd[((32 * idx) + arg1 + 36)]].field_512
                        mem[_2013 + 96] = poolInfo[cd[((32 * idx) + arg1 + 36)]].field_768
                    else:
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(poolInfo[cd[((32 * idx) + arg1 + 36)]].field_0)
                        staticcall poolInfo[cd[((32 * idx) + arg1 + 36)]].field_0.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            poolInfo[cd[((32 * idx) + arg1 + 36)]].field_512 = block.timestamp
                            require idx < arg1.length
                            require cd[((32 * idx) + arg1 + 36)] < poolInfo.length
                            mem[0] = 4
                            _2020 = mem[64]
                            mem[64] = mem[64] + 128
                            mem[_2020] = poolInfo[cd[((32 * idx) + arg1 + 36)]].field_0
                            mem[_2020 + 32] = poolInfo[cd[((32 * idx) + arg1 + 36)]].field_256
                            mem[_2020 + 64] = poolInfo[cd[((32 * idx) + arg1 + 36)]].field_512
                            mem[_2020 + 96] = poolInfo[cd[((32 * idx) + arg1 + 36)]].field_768
                        else:
                            if not totalAllocPoint:
                                poolInfo[cd[((32 * idx) + arg1 + 36)]].field_512 = block.timestamp
                                require idx < arg1.length
                                require cd[((32 * idx) + arg1 + 36)] < poolInfo.length
                                mem[0] = 4
                                _2027 = mem[64]
                                mem[64] = mem[64] + 128
                                mem[_2027] = poolInfo[cd[((32 * idx) + arg1 + 36)]].field_0
                                mem[_2027 + 32] = poolInfo[cd[((32 * idx) + arg1 + 36)]].field_256
                                mem[_2027 + 64] = poolInfo[cd[((32 * idx) + arg1 + 36)]].field_512
                                mem[_2027 + 96] = poolInfo[cd[((32 * idx) + arg1 + 36)]].field_768
                            else:
                                if poolInfo[cd[((32 * idx) + arg1 + 36)]].field_512 > block.timestamp:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if not block.timestamp - poolInfo[cd[((32 * idx) + arg1 + 36)]].field_512:
                                    if totalAllocPoint <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require totalAllocPoint
                                    if not 0 / totalAllocPoint:
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if (0 / ext_call.return_data[0]) + poolInfo[cd[((32 * idx) + arg1 + 36)]].field_768 < poolInfo[cd[((32 * idx) + arg1 + 36)]].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[cd[((32 * idx) + arg1 + 36)]].field_768 += 0 / ext_call.return_data[0]
                                        poolInfo[cd[((32 * idx) + arg1 + 36)]].field_512 = block.timestamp
                                        require idx < arg1.length
                                        require cd[((32 * idx) + arg1 + 36)] < poolInfo.length
                                        mem[0] = 4
                                        _2118 = mem[64]
                                        mem[64] = mem[64] + 128
                                        mem[_2118] = poolInfo[cd[((32 * idx) + arg1 + 36)]].field_0
                                        mem[_2118 + 32] = poolInfo[cd[((32 * idx) + arg1 + 36)]].field_256
                                        mem[_2118 + 64] = poolInfo[cd[((32 * idx) + arg1 + 36)]].field_512
                                        mem[_2118 + 96] = poolInfo[cd[((32 * idx) + arg1 + 36)]].field_768
                                    else:
                                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[cd[((32 * idx) + arg1 + 36)]].field_768 < poolInfo[cd[((32 * idx) + arg1 + 36)]].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[cd[((32 * idx) + arg1 + 36)]].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                        poolInfo[cd[((32 * idx) + arg1 + 36)]].field_512 = block.timestamp
                                        require idx < arg1.length
                                        require cd[((32 * idx) + arg1 + 36)] < poolInfo.length
                                        mem[0] = 4
                                        _2122 = mem[64]
                                        mem[64] = mem[64] + 128
                                        mem[_2122] = poolInfo[cd[((32 * idx) + arg1 + 36)]].field_0
                                        mem[_2122 + 32] = poolInfo[cd[((32 * idx) + arg1 + 36)]].field_256
                                        mem[_2122 + 64] = poolInfo[cd[((32 * idx) + arg1 + 36)]].field_512
                                        mem[_2122 + 96] = poolInfo[cd[((32 * idx) + arg1 + 36)]].field_768
                                else:
                                    if (block.timestamp * rewardsPerSecond) - (poolInfo[cd[((32 * idx) + arg1 + 36)]].field_512 * rewardsPerSecond) / block.timestamp - poolInfo[cd[((32 * idx) + arg1 + 36)]].field_512 != rewardsPerSecond:
                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    if not (block.timestamp * rewardsPerSecond) - (poolInfo[cd[((32 * idx) + arg1 + 36)]].field_512 * rewardsPerSecond):
                                        if totalAllocPoint <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require totalAllocPoint
                                        if not 0 / totalAllocPoint:
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if (0 / ext_call.return_data[0]) + poolInfo[cd[((32 * idx) + arg1 + 36)]].field_768 < poolInfo[cd[((32 * idx) + arg1 + 36)]].field_768:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[cd[((32 * idx) + arg1 + 36)]].field_768 += 0 / ext_call.return_data[0]
                                            poolInfo[cd[((32 * idx) + arg1 + 36)]].field_512 = block.timestamp
                                            require idx < arg1.length
                                            require cd[((32 * idx) + arg1 + 36)] < poolInfo.length
                                            mem[0] = 4
                                            _2120 = mem[64]
                                            mem[64] = mem[64] + 128
                                            mem[_2120] = poolInfo[cd[((32 * idx) + arg1 + 36)]].field_0
                                            mem[_2120 + 32] = poolInfo[cd[((32 * idx) + arg1 + 36)]].field_256
                                            mem[_2120 + 64] = poolInfo[cd[((32 * idx) + arg1 + 36)]].field_512
                                            mem[_2120 + 96] = poolInfo[cd[((32 * idx) + arg1 + 36)]].field_768
                                        else:
                                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[cd[((32 * idx) + arg1 + 36)]].field_768 < poolInfo[cd[((32 * idx) + arg1 + 36)]].field_768:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[cd[((32 * idx) + arg1 + 36)]].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                            poolInfo[cd[((32 * idx) + arg1 + 36)]].field_512 = block.timestamp
                                            require idx < arg1.length
                                            require cd[((32 * idx) + arg1 + 36)] < poolInfo.length
                                            mem[0] = 4
                                            _2129 = mem[64]
                                            mem[64] = mem[64] + 128
                                            mem[_2129] = poolInfo[cd[((32 * idx) + arg1 + 36)]].field_0
                                            mem[_2129 + 32] = poolInfo[cd[((32 * idx) + arg1 + 36)]].field_256
                                            mem[_2129 + 64] = poolInfo[cd[((32 * idx) + arg1 + 36)]].field_512
                                            mem[_2129 + 96] = poolInfo[cd[((32 * idx) + arg1 + 36)]].field_768
                                    else:
                                        if (block.timestamp * rewardsPerSecond * poolInfo[cd[((32 * idx) + arg1 + 36)]].field_256) - (poolInfo[cd[((32 * idx) + arg1 + 36)]].field_512 * rewardsPerSecond * poolInfo[cd[((32 * idx) + arg1 + 36)]].field_256) / (block.timestamp * rewardsPerSecond) - (poolInfo[cd[((32 * idx) + arg1 + 36)]].field_512 * rewardsPerSecond) != poolInfo[cd[((32 * idx) + arg1 + 36)]].field_256:
                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if totalAllocPoint <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require totalAllocPoint
                                        if not (block.timestamp * rewardsPerSecond * poolInfo[cd[((32 * idx) + arg1 + 36)]].field_256) - (poolInfo[cd[((32 * idx) + arg1 + 36)]].field_512 * rewardsPerSecond * poolInfo[cd[((32 * idx) + arg1 + 36)]].field_256) / totalAllocPoint:
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if (0 / ext_call.return_data[0]) + poolInfo[cd[((32 * idx) + arg1 + 36)]].field_768 < poolInfo[cd[((32 * idx) + arg1 + 36)]].field_768:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[cd[((32 * idx) + arg1 + 36)]].field_768 += 0 / ext_call.return_data[0]
                                            poolInfo[cd[((32 * idx) + arg1 + 36)]].field_512 = block.timestamp
                                            require idx < arg1.length
                                            require cd[((32 * idx) + arg1 + 36)] < poolInfo.length
                                            mem[0] = 4
                                            _2127 = mem[64]
                                            mem[64] = mem[64] + 128
                                            mem[_2127] = poolInfo[cd[((32 * idx) + arg1 + 36)]].field_0
                                            mem[_2127 + 32] = poolInfo[cd[((32 * idx) + arg1 + 36)]].field_256
                                            mem[_2127 + 64] = poolInfo[cd[((32 * idx) + arg1 + 36)]].field_512
                                            mem[_2127 + 96] = poolInfo[cd[((32 * idx) + arg1 + 36)]].field_768
                                        else:
                                            if 10^12 * (block.timestamp * rewardsPerSecond * poolInfo[cd[((32 * idx) + arg1 + 36)]].field_256) - (poolInfo[cd[((32 * idx) + arg1 + 36)]].field_512 * rewardsPerSecond * poolInfo[cd[((32 * idx) + arg1 + 36)]].field_256) / totalAllocPoint / (block.timestamp * rewardsPerSecond * poolInfo[cd[((32 * idx) + arg1 + 36)]].field_256) - (poolInfo[cd[((32 * idx) + arg1 + 36)]].field_512 * rewardsPerSecond * poolInfo[cd[((32 * idx) + arg1 + 36)]].field_256) / totalAllocPoint != 10^12:
                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if (10^12 * (block.timestamp * rewardsPerSecond * poolInfo[cd[((32 * idx) + arg1 + 36)]].field_256) - (poolInfo[cd[((32 * idx) + arg1 + 36)]].field_512 * rewardsPerSecond * poolInfo[cd[((32 * idx) + arg1 + 36)]].field_256) / totalAllocPoint / ext_call.return_data[0]) + poolInfo[cd[((32 * idx) + arg1 + 36)]].field_768 < poolInfo[cd[((32 * idx) + arg1 + 36)]].field_768:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[cd[((32 * idx) + arg1 + 36)]].field_768 += 10^12 * (block.timestamp * rewardsPerSecond * poolInfo[cd[((32 * idx) + arg1 + 36)]].field_256) - (poolInfo[cd[((32 * idx) + arg1 + 36)]].field_512 * rewardsPerSecond * poolInfo[cd[((32 * idx) + arg1 + 36)]].field_256) / totalAllocPoint / ext_call.return_data[0]
                                            poolInfo[cd[((32 * idx) + arg1 + 36)]].field_512 = block.timestamp
                                            require idx < arg1.length
                                            require cd[((32 * idx) + arg1 + 36)] < poolInfo.length
                                            mem[0] = 4
                                            _2137 = mem[64]
                                            mem[64] = mem[64] + 128
                                            mem[_2137] = poolInfo[cd[((32 * idx) + arg1 + 36)]].field_0
                                            mem[_2137 + 32] = poolInfo[cd[((32 * idx) + arg1 + 36)]].field_256
                                            mem[_2137 + 64] = poolInfo[cd[((32 * idx) + arg1 + 36)]].field_512
                                            mem[_2137 + 96] = poolInfo[cd[((32 * idx) + arg1 + 36)]].field_768
                    require idx < arg1.length
                    mem[0] = msg.sender
                    mem[32] = sha3(cd[((32 * idx) + arg1 + 36)], 6)
                    if not userInfo[cd[((32 * idx) + arg1 + 36)]][address(msg.sender)].field_0:
                        if userInfo[cd[((32 * idx) + arg1 + 36)]][address(msg.sender)].field_256 > 0:
                            revert with 0, 'SafeMath: subtraction overflow'
                        if -userInfo[cd[((32 * idx) + arg1 + 36)]][address(msg.sender)].field_256 + s < s:
                            revert with 0, 'SafeMath: addition overflow'
                        if not userInfo[cd[((32 * idx) + arg1 + 36)]][address(msg.sender)].field_0:
                            userInfo[cd[((32 * idx) + arg1 + 36)]][address(msg.sender)].field_256 = 0
                        else:
                            if poolInfo[cd[((32 * idx) + arg1 + 36)]].field_768 * userInfo[cd[((32 * idx) + arg1 + 36)]][address(msg.sender)].field_0 / userInfo[cd[((32 * idx) + arg1 + 36)]][address(msg.sender)].field_0 != poolInfo[cd[((32 * idx) + arg1 + 36)]].field_768:
                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                            userInfo[cd[((32 * idx) + arg1 + 36)]][address(msg.sender)].field_256 = poolInfo[cd[((32 * idx) + arg1 + 36)]].field_768 * userInfo[cd[((32 * idx) + arg1 + 36)]][address(msg.sender)].field_0 / 10^12
                        idx = idx + 1
                        s = -userInfo[cd[((32 * idx) + arg1 + 36)]][address(msg.sender)].field_256 + s
                        continue 
                    if poolInfo[cd[((32 * idx) + arg1 + 36)]].field_768 * userInfo[cd[((32 * idx) + arg1 + 36)]][address(msg.sender)].field_0 / userInfo[cd[((32 * idx) + arg1 + 36)]][address(msg.sender)].field_0 != poolInfo[cd[((32 * idx) + arg1 + 36)]].field_768:
                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                    if userInfo[cd[((32 * idx) + arg1 + 36)]][address(msg.sender)].field_256 > poolInfo[cd[((32 * idx) + arg1 + 36)]].field_768 * userInfo[cd[((32 * idx) + arg1 + 36)]][address(msg.sender)].field_0 / 10^12:
                        revert with 0, 'SafeMath: subtraction overflow'
                    if (poolInfo[cd[((32 * idx) + arg1 + 36)]].field_768 * userInfo[cd[((32 * idx) + arg1 + 36)]][address(msg.sender)].field_0 / 10^12) - userInfo[cd[((32 * idx) + arg1 + 36)]][address(msg.sender)].field_256 + s < s:
                        revert with 0, 'SafeMath: addition overflow'
                    if not userInfo[cd[((32 * idx) + arg1 + 36)]][address(msg.sender)].field_0:
                        userInfo[cd[((32 * idx) + arg1 + 36)]][address(msg.sender)].field_256 = 0
                    else:
                        if poolInfo[cd[((32 * idx) + arg1 + 36)]].field_768 * userInfo[cd[((32 * idx) + arg1 + 36)]][address(msg.sender)].field_0 / userInfo[cd[((32 * idx) + arg1 + 36)]][address(msg.sender)].field_0 != poolInfo[cd[((32 * idx) + arg1 + 36)]].field_768:
                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                        userInfo[cd[((32 * idx) + arg1 + 36)]][address(msg.sender)].field_256 = poolInfo[cd[((32 * idx) + arg1 + 36)]].field_768 * userInfo[cd[((32 * idx) + arg1 + 36)]][address(msg.sender)].field_0 / 10^12
                    idx = idx + 1
                    s = (poolInfo[cd[((32 * idx) + arg1 + 36)]].field_768 * userInfo[cd[((32 * idx) + arg1 + 36)]][address(msg.sender)].field_0 / 10^12) - userInfo[cd[((32 * idx) + arg1 + 36)]][address(msg.sender)].field_256 + s
                    continue 
    if s:
        require ext_code.size(sub_9b8e5563Address)
        call sub_9b8e5563Address.0x40c10f19 with:
             gas gas_remaining wei
            args msg.sender, s
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require ext_code.size(sub_9b8e5563Address)
        call sub_9b8e5563Address.0x40c10f19 with:
             gas gas_remaining wei
            args owner, s / 10
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
}

function claimAll() payable {
    mem[64] = 96
    if not startTime:
        idx = 0
        while idx < poolInfo.length:
            mem[0] = msg.sender
            mem[32] = sha3(idx, 6)
            _17552 = mem[64]
            mem[64] = mem[64] + 64
            mem[_17552] = userInfo[idx][address(msg.sender)].field_0
            mem[_17552 + 32] = userInfo[idx][address(msg.sender)].field_256
            if userInfo[idx][address(msg.sender)].field_0:
                require idx < poolInfo.length
                mem[0] = 4
                _17563 = mem[64]
                mem[64] = mem[64] + 128
                mem[_17563] = poolInfo[idx].field_0
                mem[_17563 + 32] = poolInfo[idx].field_256
                mem[_17563 + 64] = poolInfo[idx].field_512
                mem[_17563 + 96] = poolInfo[idx].field_768
                mem[mem[64] + 4] = this.address
                require ext_code.size(poolInfo[idx].field_0)
                staticcall poolInfo[idx].field_0.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if block.timestamp <= poolInfo[idx].field_512:
                    if not userInfo[idx][address(msg.sender)].field_0:
                        if userInfo[idx][address(msg.sender)].field_256 > 0:
                            revert with 0, 'SafeMath: subtraction overflow'
                        if -userInfo[idx][address(msg.sender)].field_256 > 0:
                            require idx < poolInfo.length
                            if block.timestamp <= poolInfo[idx].field_512:
                                require idx < poolInfo.length
                                mem[0] = 4
                                _17807 = mem[64]
                                mem[64] = mem[64] + 128
                                mem[_17807] = poolInfo[idx].field_0
                                mem[_17807 + 32] = poolInfo[idx].field_256
                                mem[_17807 + 64] = poolInfo[idx].field_512
                                mem[_17807 + 96] = poolInfo[idx].field_768
                            else:
                                mem[mem[64] + 4] = this.address
                                require ext_code.size(poolInfo[idx].field_0)
                                staticcall poolInfo[idx].field_0.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0]:
                                    poolInfo[idx].field_512 = block.timestamp
                                    require idx < poolInfo.length
                                    mem[0] = 4
                                    _18009 = mem[64]
                                    mem[64] = mem[64] + 128
                                    mem[_18009] = poolInfo[idx].field_0
                                    mem[_18009 + 32] = poolInfo[idx].field_256
                                    mem[_18009 + 64] = poolInfo[idx].field_512
                                    mem[_18009 + 96] = poolInfo[idx].field_768
                                else:
                                    if not totalAllocPoint:
                                        poolInfo[idx].field_512 = block.timestamp
                                        require idx < poolInfo.length
                                        mem[0] = 4
                                        _18067 = mem[64]
                                        mem[64] = mem[64] + 128
                                        mem[_18067] = poolInfo[idx].field_0
                                        mem[_18067 + 32] = poolInfo[idx].field_256
                                        mem[_18067 + 64] = poolInfo[idx].field_512
                                        mem[_18067 + 96] = poolInfo[idx].field_768
                                    else:
                                        if poolInfo[idx].field_512 > block.timestamp:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if not block.timestamp - poolInfo[idx].field_512:
                                            if totalAllocPoint <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalAllocPoint
                                            if not 0 / totalAllocPoint:
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                poolInfo[idx].field_512 = block.timestamp
                                                require idx < poolInfo.length
                                                mem[0] = 4
                                                _20597 = mem[64]
                                                mem[64] = mem[64] + 128
                                                mem[_20597] = poolInfo[idx].field_0
                                                mem[_20597 + 32] = poolInfo[idx].field_256
                                                mem[_20597 + 64] = poolInfo[idx].field_512
                                                mem[_20597 + 96] = poolInfo[idx].field_768
                                            else:
                                                if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                poolInfo[idx].field_512 = block.timestamp
                                                require idx < poolInfo.length
                                                mem[0] = 4
                                                _20780 = mem[64]
                                                mem[64] = mem[64] + 128
                                                mem[_20780] = poolInfo[idx].field_0
                                                mem[_20780 + 32] = poolInfo[idx].field_256
                                                mem[_20780 + 64] = poolInfo[idx].field_512
                                                mem[_20780 + 96] = poolInfo[idx].field_768
                                        else:
                                            if (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond) / block.timestamp - poolInfo[idx].field_512 != rewardsPerSecond:
                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if not (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond):
                                                if totalAllocPoint <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalAllocPoint
                                                if not 0 / totalAllocPoint:
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0]
                                                    if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                    poolInfo[idx].field_512 = block.timestamp
                                                    require idx < poolInfo.length
                                                    mem[0] = 4
                                                    _20775 = mem[64]
                                                    mem[64] = mem[64] + 128
                                                    mem[_20775] = poolInfo[idx].field_0
                                                    mem[_20775 + 32] = poolInfo[idx].field_256
                                                    mem[_20775 + 64] = poolInfo[idx].field_512
                                                    mem[_20775 + 96] = poolInfo[idx].field_768
                                                else:
                                                    if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0]
                                                    if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                    poolInfo[idx].field_512 = block.timestamp
                                                    require idx < poolInfo.length
                                                    mem[0] = 4
                                                    _20981 = mem[64]
                                                    mem[64] = mem[64] + 128
                                                    mem[_20981] = poolInfo[idx].field_0
                                                    mem[_20981 + 32] = poolInfo[idx].field_256
                                                    mem[_20981 + 64] = poolInfo[idx].field_512
                                                    mem[_20981 + 96] = poolInfo[idx].field_768
                                            else:
                                                if (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond) != poolInfo[idx].field_256:
                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                if totalAllocPoint <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalAllocPoint
                                                if not (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint:
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0]
                                                    if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                    poolInfo[idx].field_512 = block.timestamp
                                                    require idx < poolInfo.length
                                                    mem[0] = 4
                                                    _20976 = mem[64]
                                                    mem[64] = mem[64] + 128
                                                    mem[_20976] = poolInfo[idx].field_0
                                                    mem[_20976 + 32] = poolInfo[idx].field_256
                                                    mem[_20976 + 64] = poolInfo[idx].field_512
                                                    mem[_20976 + 96] = poolInfo[idx].field_768
                                                else:
                                                    if 10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0]
                                                    if (10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    poolInfo[idx].field_768 += 10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                                                    poolInfo[idx].field_512 = block.timestamp
                                                    require idx < poolInfo.length
                                                    mem[0] = 4
                                                    _21185 = mem[64]
                                                    mem[64] = mem[64] + 128
                                                    mem[_21185] = poolInfo[idx].field_0
                                                    mem[_21185 + 32] = poolInfo[idx].field_256
                                                    mem[_21185 + 64] = poolInfo[idx].field_512
                                                    mem[_21185 + 96] = poolInfo[idx].field_768
                            mem[0] = msg.sender
                            mem[32] = sha3(idx, 6)
                            if not userInfo[idx][msg.sender].field_0:
                                if userInfo[idx][msg.sender].field_256 > 0:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if -userInfo[idx][msg.sender].field_256 < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                            else:
                                if poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / userInfo[idx][msg.sender].field_0 != poolInfo[idx].field_768:
                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                if userInfo[idx][msg.sender].field_256 > poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if (poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12) - userInfo[idx][msg.sender].field_256 < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                            if not userInfo[idx][msg.sender].field_0:
                                userInfo[idx][msg.sender].field_256 = 0
                            else:
                                if poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / userInfo[idx][msg.sender].field_0 != poolInfo[idx].field_768:
                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                userInfo[idx][msg.sender].field_256 = poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12
                    else:
                        if poolInfo[idx].field_768 * userInfo[idx][address(msg.sender)].field_0 / userInfo[idx][address(msg.sender)].field_0 != poolInfo[idx].field_768:
                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                        if userInfo[idx][address(msg.sender)].field_256 > poolInfo[idx].field_768 * userInfo[idx][address(msg.sender)].field_0 / 10^12:
                            revert with 0, 'SafeMath: subtraction overflow'
                        if (poolInfo[idx].field_768 * userInfo[idx][address(msg.sender)].field_0 / 10^12) - userInfo[idx][address(msg.sender)].field_256 > 0:
                            require idx < poolInfo.length
                            if block.timestamp <= poolInfo[idx].field_512:
                                require idx < poolInfo.length
                                mem[0] = 4
                                _17840 = mem[64]
                                mem[64] = mem[64] + 128
                                mem[_17840] = poolInfo[idx].field_0
                                mem[_17840 + 32] = poolInfo[idx].field_256
                                mem[_17840 + 64] = poolInfo[idx].field_512
                                mem[_17840 + 96] = poolInfo[idx].field_768
                            else:
                                mem[mem[64] + 4] = this.address
                                require ext_code.size(poolInfo[idx].field_0)
                                staticcall poolInfo[idx].field_0.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0]:
                                    poolInfo[idx].field_512 = block.timestamp
                                    require idx < poolInfo.length
                                    mem[0] = 4
                                    _18060 = mem[64]
                                    mem[64] = mem[64] + 128
                                    mem[_18060] = poolInfo[idx].field_0
                                    mem[_18060 + 32] = poolInfo[idx].field_256
                                    mem[_18060 + 64] = poolInfo[idx].field_512
                                    mem[_18060 + 96] = poolInfo[idx].field_768
                                else:
                                    if not totalAllocPoint:
                                        poolInfo[idx].field_512 = block.timestamp
                                        require idx < poolInfo.length
                                        mem[0] = 4
                                        _18145 = mem[64]
                                        mem[64] = mem[64] + 128
                                        mem[_18145] = poolInfo[idx].field_0
                                        mem[_18145 + 32] = poolInfo[idx].field_256
                                        mem[_18145 + 64] = poolInfo[idx].field_512
                                        mem[_18145 + 96] = poolInfo[idx].field_768
                                    else:
                                        if poolInfo[idx].field_512 > block.timestamp:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if not block.timestamp - poolInfo[idx].field_512:
                                            if totalAllocPoint <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalAllocPoint
                                            if not 0 / totalAllocPoint:
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                poolInfo[idx].field_512 = block.timestamp
                                                require idx < poolInfo.length
                                                mem[0] = 4
                                                _20770 = mem[64]
                                                mem[64] = mem[64] + 128
                                                mem[_20770] = poolInfo[idx].field_0
                                                mem[_20770 + 32] = poolInfo[idx].field_256
                                                mem[_20770 + 64] = poolInfo[idx].field_512
                                                mem[_20770 + 96] = poolInfo[idx].field_768
                                            else:
                                                if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                poolInfo[idx].field_512 = block.timestamp
                                                require idx < poolInfo.length
                                                mem[0] = 4
                                                _20971 = mem[64]
                                                mem[64] = mem[64] + 128
                                                mem[_20971] = poolInfo[idx].field_0
                                                mem[_20971 + 32] = poolInfo[idx].field_256
                                                mem[_20971 + 64] = poolInfo[idx].field_512
                                                mem[_20971 + 96] = poolInfo[idx].field_768
                                        else:
                                            if (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond) / block.timestamp - poolInfo[idx].field_512 != rewardsPerSecond:
                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if not (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond):
                                                if totalAllocPoint <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalAllocPoint
                                                if not 0 / totalAllocPoint:
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0]
                                                    if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                    poolInfo[idx].field_512 = block.timestamp
                                                    require idx < poolInfo.length
                                                    mem[0] = 4
                                                    _20966 = mem[64]
                                                    mem[64] = mem[64] + 128
                                                    mem[_20966] = poolInfo[idx].field_0
                                                    mem[_20966 + 32] = poolInfo[idx].field_256
                                                    mem[_20966 + 64] = poolInfo[idx].field_512
                                                    mem[_20966 + 96] = poolInfo[idx].field_768
                                                else:
                                                    if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0]
                                                    if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                    poolInfo[idx].field_512 = block.timestamp
                                                    require idx < poolInfo.length
                                                    mem[0] = 4
                                                    _21180 = mem[64]
                                                    mem[64] = mem[64] + 128
                                                    mem[_21180] = poolInfo[idx].field_0
                                                    mem[_21180 + 32] = poolInfo[idx].field_256
                                                    mem[_21180 + 64] = poolInfo[idx].field_512
                                                    mem[_21180 + 96] = poolInfo[idx].field_768
                                            else:
                                                if (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond) != poolInfo[idx].field_256:
                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                if totalAllocPoint <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalAllocPoint
                                                if not (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint:
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0]
                                                    if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                    poolInfo[idx].field_512 = block.timestamp
                                                    require idx < poolInfo.length
                                                    mem[0] = 4
                                                    _21175 = mem[64]
                                                    mem[64] = mem[64] + 128
                                                    mem[_21175] = poolInfo[idx].field_0
                                                    mem[_21175 + 32] = poolInfo[idx].field_256
                                                    mem[_21175 + 64] = poolInfo[idx].field_512
                                                    mem[_21175 + 96] = poolInfo[idx].field_768
                                                else:
                                                    if 10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0]
                                                    if (10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    poolInfo[idx].field_768 += 10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                                                    poolInfo[idx].field_512 = block.timestamp
                                                    require idx < poolInfo.length
                                                    mem[0] = 4
                                                    _21410 = mem[64]
                                                    mem[64] = mem[64] + 128
                                                    mem[_21410] = poolInfo[idx].field_0
                                                    mem[_21410 + 32] = poolInfo[idx].field_256
                                                    mem[_21410 + 64] = poolInfo[idx].field_512
                                                    mem[_21410 + 96] = poolInfo[idx].field_768
                            mem[0] = msg.sender
                            mem[32] = sha3(idx, 6)
                            if not userInfo[idx][msg.sender].field_0:
                                if userInfo[idx][msg.sender].field_256 > 0:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if -userInfo[idx][msg.sender].field_256 < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                            else:
                                if poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / userInfo[idx][msg.sender].field_0 != poolInfo[idx].field_768:
                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                if userInfo[idx][msg.sender].field_256 > poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if (poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12) - userInfo[idx][msg.sender].field_256 < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                            if not userInfo[idx][msg.sender].field_0:
                                userInfo[idx][msg.sender].field_256 = 0
                            else:
                                if poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / userInfo[idx][msg.sender].field_0 != poolInfo[idx].field_768:
                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                userInfo[idx][msg.sender].field_256 = poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12
                else:
                    if not ext_call.return_data[0]:
                        if not userInfo[idx][address(msg.sender)].field_0:
                            if userInfo[idx][address(msg.sender)].field_256 > 0:
                                revert with 0, 'SafeMath: subtraction overflow'
                            if -userInfo[idx][address(msg.sender)].field_256 > 0:
                                require idx < poolInfo.length
                                if block.timestamp <= poolInfo[idx].field_512:
                                    require idx < poolInfo.length
                                    mem[0] = 4
                                    _17847 = mem[64]
                                    mem[64] = mem[64] + 128
                                    mem[_17847] = poolInfo[idx].field_0
                                    mem[_17847 + 32] = poolInfo[idx].field_256
                                    mem[_17847 + 64] = poolInfo[idx].field_512
                                    mem[_17847 + 96] = poolInfo[idx].field_768
                                else:
                                    mem[mem[64] + 4] = this.address
                                    require ext_code.size(poolInfo[idx].field_0)
                                    staticcall poolInfo[idx].field_0.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        poolInfo[idx].field_512 = block.timestamp
                                        require idx < poolInfo.length
                                        mem[0] = 4
                                        _18074 = mem[64]
                                        mem[64] = mem[64] + 128
                                        mem[_18074] = poolInfo[idx].field_0
                                        mem[_18074 + 32] = poolInfo[idx].field_256
                                        mem[_18074 + 64] = poolInfo[idx].field_512
                                        mem[_18074 + 96] = poolInfo[idx].field_768
                                    else:
                                        if not totalAllocPoint:
                                            poolInfo[idx].field_512 = block.timestamp
                                            require idx < poolInfo.length
                                            mem[0] = 4
                                            _18157 = mem[64]
                                            mem[64] = mem[64] + 128
                                            mem[_18157] = poolInfo[idx].field_0
                                            mem[_18157 + 32] = poolInfo[idx].field_256
                                            mem[_18157 + 64] = poolInfo[idx].field_512
                                            mem[_18157 + 96] = poolInfo[idx].field_768
                                        else:
                                            if poolInfo[idx].field_512 > block.timestamp:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not block.timestamp - poolInfo[idx].field_512:
                                                if totalAllocPoint <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalAllocPoint
                                                if not 0 / totalAllocPoint:
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0]
                                                    if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                    poolInfo[idx].field_512 = block.timestamp
                                                    require idx < poolInfo.length
                                                    mem[0] = 4
                                                    _20791 = mem[64]
                                                    mem[64] = mem[64] + 128
                                                    mem[_20791] = poolInfo[idx].field_0
                                                    mem[_20791 + 32] = poolInfo[idx].field_256
                                                    mem[_20791 + 64] = poolInfo[idx].field_512
                                                    mem[_20791 + 96] = poolInfo[idx].field_768
                                                else:
                                                    if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0]
                                                    if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                    poolInfo[idx].field_512 = block.timestamp
                                                    require idx < poolInfo.length
                                                    mem[0] = 4
                                                    _20998 = mem[64]
                                                    mem[64] = mem[64] + 128
                                                    mem[_20998] = poolInfo[idx].field_0
                                                    mem[_20998 + 32] = poolInfo[idx].field_256
                                                    mem[_20998 + 64] = poolInfo[idx].field_512
                                                    mem[_20998 + 96] = poolInfo[idx].field_768
                                            else:
                                                if (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond) / block.timestamp - poolInfo[idx].field_512 != rewardsPerSecond:
                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                if not (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond):
                                                    if totalAllocPoint <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalAllocPoint
                                                    if not 0 / totalAllocPoint:
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                        poolInfo[idx].field_512 = block.timestamp
                                                        require idx < poolInfo.length
                                                        mem[0] = 4
                                                        _20993 = mem[64]
                                                        mem[64] = mem[64] + 128
                                                        mem[_20993] = poolInfo[idx].field_0
                                                        mem[_20993 + 32] = poolInfo[idx].field_256
                                                        mem[_20993 + 64] = poolInfo[idx].field_512
                                                        mem[_20993 + 96] = poolInfo[idx].field_768
                                                    else:
                                                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                        poolInfo[idx].field_512 = block.timestamp
                                                        require idx < poolInfo.length
                                                        mem[0] = 4
                                                        _21205 = mem[64]
                                                        mem[64] = mem[64] + 128
                                                        mem[_21205] = poolInfo[idx].field_0
                                                        mem[_21205 + 32] = poolInfo[idx].field_256
                                                        mem[_21205 + 64] = poolInfo[idx].field_512
                                                        mem[_21205 + 96] = poolInfo[idx].field_768
                                                else:
                                                    if (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond) != poolInfo[idx].field_256:
                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                    if totalAllocPoint <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalAllocPoint
                                                    if not (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint:
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                        poolInfo[idx].field_512 = block.timestamp
                                                        require idx < poolInfo.length
                                                        mem[0] = 4
                                                        _21200 = mem[64]
                                                        mem[64] = mem[64] + 128
                                                        mem[_21200] = poolInfo[idx].field_0
                                                        mem[_21200 + 32] = poolInfo[idx].field_256
                                                        mem[_21200 + 64] = poolInfo[idx].field_512
                                                        mem[_21200 + 96] = poolInfo[idx].field_768
                                                    else:
                                                        if 10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if (10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_768 += 10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                                                        poolInfo[idx].field_512 = block.timestamp
                                                        require idx < poolInfo.length
                                                        mem[0] = 4
                                                        _21427 = mem[64]
                                                        mem[64] = mem[64] + 128
                                                        mem[_21427] = poolInfo[idx].field_0
                                                        mem[_21427 + 32] = poolInfo[idx].field_256
                                                        mem[_21427 + 64] = poolInfo[idx].field_512
                                                        mem[_21427 + 96] = poolInfo[idx].field_768
                                mem[0] = msg.sender
                                mem[32] = sha3(idx, 6)
                                if not userInfo[idx][msg.sender].field_0:
                                    if userInfo[idx][msg.sender].field_256 > 0:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if -userInfo[idx][msg.sender].field_256 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                else:
                                    if poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / userInfo[idx][msg.sender].field_0 != poolInfo[idx].field_768:
                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    if userInfo[idx][msg.sender].field_256 > poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if (poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12) - userInfo[idx][msg.sender].field_256 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                if not userInfo[idx][msg.sender].field_0:
                                    userInfo[idx][msg.sender].field_256 = 0
                                else:
                                    if poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / userInfo[idx][msg.sender].field_0 != poolInfo[idx].field_768:
                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    userInfo[idx][msg.sender].field_256 = poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12
                        else:
                            if poolInfo[idx].field_768 * userInfo[idx][address(msg.sender)].field_0 / userInfo[idx][address(msg.sender)].field_0 != poolInfo[idx].field_768:
                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                            if userInfo[idx][address(msg.sender)].field_256 > poolInfo[idx].field_768 * userInfo[idx][address(msg.sender)].field_0 / 10^12:
                                revert with 0, 'SafeMath: subtraction overflow'
                            if (poolInfo[idx].field_768 * userInfo[idx][address(msg.sender)].field_0 / 10^12) - userInfo[idx][address(msg.sender)].field_256 > 0:
                                require idx < poolInfo.length
                                if block.timestamp <= poolInfo[idx].field_512:
                                    require idx < poolInfo.length
                                    mem[0] = 4
                                    _17894 = mem[64]
                                    mem[64] = mem[64] + 128
                                    mem[_17894] = poolInfo[idx].field_0
                                    mem[_17894 + 32] = poolInfo[idx].field_256
                                    mem[_17894 + 64] = poolInfo[idx].field_512
                                    mem[_17894 + 96] = poolInfo[idx].field_768
                                else:
                                    mem[mem[64] + 4] = this.address
                                    require ext_code.size(poolInfo[idx].field_0)
                                    staticcall poolInfo[idx].field_0.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        poolInfo[idx].field_512 = block.timestamp
                                        require idx < poolInfo.length
                                        mem[0] = 4
                                        _18150 = mem[64]
                                        mem[64] = mem[64] + 128
                                        mem[_18150] = poolInfo[idx].field_0
                                        mem[_18150 + 32] = poolInfo[idx].field_256
                                        mem[_18150 + 64] = poolInfo[idx].field_512
                                        mem[_18150 + 96] = poolInfo[idx].field_768
                                    else:
                                        if not totalAllocPoint:
                                            poolInfo[idx].field_512 = block.timestamp
                                            require idx < poolInfo.length
                                            mem[0] = 4
                                            _18243 = mem[64]
                                            mem[64] = mem[64] + 128
                                            mem[_18243] = poolInfo[idx].field_0
                                            mem[_18243 + 32] = poolInfo[idx].field_256
                                            mem[_18243 + 64] = poolInfo[idx].field_512
                                            mem[_18243 + 96] = poolInfo[idx].field_768
                                        else:
                                            if poolInfo[idx].field_512 > block.timestamp:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not block.timestamp - poolInfo[idx].field_512:
                                                if totalAllocPoint <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalAllocPoint
                                                if not 0 / totalAllocPoint:
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0]
                                                    if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                    poolInfo[idx].field_512 = block.timestamp
                                                    require idx < poolInfo.length
                                                    mem[0] = 4
                                                    _20988 = mem[64]
                                                    mem[64] = mem[64] + 128
                                                    mem[_20988] = poolInfo[idx].field_0
                                                    mem[_20988 + 32] = poolInfo[idx].field_256
                                                    mem[_20988 + 64] = poolInfo[idx].field_512
                                                    mem[_20988 + 96] = poolInfo[idx].field_768
                                                else:
                                                    if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0]
                                                    if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                    poolInfo[idx].field_512 = block.timestamp
                                                    require idx < poolInfo.length
                                                    mem[0] = 4
                                                    _21195 = mem[64]
                                                    mem[64] = mem[64] + 128
                                                    mem[_21195] = poolInfo[idx].field_0
                                                    mem[_21195 + 32] = poolInfo[idx].field_256
                                                    mem[_21195 + 64] = poolInfo[idx].field_512
                                                    mem[_21195 + 96] = poolInfo[idx].field_768
                                            else:
                                                if (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond) / block.timestamp - poolInfo[idx].field_512 != rewardsPerSecond:
                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                if not (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond):
                                                    if totalAllocPoint <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalAllocPoint
                                                    if not 0 / totalAllocPoint:
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                        poolInfo[idx].field_512 = block.timestamp
                                                        require idx < poolInfo.length
                                                        mem[0] = 4
                                                        _21190 = mem[64]
                                                        mem[64] = mem[64] + 128
                                                        mem[_21190] = poolInfo[idx].field_0
                                                        mem[_21190 + 32] = poolInfo[idx].field_256
                                                        mem[_21190 + 64] = poolInfo[idx].field_512
                                                        mem[_21190 + 96] = poolInfo[idx].field_768
                                                    else:
                                                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                        poolInfo[idx].field_512 = block.timestamp
                                                        require idx < poolInfo.length
                                                        mem[0] = 4
                                                        _21422 = mem[64]
                                                        mem[64] = mem[64] + 128
                                                        mem[_21422] = poolInfo[idx].field_0
                                                        mem[_21422 + 32] = poolInfo[idx].field_256
                                                        mem[_21422 + 64] = poolInfo[idx].field_512
                                                        mem[_21422 + 96] = poolInfo[idx].field_768
                                                else:
                                                    if (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond) != poolInfo[idx].field_256:
                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                    if totalAllocPoint <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalAllocPoint
                                                    if not (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint:
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                        poolInfo[idx].field_512 = block.timestamp
                                                        require idx < poolInfo.length
                                                        mem[0] = 4
                                                        _21417 = mem[64]
                                                        mem[64] = mem[64] + 128
                                                        mem[_21417] = poolInfo[idx].field_0
                                                        mem[_21417 + 32] = poolInfo[idx].field_256
                                                        mem[_21417 + 64] = poolInfo[idx].field_512
                                                        mem[_21417 + 96] = poolInfo[idx].field_768
                                                    else:
                                                        if 10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if (10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_768 += 10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                                                        poolInfo[idx].field_512 = block.timestamp
                                                        require idx < poolInfo.length
                                                        mem[0] = 4
                                                        _21676 = mem[64]
                                                        mem[64] = mem[64] + 128
                                                        mem[_21676] = poolInfo[idx].field_0
                                                        mem[_21676 + 32] = poolInfo[idx].field_256
                                                        mem[_21676 + 64] = poolInfo[idx].field_512
                                                        mem[_21676 + 96] = poolInfo[idx].field_768
                                mem[0] = msg.sender
                                mem[32] = sha3(idx, 6)
                                if not userInfo[idx][msg.sender].field_0:
                                    if userInfo[idx][msg.sender].field_256 > 0:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if -userInfo[idx][msg.sender].field_256 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                else:
                                    if poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / userInfo[idx][msg.sender].field_0 != poolInfo[idx].field_768:
                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    if userInfo[idx][msg.sender].field_256 > poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if (poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12) - userInfo[idx][msg.sender].field_256 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                if not userInfo[idx][msg.sender].field_0:
                                    userInfo[idx][msg.sender].field_256 = 0
                                else:
                                    if poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / userInfo[idx][msg.sender].field_0 != poolInfo[idx].field_768:
                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    userInfo[idx][msg.sender].field_256 = poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12
                    else:
                        if not totalAllocPoint:
                            if not userInfo[idx][address(msg.sender)].field_0:
                                if userInfo[idx][address(msg.sender)].field_256 > 0:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if -userInfo[idx][address(msg.sender)].field_256 > 0:
                                    require idx < poolInfo.length
                                    if block.timestamp <= poolInfo[idx].field_512:
                                        require idx < poolInfo.length
                                        mem[0] = 4
                                        _17901 = mem[64]
                                        mem[64] = mem[64] + 128
                                        mem[_17901] = poolInfo[idx].field_0
                                        mem[_17901 + 32] = poolInfo[idx].field_256
                                        mem[_17901 + 64] = poolInfo[idx].field_512
                                        mem[_17901 + 96] = poolInfo[idx].field_768
                                    else:
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(poolInfo[idx].field_0)
                                        staticcall poolInfo[idx].field_0.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            poolInfo[idx].field_512 = block.timestamp
                                            require idx < poolInfo.length
                                            mem[0] = 4
                                            _18164 = mem[64]
                                            mem[64] = mem[64] + 128
                                            mem[_18164] = poolInfo[idx].field_0
                                            mem[_18164 + 32] = poolInfo[idx].field_256
                                            mem[_18164 + 64] = poolInfo[idx].field_512
                                            mem[_18164 + 96] = poolInfo[idx].field_768
                                        else:
                                            if not totalAllocPoint:
                                                poolInfo[idx].field_512 = block.timestamp
                                                require idx < poolInfo.length
                                                mem[0] = 4
                                                _18255 = mem[64]
                                                mem[64] = mem[64] + 128
                                                mem[_18255] = poolInfo[idx].field_0
                                                mem[_18255 + 32] = poolInfo[idx].field_256
                                                mem[_18255 + 64] = poolInfo[idx].field_512
                                                mem[_18255 + 96] = poolInfo[idx].field_768
                                            else:
                                                if poolInfo[idx].field_512 > block.timestamp:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if not block.timestamp - poolInfo[idx].field_512:
                                                    if totalAllocPoint <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalAllocPoint
                                                    if not 0 / totalAllocPoint:
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                        poolInfo[idx].field_512 = block.timestamp
                                                        require idx < poolInfo.length
                                                        mem[0] = 4
                                                        _21009 = mem[64]
                                                        mem[64] = mem[64] + 128
                                                        mem[_21009] = poolInfo[idx].field_0
                                                        mem[_21009 + 32] = poolInfo[idx].field_256
                                                        mem[_21009 + 64] = poolInfo[idx].field_512
                                                        mem[_21009 + 96] = poolInfo[idx].field_768
                                                    else:
                                                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                        poolInfo[idx].field_512 = block.timestamp
                                                        require idx < poolInfo.length
                                                        mem[0] = 4
                                                        _21222 = mem[64]
                                                        mem[64] = mem[64] + 128
                                                        mem[_21222] = poolInfo[idx].field_0
                                                        mem[_21222 + 32] = poolInfo[idx].field_256
                                                        mem[_21222 + 64] = poolInfo[idx].field_512
                                                        mem[_21222 + 96] = poolInfo[idx].field_768
                                                else:
                                                    if (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond) / block.timestamp - poolInfo[idx].field_512 != rewardsPerSecond:
                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                    if not (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond):
                                                        if totalAllocPoint <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require totalAllocPoint
                                                        if not 0 / totalAllocPoint:
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                            poolInfo[idx].field_512 = block.timestamp
                                                            require idx < poolInfo.length
                                                            mem[0] = 4
                                                            _21217 = mem[64]
                                                            mem[64] = mem[64] + 128
                                                            mem[_21217] = poolInfo[idx].field_0
                                                            mem[_21217 + 32] = poolInfo[idx].field_256
                                                            mem[_21217 + 64] = poolInfo[idx].field_512
                                                            mem[_21217 + 96] = poolInfo[idx].field_768
                                                        else:
                                                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                            poolInfo[idx].field_512 = block.timestamp
                                                            require idx < poolInfo.length
                                                            mem[0] = 4
                                                            _21447 = mem[64]
                                                            mem[64] = mem[64] + 128
                                                            mem[_21447] = poolInfo[idx].field_0
                                                            mem[_21447 + 32] = poolInfo[idx].field_256
                                                            mem[_21447 + 64] = poolInfo[idx].field_512
                                                            mem[_21447 + 96] = poolInfo[idx].field_768
                                                    else:
                                                        if (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond) != poolInfo[idx].field_256:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                        if totalAllocPoint <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require totalAllocPoint
                                                        if not (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint:
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                            poolInfo[idx].field_512 = block.timestamp
                                                            require idx < poolInfo.length
                                                            mem[0] = 4
                                                            _21442 = mem[64]
                                                            mem[64] = mem[64] + 128
                                                            mem[_21442] = poolInfo[idx].field_0
                                                            mem[_21442 + 32] = poolInfo[idx].field_256
                                                            mem[_21442 + 64] = poolInfo[idx].field_512
                                                            mem[_21442 + 96] = poolInfo[idx].field_768
                                                        else:
                                                            if 10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                                                            poolInfo[idx].field_512 = block.timestamp
                                                            require idx < poolInfo.length
                                                            mem[0] = 4
                                                            _21693 = mem[64]
                                                            mem[64] = mem[64] + 128
                                                            mem[_21693] = poolInfo[idx].field_0
                                                            mem[_21693 + 32] = poolInfo[idx].field_256
                                                            mem[_21693 + 64] = poolInfo[idx].field_512
                                                            mem[_21693 + 96] = poolInfo[idx].field_768
                                    mem[0] = msg.sender
                                    mem[32] = sha3(idx, 6)
                                    if not userInfo[idx][msg.sender].field_0:
                                        if userInfo[idx][msg.sender].field_256 > 0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if -userInfo[idx][msg.sender].field_256 < 0:
                                            revert with 0, 'SafeMath: addition overflow'
                                    else:
                                        if poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / userInfo[idx][msg.sender].field_0 != poolInfo[idx].field_768:
                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if userInfo[idx][msg.sender].field_256 > poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if (poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12) - userInfo[idx][msg.sender].field_256 < 0:
                                            revert with 0, 'SafeMath: addition overflow'
                                    if not userInfo[idx][msg.sender].field_0:
                                        userInfo[idx][msg.sender].field_256 = 0
                                    else:
                                        if poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / userInfo[idx][msg.sender].field_0 != poolInfo[idx].field_768:
                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        userInfo[idx][msg.sender].field_256 = poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12
                            else:
                                if poolInfo[idx].field_768 * userInfo[idx][address(msg.sender)].field_0 / userInfo[idx][address(msg.sender)].field_0 != poolInfo[idx].field_768:
                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                if userInfo[idx][address(msg.sender)].field_256 > poolInfo[idx].field_768 * userInfo[idx][address(msg.sender)].field_0 / 10^12:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if (poolInfo[idx].field_768 * userInfo[idx][address(msg.sender)].field_0 / 10^12) - userInfo[idx][address(msg.sender)].field_256 > 0:
                                    require idx < poolInfo.length
                                    if block.timestamp <= poolInfo[idx].field_512:
                                        require idx < poolInfo.length
                                        mem[0] = 4
                                        _17945 = mem[64]
                                        mem[64] = mem[64] + 128
                                        mem[_17945] = poolInfo[idx].field_0
                                        mem[_17945 + 32] = poolInfo[idx].field_256
                                        mem[_17945 + 64] = poolInfo[idx].field_512
                                        mem[_17945 + 96] = poolInfo[idx].field_768
                                    else:
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(poolInfo[idx].field_0)
                                        staticcall poolInfo[idx].field_0.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            poolInfo[idx].field_512 = block.timestamp
                                            require idx < poolInfo.length
                                            mem[0] = 4
                                            _18248 = mem[64]
                                            mem[64] = mem[64] + 128
                                            mem[_18248] = poolInfo[idx].field_0
                                            mem[_18248 + 32] = poolInfo[idx].field_256
                                            mem[_18248 + 64] = poolInfo[idx].field_512
                                            mem[_18248 + 96] = poolInfo[idx].field_768
                                        else:
                                            if not totalAllocPoint:
                                                poolInfo[idx].field_512 = block.timestamp
                                                require idx < poolInfo.length
                                                mem[0] = 4
                                                _18326 = mem[64]
                                                mem[64] = mem[64] + 128
                                                mem[_18326] = poolInfo[idx].field_0
                                                mem[_18326 + 32] = poolInfo[idx].field_256
                                                mem[_18326 + 64] = poolInfo[idx].field_512
                                                mem[_18326 + 96] = poolInfo[idx].field_768
                                            else:
                                                if poolInfo[idx].field_512 > block.timestamp:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if not block.timestamp - poolInfo[idx].field_512:
                                                    if totalAllocPoint <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalAllocPoint
                                                    if not 0 / totalAllocPoint:
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                        poolInfo[idx].field_512 = block.timestamp
                                                        require idx < poolInfo.length
                                                        mem[0] = 4
                                                        _21212 = mem[64]
                                                        mem[64] = mem[64] + 128
                                                        mem[_21212] = poolInfo[idx].field_0
                                                        mem[_21212 + 32] = poolInfo[idx].field_256
                                                        mem[_21212 + 64] = poolInfo[idx].field_512
                                                        mem[_21212 + 96] = poolInfo[idx].field_768
                                                    else:
                                                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                        poolInfo[idx].field_512 = block.timestamp
                                                        require idx < poolInfo.length
                                                        mem[0] = 4
                                                        _21437 = mem[64]
                                                        mem[64] = mem[64] + 128
                                                        mem[_21437] = poolInfo[idx].field_0
                                                        mem[_21437 + 32] = poolInfo[idx].field_256
                                                        mem[_21437 + 64] = poolInfo[idx].field_512
                                                        mem[_21437 + 96] = poolInfo[idx].field_768
                                                else:
                                                    if (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond) / block.timestamp - poolInfo[idx].field_512 != rewardsPerSecond:
                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                    if not (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond):
                                                        if totalAllocPoint <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require totalAllocPoint
                                                        if not 0 / totalAllocPoint:
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                            poolInfo[idx].field_512 = block.timestamp
                                                            require idx < poolInfo.length
                                                            mem[0] = 4
                                                            _21432 = mem[64]
                                                            mem[64] = mem[64] + 128
                                                            mem[_21432] = poolInfo[idx].field_0
                                                            mem[_21432 + 32] = poolInfo[idx].field_256
                                                            mem[_21432 + 64] = poolInfo[idx].field_512
                                                            mem[_21432 + 96] = poolInfo[idx].field_768
                                                        else:
                                                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                            poolInfo[idx].field_512 = block.timestamp
                                                            require idx < poolInfo.length
                                                            mem[0] = 4
                                                            _21688 = mem[64]
                                                            mem[64] = mem[64] + 128
                                                            mem[_21688] = poolInfo[idx].field_0
                                                            mem[_21688 + 32] = poolInfo[idx].field_256
                                                            mem[_21688 + 64] = poolInfo[idx].field_512
                                                            mem[_21688 + 96] = poolInfo[idx].field_768
                                                    else:
                                                        if (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond) != poolInfo[idx].field_256:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                        if totalAllocPoint <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require totalAllocPoint
                                                        if not (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint:
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                            poolInfo[idx].field_512 = block.timestamp
                                                            require idx < poolInfo.length
                                                            mem[0] = 4
                                                            _21683 = mem[64]
                                                            mem[64] = mem[64] + 128
                                                            mem[_21683] = poolInfo[idx].field_0
                                                            mem[_21683 + 32] = poolInfo[idx].field_256
                                                            mem[_21683 + 64] = poolInfo[idx].field_512
                                                            mem[_21683 + 96] = poolInfo[idx].field_768
                                                        else:
                                                            if 10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                                                            poolInfo[idx].field_512 = block.timestamp
                                                            require idx < poolInfo.length
                                                            mem[0] = 4
                                                            _21947 = mem[64]
                                                            mem[64] = mem[64] + 128
                                                            mem[_21947] = poolInfo[idx].field_0
                                                            mem[_21947 + 32] = poolInfo[idx].field_256
                                                            mem[_21947 + 64] = poolInfo[idx].field_512
                                                            mem[_21947 + 96] = poolInfo[idx].field_768
                                    mem[0] = msg.sender
                                    mem[32] = sha3(idx, 6)
                                    if not userInfo[idx][msg.sender].field_0:
                                        if userInfo[idx][msg.sender].field_256 > 0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if -userInfo[idx][msg.sender].field_256 < 0:
                                            revert with 0, 'SafeMath: addition overflow'
                                    else:
                                        if poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / userInfo[idx][msg.sender].field_0 != poolInfo[idx].field_768:
                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if userInfo[idx][msg.sender].field_256 > poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if (poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12) - userInfo[idx][msg.sender].field_256 < 0:
                                            revert with 0, 'SafeMath: addition overflow'
                                    if not userInfo[idx][msg.sender].field_0:
                                        userInfo[idx][msg.sender].field_256 = 0
                                    else:
                                        if poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / userInfo[idx][msg.sender].field_0 != poolInfo[idx].field_768:
                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        userInfo[idx][msg.sender].field_256 = poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12
                        else:
                            if poolInfo[idx].field_512 > block.timestamp:
                                revert with 0, 'SafeMath: subtraction overflow'
                            if not block.timestamp - poolInfo[idx].field_512:
                                if totalAllocPoint <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require totalAllocPoint
                                if not 0 / totalAllocPoint:
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                        revert with 0, 'SafeMath: addition overflow'
                                    if not userInfo[idx][address(msg.sender)].field_0:
                                        if userInfo[idx][address(msg.sender)].field_256 > 0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if -userInfo[idx][address(msg.sender)].field_256 > 0:
                                            require idx < poolInfo.length
                                            if block.timestamp <= poolInfo[idx].field_512:
                                                require idx < poolInfo.length
                                                mem[0] = 4
                                                _20355 = mem[64]
                                                mem[64] = mem[64] + 128
                                                mem[_20355] = poolInfo[idx].field_0
                                                mem[_20355 + 32] = poolInfo[idx].field_256
                                                mem[_20355 + 64] = poolInfo[idx].field_512
                                                mem[_20355 + 96] = poolInfo[idx].field_768
                                            else:
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(poolInfo[idx].field_0)
                                                staticcall poolInfo[idx].field_0.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if not ext_call.return_data[0]:
                                                    poolInfo[idx].field_512 = block.timestamp
                                                    require idx < poolInfo.length
                                                    mem[0] = 4
                                                    _21233 = mem[64]
                                                    mem[64] = mem[64] + 128
                                                    mem[_21233] = poolInfo[idx].field_0
                                                    mem[_21233 + 32] = poolInfo[idx].field_256
                                                    mem[_21233 + 64] = poolInfo[idx].field_512
                                                    mem[_21233 + 96] = poolInfo[idx].field_768
                                                else:
                                                    if not totalAllocPoint:
                                                        poolInfo[idx].field_512 = block.timestamp
                                                        require idx < poolInfo.length
                                                        mem[0] = 4
                                                        _21481 = mem[64]
                                                        mem[64] = mem[64] + 128
                                                        mem[_21481] = poolInfo[idx].field_0
                                                        mem[_21481 + 32] = poolInfo[idx].field_256
                                                        mem[_21481 + 64] = poolInfo[idx].field_512
                                                        mem[_21481 + 96] = poolInfo[idx].field_768
                                                    else:
                                                        if poolInfo[idx].field_512 > block.timestamp:
                                                            revert with 0, 'SafeMath: subtraction overflow'
                                                        if not block.timestamp - poolInfo[idx].field_512:
                                                            if totalAllocPoint <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require totalAllocPoint
                                                            if not 0 / totalAllocPoint:
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                                poolInfo[idx].field_512 = block.timestamp
                                                                require idx < poolInfo.length
                                                                mem[0] = 4
                                                                _28232 = mem[64]
                                                                mem[64] = mem[64] + 128
                                                                mem[_28232] = poolInfo[idx].field_0
                                                                mem[_28232 + 32] = poolInfo[idx].field_256
                                                                mem[_28232 + 64] = poolInfo[idx].field_512
                                                                mem[_28232 + 96] = poolInfo[idx].field_768
                                                            else:
                                                                if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                                poolInfo[idx].field_512 = block.timestamp
                                                                require idx < poolInfo.length
                                                                mem[0] = 4
                                                                _28450 = mem[64]
                                                                mem[64] = mem[64] + 128
                                                                mem[_28450] = poolInfo[idx].field_0
                                                                mem[_28450 + 32] = poolInfo[idx].field_256
                                                                mem[_28450 + 64] = poolInfo[idx].field_512
                                                                mem[_28450 + 96] = poolInfo[idx].field_768
                                                        else:
                                                            if (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond) / block.timestamp - poolInfo[idx].field_512 != rewardsPerSecond:
                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                            if not (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond):
                                                                if totalAllocPoint <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require totalAllocPoint
                                                                if not 0 / totalAllocPoint:
                                                                    if ext_call.return_data[0] <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    require ext_call.return_data[0]
                                                                    if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                                    poolInfo[idx].field_512 = block.timestamp
                                                                    require idx < poolInfo.length
                                                                    mem[0] = 4
                                                                    _28445 = mem[64]
                                                                    mem[64] = mem[64] + 128
                                                                    mem[_28445] = poolInfo[idx].field_0
                                                                    mem[_28445 + 32] = poolInfo[idx].field_256
                                                                    mem[_28445 + 64] = poolInfo[idx].field_512
                                                                    mem[_28445 + 96] = poolInfo[idx].field_768
                                                                else:
                                                                    if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                    if ext_call.return_data[0] <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    require ext_call.return_data[0]
                                                                    if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                                    poolInfo[idx].field_512 = block.timestamp
                                                                    require idx < poolInfo.length
                                                                    mem[0] = 4
                                                                    _28733 = mem[64]
                                                                    mem[64] = mem[64] + 128
                                                                    mem[_28733] = poolInfo[idx].field_0
                                                                    mem[_28733 + 32] = poolInfo[idx].field_256
                                                                    mem[_28733 + 64] = poolInfo[idx].field_512
                                                                    mem[_28733 + 96] = poolInfo[idx].field_768
                                                            else:
                                                                if (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond) != poolInfo[idx].field_256:
                                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                if totalAllocPoint <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require totalAllocPoint
                                                                if not (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint:
                                                                    if ext_call.return_data[0] <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    require ext_call.return_data[0]
                                                                    if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                                    poolInfo[idx].field_512 = block.timestamp
                                                                    require idx < poolInfo.length
                                                                    mem[0] = 4
                                                                    _28728 = mem[64]
                                                                    mem[64] = mem[64] + 128
                                                                    mem[_28728] = poolInfo[idx].field_0
                                                                    mem[_28728 + 32] = poolInfo[idx].field_256
                                                                    mem[_28728 + 64] = poolInfo[idx].field_512
                                                                    mem[_28728 + 96] = poolInfo[idx].field_768
                                                                else:
                                                                    if 10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                    if ext_call.return_data[0] <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    require ext_call.return_data[0]
                                                                    if (10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    poolInfo[idx].field_768 += 10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                                                                    poolInfo[idx].field_512 = block.timestamp
                                                                    require idx < poolInfo.length
                                                                    mem[0] = 4
                                                                    _29079 = mem[64]
                                                                    mem[64] = mem[64] + 128
                                                                    mem[_29079] = poolInfo[idx].field_0
                                                                    mem[_29079 + 32] = poolInfo[idx].field_256
                                                                    mem[_29079 + 64] = poolInfo[idx].field_512
                                                                    mem[_29079 + 96] = poolInfo[idx].field_768
                                            mem[0] = msg.sender
                                            mem[32] = sha3(idx, 6)
                                            if not userInfo[idx][msg.sender].field_0:
                                                if userInfo[idx][msg.sender].field_256 > 0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if -userInfo[idx][msg.sender].field_256 < 0:
                                                    revert with 0, 'SafeMath: addition overflow'
                                            else:
                                                if poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / userInfo[idx][msg.sender].field_0 != poolInfo[idx].field_768:
                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                if userInfo[idx][msg.sender].field_256 > poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if (poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12) - userInfo[idx][msg.sender].field_256 < 0:
                                                    revert with 0, 'SafeMath: addition overflow'
                                            if not userInfo[idx][msg.sender].field_0:
                                                userInfo[idx][msg.sender].field_256 = 0
                                            else:
                                                if poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / userInfo[idx][msg.sender].field_0 != poolInfo[idx].field_768:
                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                userInfo[idx][msg.sender].field_256 = poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12
                                    else:
                                        if (0 / ext_call.return_data[0] * userInfo[idx][address(msg.sender)].field_0) + (poolInfo[idx].field_768 * userInfo[idx][address(msg.sender)].field_0) / userInfo[idx][address(msg.sender)].field_0 != (0 / ext_call.return_data[0]) + poolInfo[idx].field_768:
                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if userInfo[idx][address(msg.sender)].field_256 > (0 / ext_call.return_data[0] * userInfo[idx][address(msg.sender)].field_0) + (poolInfo[idx].field_768 * userInfo[idx][address(msg.sender)].field_0) / 10^12:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if ((0 / ext_call.return_data[0] * userInfo[idx][address(msg.sender)].field_0) + (poolInfo[idx].field_768 * userInfo[idx][address(msg.sender)].field_0) / 10^12) - userInfo[idx][address(msg.sender)].field_256 > 0:
                                            require idx < poolInfo.length
                                            if block.timestamp <= poolInfo[idx].field_512:
                                                require idx < poolInfo.length
                                                mem[0] = 4
                                                _20486 = mem[64]
                                                mem[64] = mem[64] + 128
                                                mem[_20486] = poolInfo[idx].field_0
                                                mem[_20486 + 32] = poolInfo[idx].field_256
                                                mem[_20486 + 64] = poolInfo[idx].field_512
                                                mem[_20486 + 96] = poolInfo[idx].field_768
                                            else:
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(poolInfo[idx].field_0)
                                                staticcall poolInfo[idx].field_0.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if not ext_call.return_data[0]:
                                                    poolInfo[idx].field_512 = block.timestamp
                                                    require idx < poolInfo.length
                                                    mem[0] = 4
                                                    _21474 = mem[64]
                                                    mem[64] = mem[64] + 128
                                                    mem[_21474] = poolInfo[idx].field_0
                                                    mem[_21474 + 32] = poolInfo[idx].field_256
                                                    mem[_21474 + 64] = poolInfo[idx].field_512
                                                    mem[_21474 + 96] = poolInfo[idx].field_768
                                                else:
                                                    if not totalAllocPoint:
                                                        poolInfo[idx].field_512 = block.timestamp
                                                        require idx < poolInfo.length
                                                        mem[0] = 4
                                                        _21742 = mem[64]
                                                        mem[64] = mem[64] + 128
                                                        mem[_21742] = poolInfo[idx].field_0
                                                        mem[_21742 + 32] = poolInfo[idx].field_256
                                                        mem[_21742 + 64] = poolInfo[idx].field_512
                                                        mem[_21742 + 96] = poolInfo[idx].field_768
                                                    else:
                                                        if poolInfo[idx].field_512 > block.timestamp:
                                                            revert with 0, 'SafeMath: subtraction overflow'
                                                        if not block.timestamp - poolInfo[idx].field_512:
                                                            if totalAllocPoint <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require totalAllocPoint
                                                            if not 0 / totalAllocPoint:
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                                poolInfo[idx].field_512 = block.timestamp
                                                                require idx < poolInfo.length
                                                                mem[0] = 4
                                                                _28440 = mem[64]
                                                                mem[64] = mem[64] + 128
                                                                mem[_28440] = poolInfo[idx].field_0
                                                                mem[_28440 + 32] = poolInfo[idx].field_256
                                                                mem[_28440 + 64] = poolInfo[idx].field_512
                                                                mem[_28440 + 96] = poolInfo[idx].field_768
                                                            else:
                                                                if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                                poolInfo[idx].field_512 = block.timestamp
                                                                require idx < poolInfo.length
                                                                mem[0] = 4
                                                                _28723 = mem[64]
                                                                mem[64] = mem[64] + 128
                                                                mem[_28723] = poolInfo[idx].field_0
                                                                mem[_28723 + 32] = poolInfo[idx].field_256
                                                                mem[_28723 + 64] = poolInfo[idx].field_512
                                                                mem[_28723 + 96] = poolInfo[idx].field_768
                                                        else:
                                                            if (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond) / block.timestamp - poolInfo[idx].field_512 != rewardsPerSecond:
                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                            if not (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond):
                                                                if totalAllocPoint <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require totalAllocPoint
                                                                if not 0 / totalAllocPoint:
                                                                    if ext_call.return_data[0] <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    require ext_call.return_data[0]
                                                                    if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                                    poolInfo[idx].field_512 = block.timestamp
                                                                    require idx < poolInfo.length
                                                                    mem[0] = 4
                                                                    _28718 = mem[64]
                                                                    mem[64] = mem[64] + 128
                                                                    mem[_28718] = poolInfo[idx].field_0
                                                                    mem[_28718 + 32] = poolInfo[idx].field_256
                                                                    mem[_28718 + 64] = poolInfo[idx].field_512
                                                                    mem[_28718 + 96] = poolInfo[idx].field_768
                                                                else:
                                                                    if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                    if ext_call.return_data[0] <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    require ext_call.return_data[0]
                                                                    if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                                    poolInfo[idx].field_512 = block.timestamp
                                                                    require idx < poolInfo.length
                                                                    mem[0] = 4
                                                                    _29074 = mem[64]
                                                                    mem[64] = mem[64] + 128
                                                                    mem[_29074] = poolInfo[idx].field_0
                                                                    mem[_29074 + 32] = poolInfo[idx].field_256
                                                                    mem[_29074 + 64] = poolInfo[idx].field_512
                                                                    mem[_29074 + 96] = poolInfo[idx].field_768
                                                            else:
                                                                if (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond) != poolInfo[idx].field_256:
                                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                if totalAllocPoint <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require totalAllocPoint
                                                                if not (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint:
                                                                    if ext_call.return_data[0] <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    require ext_call.return_data[0]
                                                                    if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                                    poolInfo[idx].field_512 = block.timestamp
                                                                    require idx < poolInfo.length
                                                                    mem[0] = 4
                                                                    _29069 = mem[64]
                                                                    mem[64] = mem[64] + 128
                                                                    mem[_29069] = poolInfo[idx].field_0
                                                                    mem[_29069 + 32] = poolInfo[idx].field_256
                                                                    mem[_29069 + 64] = poolInfo[idx].field_512
                                                                    mem[_29069 + 96] = poolInfo[idx].field_768
                                                                else:
                                                                    if 10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                    if ext_call.return_data[0] <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    require ext_call.return_data[0]
                                                                    if (10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    poolInfo[idx].field_768 += 10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                                                                    poolInfo[idx].field_512 = block.timestamp
                                                                    require idx < poolInfo.length
                                                                    mem[0] = 4
                                                                    _29439 = mem[64]
                                                                    mem[64] = mem[64] + 128
                                                                    mem[_29439] = poolInfo[idx].field_0
                                                                    mem[_29439 + 32] = poolInfo[idx].field_256
                                                                    mem[_29439 + 64] = poolInfo[idx].field_512
                                                                    mem[_29439 + 96] = poolInfo[idx].field_768
                                            mem[0] = msg.sender
                                            mem[32] = sha3(idx, 6)
                                            if not userInfo[idx][msg.sender].field_0:
                                                if userInfo[idx][msg.sender].field_256 > 0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if -userInfo[idx][msg.sender].field_256 < 0:
                                                    revert with 0, 'SafeMath: addition overflow'
                                            else:
                                                if poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / userInfo[idx][msg.sender].field_0 != poolInfo[idx].field_768:
                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                if userInfo[idx][msg.sender].field_256 > poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if (poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12) - userInfo[idx][msg.sender].field_256 < 0:
                                                    revert with 0, 'SafeMath: addition overflow'
                                            if not userInfo[idx][msg.sender].field_0:
                                                userInfo[idx][msg.sender].field_256 = 0
                                            else:
                                                if poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / userInfo[idx][msg.sender].field_0 != poolInfo[idx].field_768:
                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                userInfo[idx][msg.sender].field_256 = poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12
                                else:
                                    if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                        revert with 0, 'SafeMath: addition overflow'
                                    if not userInfo[idx][address(msg.sender)].field_0:
                                        if userInfo[idx][address(msg.sender)].field_256 > 0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if -userInfo[idx][address(msg.sender)].field_256 > 0:
                                            require idx < poolInfo.length
                                            if block.timestamp <= poolInfo[idx].field_512:
                                                require idx < poolInfo.length
                                                mem[0] = 4
                                                _20480 = mem[64]
                                                mem[64] = mem[64] + 128
                                                mem[_20480] = poolInfo[idx].field_0
                                                mem[_20480 + 32] = poolInfo[idx].field_256
                                                mem[_20480 + 64] = poolInfo[idx].field_512
                                                mem[_20480 + 96] = poolInfo[idx].field_768
                                            else:
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(poolInfo[idx].field_0)
                                                staticcall poolInfo[idx].field_0.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if not ext_call.return_data[0]:
                                                    poolInfo[idx].field_512 = block.timestamp
                                                    require idx < poolInfo.length
                                                    mem[0] = 4
                                                    _21467 = mem[64]
                                                    mem[64] = mem[64] + 128
                                                    mem[_21467] = poolInfo[idx].field_0
                                                    mem[_21467 + 32] = poolInfo[idx].field_256
                                                    mem[_21467 + 64] = poolInfo[idx].field_512
                                                    mem[_21467 + 96] = poolInfo[idx].field_768
                                                else:
                                                    if not totalAllocPoint:
                                                        poolInfo[idx].field_512 = block.timestamp
                                                        require idx < poolInfo.length
                                                        mem[0] = 4
                                                        _21737 = mem[64]
                                                        mem[64] = mem[64] + 128
                                                        mem[_21737] = poolInfo[idx].field_0
                                                        mem[_21737 + 32] = poolInfo[idx].field_256
                                                        mem[_21737 + 64] = poolInfo[idx].field_512
                                                        mem[_21737 + 96] = poolInfo[idx].field_768
                                                    else:
                                                        if poolInfo[idx].field_512 > block.timestamp:
                                                            revert with 0, 'SafeMath: subtraction overflow'
                                                        if not block.timestamp - poolInfo[idx].field_512:
                                                            if totalAllocPoint <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require totalAllocPoint
                                                            if not 0 / totalAllocPoint:
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                                poolInfo[idx].field_512 = block.timestamp
                                                                require idx < poolInfo.length
                                                                mem[0] = 4
                                                                _28433 = mem[64]
                                                                mem[64] = mem[64] + 128
                                                                mem[_28433] = poolInfo[idx].field_0
                                                                mem[_28433 + 32] = poolInfo[idx].field_256
                                                                mem[_28433 + 64] = poolInfo[idx].field_512
                                                                mem[_28433 + 96] = poolInfo[idx].field_768
                                                            else:
                                                                if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                                poolInfo[idx].field_512 = block.timestamp
                                                                require idx < poolInfo.length
                                                                mem[0] = 4
                                                                _28713 = mem[64]
                                                                mem[64] = mem[64] + 128
                                                                mem[_28713] = poolInfo[idx].field_0
                                                                mem[_28713 + 32] = poolInfo[idx].field_256
                                                                mem[_28713 + 64] = poolInfo[idx].field_512
                                                                mem[_28713 + 96] = poolInfo[idx].field_768
                                                        else:
                                                            if (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond) / block.timestamp - poolInfo[idx].field_512 != rewardsPerSecond:
                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                            if not (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond):
                                                                if totalAllocPoint <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require totalAllocPoint
                                                                if not 0 / totalAllocPoint:
                                                                    if ext_call.return_data[0] <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    require ext_call.return_data[0]
                                                                    if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                                    poolInfo[idx].field_512 = block.timestamp
                                                                    require idx < poolInfo.length
                                                                    mem[0] = 4
                                                                    _28708 = mem[64]
                                                                    mem[64] = mem[64] + 128
                                                                    mem[_28708] = poolInfo[idx].field_0
                                                                    mem[_28708 + 32] = poolInfo[idx].field_256
                                                                    mem[_28708 + 64] = poolInfo[idx].field_512
                                                                    mem[_28708 + 96] = poolInfo[idx].field_768
                                                                else:
                                                                    if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                    if ext_call.return_data[0] <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    require ext_call.return_data[0]
                                                                    if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                                    poolInfo[idx].field_512 = block.timestamp
                                                                    require idx < poolInfo.length
                                                                    mem[0] = 4
                                                                    _29064 = mem[64]
                                                                    mem[64] = mem[64] + 128
                                                                    mem[_29064] = poolInfo[idx].field_0
                                                                    mem[_29064 + 32] = poolInfo[idx].field_256
                                                                    mem[_29064 + 64] = poolInfo[idx].field_512
                                                                    mem[_29064 + 96] = poolInfo[idx].field_768
                                                            else:
                                                                if (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond) != poolInfo[idx].field_256:
                                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                if totalAllocPoint <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require totalAllocPoint
                                                                if not (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint:
                                                                    if ext_call.return_data[0] <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    require ext_call.return_data[0]
                                                                    if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                                    poolInfo[idx].field_512 = block.timestamp
                                                                    require idx < poolInfo.length
                                                                    mem[0] = 4
                                                                    _29059 = mem[64]
                                                                    mem[64] = mem[64] + 128
                                                                    mem[_29059] = poolInfo[idx].field_0
                                                                    mem[_29059 + 32] = poolInfo[idx].field_256
                                                                    mem[_29059 + 64] = poolInfo[idx].field_512
                                                                    mem[_29059 + 96] = poolInfo[idx].field_768
                                                                else:
                                                                    if 10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                    if ext_call.return_data[0] <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    require ext_call.return_data[0]
                                                                    if (10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    poolInfo[idx].field_768 += 10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                                                                    poolInfo[idx].field_512 = block.timestamp
                                                                    require idx < poolInfo.length
                                                                    mem[0] = 4
                                                                    _29434 = mem[64]
                                                                    mem[64] = mem[64] + 128
                                                                    mem[_29434] = poolInfo[idx].field_0
                                                                    mem[_29434 + 32] = poolInfo[idx].field_256
                                                                    mem[_29434 + 64] = poolInfo[idx].field_512
                                                                    mem[_29434 + 96] = poolInfo[idx].field_768
                                            mem[0] = msg.sender
                                            mem[32] = sha3(idx, 6)
                                            if not userInfo[idx][msg.sender].field_0:
                                                if userInfo[idx][msg.sender].field_256 > 0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if -userInfo[idx][msg.sender].field_256 < 0:
                                                    revert with 0, 'SafeMath: addition overflow'
                                            else:
                                                if poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / userInfo[idx][msg.sender].field_0 != poolInfo[idx].field_768:
                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                if userInfo[idx][msg.sender].field_256 > poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if (poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12) - userInfo[idx][msg.sender].field_256 < 0:
                                                    revert with 0, 'SafeMath: addition overflow'
                                            if not userInfo[idx][msg.sender].field_0:
                                                userInfo[idx][msg.sender].field_256 = 0
                                            else:
                                                if poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / userInfo[idx][msg.sender].field_0 != poolInfo[idx].field_768:
                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                userInfo[idx][msg.sender].field_256 = poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12
                                    else:
                                        if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[idx][address(msg.sender)].field_0) + (poolInfo[idx].field_768 * userInfo[idx][address(msg.sender)].field_0) / userInfo[idx][address(msg.sender)].field_0 != (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768:
                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if userInfo[idx][address(msg.sender)].field_256 > (10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[idx][address(msg.sender)].field_0) + (poolInfo[idx].field_768 * userInfo[idx][address(msg.sender)].field_0) / 10^12:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if ((10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[idx][address(msg.sender)].field_0) + (poolInfo[idx].field_768 * userInfo[idx][address(msg.sender)].field_0) / 10^12) - userInfo[idx][address(msg.sender)].field_256 > 0:
                                            require idx < poolInfo.length
                                            if block.timestamp <= poolInfo[idx].field_512:
                                                require idx < poolInfo.length
                                                mem[0] = 4
                                                _20638 = mem[64]
                                                mem[64] = mem[64] + 128
                                                mem[_20638] = poolInfo[idx].field_0
                                                mem[_20638 + 32] = poolInfo[idx].field_256
                                                mem[_20638 + 64] = poolInfo[idx].field_512
                                                mem[_20638 + 96] = poolInfo[idx].field_768
                                            else:
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(poolInfo[idx].field_0)
                                                staticcall poolInfo[idx].field_0.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if not ext_call.return_data[0]:
                                                    poolInfo[idx].field_512 = block.timestamp
                                                    require idx < poolInfo.length
                                                    mem[0] = 4
                                                    _21730 = mem[64]
                                                    mem[64] = mem[64] + 128
                                                    mem[_21730] = poolInfo[idx].field_0
                                                    mem[_21730 + 32] = poolInfo[idx].field_256
                                                    mem[_21730 + 64] = poolInfo[idx].field_512
                                                    mem[_21730 + 96] = poolInfo[idx].field_768
                                                else:
                                                    if not totalAllocPoint:
                                                        poolInfo[idx].field_512 = block.timestamp
                                                        require idx < poolInfo.length
                                                        mem[0] = 4
                                                        _21992 = mem[64]
                                                        mem[64] = mem[64] + 128
                                                        mem[_21992] = poolInfo[idx].field_0
                                                        mem[_21992 + 32] = poolInfo[idx].field_256
                                                        mem[_21992 + 64] = poolInfo[idx].field_512
                                                        mem[_21992 + 96] = poolInfo[idx].field_768
                                                    else:
                                                        if poolInfo[idx].field_512 > block.timestamp:
                                                            revert with 0, 'SafeMath: subtraction overflow'
                                                        if not block.timestamp - poolInfo[idx].field_512:
                                                            if totalAllocPoint <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require totalAllocPoint
                                                            if not 0 / totalAllocPoint:
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                                poolInfo[idx].field_512 = block.timestamp
                                                                require idx < poolInfo.length
                                                                mem[0] = 4
                                                                _28703 = mem[64]
                                                                mem[64] = mem[64] + 128
                                                                mem[_28703] = poolInfo[idx].field_0
                                                                mem[_28703 + 32] = poolInfo[idx].field_256
                                                                mem[_28703 + 64] = poolInfo[idx].field_512
                                                                mem[_28703 + 96] = poolInfo[idx].field_768
                                                            else:
                                                                if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                                poolInfo[idx].field_512 = block.timestamp
                                                                require idx < poolInfo.length
                                                                mem[0] = 4
                                                                _29054 = mem[64]
                                                                mem[64] = mem[64] + 128
                                                                mem[_29054] = poolInfo[idx].field_0
                                                                mem[_29054 + 32] = poolInfo[idx].field_256
                                                                mem[_29054 + 64] = poolInfo[idx].field_512
                                                                mem[_29054 + 96] = poolInfo[idx].field_768
                                                        else:
                                                            if (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond) / block.timestamp - poolInfo[idx].field_512 != rewardsPerSecond:
                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                            if not (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond):
                                                                if totalAllocPoint <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require totalAllocPoint
                                                                if not 0 / totalAllocPoint:
                                                                    if ext_call.return_data[0] <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    require ext_call.return_data[0]
                                                                    if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                                    poolInfo[idx].field_512 = block.timestamp
                                                                    require idx < poolInfo.length
                                                                    mem[0] = 4
                                                                    _29049 = mem[64]
                                                                    mem[64] = mem[64] + 128
                                                                    mem[_29049] = poolInfo[idx].field_0
                                                                    mem[_29049 + 32] = poolInfo[idx].field_256
                                                                    mem[_29049 + 64] = poolInfo[idx].field_512
                                                                    mem[_29049 + 96] = poolInfo[idx].field_768
                                                                else:
                                                                    if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                    if ext_call.return_data[0] <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    require ext_call.return_data[0]
                                                                    if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                                    poolInfo[idx].field_512 = block.timestamp
                                                                    require idx < poolInfo.length
                                                                    mem[0] = 4
                                                                    _29429 = mem[64]
                                                                    mem[64] = mem[64] + 128
                                                                    mem[_29429] = poolInfo[idx].field_0
                                                                    mem[_29429 + 32] = poolInfo[idx].field_256
                                                                    mem[_29429 + 64] = poolInfo[idx].field_512
                                                                    mem[_29429 + 96] = poolInfo[idx].field_768
                                                            else:
                                                                if (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond) != poolInfo[idx].field_256:
                                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                if totalAllocPoint <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require totalAllocPoint
                                                                if not (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint:
                                                                    if ext_call.return_data[0] <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    require ext_call.return_data[0]
                                                                    if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                                    poolInfo[idx].field_512 = block.timestamp
                                                                    require idx < poolInfo.length
                                                                    mem[0] = 4
                                                                    _29424 = mem[64]
                                                                    mem[64] = mem[64] + 128
                                                                    mem[_29424] = poolInfo[idx].field_0
                                                                    mem[_29424 + 32] = poolInfo[idx].field_256
                                                                    mem[_29424 + 64] = poolInfo[idx].field_512
                                                                    mem[_29424 + 96] = poolInfo[idx].field_768
                                                                else:
                                                                    if 10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                    if ext_call.return_data[0] <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    require ext_call.return_data[0]
                                                                    if (10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    poolInfo[idx].field_768 += 10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                                                                    poolInfo[idx].field_512 = block.timestamp
                                                                    require idx < poolInfo.length
                                                                    mem[0] = 4
                                                                    _29741 = mem[64]
                                                                    mem[64] = mem[64] + 128
                                                                    mem[_29741] = poolInfo[idx].field_0
                                                                    mem[_29741 + 32] = poolInfo[idx].field_256
                                                                    mem[_29741 + 64] = poolInfo[idx].field_512
                                                                    mem[_29741 + 96] = poolInfo[idx].field_768
                                            mem[0] = msg.sender
                                            mem[32] = sha3(idx, 6)
                                            if not userInfo[idx][msg.sender].field_0:
                                                if userInfo[idx][msg.sender].field_256 > 0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if -userInfo[idx][msg.sender].field_256 < 0:
                                                    revert with 0, 'SafeMath: addition overflow'
                                            else:
                                                if poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / userInfo[idx][msg.sender].field_0 != poolInfo[idx].field_768:
                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                if userInfo[idx][msg.sender].field_256 > poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if (poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12) - userInfo[idx][msg.sender].field_256 < 0:
                                                    revert with 0, 'SafeMath: addition overflow'
                                            if not userInfo[idx][msg.sender].field_0:
                                                userInfo[idx][msg.sender].field_256 = 0
                                            else:
                                                if poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / userInfo[idx][msg.sender].field_0 != poolInfo[idx].field_768:
                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                userInfo[idx][msg.sender].field_256 = poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12
                            else:
                                if (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond) / block.timestamp - poolInfo[idx].field_512 != rewardsPerSecond:
                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                if not (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond):
                                    if totalAllocPoint <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require totalAllocPoint
                                    if not 0 / totalAllocPoint:
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if not userInfo[idx][address(msg.sender)].field_0:
                                            if userInfo[idx][address(msg.sender)].field_256 > 0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if -userInfo[idx][address(msg.sender)].field_256 > 0:
                                                require idx < poolInfo.length
                                                if block.timestamp <= poolInfo[idx].field_512:
                                                    require idx < poolInfo.length
                                                    mem[0] = 4
                                                    _20473 = mem[64]
                                                    mem[64] = mem[64] + 128
                                                    mem[_20473] = poolInfo[idx].field_0
                                                    mem[_20473 + 32] = poolInfo[idx].field_256
                                                    mem[_20473 + 64] = poolInfo[idx].field_512
                                                    mem[_20473 + 96] = poolInfo[idx].field_768
                                                else:
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(poolInfo[idx].field_0)
                                                    staticcall poolInfo[idx].field_0.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if not ext_call.return_data[0]:
                                                        poolInfo[idx].field_512 = block.timestamp
                                                        require idx < poolInfo.length
                                                        mem[0] = 4
                                                        _21458 = mem[64]
                                                        mem[64] = mem[64] + 128
                                                        mem[_21458] = poolInfo[idx].field_0
                                                        mem[_21458 + 32] = poolInfo[idx].field_256
                                                        mem[_21458 + 64] = poolInfo[idx].field_512
                                                        mem[_21458 + 96] = poolInfo[idx].field_768
                                                    else:
                                                        if not totalAllocPoint:
                                                            poolInfo[idx].field_512 = block.timestamp
                                                            require idx < poolInfo.length
                                                            mem[0] = 4
                                                            _21725 = mem[64]
                                                            mem[64] = mem[64] + 128
                                                            mem[_21725] = poolInfo[idx].field_0
                                                            mem[_21725 + 32] = poolInfo[idx].field_256
                                                            mem[_21725 + 64] = poolInfo[idx].field_512
                                                            mem[_21725 + 96] = poolInfo[idx].field_768
                                                        else:
                                                            if poolInfo[idx].field_512 > block.timestamp:
                                                                revert with 0, 'SafeMath: subtraction overflow'
                                                            if not block.timestamp - poolInfo[idx].field_512:
                                                                if totalAllocPoint <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require totalAllocPoint
                                                                if not 0 / totalAllocPoint:
                                                                    if ext_call.return_data[0] <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    require ext_call.return_data[0]
                                                                    if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                                    poolInfo[idx].field_512 = block.timestamp
                                                                    require idx < poolInfo.length
                                                                    mem[0] = 4
                                                                    _28422 = mem[64]
                                                                    mem[64] = mem[64] + 128
                                                                    mem[_28422] = poolInfo[idx].field_0
                                                                    mem[_28422 + 32] = poolInfo[idx].field_256
                                                                    mem[_28422 + 64] = poolInfo[idx].field_512
                                                                    mem[_28422 + 96] = poolInfo[idx].field_768
                                                                else:
                                                                    if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                    if ext_call.return_data[0] <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    require ext_call.return_data[0]
                                                                    if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                                    poolInfo[idx].field_512 = block.timestamp
                                                                    require idx < poolInfo.length
                                                                    mem[0] = 4
                                                                    _28696 = mem[64]
                                                                    mem[64] = mem[64] + 128
                                                                    mem[_28696] = poolInfo[idx].field_0
                                                                    mem[_28696 + 32] = poolInfo[idx].field_256
                                                                    mem[_28696 + 64] = poolInfo[idx].field_512
                                                                    mem[_28696 + 96] = poolInfo[idx].field_768
                                                            else:
                                                                if (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond) / block.timestamp - poolInfo[idx].field_512 != rewardsPerSecond:
                                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                if not (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond):
                                                                    if totalAllocPoint <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    require totalAllocPoint
                                                                    if not 0 / totalAllocPoint:
                                                                        if ext_call.return_data[0] <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        require ext_call.return_data[0]
                                                                        if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                            revert with 0, 'SafeMath: addition overflow'
                                                                        poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                                        poolInfo[idx].field_512 = block.timestamp
                                                                        require idx < poolInfo.length
                                                                        mem[0] = 4
                                                                        _28691 = mem[64]
                                                                        mem[64] = mem[64] + 128
                                                                        mem[_28691] = poolInfo[idx].field_0
                                                                        mem[_28691 + 32] = poolInfo[idx].field_256
                                                                        mem[_28691 + 64] = poolInfo[idx].field_512
                                                                        mem[_28691 + 96] = poolInfo[idx].field_768
                                                                    else:
                                                                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                        if ext_call.return_data[0] <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        require ext_call.return_data[0]
                                                                        if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                            revert with 0, 'SafeMath: addition overflow'
                                                                        poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                                        poolInfo[idx].field_512 = block.timestamp
                                                                        require idx < poolInfo.length
                                                                        mem[0] = 4
                                                                        _29044 = mem[64]
                                                                        mem[64] = mem[64] + 128
                                                                        mem[_29044] = poolInfo[idx].field_0
                                                                        mem[_29044 + 32] = poolInfo[idx].field_256
                                                                        mem[_29044 + 64] = poolInfo[idx].field_512
                                                                        mem[_29044 + 96] = poolInfo[idx].field_768
                                                                else:
                                                                    if (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond) != poolInfo[idx].field_256:
                                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                    if totalAllocPoint <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    require totalAllocPoint
                                                                    if not (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint:
                                                                        if ext_call.return_data[0] <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        require ext_call.return_data[0]
                                                                        if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                            revert with 0, 'SafeMath: addition overflow'
                                                                        poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                                        poolInfo[idx].field_512 = block.timestamp
                                                                        require idx < poolInfo.length
                                                                        mem[0] = 4
                                                                        _29039 = mem[64]
                                                                        mem[64] = mem[64] + 128
                                                                        mem[_29039] = poolInfo[idx].field_0
                                                                        mem[_29039 + 32] = poolInfo[idx].field_256
                                                                        mem[_29039 + 64] = poolInfo[idx].field_512
                                                                        mem[_29039 + 96] = poolInfo[idx].field_768
                                                                    else:
                                                                        if 10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                        if ext_call.return_data[0] <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        require ext_call.return_data[0]
                                                                        if (10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                            revert with 0, 'SafeMath: addition overflow'
                                                                        poolInfo[idx].field_768 += 10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                                                                        poolInfo[idx].field_512 = block.timestamp
                                                                        require idx < poolInfo.length
                                                                        mem[0] = 4
                                                                        _29419 = mem[64]
                                                                        mem[64] = mem[64] + 128
                                                                        mem[_29419] = poolInfo[idx].field_0
                                                                        mem[_29419 + 32] = poolInfo[idx].field_256
                                                                        mem[_29419 + 64] = poolInfo[idx].field_512
                                                                        mem[_29419 + 96] = poolInfo[idx].field_768
                                                mem[0] = msg.sender
                                                mem[32] = sha3(idx, 6)
                                                if not userInfo[idx][msg.sender].field_0:
                                                    if userInfo[idx][msg.sender].field_256 > 0:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if -userInfo[idx][msg.sender].field_256 < 0:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                else:
                                                    if poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / userInfo[idx][msg.sender].field_0 != poolInfo[idx].field_768:
                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                    if userInfo[idx][msg.sender].field_256 > poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if (poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12) - userInfo[idx][msg.sender].field_256 < 0:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                if not userInfo[idx][msg.sender].field_0:
                                                    userInfo[idx][msg.sender].field_256 = 0
                                                else:
                                                    if poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / userInfo[idx][msg.sender].field_0 != poolInfo[idx].field_768:
                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                    userInfo[idx][msg.sender].field_256 = poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12
                                        else:
                                            if (0 / ext_call.return_data[0] * userInfo[idx][address(msg.sender)].field_0) + (poolInfo[idx].field_768 * userInfo[idx][address(msg.sender)].field_0) / userInfo[idx][address(msg.sender)].field_0 != (0 / ext_call.return_data[0]) + poolInfo[idx].field_768:
                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if userInfo[idx][address(msg.sender)].field_256 > (0 / ext_call.return_data[0] * userInfo[idx][address(msg.sender)].field_0) + (poolInfo[idx].field_768 * userInfo[idx][address(msg.sender)].field_0) / 10^12:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if ((0 / ext_call.return_data[0] * userInfo[idx][address(msg.sender)].field_0) + (poolInfo[idx].field_768 * userInfo[idx][address(msg.sender)].field_0) / 10^12) - userInfo[idx][address(msg.sender)].field_256 > 0:
                                                require idx < poolInfo.length
                                                if block.timestamp <= poolInfo[idx].field_512:
                                                    require idx < poolInfo.length
                                                    mem[0] = 4
                                                    _20632 = mem[64]
                                                    mem[64] = mem[64] + 128
                                                    mem[_20632] = poolInfo[idx].field_0
                                                    mem[_20632 + 32] = poolInfo[idx].field_256
                                                    mem[_20632 + 64] = poolInfo[idx].field_512
                                                    mem[_20632 + 96] = poolInfo[idx].field_768
                                                else:
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(poolInfo[idx].field_0)
                                                    staticcall poolInfo[idx].field_0.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if not ext_call.return_data[0]:
                                                        poolInfo[idx].field_512 = block.timestamp
                                                        require idx < poolInfo.length
                                                        mem[0] = 4
                                                        _21718 = mem[64]
                                                        mem[64] = mem[64] + 128
                                                        mem[_21718] = poolInfo[idx].field_0
                                                        mem[_21718 + 32] = poolInfo[idx].field_256
                                                        mem[_21718 + 64] = poolInfo[idx].field_512
                                                        mem[_21718 + 96] = poolInfo[idx].field_768
                                                    else:
                                                        if not totalAllocPoint:
                                                            poolInfo[idx].field_512 = block.timestamp
                                                            require idx < poolInfo.length
                                                            mem[0] = 4
                                                            _21987 = mem[64]
                                                            mem[64] = mem[64] + 128
                                                            mem[_21987] = poolInfo[idx].field_0
                                                            mem[_21987 + 32] = poolInfo[idx].field_256
                                                            mem[_21987 + 64] = poolInfo[idx].field_512
                                                            mem[_21987 + 96] = poolInfo[idx].field_768
                                                        else:
                                                            if poolInfo[idx].field_512 > block.timestamp:
                                                                revert with 0, 'SafeMath: subtraction overflow'
                                                            if not block.timestamp - poolInfo[idx].field_512:
                                                                if totalAllocPoint <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require totalAllocPoint
                                                                if not 0 / totalAllocPoint:
                                                                    if ext_call.return_data[0] <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    require ext_call.return_data[0]
                                                                    if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                                    poolInfo[idx].field_512 = block.timestamp
                                                                    require idx < poolInfo.length
                                                                    mem[0] = 4
                                                                    _28686 = mem[64]
                                                                    mem[64] = mem[64] + 128
                                                                    mem[_28686] = poolInfo[idx].field_0
                                                                    mem[_28686 + 32] = poolInfo[idx].field_256
                                                                    mem[_28686 + 64] = poolInfo[idx].field_512
                                                                    mem[_28686 + 96] = poolInfo[idx].field_768
                                                                else:
                                                                    if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                    if ext_call.return_data[0] <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    require ext_call.return_data[0]
                                                                    if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                                    poolInfo[idx].field_512 = block.timestamp
                                                                    require idx < poolInfo.length
                                                                    mem[0] = 4
                                                                    _29034 = mem[64]
                                                                    mem[64] = mem[64] + 128
                                                                    mem[_29034] = poolInfo[idx].field_0
                                                                    mem[_29034 + 32] = poolInfo[idx].field_256
                                                                    mem[_29034 + 64] = poolInfo[idx].field_512
                                                                    mem[_29034 + 96] = poolInfo[idx].field_768
                                                            else:
                                                                if (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond) / block.timestamp - poolInfo[idx].field_512 != rewardsPerSecond:
                                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                if not (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond):
                                                                    if totalAllocPoint <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    require totalAllocPoint
                                                                    if not 0 / totalAllocPoint:
                                                                        if ext_call.return_data[0] <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        require ext_call.return_data[0]
                                                                        if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                            revert with 0, 'SafeMath: addition overflow'
                                                                        poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                                        poolInfo[idx].field_512 = block.timestamp
                                                                        require idx < poolInfo.length
                                                                        mem[0] = 4
                                                                        _29029 = mem[64]
                                                                        mem[64] = mem[64] + 128
                                                                        mem[_29029] = poolInfo[idx].field_0
                                                                        mem[_29029 + 32] = poolInfo[idx].field_256
                                                                        mem[_29029 + 64] = poolInfo[idx].field_512
                                                                        mem[_29029 + 96] = poolInfo[idx].field_768
                                                                    else:
                                                                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                        if ext_call.return_data[0] <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        require ext_call.return_data[0]
                                                                        if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                            revert with 0, 'SafeMath: addition overflow'
                                                                        poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                                        poolInfo[idx].field_512 = block.timestamp
                                                                        require idx < poolInfo.length
                                                                        mem[0] = 4
                                                                        _29414 = mem[64]
                                                                        mem[64] = mem[64] + 128
                                                                        mem[_29414] = poolInfo[idx].field_0
                                                                        mem[_29414 + 32] = poolInfo[idx].field_256
                                                                        mem[_29414 + 64] = poolInfo[idx].field_512
                                                                        mem[_29414 + 96] = poolInfo[idx].field_768
                                                                else:
                                                                    if (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond) != poolInfo[idx].field_256:
                                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                    if totalAllocPoint <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    require totalAllocPoint
                                                                    if not (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint:
                                                                        if ext_call.return_data[0] <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        require ext_call.return_data[0]
                                                                        if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                            revert with 0, 'SafeMath: addition overflow'
                                                                        poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                                        poolInfo[idx].field_512 = block.timestamp
                                                                        require idx < poolInfo.length
                                                                        mem[0] = 4
                                                                        _29409 = mem[64]
                                                                        mem[64] = mem[64] + 128
                                                                        mem[_29409] = poolInfo[idx].field_0
                                                                        mem[_29409 + 32] = poolInfo[idx].field_256
                                                                        mem[_29409 + 64] = poolInfo[idx].field_512
                                                                        mem[_29409 + 96] = poolInfo[idx].field_768
                                                                    else:
                                                                        if 10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                        if ext_call.return_data[0] <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        require ext_call.return_data[0]
                                                                        if (10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                            revert with 0, 'SafeMath: addition overflow'
                                                                        poolInfo[idx].field_768 += 10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                                                                        poolInfo[idx].field_512 = block.timestamp
                                                                        require idx < poolInfo.length
                                                                        mem[0] = 4
                                                                        _29734 = mem[64]
                                                                        mem[64] = mem[64] + 128
                                                                        mem[_29734] = poolInfo[idx].field_0
                                                                        mem[_29734 + 32] = poolInfo[idx].field_256
                                                                        mem[_29734 + 64] = poolInfo[idx].field_512
                                                                        mem[_29734 + 96] = poolInfo[idx].field_768
                                                mem[0] = msg.sender
                                                mem[32] = sha3(idx, 6)
                                                if not userInfo[idx][msg.sender].field_0:
                                                    if userInfo[idx][msg.sender].field_256 > 0:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if -userInfo[idx][msg.sender].field_256 < 0:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                else:
                                                    if poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / userInfo[idx][msg.sender].field_0 != poolInfo[idx].field_768:
                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                    if userInfo[idx][msg.sender].field_256 > poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if (poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12) - userInfo[idx][msg.sender].field_256 < 0:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                if not userInfo[idx][msg.sender].field_0:
                                                    userInfo[idx][msg.sender].field_256 = 0
                                                else:
                                                    if poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / userInfo[idx][msg.sender].field_0 != poolInfo[idx].field_768:
                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                    userInfo[idx][msg.sender].field_256 = poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12
                                    else:
                                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if not userInfo[idx][address(msg.sender)].field_0:
                                            if userInfo[idx][address(msg.sender)].field_256 > 0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if -userInfo[idx][address(msg.sender)].field_256 > 0:
                                                require idx < poolInfo.length
                                                if block.timestamp <= poolInfo[idx].field_512:
                                                    require idx < poolInfo.length
                                                    mem[0] = 4
                                                    _20626 = mem[64]
                                                    mem[64] = mem[64] + 128
                                                    mem[_20626] = poolInfo[idx].field_0
                                                    mem[_20626 + 32] = poolInfo[idx].field_256
                                                    mem[_20626 + 64] = poolInfo[idx].field_512
                                                    mem[_20626 + 96] = poolInfo[idx].field_768
                                                else:
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(poolInfo[idx].field_0)
                                                    staticcall poolInfo[idx].field_0.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if not ext_call.return_data[0]:
                                                        poolInfo[idx].field_512 = block.timestamp
                                                        require idx < poolInfo.length
                                                        mem[0] = 4
                                                        _21711 = mem[64]
                                                        mem[64] = mem[64] + 128
                                                        mem[_21711] = poolInfo[idx].field_0
                                                        mem[_21711 + 32] = poolInfo[idx].field_256
                                                        mem[_21711 + 64] = poolInfo[idx].field_512
                                                        mem[_21711 + 96] = poolInfo[idx].field_768
                                                    else:
                                                        if not totalAllocPoint:
                                                            poolInfo[idx].field_512 = block.timestamp
                                                            require idx < poolInfo.length
                                                            mem[0] = 4
                                                            _21982 = mem[64]
                                                            mem[64] = mem[64] + 128
                                                            mem[_21982] = poolInfo[idx].field_0
                                                            mem[_21982 + 32] = poolInfo[idx].field_256
                                                            mem[_21982 + 64] = poolInfo[idx].field_512
                                                            mem[_21982 + 96] = poolInfo[idx].field_768
                                                        else:
                                                            if poolInfo[idx].field_512 > block.timestamp:
                                                                revert with 0, 'SafeMath: subtraction overflow'
                                                            if not block.timestamp - poolInfo[idx].field_512:
                                                                if totalAllocPoint <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require totalAllocPoint
                                                                if not 0 / totalAllocPoint:
                                                                    if ext_call.return_data[0] <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    require ext_call.return_data[0]
                                                                    if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                                    poolInfo[idx].field_512 = block.timestamp
                                                                    require idx < poolInfo.length
                                                                    mem[0] = 4
                                                                    _28679 = mem[64]
                                                                    mem[64] = mem[64] + 128
                                                                    mem[_28679] = poolInfo[idx].field_0
                                                                    mem[_28679 + 32] = poolInfo[idx].field_256
                                                                    mem[_28679 + 64] = poolInfo[idx].field_512
                                                                    mem[_28679 + 96] = poolInfo[idx].field_768
                                                                else:
                                                                    if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                    if ext_call.return_data[0] <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    require ext_call.return_data[0]
                                                                    if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                                    poolInfo[idx].field_512 = block.timestamp
                                                                    require idx < poolInfo.length
                                                                    mem[0] = 4
                                                                    _29024 = mem[64]
                                                                    mem[64] = mem[64] + 128
                                                                    mem[_29024] = poolInfo[idx].field_0
                                                                    mem[_29024 + 32] = poolInfo[idx].field_256
                                                                    mem[_29024 + 64] = poolInfo[idx].field_512
                                                                    mem[_29024 + 96] = poolInfo[idx].field_768
                                                            else:
                                                                if (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond) / block.timestamp - poolInfo[idx].field_512 != rewardsPerSecond:
                                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                if not (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond):
                                                                    if totalAllocPoint <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    require totalAllocPoint
                                                                    if not 0 / totalAllocPoint:
                                                                        if ext_call.return_data[0] <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        require ext_call.return_data[0]
                                                                        if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                            revert with 0, 'SafeMath: addition overflow'
                                                                        poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                                        poolInfo[idx].field_512 = block.timestamp
                                                                        require idx < poolInfo.length
                                                                        mem[0] = 4
                                                                        _29019 = mem[64]
                                                                        mem[64] = mem[64] + 128
                                                                        mem[_29019] = poolInfo[idx].field_0
                                                                        mem[_29019 + 32] = poolInfo[idx].field_256
                                                                        mem[_29019 + 64] = poolInfo[idx].field_512
                                                                        mem[_29019 + 96] = poolInfo[idx].field_768
                                                                    else:
                                                                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                        if ext_call.return_data[0] <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        require ext_call.return_data[0]
                                                                        if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                            revert with 0, 'SafeMath: addition overflow'
                                                                        poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                                        poolInfo[idx].field_512 = block.timestamp
                                                                        require idx < poolInfo.length
                                                                        mem[0] = 4
                                                                        _29404 = mem[64]
                                                                        mem[64] = mem[64] + 128
                                                                        mem[_29404] = poolInfo[idx].field_0
                                                                        mem[_29404 + 32] = poolInfo[idx].field_256
                                                                        mem[_29404 + 64] = poolInfo[idx].field_512
                                                                        mem[_29404 + 96] = poolInfo[idx].field_768
                                                                else:
                                                                    if (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond) != poolInfo[idx].field_256:
                                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                    if totalAllocPoint <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    require totalAllocPoint
                                                                    if not (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint:
                                                                        if ext_call.return_data[0] <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        require ext_call.return_data[0]
                                                                        if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                            revert with 0, 'SafeMath: addition overflow'
                                                                        poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                                        poolInfo[idx].field_512 = block.timestamp
                                                                        require idx < poolInfo.length
                                                                        mem[0] = 4
                                                                        _29399 = mem[64]
                                                                        mem[64] = mem[64] + 128
                                                                        mem[_29399] = poolInfo[idx].field_0
                                                                        mem[_29399 + 32] = poolInfo[idx].field_256
                                                                        mem[_29399 + 64] = poolInfo[idx].field_512
                                                                        mem[_29399 + 96] = poolInfo[idx].field_768
                                                                    else:
                                                                        if 10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                        if ext_call.return_data[0] <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        require ext_call.return_data[0]
                                                                        if (10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                            revert with 0, 'SafeMath: addition overflow'
                                                                        poolInfo[idx].field_768 += 10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                                                                        poolInfo[idx].field_512 = block.timestamp
                                                                        require idx < poolInfo.length
                                                                        mem[0] = 4
                                                                        _29729 = mem[64]
                                                                        mem[64] = mem[64] + 128
                                                                        mem[_29729] = poolInfo[idx].field_0
                                                                        mem[_29729 + 32] = poolInfo[idx].field_256
                                                                        mem[_29729 + 64] = poolInfo[idx].field_512
                                                                        mem[_29729 + 96] = poolInfo[idx].field_768
                                                mem[0] = msg.sender
                                                mem[32] = sha3(idx, 6)
                                                if not userInfo[idx][msg.sender].field_0:
                                                    if userInfo[idx][msg.sender].field_256 > 0:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if -userInfo[idx][msg.sender].field_256 < 0:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                else:
                                                    if poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / userInfo[idx][msg.sender].field_0 != poolInfo[idx].field_768:
                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                    if userInfo[idx][msg.sender].field_256 > poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if (poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12) - userInfo[idx][msg.sender].field_256 < 0:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                if not userInfo[idx][msg.sender].field_0:
                                                    userInfo[idx][msg.sender].field_256 = 0
                                                else:
                                                    if poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / userInfo[idx][msg.sender].field_0 != poolInfo[idx].field_768:
                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                    userInfo[idx][msg.sender].field_256 = poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12
                                        else:
                                            if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[idx][address(msg.sender)].field_0) + (poolInfo[idx].field_768 * userInfo[idx][address(msg.sender)].field_0) / userInfo[idx][address(msg.sender)].field_0 != (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768:
                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if userInfo[idx][address(msg.sender)].field_256 > (10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[idx][address(msg.sender)].field_0) + (poolInfo[idx].field_768 * userInfo[idx][address(msg.sender)].field_0) / 10^12:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if ((10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[idx][address(msg.sender)].field_0) + (poolInfo[idx].field_768 * userInfo[idx][address(msg.sender)].field_0) / 10^12) - userInfo[idx][address(msg.sender)].field_256 > 0:
                                                require idx < poolInfo.length
                                                if block.timestamp <= poolInfo[idx].field_512:
                                                    require idx < poolInfo.length
                                                    mem[0] = 4
                                                    _20818 = mem[64]
                                                    mem[64] = mem[64] + 128
                                                    mem[_20818] = poolInfo[idx].field_0
                                                    mem[_20818 + 32] = poolInfo[idx].field_256
                                                    mem[_20818 + 64] = poolInfo[idx].field_512
                                                    mem[_20818 + 96] = poolInfo[idx].field_768
                                                else:
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(poolInfo[idx].field_0)
                                                    staticcall poolInfo[idx].field_0.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if not ext_call.return_data[0]:
                                                        poolInfo[idx].field_512 = block.timestamp
                                                        require idx < poolInfo.length
                                                        mem[0] = 4
                                                        _21975 = mem[64]
                                                        mem[64] = mem[64] + 128
                                                        mem[_21975] = poolInfo[idx].field_0
                                                        mem[_21975 + 32] = poolInfo[idx].field_256
                                                        mem[_21975 + 64] = poolInfo[idx].field_512
                                                        mem[_21975 + 96] = poolInfo[idx].field_768
                                                    else:
                                                        if not totalAllocPoint:
                                                            poolInfo[idx].field_512 = block.timestamp
                                                            require idx < poolInfo.length
                                                            mem[0] = 4
                                                            _22204 = mem[64]
                                                            mem[64] = mem[64] + 128
                                                            mem[_22204] = poolInfo[idx].field_0
                                                            mem[_22204 + 32] = poolInfo[idx].field_256
                                                            mem[_22204 + 64] = poolInfo[idx].field_512
                                                            mem[_22204 + 96] = poolInfo[idx].field_768
                                                        else:
                                                            if poolInfo[idx].field_512 > block.timestamp:
                                                                revert with 0, 'SafeMath: subtraction overflow'
                                                            if not block.timestamp - poolInfo[idx].field_512:
                                                                if totalAllocPoint <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require totalAllocPoint
                                                                if not 0 / totalAllocPoint:
                                                                    if ext_call.return_data[0] <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    require ext_call.return_data[0]
                                                                    if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                                    poolInfo[idx].field_512 = block.timestamp
                                                                    require idx < poolInfo.length
                                                                    mem[0] = 4
                                                                    _29014 = mem[64]
                                                                    mem[64] = mem[64] + 128
                                                                    mem[_29014] = poolInfo[idx].field_0
                                                                    mem[_29014 + 32] = poolInfo[idx].field_256
                                                                    mem[_29014 + 64] = poolInfo[idx].field_512
                                                                    mem[_29014 + 96] = poolInfo[idx].field_768
                                                                else:
                                                                    if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                    if ext_call.return_data[0] <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    require ext_call.return_data[0]
                                                                    if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                                    poolInfo[idx].field_512 = block.timestamp
                                                                    require idx < poolInfo.length
                                                                    mem[0] = 4
                                                                    _29394 = mem[64]
                                                                    mem[64] = mem[64] + 128
                                                                    mem[_29394] = poolInfo[idx].field_0
                                                                    mem[_29394 + 32] = poolInfo[idx].field_256
                                                                    mem[_29394 + 64] = poolInfo[idx].field_512
                                                                    mem[_29394 + 96] = poolInfo[idx].field_768
                                                            else:
                                                                if (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond) / block.timestamp - poolInfo[idx].field_512 != rewardsPerSecond:
                                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                if not (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond):
                                                                    if totalAllocPoint <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    require totalAllocPoint
                                                                    if not 0 / totalAllocPoint:
                                                                        if ext_call.return_data[0] <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        require ext_call.return_data[0]
                                                                        if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                            revert with 0, 'SafeMath: addition overflow'
                                                                        poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                                        poolInfo[idx].field_512 = block.timestamp
                                                                        require idx < poolInfo.length
                                                                        mem[0] = 4
                                                                        _29389 = mem[64]
                                                                        mem[64] = mem[64] + 128
                                                                        mem[_29389] = poolInfo[idx].field_0
                                                                        mem[_29389 + 32] = poolInfo[idx].field_256
                                                                        mem[_29389 + 64] = poolInfo[idx].field_512
                                                                        mem[_29389 + 96] = poolInfo[idx].field_768
                                                                    else:
                                                                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                        if ext_call.return_data[0] <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        require ext_call.return_data[0]
                                                                        if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                            revert with 0, 'SafeMath: addition overflow'
                                                                        poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                                        poolInfo[idx].field_512 = block.timestamp
                                                                        require idx < poolInfo.length
                                                                        mem[0] = 4
                                                                        _29724 = mem[64]
                                                                        mem[64] = mem[64] + 128
                                                                        mem[_29724] = poolInfo[idx].field_0
                                                                        mem[_29724 + 32] = poolInfo[idx].field_256
                                                                        mem[_29724 + 64] = poolInfo[idx].field_512
                                                                        mem[_29724 + 96] = poolInfo[idx].field_768
                                                                else:
                                                                    if (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond) != poolInfo[idx].field_256:
                                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                    if totalAllocPoint <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    require totalAllocPoint
                                                                    if not (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint:
                                                                        if ext_call.return_data[0] <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        require ext_call.return_data[0]
                                                                        if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                            revert with 0, 'SafeMath: addition overflow'
                                                                        poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                                        poolInfo[idx].field_512 = block.timestamp
                                                                        require idx < poolInfo.length
                                                                        mem[0] = 4
                                                                        _29719 = mem[64]
                                                                        mem[64] = mem[64] + 128
                                                                        mem[_29719] = poolInfo[idx].field_0
                                                                        mem[_29719 + 32] = poolInfo[idx].field_256
                                                                        mem[_29719 + 64] = poolInfo[idx].field_512
                                                                        mem[_29719 + 96] = poolInfo[idx].field_768
                                                                    else:
                                                                        if 10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                        if ext_call.return_data[0] <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        require ext_call.return_data[0]
                                                                        if (10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                            revert with 0, 'SafeMath: addition overflow'
                                                                        poolInfo[idx].field_768 += 10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                                                                        poolInfo[idx].field_512 = block.timestamp
                                                                        require idx < poolInfo.length
                                                                        mem[0] = 4
                                                                        _29952 = mem[64]
                                                                        mem[64] = mem[64] + 128
                                                                        mem[_29952] = poolInfo[idx].field_0
                                                                        mem[_29952 + 32] = poolInfo[idx].field_256
                                                                        mem[_29952 + 64] = poolInfo[idx].field_512
                                                                        mem[_29952 + 96] = poolInfo[idx].field_768
                                                mem[0] = msg.sender
                                                mem[32] = sha3(idx, 6)
                                                if not userInfo[idx][msg.sender].field_0:
                                                    if userInfo[idx][msg.sender].field_256 > 0:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if -userInfo[idx][msg.sender].field_256 < 0:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                else:
                                                    if poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / userInfo[idx][msg.sender].field_0 != poolInfo[idx].field_768:
                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                    if userInfo[idx][msg.sender].field_256 > poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if (poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12) - userInfo[idx][msg.sender].field_256 < 0:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                if not userInfo[idx][msg.sender].field_0:
                                                    userInfo[idx][msg.sender].field_256 = 0
                                                else:
                                                    if poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / userInfo[idx][msg.sender].field_0 != poolInfo[idx].field_768:
                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                    userInfo[idx][msg.sender].field_256 = poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12
                                else:
                                    if (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond) != poolInfo[idx].field_256:
                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    if totalAllocPoint <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require totalAllocPoint
                                    if not (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint:
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if not userInfo[idx][address(msg.sender)].field_0:
                                            if userInfo[idx][address(msg.sender)].field_256 > 0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if -userInfo[idx][address(msg.sender)].field_256 > 0:
                                                require idx < poolInfo.length
                                                if block.timestamp <= poolInfo[idx].field_512:
                                                    require idx < poolInfo.length
                                                    mem[0] = 4
                                                    _20619 = mem[64]
                                                    mem[64] = mem[64] + 128
                                                    mem[_20619] = poolInfo[idx].field_0
                                                    mem[_20619 + 32] = poolInfo[idx].field_256
                                                    mem[_20619 + 64] = poolInfo[idx].field_512
                                                    mem[_20619 + 96] = poolInfo[idx].field_768
                                                else:
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(poolInfo[idx].field_0)
                                                    staticcall poolInfo[idx].field_0.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if not ext_call.return_data[0]:
                                                        poolInfo[idx].field_512 = block.timestamp
                                                        require idx < poolInfo.length
                                                        mem[0] = 4
                                                        _21702 = mem[64]
                                                        mem[64] = mem[64] + 128
                                                        mem[_21702] = poolInfo[idx].field_0
                                                        mem[_21702 + 32] = poolInfo[idx].field_256
                                                        mem[_21702 + 64] = poolInfo[idx].field_512
                                                        mem[_21702 + 96] = poolInfo[idx].field_768
                                                    else:
                                                        if not totalAllocPoint:
                                                            poolInfo[idx].field_512 = block.timestamp
                                                            require idx < poolInfo.length
                                                            mem[0] = 4
                                                            _21970 = mem[64]
                                                            mem[64] = mem[64] + 128
                                                            mem[_21970] = poolInfo[idx].field_0
                                                            mem[_21970 + 32] = poolInfo[idx].field_256
                                                            mem[_21970 + 64] = poolInfo[idx].field_512
                                                            mem[_21970 + 96] = poolInfo[idx].field_768
                                                        else:
                                                            if poolInfo[idx].field_512 > block.timestamp:
                                                                revert with 0, 'SafeMath: subtraction overflow'
                                                            if not block.timestamp - poolInfo[idx].field_512:
                                                                if totalAllocPoint <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require totalAllocPoint
                                                                if not 0 / totalAllocPoint:
                                                                    if ext_call.return_data[0] <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    require ext_call.return_data[0]
                                                                    if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                                    poolInfo[idx].field_512 = block.timestamp
                                                                    require idx < poolInfo.length
                                                                    mem[0] = 4
                                                                    _28668 = mem[64]
                                                                    mem[64] = mem[64] + 128
                                                                    mem[_28668] = poolInfo[idx].field_0
                                                                    mem[_28668 + 32] = poolInfo[idx].field_256
                                                                    mem[_28668 + 64] = poolInfo[idx].field_512
                                                                    mem[_28668 + 96] = poolInfo[idx].field_768
                                                                else:
                                                                    if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                    if ext_call.return_data[0] <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    require ext_call.return_data[0]
                                                                    if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                                    poolInfo[idx].field_512 = block.timestamp
                                                                    require idx < poolInfo.length
                                                                    mem[0] = 4
                                                                    _29007 = mem[64]
                                                                    mem[64] = mem[64] + 128
                                                                    mem[_29007] = poolInfo[idx].field_0
                                                                    mem[_29007 + 32] = poolInfo[idx].field_256
                                                                    mem[_29007 + 64] = poolInfo[idx].field_512
                                                                    mem[_29007 + 96] = poolInfo[idx].field_768
                                                            else:
                                                                if (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond) / block.timestamp - poolInfo[idx].field_512 != rewardsPerSecond:
                                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                if not (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond):
                                                                    if totalAllocPoint <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    require totalAllocPoint
                                                                    if not 0 / totalAllocPoint:
                                                                        if ext_call.return_data[0] <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        require ext_call.return_data[0]
                                                                        if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                            revert with 0, 'SafeMath: addition overflow'
                                                                        poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                                        poolInfo[idx].field_512 = block.timestamp
                                                                        require idx < poolInfo.length
                                                                        mem[0] = 4
                                                                        _29002 = mem[64]
                                                                        mem[64] = mem[64] + 128
                                                                        mem[_29002] = poolInfo[idx].field_0
                                                                        mem[_29002 + 32] = poolInfo[idx].field_256
                                                                        mem[_29002 + 64] = poolInfo[idx].field_512
                                                                        mem[_29002 + 96] = poolInfo[idx].field_768
                                                                    else:
                                                                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                        if ext_call.return_data[0] <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        require ext_call.return_data[0]
                                                                        if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                            revert with 0, 'SafeMath: addition overflow'
                                                                        poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                                        poolInfo[idx].field_512 = block.timestamp
                                                                        require idx < poolInfo.length
                                                                        mem[0] = 4
                                                                        _29384 = mem[64]
                                                                        mem[64] = mem[64] + 128
                                                                        mem[_29384] = poolInfo[idx].field_0
                                                                        mem[_29384 + 32] = poolInfo[idx].field_256
                                                                        mem[_29384 + 64] = poolInfo[idx].field_512
                                                                        mem[_29384 + 96] = poolInfo[idx].field_768
                                                                else:
                                                                    if (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond) != poolInfo[idx].field_256:
                                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                    if totalAllocPoint <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    require totalAllocPoint
                                                                    if not (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint:
                                                                        if ext_call.return_data[0] <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        require ext_call.return_data[0]
                                                                        if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                            revert with 0, 'SafeMath: addition overflow'
                                                                        poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                                        poolInfo[idx].field_512 = block.timestamp
                                                                        require idx < poolInfo.length
                                                                        mem[0] = 4
                                                                        _29379 = mem[64]
                                                                        mem[64] = mem[64] + 128
                                                                        mem[_29379] = poolInfo[idx].field_0
                                                                        mem[_29379 + 32] = poolInfo[idx].field_256
                                                                        mem[_29379 + 64] = poolInfo[idx].field_512
                                                                        mem[_29379 + 96] = poolInfo[idx].field_768
                                                                    else:
                                                                        if 10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                        if ext_call.return_data[0] <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        require ext_call.return_data[0]
                                                                        if (10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                            revert with 0, 'SafeMath: addition overflow'
                                                                        poolInfo[idx].field_768 += 10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                                                                        poolInfo[idx].field_512 = block.timestamp
                                                                        require idx < poolInfo.length
                                                                        mem[0] = 4
                                                                        _29714 = mem[64]
                                                                        mem[64] = mem[64] + 128
                                                                        mem[_29714] = poolInfo[idx].field_0
                                                                        mem[_29714 + 32] = poolInfo[idx].field_256
                                                                        mem[_29714 + 64] = poolInfo[idx].field_512
                                                                        mem[_29714 + 96] = poolInfo[idx].field_768
                                                mem[0] = msg.sender
                                                mem[32] = sha3(idx, 6)
                                                if not userInfo[idx][msg.sender].field_0:
                                                    if userInfo[idx][msg.sender].field_256 > 0:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if -userInfo[idx][msg.sender].field_256 < 0:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                else:
                                                    if poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / userInfo[idx][msg.sender].field_0 != poolInfo[idx].field_768:
                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                    if userInfo[idx][msg.sender].field_256 > poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if (poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12) - userInfo[idx][msg.sender].field_256 < 0:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                if not userInfo[idx][msg.sender].field_0:
                                                    userInfo[idx][msg.sender].field_256 = 0
                                                else:
                                                    if poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / userInfo[idx][msg.sender].field_0 != poolInfo[idx].field_768:
                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                    userInfo[idx][msg.sender].field_256 = poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12
                                        else:
                                            if (0 / ext_call.return_data[0] * userInfo[idx][address(msg.sender)].field_0) + (poolInfo[idx].field_768 * userInfo[idx][address(msg.sender)].field_0) / userInfo[idx][address(msg.sender)].field_0 != (0 / ext_call.return_data[0]) + poolInfo[idx].field_768:
                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if userInfo[idx][address(msg.sender)].field_256 > (0 / ext_call.return_data[0] * userInfo[idx][address(msg.sender)].field_0) + (poolInfo[idx].field_768 * userInfo[idx][address(msg.sender)].field_0) / 10^12:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if ((0 / ext_call.return_data[0] * userInfo[idx][address(msg.sender)].field_0) + (poolInfo[idx].field_768 * userInfo[idx][address(msg.sender)].field_0) / 10^12) - userInfo[idx][address(msg.sender)].field_256 > 0:
                                                require idx < poolInfo.length
                                                if block.timestamp <= poolInfo[idx].field_512:
                                                    require idx < poolInfo.length
                                                    mem[0] = 4
                                                    _20812 = mem[64]
                                                    mem[64] = mem[64] + 128
                                                    mem[_20812] = poolInfo[idx].field_0
                                                    mem[_20812 + 32] = poolInfo[idx].field_256
                                                    mem[_20812 + 64] = poolInfo[idx].field_512
                                                    mem[_20812 + 96] = poolInfo[idx].field_768
                                                else:
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(poolInfo[idx].field_0)
                                                    staticcall poolInfo[idx].field_0.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if not ext_call.return_data[0]:
                                                        poolInfo[idx].field_512 = block.timestamp
                                                        require idx < poolInfo.length
                                                        mem[0] = 4
                                                        _21963 = mem[64]
                                                        mem[64] = mem[64] + 128
                                                        mem[_21963] = poolInfo[idx].field_0
                                                        mem[_21963 + 32] = poolInfo[idx].field_256
                                                        mem[_21963 + 64] = poolInfo[idx].field_512
                                                        mem[_21963 + 96] = poolInfo[idx].field_768
                                                    else:
                                                        if not totalAllocPoint:
                                                            poolInfo[idx].field_512 = block.timestamp
                                                            require idx < poolInfo.length
                                                            mem[0] = 4
                                                            _22199 = mem[64]
                                                            mem[64] = mem[64] + 128
                                                            mem[_22199] = poolInfo[idx].field_0
                                                            mem[_22199 + 32] = poolInfo[idx].field_256
                                                            mem[_22199 + 64] = poolInfo[idx].field_512
                                                            mem[_22199 + 96] = poolInfo[idx].field_768
                                                        else:
                                                            if poolInfo[idx].field_512 > block.timestamp:
                                                                revert with 0, 'SafeMath: subtraction overflow'
                                                            if not block.timestamp - poolInfo[idx].field_512:
                                                                if totalAllocPoint <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require totalAllocPoint
                                                                if not 0 / totalAllocPoint:
                                                                    if ext_call.return_data[0] <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    require ext_call.return_data[0]
                                                                    if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                                    poolInfo[idx].field_512 = block.timestamp
                                                                    require idx < poolInfo.length
                                                                    mem[0] = 4
                                                                    _28997 = mem[64]
                                                                    mem[64] = mem[64] + 128
                                                                    mem[_28997] = poolInfo[idx].field_0
                                                                    mem[_28997 + 32] = poolInfo[idx].field_256
                                                                    mem[_28997 + 64] = poolInfo[idx].field_512
                                                                    mem[_28997 + 96] = poolInfo[idx].field_768
                                                                else:
                                                                    if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                    if ext_call.return_data[0] <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    require ext_call.return_data[0]
                                                                    if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                                    poolInfo[idx].field_512 = block.timestamp
                                                                    require idx < poolInfo.length
                                                                    mem[0] = 4
                                                                    _29374 = mem[64]
                                                                    mem[64] = mem[64] + 128
                                                                    mem[_29374] = poolInfo[idx].field_0
                                                                    mem[_29374 + 32] = poolInfo[idx].field_256
                                                                    mem[_29374 + 64] = poolInfo[idx].field_512
                                                                    mem[_29374 + 96] = poolInfo[idx].field_768
                                                            else:
                                                                if (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond) / block.timestamp - poolInfo[idx].field_512 != rewardsPerSecond:
                                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                if not (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond):
                                                                    if totalAllocPoint <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    require totalAllocPoint
                                                                    if not 0 / totalAllocPoint:
                                                                        if ext_call.return_data[0] <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        require ext_call.return_data[0]
                                                                        if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                            revert with 0, 'SafeMath: addition overflow'
                                                                        poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                                        poolInfo[idx].field_512 = block.timestamp
                                                                        require idx < poolInfo.length
                                                                        mem[0] = 4
                                                                        _29369 = mem[64]
                                                                        mem[64] = mem[64] + 128
                                                                        mem[_29369] = poolInfo[idx].field_0
                                                                        mem[_29369 + 32] = poolInfo[idx].field_256
                                                                        mem[_29369 + 64] = poolInfo[idx].field_512
                                                                        mem[_29369 + 96] = poolInfo[idx].field_768
                                                                    else:
                                                                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                        if ext_call.return_data[0] <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        require ext_call.return_data[0]
                                                                        if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                            revert with 0, 'SafeMath: addition overflow'
                                                                        poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                                        poolInfo[idx].field_512 = block.timestamp
                                                                        require idx < poolInfo.length
                                                                        mem[0] = 4
                                                                        _29709 = mem[64]
                                                                        mem[64] = mem[64] + 128
                                                                        mem[_29709] = poolInfo[idx].field_0
                                                                        mem[_29709 + 32] = poolInfo[idx].field_256
                                                                        mem[_29709 + 64] = poolInfo[idx].field_512
                                                                        mem[_29709 + 96] = poolInfo[idx].field_768
                                                                else:
                                                                    if (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond) != poolInfo[idx].field_256:
                                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                    if totalAllocPoint <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    require totalAllocPoint
                                                                    if not (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint:
                                                                        if ext_call.return_data[0] <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        require ext_call.return_data[0]
                                                                        if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                            revert with 0, 'SafeMath: addition overflow'
                                                                        poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                                        poolInfo[idx].field_512 = block.timestamp
                                                                        require idx < poolInfo.length
                                                                        mem[0] = 4
                                                                        _29704 = mem[64]
                                                                        mem[64] = mem[64] + 128
                                                                        mem[_29704] = poolInfo[idx].field_0
                                                                        mem[_29704 + 32] = poolInfo[idx].field_256
                                                                        mem[_29704 + 64] = poolInfo[idx].field_512
                                                                        mem[_29704 + 96] = poolInfo[idx].field_768
                                                                    else:
                                                                        if 10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                        if ext_call.return_data[0] <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        require ext_call.return_data[0]
                                                                        if (10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                            revert with 0, 'SafeMath: addition overflow'
                                                                        poolInfo[idx].field_768 += 10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                                                                        poolInfo[idx].field_512 = block.timestamp
                                                                        require idx < poolInfo.length
                                                                        mem[0] = 4
                                                                        _29945 = mem[64]
                                                                        mem[64] = mem[64] + 128
                                                                        mem[_29945] = poolInfo[idx].field_0
                                                                        mem[_29945 + 32] = poolInfo[idx].field_256
                                                                        mem[_29945 + 64] = poolInfo[idx].field_512
                                                                        mem[_29945 + 96] = poolInfo[idx].field_768
                                                mem[0] = msg.sender
                                                mem[32] = sha3(idx, 6)
                                                if not userInfo[idx][msg.sender].field_0:
                                                    if userInfo[idx][msg.sender].field_256 > 0:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if -userInfo[idx][msg.sender].field_256 < 0:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                else:
                                                    if poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / userInfo[idx][msg.sender].field_0 != poolInfo[idx].field_768:
                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                    if userInfo[idx][msg.sender].field_256 > poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if (poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12) - userInfo[idx][msg.sender].field_256 < 0:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                if not userInfo[idx][msg.sender].field_0:
                                                    userInfo[idx][msg.sender].field_256 = 0
                                                else:
                                                    if poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / userInfo[idx][msg.sender].field_0 != poolInfo[idx].field_768:
                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                    userInfo[idx][msg.sender].field_256 = poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12
                                    else:
                                        if 10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if (10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if not userInfo[idx][address(msg.sender)].field_0:
                                            if userInfo[idx][address(msg.sender)].field_256 > 0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if -userInfo[idx][address(msg.sender)].field_256 > 0:
                                                require idx < poolInfo.length
                                                if block.timestamp <= poolInfo[idx].field_512:
                                                    require idx < poolInfo.length
                                                    mem[0] = 4
                                                    _20806 = mem[64]
                                                    mem[64] = mem[64] + 128
                                                    mem[_20806] = poolInfo[idx].field_0
                                                    mem[_20806 + 32] = poolInfo[idx].field_256
                                                    mem[_20806 + 64] = poolInfo[idx].field_512
                                                    mem[_20806 + 96] = poolInfo[idx].field_768
                                                else:
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(poolInfo[idx].field_0)
                                                    staticcall poolInfo[idx].field_0.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if not ext_call.return_data[0]:
                                                        poolInfo[idx].field_512 = block.timestamp
                                                        require idx < poolInfo.length
                                                        mem[0] = 4
                                                        _21956 = mem[64]
                                                        mem[64] = mem[64] + 128
                                                        mem[_21956] = poolInfo[idx].field_0
                                                        mem[_21956 + 32] = poolInfo[idx].field_256
                                                        mem[_21956 + 64] = poolInfo[idx].field_512
                                                        mem[_21956 + 96] = poolInfo[idx].field_768
                                                    else:
                                                        if not totalAllocPoint:
                                                            poolInfo[idx].field_512 = block.timestamp
                                                            require idx < poolInfo.length
                                                            mem[0] = 4
                                                            _22194 = mem[64]
                                                            mem[64] = mem[64] + 128
                                                            mem[_22194] = poolInfo[idx].field_0
                                                            mem[_22194 + 32] = poolInfo[idx].field_256
                                                            mem[_22194 + 64] = poolInfo[idx].field_512
                                                            mem[_22194 + 96] = poolInfo[idx].field_768
                                                        else:
                                                            if poolInfo[idx].field_512 > block.timestamp:
                                                                revert with 0, 'SafeMath: subtraction overflow'
                                                            if not block.timestamp - poolInfo[idx].field_512:
                                                                if totalAllocPoint <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require totalAllocPoint
                                                                if not 0 / totalAllocPoint:
                                                                    if ext_call.return_data[0] <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    require ext_call.return_data[0]
                                                                    if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                                    poolInfo[idx].field_512 = block.timestamp
                                                                    require idx < poolInfo.length
                                                                    mem[0] = 4
                                                                    _28990 = mem[64]
                                                                    mem[64] = mem[64] + 128
                                                                    mem[_28990] = poolInfo[idx].field_0
                                                                    mem[_28990 + 32] = poolInfo[idx].field_256
                                                                    mem[_28990 + 64] = poolInfo[idx].field_512
                                                                    mem[_28990 + 96] = poolInfo[idx].field_768
                                                                else:
                                                                    if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                    if ext_call.return_data[0] <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    require ext_call.return_data[0]
                                                                    if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                                    poolInfo[idx].field_512 = block.timestamp
                                                                    require idx < poolInfo.length
                                                                    mem[0] = 4
                                                                    _29364 = mem[64]
                                                                    mem[64] = mem[64] + 128
                                                                    mem[_29364] = poolInfo[idx].field_0
                                                                    mem[_29364 + 32] = poolInfo[idx].field_256
                                                                    mem[_29364 + 64] = poolInfo[idx].field_512
                                                                    mem[_29364 + 96] = poolInfo[idx].field_768
                                                            else:
                                                                if (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond) / block.timestamp - poolInfo[idx].field_512 != rewardsPerSecond:
                                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                if not (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond):
                                                                    if totalAllocPoint <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    require totalAllocPoint
                                                                    if not 0 / totalAllocPoint:
                                                                        if ext_call.return_data[0] <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        require ext_call.return_data[0]
                                                                        if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                            revert with 0, 'SafeMath: addition overflow'
                                                                        poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                                        poolInfo[idx].field_512 = block.timestamp
                                                                        require idx < poolInfo.length
                                                                        mem[0] = 4
                                                                        _29359 = mem[64]
                                                                        mem[64] = mem[64] + 128
                                                                        mem[_29359] = poolInfo[idx].field_0
                                                                        mem[_29359 + 32] = poolInfo[idx].field_256
                                                                        mem[_29359 + 64] = poolInfo[idx].field_512
                                                                        mem[_29359 + 96] = poolInfo[idx].field_768
                                                                    else:
                                                                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                        if ext_call.return_data[0] <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        require ext_call.return_data[0]
                                                                        if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                            revert with 0, 'SafeMath: addition overflow'
                                                                        poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                                        poolInfo[idx].field_512 = block.timestamp
                                                                        require idx < poolInfo.length
                                                                        mem[0] = 4
                                                                        _29699 = mem[64]
                                                                        mem[64] = mem[64] + 128
                                                                        mem[_29699] = poolInfo[idx].field_0
                                                                        mem[_29699 + 32] = poolInfo[idx].field_256
                                                                        mem[_29699 + 64] = poolInfo[idx].field_512
                                                                        mem[_29699 + 96] = poolInfo[idx].field_768
                                                                else:
                                                                    if (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond) != poolInfo[idx].field_256:
                                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                    if totalAllocPoint <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    require totalAllocPoint
                                                                    if not (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint:
                                                                        if ext_call.return_data[0] <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        require ext_call.return_data[0]
                                                                        if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                            revert with 0, 'SafeMath: addition overflow'
                                                                        poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                                        poolInfo[idx].field_512 = block.timestamp
                                                                        require idx < poolInfo.length
                                                                        mem[0] = 4
                                                                        _29694 = mem[64]
                                                                        mem[64] = mem[64] + 128
                                                                        mem[_29694] = poolInfo[idx].field_0
                                                                        mem[_29694 + 32] = poolInfo[idx].field_256
                                                                        mem[_29694 + 64] = poolInfo[idx].field_512
                                                                        mem[_29694 + 96] = poolInfo[idx].field_768
                                                                    else:
                                                                        if 10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                        if ext_call.return_data[0] <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        require ext_call.return_data[0]
                                                                        if (10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                            revert with 0, 'SafeMath: addition overflow'
                                                                        poolInfo[idx].field_768 += 10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                                                                        poolInfo[idx].field_512 = block.timestamp
                                                                        require idx < poolInfo.length
                                                                        mem[0] = 4
                                                                        _29940 = mem[64]
                                                                        mem[64] = mem[64] + 128
                                                                        mem[_29940] = poolInfo[idx].field_0
                                                                        mem[_29940 + 32] = poolInfo[idx].field_256
                                                                        mem[_29940 + 64] = poolInfo[idx].field_512
                                                                        mem[_29940 + 96] = poolInfo[idx].field_768
                                                mem[0] = msg.sender
                                                mem[32] = sha3(idx, 6)
                                                if not userInfo[idx][msg.sender].field_0:
                                                    if userInfo[idx][msg.sender].field_256 > 0:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if -userInfo[idx][msg.sender].field_256 < 0:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                else:
                                                    if poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / userInfo[idx][msg.sender].field_0 != poolInfo[idx].field_768:
                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                    if userInfo[idx][msg.sender].field_256 > poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if (poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12) - userInfo[idx][msg.sender].field_256 < 0:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                if not userInfo[idx][msg.sender].field_0:
                                                    userInfo[idx][msg.sender].field_256 = 0
                                                else:
                                                    if poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / userInfo[idx][msg.sender].field_0 != poolInfo[idx].field_768:
                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                    userInfo[idx][msg.sender].field_256 = poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12
                                        else:
                                            if (10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0] * userInfo[idx][address(msg.sender)].field_0) + (poolInfo[idx].field_768 * userInfo[idx][address(msg.sender)].field_0) / userInfo[idx][address(msg.sender)].field_0 != (10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768:
                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if userInfo[idx][address(msg.sender)].field_256 > (10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0] * userInfo[idx][address(msg.sender)].field_0) + (poolInfo[idx].field_768 * userInfo[idx][address(msg.sender)].field_0) / 10^12:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if ((10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0] * userInfo[idx][address(msg.sender)].field_0) + (poolInfo[idx].field_768 * userInfo[idx][address(msg.sender)].field_0) / 10^12) - userInfo[idx][address(msg.sender)].field_256 > 0:
                                                require idx < poolInfo.length
                                                if block.timestamp <= poolInfo[idx].field_512:
                                                    require idx < poolInfo.length
                                                    mem[0] = 4
                                                    _21015 = mem[64]
                                                    mem[64] = mem[64] + 128
                                                    mem[_21015] = poolInfo[idx].field_0
                                                    mem[_21015 + 32] = poolInfo[idx].field_256
                                                    mem[_21015 + 64] = poolInfo[idx].field_512
                                                    mem[_21015 + 96] = poolInfo[idx].field_768
                                                else:
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(poolInfo[idx].field_0)
                                                    staticcall poolInfo[idx].field_0.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if not ext_call.return_data[0]:
                                                        poolInfo[idx].field_512 = block.timestamp
                                                        require idx < poolInfo.length
                                                        mem[0] = 4
                                                        _22187 = mem[64]
                                                        mem[64] = mem[64] + 128
                                                        mem[_22187] = poolInfo[idx].field_0
                                                        mem[_22187 + 32] = poolInfo[idx].field_256
                                                        mem[_22187 + 64] = poolInfo[idx].field_512
                                                        mem[_22187 + 96] = poolInfo[idx].field_768
                                                    else:
                                                        if not totalAllocPoint:
                                                            poolInfo[idx].field_512 = block.timestamp
                                                            require idx < poolInfo.length
                                                            mem[0] = 4
                                                            _22367 = mem[64]
                                                            mem[64] = mem[64] + 128
                                                            mem[_22367] = poolInfo[idx].field_0
                                                            mem[_22367 + 32] = poolInfo[idx].field_256
                                                            mem[_22367 + 64] = poolInfo[idx].field_512
                                                            mem[_22367 + 96] = poolInfo[idx].field_768
                                                        else:
                                                            if poolInfo[idx].field_512 > block.timestamp:
                                                                revert with 0, 'SafeMath: subtraction overflow'
                                                            if not block.timestamp - poolInfo[idx].field_512:
                                                                if totalAllocPoint <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require totalAllocPoint
                                                                if not 0 / totalAllocPoint:
                                                                    if ext_call.return_data[0] <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    require ext_call.return_data[0]
                                                                    if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                                    poolInfo[idx].field_512 = block.timestamp
                                                                    require idx < poolInfo.length
                                                                    mem[0] = 4
                                                                    _29354 = mem[64]
                                                                    mem[64] = mem[64] + 128
                                                                    mem[_29354] = poolInfo[idx].field_0
                                                                    mem[_29354 + 32] = poolInfo[idx].field_256
                                                                    mem[_29354 + 64] = poolInfo[idx].field_512
                                                                    mem[_29354 + 96] = poolInfo[idx].field_768
                                                                else:
                                                                    if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                    if ext_call.return_data[0] <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    require ext_call.return_data[0]
                                                                    if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                                    poolInfo[idx].field_512 = block.timestamp
                                                                    require idx < poolInfo.length
                                                                    mem[0] = 4
                                                                    _29689 = mem[64]
                                                                    mem[64] = mem[64] + 128
                                                                    mem[_29689] = poolInfo[idx].field_0
                                                                    mem[_29689 + 32] = poolInfo[idx].field_256
                                                                    mem[_29689 + 64] = poolInfo[idx].field_512
                                                                    mem[_29689 + 96] = poolInfo[idx].field_768
                                                            else:
                                                                if (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond) / block.timestamp - poolInfo[idx].field_512 != rewardsPerSecond:
                                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                if not (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond):
                                                                    if totalAllocPoint <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    require totalAllocPoint
                                                                    if not 0 / totalAllocPoint:
                                                                        if ext_call.return_data[0] <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        require ext_call.return_data[0]
                                                                        if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                            revert with 0, 'SafeMath: addition overflow'
                                                                        poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                                        poolInfo[idx].field_512 = block.timestamp
                                                                        require idx < poolInfo.length
                                                                        mem[0] = 4
                                                                        _29684 = mem[64]
                                                                        mem[64] = mem[64] + 128
                                                                        mem[_29684] = poolInfo[idx].field_0
                                                                        mem[_29684 + 32] = poolInfo[idx].field_256
                                                                        mem[_29684 + 64] = poolInfo[idx].field_512
                                                                        mem[_29684 + 96] = poolInfo[idx].field_768
                                                                    else:
                                                                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                        if ext_call.return_data[0] <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        require ext_call.return_data[0]
                                                                        if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                            revert with 0, 'SafeMath: addition overflow'
                                                                        poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                                        poolInfo[idx].field_512 = block.timestamp
                                                                        require idx < poolInfo.length
                                                                        mem[0] = 4
                                                                        _29935 = mem[64]
                                                                        mem[64] = mem[64] + 128
                                                                        mem[_29935] = poolInfo[idx].field_0
                                                                        mem[_29935 + 32] = poolInfo[idx].field_256
                                                                        mem[_29935 + 64] = poolInfo[idx].field_512
                                                                        mem[_29935 + 96] = poolInfo[idx].field_768
                                                                else:
                                                                    if (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond) != poolInfo[idx].field_256:
                                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                    if totalAllocPoint <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    require totalAllocPoint
                                                                    if not (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint:
                                                                        if ext_call.return_data[0] <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        require ext_call.return_data[0]
                                                                        if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                            revert with 0, 'SafeMath: addition overflow'
                                                                        poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                                        poolInfo[idx].field_512 = block.timestamp
                                                                        require idx < poolInfo.length
                                                                        mem[0] = 4
                                                                        _29930 = mem[64]
                                                                        mem[64] = mem[64] + 128
                                                                        mem[_29930] = poolInfo[idx].field_0
                                                                        mem[_29930 + 32] = poolInfo[idx].field_256
                                                                        mem[_29930 + 64] = poolInfo[idx].field_512
                                                                        mem[_29930 + 96] = poolInfo[idx].field_768
                                                                    else:
                                                                        if 10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                        if ext_call.return_data[0] <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        require ext_call.return_data[0]
                                                                        if (10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                            revert with 0, 'SafeMath: addition overflow'
                                                                        poolInfo[idx].field_768 += 10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                                                                        poolInfo[idx].field_512 = block.timestamp
                                                                        require idx < poolInfo.length
                                                                        mem[0] = 4
                                                                        _30111 = mem[64]
                                                                        mem[64] = mem[64] + 128
                                                                        mem[_30111] = poolInfo[idx].field_0
                                                                        mem[_30111 + 32] = poolInfo[idx].field_256
                                                                        mem[_30111 + 64] = poolInfo[idx].field_512
                                                                        mem[_30111 + 96] = poolInfo[idx].field_768
                                                mem[0] = msg.sender
                                                mem[32] = sha3(idx, 6)
                                                if not userInfo[idx][msg.sender].field_0:
                                                    if userInfo[idx][msg.sender].field_256 > 0:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if -userInfo[idx][msg.sender].field_256 < 0:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                else:
                                                    if poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / userInfo[idx][msg.sender].field_0 != poolInfo[idx].field_768:
                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                    if userInfo[idx][msg.sender].field_256 > poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if (poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12) - userInfo[idx][msg.sender].field_256 < 0:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                if not userInfo[idx][msg.sender].field_0:
                                                    userInfo[idx][msg.sender].field_256 = 0
                                                else:
                                                    if poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / userInfo[idx][msg.sender].field_0 != poolInfo[idx].field_768:
                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                    userInfo[idx][msg.sender].field_256 = poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12
            idx = idx + 1
            continue 
    else:
        if sub_334d0bbd.length <= 0:
            idx = 0
            while idx < poolInfo.length:
                mem[0] = msg.sender
                mem[32] = sha3(idx, 6)
                _17555 = mem[64]
                mem[64] = mem[64] + 64
                mem[_17555] = userInfo[idx][address(msg.sender)].field_0
                mem[_17555 + 32] = userInfo[idx][address(msg.sender)].field_256
                if userInfo[idx][address(msg.sender)].field_0:
                    require idx < poolInfo.length
                    mem[0] = 4
                    _17567 = mem[64]
                    mem[64] = mem[64] + 128
                    mem[_17567] = poolInfo[idx].field_0
                    mem[_17567 + 32] = poolInfo[idx].field_256
                    mem[_17567 + 64] = poolInfo[idx].field_512
                    mem[_17567 + 96] = poolInfo[idx].field_768
                    mem[mem[64] + 4] = this.address
                    require ext_code.size(poolInfo[idx].field_0)
                    staticcall poolInfo[idx].field_0.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if block.timestamp <= poolInfo[idx].field_512:
                        if not userInfo[idx][address(msg.sender)].field_0:
                            if userInfo[idx][address(msg.sender)].field_256 > 0:
                                revert with 0, 'SafeMath: subtraction overflow'
                            if -userInfo[idx][address(msg.sender)].field_256 > 0:
                                require idx < poolInfo.length
                                if block.timestamp <= poolInfo[idx].field_512:
                                    require idx < poolInfo.length
                                    mem[0] = 4
                                    _17817 = mem[64]
                                    mem[64] = mem[64] + 128
                                    mem[_17817] = poolInfo[idx].field_0
                                    mem[_17817 + 32] = poolInfo[idx].field_256
                                    mem[_17817 + 64] = poolInfo[idx].field_512
                                    mem[_17817 + 96] = poolInfo[idx].field_768
                                else:
                                    mem[mem[64] + 4] = this.address
                                    require ext_code.size(poolInfo[idx].field_0)
                                    staticcall poolInfo[idx].field_0.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        poolInfo[idx].field_512 = block.timestamp
                                        require idx < poolInfo.length
                                        mem[0] = 4
                                        _18024 = mem[64]
                                        mem[64] = mem[64] + 128
                                        mem[_18024] = poolInfo[idx].field_0
                                        mem[_18024 + 32] = poolInfo[idx].field_256
                                        mem[_18024 + 64] = poolInfo[idx].field_512
                                        mem[_18024 + 96] = poolInfo[idx].field_768
                                    else:
                                        if not totalAllocPoint:
                                            poolInfo[idx].field_512 = block.timestamp
                                            require idx < poolInfo.length
                                            mem[0] = 4
                                            _18092 = mem[64]
                                            mem[64] = mem[64] + 128
                                            mem[_18092] = poolInfo[idx].field_0
                                            mem[_18092 + 32] = poolInfo[idx].field_256
                                            mem[_18092 + 64] = poolInfo[idx].field_512
                                            mem[_18092 + 96] = poolInfo[idx].field_768
                                        else:
                                            if poolInfo[idx].field_512 > block.timestamp:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not block.timestamp - poolInfo[idx].field_512:
                                                if totalAllocPoint <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalAllocPoint
                                                if not 0 / totalAllocPoint:
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0]
                                                    if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                    poolInfo[idx].field_512 = block.timestamp
                                                    require idx < poolInfo.length
                                                    mem[0] = 4
                                                    _20649 = mem[64]
                                                    mem[64] = mem[64] + 128
                                                    mem[_20649] = poolInfo[idx].field_0
                                                    mem[_20649 + 32] = poolInfo[idx].field_256
                                                    mem[_20649 + 64] = poolInfo[idx].field_512
                                                    mem[_20649 + 96] = poolInfo[idx].field_768
                                                else:
                                                    if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0]
                                                    if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                    poolInfo[idx].field_512 = block.timestamp
                                                    require idx < poolInfo.length
                                                    mem[0] = 4
                                                    _20835 = mem[64]
                                                    mem[64] = mem[64] + 128
                                                    mem[_20835] = poolInfo[idx].field_0
                                                    mem[_20835 + 32] = poolInfo[idx].field_256
                                                    mem[_20835 + 64] = poolInfo[idx].field_512
                                                    mem[_20835 + 96] = poolInfo[idx].field_768
                                            else:
                                                if (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond) / block.timestamp - poolInfo[idx].field_512 != rewardsPerSecond:
                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                if not (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond):
                                                    if totalAllocPoint <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalAllocPoint
                                                    if not 0 / totalAllocPoint:
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                        poolInfo[idx].field_512 = block.timestamp
                                                        require idx < poolInfo.length
                                                        mem[0] = 4
                                                        _20830 = mem[64]
                                                        mem[64] = mem[64] + 128
                                                        mem[_20830] = poolInfo[idx].field_0
                                                        mem[_20830 + 32] = poolInfo[idx].field_256
                                                        mem[_20830 + 64] = poolInfo[idx].field_512
                                                        mem[_20830 + 96] = poolInfo[idx].field_768
                                                    else:
                                                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                        poolInfo[idx].field_512 = block.timestamp
                                                        require idx < poolInfo.length
                                                        mem[0] = 4
                                                        _21037 = mem[64]
                                                        mem[64] = mem[64] + 128
                                                        mem[_21037] = poolInfo[idx].field_0
                                                        mem[_21037 + 32] = poolInfo[idx].field_256
                                                        mem[_21037 + 64] = poolInfo[idx].field_512
                                                        mem[_21037 + 96] = poolInfo[idx].field_768
                                                else:
                                                    if (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond) != poolInfo[idx].field_256:
                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                    if totalAllocPoint <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalAllocPoint
                                                    if not (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint:
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                        poolInfo[idx].field_512 = block.timestamp
                                                        require idx < poolInfo.length
                                                        mem[0] = 4
                                                        _21032 = mem[64]
                                                        mem[64] = mem[64] + 128
                                                        mem[_21032] = poolInfo[idx].field_0
                                                        mem[_21032 + 32] = poolInfo[idx].field_256
                                                        mem[_21032 + 64] = poolInfo[idx].field_512
                                                        mem[_21032 + 96] = poolInfo[idx].field_768
                                                    else:
                                                        if 10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if (10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_768 += 10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                                                        poolInfo[idx].field_512 = block.timestamp
                                                        require idx < poolInfo.length
                                                        mem[0] = 4
                                                        _21250 = mem[64]
                                                        mem[64] = mem[64] + 128
                                                        mem[_21250] = poolInfo[idx].field_0
                                                        mem[_21250 + 32] = poolInfo[idx].field_256
                                                        mem[_21250 + 64] = poolInfo[idx].field_512
                                                        mem[_21250 + 96] = poolInfo[idx].field_768
                                mem[0] = msg.sender
                                mem[32] = sha3(idx, 6)
                                if not userInfo[idx][msg.sender].field_0:
                                    if userInfo[idx][msg.sender].field_256 > 0:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if -userInfo[idx][msg.sender].field_256 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                else:
                                    if poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / userInfo[idx][msg.sender].field_0 != poolInfo[idx].field_768:
                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    if userInfo[idx][msg.sender].field_256 > poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if (poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12) - userInfo[idx][msg.sender].field_256 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                if not userInfo[idx][msg.sender].field_0:
                                    userInfo[idx][msg.sender].field_256 = 0
                                else:
                                    if poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / userInfo[idx][msg.sender].field_0 != poolInfo[idx].field_768:
                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    userInfo[idx][msg.sender].field_256 = poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12
                        else:
                            if poolInfo[idx].field_768 * userInfo[idx][address(msg.sender)].field_0 / userInfo[idx][address(msg.sender)].field_0 != poolInfo[idx].field_768:
                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                            if userInfo[idx][address(msg.sender)].field_256 > poolInfo[idx].field_768 * userInfo[idx][address(msg.sender)].field_0 / 10^12:
                                revert with 0, 'SafeMath: subtraction overflow'
                            if (poolInfo[idx].field_768 * userInfo[idx][address(msg.sender)].field_0 / 10^12) - userInfo[idx][address(msg.sender)].field_256 > 0:
                                require idx < poolInfo.length
                                if block.timestamp <= poolInfo[idx].field_512:
                                    require idx < poolInfo.length
                                    mem[0] = 4
                                    _17856 = mem[64]
                                    mem[64] = mem[64] + 128
                                    mem[_17856] = poolInfo[idx].field_0
                                    mem[_17856 + 32] = poolInfo[idx].field_256
                                    mem[_17856 + 64] = poolInfo[idx].field_512
                                    mem[_17856 + 96] = poolInfo[idx].field_768
                                else:
                                    mem[mem[64] + 4] = this.address
                                    require ext_code.size(poolInfo[idx].field_0)
                                    staticcall poolInfo[idx].field_0.0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        poolInfo[idx].field_512 = block.timestamp
                                        require idx < poolInfo.length
                                        mem[0] = 4
                                        _18085 = mem[64]
                                        mem[64] = mem[64] + 128
                                        mem[_18085] = poolInfo[idx].field_0
                                        mem[_18085 + 32] = poolInfo[idx].field_256
                                        mem[_18085 + 64] = poolInfo[idx].field_512
                                        mem[_18085 + 96] = poolInfo[idx].field_768
                                    else:
                                        if not totalAllocPoint:
                                            poolInfo[idx].field_512 = block.timestamp
                                            require idx < poolInfo.length
                                            mem[0] = 4
                                            _18173 = mem[64]
                                            mem[64] = mem[64] + 128
                                            mem[_18173] = poolInfo[idx].field_0
                                            mem[_18173 + 32] = poolInfo[idx].field_256
                                            mem[_18173 + 64] = poolInfo[idx].field_512
                                            mem[_18173 + 96] = poolInfo[idx].field_768
                                        else:
                                            if poolInfo[idx].field_512 > block.timestamp:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not block.timestamp - poolInfo[idx].field_512:
                                                if totalAllocPoint <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalAllocPoint
                                                if not 0 / totalAllocPoint:
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0]
                                                    if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                    poolInfo[idx].field_512 = block.timestamp
                                                    require idx < poolInfo.length
                                                    mem[0] = 4
                                                    _20825 = mem[64]
                                                    mem[64] = mem[64] + 128
                                                    mem[_20825] = poolInfo[idx].field_0
                                                    mem[_20825 + 32] = poolInfo[idx].field_256
                                                    mem[_20825 + 64] = poolInfo[idx].field_512
                                                    mem[_20825 + 96] = poolInfo[idx].field_768
                                                else:
                                                    if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                    if ext_call.return_data[0] <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require ext_call.return_data[0]
                                                    if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                    poolInfo[idx].field_512 = block.timestamp
                                                    require idx < poolInfo.length
                                                    mem[0] = 4
                                                    _21027 = mem[64]
                                                    mem[64] = mem[64] + 128
                                                    mem[_21027] = poolInfo[idx].field_0
                                                    mem[_21027 + 32] = poolInfo[idx].field_256
                                                    mem[_21027 + 64] = poolInfo[idx].field_512
                                                    mem[_21027 + 96] = poolInfo[idx].field_768
                                            else:
                                                if (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond) / block.timestamp - poolInfo[idx].field_512 != rewardsPerSecond:
                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                if not (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond):
                                                    if totalAllocPoint <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalAllocPoint
                                                    if not 0 / totalAllocPoint:
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                        poolInfo[idx].field_512 = block.timestamp
                                                        require idx < poolInfo.length
                                                        mem[0] = 4
                                                        _21022 = mem[64]
                                                        mem[64] = mem[64] + 128
                                                        mem[_21022] = poolInfo[idx].field_0
                                                        mem[_21022 + 32] = poolInfo[idx].field_256
                                                        mem[_21022 + 64] = poolInfo[idx].field_512
                                                        mem[_21022 + 96] = poolInfo[idx].field_768
                                                    else:
                                                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                        poolInfo[idx].field_512 = block.timestamp
                                                        require idx < poolInfo.length
                                                        mem[0] = 4
                                                        _21245 = mem[64]
                                                        mem[64] = mem[64] + 128
                                                        mem[_21245] = poolInfo[idx].field_0
                                                        mem[_21245 + 32] = poolInfo[idx].field_256
                                                        mem[_21245 + 64] = poolInfo[idx].field_512
                                                        mem[_21245 + 96] = poolInfo[idx].field_768
                                                else:
                                                    if (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond) != poolInfo[idx].field_256:
                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                    if totalAllocPoint <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalAllocPoint
                                                    if not (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint:
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                        poolInfo[idx].field_512 = block.timestamp
                                                        require idx < poolInfo.length
                                                        mem[0] = 4
                                                        _21240 = mem[64]
                                                        mem[64] = mem[64] + 128
                                                        mem[_21240] = poolInfo[idx].field_0
                                                        mem[_21240 + 32] = poolInfo[idx].field_256
                                                        mem[_21240 + 64] = poolInfo[idx].field_512
                                                        mem[_21240 + 96] = poolInfo[idx].field_768
                                                    else:
                                                        if 10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if (10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_768 += 10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                                                        poolInfo[idx].field_512 = block.timestamp
                                                        require idx < poolInfo.length
                                                        mem[0] = 4
                                                        _21486 = mem[64]
                                                        mem[64] = mem[64] + 128
                                                        mem[_21486] = poolInfo[idx].field_0
                                                        mem[_21486 + 32] = poolInfo[idx].field_256
                                                        mem[_21486 + 64] = poolInfo[idx].field_512
                                                        mem[_21486 + 96] = poolInfo[idx].field_768
                                mem[0] = msg.sender
                                mem[32] = sha3(idx, 6)
                                if not userInfo[idx][msg.sender].field_0:
                                    if userInfo[idx][msg.sender].field_256 > 0:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if -userInfo[idx][msg.sender].field_256 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                else:
                                    if poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / userInfo[idx][msg.sender].field_0 != poolInfo[idx].field_768:
                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    if userInfo[idx][msg.sender].field_256 > poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if (poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12) - userInfo[idx][msg.sender].field_256 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                if not userInfo[idx][msg.sender].field_0:
                                    userInfo[idx][msg.sender].field_256 = 0
                                else:
                                    if poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / userInfo[idx][msg.sender].field_0 != poolInfo[idx].field_768:
                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    userInfo[idx][msg.sender].field_256 = poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12
                    else:
                        if not ext_call.return_data[0]:
                            if not userInfo[idx][address(msg.sender)].field_0:
                                if userInfo[idx][address(msg.sender)].field_256 > 0:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if -userInfo[idx][address(msg.sender)].field_256 > 0:
                                    require idx < poolInfo.length
                                    if block.timestamp <= poolInfo[idx].field_512:
                                        require idx < poolInfo.length
                                        mem[0] = 4
                                        _17863 = mem[64]
                                        mem[64] = mem[64] + 128
                                        mem[_17863] = poolInfo[idx].field_0
                                        mem[_17863 + 32] = poolInfo[idx].field_256
                                        mem[_17863 + 64] = poolInfo[idx].field_512
                                        mem[_17863 + 96] = poolInfo[idx].field_768
                                    else:
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(poolInfo[idx].field_0)
                                        staticcall poolInfo[idx].field_0.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            poolInfo[idx].field_512 = block.timestamp
                                            require idx < poolInfo.length
                                            mem[0] = 4
                                            _18099 = mem[64]
                                            mem[64] = mem[64] + 128
                                            mem[_18099] = poolInfo[idx].field_0
                                            mem[_18099 + 32] = poolInfo[idx].field_256
                                            mem[_18099 + 64] = poolInfo[idx].field_512
                                            mem[_18099 + 96] = poolInfo[idx].field_768
                                        else:
                                            if not totalAllocPoint:
                                                poolInfo[idx].field_512 = block.timestamp
                                                require idx < poolInfo.length
                                                mem[0] = 4
                                                _18185 = mem[64]
                                                mem[64] = mem[64] + 128
                                                mem[_18185] = poolInfo[idx].field_0
                                                mem[_18185 + 32] = poolInfo[idx].field_256
                                                mem[_18185 + 64] = poolInfo[idx].field_512
                                                mem[_18185 + 96] = poolInfo[idx].field_768
                                            else:
                                                if poolInfo[idx].field_512 > block.timestamp:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if not block.timestamp - poolInfo[idx].field_512:
                                                    if totalAllocPoint <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalAllocPoint
                                                    if not 0 / totalAllocPoint:
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                        poolInfo[idx].field_512 = block.timestamp
                                                        require idx < poolInfo.length
                                                        mem[0] = 4
                                                        _20846 = mem[64]
                                                        mem[64] = mem[64] + 128
                                                        mem[_20846] = poolInfo[idx].field_0
                                                        mem[_20846 + 32] = poolInfo[idx].field_256
                                                        mem[_20846 + 64] = poolInfo[idx].field_512
                                                        mem[_20846 + 96] = poolInfo[idx].field_768
                                                    else:
                                                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                        poolInfo[idx].field_512 = block.timestamp
                                                        require idx < poolInfo.length
                                                        mem[0] = 4
                                                        _21054 = mem[64]
                                                        mem[64] = mem[64] + 128
                                                        mem[_21054] = poolInfo[idx].field_0
                                                        mem[_21054 + 32] = poolInfo[idx].field_256
                                                        mem[_21054 + 64] = poolInfo[idx].field_512
                                                        mem[_21054 + 96] = poolInfo[idx].field_768
                                                else:
                                                    if (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond) / block.timestamp - poolInfo[idx].field_512 != rewardsPerSecond:
                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                    if not (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond):
                                                        if totalAllocPoint <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require totalAllocPoint
                                                        if not 0 / totalAllocPoint:
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                            poolInfo[idx].field_512 = block.timestamp
                                                            require idx < poolInfo.length
                                                            mem[0] = 4
                                                            _21049 = mem[64]
                                                            mem[64] = mem[64] + 128
                                                            mem[_21049] = poolInfo[idx].field_0
                                                            mem[_21049 + 32] = poolInfo[idx].field_256
                                                            mem[_21049 + 64] = poolInfo[idx].field_512
                                                            mem[_21049 + 96] = poolInfo[idx].field_768
                                                        else:
                                                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                            poolInfo[idx].field_512 = block.timestamp
                                                            require idx < poolInfo.length
                                                            mem[0] = 4
                                                            _21270 = mem[64]
                                                            mem[64] = mem[64] + 128
                                                            mem[_21270] = poolInfo[idx].field_0
                                                            mem[_21270 + 32] = poolInfo[idx].field_256
                                                            mem[_21270 + 64] = poolInfo[idx].field_512
                                                            mem[_21270 + 96] = poolInfo[idx].field_768
                                                    else:
                                                        if (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond) != poolInfo[idx].field_256:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                        if totalAllocPoint <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require totalAllocPoint
                                                        if not (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint:
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                            poolInfo[idx].field_512 = block.timestamp
                                                            require idx < poolInfo.length
                                                            mem[0] = 4
                                                            _21265 = mem[64]
                                                            mem[64] = mem[64] + 128
                                                            mem[_21265] = poolInfo[idx].field_0
                                                            mem[_21265 + 32] = poolInfo[idx].field_256
                                                            mem[_21265 + 64] = poolInfo[idx].field_512
                                                            mem[_21265 + 96] = poolInfo[idx].field_768
                                                        else:
                                                            if 10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                                                            poolInfo[idx].field_512 = block.timestamp
                                                            require idx < poolInfo.length
                                                            mem[0] = 4
                                                            _21503 = mem[64]
                                                            mem[64] = mem[64] + 128
                                                            mem[_21503] = poolInfo[idx].field_0
                                                            mem[_21503 + 32] = poolInfo[idx].field_256
                                                            mem[_21503 + 64] = poolInfo[idx].field_512
                                                            mem[_21503 + 96] = poolInfo[idx].field_768
                                    mem[0] = msg.sender
                                    mem[32] = sha3(idx, 6)
                                    if not userInfo[idx][msg.sender].field_0:
                                        if userInfo[idx][msg.sender].field_256 > 0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if -userInfo[idx][msg.sender].field_256 < 0:
                                            revert with 0, 'SafeMath: addition overflow'
                                    else:
                                        if poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / userInfo[idx][msg.sender].field_0 != poolInfo[idx].field_768:
                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if userInfo[idx][msg.sender].field_256 > poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if (poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12) - userInfo[idx][msg.sender].field_256 < 0:
                                            revert with 0, 'SafeMath: addition overflow'
                                    if not userInfo[idx][msg.sender].field_0:
                                        userInfo[idx][msg.sender].field_256 = 0
                                    else:
                                        if poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / userInfo[idx][msg.sender].field_0 != poolInfo[idx].field_768:
                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        userInfo[idx][msg.sender].field_256 = poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12
                            else:
                                if poolInfo[idx].field_768 * userInfo[idx][address(msg.sender)].field_0 / userInfo[idx][address(msg.sender)].field_0 != poolInfo[idx].field_768:
                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                if userInfo[idx][address(msg.sender)].field_256 > poolInfo[idx].field_768 * userInfo[idx][address(msg.sender)].field_0 / 10^12:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if (poolInfo[idx].field_768 * userInfo[idx][address(msg.sender)].field_0 / 10^12) - userInfo[idx][address(msg.sender)].field_256 > 0:
                                    require idx < poolInfo.length
                                    if block.timestamp <= poolInfo[idx].field_512:
                                        require idx < poolInfo.length
                                        mem[0] = 4
                                        _17909 = mem[64]
                                        mem[64] = mem[64] + 128
                                        mem[_17909] = poolInfo[idx].field_0
                                        mem[_17909 + 32] = poolInfo[idx].field_256
                                        mem[_17909 + 64] = poolInfo[idx].field_512
                                        mem[_17909 + 96] = poolInfo[idx].field_768
                                    else:
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(poolInfo[idx].field_0)
                                        staticcall poolInfo[idx].field_0.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            poolInfo[idx].field_512 = block.timestamp
                                            require idx < poolInfo.length
                                            mem[0] = 4
                                            _18178 = mem[64]
                                            mem[64] = mem[64] + 128
                                            mem[_18178] = poolInfo[idx].field_0
                                            mem[_18178 + 32] = poolInfo[idx].field_256
                                            mem[_18178 + 64] = poolInfo[idx].field_512
                                            mem[_18178 + 96] = poolInfo[idx].field_768
                                        else:
                                            if not totalAllocPoint:
                                                poolInfo[idx].field_512 = block.timestamp
                                                require idx < poolInfo.length
                                                mem[0] = 4
                                                _18264 = mem[64]
                                                mem[64] = mem[64] + 128
                                                mem[_18264] = poolInfo[idx].field_0
                                                mem[_18264 + 32] = poolInfo[idx].field_256
                                                mem[_18264 + 64] = poolInfo[idx].field_512
                                                mem[_18264 + 96] = poolInfo[idx].field_768
                                            else:
                                                if poolInfo[idx].field_512 > block.timestamp:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if not block.timestamp - poolInfo[idx].field_512:
                                                    if totalAllocPoint <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalAllocPoint
                                                    if not 0 / totalAllocPoint:
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                        poolInfo[idx].field_512 = block.timestamp
                                                        require idx < poolInfo.length
                                                        mem[0] = 4
                                                        _21044 = mem[64]
                                                        mem[64] = mem[64] + 128
                                                        mem[_21044] = poolInfo[idx].field_0
                                                        mem[_21044 + 32] = poolInfo[idx].field_256
                                                        mem[_21044 + 64] = poolInfo[idx].field_512
                                                        mem[_21044 + 96] = poolInfo[idx].field_768
                                                    else:
                                                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                        poolInfo[idx].field_512 = block.timestamp
                                                        require idx < poolInfo.length
                                                        mem[0] = 4
                                                        _21260 = mem[64]
                                                        mem[64] = mem[64] + 128
                                                        mem[_21260] = poolInfo[idx].field_0
                                                        mem[_21260 + 32] = poolInfo[idx].field_256
                                                        mem[_21260 + 64] = poolInfo[idx].field_512
                                                        mem[_21260 + 96] = poolInfo[idx].field_768
                                                else:
                                                    if (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond) / block.timestamp - poolInfo[idx].field_512 != rewardsPerSecond:
                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                    if not (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond):
                                                        if totalAllocPoint <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require totalAllocPoint
                                                        if not 0 / totalAllocPoint:
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                            poolInfo[idx].field_512 = block.timestamp
                                                            require idx < poolInfo.length
                                                            mem[0] = 4
                                                            _21255 = mem[64]
                                                            mem[64] = mem[64] + 128
                                                            mem[_21255] = poolInfo[idx].field_0
                                                            mem[_21255 + 32] = poolInfo[idx].field_256
                                                            mem[_21255 + 64] = poolInfo[idx].field_512
                                                            mem[_21255 + 96] = poolInfo[idx].field_768
                                                        else:
                                                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                            poolInfo[idx].field_512 = block.timestamp
                                                            require idx < poolInfo.length
                                                            mem[0] = 4
                                                            _21498 = mem[64]
                                                            mem[64] = mem[64] + 128
                                                            mem[_21498] = poolInfo[idx].field_0
                                                            mem[_21498 + 32] = poolInfo[idx].field_256
                                                            mem[_21498 + 64] = poolInfo[idx].field_512
                                                            mem[_21498 + 96] = poolInfo[idx].field_768
                                                    else:
                                                        if (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond) != poolInfo[idx].field_256:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                        if totalAllocPoint <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require totalAllocPoint
                                                        if not (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint:
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                            poolInfo[idx].field_512 = block.timestamp
                                                            require idx < poolInfo.length
                                                            mem[0] = 4
                                                            _21493 = mem[64]
                                                            mem[64] = mem[64] + 128
                                                            mem[_21493] = poolInfo[idx].field_0
                                                            mem[_21493 + 32] = poolInfo[idx].field_256
                                                            mem[_21493 + 64] = poolInfo[idx].field_512
                                                            mem[_21493 + 96] = poolInfo[idx].field_768
                                                        else:
                                                            if 10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                                                            poolInfo[idx].field_512 = block.timestamp
                                                            require idx < poolInfo.length
                                                            mem[0] = 4
                                                            _21753 = mem[64]
                                                            mem[64] = mem[64] + 128
                                                            mem[_21753] = poolInfo[idx].field_0
                                                            mem[_21753 + 32] = poolInfo[idx].field_256
                                                            mem[_21753 + 64] = poolInfo[idx].field_512
                                                            mem[_21753 + 96] = poolInfo[idx].field_768
                                    mem[0] = msg.sender
                                    mem[32] = sha3(idx, 6)
                                    if not userInfo[idx][msg.sender].field_0:
                                        if userInfo[idx][msg.sender].field_256 > 0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if -userInfo[idx][msg.sender].field_256 < 0:
                                            revert with 0, 'SafeMath: addition overflow'
                                    else:
                                        if poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / userInfo[idx][msg.sender].field_0 != poolInfo[idx].field_768:
                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if userInfo[idx][msg.sender].field_256 > poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if (poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12) - userInfo[idx][msg.sender].field_256 < 0:
                                            revert with 0, 'SafeMath: addition overflow'
                                    if not userInfo[idx][msg.sender].field_0:
                                        userInfo[idx][msg.sender].field_256 = 0
                                    else:
                                        if poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / userInfo[idx][msg.sender].field_0 != poolInfo[idx].field_768:
                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        userInfo[idx][msg.sender].field_256 = poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12
                        else:
                            if not totalAllocPoint:
                                if not userInfo[idx][address(msg.sender)].field_0:
                                    if userInfo[idx][address(msg.sender)].field_256 > 0:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if -userInfo[idx][address(msg.sender)].field_256 > 0:
                                        require idx < poolInfo.length
                                        if block.timestamp <= poolInfo[idx].field_512:
                                            require idx < poolInfo.length
                                            mem[0] = 4
                                            _17916 = mem[64]
                                            mem[64] = mem[64] + 128
                                            mem[_17916] = poolInfo[idx].field_0
                                            mem[_17916 + 32] = poolInfo[idx].field_256
                                            mem[_17916 + 64] = poolInfo[idx].field_512
                                            mem[_17916 + 96] = poolInfo[idx].field_768
                                        else:
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(poolInfo[idx].field_0)
                                            staticcall poolInfo[idx].field_0.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                poolInfo[idx].field_512 = block.timestamp
                                                require idx < poolInfo.length
                                                mem[0] = 4
                                                _18192 = mem[64]
                                                mem[64] = mem[64] + 128
                                                mem[_18192] = poolInfo[idx].field_0
                                                mem[_18192 + 32] = poolInfo[idx].field_256
                                                mem[_18192 + 64] = poolInfo[idx].field_512
                                                mem[_18192 + 96] = poolInfo[idx].field_768
                                            else:
                                                if not totalAllocPoint:
                                                    poolInfo[idx].field_512 = block.timestamp
                                                    require idx < poolInfo.length
                                                    mem[0] = 4
                                                    _18276 = mem[64]
                                                    mem[64] = mem[64] + 128
                                                    mem[_18276] = poolInfo[idx].field_0
                                                    mem[_18276 + 32] = poolInfo[idx].field_256
                                                    mem[_18276 + 64] = poolInfo[idx].field_512
                                                    mem[_18276 + 96] = poolInfo[idx].field_768
                                                else:
                                                    if poolInfo[idx].field_512 > block.timestamp:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if not block.timestamp - poolInfo[idx].field_512:
                                                        if totalAllocPoint <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require totalAllocPoint
                                                        if not 0 / totalAllocPoint:
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                            poolInfo[idx].field_512 = block.timestamp
                                                            require idx < poolInfo.length
                                                            mem[0] = 4
                                                            _21065 = mem[64]
                                                            mem[64] = mem[64] + 128
                                                            mem[_21065] = poolInfo[idx].field_0
                                                            mem[_21065 + 32] = poolInfo[idx].field_256
                                                            mem[_21065 + 64] = poolInfo[idx].field_512
                                                            mem[_21065 + 96] = poolInfo[idx].field_768
                                                        else:
                                                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                            poolInfo[idx].field_512 = block.timestamp
                                                            require idx < poolInfo.length
                                                            mem[0] = 4
                                                            _21287 = mem[64]
                                                            mem[64] = mem[64] + 128
                                                            mem[_21287] = poolInfo[idx].field_0
                                                            mem[_21287 + 32] = poolInfo[idx].field_256
                                                            mem[_21287 + 64] = poolInfo[idx].field_512
                                                            mem[_21287 + 96] = poolInfo[idx].field_768
                                                    else:
                                                        if (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond) / block.timestamp - poolInfo[idx].field_512 != rewardsPerSecond:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                        if not (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond):
                                                            if totalAllocPoint <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require totalAllocPoint
                                                            if not 0 / totalAllocPoint:
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                                poolInfo[idx].field_512 = block.timestamp
                                                                require idx < poolInfo.length
                                                                mem[0] = 4
                                                                _21282 = mem[64]
                                                                mem[64] = mem[64] + 128
                                                                mem[_21282] = poolInfo[idx].field_0
                                                                mem[_21282 + 32] = poolInfo[idx].field_256
                                                                mem[_21282 + 64] = poolInfo[idx].field_512
                                                                mem[_21282 + 96] = poolInfo[idx].field_768
                                                            else:
                                                                if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                                poolInfo[idx].field_512 = block.timestamp
                                                                require idx < poolInfo.length
                                                                mem[0] = 4
                                                                _21523 = mem[64]
                                                                mem[64] = mem[64] + 128
                                                                mem[_21523] = poolInfo[idx].field_0
                                                                mem[_21523 + 32] = poolInfo[idx].field_256
                                                                mem[_21523 + 64] = poolInfo[idx].field_512
                                                                mem[_21523 + 96] = poolInfo[idx].field_768
                                                        else:
                                                            if (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond) != poolInfo[idx].field_256:
                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                            if totalAllocPoint <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require totalAllocPoint
                                                            if not (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint:
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                                poolInfo[idx].field_512 = block.timestamp
                                                                require idx < poolInfo.length
                                                                mem[0] = 4
                                                                _21518 = mem[64]
                                                                mem[64] = mem[64] + 128
                                                                mem[_21518] = poolInfo[idx].field_0
                                                                mem[_21518 + 32] = poolInfo[idx].field_256
                                                                mem[_21518 + 64] = poolInfo[idx].field_512
                                                                mem[_21518 + 96] = poolInfo[idx].field_768
                                                            else:
                                                                if 10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                                                                poolInfo[idx].field_512 = block.timestamp
                                                                require idx < poolInfo.length
                                                                mem[0] = 4
                                                                _21770 = mem[64]
                                                                mem[64] = mem[64] + 128
                                                                mem[_21770] = poolInfo[idx].field_0
                                                                mem[_21770 + 32] = poolInfo[idx].field_256
                                                                mem[_21770 + 64] = poolInfo[idx].field_512
                                                                mem[_21770 + 96] = poolInfo[idx].field_768
                                        mem[0] = msg.sender
                                        mem[32] = sha3(idx, 6)
                                        if not userInfo[idx][msg.sender].field_0:
                                            if userInfo[idx][msg.sender].field_256 > 0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if -userInfo[idx][msg.sender].field_256 < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                        else:
                                            if poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / userInfo[idx][msg.sender].field_0 != poolInfo[idx].field_768:
                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if userInfo[idx][msg.sender].field_256 > poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if (poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12) - userInfo[idx][msg.sender].field_256 < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                        if not userInfo[idx][msg.sender].field_0:
                                            userInfo[idx][msg.sender].field_256 = 0
                                        else:
                                            if poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / userInfo[idx][msg.sender].field_0 != poolInfo[idx].field_768:
                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            userInfo[idx][msg.sender].field_256 = poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12
                                else:
                                    if poolInfo[idx].field_768 * userInfo[idx][address(msg.sender)].field_0 / userInfo[idx][address(msg.sender)].field_0 != poolInfo[idx].field_768:
                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    if userInfo[idx][address(msg.sender)].field_256 > poolInfo[idx].field_768 * userInfo[idx][address(msg.sender)].field_0 / 10^12:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if (poolInfo[idx].field_768 * userInfo[idx][address(msg.sender)].field_0 / 10^12) - userInfo[idx][address(msg.sender)].field_256 > 0:
                                        require idx < poolInfo.length
                                        if block.timestamp <= poolInfo[idx].field_512:
                                            require idx < poolInfo.length
                                            mem[0] = 4
                                            _17955 = mem[64]
                                            mem[64] = mem[64] + 128
                                            mem[_17955] = poolInfo[idx].field_0
                                            mem[_17955 + 32] = poolInfo[idx].field_256
                                            mem[_17955 + 64] = poolInfo[idx].field_512
                                            mem[_17955 + 96] = poolInfo[idx].field_768
                                        else:
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(poolInfo[idx].field_0)
                                            staticcall poolInfo[idx].field_0.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                poolInfo[idx].field_512 = block.timestamp
                                                require idx < poolInfo.length
                                                mem[0] = 4
                                                _18269 = mem[64]
                                                mem[64] = mem[64] + 128
                                                mem[_18269] = poolInfo[idx].field_0
                                                mem[_18269 + 32] = poolInfo[idx].field_256
                                                mem[_18269 + 64] = poolInfo[idx].field_512
                                                mem[_18269 + 96] = poolInfo[idx].field_768
                                            else:
                                                if not totalAllocPoint:
                                                    poolInfo[idx].field_512 = block.timestamp
                                                    require idx < poolInfo.length
                                                    mem[0] = 4
                                                    _18339 = mem[64]
                                                    mem[64] = mem[64] + 128
                                                    mem[_18339] = poolInfo[idx].field_0
                                                    mem[_18339 + 32] = poolInfo[idx].field_256
                                                    mem[_18339 + 64] = poolInfo[idx].field_512
                                                    mem[_18339 + 96] = poolInfo[idx].field_768
                                                else:
                                                    if poolInfo[idx].field_512 > block.timestamp:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if not block.timestamp - poolInfo[idx].field_512:
                                                        if totalAllocPoint <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require totalAllocPoint
                                                        if not 0 / totalAllocPoint:
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                            poolInfo[idx].field_512 = block.timestamp
                                                            require idx < poolInfo.length
                                                            mem[0] = 4
                                                            _21277 = mem[64]
                                                            mem[64] = mem[64] + 128
                                                            mem[_21277] = poolInfo[idx].field_0
                                                            mem[_21277 + 32] = poolInfo[idx].field_256
                                                            mem[_21277 + 64] = poolInfo[idx].field_512
                                                            mem[_21277 + 96] = poolInfo[idx].field_768
                                                        else:
                                                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                            poolInfo[idx].field_512 = block.timestamp
                                                            require idx < poolInfo.length
                                                            mem[0] = 4
                                                            _21513 = mem[64]
                                                            mem[64] = mem[64] + 128
                                                            mem[_21513] = poolInfo[idx].field_0
                                                            mem[_21513 + 32] = poolInfo[idx].field_256
                                                            mem[_21513 + 64] = poolInfo[idx].field_512
                                                            mem[_21513 + 96] = poolInfo[idx].field_768
                                                    else:
                                                        if (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond) / block.timestamp - poolInfo[idx].field_512 != rewardsPerSecond:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                        if not (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond):
                                                            if totalAllocPoint <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require totalAllocPoint
                                                            if not 0 / totalAllocPoint:
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                                poolInfo[idx].field_512 = block.timestamp
                                                                require idx < poolInfo.length
                                                                mem[0] = 4
                                                                _21508 = mem[64]
                                                                mem[64] = mem[64] + 128
                                                                mem[_21508] = poolInfo[idx].field_0
                                                                mem[_21508 + 32] = poolInfo[idx].field_256
                                                                mem[_21508 + 64] = poolInfo[idx].field_512
                                                                mem[_21508 + 96] = poolInfo[idx].field_768
                                                            else:
                                                                if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                                poolInfo[idx].field_512 = block.timestamp
                                                                require idx < poolInfo.length
                                                                mem[0] = 4
                                                                _21765 = mem[64]
                                                                mem[64] = mem[64] + 128
                                                                mem[_21765] = poolInfo[idx].field_0
                                                                mem[_21765 + 32] = poolInfo[idx].field_256
                                                                mem[_21765 + 64] = poolInfo[idx].field_512
                                                                mem[_21765 + 96] = poolInfo[idx].field_768
                                                        else:
                                                            if (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond) != poolInfo[idx].field_256:
                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                            if totalAllocPoint <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require totalAllocPoint
                                                            if not (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint:
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                                poolInfo[idx].field_512 = block.timestamp
                                                                require idx < poolInfo.length
                                                                mem[0] = 4
                                                                _21760 = mem[64]
                                                                mem[64] = mem[64] + 128
                                                                mem[_21760] = poolInfo[idx].field_0
                                                                mem[_21760 + 32] = poolInfo[idx].field_256
                                                                mem[_21760 + 64] = poolInfo[idx].field_512
                                                                mem[_21760 + 96] = poolInfo[idx].field_768
                                                            else:
                                                                if 10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                                                                poolInfo[idx].field_512 = block.timestamp
                                                                require idx < poolInfo.length
                                                                mem[0] = 4
                                                                _22011 = mem[64]
                                                                mem[64] = mem[64] + 128
                                                                mem[_22011] = poolInfo[idx].field_0
                                                                mem[_22011 + 32] = poolInfo[idx].field_256
                                                                mem[_22011 + 64] = poolInfo[idx].field_512
                                                                mem[_22011 + 96] = poolInfo[idx].field_768
                                        mem[0] = msg.sender
                                        mem[32] = sha3(idx, 6)
                                        if not userInfo[idx][msg.sender].field_0:
                                            if userInfo[idx][msg.sender].field_256 > 0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if -userInfo[idx][msg.sender].field_256 < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                        else:
                                            if poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / userInfo[idx][msg.sender].field_0 != poolInfo[idx].field_768:
                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if userInfo[idx][msg.sender].field_256 > poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if (poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12) - userInfo[idx][msg.sender].field_256 < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                        if not userInfo[idx][msg.sender].field_0:
                                            userInfo[idx][msg.sender].field_256 = 0
                                        else:
                                            if poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / userInfo[idx][msg.sender].field_0 != poolInfo[idx].field_768:
                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            userInfo[idx][msg.sender].field_256 = poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12
                            else:
                                if poolInfo[idx].field_512 > block.timestamp:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if not block.timestamp - poolInfo[idx].field_512:
                                    if totalAllocPoint <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require totalAllocPoint
                                    if not 0 / totalAllocPoint:
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if not userInfo[idx][address(msg.sender)].field_0:
                                            if userInfo[idx][address(msg.sender)].field_256 > 0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if -userInfo[idx][address(msg.sender)].field_256 > 0:
                                                require idx < poolInfo.length
                                                if block.timestamp <= poolInfo[idx].field_512:
                                                    require idx < poolInfo.length
                                                    mem[0] = 4
                                                    _20387 = mem[64]
                                                    mem[64] = mem[64] + 128
                                                    mem[_20387] = poolInfo[idx].field_0
                                                    mem[_20387 + 32] = poolInfo[idx].field_256
                                                    mem[_20387 + 64] = poolInfo[idx].field_512
                                                    mem[_20387 + 96] = poolInfo[idx].field_768
                                                else:
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(poolInfo[idx].field_0)
                                                    staticcall poolInfo[idx].field_0.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if not ext_call.return_data[0]:
                                                        poolInfo[idx].field_512 = block.timestamp
                                                        require idx < poolInfo.length
                                                        mem[0] = 4
                                                        _21298 = mem[64]
                                                        mem[64] = mem[64] + 128
                                                        mem[_21298] = poolInfo[idx].field_0
                                                        mem[_21298 + 32] = poolInfo[idx].field_256
                                                        mem[_21298 + 64] = poolInfo[idx].field_512
                                                        mem[_21298 + 96] = poolInfo[idx].field_768
                                                    else:
                                                        if not totalAllocPoint:
                                                            poolInfo[idx].field_512 = block.timestamp
                                                            require idx < poolInfo.length
                                                            mem[0] = 4
                                                            _21557 = mem[64]
                                                            mem[64] = mem[64] + 128
                                                            mem[_21557] = poolInfo[idx].field_0
                                                            mem[_21557 + 32] = poolInfo[idx].field_256
                                                            mem[_21557 + 64] = poolInfo[idx].field_512
                                                            mem[_21557 + 96] = poolInfo[idx].field_768
                                                        else:
                                                            if poolInfo[idx].field_512 > block.timestamp:
                                                                revert with 0, 'SafeMath: subtraction overflow'
                                                            if not block.timestamp - poolInfo[idx].field_512:
                                                                if totalAllocPoint <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require totalAllocPoint
                                                                if not 0 / totalAllocPoint:
                                                                    if ext_call.return_data[0] <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    require ext_call.return_data[0]
                                                                    if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                                    poolInfo[idx].field_512 = block.timestamp
                                                                    require idx < poolInfo.length
                                                                    mem[0] = 4
                                                                    _28275 = mem[64]
                                                                    mem[64] = mem[64] + 128
                                                                    mem[_28275] = poolInfo[idx].field_0
                                                                    mem[_28275 + 32] = poolInfo[idx].field_256
                                                                    mem[_28275 + 64] = poolInfo[idx].field_512
                                                                    mem[_28275 + 96] = poolInfo[idx].field_768
                                                                else:
                                                                    if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                    if ext_call.return_data[0] <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    require ext_call.return_data[0]
                                                                    if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                                    poolInfo[idx].field_512 = block.timestamp
                                                                    require idx < poolInfo.length
                                                                    mem[0] = 4
                                                                    _28511 = mem[64]
                                                                    mem[64] = mem[64] + 128
                                                                    mem[_28511] = poolInfo[idx].field_0
                                                                    mem[_28511 + 32] = poolInfo[idx].field_256
                                                                    mem[_28511 + 64] = poolInfo[idx].field_512
                                                                    mem[_28511 + 96] = poolInfo[idx].field_768
                                                            else:
                                                                if (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond) / block.timestamp - poolInfo[idx].field_512 != rewardsPerSecond:
                                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                if not (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond):
                                                                    if totalAllocPoint <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    require totalAllocPoint
                                                                    if not 0 / totalAllocPoint:
                                                                        if ext_call.return_data[0] <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        require ext_call.return_data[0]
                                                                        if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                            revert with 0, 'SafeMath: addition overflow'
                                                                        poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                                        poolInfo[idx].field_512 = block.timestamp
                                                                        require idx < poolInfo.length
                                                                        mem[0] = 4
                                                                        _28506 = mem[64]
                                                                        mem[64] = mem[64] + 128
                                                                        mem[_28506] = poolInfo[idx].field_0
                                                                        mem[_28506 + 32] = poolInfo[idx].field_256
                                                                        mem[_28506 + 64] = poolInfo[idx].field_512
                                                                        mem[_28506 + 96] = poolInfo[idx].field_768
                                                                    else:
                                                                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                        if ext_call.return_data[0] <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        require ext_call.return_data[0]
                                                                        if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                            revert with 0, 'SafeMath: addition overflow'
                                                                        poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                                        poolInfo[idx].field_512 = block.timestamp
                                                                        require idx < poolInfo.length
                                                                        mem[0] = 4
                                                                        _28817 = mem[64]
                                                                        mem[64] = mem[64] + 128
                                                                        mem[_28817] = poolInfo[idx].field_0
                                                                        mem[_28817 + 32] = poolInfo[idx].field_256
                                                                        mem[_28817 + 64] = poolInfo[idx].field_512
                                                                        mem[_28817 + 96] = poolInfo[idx].field_768
                                                                else:
                                                                    if (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond) != poolInfo[idx].field_256:
                                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                    if totalAllocPoint <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    require totalAllocPoint
                                                                    if not (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint:
                                                                        if ext_call.return_data[0] <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        require ext_call.return_data[0]
                                                                        if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                            revert with 0, 'SafeMath: addition overflow'
                                                                        poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                                        poolInfo[idx].field_512 = block.timestamp
                                                                        require idx < poolInfo.length
                                                                        mem[0] = 4
                                                                        _28812 = mem[64]
                                                                        mem[64] = mem[64] + 128
                                                                        mem[_28812] = poolInfo[idx].field_0
                                                                        mem[_28812 + 32] = poolInfo[idx].field_256
                                                                        mem[_28812 + 64] = poolInfo[idx].field_512
                                                                        mem[_28812 + 96] = poolInfo[idx].field_768
                                                                    else:
                                                                        if 10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                        if ext_call.return_data[0] <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        require ext_call.return_data[0]
                                                                        if (10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                            revert with 0, 'SafeMath: addition overflow'
                                                                        poolInfo[idx].field_768 += 10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                                                                        poolInfo[idx].field_512 = block.timestamp
                                                                        require idx < poolInfo.length
                                                                        mem[0] = 4
                                                                        _29179 = mem[64]
                                                                        mem[64] = mem[64] + 128
                                                                        mem[_29179] = poolInfo[idx].field_0
                                                                        mem[_29179 + 32] = poolInfo[idx].field_256
                                                                        mem[_29179 + 64] = poolInfo[idx].field_512
                                                                        mem[_29179 + 96] = poolInfo[idx].field_768
                                                mem[0] = msg.sender
                                                mem[32] = sha3(idx, 6)
                                                if not userInfo[idx][msg.sender].field_0:
                                                    if userInfo[idx][msg.sender].field_256 > 0:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if -userInfo[idx][msg.sender].field_256 < 0:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                else:
                                                    if poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / userInfo[idx][msg.sender].field_0 != poolInfo[idx].field_768:
                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                    if userInfo[idx][msg.sender].field_256 > poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if (poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12) - userInfo[idx][msg.sender].field_256 < 0:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                if not userInfo[idx][msg.sender].field_0:
                                                    userInfo[idx][msg.sender].field_256 = 0
                                                else:
                                                    if poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / userInfo[idx][msg.sender].field_0 != poolInfo[idx].field_768:
                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                    userInfo[idx][msg.sender].field_256 = poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12
                                        else:
                                            if (0 / ext_call.return_data[0] * userInfo[idx][address(msg.sender)].field_0) + (poolInfo[idx].field_768 * userInfo[idx][address(msg.sender)].field_0) / userInfo[idx][address(msg.sender)].field_0 != (0 / ext_call.return_data[0]) + poolInfo[idx].field_768:
                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if userInfo[idx][address(msg.sender)].field_256 > (0 / ext_call.return_data[0] * userInfo[idx][address(msg.sender)].field_0) + (poolInfo[idx].field_768 * userInfo[idx][address(msg.sender)].field_0) / 10^12:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if ((0 / ext_call.return_data[0] * userInfo[idx][address(msg.sender)].field_0) + (poolInfo[idx].field_768 * userInfo[idx][address(msg.sender)].field_0) / 10^12) - userInfo[idx][address(msg.sender)].field_256 > 0:
                                                require idx < poolInfo.length
                                                if block.timestamp <= poolInfo[idx].field_512:
                                                    require idx < poolInfo.length
                                                    mem[0] = 4
                                                    _20528 = mem[64]
                                                    mem[64] = mem[64] + 128
                                                    mem[_20528] = poolInfo[idx].field_0
                                                    mem[_20528 + 32] = poolInfo[idx].field_256
                                                    mem[_20528 + 64] = poolInfo[idx].field_512
                                                    mem[_20528 + 96] = poolInfo[idx].field_768
                                                else:
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(poolInfo[idx].field_0)
                                                    staticcall poolInfo[idx].field_0.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if not ext_call.return_data[0]:
                                                        poolInfo[idx].field_512 = block.timestamp
                                                        require idx < poolInfo.length
                                                        mem[0] = 4
                                                        _21550 = mem[64]
                                                        mem[64] = mem[64] + 128
                                                        mem[_21550] = poolInfo[idx].field_0
                                                        mem[_21550 + 32] = poolInfo[idx].field_256
                                                        mem[_21550 + 64] = poolInfo[idx].field_512
                                                        mem[_21550 + 96] = poolInfo[idx].field_768
                                                    else:
                                                        if not totalAllocPoint:
                                                            poolInfo[idx].field_512 = block.timestamp
                                                            require idx < poolInfo.length
                                                            mem[0] = 4
                                                            _21819 = mem[64]
                                                            mem[64] = mem[64] + 128
                                                            mem[_21819] = poolInfo[idx].field_0
                                                            mem[_21819 + 32] = poolInfo[idx].field_256
                                                            mem[_21819 + 64] = poolInfo[idx].field_512
                                                            mem[_21819 + 96] = poolInfo[idx].field_768
                                                        else:
                                                            if poolInfo[idx].field_512 > block.timestamp:
                                                                revert with 0, 'SafeMath: subtraction overflow'
                                                            if not block.timestamp - poolInfo[idx].field_512:
                                                                if totalAllocPoint <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require totalAllocPoint
                                                                if not 0 / totalAllocPoint:
                                                                    if ext_call.return_data[0] <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    require ext_call.return_data[0]
                                                                    if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                                    poolInfo[idx].field_512 = block.timestamp
                                                                    require idx < poolInfo.length
                                                                    mem[0] = 4
                                                                    _28501 = mem[64]
                                                                    mem[64] = mem[64] + 128
                                                                    mem[_28501] = poolInfo[idx].field_0
                                                                    mem[_28501 + 32] = poolInfo[idx].field_256
                                                                    mem[_28501 + 64] = poolInfo[idx].field_512
                                                                    mem[_28501 + 96] = poolInfo[idx].field_768
                                                                else:
                                                                    if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                    if ext_call.return_data[0] <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    require ext_call.return_data[0]
                                                                    if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                                    poolInfo[idx].field_512 = block.timestamp
                                                                    require idx < poolInfo.length
                                                                    mem[0] = 4
                                                                    _28807 = mem[64]
                                                                    mem[64] = mem[64] + 128
                                                                    mem[_28807] = poolInfo[idx].field_0
                                                                    mem[_28807 + 32] = poolInfo[idx].field_256
                                                                    mem[_28807 + 64] = poolInfo[idx].field_512
                                                                    mem[_28807 + 96] = poolInfo[idx].field_768
                                                            else:
                                                                if (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond) / block.timestamp - poolInfo[idx].field_512 != rewardsPerSecond:
                                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                if not (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond):
                                                                    if totalAllocPoint <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    require totalAllocPoint
                                                                    if not 0 / totalAllocPoint:
                                                                        if ext_call.return_data[0] <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        require ext_call.return_data[0]
                                                                        if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                            revert with 0, 'SafeMath: addition overflow'
                                                                        poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                                        poolInfo[idx].field_512 = block.timestamp
                                                                        require idx < poolInfo.length
                                                                        mem[0] = 4
                                                                        _28802 = mem[64]
                                                                        mem[64] = mem[64] + 128
                                                                        mem[_28802] = poolInfo[idx].field_0
                                                                        mem[_28802 + 32] = poolInfo[idx].field_256
                                                                        mem[_28802 + 64] = poolInfo[idx].field_512
                                                                        mem[_28802 + 96] = poolInfo[idx].field_768
                                                                    else:
                                                                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                        if ext_call.return_data[0] <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        require ext_call.return_data[0]
                                                                        if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                            revert with 0, 'SafeMath: addition overflow'
                                                                        poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                                        poolInfo[idx].field_512 = block.timestamp
                                                                        require idx < poolInfo.length
                                                                        mem[0] = 4
                                                                        _29174 = mem[64]
                                                                        mem[64] = mem[64] + 128
                                                                        mem[_29174] = poolInfo[idx].field_0
                                                                        mem[_29174 + 32] = poolInfo[idx].field_256
                                                                        mem[_29174 + 64] = poolInfo[idx].field_512
                                                                        mem[_29174 + 96] = poolInfo[idx].field_768
                                                                else:
                                                                    if (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond) != poolInfo[idx].field_256:
                                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                    if totalAllocPoint <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    require totalAllocPoint
                                                                    if not (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint:
                                                                        if ext_call.return_data[0] <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        require ext_call.return_data[0]
                                                                        if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                            revert with 0, 'SafeMath: addition overflow'
                                                                        poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                                        poolInfo[idx].field_512 = block.timestamp
                                                                        require idx < poolInfo.length
                                                                        mem[0] = 4
                                                                        _29169 = mem[64]
                                                                        mem[64] = mem[64] + 128
                                                                        mem[_29169] = poolInfo[idx].field_0
                                                                        mem[_29169 + 32] = poolInfo[idx].field_256
                                                                        mem[_29169 + 64] = poolInfo[idx].field_512
                                                                        mem[_29169 + 96] = poolInfo[idx].field_768
                                                                    else:
                                                                        if 10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                        if ext_call.return_data[0] <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        require ext_call.return_data[0]
                                                                        if (10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                            revert with 0, 'SafeMath: addition overflow'
                                                                        poolInfo[idx].field_768 += 10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                                                                        poolInfo[idx].field_512 = block.timestamp
                                                                        require idx < poolInfo.length
                                                                        mem[0] = 4
                                                                        _29533 = mem[64]
                                                                        mem[64] = mem[64] + 128
                                                                        mem[_29533] = poolInfo[idx].field_0
                                                                        mem[_29533 + 32] = poolInfo[idx].field_256
                                                                        mem[_29533 + 64] = poolInfo[idx].field_512
                                                                        mem[_29533 + 96] = poolInfo[idx].field_768
                                                mem[0] = msg.sender
                                                mem[32] = sha3(idx, 6)
                                                if not userInfo[idx][msg.sender].field_0:
                                                    if userInfo[idx][msg.sender].field_256 > 0:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if -userInfo[idx][msg.sender].field_256 < 0:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                else:
                                                    if poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / userInfo[idx][msg.sender].field_0 != poolInfo[idx].field_768:
                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                    if userInfo[idx][msg.sender].field_256 > poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if (poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12) - userInfo[idx][msg.sender].field_256 < 0:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                if not userInfo[idx][msg.sender].field_0:
                                                    userInfo[idx][msg.sender].field_256 = 0
                                                else:
                                                    if poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / userInfo[idx][msg.sender].field_0 != poolInfo[idx].field_768:
                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                    userInfo[idx][msg.sender].field_256 = poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12
                                    else:
                                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if not userInfo[idx][address(msg.sender)].field_0:
                                            if userInfo[idx][address(msg.sender)].field_256 > 0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if -userInfo[idx][address(msg.sender)].field_256 > 0:
                                                require idx < poolInfo.length
                                                if block.timestamp <= poolInfo[idx].field_512:
                                                    require idx < poolInfo.length
                                                    mem[0] = 4
                                                    _20522 = mem[64]
                                                    mem[64] = mem[64] + 128
                                                    mem[_20522] = poolInfo[idx].field_0
                                                    mem[_20522 + 32] = poolInfo[idx].field_256
                                                    mem[_20522 + 64] = poolInfo[idx].field_512
                                                    mem[_20522 + 96] = poolInfo[idx].field_768
                                                else:
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(poolInfo[idx].field_0)
                                                    staticcall poolInfo[idx].field_0.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if not ext_call.return_data[0]:
                                                        poolInfo[idx].field_512 = block.timestamp
                                                        require idx < poolInfo.length
                                                        mem[0] = 4
                                                        _21543 = mem[64]
                                                        mem[64] = mem[64] + 128
                                                        mem[_21543] = poolInfo[idx].field_0
                                                        mem[_21543 + 32] = poolInfo[idx].field_256
                                                        mem[_21543 + 64] = poolInfo[idx].field_512
                                                        mem[_21543 + 96] = poolInfo[idx].field_768
                                                    else:
                                                        if not totalAllocPoint:
                                                            poolInfo[idx].field_512 = block.timestamp
                                                            require idx < poolInfo.length
                                                            mem[0] = 4
                                                            _21814 = mem[64]
                                                            mem[64] = mem[64] + 128
                                                            mem[_21814] = poolInfo[idx].field_0
                                                            mem[_21814 + 32] = poolInfo[idx].field_256
                                                            mem[_21814 + 64] = poolInfo[idx].field_512
                                                            mem[_21814 + 96] = poolInfo[idx].field_768
                                                        else:
                                                            if poolInfo[idx].field_512 > block.timestamp:
                                                                revert with 0, 'SafeMath: subtraction overflow'
                                                            if not block.timestamp - poolInfo[idx].field_512:
                                                                if totalAllocPoint <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require totalAllocPoint
                                                                if not 0 / totalAllocPoint:
                                                                    if ext_call.return_data[0] <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    require ext_call.return_data[0]
                                                                    if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                                    poolInfo[idx].field_512 = block.timestamp
                                                                    require idx < poolInfo.length
                                                                    mem[0] = 4
                                                                    _28494 = mem[64]
                                                                    mem[64] = mem[64] + 128
                                                                    mem[_28494] = poolInfo[idx].field_0
                                                                    mem[_28494 + 32] = poolInfo[idx].field_256
                                                                    mem[_28494 + 64] = poolInfo[idx].field_512
                                                                    mem[_28494 + 96] = poolInfo[idx].field_768
                                                                else:
                                                                    if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                    if ext_call.return_data[0] <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    require ext_call.return_data[0]
                                                                    if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                                    poolInfo[idx].field_512 = block.timestamp
                                                                    require idx < poolInfo.length
                                                                    mem[0] = 4
                                                                    _28797 = mem[64]
                                                                    mem[64] = mem[64] + 128
                                                                    mem[_28797] = poolInfo[idx].field_0
                                                                    mem[_28797 + 32] = poolInfo[idx].field_256
                                                                    mem[_28797 + 64] = poolInfo[idx].field_512
                                                                    mem[_28797 + 96] = poolInfo[idx].field_768
                                                            else:
                                                                if (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond) / block.timestamp - poolInfo[idx].field_512 != rewardsPerSecond:
                                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                if not (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond):
                                                                    if totalAllocPoint <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    require totalAllocPoint
                                                                    if not 0 / totalAllocPoint:
                                                                        if ext_call.return_data[0] <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        require ext_call.return_data[0]
                                                                        if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                            revert with 0, 'SafeMath: addition overflow'
                                                                        poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                                        poolInfo[idx].field_512 = block.timestamp
                                                                        require idx < poolInfo.length
                                                                        mem[0] = 4
                                                                        _28792 = mem[64]
                                                                        mem[64] = mem[64] + 128
                                                                        mem[_28792] = poolInfo[idx].field_0
                                                                        mem[_28792 + 32] = poolInfo[idx].field_256
                                                                        mem[_28792 + 64] = poolInfo[idx].field_512
                                                                        mem[_28792 + 96] = poolInfo[idx].field_768
                                                                    else:
                                                                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                        if ext_call.return_data[0] <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        require ext_call.return_data[0]
                                                                        if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                            revert with 0, 'SafeMath: addition overflow'
                                                                        poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                                        poolInfo[idx].field_512 = block.timestamp
                                                                        require idx < poolInfo.length
                                                                        mem[0] = 4
                                                                        _29164 = mem[64]
                                                                        mem[64] = mem[64] + 128
                                                                        mem[_29164] = poolInfo[idx].field_0
                                                                        mem[_29164 + 32] = poolInfo[idx].field_256
                                                                        mem[_29164 + 64] = poolInfo[idx].field_512
                                                                        mem[_29164 + 96] = poolInfo[idx].field_768
                                                                else:
                                                                    if (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond) != poolInfo[idx].field_256:
                                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                    if totalAllocPoint <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    require totalAllocPoint
                                                                    if not (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint:
                                                                        if ext_call.return_data[0] <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        require ext_call.return_data[0]
                                                                        if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                            revert with 0, 'SafeMath: addition overflow'
                                                                        poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                                        poolInfo[idx].field_512 = block.timestamp
                                                                        require idx < poolInfo.length
                                                                        mem[0] = 4
                                                                        _29159 = mem[64]
                                                                        mem[64] = mem[64] + 128
                                                                        mem[_29159] = poolInfo[idx].field_0
                                                                        mem[_29159 + 32] = poolInfo[idx].field_256
                                                                        mem[_29159 + 64] = poolInfo[idx].field_512
                                                                        mem[_29159 + 96] = poolInfo[idx].field_768
                                                                    else:
                                                                        if 10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                        if ext_call.return_data[0] <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        require ext_call.return_data[0]
                                                                        if (10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                            revert with 0, 'SafeMath: addition overflow'
                                                                        poolInfo[idx].field_768 += 10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                                                                        poolInfo[idx].field_512 = block.timestamp
                                                                        require idx < poolInfo.length
                                                                        mem[0] = 4
                                                                        _29528 = mem[64]
                                                                        mem[64] = mem[64] + 128
                                                                        mem[_29528] = poolInfo[idx].field_0
                                                                        mem[_29528 + 32] = poolInfo[idx].field_256
                                                                        mem[_29528 + 64] = poolInfo[idx].field_512
                                                                        mem[_29528 + 96] = poolInfo[idx].field_768
                                                mem[0] = msg.sender
                                                mem[32] = sha3(idx, 6)
                                                if not userInfo[idx][msg.sender].field_0:
                                                    if userInfo[idx][msg.sender].field_256 > 0:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if -userInfo[idx][msg.sender].field_256 < 0:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                else:
                                                    if poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / userInfo[idx][msg.sender].field_0 != poolInfo[idx].field_768:
                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                    if userInfo[idx][msg.sender].field_256 > poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if (poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12) - userInfo[idx][msg.sender].field_256 < 0:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                if not userInfo[idx][msg.sender].field_0:
                                                    userInfo[idx][msg.sender].field_256 = 0
                                                else:
                                                    if poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / userInfo[idx][msg.sender].field_0 != poolInfo[idx].field_768:
                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                    userInfo[idx][msg.sender].field_256 = poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12
                                        else:
                                            if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[idx][address(msg.sender)].field_0) + (poolInfo[idx].field_768 * userInfo[idx][address(msg.sender)].field_0) / userInfo[idx][address(msg.sender)].field_0 != (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768:
                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if userInfo[idx][address(msg.sender)].field_256 > (10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[idx][address(msg.sender)].field_0) + (poolInfo[idx].field_768 * userInfo[idx][address(msg.sender)].field_0) / 10^12:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if ((10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[idx][address(msg.sender)].field_0) + (poolInfo[idx].field_768 * userInfo[idx][address(msg.sender)].field_0) / 10^12) - userInfo[idx][address(msg.sender)].field_256 > 0:
                                                require idx < poolInfo.length
                                                if block.timestamp <= poolInfo[idx].field_512:
                                                    require idx < poolInfo.length
                                                    mem[0] = 4
                                                    _20690 = mem[64]
                                                    mem[64] = mem[64] + 128
                                                    mem[_20690] = poolInfo[idx].field_0
                                                    mem[_20690 + 32] = poolInfo[idx].field_256
                                                    mem[_20690 + 64] = poolInfo[idx].field_512
                                                    mem[_20690 + 96] = poolInfo[idx].field_768
                                                else:
                                                    mem[mem[64] + 4] = this.address
                                                    require ext_code.size(poolInfo[idx].field_0)
                                                    staticcall poolInfo[idx].field_0.0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    require return_data.size >= 32
                                                    if not ext_call.return_data[0]:
                                                        poolInfo[idx].field_512 = block.timestamp
                                                        require idx < poolInfo.length
                                                        mem[0] = 4
                                                        _21807 = mem[64]
                                                        mem[64] = mem[64] + 128
                                                        mem[_21807] = poolInfo[idx].field_0
                                                        mem[_21807 + 32] = poolInfo[idx].field_256
                                                        mem[_21807 + 64] = poolInfo[idx].field_512
                                                        mem[_21807 + 96] = poolInfo[idx].field_768
                                                    else:
                                                        if not totalAllocPoint:
                                                            poolInfo[idx].field_512 = block.timestamp
                                                            require idx < poolInfo.length
                                                            mem[0] = 4
                                                            _22056 = mem[64]
                                                            mem[64] = mem[64] + 128
                                                            mem[_22056] = poolInfo[idx].field_0
                                                            mem[_22056 + 32] = poolInfo[idx].field_256
                                                            mem[_22056 + 64] = poolInfo[idx].field_512
                                                            mem[_22056 + 96] = poolInfo[idx].field_768
                                                        else:
                                                            if poolInfo[idx].field_512 > block.timestamp:
                                                                revert with 0, 'SafeMath: subtraction overflow'
                                                            if not block.timestamp - poolInfo[idx].field_512:
                                                                if totalAllocPoint <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require totalAllocPoint
                                                                if not 0 / totalAllocPoint:
                                                                    if ext_call.return_data[0] <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    require ext_call.return_data[0]
                                                                    if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                                    poolInfo[idx].field_512 = block.timestamp
                                                                    require idx < poolInfo.length
                                                                    mem[0] = 4
                                                                    _28787 = mem[64]
                                                                    mem[64] = mem[64] + 128
                                                                    mem[_28787] = poolInfo[idx].field_0
                                                                    mem[_28787 + 32] = poolInfo[idx].field_256
                                                                    mem[_28787 + 64] = poolInfo[idx].field_512
                                                                    mem[_28787 + 96] = poolInfo[idx].field_768
                                                                else:
                                                                    if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                    if ext_call.return_data[0] <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    require ext_call.return_data[0]
                                                                    if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                                    poolInfo[idx].field_512 = block.timestamp
                                                                    require idx < poolInfo.length
                                                                    mem[0] = 4
                                                                    _29154 = mem[64]
                                                                    mem[64] = mem[64] + 128
                                                                    mem[_29154] = poolInfo[idx].field_0
                                                                    mem[_29154 + 32] = poolInfo[idx].field_256
                                                                    mem[_29154 + 64] = poolInfo[idx].field_512
                                                                    mem[_29154 + 96] = poolInfo[idx].field_768
                                                            else:
                                                                if (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond) / block.timestamp - poolInfo[idx].field_512 != rewardsPerSecond:
                                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                if not (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond):
                                                                    if totalAllocPoint <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    require totalAllocPoint
                                                                    if not 0 / totalAllocPoint:
                                                                        if ext_call.return_data[0] <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        require ext_call.return_data[0]
                                                                        if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                            revert with 0, 'SafeMath: addition overflow'
                                                                        poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                                        poolInfo[idx].field_512 = block.timestamp
                                                                        require idx < poolInfo.length
                                                                        mem[0] = 4
                                                                        _29149 = mem[64]
                                                                        mem[64] = mem[64] + 128
                                                                        mem[_29149] = poolInfo[idx].field_0
                                                                        mem[_29149 + 32] = poolInfo[idx].field_256
                                                                        mem[_29149 + 64] = poolInfo[idx].field_512
                                                                        mem[_29149 + 96] = poolInfo[idx].field_768
                                                                    else:
                                                                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                        if ext_call.return_data[0] <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        require ext_call.return_data[0]
                                                                        if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                            revert with 0, 'SafeMath: addition overflow'
                                                                        poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                                        poolInfo[idx].field_512 = block.timestamp
                                                                        require idx < poolInfo.length
                                                                        mem[0] = 4
                                                                        _29523 = mem[64]
                                                                        mem[64] = mem[64] + 128
                                                                        mem[_29523] = poolInfo[idx].field_0
                                                                        mem[_29523 + 32] = poolInfo[idx].field_256
                                                                        mem[_29523 + 64] = poolInfo[idx].field_512
                                                                        mem[_29523 + 96] = poolInfo[idx].field_768
                                                                else:
                                                                    if (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond) != poolInfo[idx].field_256:
                                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                    if totalAllocPoint <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    require totalAllocPoint
                                                                    if not (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint:
                                                                        if ext_call.return_data[0] <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        require ext_call.return_data[0]
                                                                        if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                            revert with 0, 'SafeMath: addition overflow'
                                                                        poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                                        poolInfo[idx].field_512 = block.timestamp
                                                                        require idx < poolInfo.length
                                                                        mem[0] = 4
                                                                        _29518 = mem[64]
                                                                        mem[64] = mem[64] + 128
                                                                        mem[_29518] = poolInfo[idx].field_0
                                                                        mem[_29518 + 32] = poolInfo[idx].field_256
                                                                        mem[_29518 + 64] = poolInfo[idx].field_512
                                                                        mem[_29518 + 96] = poolInfo[idx].field_768
                                                                    else:
                                                                        if 10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                        if ext_call.return_data[0] <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        require ext_call.return_data[0]
                                                                        if (10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                            revert with 0, 'SafeMath: addition overflow'
                                                                        poolInfo[idx].field_768 += 10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                                                                        poolInfo[idx].field_512 = block.timestamp
                                                                        require idx < poolInfo.length
                                                                        mem[0] = 4
                                                                        _29811 = mem[64]
                                                                        mem[64] = mem[64] + 128
                                                                        mem[_29811] = poolInfo[idx].field_0
                                                                        mem[_29811 + 32] = poolInfo[idx].field_256
                                                                        mem[_29811 + 64] = poolInfo[idx].field_512
                                                                        mem[_29811 + 96] = poolInfo[idx].field_768
                                                mem[0] = msg.sender
                                                mem[32] = sha3(idx, 6)
                                                if not userInfo[idx][msg.sender].field_0:
                                                    if userInfo[idx][msg.sender].field_256 > 0:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if -userInfo[idx][msg.sender].field_256 < 0:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                else:
                                                    if poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / userInfo[idx][msg.sender].field_0 != poolInfo[idx].field_768:
                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                    if userInfo[idx][msg.sender].field_256 > poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if (poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12) - userInfo[idx][msg.sender].field_256 < 0:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                if not userInfo[idx][msg.sender].field_0:
                                                    userInfo[idx][msg.sender].field_256 = 0
                                                else:
                                                    if poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / userInfo[idx][msg.sender].field_0 != poolInfo[idx].field_768:
                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                    userInfo[idx][msg.sender].field_256 = poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12
                                else:
                                    if (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond) / block.timestamp - poolInfo[idx].field_512 != rewardsPerSecond:
                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    if not (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond):
                                        if totalAllocPoint <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require totalAllocPoint
                                        if not 0 / totalAllocPoint:
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if not userInfo[idx][address(msg.sender)].field_0:
                                                if userInfo[idx][address(msg.sender)].field_256 > 0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if -userInfo[idx][address(msg.sender)].field_256 > 0:
                                                    require idx < poolInfo.length
                                                    if block.timestamp <= poolInfo[idx].field_512:
                                                        require idx < poolInfo.length
                                                        mem[0] = 4
                                                        _20515 = mem[64]
                                                        mem[64] = mem[64] + 128
                                                        mem[_20515] = poolInfo[idx].field_0
                                                        mem[_20515 + 32] = poolInfo[idx].field_256
                                                        mem[_20515 + 64] = poolInfo[idx].field_512
                                                        mem[_20515 + 96] = poolInfo[idx].field_768
                                                    else:
                                                        mem[mem[64] + 4] = this.address
                                                        require ext_code.size(poolInfo[idx].field_0)
                                                        staticcall poolInfo[idx].field_0.0x70a08231 with:
                                                                gas gas_remaining wei
                                                               args this.address
                                                        mem[mem[64]] = ext_call.return_data[0]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if not ext_call.return_data[0]:
                                                            poolInfo[idx].field_512 = block.timestamp
                                                            require idx < poolInfo.length
                                                            mem[0] = 4
                                                            _21534 = mem[64]
                                                            mem[64] = mem[64] + 128
                                                            mem[_21534] = poolInfo[idx].field_0
                                                            mem[_21534 + 32] = poolInfo[idx].field_256
                                                            mem[_21534 + 64] = poolInfo[idx].field_512
                                                            mem[_21534 + 96] = poolInfo[idx].field_768
                                                        else:
                                                            if not totalAllocPoint:
                                                                poolInfo[idx].field_512 = block.timestamp
                                                                require idx < poolInfo.length
                                                                mem[0] = 4
                                                                _21802 = mem[64]
                                                                mem[64] = mem[64] + 128
                                                                mem[_21802] = poolInfo[idx].field_0
                                                                mem[_21802 + 32] = poolInfo[idx].field_256
                                                                mem[_21802 + 64] = poolInfo[idx].field_512
                                                                mem[_21802 + 96] = poolInfo[idx].field_768
                                                            else:
                                                                if poolInfo[idx].field_512 > block.timestamp:
                                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                                if not block.timestamp - poolInfo[idx].field_512:
                                                                    if totalAllocPoint <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    require totalAllocPoint
                                                                    if not 0 / totalAllocPoint:
                                                                        if ext_call.return_data[0] <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        require ext_call.return_data[0]
                                                                        if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                            revert with 0, 'SafeMath: addition overflow'
                                                                        poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                                        poolInfo[idx].field_512 = block.timestamp
                                                                        require idx < poolInfo.length
                                                                        mem[0] = 4
                                                                        _28483 = mem[64]
                                                                        mem[64] = mem[64] + 128
                                                                        mem[_28483] = poolInfo[idx].field_0
                                                                        mem[_28483 + 32] = poolInfo[idx].field_256
                                                                        mem[_28483 + 64] = poolInfo[idx].field_512
                                                                        mem[_28483 + 96] = poolInfo[idx].field_768
                                                                    else:
                                                                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                        if ext_call.return_data[0] <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        require ext_call.return_data[0]
                                                                        if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                            revert with 0, 'SafeMath: addition overflow'
                                                                        poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                                        poolInfo[idx].field_512 = block.timestamp
                                                                        require idx < poolInfo.length
                                                                        mem[0] = 4
                                                                        _28780 = mem[64]
                                                                        mem[64] = mem[64] + 128
                                                                        mem[_28780] = poolInfo[idx].field_0
                                                                        mem[_28780 + 32] = poolInfo[idx].field_256
                                                                        mem[_28780 + 64] = poolInfo[idx].field_512
                                                                        mem[_28780 + 96] = poolInfo[idx].field_768
                                                                else:
                                                                    if (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond) / block.timestamp - poolInfo[idx].field_512 != rewardsPerSecond:
                                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                    if not (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond):
                                                                        if totalAllocPoint <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        require totalAllocPoint
                                                                        if not 0 / totalAllocPoint:
                                                                            if ext_call.return_data[0] <= 0:
                                                                                revert with 0, 'SafeMath: division by zero'
                                                                            require ext_call.return_data[0]
                                                                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                                revert with 0, 'SafeMath: addition overflow'
                                                                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                                            poolInfo[idx].field_512 = block.timestamp
                                                                            require idx < poolInfo.length
                                                                            mem[0] = 4
                                                                            _28775 = mem[64]
                                                                            mem[64] = mem[64] + 128
                                                                            mem[_28775] = poolInfo[idx].field_0
                                                                            mem[_28775 + 32] = poolInfo[idx].field_256
                                                                            mem[_28775 + 64] = poolInfo[idx].field_512
                                                                            mem[_28775 + 96] = poolInfo[idx].field_768
                                                                        else:
                                                                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                            if ext_call.return_data[0] <= 0:
                                                                                revert with 0, 'SafeMath: division by zero'
                                                                            require ext_call.return_data[0]
                                                                            if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                                revert with 0, 'SafeMath: addition overflow'
                                                                            poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                                            poolInfo[idx].field_512 = block.timestamp
                                                                            require idx < poolInfo.length
                                                                            mem[0] = 4
                                                                            _29144 = mem[64]
                                                                            mem[64] = mem[64] + 128
                                                                            mem[_29144] = poolInfo[idx].field_0
                                                                            mem[_29144 + 32] = poolInfo[idx].field_256
                                                                            mem[_29144 + 64] = poolInfo[idx].field_512
                                                                            mem[_29144 + 96] = poolInfo[idx].field_768
                                                                    else:
                                                                        if (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond) != poolInfo[idx].field_256:
                                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                        if totalAllocPoint <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        require totalAllocPoint
                                                                        if not (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint:
                                                                            if ext_call.return_data[0] <= 0:
                                                                                revert with 0, 'SafeMath: division by zero'
                                                                            require ext_call.return_data[0]
                                                                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                                revert with 0, 'SafeMath: addition overflow'
                                                                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                                            poolInfo[idx].field_512 = block.timestamp
                                                                            require idx < poolInfo.length
                                                                            mem[0] = 4
                                                                            _29139 = mem[64]
                                                                            mem[64] = mem[64] + 128
                                                                            mem[_29139] = poolInfo[idx].field_0
                                                                            mem[_29139 + 32] = poolInfo[idx].field_256
                                                                            mem[_29139 + 64] = poolInfo[idx].field_512
                                                                            mem[_29139 + 96] = poolInfo[idx].field_768
                                                                        else:
                                                                            if 10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                            if ext_call.return_data[0] <= 0:
                                                                                revert with 0, 'SafeMath: division by zero'
                                                                            require ext_call.return_data[0]
                                                                            if (10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                                revert with 0, 'SafeMath: addition overflow'
                                                                            poolInfo[idx].field_768 += 10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                                                                            poolInfo[idx].field_512 = block.timestamp
                                                                            require idx < poolInfo.length
                                                                            mem[0] = 4
                                                                            _29513 = mem[64]
                                                                            mem[64] = mem[64] + 128
                                                                            mem[_29513] = poolInfo[idx].field_0
                                                                            mem[_29513 + 32] = poolInfo[idx].field_256
                                                                            mem[_29513 + 64] = poolInfo[idx].field_512
                                                                            mem[_29513 + 96] = poolInfo[idx].field_768
                                                    mem[0] = msg.sender
                                                    mem[32] = sha3(idx, 6)
                                                    if not userInfo[idx][msg.sender].field_0:
                                                        if userInfo[idx][msg.sender].field_256 > 0:
                                                            revert with 0, 'SafeMath: subtraction overflow'
                                                        if -userInfo[idx][msg.sender].field_256 < 0:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                    else:
                                                        if poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / userInfo[idx][msg.sender].field_0 != poolInfo[idx].field_768:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                        if userInfo[idx][msg.sender].field_256 > poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12:
                                                            revert with 0, 'SafeMath: subtraction overflow'
                                                        if (poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12) - userInfo[idx][msg.sender].field_256 < 0:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                    if not userInfo[idx][msg.sender].field_0:
                                                        userInfo[idx][msg.sender].field_256 = 0
                                                    else:
                                                        if poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / userInfo[idx][msg.sender].field_0 != poolInfo[idx].field_768:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                        userInfo[idx][msg.sender].field_256 = poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12
                                            else:
                                                if (0 / ext_call.return_data[0] * userInfo[idx][address(msg.sender)].field_0) + (poolInfo[idx].field_768 * userInfo[idx][address(msg.sender)].field_0) / userInfo[idx][address(msg.sender)].field_0 != (0 / ext_call.return_data[0]) + poolInfo[idx].field_768:
                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                if userInfo[idx][address(msg.sender)].field_256 > (0 / ext_call.return_data[0] * userInfo[idx][address(msg.sender)].field_0) + (poolInfo[idx].field_768 * userInfo[idx][address(msg.sender)].field_0) / 10^12:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if ((0 / ext_call.return_data[0] * userInfo[idx][address(msg.sender)].field_0) + (poolInfo[idx].field_768 * userInfo[idx][address(msg.sender)].field_0) / 10^12) - userInfo[idx][address(msg.sender)].field_256 > 0:
                                                    require idx < poolInfo.length
                                                    if block.timestamp <= poolInfo[idx].field_512:
                                                        require idx < poolInfo.length
                                                        mem[0] = 4
                                                        _20684 = mem[64]
                                                        mem[64] = mem[64] + 128
                                                        mem[_20684] = poolInfo[idx].field_0
                                                        mem[_20684 + 32] = poolInfo[idx].field_256
                                                        mem[_20684 + 64] = poolInfo[idx].field_512
                                                        mem[_20684 + 96] = poolInfo[idx].field_768
                                                    else:
                                                        mem[mem[64] + 4] = this.address
                                                        require ext_code.size(poolInfo[idx].field_0)
                                                        staticcall poolInfo[idx].field_0.0x70a08231 with:
                                                                gas gas_remaining wei
                                                               args this.address
                                                        mem[mem[64]] = ext_call.return_data[0]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if not ext_call.return_data[0]:
                                                            poolInfo[idx].field_512 = block.timestamp
                                                            require idx < poolInfo.length
                                                            mem[0] = 4
                                                            _21795 = mem[64]
                                                            mem[64] = mem[64] + 128
                                                            mem[_21795] = poolInfo[idx].field_0
                                                            mem[_21795 + 32] = poolInfo[idx].field_256
                                                            mem[_21795 + 64] = poolInfo[idx].field_512
                                                            mem[_21795 + 96] = poolInfo[idx].field_768
                                                        else:
                                                            if not totalAllocPoint:
                                                                poolInfo[idx].field_512 = block.timestamp
                                                                require idx < poolInfo.length
                                                                mem[0] = 4
                                                                _22051 = mem[64]
                                                                mem[64] = mem[64] + 128
                                                                mem[_22051] = poolInfo[idx].field_0
                                                                mem[_22051 + 32] = poolInfo[idx].field_256
                                                                mem[_22051 + 64] = poolInfo[idx].field_512
                                                                mem[_22051 + 96] = poolInfo[idx].field_768
                                                            else:
                                                                if poolInfo[idx].field_512 > block.timestamp:
                                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                                if not block.timestamp - poolInfo[idx].field_512:
                                                                    if totalAllocPoint <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    require totalAllocPoint
                                                                    if not 0 / totalAllocPoint:
                                                                        if ext_call.return_data[0] <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        require ext_call.return_data[0]
                                                                        if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                            revert with 0, 'SafeMath: addition overflow'
                                                                        poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                                        poolInfo[idx].field_512 = block.timestamp
                                                                        require idx < poolInfo.length
                                                                        mem[0] = 4
                                                                        _28770 = mem[64]
                                                                        mem[64] = mem[64] + 128
                                                                        mem[_28770] = poolInfo[idx].field_0
                                                                        mem[_28770 + 32] = poolInfo[idx].field_256
                                                                        mem[_28770 + 64] = poolInfo[idx].field_512
                                                                        mem[_28770 + 96] = poolInfo[idx].field_768
                                                                    else:
                                                                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                        if ext_call.return_data[0] <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        require ext_call.return_data[0]
                                                                        if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                            revert with 0, 'SafeMath: addition overflow'
                                                                        poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                                        poolInfo[idx].field_512 = block.timestamp
                                                                        require idx < poolInfo.length
                                                                        mem[0] = 4
                                                                        _29134 = mem[64]
                                                                        mem[64] = mem[64] + 128
                                                                        mem[_29134] = poolInfo[idx].field_0
                                                                        mem[_29134 + 32] = poolInfo[idx].field_256
                                                                        mem[_29134 + 64] = poolInfo[idx].field_512
                                                                        mem[_29134 + 96] = poolInfo[idx].field_768
                                                                else:
                                                                    if (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond) / block.timestamp - poolInfo[idx].field_512 != rewardsPerSecond:
                                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                    if not (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond):
                                                                        if totalAllocPoint <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        require totalAllocPoint
                                                                        if not 0 / totalAllocPoint:
                                                                            if ext_call.return_data[0] <= 0:
                                                                                revert with 0, 'SafeMath: division by zero'
                                                                            require ext_call.return_data[0]
                                                                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                                revert with 0, 'SafeMath: addition overflow'
                                                                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                                            poolInfo[idx].field_512 = block.timestamp
                                                                            require idx < poolInfo.length
                                                                            mem[0] = 4
                                                                            _29129 = mem[64]
                                                                            mem[64] = mem[64] + 128
                                                                            mem[_29129] = poolInfo[idx].field_0
                                                                            mem[_29129 + 32] = poolInfo[idx].field_256
                                                                            mem[_29129 + 64] = poolInfo[idx].field_512
                                                                            mem[_29129 + 96] = poolInfo[idx].field_768
                                                                        else:
                                                                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                            if ext_call.return_data[0] <= 0:
                                                                                revert with 0, 'SafeMath: division by zero'
                                                                            require ext_call.return_data[0]
                                                                            if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                                revert with 0, 'SafeMath: addition overflow'
                                                                            poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                                            poolInfo[idx].field_512 = block.timestamp
                                                                            require idx < poolInfo.length
                                                                            mem[0] = 4
                                                                            _29508 = mem[64]
                                                                            mem[64] = mem[64] + 128
                                                                            mem[_29508] = poolInfo[idx].field_0
                                                                            mem[_29508 + 32] = poolInfo[idx].field_256
                                                                            mem[_29508 + 64] = poolInfo[idx].field_512
                                                                            mem[_29508 + 96] = poolInfo[idx].field_768
                                                                    else:
                                                                        if (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond) != poolInfo[idx].field_256:
                                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                        if totalAllocPoint <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        require totalAllocPoint
                                                                        if not (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint:
                                                                            if ext_call.return_data[0] <= 0:
                                                                                revert with 0, 'SafeMath: division by zero'
                                                                            require ext_call.return_data[0]
                                                                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                                revert with 0, 'SafeMath: addition overflow'
                                                                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                                            poolInfo[idx].field_512 = block.timestamp
                                                                            require idx < poolInfo.length
                                                                            mem[0] = 4
                                                                            _29503 = mem[64]
                                                                            mem[64] = mem[64] + 128
                                                                            mem[_29503] = poolInfo[idx].field_0
                                                                            mem[_29503 + 32] = poolInfo[idx].field_256
                                                                            mem[_29503 + 64] = poolInfo[idx].field_512
                                                                            mem[_29503 + 96] = poolInfo[idx].field_768
                                                                        else:
                                                                            if 10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                            if ext_call.return_data[0] <= 0:
                                                                                revert with 0, 'SafeMath: division by zero'
                                                                            require ext_call.return_data[0]
                                                                            if (10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                                revert with 0, 'SafeMath: addition overflow'
                                                                            poolInfo[idx].field_768 += 10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                                                                            poolInfo[idx].field_512 = block.timestamp
                                                                            require idx < poolInfo.length
                                                                            mem[0] = 4
                                                                            _29804 = mem[64]
                                                                            mem[64] = mem[64] + 128
                                                                            mem[_29804] = poolInfo[idx].field_0
                                                                            mem[_29804 + 32] = poolInfo[idx].field_256
                                                                            mem[_29804 + 64] = poolInfo[idx].field_512
                                                                            mem[_29804 + 96] = poolInfo[idx].field_768
                                                    mem[0] = msg.sender
                                                    mem[32] = sha3(idx, 6)
                                                    if not userInfo[idx][msg.sender].field_0:
                                                        if userInfo[idx][msg.sender].field_256 > 0:
                                                            revert with 0, 'SafeMath: subtraction overflow'
                                                        if -userInfo[idx][msg.sender].field_256 < 0:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                    else:
                                                        if poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / userInfo[idx][msg.sender].field_0 != poolInfo[idx].field_768:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                        if userInfo[idx][msg.sender].field_256 > poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12:
                                                            revert with 0, 'SafeMath: subtraction overflow'
                                                        if (poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12) - userInfo[idx][msg.sender].field_256 < 0:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                    if not userInfo[idx][msg.sender].field_0:
                                                        userInfo[idx][msg.sender].field_256 = 0
                                                    else:
                                                        if poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / userInfo[idx][msg.sender].field_0 != poolInfo[idx].field_768:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                        userInfo[idx][msg.sender].field_256 = poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12
                                        else:
                                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if not userInfo[idx][address(msg.sender)].field_0:
                                                if userInfo[idx][address(msg.sender)].field_256 > 0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if -userInfo[idx][address(msg.sender)].field_256 > 0:
                                                    require idx < poolInfo.length
                                                    if block.timestamp <= poolInfo[idx].field_512:
                                                        require idx < poolInfo.length
                                                        mem[0] = 4
                                                        _20678 = mem[64]
                                                        mem[64] = mem[64] + 128
                                                        mem[_20678] = poolInfo[idx].field_0
                                                        mem[_20678 + 32] = poolInfo[idx].field_256
                                                        mem[_20678 + 64] = poolInfo[idx].field_512
                                                        mem[_20678 + 96] = poolInfo[idx].field_768
                                                    else:
                                                        mem[mem[64] + 4] = this.address
                                                        require ext_code.size(poolInfo[idx].field_0)
                                                        staticcall poolInfo[idx].field_0.0x70a08231 with:
                                                                gas gas_remaining wei
                                                               args this.address
                                                        mem[mem[64]] = ext_call.return_data[0]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if not ext_call.return_data[0]:
                                                            poolInfo[idx].field_512 = block.timestamp
                                                            require idx < poolInfo.length
                                                            mem[0] = 4
                                                            _21788 = mem[64]
                                                            mem[64] = mem[64] + 128
                                                            mem[_21788] = poolInfo[idx].field_0
                                                            mem[_21788 + 32] = poolInfo[idx].field_256
                                                            mem[_21788 + 64] = poolInfo[idx].field_512
                                                            mem[_21788 + 96] = poolInfo[idx].field_768
                                                        else:
                                                            if not totalAllocPoint:
                                                                poolInfo[idx].field_512 = block.timestamp
                                                                require idx < poolInfo.length
                                                                mem[0] = 4
                                                                _22046 = mem[64]
                                                                mem[64] = mem[64] + 128
                                                                mem[_22046] = poolInfo[idx].field_0
                                                                mem[_22046 + 32] = poolInfo[idx].field_256
                                                                mem[_22046 + 64] = poolInfo[idx].field_512
                                                                mem[_22046 + 96] = poolInfo[idx].field_768
                                                            else:
                                                                if poolInfo[idx].field_512 > block.timestamp:
                                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                                if not block.timestamp - poolInfo[idx].field_512:
                                                                    if totalAllocPoint <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    require totalAllocPoint
                                                                    if not 0 / totalAllocPoint:
                                                                        if ext_call.return_data[0] <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        require ext_call.return_data[0]
                                                                        if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                            revert with 0, 'SafeMath: addition overflow'
                                                                        poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                                        poolInfo[idx].field_512 = block.timestamp
                                                                        require idx < poolInfo.length
                                                                        mem[0] = 4
                                                                        _28763 = mem[64]
                                                                        mem[64] = mem[64] + 128
                                                                        mem[_28763] = poolInfo[idx].field_0
                                                                        mem[_28763 + 32] = poolInfo[idx].field_256
                                                                        mem[_28763 + 64] = poolInfo[idx].field_512
                                                                        mem[_28763 + 96] = poolInfo[idx].field_768
                                                                    else:
                                                                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                        if ext_call.return_data[0] <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        require ext_call.return_data[0]
                                                                        if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                            revert with 0, 'SafeMath: addition overflow'
                                                                        poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                                        poolInfo[idx].field_512 = block.timestamp
                                                                        require idx < poolInfo.length
                                                                        mem[0] = 4
                                                                        _29124 = mem[64]
                                                                        mem[64] = mem[64] + 128
                                                                        mem[_29124] = poolInfo[idx].field_0
                                                                        mem[_29124 + 32] = poolInfo[idx].field_256
                                                                        mem[_29124 + 64] = poolInfo[idx].field_512
                                                                        mem[_29124 + 96] = poolInfo[idx].field_768
                                                                else:
                                                                    if (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond) / block.timestamp - poolInfo[idx].field_512 != rewardsPerSecond:
                                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                    if not (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond):
                                                                        if totalAllocPoint <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        require totalAllocPoint
                                                                        if not 0 / totalAllocPoint:
                                                                            if ext_call.return_data[0] <= 0:
                                                                                revert with 0, 'SafeMath: division by zero'
                                                                            require ext_call.return_data[0]
                                                                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                                revert with 0, 'SafeMath: addition overflow'
                                                                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                                            poolInfo[idx].field_512 = block.timestamp
                                                                            require idx < poolInfo.length
                                                                            mem[0] = 4
                                                                            _29119 = mem[64]
                                                                            mem[64] = mem[64] + 128
                                                                            mem[_29119] = poolInfo[idx].field_0
                                                                            mem[_29119 + 32] = poolInfo[idx].field_256
                                                                            mem[_29119 + 64] = poolInfo[idx].field_512
                                                                            mem[_29119 + 96] = poolInfo[idx].field_768
                                                                        else:
                                                                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                            if ext_call.return_data[0] <= 0:
                                                                                revert with 0, 'SafeMath: division by zero'
                                                                            require ext_call.return_data[0]
                                                                            if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                                revert with 0, 'SafeMath: addition overflow'
                                                                            poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                                            poolInfo[idx].field_512 = block.timestamp
                                                                            require idx < poolInfo.length
                                                                            mem[0] = 4
                                                                            _29498 = mem[64]
                                                                            mem[64] = mem[64] + 128
                                                                            mem[_29498] = poolInfo[idx].field_0
                                                                            mem[_29498 + 32] = poolInfo[idx].field_256
                                                                            mem[_29498 + 64] = poolInfo[idx].field_512
                                                                            mem[_29498 + 96] = poolInfo[idx].field_768
                                                                    else:
                                                                        if (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond) != poolInfo[idx].field_256:
                                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                        if totalAllocPoint <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        require totalAllocPoint
                                                                        if not (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint:
                                                                            if ext_call.return_data[0] <= 0:
                                                                                revert with 0, 'SafeMath: division by zero'
                                                                            require ext_call.return_data[0]
                                                                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                                revert with 0, 'SafeMath: addition overflow'
                                                                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                                            poolInfo[idx].field_512 = block.timestamp
                                                                            require idx < poolInfo.length
                                                                            mem[0] = 4
                                                                            _29493 = mem[64]
                                                                            mem[64] = mem[64] + 128
                                                                            mem[_29493] = poolInfo[idx].field_0
                                                                            mem[_29493 + 32] = poolInfo[idx].field_256
                                                                            mem[_29493 + 64] = poolInfo[idx].field_512
                                                                            mem[_29493 + 96] = poolInfo[idx].field_768
                                                                        else:
                                                                            if 10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                            if ext_call.return_data[0] <= 0:
                                                                                revert with 0, 'SafeMath: division by zero'
                                                                            require ext_call.return_data[0]
                                                                            if (10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                                revert with 0, 'SafeMath: addition overflow'
                                                                            poolInfo[idx].field_768 += 10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                                                                            poolInfo[idx].field_512 = block.timestamp
                                                                            require idx < poolInfo.length
                                                                            mem[0] = 4
                                                                            _29799 = mem[64]
                                                                            mem[64] = mem[64] + 128
                                                                            mem[_29799] = poolInfo[idx].field_0
                                                                            mem[_29799 + 32] = poolInfo[idx].field_256
                                                                            mem[_29799 + 64] = poolInfo[idx].field_512
                                                                            mem[_29799 + 96] = poolInfo[idx].field_768
                                                    mem[0] = msg.sender
                                                    mem[32] = sha3(idx, 6)
                                                    if not userInfo[idx][msg.sender].field_0:
                                                        if userInfo[idx][msg.sender].field_256 > 0:
                                                            revert with 0, 'SafeMath: subtraction overflow'
                                                        if -userInfo[idx][msg.sender].field_256 < 0:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                    else:
                                                        if poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / userInfo[idx][msg.sender].field_0 != poolInfo[idx].field_768:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                        if userInfo[idx][msg.sender].field_256 > poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12:
                                                            revert with 0, 'SafeMath: subtraction overflow'
                                                        if (poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12) - userInfo[idx][msg.sender].field_256 < 0:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                    if not userInfo[idx][msg.sender].field_0:
                                                        userInfo[idx][msg.sender].field_256 = 0
                                                    else:
                                                        if poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / userInfo[idx][msg.sender].field_0 != poolInfo[idx].field_768:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                        userInfo[idx][msg.sender].field_256 = poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12
                                            else:
                                                if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[idx][address(msg.sender)].field_0) + (poolInfo[idx].field_768 * userInfo[idx][address(msg.sender)].field_0) / userInfo[idx][address(msg.sender)].field_0 != (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768:
                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                if userInfo[idx][address(msg.sender)].field_256 > (10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[idx][address(msg.sender)].field_0) + (poolInfo[idx].field_768 * userInfo[idx][address(msg.sender)].field_0) / 10^12:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if ((10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[idx][address(msg.sender)].field_0) + (poolInfo[idx].field_768 * userInfo[idx][address(msg.sender)].field_0) / 10^12) - userInfo[idx][address(msg.sender)].field_256 > 0:
                                                    require idx < poolInfo.length
                                                    if block.timestamp <= poolInfo[idx].field_512:
                                                        require idx < poolInfo.length
                                                        mem[0] = 4
                                                        _20873 = mem[64]
                                                        mem[64] = mem[64] + 128
                                                        mem[_20873] = poolInfo[idx].field_0
                                                        mem[_20873 + 32] = poolInfo[idx].field_256
                                                        mem[_20873 + 64] = poolInfo[idx].field_512
                                                        mem[_20873 + 96] = poolInfo[idx].field_768
                                                    else:
                                                        mem[mem[64] + 4] = this.address
                                                        require ext_code.size(poolInfo[idx].field_0)
                                                        staticcall poolInfo[idx].field_0.0x70a08231 with:
                                                                gas gas_remaining wei
                                                               args this.address
                                                        mem[mem[64]] = ext_call.return_data[0]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if not ext_call.return_data[0]:
                                                            poolInfo[idx].field_512 = block.timestamp
                                                            require idx < poolInfo.length
                                                            mem[0] = 4
                                                            _22039 = mem[64]
                                                            mem[64] = mem[64] + 128
                                                            mem[_22039] = poolInfo[idx].field_0
                                                            mem[_22039 + 32] = poolInfo[idx].field_256
                                                            mem[_22039 + 64] = poolInfo[idx].field_512
                                                            mem[_22039 + 96] = poolInfo[idx].field_768
                                                        else:
                                                            if not totalAllocPoint:
                                                                poolInfo[idx].field_512 = block.timestamp
                                                                require idx < poolInfo.length
                                                                mem[0] = 4
                                                                _22248 = mem[64]
                                                                mem[64] = mem[64] + 128
                                                                mem[_22248] = poolInfo[idx].field_0
                                                                mem[_22248 + 32] = poolInfo[idx].field_256
                                                                mem[_22248 + 64] = poolInfo[idx].field_512
                                                                mem[_22248 + 96] = poolInfo[idx].field_768
                                                            else:
                                                                if poolInfo[idx].field_512 > block.timestamp:
                                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                                if not block.timestamp - poolInfo[idx].field_512:
                                                                    if totalAllocPoint <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    require totalAllocPoint
                                                                    if not 0 / totalAllocPoint:
                                                                        if ext_call.return_data[0] <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        require ext_call.return_data[0]
                                                                        if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                            revert with 0, 'SafeMath: addition overflow'
                                                                        poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                                        poolInfo[idx].field_512 = block.timestamp
                                                                        require idx < poolInfo.length
                                                                        mem[0] = 4
                                                                        _29114 = mem[64]
                                                                        mem[64] = mem[64] + 128
                                                                        mem[_29114] = poolInfo[idx].field_0
                                                                        mem[_29114 + 32] = poolInfo[idx].field_256
                                                                        mem[_29114 + 64] = poolInfo[idx].field_512
                                                                        mem[_29114 + 96] = poolInfo[idx].field_768
                                                                    else:
                                                                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                        if ext_call.return_data[0] <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        require ext_call.return_data[0]
                                                                        if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                            revert with 0, 'SafeMath: addition overflow'
                                                                        poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                                        poolInfo[idx].field_512 = block.timestamp
                                                                        require idx < poolInfo.length
                                                                        mem[0] = 4
                                                                        _29488 = mem[64]
                                                                        mem[64] = mem[64] + 128
                                                                        mem[_29488] = poolInfo[idx].field_0
                                                                        mem[_29488 + 32] = poolInfo[idx].field_256
                                                                        mem[_29488 + 64] = poolInfo[idx].field_512
                                                                        mem[_29488 + 96] = poolInfo[idx].field_768
                                                                else:
                                                                    if (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond) / block.timestamp - poolInfo[idx].field_512 != rewardsPerSecond:
                                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                    if not (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond):
                                                                        if totalAllocPoint <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        require totalAllocPoint
                                                                        if not 0 / totalAllocPoint:
                                                                            if ext_call.return_data[0] <= 0:
                                                                                revert with 0, 'SafeMath: division by zero'
                                                                            require ext_call.return_data[0]
                                                                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                                revert with 0, 'SafeMath: addition overflow'
                                                                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                                            poolInfo[idx].field_512 = block.timestamp
                                                                            require idx < poolInfo.length
                                                                            mem[0] = 4
                                                                            _29483 = mem[64]
                                                                            mem[64] = mem[64] + 128
                                                                            mem[_29483] = poolInfo[idx].field_0
                                                                            mem[_29483 + 32] = poolInfo[idx].field_256
                                                                            mem[_29483 + 64] = poolInfo[idx].field_512
                                                                            mem[_29483 + 96] = poolInfo[idx].field_768
                                                                        else:
                                                                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                            if ext_call.return_data[0] <= 0:
                                                                                revert with 0, 'SafeMath: division by zero'
                                                                            require ext_call.return_data[0]
                                                                            if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                                revert with 0, 'SafeMath: addition overflow'
                                                                            poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                                            poolInfo[idx].field_512 = block.timestamp
                                                                            require idx < poolInfo.length
                                                                            mem[0] = 4
                                                                            _29794 = mem[64]
                                                                            mem[64] = mem[64] + 128
                                                                            mem[_29794] = poolInfo[idx].field_0
                                                                            mem[_29794 + 32] = poolInfo[idx].field_256
                                                                            mem[_29794 + 64] = poolInfo[idx].field_512
                                                                            mem[_29794 + 96] = poolInfo[idx].field_768
                                                                    else:
                                                                        if (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond) != poolInfo[idx].field_256:
                                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                        if totalAllocPoint <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        require totalAllocPoint
                                                                        if not (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint:
                                                                            if ext_call.return_data[0] <= 0:
                                                                                revert with 0, 'SafeMath: division by zero'
                                                                            require ext_call.return_data[0]
                                                                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                                revert with 0, 'SafeMath: addition overflow'
                                                                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                                            poolInfo[idx].field_512 = block.timestamp
                                                                            require idx < poolInfo.length
                                                                            mem[0] = 4
                                                                            _29789 = mem[64]
                                                                            mem[64] = mem[64] + 128
                                                                            mem[_29789] = poolInfo[idx].field_0
                                                                            mem[_29789 + 32] = poolInfo[idx].field_256
                                                                            mem[_29789 + 64] = poolInfo[idx].field_512
                                                                            mem[_29789 + 96] = poolInfo[idx].field_768
                                                                        else:
                                                                            if 10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                            if ext_call.return_data[0] <= 0:
                                                                                revert with 0, 'SafeMath: division by zero'
                                                                            require ext_call.return_data[0]
                                                                            if (10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                                revert with 0, 'SafeMath: addition overflow'
                                                                            poolInfo[idx].field_768 += 10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                                                                            poolInfo[idx].field_512 = block.timestamp
                                                                            require idx < poolInfo.length
                                                                            mem[0] = 4
                                                                            _30001 = mem[64]
                                                                            mem[64] = mem[64] + 128
                                                                            mem[_30001] = poolInfo[idx].field_0
                                                                            mem[_30001 + 32] = poolInfo[idx].field_256
                                                                            mem[_30001 + 64] = poolInfo[idx].field_512
                                                                            mem[_30001 + 96] = poolInfo[idx].field_768
                                                    mem[0] = msg.sender
                                                    mem[32] = sha3(idx, 6)
                                                    if not userInfo[idx][msg.sender].field_0:
                                                        if userInfo[idx][msg.sender].field_256 > 0:
                                                            revert with 0, 'SafeMath: subtraction overflow'
                                                        if -userInfo[idx][msg.sender].field_256 < 0:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                    else:
                                                        if poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / userInfo[idx][msg.sender].field_0 != poolInfo[idx].field_768:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                        if userInfo[idx][msg.sender].field_256 > poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12:
                                                            revert with 0, 'SafeMath: subtraction overflow'
                                                        if (poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12) - userInfo[idx][msg.sender].field_256 < 0:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                    if not userInfo[idx][msg.sender].field_0:
                                                        userInfo[idx][msg.sender].field_256 = 0
                                                    else:
                                                        if poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / userInfo[idx][msg.sender].field_0 != poolInfo[idx].field_768:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                        userInfo[idx][msg.sender].field_256 = poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12
                                    else:
                                        if (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond) != poolInfo[idx].field_256:
                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if totalAllocPoint <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require totalAllocPoint
                                        if not (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint:
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if not userInfo[idx][address(msg.sender)].field_0:
                                                if userInfo[idx][address(msg.sender)].field_256 > 0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if -userInfo[idx][address(msg.sender)].field_256 > 0:
                                                    require idx < poolInfo.length
                                                    if block.timestamp <= poolInfo[idx].field_512:
                                                        require idx < poolInfo.length
                                                        mem[0] = 4
                                                        _20671 = mem[64]
                                                        mem[64] = mem[64] + 128
                                                        mem[_20671] = poolInfo[idx].field_0
                                                        mem[_20671 + 32] = poolInfo[idx].field_256
                                                        mem[_20671 + 64] = poolInfo[idx].field_512
                                                        mem[_20671 + 96] = poolInfo[idx].field_768
                                                    else:
                                                        mem[mem[64] + 4] = this.address
                                                        require ext_code.size(poolInfo[idx].field_0)
                                                        staticcall poolInfo[idx].field_0.0x70a08231 with:
                                                                gas gas_remaining wei
                                                               args this.address
                                                        mem[mem[64]] = ext_call.return_data[0]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if not ext_call.return_data[0]:
                                                            poolInfo[idx].field_512 = block.timestamp
                                                            require idx < poolInfo.length
                                                            mem[0] = 4
                                                            _21779 = mem[64]
                                                            mem[64] = mem[64] + 128
                                                            mem[_21779] = poolInfo[idx].field_0
                                                            mem[_21779 + 32] = poolInfo[idx].field_256
                                                            mem[_21779 + 64] = poolInfo[idx].field_512
                                                            mem[_21779 + 96] = poolInfo[idx].field_768
                                                        else:
                                                            if not totalAllocPoint:
                                                                poolInfo[idx].field_512 = block.timestamp
                                                                require idx < poolInfo.length
                                                                mem[0] = 4
                                                                _22034 = mem[64]
                                                                mem[64] = mem[64] + 128
                                                                mem[_22034] = poolInfo[idx].field_0
                                                                mem[_22034 + 32] = poolInfo[idx].field_256
                                                                mem[_22034 + 64] = poolInfo[idx].field_512
                                                                mem[_22034 + 96] = poolInfo[idx].field_768
                                                            else:
                                                                if poolInfo[idx].field_512 > block.timestamp:
                                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                                if not block.timestamp - poolInfo[idx].field_512:
                                                                    if totalAllocPoint <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    require totalAllocPoint
                                                                    if not 0 / totalAllocPoint:
                                                                        if ext_call.return_data[0] <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        require ext_call.return_data[0]
                                                                        if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                            revert with 0, 'SafeMath: addition overflow'
                                                                        poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                                        poolInfo[idx].field_512 = block.timestamp
                                                                        require idx < poolInfo.length
                                                                        mem[0] = 4
                                                                        _28752 = mem[64]
                                                                        mem[64] = mem[64] + 128
                                                                        mem[_28752] = poolInfo[idx].field_0
                                                                        mem[_28752 + 32] = poolInfo[idx].field_256
                                                                        mem[_28752 + 64] = poolInfo[idx].field_512
                                                                        mem[_28752 + 96] = poolInfo[idx].field_768
                                                                    else:
                                                                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                        if ext_call.return_data[0] <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        require ext_call.return_data[0]
                                                                        if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                            revert with 0, 'SafeMath: addition overflow'
                                                                        poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                                        poolInfo[idx].field_512 = block.timestamp
                                                                        require idx < poolInfo.length
                                                                        mem[0] = 4
                                                                        _29107 = mem[64]
                                                                        mem[64] = mem[64] + 128
                                                                        mem[_29107] = poolInfo[idx].field_0
                                                                        mem[_29107 + 32] = poolInfo[idx].field_256
                                                                        mem[_29107 + 64] = poolInfo[idx].field_512
                                                                        mem[_29107 + 96] = poolInfo[idx].field_768
                                                                else:
                                                                    if (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond) / block.timestamp - poolInfo[idx].field_512 != rewardsPerSecond:
                                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                    if not (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond):
                                                                        if totalAllocPoint <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        require totalAllocPoint
                                                                        if not 0 / totalAllocPoint:
                                                                            if ext_call.return_data[0] <= 0:
                                                                                revert with 0, 'SafeMath: division by zero'
                                                                            require ext_call.return_data[0]
                                                                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                                revert with 0, 'SafeMath: addition overflow'
                                                                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                                            poolInfo[idx].field_512 = block.timestamp
                                                                            require idx < poolInfo.length
                                                                            mem[0] = 4
                                                                            _29102 = mem[64]
                                                                            mem[64] = mem[64] + 128
                                                                            mem[_29102] = poolInfo[idx].field_0
                                                                            mem[_29102 + 32] = poolInfo[idx].field_256
                                                                            mem[_29102 + 64] = poolInfo[idx].field_512
                                                                            mem[_29102 + 96] = poolInfo[idx].field_768
                                                                        else:
                                                                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                            if ext_call.return_data[0] <= 0:
                                                                                revert with 0, 'SafeMath: division by zero'
                                                                            require ext_call.return_data[0]
                                                                            if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                                revert with 0, 'SafeMath: addition overflow'
                                                                            poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                                            poolInfo[idx].field_512 = block.timestamp
                                                                            require idx < poolInfo.length
                                                                            mem[0] = 4
                                                                            _29478 = mem[64]
                                                                            mem[64] = mem[64] + 128
                                                                            mem[_29478] = poolInfo[idx].field_0
                                                                            mem[_29478 + 32] = poolInfo[idx].field_256
                                                                            mem[_29478 + 64] = poolInfo[idx].field_512
                                                                            mem[_29478 + 96] = poolInfo[idx].field_768
                                                                    else:
                                                                        if (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond) != poolInfo[idx].field_256:
                                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                        if totalAllocPoint <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        require totalAllocPoint
                                                                        if not (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint:
                                                                            if ext_call.return_data[0] <= 0:
                                                                                revert with 0, 'SafeMath: division by zero'
                                                                            require ext_call.return_data[0]
                                                                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                                revert with 0, 'SafeMath: addition overflow'
                                                                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                                            poolInfo[idx].field_512 = block.timestamp
                                                                            require idx < poolInfo.length
                                                                            mem[0] = 4
                                                                            _29473 = mem[64]
                                                                            mem[64] = mem[64] + 128
                                                                            mem[_29473] = poolInfo[idx].field_0
                                                                            mem[_29473 + 32] = poolInfo[idx].field_256
                                                                            mem[_29473 + 64] = poolInfo[idx].field_512
                                                                            mem[_29473 + 96] = poolInfo[idx].field_768
                                                                        else:
                                                                            if 10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                            if ext_call.return_data[0] <= 0:
                                                                                revert with 0, 'SafeMath: division by zero'
                                                                            require ext_call.return_data[0]
                                                                            if (10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                                revert with 0, 'SafeMath: addition overflow'
                                                                            poolInfo[idx].field_768 += 10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                                                                            poolInfo[idx].field_512 = block.timestamp
                                                                            require idx < poolInfo.length
                                                                            mem[0] = 4
                                                                            _29784 = mem[64]
                                                                            mem[64] = mem[64] + 128
                                                                            mem[_29784] = poolInfo[idx].field_0
                                                                            mem[_29784 + 32] = poolInfo[idx].field_256
                                                                            mem[_29784 + 64] = poolInfo[idx].field_512
                                                                            mem[_29784 + 96] = poolInfo[idx].field_768
                                                    mem[0] = msg.sender
                                                    mem[32] = sha3(idx, 6)
                                                    if not userInfo[idx][msg.sender].field_0:
                                                        if userInfo[idx][msg.sender].field_256 > 0:
                                                            revert with 0, 'SafeMath: subtraction overflow'
                                                        if -userInfo[idx][msg.sender].field_256 < 0:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                    else:
                                                        if poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / userInfo[idx][msg.sender].field_0 != poolInfo[idx].field_768:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                        if userInfo[idx][msg.sender].field_256 > poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12:
                                                            revert with 0, 'SafeMath: subtraction overflow'
                                                        if (poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12) - userInfo[idx][msg.sender].field_256 < 0:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                    if not userInfo[idx][msg.sender].field_0:
                                                        userInfo[idx][msg.sender].field_256 = 0
                                                    else:
                                                        if poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / userInfo[idx][msg.sender].field_0 != poolInfo[idx].field_768:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                        userInfo[idx][msg.sender].field_256 = poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12
                                            else:
                                                if (0 / ext_call.return_data[0] * userInfo[idx][address(msg.sender)].field_0) + (poolInfo[idx].field_768 * userInfo[idx][address(msg.sender)].field_0) / userInfo[idx][address(msg.sender)].field_0 != (0 / ext_call.return_data[0]) + poolInfo[idx].field_768:
                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                if userInfo[idx][address(msg.sender)].field_256 > (0 / ext_call.return_data[0] * userInfo[idx][address(msg.sender)].field_0) + (poolInfo[idx].field_768 * userInfo[idx][address(msg.sender)].field_0) / 10^12:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if ((0 / ext_call.return_data[0] * userInfo[idx][address(msg.sender)].field_0) + (poolInfo[idx].field_768 * userInfo[idx][address(msg.sender)].field_0) / 10^12) - userInfo[idx][address(msg.sender)].field_256 > 0:
                                                    require idx < poolInfo.length
                                                    if block.timestamp <= poolInfo[idx].field_512:
                                                        require idx < poolInfo.length
                                                        mem[0] = 4
                                                        _20867 = mem[64]
                                                        mem[64] = mem[64] + 128
                                                        mem[_20867] = poolInfo[idx].field_0
                                                        mem[_20867 + 32] = poolInfo[idx].field_256
                                                        mem[_20867 + 64] = poolInfo[idx].field_512
                                                        mem[_20867 + 96] = poolInfo[idx].field_768
                                                    else:
                                                        mem[mem[64] + 4] = this.address
                                                        require ext_code.size(poolInfo[idx].field_0)
                                                        staticcall poolInfo[idx].field_0.0x70a08231 with:
                                                                gas gas_remaining wei
                                                               args this.address
                                                        mem[mem[64]] = ext_call.return_data[0]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if not ext_call.return_data[0]:
                                                            poolInfo[idx].field_512 = block.timestamp
                                                            require idx < poolInfo.length
                                                            mem[0] = 4
                                                            _22027 = mem[64]
                                                            mem[64] = mem[64] + 128
                                                            mem[_22027] = poolInfo[idx].field_0
                                                            mem[_22027 + 32] = poolInfo[idx].field_256
                                                            mem[_22027 + 64] = poolInfo[idx].field_512
                                                            mem[_22027 + 96] = poolInfo[idx].field_768
                                                        else:
                                                            if not totalAllocPoint:
                                                                poolInfo[idx].field_512 = block.timestamp
                                                                require idx < poolInfo.length
                                                                mem[0] = 4
                                                                _22243 = mem[64]
                                                                mem[64] = mem[64] + 128
                                                                mem[_22243] = poolInfo[idx].field_0
                                                                mem[_22243 + 32] = poolInfo[idx].field_256
                                                                mem[_22243 + 64] = poolInfo[idx].field_512
                                                                mem[_22243 + 96] = poolInfo[idx].field_768
                                                            else:
                                                                if poolInfo[idx].field_512 > block.timestamp:
                                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                                if not block.timestamp - poolInfo[idx].field_512:
                                                                    if totalAllocPoint <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    require totalAllocPoint
                                                                    if not 0 / totalAllocPoint:
                                                                        if ext_call.return_data[0] <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        require ext_call.return_data[0]
                                                                        if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                            revert with 0, 'SafeMath: addition overflow'
                                                                        poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                                        poolInfo[idx].field_512 = block.timestamp
                                                                        require idx < poolInfo.length
                                                                        mem[0] = 4
                                                                        _29097 = mem[64]
                                                                        mem[64] = mem[64] + 128
                                                                        mem[_29097] = poolInfo[idx].field_0
                                                                        mem[_29097 + 32] = poolInfo[idx].field_256
                                                                        mem[_29097 + 64] = poolInfo[idx].field_512
                                                                        mem[_29097 + 96] = poolInfo[idx].field_768
                                                                    else:
                                                                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                        if ext_call.return_data[0] <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        require ext_call.return_data[0]
                                                                        if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                            revert with 0, 'SafeMath: addition overflow'
                                                                        poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                                        poolInfo[idx].field_512 = block.timestamp
                                                                        require idx < poolInfo.length
                                                                        mem[0] = 4
                                                                        _29468 = mem[64]
                                                                        mem[64] = mem[64] + 128
                                                                        mem[_29468] = poolInfo[idx].field_0
                                                                        mem[_29468 + 32] = poolInfo[idx].field_256
                                                                        mem[_29468 + 64] = poolInfo[idx].field_512
                                                                        mem[_29468 + 96] = poolInfo[idx].field_768
                                                                else:
                                                                    if (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond) / block.timestamp - poolInfo[idx].field_512 != rewardsPerSecond:
                                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                    if not (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond):
                                                                        if totalAllocPoint <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        require totalAllocPoint
                                                                        if not 0 / totalAllocPoint:
                                                                            if ext_call.return_data[0] <= 0:
                                                                                revert with 0, 'SafeMath: division by zero'
                                                                            require ext_call.return_data[0]
                                                                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                                revert with 0, 'SafeMath: addition overflow'
                                                                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                                            poolInfo[idx].field_512 = block.timestamp
                                                                            require idx < poolInfo.length
                                                                            mem[0] = 4
                                                                            _29463 = mem[64]
                                                                            mem[64] = mem[64] + 128
                                                                            mem[_29463] = poolInfo[idx].field_0
                                                                            mem[_29463 + 32] = poolInfo[idx].field_256
                                                                            mem[_29463 + 64] = poolInfo[idx].field_512
                                                                            mem[_29463 + 96] = poolInfo[idx].field_768
                                                                        else:
                                                                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                            if ext_call.return_data[0] <= 0:
                                                                                revert with 0, 'SafeMath: division by zero'
                                                                            require ext_call.return_data[0]
                                                                            if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                                revert with 0, 'SafeMath: addition overflow'
                                                                            poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                                            poolInfo[idx].field_512 = block.timestamp
                                                                            require idx < poolInfo.length
                                                                            mem[0] = 4
                                                                            _29779 = mem[64]
                                                                            mem[64] = mem[64] + 128
                                                                            mem[_29779] = poolInfo[idx].field_0
                                                                            mem[_29779 + 32] = poolInfo[idx].field_256
                                                                            mem[_29779 + 64] = poolInfo[idx].field_512
                                                                            mem[_29779 + 96] = poolInfo[idx].field_768
                                                                    else:
                                                                        if (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond) != poolInfo[idx].field_256:
                                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                        if totalAllocPoint <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        require totalAllocPoint
                                                                        if not (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint:
                                                                            if ext_call.return_data[0] <= 0:
                                                                                revert with 0, 'SafeMath: division by zero'
                                                                            require ext_call.return_data[0]
                                                                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                                revert with 0, 'SafeMath: addition overflow'
                                                                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                                            poolInfo[idx].field_512 = block.timestamp
                                                                            require idx < poolInfo.length
                                                                            mem[0] = 4
                                                                            _29774 = mem[64]
                                                                            mem[64] = mem[64] + 128
                                                                            mem[_29774] = poolInfo[idx].field_0
                                                                            mem[_29774 + 32] = poolInfo[idx].field_256
                                                                            mem[_29774 + 64] = poolInfo[idx].field_512
                                                                            mem[_29774 + 96] = poolInfo[idx].field_768
                                                                        else:
                                                                            if 10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                            if ext_call.return_data[0] <= 0:
                                                                                revert with 0, 'SafeMath: division by zero'
                                                                            require ext_call.return_data[0]
                                                                            if (10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                                revert with 0, 'SafeMath: addition overflow'
                                                                            poolInfo[idx].field_768 += 10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                                                                            poolInfo[idx].field_512 = block.timestamp
                                                                            require idx < poolInfo.length
                                                                            mem[0] = 4
                                                                            _29994 = mem[64]
                                                                            mem[64] = mem[64] + 128
                                                                            mem[_29994] = poolInfo[idx].field_0
                                                                            mem[_29994 + 32] = poolInfo[idx].field_256
                                                                            mem[_29994 + 64] = poolInfo[idx].field_512
                                                                            mem[_29994 + 96] = poolInfo[idx].field_768
                                                    mem[0] = msg.sender
                                                    mem[32] = sha3(idx, 6)
                                                    if not userInfo[idx][msg.sender].field_0:
                                                        if userInfo[idx][msg.sender].field_256 > 0:
                                                            revert with 0, 'SafeMath: subtraction overflow'
                                                        if -userInfo[idx][msg.sender].field_256 < 0:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                    else:
                                                        if poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / userInfo[idx][msg.sender].field_0 != poolInfo[idx].field_768:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                        if userInfo[idx][msg.sender].field_256 > poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12:
                                                            revert with 0, 'SafeMath: subtraction overflow'
                                                        if (poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12) - userInfo[idx][msg.sender].field_256 < 0:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                    if not userInfo[idx][msg.sender].field_0:
                                                        userInfo[idx][msg.sender].field_256 = 0
                                                    else:
                                                        if poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / userInfo[idx][msg.sender].field_0 != poolInfo[idx].field_768:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                        userInfo[idx][msg.sender].field_256 = poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12
                                        else:
                                            if 10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if (10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if not userInfo[idx][address(msg.sender)].field_0:
                                                if userInfo[idx][address(msg.sender)].field_256 > 0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if -userInfo[idx][address(msg.sender)].field_256 > 0:
                                                    require idx < poolInfo.length
                                                    if block.timestamp <= poolInfo[idx].field_512:
                                                        require idx < poolInfo.length
                                                        mem[0] = 4
                                                        _20861 = mem[64]
                                                        mem[64] = mem[64] + 128
                                                        mem[_20861] = poolInfo[idx].field_0
                                                        mem[_20861 + 32] = poolInfo[idx].field_256
                                                        mem[_20861 + 64] = poolInfo[idx].field_512
                                                        mem[_20861 + 96] = poolInfo[idx].field_768
                                                    else:
                                                        mem[mem[64] + 4] = this.address
                                                        require ext_code.size(poolInfo[idx].field_0)
                                                        staticcall poolInfo[idx].field_0.0x70a08231 with:
                                                                gas gas_remaining wei
                                                               args this.address
                                                        mem[mem[64]] = ext_call.return_data[0]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if not ext_call.return_data[0]:
                                                            poolInfo[idx].field_512 = block.timestamp
                                                            require idx < poolInfo.length
                                                            mem[0] = 4
                                                            _22020 = mem[64]
                                                            mem[64] = mem[64] + 128
                                                            mem[_22020] = poolInfo[idx].field_0
                                                            mem[_22020 + 32] = poolInfo[idx].field_256
                                                            mem[_22020 + 64] = poolInfo[idx].field_512
                                                            mem[_22020 + 96] = poolInfo[idx].field_768
                                                        else:
                                                            if not totalAllocPoint:
                                                                poolInfo[idx].field_512 = block.timestamp
                                                                require idx < poolInfo.length
                                                                mem[0] = 4
                                                                _22238 = mem[64]
                                                                mem[64] = mem[64] + 128
                                                                mem[_22238] = poolInfo[idx].field_0
                                                                mem[_22238 + 32] = poolInfo[idx].field_256
                                                                mem[_22238 + 64] = poolInfo[idx].field_512
                                                                mem[_22238 + 96] = poolInfo[idx].field_768
                                                            else:
                                                                if poolInfo[idx].field_512 > block.timestamp:
                                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                                if not block.timestamp - poolInfo[idx].field_512:
                                                                    if totalAllocPoint <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    require totalAllocPoint
                                                                    if not 0 / totalAllocPoint:
                                                                        if ext_call.return_data[0] <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        require ext_call.return_data[0]
                                                                        if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                            revert with 0, 'SafeMath: addition overflow'
                                                                        poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                                        poolInfo[idx].field_512 = block.timestamp
                                                                        require idx < poolInfo.length
                                                                        mem[0] = 4
                                                                        _29090 = mem[64]
                                                                        mem[64] = mem[64] + 128
                                                                        mem[_29090] = poolInfo[idx].field_0
                                                                        mem[_29090 + 32] = poolInfo[idx].field_256
                                                                        mem[_29090 + 64] = poolInfo[idx].field_512
                                                                        mem[_29090 + 96] = poolInfo[idx].field_768
                                                                    else:
                                                                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                        if ext_call.return_data[0] <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        require ext_call.return_data[0]
                                                                        if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                            revert with 0, 'SafeMath: addition overflow'
                                                                        poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                                        poolInfo[idx].field_512 = block.timestamp
                                                                        require idx < poolInfo.length
                                                                        mem[0] = 4
                                                                        _29458 = mem[64]
                                                                        mem[64] = mem[64] + 128
                                                                        mem[_29458] = poolInfo[idx].field_0
                                                                        mem[_29458 + 32] = poolInfo[idx].field_256
                                                                        mem[_29458 + 64] = poolInfo[idx].field_512
                                                                        mem[_29458 + 96] = poolInfo[idx].field_768
                                                                else:
                                                                    if (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond) / block.timestamp - poolInfo[idx].field_512 != rewardsPerSecond:
                                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                    if not (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond):
                                                                        if totalAllocPoint <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        require totalAllocPoint
                                                                        if not 0 / totalAllocPoint:
                                                                            if ext_call.return_data[0] <= 0:
                                                                                revert with 0, 'SafeMath: division by zero'
                                                                            require ext_call.return_data[0]
                                                                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                                revert with 0, 'SafeMath: addition overflow'
                                                                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                                            poolInfo[idx].field_512 = block.timestamp
                                                                            require idx < poolInfo.length
                                                                            mem[0] = 4
                                                                            _29453 = mem[64]
                                                                            mem[64] = mem[64] + 128
                                                                            mem[_29453] = poolInfo[idx].field_0
                                                                            mem[_29453 + 32] = poolInfo[idx].field_256
                                                                            mem[_29453 + 64] = poolInfo[idx].field_512
                                                                            mem[_29453 + 96] = poolInfo[idx].field_768
                                                                        else:
                                                                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                            if ext_call.return_data[0] <= 0:
                                                                                revert with 0, 'SafeMath: division by zero'
                                                                            require ext_call.return_data[0]
                                                                            if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                                revert with 0, 'SafeMath: addition overflow'
                                                                            poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                                            poolInfo[idx].field_512 = block.timestamp
                                                                            require idx < poolInfo.length
                                                                            mem[0] = 4
                                                                            _29769 = mem[64]
                                                                            mem[64] = mem[64] + 128
                                                                            mem[_29769] = poolInfo[idx].field_0
                                                                            mem[_29769 + 32] = poolInfo[idx].field_256
                                                                            mem[_29769 + 64] = poolInfo[idx].field_512
                                                                            mem[_29769 + 96] = poolInfo[idx].field_768
                                                                    else:
                                                                        if (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond) != poolInfo[idx].field_256:
                                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                        if totalAllocPoint <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        require totalAllocPoint
                                                                        if not (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint:
                                                                            if ext_call.return_data[0] <= 0:
                                                                                revert with 0, 'SafeMath: division by zero'
                                                                            require ext_call.return_data[0]
                                                                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                                revert with 0, 'SafeMath: addition overflow'
                                                                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                                            poolInfo[idx].field_512 = block.timestamp
                                                                            require idx < poolInfo.length
                                                                            mem[0] = 4
                                                                            _29764 = mem[64]
                                                                            mem[64] = mem[64] + 128
                                                                            mem[_29764] = poolInfo[idx].field_0
                                                                            mem[_29764 + 32] = poolInfo[idx].field_256
                                                                            mem[_29764 + 64] = poolInfo[idx].field_512
                                                                            mem[_29764 + 96] = poolInfo[idx].field_768
                                                                        else:
                                                                            if 10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                            if ext_call.return_data[0] <= 0:
                                                                                revert with 0, 'SafeMath: division by zero'
                                                                            require ext_call.return_data[0]
                                                                            if (10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                                revert with 0, 'SafeMath: addition overflow'
                                                                            poolInfo[idx].field_768 += 10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                                                                            poolInfo[idx].field_512 = block.timestamp
                                                                            require idx < poolInfo.length
                                                                            mem[0] = 4
                                                                            _29989 = mem[64]
                                                                            mem[64] = mem[64] + 128
                                                                            mem[_29989] = poolInfo[idx].field_0
                                                                            mem[_29989 + 32] = poolInfo[idx].field_256
                                                                            mem[_29989 + 64] = poolInfo[idx].field_512
                                                                            mem[_29989 + 96] = poolInfo[idx].field_768
                                                    mem[0] = msg.sender
                                                    mem[32] = sha3(idx, 6)
                                                    if not userInfo[idx][msg.sender].field_0:
                                                        if userInfo[idx][msg.sender].field_256 > 0:
                                                            revert with 0, 'SafeMath: subtraction overflow'
                                                        if -userInfo[idx][msg.sender].field_256 < 0:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                    else:
                                                        if poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / userInfo[idx][msg.sender].field_0 != poolInfo[idx].field_768:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                        if userInfo[idx][msg.sender].field_256 > poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12:
                                                            revert with 0, 'SafeMath: subtraction overflow'
                                                        if (poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12) - userInfo[idx][msg.sender].field_256 < 0:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                    if not userInfo[idx][msg.sender].field_0:
                                                        userInfo[idx][msg.sender].field_256 = 0
                                                    else:
                                                        if poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / userInfo[idx][msg.sender].field_0 != poolInfo[idx].field_768:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                        userInfo[idx][msg.sender].field_256 = poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12
                                            else:
                                                if (10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0] * userInfo[idx][address(msg.sender)].field_0) + (poolInfo[idx].field_768 * userInfo[idx][address(msg.sender)].field_0) / userInfo[idx][address(msg.sender)].field_0 != (10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768:
                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                if userInfo[idx][address(msg.sender)].field_256 > (10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0] * userInfo[idx][address(msg.sender)].field_0) + (poolInfo[idx].field_768 * userInfo[idx][address(msg.sender)].field_0) / 10^12:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if ((10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0] * userInfo[idx][address(msg.sender)].field_0) + (poolInfo[idx].field_768 * userInfo[idx][address(msg.sender)].field_0) / 10^12) - userInfo[idx][address(msg.sender)].field_256 > 0:
                                                    require idx < poolInfo.length
                                                    if block.timestamp <= poolInfo[idx].field_512:
                                                        require idx < poolInfo.length
                                                        mem[0] = 4
                                                        _21071 = mem[64]
                                                        mem[64] = mem[64] + 128
                                                        mem[_21071] = poolInfo[idx].field_0
                                                        mem[_21071 + 32] = poolInfo[idx].field_256
                                                        mem[_21071 + 64] = poolInfo[idx].field_512
                                                        mem[_21071 + 96] = poolInfo[idx].field_768
                                                    else:
                                                        mem[mem[64] + 4] = this.address
                                                        require ext_code.size(poolInfo[idx].field_0)
                                                        staticcall poolInfo[idx].field_0.0x70a08231 with:
                                                                gas gas_remaining wei
                                                               args this.address
                                                        mem[mem[64]] = ext_call.return_data[0]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if not ext_call.return_data[0]:
                                                            poolInfo[idx].field_512 = block.timestamp
                                                            require idx < poolInfo.length
                                                            mem[0] = 4
                                                            _22231 = mem[64]
                                                            mem[64] = mem[64] + 128
                                                            mem[_22231] = poolInfo[idx].field_0
                                                            mem[_22231 + 32] = poolInfo[idx].field_256
                                                            mem[_22231 + 64] = poolInfo[idx].field_512
                                                            mem[_22231 + 96] = poolInfo[idx].field_768
                                                        else:
                                                            if not totalAllocPoint:
                                                                poolInfo[idx].field_512 = block.timestamp
                                                                require idx < poolInfo.length
                                                                mem[0] = 4
                                                                _22400 = mem[64]
                                                                mem[64] = mem[64] + 128
                                                                mem[_22400] = poolInfo[idx].field_0
                                                                mem[_22400 + 32] = poolInfo[idx].field_256
                                                                mem[_22400 + 64] = poolInfo[idx].field_512
                                                                mem[_22400 + 96] = poolInfo[idx].field_768
                                                            else:
                                                                if poolInfo[idx].field_512 > block.timestamp:
                                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                                if not block.timestamp - poolInfo[idx].field_512:
                                                                    if totalAllocPoint <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    require totalAllocPoint
                                                                    if not 0 / totalAllocPoint:
                                                                        if ext_call.return_data[0] <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        require ext_call.return_data[0]
                                                                        if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                            revert with 0, 'SafeMath: addition overflow'
                                                                        poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                                        poolInfo[idx].field_512 = block.timestamp
                                                                        require idx < poolInfo.length
                                                                        mem[0] = 4
                                                                        _29448 = mem[64]
                                                                        mem[64] = mem[64] + 128
                                                                        mem[_29448] = poolInfo[idx].field_0
                                                                        mem[_29448 + 32] = poolInfo[idx].field_256
                                                                        mem[_29448 + 64] = poolInfo[idx].field_512
                                                                        mem[_29448 + 96] = poolInfo[idx].field_768
                                                                    else:
                                                                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                        if ext_call.return_data[0] <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        require ext_call.return_data[0]
                                                                        if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                            revert with 0, 'SafeMath: addition overflow'
                                                                        poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                                        poolInfo[idx].field_512 = block.timestamp
                                                                        require idx < poolInfo.length
                                                                        mem[0] = 4
                                                                        _29759 = mem[64]
                                                                        mem[64] = mem[64] + 128
                                                                        mem[_29759] = poolInfo[idx].field_0
                                                                        mem[_29759 + 32] = poolInfo[idx].field_256
                                                                        mem[_29759 + 64] = poolInfo[idx].field_512
                                                                        mem[_29759 + 96] = poolInfo[idx].field_768
                                                                else:
                                                                    if (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond) / block.timestamp - poolInfo[idx].field_512 != rewardsPerSecond:
                                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                    if not (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond):
                                                                        if totalAllocPoint <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        require totalAllocPoint
                                                                        if not 0 / totalAllocPoint:
                                                                            if ext_call.return_data[0] <= 0:
                                                                                revert with 0, 'SafeMath: division by zero'
                                                                            require ext_call.return_data[0]
                                                                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                                revert with 0, 'SafeMath: addition overflow'
                                                                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                                            poolInfo[idx].field_512 = block.timestamp
                                                                            require idx < poolInfo.length
                                                                            mem[0] = 4
                                                                            _29754 = mem[64]
                                                                            mem[64] = mem[64] + 128
                                                                            mem[_29754] = poolInfo[idx].field_0
                                                                            mem[_29754 + 32] = poolInfo[idx].field_256
                                                                            mem[_29754 + 64] = poolInfo[idx].field_512
                                                                            mem[_29754 + 96] = poolInfo[idx].field_768
                                                                        else:
                                                                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                            if ext_call.return_data[0] <= 0:
                                                                                revert with 0, 'SafeMath: division by zero'
                                                                            require ext_call.return_data[0]
                                                                            if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                                revert with 0, 'SafeMath: addition overflow'
                                                                            poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                                            poolInfo[idx].field_512 = block.timestamp
                                                                            require idx < poolInfo.length
                                                                            mem[0] = 4
                                                                            _29984 = mem[64]
                                                                            mem[64] = mem[64] + 128
                                                                            mem[_29984] = poolInfo[idx].field_0
                                                                            mem[_29984 + 32] = poolInfo[idx].field_256
                                                                            mem[_29984 + 64] = poolInfo[idx].field_512
                                                                            mem[_29984 + 96] = poolInfo[idx].field_768
                                                                    else:
                                                                        if (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond) != poolInfo[idx].field_256:
                                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                        if totalAllocPoint <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        require totalAllocPoint
                                                                        if not (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint:
                                                                            if ext_call.return_data[0] <= 0:
                                                                                revert with 0, 'SafeMath: division by zero'
                                                                            require ext_call.return_data[0]
                                                                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                                revert with 0, 'SafeMath: addition overflow'
                                                                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                                            poolInfo[idx].field_512 = block.timestamp
                                                                            require idx < poolInfo.length
                                                                            mem[0] = 4
                                                                            _29979 = mem[64]
                                                                            mem[64] = mem[64] + 128
                                                                            mem[_29979] = poolInfo[idx].field_0
                                                                            mem[_29979 + 32] = poolInfo[idx].field_256
                                                                            mem[_29979 + 64] = poolInfo[idx].field_512
                                                                            mem[_29979 + 96] = poolInfo[idx].field_768
                                                                        else:
                                                                            if 10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                            if ext_call.return_data[0] <= 0:
                                                                                revert with 0, 'SafeMath: division by zero'
                                                                            require ext_call.return_data[0]
                                                                            if (10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                                revert with 0, 'SafeMath: addition overflow'
                                                                            poolInfo[idx].field_768 += 10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                                                                            poolInfo[idx].field_512 = block.timestamp
                                                                            require idx < poolInfo.length
                                                                            mem[0] = 4
                                                                            _30152 = mem[64]
                                                                            mem[64] = mem[64] + 128
                                                                            mem[_30152] = poolInfo[idx].field_0
                                                                            mem[_30152 + 32] = poolInfo[idx].field_256
                                                                            mem[_30152 + 64] = poolInfo[idx].field_512
                                                                            mem[_30152 + 96] = poolInfo[idx].field_768
                                                    mem[0] = msg.sender
                                                    mem[32] = sha3(idx, 6)
                                                    if not userInfo[idx][msg.sender].field_0:
                                                        if userInfo[idx][msg.sender].field_256 > 0:
                                                            revert with 0, 'SafeMath: subtraction overflow'
                                                        if -userInfo[idx][msg.sender].field_256 < 0:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                    else:
                                                        if poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / userInfo[idx][msg.sender].field_0 != poolInfo[idx].field_768:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                        if userInfo[idx][msg.sender].field_256 > poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12:
                                                            revert with 0, 'SafeMath: subtraction overflow'
                                                        if (poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12) - userInfo[idx][msg.sender].field_256 < 0:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                    if not userInfo[idx][msg.sender].field_0:
                                                        userInfo[idx][msg.sender].field_256 = 0
                                                    else:
                                                        if poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / userInfo[idx][msg.sender].field_0 != poolInfo[idx].field_768:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                        userInfo[idx][msg.sender].field_256 = poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12
                idx = idx + 1
                continue 
        else:
            require sub_334d0bbd.length - 1 < sub_334d0bbd.length
            mem[64] = 160
            if startTime > block.timestamp:
                revert with 0, 'SafeMath: subtraction overflow'
            if block.timestamp - startTime <= sub_334d0bbd[sub_334d0bbd.length].field_0:
                idx = 0
                while idx < poolInfo.length:
                    mem[0] = msg.sender
                    mem[32] = sha3(idx, 6)
                    _17558 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_17558] = userInfo[idx][address(msg.sender)].field_0
                    mem[_17558 + 32] = userInfo[idx][address(msg.sender)].field_256
                    if userInfo[idx][address(msg.sender)].field_0:
                        require idx < poolInfo.length
                        mem[0] = 4
                        _17571 = mem[64]
                        mem[64] = mem[64] + 128
                        mem[_17571] = poolInfo[idx].field_0
                        mem[_17571 + 32] = poolInfo[idx].field_256
                        mem[_17571 + 64] = poolInfo[idx].field_512
                        mem[_17571 + 96] = poolInfo[idx].field_768
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(poolInfo[idx].field_0)
                        staticcall poolInfo[idx].field_0.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if block.timestamp <= poolInfo[idx].field_512:
                            if not userInfo[idx][address(msg.sender)].field_0:
                                if userInfo[idx][address(msg.sender)].field_256 > 0:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if -userInfo[idx][address(msg.sender)].field_256 > 0:
                                    require idx < poolInfo.length
                                    if block.timestamp <= poolInfo[idx].field_512:
                                        require idx < poolInfo.length
                                        mem[0] = 4
                                        _17827 = mem[64]
                                        mem[64] = mem[64] + 128
                                        mem[_17827] = poolInfo[idx].field_0
                                        mem[_17827 + 32] = poolInfo[idx].field_256
                                        mem[_17827 + 64] = poolInfo[idx].field_512
                                        mem[_17827 + 96] = poolInfo[idx].field_768
                                    else:
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(poolInfo[idx].field_0)
                                        staticcall poolInfo[idx].field_0.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            poolInfo[idx].field_512 = block.timestamp
                                            require idx < poolInfo.length
                                            mem[0] = 4
                                            _18039 = mem[64]
                                            mem[64] = mem[64] + 128
                                            mem[_18039] = poolInfo[idx].field_0
                                            mem[_18039 + 32] = poolInfo[idx].field_256
                                            mem[_18039 + 64] = poolInfo[idx].field_512
                                            mem[_18039 + 96] = poolInfo[idx].field_768
                                        else:
                                            if not totalAllocPoint:
                                                poolInfo[idx].field_512 = block.timestamp
                                                require idx < poolInfo.length
                                                mem[0] = 4
                                                _18117 = mem[64]
                                                mem[64] = mem[64] + 128
                                                mem[_18117] = poolInfo[idx].field_0
                                                mem[_18117 + 32] = poolInfo[idx].field_256
                                                mem[_18117 + 64] = poolInfo[idx].field_512
                                                mem[_18117 + 96] = poolInfo[idx].field_768
                                            else:
                                                if poolInfo[idx].field_512 > block.timestamp:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if not block.timestamp - poolInfo[idx].field_512:
                                                    if totalAllocPoint <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalAllocPoint
                                                    if not 0 / totalAllocPoint:
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                        poolInfo[idx].field_512 = block.timestamp
                                                        require idx < poolInfo.length
                                                        mem[0] = 4
                                                        _20701 = mem[64]
                                                        mem[64] = mem[64] + 128
                                                        mem[_20701] = poolInfo[idx].field_0
                                                        mem[_20701 + 32] = poolInfo[idx].field_256
                                                        mem[_20701 + 64] = poolInfo[idx].field_512
                                                        mem[_20701 + 96] = poolInfo[idx].field_768
                                                    else:
                                                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                        poolInfo[idx].field_512 = block.timestamp
                                                        require idx < poolInfo.length
                                                        mem[0] = 4
                                                        _20890 = mem[64]
                                                        mem[64] = mem[64] + 128
                                                        mem[_20890] = poolInfo[idx].field_0
                                                        mem[_20890 + 32] = poolInfo[idx].field_256
                                                        mem[_20890 + 64] = poolInfo[idx].field_512
                                                        mem[_20890 + 96] = poolInfo[idx].field_768
                                                else:
                                                    if (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond) / block.timestamp - poolInfo[idx].field_512 != rewardsPerSecond:
                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                    if not (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond):
                                                        if totalAllocPoint <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require totalAllocPoint
                                                        if not 0 / totalAllocPoint:
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                            poolInfo[idx].field_512 = block.timestamp
                                                            require idx < poolInfo.length
                                                            mem[0] = 4
                                                            _20885 = mem[64]
                                                            mem[64] = mem[64] + 128
                                                            mem[_20885] = poolInfo[idx].field_0
                                                            mem[_20885 + 32] = poolInfo[idx].field_256
                                                            mem[_20885 + 64] = poolInfo[idx].field_512
                                                            mem[_20885 + 96] = poolInfo[idx].field_768
                                                        else:
                                                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                            poolInfo[idx].field_512 = block.timestamp
                                                            require idx < poolInfo.length
                                                            mem[0] = 4
                                                            _21093 = mem[64]
                                                            mem[64] = mem[64] + 128
                                                            mem[_21093] = poolInfo[idx].field_0
                                                            mem[_21093 + 32] = poolInfo[idx].field_256
                                                            mem[_21093 + 64] = poolInfo[idx].field_512
                                                            mem[_21093 + 96] = poolInfo[idx].field_768
                                                    else:
                                                        if (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond) != poolInfo[idx].field_256:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                        if totalAllocPoint <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require totalAllocPoint
                                                        if not (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint:
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                            poolInfo[idx].field_512 = block.timestamp
                                                            require idx < poolInfo.length
                                                            mem[0] = 4
                                                            _21088 = mem[64]
                                                            mem[64] = mem[64] + 128
                                                            mem[_21088] = poolInfo[idx].field_0
                                                            mem[_21088 + 32] = poolInfo[idx].field_256
                                                            mem[_21088 + 64] = poolInfo[idx].field_512
                                                            mem[_21088 + 96] = poolInfo[idx].field_768
                                                        else:
                                                            if 10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                                                            poolInfo[idx].field_512 = block.timestamp
                                                            require idx < poolInfo.length
                                                            mem[0] = 4
                                                            _21315 = mem[64]
                                                            mem[64] = mem[64] + 128
                                                            mem[_21315] = poolInfo[idx].field_0
                                                            mem[_21315 + 32] = poolInfo[idx].field_256
                                                            mem[_21315 + 64] = poolInfo[idx].field_512
                                                            mem[_21315 + 96] = poolInfo[idx].field_768
                                    mem[0] = msg.sender
                                    mem[32] = sha3(idx, 6)
                                    if not userInfo[idx][msg.sender].field_0:
                                        if userInfo[idx][msg.sender].field_256 > 0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if -userInfo[idx][msg.sender].field_256 < 0:
                                            revert with 0, 'SafeMath: addition overflow'
                                    else:
                                        if poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / userInfo[idx][msg.sender].field_0 != poolInfo[idx].field_768:
                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if userInfo[idx][msg.sender].field_256 > poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if (poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12) - userInfo[idx][msg.sender].field_256 < 0:
                                            revert with 0, 'SafeMath: addition overflow'
                                    if not userInfo[idx][msg.sender].field_0:
                                        userInfo[idx][msg.sender].field_256 = 0
                                    else:
                                        if poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / userInfo[idx][msg.sender].field_0 != poolInfo[idx].field_768:
                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        userInfo[idx][msg.sender].field_256 = poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12
                            else:
                                if poolInfo[idx].field_768 * userInfo[idx][address(msg.sender)].field_0 / userInfo[idx][address(msg.sender)].field_0 != poolInfo[idx].field_768:
                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                if userInfo[idx][address(msg.sender)].field_256 > poolInfo[idx].field_768 * userInfo[idx][address(msg.sender)].field_0 / 10^12:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if (poolInfo[idx].field_768 * userInfo[idx][address(msg.sender)].field_0 / 10^12) - userInfo[idx][address(msg.sender)].field_256 > 0:
                                    require idx < poolInfo.length
                                    if block.timestamp <= poolInfo[idx].field_512:
                                        require idx < poolInfo.length
                                        mem[0] = 4
                                        _17872 = mem[64]
                                        mem[64] = mem[64] + 128
                                        mem[_17872] = poolInfo[idx].field_0
                                        mem[_17872 + 32] = poolInfo[idx].field_256
                                        mem[_17872 + 64] = poolInfo[idx].field_512
                                        mem[_17872 + 96] = poolInfo[idx].field_768
                                    else:
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(poolInfo[idx].field_0)
                                        staticcall poolInfo[idx].field_0.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            poolInfo[idx].field_512 = block.timestamp
                                            require idx < poolInfo.length
                                            mem[0] = 4
                                            _18110 = mem[64]
                                            mem[64] = mem[64] + 128
                                            mem[_18110] = poolInfo[idx].field_0
                                            mem[_18110 + 32] = poolInfo[idx].field_256
                                            mem[_18110 + 64] = poolInfo[idx].field_512
                                            mem[_18110 + 96] = poolInfo[idx].field_768
                                        else:
                                            if not totalAllocPoint:
                                                poolInfo[idx].field_512 = block.timestamp
                                                require idx < poolInfo.length
                                                mem[0] = 4
                                                _18201 = mem[64]
                                                mem[64] = mem[64] + 128
                                                mem[_18201] = poolInfo[idx].field_0
                                                mem[_18201 + 32] = poolInfo[idx].field_256
                                                mem[_18201 + 64] = poolInfo[idx].field_512
                                                mem[_18201 + 96] = poolInfo[idx].field_768
                                            else:
                                                if poolInfo[idx].field_512 > block.timestamp:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if not block.timestamp - poolInfo[idx].field_512:
                                                    if totalAllocPoint <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalAllocPoint
                                                    if not 0 / totalAllocPoint:
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                        poolInfo[idx].field_512 = block.timestamp
                                                        require idx < poolInfo.length
                                                        mem[0] = 4
                                                        _20880 = mem[64]
                                                        mem[64] = mem[64] + 128
                                                        mem[_20880] = poolInfo[idx].field_0
                                                        mem[_20880 + 32] = poolInfo[idx].field_256
                                                        mem[_20880 + 64] = poolInfo[idx].field_512
                                                        mem[_20880 + 96] = poolInfo[idx].field_768
                                                    else:
                                                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                        poolInfo[idx].field_512 = block.timestamp
                                                        require idx < poolInfo.length
                                                        mem[0] = 4
                                                        _21083 = mem[64]
                                                        mem[64] = mem[64] + 128
                                                        mem[_21083] = poolInfo[idx].field_0
                                                        mem[_21083 + 32] = poolInfo[idx].field_256
                                                        mem[_21083 + 64] = poolInfo[idx].field_512
                                                        mem[_21083 + 96] = poolInfo[idx].field_768
                                                else:
                                                    if (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond) / block.timestamp - poolInfo[idx].field_512 != rewardsPerSecond:
                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                    if not (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond):
                                                        if totalAllocPoint <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require totalAllocPoint
                                                        if not 0 / totalAllocPoint:
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                            poolInfo[idx].field_512 = block.timestamp
                                                            require idx < poolInfo.length
                                                            mem[0] = 4
                                                            _21078 = mem[64]
                                                            mem[64] = mem[64] + 128
                                                            mem[_21078] = poolInfo[idx].field_0
                                                            mem[_21078 + 32] = poolInfo[idx].field_256
                                                            mem[_21078 + 64] = poolInfo[idx].field_512
                                                            mem[_21078 + 96] = poolInfo[idx].field_768
                                                        else:
                                                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                            poolInfo[idx].field_512 = block.timestamp
                                                            require idx < poolInfo.length
                                                            mem[0] = 4
                                                            _21310 = mem[64]
                                                            mem[64] = mem[64] + 128
                                                            mem[_21310] = poolInfo[idx].field_0
                                                            mem[_21310 + 32] = poolInfo[idx].field_256
                                                            mem[_21310 + 64] = poolInfo[idx].field_512
                                                            mem[_21310 + 96] = poolInfo[idx].field_768
                                                    else:
                                                        if (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond) != poolInfo[idx].field_256:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                        if totalAllocPoint <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require totalAllocPoint
                                                        if not (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint:
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                            poolInfo[idx].field_512 = block.timestamp
                                                            require idx < poolInfo.length
                                                            mem[0] = 4
                                                            _21305 = mem[64]
                                                            mem[64] = mem[64] + 128
                                                            mem[_21305] = poolInfo[idx].field_0
                                                            mem[_21305 + 32] = poolInfo[idx].field_256
                                                            mem[_21305 + 64] = poolInfo[idx].field_512
                                                            mem[_21305 + 96] = poolInfo[idx].field_768
                                                        else:
                                                            if 10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                                                            poolInfo[idx].field_512 = block.timestamp
                                                            require idx < poolInfo.length
                                                            mem[0] = 4
                                                            _21562 = mem[64]
                                                            mem[64] = mem[64] + 128
                                                            mem[_21562] = poolInfo[idx].field_0
                                                            mem[_21562 + 32] = poolInfo[idx].field_256
                                                            mem[_21562 + 64] = poolInfo[idx].field_512
                                                            mem[_21562 + 96] = poolInfo[idx].field_768
                                    mem[0] = msg.sender
                                    mem[32] = sha3(idx, 6)
                                    if not userInfo[idx][msg.sender].field_0:
                                        if userInfo[idx][msg.sender].field_256 > 0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if -userInfo[idx][msg.sender].field_256 < 0:
                                            revert with 0, 'SafeMath: addition overflow'
                                    else:
                                        if poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / userInfo[idx][msg.sender].field_0 != poolInfo[idx].field_768:
                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if userInfo[idx][msg.sender].field_256 > poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if (poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12) - userInfo[idx][msg.sender].field_256 < 0:
                                            revert with 0, 'SafeMath: addition overflow'
                                    if not userInfo[idx][msg.sender].field_0:
                                        userInfo[idx][msg.sender].field_256 = 0
                                    else:
                                        if poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / userInfo[idx][msg.sender].field_0 != poolInfo[idx].field_768:
                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        userInfo[idx][msg.sender].field_256 = poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12
                        else:
                            if not ext_call.return_data[0]:
                                if not userInfo[idx][address(msg.sender)].field_0:
                                    if userInfo[idx][address(msg.sender)].field_256 > 0:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if -userInfo[idx][address(msg.sender)].field_256 > 0:
                                        require idx < poolInfo.length
                                        if block.timestamp <= poolInfo[idx].field_512:
                                            require idx < poolInfo.length
                                            mem[0] = 4
                                            _17879 = mem[64]
                                            mem[64] = mem[64] + 128
                                            mem[_17879] = poolInfo[idx].field_0
                                            mem[_17879 + 32] = poolInfo[idx].field_256
                                            mem[_17879 + 64] = poolInfo[idx].field_512
                                            mem[_17879 + 96] = poolInfo[idx].field_768
                                        else:
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(poolInfo[idx].field_0)
                                            staticcall poolInfo[idx].field_0.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                poolInfo[idx].field_512 = block.timestamp
                                                require idx < poolInfo.length
                                                mem[0] = 4
                                                _18124 = mem[64]
                                                mem[64] = mem[64] + 128
                                                mem[_18124] = poolInfo[idx].field_0
                                                mem[_18124 + 32] = poolInfo[idx].field_256
                                                mem[_18124 + 64] = poolInfo[idx].field_512
                                                mem[_18124 + 96] = poolInfo[idx].field_768
                                            else:
                                                if not totalAllocPoint:
                                                    poolInfo[idx].field_512 = block.timestamp
                                                    require idx < poolInfo.length
                                                    mem[0] = 4
                                                    _18213 = mem[64]
                                                    mem[64] = mem[64] + 128
                                                    mem[_18213] = poolInfo[idx].field_0
                                                    mem[_18213 + 32] = poolInfo[idx].field_256
                                                    mem[_18213 + 64] = poolInfo[idx].field_512
                                                    mem[_18213 + 96] = poolInfo[idx].field_768
                                                else:
                                                    if poolInfo[idx].field_512 > block.timestamp:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if not block.timestamp - poolInfo[idx].field_512:
                                                        if totalAllocPoint <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require totalAllocPoint
                                                        if not 0 / totalAllocPoint:
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                            poolInfo[idx].field_512 = block.timestamp
                                                            require idx < poolInfo.length
                                                            mem[0] = 4
                                                            _20901 = mem[64]
                                                            mem[64] = mem[64] + 128
                                                            mem[_20901] = poolInfo[idx].field_0
                                                            mem[_20901 + 32] = poolInfo[idx].field_256
                                                            mem[_20901 + 64] = poolInfo[idx].field_512
                                                            mem[_20901 + 96] = poolInfo[idx].field_768
                                                        else:
                                                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                            poolInfo[idx].field_512 = block.timestamp
                                                            require idx < poolInfo.length
                                                            mem[0] = 4
                                                            _21110 = mem[64]
                                                            mem[64] = mem[64] + 128
                                                            mem[_21110] = poolInfo[idx].field_0
                                                            mem[_21110 + 32] = poolInfo[idx].field_256
                                                            mem[_21110 + 64] = poolInfo[idx].field_512
                                                            mem[_21110 + 96] = poolInfo[idx].field_768
                                                    else:
                                                        if (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond) / block.timestamp - poolInfo[idx].field_512 != rewardsPerSecond:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                        if not (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond):
                                                            if totalAllocPoint <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require totalAllocPoint
                                                            if not 0 / totalAllocPoint:
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                                poolInfo[idx].field_512 = block.timestamp
                                                                require idx < poolInfo.length
                                                                mem[0] = 4
                                                                _21105 = mem[64]
                                                                mem[64] = mem[64] + 128
                                                                mem[_21105] = poolInfo[idx].field_0
                                                                mem[_21105 + 32] = poolInfo[idx].field_256
                                                                mem[_21105 + 64] = poolInfo[idx].field_512
                                                                mem[_21105 + 96] = poolInfo[idx].field_768
                                                            else:
                                                                if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                                poolInfo[idx].field_512 = block.timestamp
                                                                require idx < poolInfo.length
                                                                mem[0] = 4
                                                                _21335 = mem[64]
                                                                mem[64] = mem[64] + 128
                                                                mem[_21335] = poolInfo[idx].field_0
                                                                mem[_21335 + 32] = poolInfo[idx].field_256
                                                                mem[_21335 + 64] = poolInfo[idx].field_512
                                                                mem[_21335 + 96] = poolInfo[idx].field_768
                                                        else:
                                                            if (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond) != poolInfo[idx].field_256:
                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                            if totalAllocPoint <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require totalAllocPoint
                                                            if not (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint:
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                                poolInfo[idx].field_512 = block.timestamp
                                                                require idx < poolInfo.length
                                                                mem[0] = 4
                                                                _21330 = mem[64]
                                                                mem[64] = mem[64] + 128
                                                                mem[_21330] = poolInfo[idx].field_0
                                                                mem[_21330 + 32] = poolInfo[idx].field_256
                                                                mem[_21330 + 64] = poolInfo[idx].field_512
                                                                mem[_21330 + 96] = poolInfo[idx].field_768
                                                            else:
                                                                if 10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                                                                poolInfo[idx].field_512 = block.timestamp
                                                                require idx < poolInfo.length
                                                                mem[0] = 4
                                                                _21579 = mem[64]
                                                                mem[64] = mem[64] + 128
                                                                mem[_21579] = poolInfo[idx].field_0
                                                                mem[_21579 + 32] = poolInfo[idx].field_256
                                                                mem[_21579 + 64] = poolInfo[idx].field_512
                                                                mem[_21579 + 96] = poolInfo[idx].field_768
                                        mem[0] = msg.sender
                                        mem[32] = sha3(idx, 6)
                                        if not userInfo[idx][msg.sender].field_0:
                                            if userInfo[idx][msg.sender].field_256 > 0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if -userInfo[idx][msg.sender].field_256 < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                        else:
                                            if poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / userInfo[idx][msg.sender].field_0 != poolInfo[idx].field_768:
                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if userInfo[idx][msg.sender].field_256 > poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if (poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12) - userInfo[idx][msg.sender].field_256 < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                        if not userInfo[idx][msg.sender].field_0:
                                            userInfo[idx][msg.sender].field_256 = 0
                                        else:
                                            if poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / userInfo[idx][msg.sender].field_0 != poolInfo[idx].field_768:
                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            userInfo[idx][msg.sender].field_256 = poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12
                                else:
                                    if poolInfo[idx].field_768 * userInfo[idx][address(msg.sender)].field_0 / userInfo[idx][address(msg.sender)].field_0 != poolInfo[idx].field_768:
                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    if userInfo[idx][address(msg.sender)].field_256 > poolInfo[idx].field_768 * userInfo[idx][address(msg.sender)].field_0 / 10^12:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if (poolInfo[idx].field_768 * userInfo[idx][address(msg.sender)].field_0 / 10^12) - userInfo[idx][address(msg.sender)].field_256 > 0:
                                        require idx < poolInfo.length
                                        if block.timestamp <= poolInfo[idx].field_512:
                                            require idx < poolInfo.length
                                            mem[0] = 4
                                            _17924 = mem[64]
                                            mem[64] = mem[64] + 128
                                            mem[_17924] = poolInfo[idx].field_0
                                            mem[_17924 + 32] = poolInfo[idx].field_256
                                            mem[_17924 + 64] = poolInfo[idx].field_512
                                            mem[_17924 + 96] = poolInfo[idx].field_768
                                        else:
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(poolInfo[idx].field_0)
                                            staticcall poolInfo[idx].field_0.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                poolInfo[idx].field_512 = block.timestamp
                                                require idx < poolInfo.length
                                                mem[0] = 4
                                                _18206 = mem[64]
                                                mem[64] = mem[64] + 128
                                                mem[_18206] = poolInfo[idx].field_0
                                                mem[_18206 + 32] = poolInfo[idx].field_256
                                                mem[_18206 + 64] = poolInfo[idx].field_512
                                                mem[_18206 + 96] = poolInfo[idx].field_768
                                            else:
                                                if not totalAllocPoint:
                                                    poolInfo[idx].field_512 = block.timestamp
                                                    require idx < poolInfo.length
                                                    mem[0] = 4
                                                    _18285 = mem[64]
                                                    mem[64] = mem[64] + 128
                                                    mem[_18285] = poolInfo[idx].field_0
                                                    mem[_18285 + 32] = poolInfo[idx].field_256
                                                    mem[_18285 + 64] = poolInfo[idx].field_512
                                                    mem[_18285 + 96] = poolInfo[idx].field_768
                                                else:
                                                    if poolInfo[idx].field_512 > block.timestamp:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if not block.timestamp - poolInfo[idx].field_512:
                                                        if totalAllocPoint <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require totalAllocPoint
                                                        if not 0 / totalAllocPoint:
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                            poolInfo[idx].field_512 = block.timestamp
                                                            require idx < poolInfo.length
                                                            mem[0] = 4
                                                            _21100 = mem[64]
                                                            mem[64] = mem[64] + 128
                                                            mem[_21100] = poolInfo[idx].field_0
                                                            mem[_21100 + 32] = poolInfo[idx].field_256
                                                            mem[_21100 + 64] = poolInfo[idx].field_512
                                                            mem[_21100 + 96] = poolInfo[idx].field_768
                                                        else:
                                                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                            poolInfo[idx].field_512 = block.timestamp
                                                            require idx < poolInfo.length
                                                            mem[0] = 4
                                                            _21325 = mem[64]
                                                            mem[64] = mem[64] + 128
                                                            mem[_21325] = poolInfo[idx].field_0
                                                            mem[_21325 + 32] = poolInfo[idx].field_256
                                                            mem[_21325 + 64] = poolInfo[idx].field_512
                                                            mem[_21325 + 96] = poolInfo[idx].field_768
                                                    else:
                                                        if (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond) / block.timestamp - poolInfo[idx].field_512 != rewardsPerSecond:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                        if not (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond):
                                                            if totalAllocPoint <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require totalAllocPoint
                                                            if not 0 / totalAllocPoint:
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                                poolInfo[idx].field_512 = block.timestamp
                                                                require idx < poolInfo.length
                                                                mem[0] = 4
                                                                _21320 = mem[64]
                                                                mem[64] = mem[64] + 128
                                                                mem[_21320] = poolInfo[idx].field_0
                                                                mem[_21320 + 32] = poolInfo[idx].field_256
                                                                mem[_21320 + 64] = poolInfo[idx].field_512
                                                                mem[_21320 + 96] = poolInfo[idx].field_768
                                                            else:
                                                                if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                                poolInfo[idx].field_512 = block.timestamp
                                                                require idx < poolInfo.length
                                                                mem[0] = 4
                                                                _21574 = mem[64]
                                                                mem[64] = mem[64] + 128
                                                                mem[_21574] = poolInfo[idx].field_0
                                                                mem[_21574 + 32] = poolInfo[idx].field_256
                                                                mem[_21574 + 64] = poolInfo[idx].field_512
                                                                mem[_21574 + 96] = poolInfo[idx].field_768
                                                        else:
                                                            if (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond) != poolInfo[idx].field_256:
                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                            if totalAllocPoint <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require totalAllocPoint
                                                            if not (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint:
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                                poolInfo[idx].field_512 = block.timestamp
                                                                require idx < poolInfo.length
                                                                mem[0] = 4
                                                                _21569 = mem[64]
                                                                mem[64] = mem[64] + 128
                                                                mem[_21569] = poolInfo[idx].field_0
                                                                mem[_21569 + 32] = poolInfo[idx].field_256
                                                                mem[_21569 + 64] = poolInfo[idx].field_512
                                                                mem[_21569 + 96] = poolInfo[idx].field_768
                                                            else:
                                                                if 10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                                                                poolInfo[idx].field_512 = block.timestamp
                                                                require idx < poolInfo.length
                                                                mem[0] = 4
                                                                _21830 = mem[64]
                                                                mem[64] = mem[64] + 128
                                                                mem[_21830] = poolInfo[idx].field_0
                                                                mem[_21830 + 32] = poolInfo[idx].field_256
                                                                mem[_21830 + 64] = poolInfo[idx].field_512
                                                                mem[_21830 + 96] = poolInfo[idx].field_768
                                        mem[0] = msg.sender
                                        mem[32] = sha3(idx, 6)
                                        if not userInfo[idx][msg.sender].field_0:
                                            if userInfo[idx][msg.sender].field_256 > 0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if -userInfo[idx][msg.sender].field_256 < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                        else:
                                            if poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / userInfo[idx][msg.sender].field_0 != poolInfo[idx].field_768:
                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if userInfo[idx][msg.sender].field_256 > poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if (poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12) - userInfo[idx][msg.sender].field_256 < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                        if not userInfo[idx][msg.sender].field_0:
                                            userInfo[idx][msg.sender].field_256 = 0
                                        else:
                                            if poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / userInfo[idx][msg.sender].field_0 != poolInfo[idx].field_768:
                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            userInfo[idx][msg.sender].field_256 = poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12
                            else:
                                if not totalAllocPoint:
                                    if not userInfo[idx][address(msg.sender)].field_0:
                                        if userInfo[idx][address(msg.sender)].field_256 > 0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if -userInfo[idx][address(msg.sender)].field_256 > 0:
                                            require idx < poolInfo.length
                                            if block.timestamp <= poolInfo[idx].field_512:
                                                require idx < poolInfo.length
                                                mem[0] = 4
                                                _17931 = mem[64]
                                                mem[64] = mem[64] + 128
                                                mem[_17931] = poolInfo[idx].field_0
                                                mem[_17931 + 32] = poolInfo[idx].field_256
                                                mem[_17931 + 64] = poolInfo[idx].field_512
                                                mem[_17931 + 96] = poolInfo[idx].field_768
                                            else:
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(poolInfo[idx].field_0)
                                                staticcall poolInfo[idx].field_0.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if not ext_call.return_data[0]:
                                                    poolInfo[idx].field_512 = block.timestamp
                                                    require idx < poolInfo.length
                                                    mem[0] = 4
                                                    _18220 = mem[64]
                                                    mem[64] = mem[64] + 128
                                                    mem[_18220] = poolInfo[idx].field_0
                                                    mem[_18220 + 32] = poolInfo[idx].field_256
                                                    mem[_18220 + 64] = poolInfo[idx].field_512
                                                    mem[_18220 + 96] = poolInfo[idx].field_768
                                                else:
                                                    if not totalAllocPoint:
                                                        poolInfo[idx].field_512 = block.timestamp
                                                        require idx < poolInfo.length
                                                        mem[0] = 4
                                                        _18297 = mem[64]
                                                        mem[64] = mem[64] + 128
                                                        mem[_18297] = poolInfo[idx].field_0
                                                        mem[_18297 + 32] = poolInfo[idx].field_256
                                                        mem[_18297 + 64] = poolInfo[idx].field_512
                                                        mem[_18297 + 96] = poolInfo[idx].field_768
                                                    else:
                                                        if poolInfo[idx].field_512 > block.timestamp:
                                                            revert with 0, 'SafeMath: subtraction overflow'
                                                        if not block.timestamp - poolInfo[idx].field_512:
                                                            if totalAllocPoint <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require totalAllocPoint
                                                            if not 0 / totalAllocPoint:
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                                poolInfo[idx].field_512 = block.timestamp
                                                                require idx < poolInfo.length
                                                                mem[0] = 4
                                                                _21121 = mem[64]
                                                                mem[64] = mem[64] + 128
                                                                mem[_21121] = poolInfo[idx].field_0
                                                                mem[_21121 + 32] = poolInfo[idx].field_256
                                                                mem[_21121 + 64] = poolInfo[idx].field_512
                                                                mem[_21121 + 96] = poolInfo[idx].field_768
                                                            else:
                                                                if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                                poolInfo[idx].field_512 = block.timestamp
                                                                require idx < poolInfo.length
                                                                mem[0] = 4
                                                                _21352 = mem[64]
                                                                mem[64] = mem[64] + 128
                                                                mem[_21352] = poolInfo[idx].field_0
                                                                mem[_21352 + 32] = poolInfo[idx].field_256
                                                                mem[_21352 + 64] = poolInfo[idx].field_512
                                                                mem[_21352 + 96] = poolInfo[idx].field_768
                                                        else:
                                                            if (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond) / block.timestamp - poolInfo[idx].field_512 != rewardsPerSecond:
                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                            if not (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond):
                                                                if totalAllocPoint <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require totalAllocPoint
                                                                if not 0 / totalAllocPoint:
                                                                    if ext_call.return_data[0] <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    require ext_call.return_data[0]
                                                                    if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                                    poolInfo[idx].field_512 = block.timestamp
                                                                    require idx < poolInfo.length
                                                                    mem[0] = 4
                                                                    _21347 = mem[64]
                                                                    mem[64] = mem[64] + 128
                                                                    mem[_21347] = poolInfo[idx].field_0
                                                                    mem[_21347 + 32] = poolInfo[idx].field_256
                                                                    mem[_21347 + 64] = poolInfo[idx].field_512
                                                                    mem[_21347 + 96] = poolInfo[idx].field_768
                                                                else:
                                                                    if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                    if ext_call.return_data[0] <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    require ext_call.return_data[0]
                                                                    if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                                    poolInfo[idx].field_512 = block.timestamp
                                                                    require idx < poolInfo.length
                                                                    mem[0] = 4
                                                                    _21599 = mem[64]
                                                                    mem[64] = mem[64] + 128
                                                                    mem[_21599] = poolInfo[idx].field_0
                                                                    mem[_21599 + 32] = poolInfo[idx].field_256
                                                                    mem[_21599 + 64] = poolInfo[idx].field_512
                                                                    mem[_21599 + 96] = poolInfo[idx].field_768
                                                            else:
                                                                if (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond) != poolInfo[idx].field_256:
                                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                if totalAllocPoint <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require totalAllocPoint
                                                                if not (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint:
                                                                    if ext_call.return_data[0] <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    require ext_call.return_data[0]
                                                                    if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                                    poolInfo[idx].field_512 = block.timestamp
                                                                    require idx < poolInfo.length
                                                                    mem[0] = 4
                                                                    _21594 = mem[64]
                                                                    mem[64] = mem[64] + 128
                                                                    mem[_21594] = poolInfo[idx].field_0
                                                                    mem[_21594 + 32] = poolInfo[idx].field_256
                                                                    mem[_21594 + 64] = poolInfo[idx].field_512
                                                                    mem[_21594 + 96] = poolInfo[idx].field_768
                                                                else:
                                                                    if 10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                    if ext_call.return_data[0] <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    require ext_call.return_data[0]
                                                                    if (10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    poolInfo[idx].field_768 += 10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                                                                    poolInfo[idx].field_512 = block.timestamp
                                                                    require idx < poolInfo.length
                                                                    mem[0] = 4
                                                                    _21847 = mem[64]
                                                                    mem[64] = mem[64] + 128
                                                                    mem[_21847] = poolInfo[idx].field_0
                                                                    mem[_21847 + 32] = poolInfo[idx].field_256
                                                                    mem[_21847 + 64] = poolInfo[idx].field_512
                                                                    mem[_21847 + 96] = poolInfo[idx].field_768
                                            mem[0] = msg.sender
                                            mem[32] = sha3(idx, 6)
                                            if not userInfo[idx][msg.sender].field_0:
                                                if userInfo[idx][msg.sender].field_256 > 0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if -userInfo[idx][msg.sender].field_256 < 0:
                                                    revert with 0, 'SafeMath: addition overflow'
                                            else:
                                                if poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / userInfo[idx][msg.sender].field_0 != poolInfo[idx].field_768:
                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                if userInfo[idx][msg.sender].field_256 > poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if (poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12) - userInfo[idx][msg.sender].field_256 < 0:
                                                    revert with 0, 'SafeMath: addition overflow'
                                            if not userInfo[idx][msg.sender].field_0:
                                                userInfo[idx][msg.sender].field_256 = 0
                                            else:
                                                if poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / userInfo[idx][msg.sender].field_0 != poolInfo[idx].field_768:
                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                userInfo[idx][msg.sender].field_256 = poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12
                                    else:
                                        if poolInfo[idx].field_768 * userInfo[idx][address(msg.sender)].field_0 / userInfo[idx][address(msg.sender)].field_0 != poolInfo[idx].field_768:
                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if userInfo[idx][address(msg.sender)].field_256 > poolInfo[idx].field_768 * userInfo[idx][address(msg.sender)].field_0 / 10^12:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if (poolInfo[idx].field_768 * userInfo[idx][address(msg.sender)].field_0 / 10^12) - userInfo[idx][address(msg.sender)].field_256 > 0:
                                            require idx < poolInfo.length
                                            if block.timestamp <= poolInfo[idx].field_512:
                                                require idx < poolInfo.length
                                                mem[0] = 4
                                                _17965 = mem[64]
                                                mem[64] = mem[64] + 128
                                                mem[_17965] = poolInfo[idx].field_0
                                                mem[_17965 + 32] = poolInfo[idx].field_256
                                                mem[_17965 + 64] = poolInfo[idx].field_512
                                                mem[_17965 + 96] = poolInfo[idx].field_768
                                            else:
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(poolInfo[idx].field_0)
                                                staticcall poolInfo[idx].field_0.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if not ext_call.return_data[0]:
                                                    poolInfo[idx].field_512 = block.timestamp
                                                    require idx < poolInfo.length
                                                    mem[0] = 4
                                                    _18290 = mem[64]
                                                    mem[64] = mem[64] + 128
                                                    mem[_18290] = poolInfo[idx].field_0
                                                    mem[_18290 + 32] = poolInfo[idx].field_256
                                                    mem[_18290 + 64] = poolInfo[idx].field_512
                                                    mem[_18290 + 96] = poolInfo[idx].field_768
                                                else:
                                                    if not totalAllocPoint:
                                                        poolInfo[idx].field_512 = block.timestamp
                                                        require idx < poolInfo.length
                                                        mem[0] = 4
                                                        _18352 = mem[64]
                                                        mem[64] = mem[64] + 128
                                                        mem[_18352] = poolInfo[idx].field_0
                                                        mem[_18352 + 32] = poolInfo[idx].field_256
                                                        mem[_18352 + 64] = poolInfo[idx].field_512
                                                        mem[_18352 + 96] = poolInfo[idx].field_768
                                                    else:
                                                        if poolInfo[idx].field_512 > block.timestamp:
                                                            revert with 0, 'SafeMath: subtraction overflow'
                                                        if not block.timestamp - poolInfo[idx].field_512:
                                                            if totalAllocPoint <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require totalAllocPoint
                                                            if not 0 / totalAllocPoint:
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                                poolInfo[idx].field_512 = block.timestamp
                                                                require idx < poolInfo.length
                                                                mem[0] = 4
                                                                _21342 = mem[64]
                                                                mem[64] = mem[64] + 128
                                                                mem[_21342] = poolInfo[idx].field_0
                                                                mem[_21342 + 32] = poolInfo[idx].field_256
                                                                mem[_21342 + 64] = poolInfo[idx].field_512
                                                                mem[_21342 + 96] = poolInfo[idx].field_768
                                                            else:
                                                                if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                                poolInfo[idx].field_512 = block.timestamp
                                                                require idx < poolInfo.length
                                                                mem[0] = 4
                                                                _21589 = mem[64]
                                                                mem[64] = mem[64] + 128
                                                                mem[_21589] = poolInfo[idx].field_0
                                                                mem[_21589 + 32] = poolInfo[idx].field_256
                                                                mem[_21589 + 64] = poolInfo[idx].field_512
                                                                mem[_21589 + 96] = poolInfo[idx].field_768
                                                        else:
                                                            if (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond) / block.timestamp - poolInfo[idx].field_512 != rewardsPerSecond:
                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                            if not (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond):
                                                                if totalAllocPoint <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require totalAllocPoint
                                                                if not 0 / totalAllocPoint:
                                                                    if ext_call.return_data[0] <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    require ext_call.return_data[0]
                                                                    if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                                    poolInfo[idx].field_512 = block.timestamp
                                                                    require idx < poolInfo.length
                                                                    mem[0] = 4
                                                                    _21584 = mem[64]
                                                                    mem[64] = mem[64] + 128
                                                                    mem[_21584] = poolInfo[idx].field_0
                                                                    mem[_21584 + 32] = poolInfo[idx].field_256
                                                                    mem[_21584 + 64] = poolInfo[idx].field_512
                                                                    mem[_21584 + 96] = poolInfo[idx].field_768
                                                                else:
                                                                    if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                    if ext_call.return_data[0] <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    require ext_call.return_data[0]
                                                                    if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                                    poolInfo[idx].field_512 = block.timestamp
                                                                    require idx < poolInfo.length
                                                                    mem[0] = 4
                                                                    _21842 = mem[64]
                                                                    mem[64] = mem[64] + 128
                                                                    mem[_21842] = poolInfo[idx].field_0
                                                                    mem[_21842 + 32] = poolInfo[idx].field_256
                                                                    mem[_21842 + 64] = poolInfo[idx].field_512
                                                                    mem[_21842 + 96] = poolInfo[idx].field_768
                                                            else:
                                                                if (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond) != poolInfo[idx].field_256:
                                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                if totalAllocPoint <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require totalAllocPoint
                                                                if not (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint:
                                                                    if ext_call.return_data[0] <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    require ext_call.return_data[0]
                                                                    if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                                    poolInfo[idx].field_512 = block.timestamp
                                                                    require idx < poolInfo.length
                                                                    mem[0] = 4
                                                                    _21837 = mem[64]
                                                                    mem[64] = mem[64] + 128
                                                                    mem[_21837] = poolInfo[idx].field_0
                                                                    mem[_21837 + 32] = poolInfo[idx].field_256
                                                                    mem[_21837 + 64] = poolInfo[idx].field_512
                                                                    mem[_21837 + 96] = poolInfo[idx].field_768
                                                                else:
                                                                    if 10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                    if ext_call.return_data[0] <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    require ext_call.return_data[0]
                                                                    if (10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    poolInfo[idx].field_768 += 10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                                                                    poolInfo[idx].field_512 = block.timestamp
                                                                    require idx < poolInfo.length
                                                                    mem[0] = 4
                                                                    _22075 = mem[64]
                                                                    mem[64] = mem[64] + 128
                                                                    mem[_22075] = poolInfo[idx].field_0
                                                                    mem[_22075 + 32] = poolInfo[idx].field_256
                                                                    mem[_22075 + 64] = poolInfo[idx].field_512
                                                                    mem[_22075 + 96] = poolInfo[idx].field_768
                                            mem[0] = msg.sender
                                            mem[32] = sha3(idx, 6)
                                            if not userInfo[idx][msg.sender].field_0:
                                                if userInfo[idx][msg.sender].field_256 > 0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if -userInfo[idx][msg.sender].field_256 < 0:
                                                    revert with 0, 'SafeMath: addition overflow'
                                            else:
                                                if poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / userInfo[idx][msg.sender].field_0 != poolInfo[idx].field_768:
                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                if userInfo[idx][msg.sender].field_256 > poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if (poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12) - userInfo[idx][msg.sender].field_256 < 0:
                                                    revert with 0, 'SafeMath: addition overflow'
                                            if not userInfo[idx][msg.sender].field_0:
                                                userInfo[idx][msg.sender].field_256 = 0
                                            else:
                                                if poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / userInfo[idx][msg.sender].field_0 != poolInfo[idx].field_768:
                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                userInfo[idx][msg.sender].field_256 = poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12
                                else:
                                    if poolInfo[idx].field_512 > block.timestamp:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if not block.timestamp - poolInfo[idx].field_512:
                                        if totalAllocPoint <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require totalAllocPoint
                                        if not 0 / totalAllocPoint:
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if not userInfo[idx][address(msg.sender)].field_0:
                                                if userInfo[idx][address(msg.sender)].field_256 > 0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if -userInfo[idx][address(msg.sender)].field_256 > 0:
                                                    require idx < poolInfo.length
                                                    if block.timestamp <= poolInfo[idx].field_512:
                                                        require idx < poolInfo.length
                                                        mem[0] = 4
                                                        _20419 = mem[64]
                                                        mem[64] = mem[64] + 128
                                                        mem[_20419] = poolInfo[idx].field_0
                                                        mem[_20419 + 32] = poolInfo[idx].field_256
                                                        mem[_20419 + 64] = poolInfo[idx].field_512
                                                        mem[_20419 + 96] = poolInfo[idx].field_768
                                                    else:
                                                        mem[mem[64] + 4] = this.address
                                                        require ext_code.size(poolInfo[idx].field_0)
                                                        staticcall poolInfo[idx].field_0.0x70a08231 with:
                                                                gas gas_remaining wei
                                                               args this.address
                                                        mem[mem[64]] = ext_call.return_data[0]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if not ext_call.return_data[0]:
                                                            poolInfo[idx].field_512 = block.timestamp
                                                            require idx < poolInfo.length
                                                            mem[0] = 4
                                                            _21363 = mem[64]
                                                            mem[64] = mem[64] + 128
                                                            mem[_21363] = poolInfo[idx].field_0
                                                            mem[_21363 + 32] = poolInfo[idx].field_256
                                                            mem[_21363 + 64] = poolInfo[idx].field_512
                                                            mem[_21363 + 96] = poolInfo[idx].field_768
                                                        else:
                                                            if not totalAllocPoint:
                                                                poolInfo[idx].field_512 = block.timestamp
                                                                require idx < poolInfo.length
                                                                mem[0] = 4
                                                                _21633 = mem[64]
                                                                mem[64] = mem[64] + 128
                                                                mem[_21633] = poolInfo[idx].field_0
                                                                mem[_21633 + 32] = poolInfo[idx].field_256
                                                                mem[_21633 + 64] = poolInfo[idx].field_512
                                                                mem[_21633 + 96] = poolInfo[idx].field_768
                                                            else:
                                                                if poolInfo[idx].field_512 > block.timestamp:
                                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                                if not block.timestamp - poolInfo[idx].field_512:
                                                                    if totalAllocPoint <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    require totalAllocPoint
                                                                    if not 0 / totalAllocPoint:
                                                                        if ext_call.return_data[0] <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        require ext_call.return_data[0]
                                                                        if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                            revert with 0, 'SafeMath: addition overflow'
                                                                        poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                                        poolInfo[idx].field_512 = block.timestamp
                                                                        require idx < poolInfo.length
                                                                        mem[0] = 4
                                                                        _28318 = mem[64]
                                                                        mem[64] = mem[64] + 128
                                                                        mem[_28318] = poolInfo[idx].field_0
                                                                        mem[_28318 + 32] = poolInfo[idx].field_256
                                                                        mem[_28318 + 64] = poolInfo[idx].field_512
                                                                        mem[_28318 + 96] = poolInfo[idx].field_768
                                                                    else:
                                                                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                        if ext_call.return_data[0] <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        require ext_call.return_data[0]
                                                                        if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                            revert with 0, 'SafeMath: addition overflow'
                                                                        poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                                        poolInfo[idx].field_512 = block.timestamp
                                                                        require idx < poolInfo.length
                                                                        mem[0] = 4
                                                                        _28572 = mem[64]
                                                                        mem[64] = mem[64] + 128
                                                                        mem[_28572] = poolInfo[idx].field_0
                                                                        mem[_28572 + 32] = poolInfo[idx].field_256
                                                                        mem[_28572 + 64] = poolInfo[idx].field_512
                                                                        mem[_28572 + 96] = poolInfo[idx].field_768
                                                                else:
                                                                    if (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond) / block.timestamp - poolInfo[idx].field_512 != rewardsPerSecond:
                                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                    if not (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond):
                                                                        if totalAllocPoint <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        require totalAllocPoint
                                                                        if not 0 / totalAllocPoint:
                                                                            if ext_call.return_data[0] <= 0:
                                                                                revert with 0, 'SafeMath: division by zero'
                                                                            require ext_call.return_data[0]
                                                                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                                revert with 0, 'SafeMath: addition overflow'
                                                                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                                            poolInfo[idx].field_512 = block.timestamp
                                                                            require idx < poolInfo.length
                                                                            mem[0] = 4
                                                                            _28567 = mem[64]
                                                                            mem[64] = mem[64] + 128
                                                                            mem[_28567] = poolInfo[idx].field_0
                                                                            mem[_28567 + 32] = poolInfo[idx].field_256
                                                                            mem[_28567 + 64] = poolInfo[idx].field_512
                                                                            mem[_28567 + 96] = poolInfo[idx].field_768
                                                                        else:
                                                                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                            if ext_call.return_data[0] <= 0:
                                                                                revert with 0, 'SafeMath: division by zero'
                                                                            require ext_call.return_data[0]
                                                                            if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                                revert with 0, 'SafeMath: addition overflow'
                                                                            poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                                            poolInfo[idx].field_512 = block.timestamp
                                                                            require idx < poolInfo.length
                                                                            mem[0] = 4
                                                                            _28901 = mem[64]
                                                                            mem[64] = mem[64] + 128
                                                                            mem[_28901] = poolInfo[idx].field_0
                                                                            mem[_28901 + 32] = poolInfo[idx].field_256
                                                                            mem[_28901 + 64] = poolInfo[idx].field_512
                                                                            mem[_28901 + 96] = poolInfo[idx].field_768
                                                                    else:
                                                                        if (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond) != poolInfo[idx].field_256:
                                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                        if totalAllocPoint <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        require totalAllocPoint
                                                                        if not (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint:
                                                                            if ext_call.return_data[0] <= 0:
                                                                                revert with 0, 'SafeMath: division by zero'
                                                                            require ext_call.return_data[0]
                                                                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                                revert with 0, 'SafeMath: addition overflow'
                                                                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                                            poolInfo[idx].field_512 = block.timestamp
                                                                            require idx < poolInfo.length
                                                                            mem[0] = 4
                                                                            _28896 = mem[64]
                                                                            mem[64] = mem[64] + 128
                                                                            mem[_28896] = poolInfo[idx].field_0
                                                                            mem[_28896 + 32] = poolInfo[idx].field_256
                                                                            mem[_28896 + 64] = poolInfo[idx].field_512
                                                                            mem[_28896 + 96] = poolInfo[idx].field_768
                                                                        else:
                                                                            if 10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                            if ext_call.return_data[0] <= 0:
                                                                                revert with 0, 'SafeMath: division by zero'
                                                                            require ext_call.return_data[0]
                                                                            if (10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                                revert with 0, 'SafeMath: addition overflow'
                                                                            poolInfo[idx].field_768 += 10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                                                                            poolInfo[idx].field_512 = block.timestamp
                                                                            require idx < poolInfo.length
                                                                            mem[0] = 4
                                                                            _29279 = mem[64]
                                                                            mem[64] = mem[64] + 128
                                                                            mem[_29279] = poolInfo[idx].field_0
                                                                            mem[_29279 + 32] = poolInfo[idx].field_256
                                                                            mem[_29279 + 64] = poolInfo[idx].field_512
                                                                            mem[_29279 + 96] = poolInfo[idx].field_768
                                                    mem[0] = msg.sender
                                                    mem[32] = sha3(idx, 6)
                                                    if not userInfo[idx][msg.sender].field_0:
                                                        if userInfo[idx][msg.sender].field_256 > 0:
                                                            revert with 0, 'SafeMath: subtraction overflow'
                                                        if -userInfo[idx][msg.sender].field_256 < 0:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                    else:
                                                        if poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / userInfo[idx][msg.sender].field_0 != poolInfo[idx].field_768:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                        if userInfo[idx][msg.sender].field_256 > poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12:
                                                            revert with 0, 'SafeMath: subtraction overflow'
                                                        if (poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12) - userInfo[idx][msg.sender].field_256 < 0:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                    if not userInfo[idx][msg.sender].field_0:
                                                        userInfo[idx][msg.sender].field_256 = 0
                                                    else:
                                                        if poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / userInfo[idx][msg.sender].field_0 != poolInfo[idx].field_768:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                        userInfo[idx][msg.sender].field_256 = poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12
                                            else:
                                                if (0 / ext_call.return_data[0] * userInfo[idx][address(msg.sender)].field_0) + (poolInfo[idx].field_768 * userInfo[idx][address(msg.sender)].field_0) / userInfo[idx][address(msg.sender)].field_0 != (0 / ext_call.return_data[0]) + poolInfo[idx].field_768:
                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                if userInfo[idx][address(msg.sender)].field_256 > (0 / ext_call.return_data[0] * userInfo[idx][address(msg.sender)].field_0) + (poolInfo[idx].field_768 * userInfo[idx][address(msg.sender)].field_0) / 10^12:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if ((0 / ext_call.return_data[0] * userInfo[idx][address(msg.sender)].field_0) + (poolInfo[idx].field_768 * userInfo[idx][address(msg.sender)].field_0) / 10^12) - userInfo[idx][address(msg.sender)].field_256 > 0:
                                                    require idx < poolInfo.length
                                                    if block.timestamp <= poolInfo[idx].field_512:
                                                        require idx < poolInfo.length
                                                        mem[0] = 4
                                                        _20570 = mem[64]
                                                        mem[64] = mem[64] + 128
                                                        mem[_20570] = poolInfo[idx].field_0
                                                        mem[_20570 + 32] = poolInfo[idx].field_256
                                                        mem[_20570 + 64] = poolInfo[idx].field_512
                                                        mem[_20570 + 96] = poolInfo[idx].field_768
                                                    else:
                                                        mem[mem[64] + 4] = this.address
                                                        require ext_code.size(poolInfo[idx].field_0)
                                                        staticcall poolInfo[idx].field_0.0x70a08231 with:
                                                                gas gas_remaining wei
                                                               args this.address
                                                        mem[mem[64]] = ext_call.return_data[0]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if not ext_call.return_data[0]:
                                                            poolInfo[idx].field_512 = block.timestamp
                                                            require idx < poolInfo.length
                                                            mem[0] = 4
                                                            _21626 = mem[64]
                                                            mem[64] = mem[64] + 128
                                                            mem[_21626] = poolInfo[idx].field_0
                                                            mem[_21626 + 32] = poolInfo[idx].field_256
                                                            mem[_21626 + 64] = poolInfo[idx].field_512
                                                            mem[_21626 + 96] = poolInfo[idx].field_768
                                                        else:
                                                            if not totalAllocPoint:
                                                                poolInfo[idx].field_512 = block.timestamp
                                                                require idx < poolInfo.length
                                                                mem[0] = 4
                                                                _21896 = mem[64]
                                                                mem[64] = mem[64] + 128
                                                                mem[_21896] = poolInfo[idx].field_0
                                                                mem[_21896 + 32] = poolInfo[idx].field_256
                                                                mem[_21896 + 64] = poolInfo[idx].field_512
                                                                mem[_21896 + 96] = poolInfo[idx].field_768
                                                            else:
                                                                if poolInfo[idx].field_512 > block.timestamp:
                                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                                if not block.timestamp - poolInfo[idx].field_512:
                                                                    if totalAllocPoint <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    require totalAllocPoint
                                                                    if not 0 / totalAllocPoint:
                                                                        if ext_call.return_data[0] <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        require ext_call.return_data[0]
                                                                        if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                            revert with 0, 'SafeMath: addition overflow'
                                                                        poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                                        poolInfo[idx].field_512 = block.timestamp
                                                                        require idx < poolInfo.length
                                                                        mem[0] = 4
                                                                        _28562 = mem[64]
                                                                        mem[64] = mem[64] + 128
                                                                        mem[_28562] = poolInfo[idx].field_0
                                                                        mem[_28562 + 32] = poolInfo[idx].field_256
                                                                        mem[_28562 + 64] = poolInfo[idx].field_512
                                                                        mem[_28562 + 96] = poolInfo[idx].field_768
                                                                    else:
                                                                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                        if ext_call.return_data[0] <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        require ext_call.return_data[0]
                                                                        if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                            revert with 0, 'SafeMath: addition overflow'
                                                                        poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                                        poolInfo[idx].field_512 = block.timestamp
                                                                        require idx < poolInfo.length
                                                                        mem[0] = 4
                                                                        _28891 = mem[64]
                                                                        mem[64] = mem[64] + 128
                                                                        mem[_28891] = poolInfo[idx].field_0
                                                                        mem[_28891 + 32] = poolInfo[idx].field_256
                                                                        mem[_28891 + 64] = poolInfo[idx].field_512
                                                                        mem[_28891 + 96] = poolInfo[idx].field_768
                                                                else:
                                                                    if (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond) / block.timestamp - poolInfo[idx].field_512 != rewardsPerSecond:
                                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                    if not (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond):
                                                                        if totalAllocPoint <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        require totalAllocPoint
                                                                        if not 0 / totalAllocPoint:
                                                                            if ext_call.return_data[0] <= 0:
                                                                                revert with 0, 'SafeMath: division by zero'
                                                                            require ext_call.return_data[0]
                                                                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                                revert with 0, 'SafeMath: addition overflow'
                                                                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                                            poolInfo[idx].field_512 = block.timestamp
                                                                            require idx < poolInfo.length
                                                                            mem[0] = 4
                                                                            _28886 = mem[64]
                                                                            mem[64] = mem[64] + 128
                                                                            mem[_28886] = poolInfo[idx].field_0
                                                                            mem[_28886 + 32] = poolInfo[idx].field_256
                                                                            mem[_28886 + 64] = poolInfo[idx].field_512
                                                                            mem[_28886 + 96] = poolInfo[idx].field_768
                                                                        else:
                                                                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                            if ext_call.return_data[0] <= 0:
                                                                                revert with 0, 'SafeMath: division by zero'
                                                                            require ext_call.return_data[0]
                                                                            if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                                revert with 0, 'SafeMath: addition overflow'
                                                                            poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                                            poolInfo[idx].field_512 = block.timestamp
                                                                            require idx < poolInfo.length
                                                                            mem[0] = 4
                                                                            _29274 = mem[64]
                                                                            mem[64] = mem[64] + 128
                                                                            mem[_29274] = poolInfo[idx].field_0
                                                                            mem[_29274 + 32] = poolInfo[idx].field_256
                                                                            mem[_29274 + 64] = poolInfo[idx].field_512
                                                                            mem[_29274 + 96] = poolInfo[idx].field_768
                                                                    else:
                                                                        if (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond) != poolInfo[idx].field_256:
                                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                        if totalAllocPoint <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        require totalAllocPoint
                                                                        if not (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint:
                                                                            if ext_call.return_data[0] <= 0:
                                                                                revert with 0, 'SafeMath: division by zero'
                                                                            require ext_call.return_data[0]
                                                                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                                revert with 0, 'SafeMath: addition overflow'
                                                                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                                            poolInfo[idx].field_512 = block.timestamp
                                                                            require idx < poolInfo.length
                                                                            mem[0] = 4
                                                                            _29269 = mem[64]
                                                                            mem[64] = mem[64] + 128
                                                                            mem[_29269] = poolInfo[idx].field_0
                                                                            mem[_29269 + 32] = poolInfo[idx].field_256
                                                                            mem[_29269 + 64] = poolInfo[idx].field_512
                                                                            mem[_29269 + 96] = poolInfo[idx].field_768
                                                                        else:
                                                                            if 10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                            if ext_call.return_data[0] <= 0:
                                                                                revert with 0, 'SafeMath: division by zero'
                                                                            require ext_call.return_data[0]
                                                                            if (10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                                revert with 0, 'SafeMath: addition overflow'
                                                                            poolInfo[idx].field_768 += 10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                                                                            poolInfo[idx].field_512 = block.timestamp
                                                                            require idx < poolInfo.length
                                                                            mem[0] = 4
                                                                            _29627 = mem[64]
                                                                            mem[64] = mem[64] + 128
                                                                            mem[_29627] = poolInfo[idx].field_0
                                                                            mem[_29627 + 32] = poolInfo[idx].field_256
                                                                            mem[_29627 + 64] = poolInfo[idx].field_512
                                                                            mem[_29627 + 96] = poolInfo[idx].field_768
                                                    mem[0] = msg.sender
                                                    mem[32] = sha3(idx, 6)
                                                    if not userInfo[idx][msg.sender].field_0:
                                                        if userInfo[idx][msg.sender].field_256 > 0:
                                                            revert with 0, 'SafeMath: subtraction overflow'
                                                        if -userInfo[idx][msg.sender].field_256 < 0:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                    else:
                                                        if poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / userInfo[idx][msg.sender].field_0 != poolInfo[idx].field_768:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                        if userInfo[idx][msg.sender].field_256 > poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12:
                                                            revert with 0, 'SafeMath: subtraction overflow'
                                                        if (poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12) - userInfo[idx][msg.sender].field_256 < 0:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                    if not userInfo[idx][msg.sender].field_0:
                                                        userInfo[idx][msg.sender].field_256 = 0
                                                    else:
                                                        if poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / userInfo[idx][msg.sender].field_0 != poolInfo[idx].field_768:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                        userInfo[idx][msg.sender].field_256 = poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12
                                        else:
                                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if not userInfo[idx][address(msg.sender)].field_0:
                                                if userInfo[idx][address(msg.sender)].field_256 > 0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if -userInfo[idx][address(msg.sender)].field_256 > 0:
                                                    require idx < poolInfo.length
                                                    if block.timestamp <= poolInfo[idx].field_512:
                                                        require idx < poolInfo.length
                                                        mem[0] = 4
                                                        _20564 = mem[64]
                                                        mem[64] = mem[64] + 128
                                                        mem[_20564] = poolInfo[idx].field_0
                                                        mem[_20564 + 32] = poolInfo[idx].field_256
                                                        mem[_20564 + 64] = poolInfo[idx].field_512
                                                        mem[_20564 + 96] = poolInfo[idx].field_768
                                                    else:
                                                        mem[mem[64] + 4] = this.address
                                                        require ext_code.size(poolInfo[idx].field_0)
                                                        staticcall poolInfo[idx].field_0.0x70a08231 with:
                                                                gas gas_remaining wei
                                                               args this.address
                                                        mem[mem[64]] = ext_call.return_data[0]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if not ext_call.return_data[0]:
                                                            poolInfo[idx].field_512 = block.timestamp
                                                            require idx < poolInfo.length
                                                            mem[0] = 4
                                                            _21619 = mem[64]
                                                            mem[64] = mem[64] + 128
                                                            mem[_21619] = poolInfo[idx].field_0
                                                            mem[_21619 + 32] = poolInfo[idx].field_256
                                                            mem[_21619 + 64] = poolInfo[idx].field_512
                                                            mem[_21619 + 96] = poolInfo[idx].field_768
                                                        else:
                                                            if not totalAllocPoint:
                                                                poolInfo[idx].field_512 = block.timestamp
                                                                require idx < poolInfo.length
                                                                mem[0] = 4
                                                                _21891 = mem[64]
                                                                mem[64] = mem[64] + 128
                                                                mem[_21891] = poolInfo[idx].field_0
                                                                mem[_21891 + 32] = poolInfo[idx].field_256
                                                                mem[_21891 + 64] = poolInfo[idx].field_512
                                                                mem[_21891 + 96] = poolInfo[idx].field_768
                                                            else:
                                                                if poolInfo[idx].field_512 > block.timestamp:
                                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                                if not block.timestamp - poolInfo[idx].field_512:
                                                                    if totalAllocPoint <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    require totalAllocPoint
                                                                    if not 0 / totalAllocPoint:
                                                                        if ext_call.return_data[0] <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        require ext_call.return_data[0]
                                                                        if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                            revert with 0, 'SafeMath: addition overflow'
                                                                        poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                                        poolInfo[idx].field_512 = block.timestamp
                                                                        require idx < poolInfo.length
                                                                        mem[0] = 4
                                                                        _28555 = mem[64]
                                                                        mem[64] = mem[64] + 128
                                                                        mem[_28555] = poolInfo[idx].field_0
                                                                        mem[_28555 + 32] = poolInfo[idx].field_256
                                                                        mem[_28555 + 64] = poolInfo[idx].field_512
                                                                        mem[_28555 + 96] = poolInfo[idx].field_768
                                                                    else:
                                                                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                        if ext_call.return_data[0] <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        require ext_call.return_data[0]
                                                                        if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                            revert with 0, 'SafeMath: addition overflow'
                                                                        poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                                        poolInfo[idx].field_512 = block.timestamp
                                                                        require idx < poolInfo.length
                                                                        mem[0] = 4
                                                                        _28881 = mem[64]
                                                                        mem[64] = mem[64] + 128
                                                                        mem[_28881] = poolInfo[idx].field_0
                                                                        mem[_28881 + 32] = poolInfo[idx].field_256
                                                                        mem[_28881 + 64] = poolInfo[idx].field_512
                                                                        mem[_28881 + 96] = poolInfo[idx].field_768
                                                                else:
                                                                    if (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond) / block.timestamp - poolInfo[idx].field_512 != rewardsPerSecond:
                                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                    if not (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond):
                                                                        if totalAllocPoint <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        require totalAllocPoint
                                                                        if not 0 / totalAllocPoint:
                                                                            if ext_call.return_data[0] <= 0:
                                                                                revert with 0, 'SafeMath: division by zero'
                                                                            require ext_call.return_data[0]
                                                                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                                revert with 0, 'SafeMath: addition overflow'
                                                                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                                            poolInfo[idx].field_512 = block.timestamp
                                                                            require idx < poolInfo.length
                                                                            mem[0] = 4
                                                                            _28876 = mem[64]
                                                                            mem[64] = mem[64] + 128
                                                                            mem[_28876] = poolInfo[idx].field_0
                                                                            mem[_28876 + 32] = poolInfo[idx].field_256
                                                                            mem[_28876 + 64] = poolInfo[idx].field_512
                                                                            mem[_28876 + 96] = poolInfo[idx].field_768
                                                                        else:
                                                                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                            if ext_call.return_data[0] <= 0:
                                                                                revert with 0, 'SafeMath: division by zero'
                                                                            require ext_call.return_data[0]
                                                                            if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                                revert with 0, 'SafeMath: addition overflow'
                                                                            poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                                            poolInfo[idx].field_512 = block.timestamp
                                                                            require idx < poolInfo.length
                                                                            mem[0] = 4
                                                                            _29264 = mem[64]
                                                                            mem[64] = mem[64] + 128
                                                                            mem[_29264] = poolInfo[idx].field_0
                                                                            mem[_29264 + 32] = poolInfo[idx].field_256
                                                                            mem[_29264 + 64] = poolInfo[idx].field_512
                                                                            mem[_29264 + 96] = poolInfo[idx].field_768
                                                                    else:
                                                                        if (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond) != poolInfo[idx].field_256:
                                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                        if totalAllocPoint <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        require totalAllocPoint
                                                                        if not (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint:
                                                                            if ext_call.return_data[0] <= 0:
                                                                                revert with 0, 'SafeMath: division by zero'
                                                                            require ext_call.return_data[0]
                                                                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                                revert with 0, 'SafeMath: addition overflow'
                                                                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                                            poolInfo[idx].field_512 = block.timestamp
                                                                            require idx < poolInfo.length
                                                                            mem[0] = 4
                                                                            _29259 = mem[64]
                                                                            mem[64] = mem[64] + 128
                                                                            mem[_29259] = poolInfo[idx].field_0
                                                                            mem[_29259 + 32] = poolInfo[idx].field_256
                                                                            mem[_29259 + 64] = poolInfo[idx].field_512
                                                                            mem[_29259 + 96] = poolInfo[idx].field_768
                                                                        else:
                                                                            if 10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                            if ext_call.return_data[0] <= 0:
                                                                                revert with 0, 'SafeMath: division by zero'
                                                                            require ext_call.return_data[0]
                                                                            if (10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                                revert with 0, 'SafeMath: addition overflow'
                                                                            poolInfo[idx].field_768 += 10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                                                                            poolInfo[idx].field_512 = block.timestamp
                                                                            require idx < poolInfo.length
                                                                            mem[0] = 4
                                                                            _29622 = mem[64]
                                                                            mem[64] = mem[64] + 128
                                                                            mem[_29622] = poolInfo[idx].field_0
                                                                            mem[_29622 + 32] = poolInfo[idx].field_256
                                                                            mem[_29622 + 64] = poolInfo[idx].field_512
                                                                            mem[_29622 + 96] = poolInfo[idx].field_768
                                                    mem[0] = msg.sender
                                                    mem[32] = sha3(idx, 6)
                                                    if not userInfo[idx][msg.sender].field_0:
                                                        if userInfo[idx][msg.sender].field_256 > 0:
                                                            revert with 0, 'SafeMath: subtraction overflow'
                                                        if -userInfo[idx][msg.sender].field_256 < 0:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                    else:
                                                        if poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / userInfo[idx][msg.sender].field_0 != poolInfo[idx].field_768:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                        if userInfo[idx][msg.sender].field_256 > poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12:
                                                            revert with 0, 'SafeMath: subtraction overflow'
                                                        if (poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12) - userInfo[idx][msg.sender].field_256 < 0:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                    if not userInfo[idx][msg.sender].field_0:
                                                        userInfo[idx][msg.sender].field_256 = 0
                                                    else:
                                                        if poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / userInfo[idx][msg.sender].field_0 != poolInfo[idx].field_768:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                        userInfo[idx][msg.sender].field_256 = poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12
                                            else:
                                                if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[idx][address(msg.sender)].field_0) + (poolInfo[idx].field_768 * userInfo[idx][address(msg.sender)].field_0) / userInfo[idx][address(msg.sender)].field_0 != (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768:
                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                if userInfo[idx][address(msg.sender)].field_256 > (10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[idx][address(msg.sender)].field_0) + (poolInfo[idx].field_768 * userInfo[idx][address(msg.sender)].field_0) / 10^12:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if ((10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[idx][address(msg.sender)].field_0) + (poolInfo[idx].field_768 * userInfo[idx][address(msg.sender)].field_0) / 10^12) - userInfo[idx][address(msg.sender)].field_256 > 0:
                                                    require idx < poolInfo.length
                                                    if block.timestamp <= poolInfo[idx].field_512:
                                                        require idx < poolInfo.length
                                                        mem[0] = 4
                                                        _20742 = mem[64]
                                                        mem[64] = mem[64] + 128
                                                        mem[_20742] = poolInfo[idx].field_0
                                                        mem[_20742 + 32] = poolInfo[idx].field_256
                                                        mem[_20742 + 64] = poolInfo[idx].field_512
                                                        mem[_20742 + 96] = poolInfo[idx].field_768
                                                    else:
                                                        mem[mem[64] + 4] = this.address
                                                        require ext_code.size(poolInfo[idx].field_0)
                                                        staticcall poolInfo[idx].field_0.0x70a08231 with:
                                                                gas gas_remaining wei
                                                               args this.address
                                                        mem[mem[64]] = ext_call.return_data[0]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if not ext_call.return_data[0]:
                                                            poolInfo[idx].field_512 = block.timestamp
                                                            require idx < poolInfo.length
                                                            mem[0] = 4
                                                            _21884 = mem[64]
                                                            mem[64] = mem[64] + 128
                                                            mem[_21884] = poolInfo[idx].field_0
                                                            mem[_21884 + 32] = poolInfo[idx].field_256
                                                            mem[_21884 + 64] = poolInfo[idx].field_512
                                                            mem[_21884 + 96] = poolInfo[idx].field_768
                                                        else:
                                                            if not totalAllocPoint:
                                                                poolInfo[idx].field_512 = block.timestamp
                                                                require idx < poolInfo.length
                                                                mem[0] = 4
                                                                _22120 = mem[64]
                                                                mem[64] = mem[64] + 128
                                                                mem[_22120] = poolInfo[idx].field_0
                                                                mem[_22120 + 32] = poolInfo[idx].field_256
                                                                mem[_22120 + 64] = poolInfo[idx].field_512
                                                                mem[_22120 + 96] = poolInfo[idx].field_768
                                                            else:
                                                                if poolInfo[idx].field_512 > block.timestamp:
                                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                                if not block.timestamp - poolInfo[idx].field_512:
                                                                    if totalAllocPoint <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    require totalAllocPoint
                                                                    if not 0 / totalAllocPoint:
                                                                        if ext_call.return_data[0] <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        require ext_call.return_data[0]
                                                                        if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                            revert with 0, 'SafeMath: addition overflow'
                                                                        poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                                        poolInfo[idx].field_512 = block.timestamp
                                                                        require idx < poolInfo.length
                                                                        mem[0] = 4
                                                                        _28871 = mem[64]
                                                                        mem[64] = mem[64] + 128
                                                                        mem[_28871] = poolInfo[idx].field_0
                                                                        mem[_28871 + 32] = poolInfo[idx].field_256
                                                                        mem[_28871 + 64] = poolInfo[idx].field_512
                                                                        mem[_28871 + 96] = poolInfo[idx].field_768
                                                                    else:
                                                                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                        if ext_call.return_data[0] <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        require ext_call.return_data[0]
                                                                        if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                            revert with 0, 'SafeMath: addition overflow'
                                                                        poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                                        poolInfo[idx].field_512 = block.timestamp
                                                                        require idx < poolInfo.length
                                                                        mem[0] = 4
                                                                        _29254 = mem[64]
                                                                        mem[64] = mem[64] + 128
                                                                        mem[_29254] = poolInfo[idx].field_0
                                                                        mem[_29254 + 32] = poolInfo[idx].field_256
                                                                        mem[_29254 + 64] = poolInfo[idx].field_512
                                                                        mem[_29254 + 96] = poolInfo[idx].field_768
                                                                else:
                                                                    if (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond) / block.timestamp - poolInfo[idx].field_512 != rewardsPerSecond:
                                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                    if not (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond):
                                                                        if totalAllocPoint <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        require totalAllocPoint
                                                                        if not 0 / totalAllocPoint:
                                                                            if ext_call.return_data[0] <= 0:
                                                                                revert with 0, 'SafeMath: division by zero'
                                                                            require ext_call.return_data[0]
                                                                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                                revert with 0, 'SafeMath: addition overflow'
                                                                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                                            poolInfo[idx].field_512 = block.timestamp
                                                                            require idx < poolInfo.length
                                                                            mem[0] = 4
                                                                            _29249 = mem[64]
                                                                            mem[64] = mem[64] + 128
                                                                            mem[_29249] = poolInfo[idx].field_0
                                                                            mem[_29249 + 32] = poolInfo[idx].field_256
                                                                            mem[_29249 + 64] = poolInfo[idx].field_512
                                                                            mem[_29249 + 96] = poolInfo[idx].field_768
                                                                        else:
                                                                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                            if ext_call.return_data[0] <= 0:
                                                                                revert with 0, 'SafeMath: division by zero'
                                                                            require ext_call.return_data[0]
                                                                            if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                                revert with 0, 'SafeMath: addition overflow'
                                                                            poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                                            poolInfo[idx].field_512 = block.timestamp
                                                                            require idx < poolInfo.length
                                                                            mem[0] = 4
                                                                            _29617 = mem[64]
                                                                            mem[64] = mem[64] + 128
                                                                            mem[_29617] = poolInfo[idx].field_0
                                                                            mem[_29617 + 32] = poolInfo[idx].field_256
                                                                            mem[_29617 + 64] = poolInfo[idx].field_512
                                                                            mem[_29617 + 96] = poolInfo[idx].field_768
                                                                    else:
                                                                        if (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond) != poolInfo[idx].field_256:
                                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                        if totalAllocPoint <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        require totalAllocPoint
                                                                        if not (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint:
                                                                            if ext_call.return_data[0] <= 0:
                                                                                revert with 0, 'SafeMath: division by zero'
                                                                            require ext_call.return_data[0]
                                                                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                                revert with 0, 'SafeMath: addition overflow'
                                                                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                                            poolInfo[idx].field_512 = block.timestamp
                                                                            require idx < poolInfo.length
                                                                            mem[0] = 4
                                                                            _29612 = mem[64]
                                                                            mem[64] = mem[64] + 128
                                                                            mem[_29612] = poolInfo[idx].field_0
                                                                            mem[_29612 + 32] = poolInfo[idx].field_256
                                                                            mem[_29612 + 64] = poolInfo[idx].field_512
                                                                            mem[_29612 + 96] = poolInfo[idx].field_768
                                                                        else:
                                                                            if 10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                            if ext_call.return_data[0] <= 0:
                                                                                revert with 0, 'SafeMath: division by zero'
                                                                            require ext_call.return_data[0]
                                                                            if (10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                                revert with 0, 'SafeMath: addition overflow'
                                                                            poolInfo[idx].field_768 += 10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                                                                            poolInfo[idx].field_512 = block.timestamp
                                                                            require idx < poolInfo.length
                                                                            mem[0] = 4
                                                                            _29881 = mem[64]
                                                                            mem[64] = mem[64] + 128
                                                                            mem[_29881] = poolInfo[idx].field_0
                                                                            mem[_29881 + 32] = poolInfo[idx].field_256
                                                                            mem[_29881 + 64] = poolInfo[idx].field_512
                                                                            mem[_29881 + 96] = poolInfo[idx].field_768
                                                    mem[0] = msg.sender
                                                    mem[32] = sha3(idx, 6)
                                                    if not userInfo[idx][msg.sender].field_0:
                                                        if userInfo[idx][msg.sender].field_256 > 0:
                                                            revert with 0, 'SafeMath: subtraction overflow'
                                                        if -userInfo[idx][msg.sender].field_256 < 0:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                    else:
                                                        if poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / userInfo[idx][msg.sender].field_0 != poolInfo[idx].field_768:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                        if userInfo[idx][msg.sender].field_256 > poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12:
                                                            revert with 0, 'SafeMath: subtraction overflow'
                                                        if (poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12) - userInfo[idx][msg.sender].field_256 < 0:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                    if not userInfo[idx][msg.sender].field_0:
                                                        userInfo[idx][msg.sender].field_256 = 0
                                                    else:
                                                        if poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / userInfo[idx][msg.sender].field_0 != poolInfo[idx].field_768:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                        userInfo[idx][msg.sender].field_256 = poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12
                                    else:
                                        if (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond) / block.timestamp - poolInfo[idx].field_512 != rewardsPerSecond:
                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if not (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond):
                                            if totalAllocPoint <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalAllocPoint
                                            if not 0 / totalAllocPoint:
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if not userInfo[idx][address(msg.sender)].field_0:
                                                    if userInfo[idx][address(msg.sender)].field_256 > 0:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if -userInfo[idx][address(msg.sender)].field_256 > 0:
                                                        require idx < poolInfo.length
                                                        if block.timestamp <= poolInfo[idx].field_512:
                                                            require idx < poolInfo.length
                                                            mem[0] = 4
                                                            _20557 = mem[64]
                                                            mem[64] = mem[64] + 128
                                                            mem[_20557] = poolInfo[idx].field_0
                                                            mem[_20557 + 32] = poolInfo[idx].field_256
                                                            mem[_20557 + 64] = poolInfo[idx].field_512
                                                            mem[_20557 + 96] = poolInfo[idx].field_768
                                                        else:
                                                            mem[mem[64] + 4] = this.address
                                                            require ext_code.size(poolInfo[idx].field_0)
                                                            staticcall poolInfo[idx].field_0.0x70a08231 with:
                                                                    gas gas_remaining wei
                                                                   args this.address
                                                            mem[mem[64]] = ext_call.return_data[0]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            require return_data.size >= 32
                                                            if not ext_call.return_data[0]:
                                                                poolInfo[idx].field_512 = block.timestamp
                                                                require idx < poolInfo.length
                                                                mem[0] = 4
                                                                _21610 = mem[64]
                                                                mem[64] = mem[64] + 128
                                                                mem[_21610] = poolInfo[idx].field_0
                                                                mem[_21610 + 32] = poolInfo[idx].field_256
                                                                mem[_21610 + 64] = poolInfo[idx].field_512
                                                                mem[_21610 + 96] = poolInfo[idx].field_768
                                                            else:
                                                                if not totalAllocPoint:
                                                                    poolInfo[idx].field_512 = block.timestamp
                                                                    require idx < poolInfo.length
                                                                    mem[0] = 4
                                                                    _21879 = mem[64]
                                                                    mem[64] = mem[64] + 128
                                                                    mem[_21879] = poolInfo[idx].field_0
                                                                    mem[_21879 + 32] = poolInfo[idx].field_256
                                                                    mem[_21879 + 64] = poolInfo[idx].field_512
                                                                    mem[_21879 + 96] = poolInfo[idx].field_768
                                                                else:
                                                                    if poolInfo[idx].field_512 > block.timestamp:
                                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                                    if not block.timestamp - poolInfo[idx].field_512:
                                                                        if totalAllocPoint <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        require totalAllocPoint
                                                                        if not 0 / totalAllocPoint:
                                                                            if ext_call.return_data[0] <= 0:
                                                                                revert with 0, 'SafeMath: division by zero'
                                                                            require ext_call.return_data[0]
                                                                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                                revert with 0, 'SafeMath: addition overflow'
                                                                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                                            poolInfo[idx].field_512 = block.timestamp
                                                                            require idx < poolInfo.length
                                                                            mem[0] = 4
                                                                            _28544 = mem[64]
                                                                            mem[64] = mem[64] + 128
                                                                            mem[_28544] = poolInfo[idx].field_0
                                                                            mem[_28544 + 32] = poolInfo[idx].field_256
                                                                            mem[_28544 + 64] = poolInfo[idx].field_512
                                                                            mem[_28544 + 96] = poolInfo[idx].field_768
                                                                        else:
                                                                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                            if ext_call.return_data[0] <= 0:
                                                                                revert with 0, 'SafeMath: division by zero'
                                                                            require ext_call.return_data[0]
                                                                            if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                                revert with 0, 'SafeMath: addition overflow'
                                                                            poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                                            poolInfo[idx].field_512 = block.timestamp
                                                                            require idx < poolInfo.length
                                                                            mem[0] = 4
                                                                            _28864 = mem[64]
                                                                            mem[64] = mem[64] + 128
                                                                            mem[_28864] = poolInfo[idx].field_0
                                                                            mem[_28864 + 32] = poolInfo[idx].field_256
                                                                            mem[_28864 + 64] = poolInfo[idx].field_512
                                                                            mem[_28864 + 96] = poolInfo[idx].field_768
                                                                    else:
                                                                        if (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond) / block.timestamp - poolInfo[idx].field_512 != rewardsPerSecond:
                                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                        if not (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond):
                                                                            if totalAllocPoint <= 0:
                                                                                revert with 0, 'SafeMath: division by zero'
                                                                            require totalAllocPoint
                                                                            if not 0 / totalAllocPoint:
                                                                                if ext_call.return_data[0] <= 0:
                                                                                    revert with 0, 'SafeMath: division by zero'
                                                                                require ext_call.return_data[0]
                                                                                if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                                poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                                                poolInfo[idx].field_512 = block.timestamp
                                                                                require idx < poolInfo.length
                                                                                mem[0] = 4
                                                                                _28859 = mem[64]
                                                                                mem[64] = mem[64] + 128
                                                                                mem[_28859] = poolInfo[idx].field_0
                                                                                mem[_28859 + 32] = poolInfo[idx].field_256
                                                                                mem[_28859 + 64] = poolInfo[idx].field_512
                                                                                mem[_28859 + 96] = poolInfo[idx].field_768
                                                                            else:
                                                                                if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                                if ext_call.return_data[0] <= 0:
                                                                                    revert with 0, 'SafeMath: division by zero'
                                                                                require ext_call.return_data[0]
                                                                                if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                                poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                                                poolInfo[idx].field_512 = block.timestamp
                                                                                require idx < poolInfo.length
                                                                                mem[0] = 4
                                                                                _29244 = mem[64]
                                                                                mem[64] = mem[64] + 128
                                                                                mem[_29244] = poolInfo[idx].field_0
                                                                                mem[_29244 + 32] = poolInfo[idx].field_256
                                                                                mem[_29244 + 64] = poolInfo[idx].field_512
                                                                                mem[_29244 + 96] = poolInfo[idx].field_768
                                                                        else:
                                                                            if (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond) != poolInfo[idx].field_256:
                                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                            if totalAllocPoint <= 0:
                                                                                revert with 0, 'SafeMath: division by zero'
                                                                            require totalAllocPoint
                                                                            if not (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint:
                                                                                if ext_call.return_data[0] <= 0:
                                                                                    revert with 0, 'SafeMath: division by zero'
                                                                                require ext_call.return_data[0]
                                                                                if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                                poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                                                poolInfo[idx].field_512 = block.timestamp
                                                                                require idx < poolInfo.length
                                                                                mem[0] = 4
                                                                                _29239 = mem[64]
                                                                                mem[64] = mem[64] + 128
                                                                                mem[_29239] = poolInfo[idx].field_0
                                                                                mem[_29239 + 32] = poolInfo[idx].field_256
                                                                                mem[_29239 + 64] = poolInfo[idx].field_512
                                                                                mem[_29239 + 96] = poolInfo[idx].field_768
                                                                            else:
                                                                                if 10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                                                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                                if ext_call.return_data[0] <= 0:
                                                                                    revert with 0, 'SafeMath: division by zero'
                                                                                require ext_call.return_data[0]
                                                                                if (10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                                poolInfo[idx].field_768 += 10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                                                                                poolInfo[idx].field_512 = block.timestamp
                                                                                require idx < poolInfo.length
                                                                                mem[0] = 4
                                                                                _29607 = mem[64]
                                                                                mem[64] = mem[64] + 128
                                                                                mem[_29607] = poolInfo[idx].field_0
                                                                                mem[_29607 + 32] = poolInfo[idx].field_256
                                                                                mem[_29607 + 64] = poolInfo[idx].field_512
                                                                                mem[_29607 + 96] = poolInfo[idx].field_768
                                                        mem[0] = msg.sender
                                                        mem[32] = sha3(idx, 6)
                                                        if not userInfo[idx][msg.sender].field_0:
                                                            if userInfo[idx][msg.sender].field_256 > 0:
                                                                revert with 0, 'SafeMath: subtraction overflow'
                                                            if -userInfo[idx][msg.sender].field_256 < 0:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                        else:
                                                            if poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / userInfo[idx][msg.sender].field_0 != poolInfo[idx].field_768:
                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                            if userInfo[idx][msg.sender].field_256 > poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12:
                                                                revert with 0, 'SafeMath: subtraction overflow'
                                                            if (poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12) - userInfo[idx][msg.sender].field_256 < 0:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                        if not userInfo[idx][msg.sender].field_0:
                                                            userInfo[idx][msg.sender].field_256 = 0
                                                        else:
                                                            if poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / userInfo[idx][msg.sender].field_0 != poolInfo[idx].field_768:
                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                            userInfo[idx][msg.sender].field_256 = poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12
                                                else:
                                                    if (0 / ext_call.return_data[0] * userInfo[idx][address(msg.sender)].field_0) + (poolInfo[idx].field_768 * userInfo[idx][address(msg.sender)].field_0) / userInfo[idx][address(msg.sender)].field_0 != (0 / ext_call.return_data[0]) + poolInfo[idx].field_768:
                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                    if userInfo[idx][address(msg.sender)].field_256 > (0 / ext_call.return_data[0] * userInfo[idx][address(msg.sender)].field_0) + (poolInfo[idx].field_768 * userInfo[idx][address(msg.sender)].field_0) / 10^12:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if ((0 / ext_call.return_data[0] * userInfo[idx][address(msg.sender)].field_0) + (poolInfo[idx].field_768 * userInfo[idx][address(msg.sender)].field_0) / 10^12) - userInfo[idx][address(msg.sender)].field_256 > 0:
                                                        require idx < poolInfo.length
                                                        if block.timestamp <= poolInfo[idx].field_512:
                                                            require idx < poolInfo.length
                                                            mem[0] = 4
                                                            _20736 = mem[64]
                                                            mem[64] = mem[64] + 128
                                                            mem[_20736] = poolInfo[idx].field_0
                                                            mem[_20736 + 32] = poolInfo[idx].field_256
                                                            mem[_20736 + 64] = poolInfo[idx].field_512
                                                            mem[_20736 + 96] = poolInfo[idx].field_768
                                                        else:
                                                            mem[mem[64] + 4] = this.address
                                                            require ext_code.size(poolInfo[idx].field_0)
                                                            staticcall poolInfo[idx].field_0.0x70a08231 with:
                                                                    gas gas_remaining wei
                                                                   args this.address
                                                            mem[mem[64]] = ext_call.return_data[0]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            require return_data.size >= 32
                                                            if not ext_call.return_data[0]:
                                                                poolInfo[idx].field_512 = block.timestamp
                                                                require idx < poolInfo.length
                                                                mem[0] = 4
                                                                _21872 = mem[64]
                                                                mem[64] = mem[64] + 128
                                                                mem[_21872] = poolInfo[idx].field_0
                                                                mem[_21872 + 32] = poolInfo[idx].field_256
                                                                mem[_21872 + 64] = poolInfo[idx].field_512
                                                                mem[_21872 + 96] = poolInfo[idx].field_768
                                                            else:
                                                                if not totalAllocPoint:
                                                                    poolInfo[idx].field_512 = block.timestamp
                                                                    require idx < poolInfo.length
                                                                    mem[0] = 4
                                                                    _22115 = mem[64]
                                                                    mem[64] = mem[64] + 128
                                                                    mem[_22115] = poolInfo[idx].field_0
                                                                    mem[_22115 + 32] = poolInfo[idx].field_256
                                                                    mem[_22115 + 64] = poolInfo[idx].field_512
                                                                    mem[_22115 + 96] = poolInfo[idx].field_768
                                                                else:
                                                                    if poolInfo[idx].field_512 > block.timestamp:
                                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                                    if not block.timestamp - poolInfo[idx].field_512:
                                                                        if totalAllocPoint <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        require totalAllocPoint
                                                                        if not 0 / totalAllocPoint:
                                                                            if ext_call.return_data[0] <= 0:
                                                                                revert with 0, 'SafeMath: division by zero'
                                                                            require ext_call.return_data[0]
                                                                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                                revert with 0, 'SafeMath: addition overflow'
                                                                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                                            poolInfo[idx].field_512 = block.timestamp
                                                                            require idx < poolInfo.length
                                                                            mem[0] = 4
                                                                            _28854 = mem[64]
                                                                            mem[64] = mem[64] + 128
                                                                            mem[_28854] = poolInfo[idx].field_0
                                                                            mem[_28854 + 32] = poolInfo[idx].field_256
                                                                            mem[_28854 + 64] = poolInfo[idx].field_512
                                                                            mem[_28854 + 96] = poolInfo[idx].field_768
                                                                        else:
                                                                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                            if ext_call.return_data[0] <= 0:
                                                                                revert with 0, 'SafeMath: division by zero'
                                                                            require ext_call.return_data[0]
                                                                            if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                                revert with 0, 'SafeMath: addition overflow'
                                                                            poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                                            poolInfo[idx].field_512 = block.timestamp
                                                                            require idx < poolInfo.length
                                                                            mem[0] = 4
                                                                            _29234 = mem[64]
                                                                            mem[64] = mem[64] + 128
                                                                            mem[_29234] = poolInfo[idx].field_0
                                                                            mem[_29234 + 32] = poolInfo[idx].field_256
                                                                            mem[_29234 + 64] = poolInfo[idx].field_512
                                                                            mem[_29234 + 96] = poolInfo[idx].field_768
                                                                    else:
                                                                        if (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond) / block.timestamp - poolInfo[idx].field_512 != rewardsPerSecond:
                                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                        if not (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond):
                                                                            if totalAllocPoint <= 0:
                                                                                revert with 0, 'SafeMath: division by zero'
                                                                            require totalAllocPoint
                                                                            if not 0 / totalAllocPoint:
                                                                                if ext_call.return_data[0] <= 0:
                                                                                    revert with 0, 'SafeMath: division by zero'
                                                                                require ext_call.return_data[0]
                                                                                if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                                poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                                                poolInfo[idx].field_512 = block.timestamp
                                                                                require idx < poolInfo.length
                                                                                mem[0] = 4
                                                                                _29229 = mem[64]
                                                                                mem[64] = mem[64] + 128
                                                                                mem[_29229] = poolInfo[idx].field_0
                                                                                mem[_29229 + 32] = poolInfo[idx].field_256
                                                                                mem[_29229 + 64] = poolInfo[idx].field_512
                                                                                mem[_29229 + 96] = poolInfo[idx].field_768
                                                                            else:
                                                                                if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                                if ext_call.return_data[0] <= 0:
                                                                                    revert with 0, 'SafeMath: division by zero'
                                                                                require ext_call.return_data[0]
                                                                                if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                                poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                                                poolInfo[idx].field_512 = block.timestamp
                                                                                require idx < poolInfo.length
                                                                                mem[0] = 4
                                                                                _29602 = mem[64]
                                                                                mem[64] = mem[64] + 128
                                                                                mem[_29602] = poolInfo[idx].field_0
                                                                                mem[_29602 + 32] = poolInfo[idx].field_256
                                                                                mem[_29602 + 64] = poolInfo[idx].field_512
                                                                                mem[_29602 + 96] = poolInfo[idx].field_768
                                                                        else:
                                                                            if (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond) != poolInfo[idx].field_256:
                                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                            if totalAllocPoint <= 0:
                                                                                revert with 0, 'SafeMath: division by zero'
                                                                            require totalAllocPoint
                                                                            if not (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint:
                                                                                if ext_call.return_data[0] <= 0:
                                                                                    revert with 0, 'SafeMath: division by zero'
                                                                                require ext_call.return_data[0]
                                                                                if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                                poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                                                poolInfo[idx].field_512 = block.timestamp
                                                                                require idx < poolInfo.length
                                                                                mem[0] = 4
                                                                                _29597 = mem[64]
                                                                                mem[64] = mem[64] + 128
                                                                                mem[_29597] = poolInfo[idx].field_0
                                                                                mem[_29597 + 32] = poolInfo[idx].field_256
                                                                                mem[_29597 + 64] = poolInfo[idx].field_512
                                                                                mem[_29597 + 96] = poolInfo[idx].field_768
                                                                            else:
                                                                                if 10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                                                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                                if ext_call.return_data[0] <= 0:
                                                                                    revert with 0, 'SafeMath: division by zero'
                                                                                require ext_call.return_data[0]
                                                                                if (10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                                poolInfo[idx].field_768 += 10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                                                                                poolInfo[idx].field_512 = block.timestamp
                                                                                require idx < poolInfo.length
                                                                                mem[0] = 4
                                                                                _29874 = mem[64]
                                                                                mem[64] = mem[64] + 128
                                                                                mem[_29874] = poolInfo[idx].field_0
                                                                                mem[_29874 + 32] = poolInfo[idx].field_256
                                                                                mem[_29874 + 64] = poolInfo[idx].field_512
                                                                                mem[_29874 + 96] = poolInfo[idx].field_768
                                                        mem[0] = msg.sender
                                                        mem[32] = sha3(idx, 6)
                                                        if not userInfo[idx][msg.sender].field_0:
                                                            if userInfo[idx][msg.sender].field_256 > 0:
                                                                revert with 0, 'SafeMath: subtraction overflow'
                                                            if -userInfo[idx][msg.sender].field_256 < 0:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                        else:
                                                            if poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / userInfo[idx][msg.sender].field_0 != poolInfo[idx].field_768:
                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                            if userInfo[idx][msg.sender].field_256 > poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12:
                                                                revert with 0, 'SafeMath: subtraction overflow'
                                                            if (poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12) - userInfo[idx][msg.sender].field_256 < 0:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                        if not userInfo[idx][msg.sender].field_0:
                                                            userInfo[idx][msg.sender].field_256 = 0
                                                        else:
                                                            if poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / userInfo[idx][msg.sender].field_0 != poolInfo[idx].field_768:
                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                            userInfo[idx][msg.sender].field_256 = poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12
                                            else:
                                                if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if not userInfo[idx][address(msg.sender)].field_0:
                                                    if userInfo[idx][address(msg.sender)].field_256 > 0:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if -userInfo[idx][address(msg.sender)].field_256 > 0:
                                                        require idx < poolInfo.length
                                                        if block.timestamp <= poolInfo[idx].field_512:
                                                            require idx < poolInfo.length
                                                            mem[0] = 4
                                                            _20730 = mem[64]
                                                            mem[64] = mem[64] + 128
                                                            mem[_20730] = poolInfo[idx].field_0
                                                            mem[_20730 + 32] = poolInfo[idx].field_256
                                                            mem[_20730 + 64] = poolInfo[idx].field_512
                                                            mem[_20730 + 96] = poolInfo[idx].field_768
                                                        else:
                                                            mem[mem[64] + 4] = this.address
                                                            require ext_code.size(poolInfo[idx].field_0)
                                                            staticcall poolInfo[idx].field_0.0x70a08231 with:
                                                                    gas gas_remaining wei
                                                                   args this.address
                                                            mem[mem[64]] = ext_call.return_data[0]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            require return_data.size >= 32
                                                            if not ext_call.return_data[0]:
                                                                poolInfo[idx].field_512 = block.timestamp
                                                                require idx < poolInfo.length
                                                                mem[0] = 4
                                                                _21865 = mem[64]
                                                                mem[64] = mem[64] + 128
                                                                mem[_21865] = poolInfo[idx].field_0
                                                                mem[_21865 + 32] = poolInfo[idx].field_256
                                                                mem[_21865 + 64] = poolInfo[idx].field_512
                                                                mem[_21865 + 96] = poolInfo[idx].field_768
                                                            else:
                                                                if not totalAllocPoint:
                                                                    poolInfo[idx].field_512 = block.timestamp
                                                                    require idx < poolInfo.length
                                                                    mem[0] = 4
                                                                    _22110 = mem[64]
                                                                    mem[64] = mem[64] + 128
                                                                    mem[_22110] = poolInfo[idx].field_0
                                                                    mem[_22110 + 32] = poolInfo[idx].field_256
                                                                    mem[_22110 + 64] = poolInfo[idx].field_512
                                                                    mem[_22110 + 96] = poolInfo[idx].field_768
                                                                else:
                                                                    if poolInfo[idx].field_512 > block.timestamp:
                                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                                    if not block.timestamp - poolInfo[idx].field_512:
                                                                        if totalAllocPoint <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        require totalAllocPoint
                                                                        if not 0 / totalAllocPoint:
                                                                            if ext_call.return_data[0] <= 0:
                                                                                revert with 0, 'SafeMath: division by zero'
                                                                            require ext_call.return_data[0]
                                                                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                                revert with 0, 'SafeMath: addition overflow'
                                                                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                                            poolInfo[idx].field_512 = block.timestamp
                                                                            require idx < poolInfo.length
                                                                            mem[0] = 4
                                                                            _28847 = mem[64]
                                                                            mem[64] = mem[64] + 128
                                                                            mem[_28847] = poolInfo[idx].field_0
                                                                            mem[_28847 + 32] = poolInfo[idx].field_256
                                                                            mem[_28847 + 64] = poolInfo[idx].field_512
                                                                            mem[_28847 + 96] = poolInfo[idx].field_768
                                                                        else:
                                                                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                            if ext_call.return_data[0] <= 0:
                                                                                revert with 0, 'SafeMath: division by zero'
                                                                            require ext_call.return_data[0]
                                                                            if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                                revert with 0, 'SafeMath: addition overflow'
                                                                            poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                                            poolInfo[idx].field_512 = block.timestamp
                                                                            require idx < poolInfo.length
                                                                            mem[0] = 4
                                                                            _29224 = mem[64]
                                                                            mem[64] = mem[64] + 128
                                                                            mem[_29224] = poolInfo[idx].field_0
                                                                            mem[_29224 + 32] = poolInfo[idx].field_256
                                                                            mem[_29224 + 64] = poolInfo[idx].field_512
                                                                            mem[_29224 + 96] = poolInfo[idx].field_768
                                                                    else:
                                                                        if (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond) / block.timestamp - poolInfo[idx].field_512 != rewardsPerSecond:
                                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                        if not (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond):
                                                                            if totalAllocPoint <= 0:
                                                                                revert with 0, 'SafeMath: division by zero'
                                                                            require totalAllocPoint
                                                                            if not 0 / totalAllocPoint:
                                                                                if ext_call.return_data[0] <= 0:
                                                                                    revert with 0, 'SafeMath: division by zero'
                                                                                require ext_call.return_data[0]
                                                                                if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                                poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                                                poolInfo[idx].field_512 = block.timestamp
                                                                                require idx < poolInfo.length
                                                                                mem[0] = 4
                                                                                _29219 = mem[64]
                                                                                mem[64] = mem[64] + 128
                                                                                mem[_29219] = poolInfo[idx].field_0
                                                                                mem[_29219 + 32] = poolInfo[idx].field_256
                                                                                mem[_29219 + 64] = poolInfo[idx].field_512
                                                                                mem[_29219 + 96] = poolInfo[idx].field_768
                                                                            else:
                                                                                if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                                if ext_call.return_data[0] <= 0:
                                                                                    revert with 0, 'SafeMath: division by zero'
                                                                                require ext_call.return_data[0]
                                                                                if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                                poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                                                poolInfo[idx].field_512 = block.timestamp
                                                                                require idx < poolInfo.length
                                                                                mem[0] = 4
                                                                                _29592 = mem[64]
                                                                                mem[64] = mem[64] + 128
                                                                                mem[_29592] = poolInfo[idx].field_0
                                                                                mem[_29592 + 32] = poolInfo[idx].field_256
                                                                                mem[_29592 + 64] = poolInfo[idx].field_512
                                                                                mem[_29592 + 96] = poolInfo[idx].field_768
                                                                        else:
                                                                            if (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond) != poolInfo[idx].field_256:
                                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                            if totalAllocPoint <= 0:
                                                                                revert with 0, 'SafeMath: division by zero'
                                                                            require totalAllocPoint
                                                                            if not (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint:
                                                                                if ext_call.return_data[0] <= 0:
                                                                                    revert with 0, 'SafeMath: division by zero'
                                                                                require ext_call.return_data[0]
                                                                                if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                                poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                                                poolInfo[idx].field_512 = block.timestamp
                                                                                require idx < poolInfo.length
                                                                                mem[0] = 4
                                                                                _29587 = mem[64]
                                                                                mem[64] = mem[64] + 128
                                                                                mem[_29587] = poolInfo[idx].field_0
                                                                                mem[_29587 + 32] = poolInfo[idx].field_256
                                                                                mem[_29587 + 64] = poolInfo[idx].field_512
                                                                                mem[_29587 + 96] = poolInfo[idx].field_768
                                                                            else:
                                                                                if 10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                                                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                                if ext_call.return_data[0] <= 0:
                                                                                    revert with 0, 'SafeMath: division by zero'
                                                                                require ext_call.return_data[0]
                                                                                if (10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                                poolInfo[idx].field_768 += 10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                                                                                poolInfo[idx].field_512 = block.timestamp
                                                                                require idx < poolInfo.length
                                                                                mem[0] = 4
                                                                                _29869 = mem[64]
                                                                                mem[64] = mem[64] + 128
                                                                                mem[_29869] = poolInfo[idx].field_0
                                                                                mem[_29869 + 32] = poolInfo[idx].field_256
                                                                                mem[_29869 + 64] = poolInfo[idx].field_512
                                                                                mem[_29869 + 96] = poolInfo[idx].field_768
                                                        mem[0] = msg.sender
                                                        mem[32] = sha3(idx, 6)
                                                        if not userInfo[idx][msg.sender].field_0:
                                                            if userInfo[idx][msg.sender].field_256 > 0:
                                                                revert with 0, 'SafeMath: subtraction overflow'
                                                            if -userInfo[idx][msg.sender].field_256 < 0:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                        else:
                                                            if poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / userInfo[idx][msg.sender].field_0 != poolInfo[idx].field_768:
                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                            if userInfo[idx][msg.sender].field_256 > poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12:
                                                                revert with 0, 'SafeMath: subtraction overflow'
                                                            if (poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12) - userInfo[idx][msg.sender].field_256 < 0:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                        if not userInfo[idx][msg.sender].field_0:
                                                            userInfo[idx][msg.sender].field_256 = 0
                                                        else:
                                                            if poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / userInfo[idx][msg.sender].field_0 != poolInfo[idx].field_768:
                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                            userInfo[idx][msg.sender].field_256 = poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12
                                                else:
                                                    if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[idx][address(msg.sender)].field_0) + (poolInfo[idx].field_768 * userInfo[idx][address(msg.sender)].field_0) / userInfo[idx][address(msg.sender)].field_0 != (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768:
                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                    if userInfo[idx][address(msg.sender)].field_256 > (10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[idx][address(msg.sender)].field_0) + (poolInfo[idx].field_768 * userInfo[idx][address(msg.sender)].field_0) / 10^12:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if ((10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[idx][address(msg.sender)].field_0) + (poolInfo[idx].field_768 * userInfo[idx][address(msg.sender)].field_0) / 10^12) - userInfo[idx][address(msg.sender)].field_256 > 0:
                                                        require idx < poolInfo.length
                                                        if block.timestamp <= poolInfo[idx].field_512:
                                                            require idx < poolInfo.length
                                                            mem[0] = 4
                                                            _20928 = mem[64]
                                                            mem[64] = mem[64] + 128
                                                            mem[_20928] = poolInfo[idx].field_0
                                                            mem[_20928 + 32] = poolInfo[idx].field_256
                                                            mem[_20928 + 64] = poolInfo[idx].field_512
                                                            mem[_20928 + 96] = poolInfo[idx].field_768
                                                        else:
                                                            mem[mem[64] + 4] = this.address
                                                            require ext_code.size(poolInfo[idx].field_0)
                                                            staticcall poolInfo[idx].field_0.0x70a08231 with:
                                                                    gas gas_remaining wei
                                                                   args this.address
                                                            mem[mem[64]] = ext_call.return_data[0]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            require return_data.size >= 32
                                                            if not ext_call.return_data[0]:
                                                                poolInfo[idx].field_512 = block.timestamp
                                                                require idx < poolInfo.length
                                                                mem[0] = 4
                                                                _22103 = mem[64]
                                                                mem[64] = mem[64] + 128
                                                                mem[_22103] = poolInfo[idx].field_0
                                                                mem[_22103 + 32] = poolInfo[idx].field_256
                                                                mem[_22103 + 64] = poolInfo[idx].field_512
                                                                mem[_22103 + 96] = poolInfo[idx].field_768
                                                            else:
                                                                if not totalAllocPoint:
                                                                    poolInfo[idx].field_512 = block.timestamp
                                                                    require idx < poolInfo.length
                                                                    mem[0] = 4
                                                                    _22292 = mem[64]
                                                                    mem[64] = mem[64] + 128
                                                                    mem[_22292] = poolInfo[idx].field_0
                                                                    mem[_22292 + 32] = poolInfo[idx].field_256
                                                                    mem[_22292 + 64] = poolInfo[idx].field_512
                                                                    mem[_22292 + 96] = poolInfo[idx].field_768
                                                                else:
                                                                    if poolInfo[idx].field_512 > block.timestamp:
                                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                                    if not block.timestamp - poolInfo[idx].field_512:
                                                                        if totalAllocPoint <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        require totalAllocPoint
                                                                        if not 0 / totalAllocPoint:
                                                                            if ext_call.return_data[0] <= 0:
                                                                                revert with 0, 'SafeMath: division by zero'
                                                                            require ext_call.return_data[0]
                                                                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                                revert with 0, 'SafeMath: addition overflow'
                                                                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                                            poolInfo[idx].field_512 = block.timestamp
                                                                            require idx < poolInfo.length
                                                                            mem[0] = 4
                                                                            _29214 = mem[64]
                                                                            mem[64] = mem[64] + 128
                                                                            mem[_29214] = poolInfo[idx].field_0
                                                                            mem[_29214 + 32] = poolInfo[idx].field_256
                                                                            mem[_29214 + 64] = poolInfo[idx].field_512
                                                                            mem[_29214 + 96] = poolInfo[idx].field_768
                                                                        else:
                                                                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                            if ext_call.return_data[0] <= 0:
                                                                                revert with 0, 'SafeMath: division by zero'
                                                                            require ext_call.return_data[0]
                                                                            if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                                revert with 0, 'SafeMath: addition overflow'
                                                                            poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                                            poolInfo[idx].field_512 = block.timestamp
                                                                            require idx < poolInfo.length
                                                                            mem[0] = 4
                                                                            _29582 = mem[64]
                                                                            mem[64] = mem[64] + 128
                                                                            mem[_29582] = poolInfo[idx].field_0
                                                                            mem[_29582 + 32] = poolInfo[idx].field_256
                                                                            mem[_29582 + 64] = poolInfo[idx].field_512
                                                                            mem[_29582 + 96] = poolInfo[idx].field_768
                                                                    else:
                                                                        if (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond) / block.timestamp - poolInfo[idx].field_512 != rewardsPerSecond:
                                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                        if not (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond):
                                                                            if totalAllocPoint <= 0:
                                                                                revert with 0, 'SafeMath: division by zero'
                                                                            require totalAllocPoint
                                                                            if not 0 / totalAllocPoint:
                                                                                if ext_call.return_data[0] <= 0:
                                                                                    revert with 0, 'SafeMath: division by zero'
                                                                                require ext_call.return_data[0]
                                                                                if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                                poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                                                poolInfo[idx].field_512 = block.timestamp
                                                                                require idx < poolInfo.length
                                                                                mem[0] = 4
                                                                                _29577 = mem[64]
                                                                                mem[64] = mem[64] + 128
                                                                                mem[_29577] = poolInfo[idx].field_0
                                                                                mem[_29577 + 32] = poolInfo[idx].field_256
                                                                                mem[_29577 + 64] = poolInfo[idx].field_512
                                                                                mem[_29577 + 96] = poolInfo[idx].field_768
                                                                            else:
                                                                                if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                                if ext_call.return_data[0] <= 0:
                                                                                    revert with 0, 'SafeMath: division by zero'
                                                                                require ext_call.return_data[0]
                                                                                if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                                poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                                                poolInfo[idx].field_512 = block.timestamp
                                                                                require idx < poolInfo.length
                                                                                mem[0] = 4
                                                                                _29864 = mem[64]
                                                                                mem[64] = mem[64] + 128
                                                                                mem[_29864] = poolInfo[idx].field_0
                                                                                mem[_29864 + 32] = poolInfo[idx].field_256
                                                                                mem[_29864 + 64] = poolInfo[idx].field_512
                                                                                mem[_29864 + 96] = poolInfo[idx].field_768
                                                                        else:
                                                                            if (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond) != poolInfo[idx].field_256:
                                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                            if totalAllocPoint <= 0:
                                                                                revert with 0, 'SafeMath: division by zero'
                                                                            require totalAllocPoint
                                                                            if not (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint:
                                                                                if ext_call.return_data[0] <= 0:
                                                                                    revert with 0, 'SafeMath: division by zero'
                                                                                require ext_call.return_data[0]
                                                                                if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                                poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                                                poolInfo[idx].field_512 = block.timestamp
                                                                                require idx < poolInfo.length
                                                                                mem[0] = 4
                                                                                _29859 = mem[64]
                                                                                mem[64] = mem[64] + 128
                                                                                mem[_29859] = poolInfo[idx].field_0
                                                                                mem[_29859 + 32] = poolInfo[idx].field_256
                                                                                mem[_29859 + 64] = poolInfo[idx].field_512
                                                                                mem[_29859 + 96] = poolInfo[idx].field_768
                                                                            else:
                                                                                if 10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                                                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                                if ext_call.return_data[0] <= 0:
                                                                                    revert with 0, 'SafeMath: division by zero'
                                                                                require ext_call.return_data[0]
                                                                                if (10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                                poolInfo[idx].field_768 += 10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                                                                                poolInfo[idx].field_512 = block.timestamp
                                                                                require idx < poolInfo.length
                                                                                mem[0] = 4
                                                                                _30050 = mem[64]
                                                                                mem[64] = mem[64] + 128
                                                                                mem[_30050] = poolInfo[idx].field_0
                                                                                mem[_30050 + 32] = poolInfo[idx].field_256
                                                                                mem[_30050 + 64] = poolInfo[idx].field_512
                                                                                mem[_30050 + 96] = poolInfo[idx].field_768
                                                        mem[0] = msg.sender
                                                        mem[32] = sha3(idx, 6)
                                                        if not userInfo[idx][msg.sender].field_0:
                                                            if userInfo[idx][msg.sender].field_256 > 0:
                                                                revert with 0, 'SafeMath: subtraction overflow'
                                                            if -userInfo[idx][msg.sender].field_256 < 0:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                        else:
                                                            if poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / userInfo[idx][msg.sender].field_0 != poolInfo[idx].field_768:
                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                            if userInfo[idx][msg.sender].field_256 > poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12:
                                                                revert with 0, 'SafeMath: subtraction overflow'
                                                            if (poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12) - userInfo[idx][msg.sender].field_256 < 0:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                        if not userInfo[idx][msg.sender].field_0:
                                                            userInfo[idx][msg.sender].field_256 = 0
                                                        else:
                                                            if poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / userInfo[idx][msg.sender].field_0 != poolInfo[idx].field_768:
                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                            userInfo[idx][msg.sender].field_256 = poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12
                                        else:
                                            if (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond) != poolInfo[idx].field_256:
                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if totalAllocPoint <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalAllocPoint
                                            if not (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint:
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if not userInfo[idx][address(msg.sender)].field_0:
                                                    if userInfo[idx][address(msg.sender)].field_256 > 0:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if -userInfo[idx][address(msg.sender)].field_256 > 0:
                                                        require idx < poolInfo.length
                                                        if block.timestamp <= poolInfo[idx].field_512:
                                                            require idx < poolInfo.length
                                                            mem[0] = 4
                                                            _20723 = mem[64]
                                                            mem[64] = mem[64] + 128
                                                            mem[_20723] = poolInfo[idx].field_0
                                                            mem[_20723 + 32] = poolInfo[idx].field_256
                                                            mem[_20723 + 64] = poolInfo[idx].field_512
                                                            mem[_20723 + 96] = poolInfo[idx].field_768
                                                        else:
                                                            mem[mem[64] + 4] = this.address
                                                            require ext_code.size(poolInfo[idx].field_0)
                                                            staticcall poolInfo[idx].field_0.0x70a08231 with:
                                                                    gas gas_remaining wei
                                                                   args this.address
                                                            mem[mem[64]] = ext_call.return_data[0]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            require return_data.size >= 32
                                                            if not ext_call.return_data[0]:
                                                                poolInfo[idx].field_512 = block.timestamp
                                                                require idx < poolInfo.length
                                                                mem[0] = 4
                                                                _21856 = mem[64]
                                                                mem[64] = mem[64] + 128
                                                                mem[_21856] = poolInfo[idx].field_0
                                                                mem[_21856 + 32] = poolInfo[idx].field_256
                                                                mem[_21856 + 64] = poolInfo[idx].field_512
                                                                mem[_21856 + 96] = poolInfo[idx].field_768
                                                            else:
                                                                if not totalAllocPoint:
                                                                    poolInfo[idx].field_512 = block.timestamp
                                                                    require idx < poolInfo.length
                                                                    mem[0] = 4
                                                                    _22098 = mem[64]
                                                                    mem[64] = mem[64] + 128
                                                                    mem[_22098] = poolInfo[idx].field_0
                                                                    mem[_22098 + 32] = poolInfo[idx].field_256
                                                                    mem[_22098 + 64] = poolInfo[idx].field_512
                                                                    mem[_22098 + 96] = poolInfo[idx].field_768
                                                                else:
                                                                    if poolInfo[idx].field_512 > block.timestamp:
                                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                                    if not block.timestamp - poolInfo[idx].field_512:
                                                                        if totalAllocPoint <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        require totalAllocPoint
                                                                        if not 0 / totalAllocPoint:
                                                                            if ext_call.return_data[0] <= 0:
                                                                                revert with 0, 'SafeMath: division by zero'
                                                                            require ext_call.return_data[0]
                                                                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                                revert with 0, 'SafeMath: addition overflow'
                                                                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                                            poolInfo[idx].field_512 = block.timestamp
                                                                            require idx < poolInfo.length
                                                                            mem[0] = 4
                                                                            _28836 = mem[64]
                                                                            mem[64] = mem[64] + 128
                                                                            mem[_28836] = poolInfo[idx].field_0
                                                                            mem[_28836 + 32] = poolInfo[idx].field_256
                                                                            mem[_28836 + 64] = poolInfo[idx].field_512
                                                                            mem[_28836 + 96] = poolInfo[idx].field_768
                                                                        else:
                                                                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                            if ext_call.return_data[0] <= 0:
                                                                                revert with 0, 'SafeMath: division by zero'
                                                                            require ext_call.return_data[0]
                                                                            if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                                revert with 0, 'SafeMath: addition overflow'
                                                                            poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                                            poolInfo[idx].field_512 = block.timestamp
                                                                            require idx < poolInfo.length
                                                                            mem[0] = 4
                                                                            _29207 = mem[64]
                                                                            mem[64] = mem[64] + 128
                                                                            mem[_29207] = poolInfo[idx].field_0
                                                                            mem[_29207 + 32] = poolInfo[idx].field_256
                                                                            mem[_29207 + 64] = poolInfo[idx].field_512
                                                                            mem[_29207 + 96] = poolInfo[idx].field_768
                                                                    else:
                                                                        if (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond) / block.timestamp - poolInfo[idx].field_512 != rewardsPerSecond:
                                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                        if not (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond):
                                                                            if totalAllocPoint <= 0:
                                                                                revert with 0, 'SafeMath: division by zero'
                                                                            require totalAllocPoint
                                                                            if not 0 / totalAllocPoint:
                                                                                if ext_call.return_data[0] <= 0:
                                                                                    revert with 0, 'SafeMath: division by zero'
                                                                                require ext_call.return_data[0]
                                                                                if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                                poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                                                poolInfo[idx].field_512 = block.timestamp
                                                                                require idx < poolInfo.length
                                                                                mem[0] = 4
                                                                                _29202 = mem[64]
                                                                                mem[64] = mem[64] + 128
                                                                                mem[_29202] = poolInfo[idx].field_0
                                                                                mem[_29202 + 32] = poolInfo[idx].field_256
                                                                                mem[_29202 + 64] = poolInfo[idx].field_512
                                                                                mem[_29202 + 96] = poolInfo[idx].field_768
                                                                            else:
                                                                                if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                                if ext_call.return_data[0] <= 0:
                                                                                    revert with 0, 'SafeMath: division by zero'
                                                                                require ext_call.return_data[0]
                                                                                if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                                poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                                                poolInfo[idx].field_512 = block.timestamp
                                                                                require idx < poolInfo.length
                                                                                mem[0] = 4
                                                                                _29572 = mem[64]
                                                                                mem[64] = mem[64] + 128
                                                                                mem[_29572] = poolInfo[idx].field_0
                                                                                mem[_29572 + 32] = poolInfo[idx].field_256
                                                                                mem[_29572 + 64] = poolInfo[idx].field_512
                                                                                mem[_29572 + 96] = poolInfo[idx].field_768
                                                                        else:
                                                                            if (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond) != poolInfo[idx].field_256:
                                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                            if totalAllocPoint <= 0:
                                                                                revert with 0, 'SafeMath: division by zero'
                                                                            require totalAllocPoint
                                                                            if not (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint:
                                                                                if ext_call.return_data[0] <= 0:
                                                                                    revert with 0, 'SafeMath: division by zero'
                                                                                require ext_call.return_data[0]
                                                                                if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                                poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                                                poolInfo[idx].field_512 = block.timestamp
                                                                                require idx < poolInfo.length
                                                                                mem[0] = 4
                                                                                _29567 = mem[64]
                                                                                mem[64] = mem[64] + 128
                                                                                mem[_29567] = poolInfo[idx].field_0
                                                                                mem[_29567 + 32] = poolInfo[idx].field_256
                                                                                mem[_29567 + 64] = poolInfo[idx].field_512
                                                                                mem[_29567 + 96] = poolInfo[idx].field_768
                                                                            else:
                                                                                if 10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                                                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                                if ext_call.return_data[0] <= 0:
                                                                                    revert with 0, 'SafeMath: division by zero'
                                                                                require ext_call.return_data[0]
                                                                                if (10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                                poolInfo[idx].field_768 += 10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                                                                                poolInfo[idx].field_512 = block.timestamp
                                                                                require idx < poolInfo.length
                                                                                mem[0] = 4
                                                                                _29854 = mem[64]
                                                                                mem[64] = mem[64] + 128
                                                                                mem[_29854] = poolInfo[idx].field_0
                                                                                mem[_29854 + 32] = poolInfo[idx].field_256
                                                                                mem[_29854 + 64] = poolInfo[idx].field_512
                                                                                mem[_29854 + 96] = poolInfo[idx].field_768
                                                        mem[0] = msg.sender
                                                        mem[32] = sha3(idx, 6)
                                                        if not userInfo[idx][msg.sender].field_0:
                                                            if userInfo[idx][msg.sender].field_256 > 0:
                                                                revert with 0, 'SafeMath: subtraction overflow'
                                                            if -userInfo[idx][msg.sender].field_256 < 0:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                        else:
                                                            if poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / userInfo[idx][msg.sender].field_0 != poolInfo[idx].field_768:
                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                            if userInfo[idx][msg.sender].field_256 > poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12:
                                                                revert with 0, 'SafeMath: subtraction overflow'
                                                            if (poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12) - userInfo[idx][msg.sender].field_256 < 0:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                        if not userInfo[idx][msg.sender].field_0:
                                                            userInfo[idx][msg.sender].field_256 = 0
                                                        else:
                                                            if poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / userInfo[idx][msg.sender].field_0 != poolInfo[idx].field_768:
                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                            userInfo[idx][msg.sender].field_256 = poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12
                                                else:
                                                    if (0 / ext_call.return_data[0] * userInfo[idx][address(msg.sender)].field_0) + (poolInfo[idx].field_768 * userInfo[idx][address(msg.sender)].field_0) / userInfo[idx][address(msg.sender)].field_0 != (0 / ext_call.return_data[0]) + poolInfo[idx].field_768:
                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                    if userInfo[idx][address(msg.sender)].field_256 > (0 / ext_call.return_data[0] * userInfo[idx][address(msg.sender)].field_0) + (poolInfo[idx].field_768 * userInfo[idx][address(msg.sender)].field_0) / 10^12:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if ((0 / ext_call.return_data[0] * userInfo[idx][address(msg.sender)].field_0) + (poolInfo[idx].field_768 * userInfo[idx][address(msg.sender)].field_0) / 10^12) - userInfo[idx][address(msg.sender)].field_256 > 0:
                                                        require idx < poolInfo.length
                                                        if block.timestamp <= poolInfo[idx].field_512:
                                                            require idx < poolInfo.length
                                                            mem[0] = 4
                                                            _20922 = mem[64]
                                                            mem[64] = mem[64] + 128
                                                            mem[_20922] = poolInfo[idx].field_0
                                                            mem[_20922 + 32] = poolInfo[idx].field_256
                                                            mem[_20922 + 64] = poolInfo[idx].field_512
                                                            mem[_20922 + 96] = poolInfo[idx].field_768
                                                        else:
                                                            mem[mem[64] + 4] = this.address
                                                            require ext_code.size(poolInfo[idx].field_0)
                                                            staticcall poolInfo[idx].field_0.0x70a08231 with:
                                                                    gas gas_remaining wei
                                                                   args this.address
                                                            mem[mem[64]] = ext_call.return_data[0]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            require return_data.size >= 32
                                                            if not ext_call.return_data[0]:
                                                                poolInfo[idx].field_512 = block.timestamp
                                                                require idx < poolInfo.length
                                                                mem[0] = 4
                                                                _22091 = mem[64]
                                                                mem[64] = mem[64] + 128
                                                                mem[_22091] = poolInfo[idx].field_0
                                                                mem[_22091 + 32] = poolInfo[idx].field_256
                                                                mem[_22091 + 64] = poolInfo[idx].field_512
                                                                mem[_22091 + 96] = poolInfo[idx].field_768
                                                            else:
                                                                if not totalAllocPoint:
                                                                    poolInfo[idx].field_512 = block.timestamp
                                                                    require idx < poolInfo.length
                                                                    mem[0] = 4
                                                                    _22287 = mem[64]
                                                                    mem[64] = mem[64] + 128
                                                                    mem[_22287] = poolInfo[idx].field_0
                                                                    mem[_22287 + 32] = poolInfo[idx].field_256
                                                                    mem[_22287 + 64] = poolInfo[idx].field_512
                                                                    mem[_22287 + 96] = poolInfo[idx].field_768
                                                                else:
                                                                    if poolInfo[idx].field_512 > block.timestamp:
                                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                                    if not block.timestamp - poolInfo[idx].field_512:
                                                                        if totalAllocPoint <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        require totalAllocPoint
                                                                        if not 0 / totalAllocPoint:
                                                                            if ext_call.return_data[0] <= 0:
                                                                                revert with 0, 'SafeMath: division by zero'
                                                                            require ext_call.return_data[0]
                                                                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                                revert with 0, 'SafeMath: addition overflow'
                                                                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                                            poolInfo[idx].field_512 = block.timestamp
                                                                            require idx < poolInfo.length
                                                                            mem[0] = 4
                                                                            _29197 = mem[64]
                                                                            mem[64] = mem[64] + 128
                                                                            mem[_29197] = poolInfo[idx].field_0
                                                                            mem[_29197 + 32] = poolInfo[idx].field_256
                                                                            mem[_29197 + 64] = poolInfo[idx].field_512
                                                                            mem[_29197 + 96] = poolInfo[idx].field_768
                                                                        else:
                                                                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                            if ext_call.return_data[0] <= 0:
                                                                                revert with 0, 'SafeMath: division by zero'
                                                                            require ext_call.return_data[0]
                                                                            if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                                revert with 0, 'SafeMath: addition overflow'
                                                                            poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                                            poolInfo[idx].field_512 = block.timestamp
                                                                            require idx < poolInfo.length
                                                                            mem[0] = 4
                                                                            _29562 = mem[64]
                                                                            mem[64] = mem[64] + 128
                                                                            mem[_29562] = poolInfo[idx].field_0
                                                                            mem[_29562 + 32] = poolInfo[idx].field_256
                                                                            mem[_29562 + 64] = poolInfo[idx].field_512
                                                                            mem[_29562 + 96] = poolInfo[idx].field_768
                                                                    else:
                                                                        if (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond) / block.timestamp - poolInfo[idx].field_512 != rewardsPerSecond:
                                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                        if not (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond):
                                                                            if totalAllocPoint <= 0:
                                                                                revert with 0, 'SafeMath: division by zero'
                                                                            require totalAllocPoint
                                                                            if not 0 / totalAllocPoint:
                                                                                if ext_call.return_data[0] <= 0:
                                                                                    revert with 0, 'SafeMath: division by zero'
                                                                                require ext_call.return_data[0]
                                                                                if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                                poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                                                poolInfo[idx].field_512 = block.timestamp
                                                                                require idx < poolInfo.length
                                                                                mem[0] = 4
                                                                                _29557 = mem[64]
                                                                                mem[64] = mem[64] + 128
                                                                                mem[_29557] = poolInfo[idx].field_0
                                                                                mem[_29557 + 32] = poolInfo[idx].field_256
                                                                                mem[_29557 + 64] = poolInfo[idx].field_512
                                                                                mem[_29557 + 96] = poolInfo[idx].field_768
                                                                            else:
                                                                                if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                                if ext_call.return_data[0] <= 0:
                                                                                    revert with 0, 'SafeMath: division by zero'
                                                                                require ext_call.return_data[0]
                                                                                if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                                poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                                                poolInfo[idx].field_512 = block.timestamp
                                                                                require idx < poolInfo.length
                                                                                mem[0] = 4
                                                                                _29849 = mem[64]
                                                                                mem[64] = mem[64] + 128
                                                                                mem[_29849] = poolInfo[idx].field_0
                                                                                mem[_29849 + 32] = poolInfo[idx].field_256
                                                                                mem[_29849 + 64] = poolInfo[idx].field_512
                                                                                mem[_29849 + 96] = poolInfo[idx].field_768
                                                                        else:
                                                                            if (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond) != poolInfo[idx].field_256:
                                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                            if totalAllocPoint <= 0:
                                                                                revert with 0, 'SafeMath: division by zero'
                                                                            require totalAllocPoint
                                                                            if not (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint:
                                                                                if ext_call.return_data[0] <= 0:
                                                                                    revert with 0, 'SafeMath: division by zero'
                                                                                require ext_call.return_data[0]
                                                                                if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                                poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                                                poolInfo[idx].field_512 = block.timestamp
                                                                                require idx < poolInfo.length
                                                                                mem[0] = 4
                                                                                _29844 = mem[64]
                                                                                mem[64] = mem[64] + 128
                                                                                mem[_29844] = poolInfo[idx].field_0
                                                                                mem[_29844 + 32] = poolInfo[idx].field_256
                                                                                mem[_29844 + 64] = poolInfo[idx].field_512
                                                                                mem[_29844 + 96] = poolInfo[idx].field_768
                                                                            else:
                                                                                if 10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                                                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                                if ext_call.return_data[0] <= 0:
                                                                                    revert with 0, 'SafeMath: division by zero'
                                                                                require ext_call.return_data[0]
                                                                                if (10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                                poolInfo[idx].field_768 += 10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                                                                                poolInfo[idx].field_512 = block.timestamp
                                                                                require idx < poolInfo.length
                                                                                mem[0] = 4
                                                                                _30043 = mem[64]
                                                                                mem[64] = mem[64] + 128
                                                                                mem[_30043] = poolInfo[idx].field_0
                                                                                mem[_30043 + 32] = poolInfo[idx].field_256
                                                                                mem[_30043 + 64] = poolInfo[idx].field_512
                                                                                mem[_30043 + 96] = poolInfo[idx].field_768
                                                        mem[0] = msg.sender
                                                        mem[32] = sha3(idx, 6)
                                                        if not userInfo[idx][msg.sender].field_0:
                                                            if userInfo[idx][msg.sender].field_256 > 0:
                                                                revert with 0, 'SafeMath: subtraction overflow'
                                                            if -userInfo[idx][msg.sender].field_256 < 0:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                        else:
                                                            if poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / userInfo[idx][msg.sender].field_0 != poolInfo[idx].field_768:
                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                            if userInfo[idx][msg.sender].field_256 > poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12:
                                                                revert with 0, 'SafeMath: subtraction overflow'
                                                            if (poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12) - userInfo[idx][msg.sender].field_256 < 0:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                        if not userInfo[idx][msg.sender].field_0:
                                                            userInfo[idx][msg.sender].field_256 = 0
                                                        else:
                                                            if poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / userInfo[idx][msg.sender].field_0 != poolInfo[idx].field_768:
                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                            userInfo[idx][msg.sender].field_256 = poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12
                                            else:
                                                if 10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if (10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if not userInfo[idx][address(msg.sender)].field_0:
                                                    if userInfo[idx][address(msg.sender)].field_256 > 0:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if -userInfo[idx][address(msg.sender)].field_256 > 0:
                                                        require idx < poolInfo.length
                                                        if block.timestamp <= poolInfo[idx].field_512:
                                                            require idx < poolInfo.length
                                                            mem[0] = 4
                                                            _20916 = mem[64]
                                                            mem[64] = mem[64] + 128
                                                            mem[_20916] = poolInfo[idx].field_0
                                                            mem[_20916 + 32] = poolInfo[idx].field_256
                                                            mem[_20916 + 64] = poolInfo[idx].field_512
                                                            mem[_20916 + 96] = poolInfo[idx].field_768
                                                        else:
                                                            mem[mem[64] + 4] = this.address
                                                            require ext_code.size(poolInfo[idx].field_0)
                                                            staticcall poolInfo[idx].field_0.0x70a08231 with:
                                                                    gas gas_remaining wei
                                                                   args this.address
                                                            mem[mem[64]] = ext_call.return_data[0]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            require return_data.size >= 32
                                                            if not ext_call.return_data[0]:
                                                                poolInfo[idx].field_512 = block.timestamp
                                                                require idx < poolInfo.length
                                                                mem[0] = 4
                                                                _22084 = mem[64]
                                                                mem[64] = mem[64] + 128
                                                                mem[_22084] = poolInfo[idx].field_0
                                                                mem[_22084 + 32] = poolInfo[idx].field_256
                                                                mem[_22084 + 64] = poolInfo[idx].field_512
                                                                mem[_22084 + 96] = poolInfo[idx].field_768
                                                            else:
                                                                if not totalAllocPoint:
                                                                    poolInfo[idx].field_512 = block.timestamp
                                                                    require idx < poolInfo.length
                                                                    mem[0] = 4
                                                                    _22282 = mem[64]
                                                                    mem[64] = mem[64] + 128
                                                                    mem[_22282] = poolInfo[idx].field_0
                                                                    mem[_22282 + 32] = poolInfo[idx].field_256
                                                                    mem[_22282 + 64] = poolInfo[idx].field_512
                                                                    mem[_22282 + 96] = poolInfo[idx].field_768
                                                                else:
                                                                    if poolInfo[idx].field_512 > block.timestamp:
                                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                                    if not block.timestamp - poolInfo[idx].field_512:
                                                                        if totalAllocPoint <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        require totalAllocPoint
                                                                        if not 0 / totalAllocPoint:
                                                                            if ext_call.return_data[0] <= 0:
                                                                                revert with 0, 'SafeMath: division by zero'
                                                                            require ext_call.return_data[0]
                                                                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                                revert with 0, 'SafeMath: addition overflow'
                                                                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                                            poolInfo[idx].field_512 = block.timestamp
                                                                            require idx < poolInfo.length
                                                                            mem[0] = 4
                                                                            _29190 = mem[64]
                                                                            mem[64] = mem[64] + 128
                                                                            mem[_29190] = poolInfo[idx].field_0
                                                                            mem[_29190 + 32] = poolInfo[idx].field_256
                                                                            mem[_29190 + 64] = poolInfo[idx].field_512
                                                                            mem[_29190 + 96] = poolInfo[idx].field_768
                                                                        else:
                                                                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                            if ext_call.return_data[0] <= 0:
                                                                                revert with 0, 'SafeMath: division by zero'
                                                                            require ext_call.return_data[0]
                                                                            if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                                revert with 0, 'SafeMath: addition overflow'
                                                                            poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                                            poolInfo[idx].field_512 = block.timestamp
                                                                            require idx < poolInfo.length
                                                                            mem[0] = 4
                                                                            _29552 = mem[64]
                                                                            mem[64] = mem[64] + 128
                                                                            mem[_29552] = poolInfo[idx].field_0
                                                                            mem[_29552 + 32] = poolInfo[idx].field_256
                                                                            mem[_29552 + 64] = poolInfo[idx].field_512
                                                                            mem[_29552 + 96] = poolInfo[idx].field_768
                                                                    else:
                                                                        if (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond) / block.timestamp - poolInfo[idx].field_512 != rewardsPerSecond:
                                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                        if not (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond):
                                                                            if totalAllocPoint <= 0:
                                                                                revert with 0, 'SafeMath: division by zero'
                                                                            require totalAllocPoint
                                                                            if not 0 / totalAllocPoint:
                                                                                if ext_call.return_data[0] <= 0:
                                                                                    revert with 0, 'SafeMath: division by zero'
                                                                                require ext_call.return_data[0]
                                                                                if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                                poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                                                poolInfo[idx].field_512 = block.timestamp
                                                                                require idx < poolInfo.length
                                                                                mem[0] = 4
                                                                                _29547 = mem[64]
                                                                                mem[64] = mem[64] + 128
                                                                                mem[_29547] = poolInfo[idx].field_0
                                                                                mem[_29547 + 32] = poolInfo[idx].field_256
                                                                                mem[_29547 + 64] = poolInfo[idx].field_512
                                                                                mem[_29547 + 96] = poolInfo[idx].field_768
                                                                            else:
                                                                                if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                                if ext_call.return_data[0] <= 0:
                                                                                    revert with 0, 'SafeMath: division by zero'
                                                                                require ext_call.return_data[0]
                                                                                if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                                poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                                                poolInfo[idx].field_512 = block.timestamp
                                                                                require idx < poolInfo.length
                                                                                mem[0] = 4
                                                                                _29839 = mem[64]
                                                                                mem[64] = mem[64] + 128
                                                                                mem[_29839] = poolInfo[idx].field_0
                                                                                mem[_29839 + 32] = poolInfo[idx].field_256
                                                                                mem[_29839 + 64] = poolInfo[idx].field_512
                                                                                mem[_29839 + 96] = poolInfo[idx].field_768
                                                                        else:
                                                                            if (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond) != poolInfo[idx].field_256:
                                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                            if totalAllocPoint <= 0:
                                                                                revert with 0, 'SafeMath: division by zero'
                                                                            require totalAllocPoint
                                                                            if not (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint:
                                                                                if ext_call.return_data[0] <= 0:
                                                                                    revert with 0, 'SafeMath: division by zero'
                                                                                require ext_call.return_data[0]
                                                                                if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                                poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                                                poolInfo[idx].field_512 = block.timestamp
                                                                                require idx < poolInfo.length
                                                                                mem[0] = 4
                                                                                _29834 = mem[64]
                                                                                mem[64] = mem[64] + 128
                                                                                mem[_29834] = poolInfo[idx].field_0
                                                                                mem[_29834 + 32] = poolInfo[idx].field_256
                                                                                mem[_29834 + 64] = poolInfo[idx].field_512
                                                                                mem[_29834 + 96] = poolInfo[idx].field_768
                                                                            else:
                                                                                if 10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                                                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                                if ext_call.return_data[0] <= 0:
                                                                                    revert with 0, 'SafeMath: division by zero'
                                                                                require ext_call.return_data[0]
                                                                                if (10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                                poolInfo[idx].field_768 += 10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                                                                                poolInfo[idx].field_512 = block.timestamp
                                                                                require idx < poolInfo.length
                                                                                mem[0] = 4
                                                                                _30038 = mem[64]
                                                                                mem[64] = mem[64] + 128
                                                                                mem[_30038] = poolInfo[idx].field_0
                                                                                mem[_30038 + 32] = poolInfo[idx].field_256
                                                                                mem[_30038 + 64] = poolInfo[idx].field_512
                                                                                mem[_30038 + 96] = poolInfo[idx].field_768
                                                        mem[0] = msg.sender
                                                        mem[32] = sha3(idx, 6)
                                                        if not userInfo[idx][msg.sender].field_0:
                                                            if userInfo[idx][msg.sender].field_256 > 0:
                                                                revert with 0, 'SafeMath: subtraction overflow'
                                                            if -userInfo[idx][msg.sender].field_256 < 0:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                        else:
                                                            if poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / userInfo[idx][msg.sender].field_0 != poolInfo[idx].field_768:
                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                            if userInfo[idx][msg.sender].field_256 > poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12:
                                                                revert with 0, 'SafeMath: subtraction overflow'
                                                            if (poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12) - userInfo[idx][msg.sender].field_256 < 0:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                        if not userInfo[idx][msg.sender].field_0:
                                                            userInfo[idx][msg.sender].field_256 = 0
                                                        else:
                                                            if poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / userInfo[idx][msg.sender].field_0 != poolInfo[idx].field_768:
                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                            userInfo[idx][msg.sender].field_256 = poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12
                                                else:
                                                    if (10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0] * userInfo[idx][address(msg.sender)].field_0) + (poolInfo[idx].field_768 * userInfo[idx][address(msg.sender)].field_0) / userInfo[idx][address(msg.sender)].field_0 != (10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768:
                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                    if userInfo[idx][address(msg.sender)].field_256 > (10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0] * userInfo[idx][address(msg.sender)].field_0) + (poolInfo[idx].field_768 * userInfo[idx][address(msg.sender)].field_0) / 10^12:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if ((10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0] * userInfo[idx][address(msg.sender)].field_0) + (poolInfo[idx].field_768 * userInfo[idx][address(msg.sender)].field_0) / 10^12) - userInfo[idx][address(msg.sender)].field_256 > 0:
                                                        require idx < poolInfo.length
                                                        if block.timestamp <= poolInfo[idx].field_512:
                                                            require idx < poolInfo.length
                                                            mem[0] = 4
                                                            _21127 = mem[64]
                                                            mem[64] = mem[64] + 128
                                                            mem[_21127] = poolInfo[idx].field_0
                                                            mem[_21127 + 32] = poolInfo[idx].field_256
                                                            mem[_21127 + 64] = poolInfo[idx].field_512
                                                            mem[_21127 + 96] = poolInfo[idx].field_768
                                                        else:
                                                            mem[mem[64] + 4] = this.address
                                                            require ext_code.size(poolInfo[idx].field_0)
                                                            staticcall poolInfo[idx].field_0.0x70a08231 with:
                                                                    gas gas_remaining wei
                                                                   args this.address
                                                            mem[mem[64]] = ext_call.return_data[0]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            require return_data.size >= 32
                                                            if not ext_call.return_data[0]:
                                                                poolInfo[idx].field_512 = block.timestamp
                                                                require idx < poolInfo.length
                                                                mem[0] = 4
                                                                _22275 = mem[64]
                                                                mem[64] = mem[64] + 128
                                                                mem[_22275] = poolInfo[idx].field_0
                                                                mem[_22275 + 32] = poolInfo[idx].field_256
                                                                mem[_22275 + 64] = poolInfo[idx].field_512
                                                                mem[_22275 + 96] = poolInfo[idx].field_768
                                                            else:
                                                                if not totalAllocPoint:
                                                                    poolInfo[idx].field_512 = block.timestamp
                                                                    require idx < poolInfo.length
                                                                    mem[0] = 4
                                                                    _22433 = mem[64]
                                                                    mem[64] = mem[64] + 128
                                                                    mem[_22433] = poolInfo[idx].field_0
                                                                    mem[_22433 + 32] = poolInfo[idx].field_256
                                                                    mem[_22433 + 64] = poolInfo[idx].field_512
                                                                    mem[_22433 + 96] = poolInfo[idx].field_768
                                                                else:
                                                                    if poolInfo[idx].field_512 > block.timestamp:
                                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                                    if not block.timestamp - poolInfo[idx].field_512:
                                                                        if totalAllocPoint <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        require totalAllocPoint
                                                                        if not 0 / totalAllocPoint:
                                                                            if ext_call.return_data[0] <= 0:
                                                                                revert with 0, 'SafeMath: division by zero'
                                                                            require ext_call.return_data[0]
                                                                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                                revert with 0, 'SafeMath: addition overflow'
                                                                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                                            poolInfo[idx].field_512 = block.timestamp
                                                                            require idx < poolInfo.length
                                                                            mem[0] = 4
                                                                            _29542 = mem[64]
                                                                            mem[64] = mem[64] + 128
                                                                            mem[_29542] = poolInfo[idx].field_0
                                                                            mem[_29542 + 32] = poolInfo[idx].field_256
                                                                            mem[_29542 + 64] = poolInfo[idx].field_512
                                                                            mem[_29542 + 96] = poolInfo[idx].field_768
                                                                        else:
                                                                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                            if ext_call.return_data[0] <= 0:
                                                                                revert with 0, 'SafeMath: division by zero'
                                                                            require ext_call.return_data[0]
                                                                            if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                                revert with 0, 'SafeMath: addition overflow'
                                                                            poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                                            poolInfo[idx].field_512 = block.timestamp
                                                                            require idx < poolInfo.length
                                                                            mem[0] = 4
                                                                            _29829 = mem[64]
                                                                            mem[64] = mem[64] + 128
                                                                            mem[_29829] = poolInfo[idx].field_0
                                                                            mem[_29829 + 32] = poolInfo[idx].field_256
                                                                            mem[_29829 + 64] = poolInfo[idx].field_512
                                                                            mem[_29829 + 96] = poolInfo[idx].field_768
                                                                    else:
                                                                        if (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond) / block.timestamp - poolInfo[idx].field_512 != rewardsPerSecond:
                                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                        if not (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond):
                                                                            if totalAllocPoint <= 0:
                                                                                revert with 0, 'SafeMath: division by zero'
                                                                            require totalAllocPoint
                                                                            if not 0 / totalAllocPoint:
                                                                                if ext_call.return_data[0] <= 0:
                                                                                    revert with 0, 'SafeMath: division by zero'
                                                                                require ext_call.return_data[0]
                                                                                if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                                poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                                                poolInfo[idx].field_512 = block.timestamp
                                                                                require idx < poolInfo.length
                                                                                mem[0] = 4
                                                                                _29824 = mem[64]
                                                                                mem[64] = mem[64] + 128
                                                                                mem[_29824] = poolInfo[idx].field_0
                                                                                mem[_29824 + 32] = poolInfo[idx].field_256
                                                                                mem[_29824 + 64] = poolInfo[idx].field_512
                                                                                mem[_29824 + 96] = poolInfo[idx].field_768
                                                                            else:
                                                                                if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                                if ext_call.return_data[0] <= 0:
                                                                                    revert with 0, 'SafeMath: division by zero'
                                                                                require ext_call.return_data[0]
                                                                                if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                                poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                                                poolInfo[idx].field_512 = block.timestamp
                                                                                require idx < poolInfo.length
                                                                                mem[0] = 4
                                                                                _30033 = mem[64]
                                                                                mem[64] = mem[64] + 128
                                                                                mem[_30033] = poolInfo[idx].field_0
                                                                                mem[_30033 + 32] = poolInfo[idx].field_256
                                                                                mem[_30033 + 64] = poolInfo[idx].field_512
                                                                                mem[_30033 + 96] = poolInfo[idx].field_768
                                                                        else:
                                                                            if (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond) != poolInfo[idx].field_256:
                                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                            if totalAllocPoint <= 0:
                                                                                revert with 0, 'SafeMath: division by zero'
                                                                            require totalAllocPoint
                                                                            if not (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint:
                                                                                if ext_call.return_data[0] <= 0:
                                                                                    revert with 0, 'SafeMath: division by zero'
                                                                                require ext_call.return_data[0]
                                                                                if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                                poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                                                poolInfo[idx].field_512 = block.timestamp
                                                                                require idx < poolInfo.length
                                                                                mem[0] = 4
                                                                                _30028 = mem[64]
                                                                                mem[64] = mem[64] + 128
                                                                                mem[_30028] = poolInfo[idx].field_0
                                                                                mem[_30028 + 32] = poolInfo[idx].field_256
                                                                                mem[_30028 + 64] = poolInfo[idx].field_512
                                                                                mem[_30028 + 96] = poolInfo[idx].field_768
                                                                            else:
                                                                                if 10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                                                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                                if ext_call.return_data[0] <= 0:
                                                                                    revert with 0, 'SafeMath: division by zero'
                                                                                require ext_call.return_data[0]
                                                                                if (10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                                poolInfo[idx].field_768 += 10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                                                                                poolInfo[idx].field_512 = block.timestamp
                                                                                require idx < poolInfo.length
                                                                                mem[0] = 4
                                                                                _30193 = mem[64]
                                                                                mem[64] = mem[64] + 128
                                                                                mem[_30193] = poolInfo[idx].field_0
                                                                                mem[_30193 + 32] = poolInfo[idx].field_256
                                                                                mem[_30193 + 64] = poolInfo[idx].field_512
                                                                                mem[_30193 + 96] = poolInfo[idx].field_768
                                                        mem[0] = msg.sender
                                                        mem[32] = sha3(idx, 6)
                                                        if not userInfo[idx][msg.sender].field_0:
                                                            if userInfo[idx][msg.sender].field_256 > 0:
                                                                revert with 0, 'SafeMath: subtraction overflow'
                                                            if -userInfo[idx][msg.sender].field_256 < 0:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                        else:
                                                            if poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / userInfo[idx][msg.sender].field_0 != poolInfo[idx].field_768:
                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                            if userInfo[idx][msg.sender].field_256 > poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12:
                                                                revert with 0, 'SafeMath: subtraction overflow'
                                                            if (poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12) - userInfo[idx][msg.sender].field_256 < 0:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                        if not userInfo[idx][msg.sender].field_0:
                                                            userInfo[idx][msg.sender].field_256 = 0
                                                        else:
                                                            if poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / userInfo[idx][msg.sender].field_0 != poolInfo[idx].field_768:
                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                            userInfo[idx][msg.sender].field_256 = poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12
                    idx = idx + 1
                    continue 
            else:
                idx = 0
                while idx < poolInfo.length:
                    mem[0] = 4
                    if block.timestamp > poolInfo[idx].field_512:
                        mem[164] = this.address
                        require ext_code.size(poolInfo[idx].field_0)
                        staticcall poolInfo[idx].field_0.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[160] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0]:
                            if totalAllocPoint:
                                if poolInfo[idx].field_512 > block.timestamp:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if not block.timestamp - poolInfo[idx].field_512:
                                    if totalAllocPoint <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require totalAllocPoint
                                    if not 0 / totalAllocPoint:
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                    else:
                                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
                                        if ext_call.return_data[0] <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require ext_call.return_data[0]
                                        if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                            revert with 0, 'SafeMath: addition overflow'
                                        poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                else:
                                    if (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond) / block.timestamp - poolInfo[idx].field_512 != rewardsPerSecond:
                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
                                    if not (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond):
                                        if totalAllocPoint <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require totalAllocPoint
                                        if not 0 / totalAllocPoint:
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                        else:
                                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                    else:
                                        if (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond) != poolInfo[idx].field_256:
                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
                                        if totalAllocPoint <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require totalAllocPoint
                                        if not (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint:
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                        else:
                                            if 10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if (10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                revert with 0, 'SafeMath: addition overflow'
                                            poolInfo[idx].field_768 += 10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                        poolInfo[idx].field_512 = block.timestamp
                    idx = idx + 1
                    continue 
                uint128(stor3.field_0) = sub_334d0bbd[sub_334d0bbd.length].field_0
                uint128(stor3.field_128) = 0
                require sub_334d0bbd.length
                sub_334d0bbd[sub_334d0bbd.length].field_0 = 0
                sub_334d0bbd.length--
                idx = 0
                while idx < poolInfo.length:
                    mem[0] = msg.sender
                    mem[32] = sha3(idx, 6)
                    _35097 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_35097] = userInfo[idx][address(msg.sender)].field_0
                    mem[_35097 + 32] = userInfo[idx][address(msg.sender)].field_256
                    if userInfo[idx][address(msg.sender)].field_0:
                        require idx < poolInfo.length
                        mem[0] = 4
                        _35099 = mem[64]
                        mem[64] = mem[64] + 128
                        mem[_35099] = poolInfo[idx].field_0
                        mem[_35099 + 32] = poolInfo[idx].field_256
                        mem[_35099 + 64] = poolInfo[idx].field_512
                        mem[_35099 + 96] = poolInfo[idx].field_768
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(poolInfo[idx].field_0)
                        staticcall poolInfo[idx].field_0.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if block.timestamp <= poolInfo[idx].field_512:
                            if not userInfo[idx][address(msg.sender)].field_0:
                                if userInfo[idx][address(msg.sender)].field_256 > 0:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if -userInfo[idx][address(msg.sender)].field_256 > 0:
                                    require idx < poolInfo.length
                                    if block.timestamp <= poolInfo[idx].field_512:
                                        require idx < poolInfo.length
                                        mem[0] = 4
                                        _35163 = mem[64]
                                        mem[64] = mem[64] + 128
                                        mem[_35163] = poolInfo[idx].field_0
                                        mem[_35163 + 32] = poolInfo[idx].field_256
                                        mem[_35163 + 64] = poolInfo[idx].field_512
                                        mem[_35163 + 96] = poolInfo[idx].field_768
                                    else:
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(poolInfo[idx].field_0)
                                        staticcall poolInfo[idx].field_0.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            poolInfo[idx].field_512 = block.timestamp
                                            require idx < poolInfo.length
                                            mem[0] = 4
                                            _35220 = mem[64]
                                            mem[64] = mem[64] + 128
                                            mem[_35220] = poolInfo[idx].field_0
                                            mem[_35220 + 32] = poolInfo[idx].field_256
                                            mem[_35220 + 64] = poolInfo[idx].field_512
                                            mem[_35220 + 96] = poolInfo[idx].field_768
                                        else:
                                            if not totalAllocPoint:
                                                poolInfo[idx].field_512 = block.timestamp
                                                require idx < poolInfo.length
                                                mem[0] = 4
                                                _35240 = mem[64]
                                                mem[64] = mem[64] + 128
                                                mem[_35240] = poolInfo[idx].field_0
                                                mem[_35240 + 32] = poolInfo[idx].field_256
                                                mem[_35240 + 64] = poolInfo[idx].field_512
                                                mem[_35240 + 96] = poolInfo[idx].field_768
                                            else:
                                                if poolInfo[idx].field_512 > block.timestamp:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if not block.timestamp - poolInfo[idx].field_512:
                                                    if totalAllocPoint <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalAllocPoint
                                                    if not 0 / totalAllocPoint:
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                        poolInfo[idx].field_512 = block.timestamp
                                                        require idx < poolInfo.length
                                                        mem[0] = 4
                                                        _35910 = mem[64]
                                                        mem[64] = mem[64] + 128
                                                        mem[_35910] = poolInfo[idx].field_0
                                                        mem[_35910 + 32] = poolInfo[idx].field_256
                                                        mem[_35910 + 64] = poolInfo[idx].field_512
                                                        mem[_35910 + 96] = poolInfo[idx].field_768
                                                    else:
                                                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                        poolInfo[idx].field_512 = block.timestamp
                                                        require idx < poolInfo.length
                                                        mem[0] = 4
                                                        _35968 = mem[64]
                                                        mem[64] = mem[64] + 128
                                                        mem[_35968] = poolInfo[idx].field_0
                                                        mem[_35968 + 32] = poolInfo[idx].field_256
                                                        mem[_35968 + 64] = poolInfo[idx].field_512
                                                        mem[_35968 + 96] = poolInfo[idx].field_768
                                                else:
                                                    if (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond) / block.timestamp - poolInfo[idx].field_512 != rewardsPerSecond:
                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                    if not (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond):
                                                        if totalAllocPoint <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require totalAllocPoint
                                                        if not 0 / totalAllocPoint:
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                            poolInfo[idx].field_512 = block.timestamp
                                                            require idx < poolInfo.length
                                                            mem[0] = 4
                                                            _35963 = mem[64]
                                                            mem[64] = mem[64] + 128
                                                            mem[_35963] = poolInfo[idx].field_0
                                                            mem[_35963 + 32] = poolInfo[idx].field_256
                                                            mem[_35963 + 64] = poolInfo[idx].field_512
                                                            mem[_35963 + 96] = poolInfo[idx].field_768
                                                        else:
                                                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                            poolInfo[idx].field_512 = block.timestamp
                                                            require idx < poolInfo.length
                                                            mem[0] = 4
                                                            _36026 = mem[64]
                                                            mem[64] = mem[64] + 128
                                                            mem[_36026] = poolInfo[idx].field_0
                                                            mem[_36026 + 32] = poolInfo[idx].field_256
                                                            mem[_36026 + 64] = poolInfo[idx].field_512
                                                            mem[_36026 + 96] = poolInfo[idx].field_768
                                                    else:
                                                        if (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond) != poolInfo[idx].field_256:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                        if totalAllocPoint <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require totalAllocPoint
                                                        if not (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint:
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                            poolInfo[idx].field_512 = block.timestamp
                                                            require idx < poolInfo.length
                                                            mem[0] = 4
                                                            _36021 = mem[64]
                                                            mem[64] = mem[64] + 128
                                                            mem[_36021] = poolInfo[idx].field_0
                                                            mem[_36021 + 32] = poolInfo[idx].field_256
                                                            mem[_36021 + 64] = poolInfo[idx].field_512
                                                            mem[_36021 + 96] = poolInfo[idx].field_768
                                                        else:
                                                            if 10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                                                            poolInfo[idx].field_512 = block.timestamp
                                                            require idx < poolInfo.length
                                                            mem[0] = 4
                                                            _36077 = mem[64]
                                                            mem[64] = mem[64] + 128
                                                            mem[_36077] = poolInfo[idx].field_0
                                                            mem[_36077 + 32] = poolInfo[idx].field_256
                                                            mem[_36077 + 64] = poolInfo[idx].field_512
                                                            mem[_36077 + 96] = poolInfo[idx].field_768
                                    mem[0] = msg.sender
                                    mem[32] = sha3(idx, 6)
                                    if not userInfo[idx][msg.sender].field_0:
                                        if userInfo[idx][msg.sender].field_256 > 0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if -userInfo[idx][msg.sender].field_256 < 0:
                                            revert with 0, 'SafeMath: addition overflow'
                                    else:
                                        if poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / userInfo[idx][msg.sender].field_0 != poolInfo[idx].field_768:
                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if userInfo[idx][msg.sender].field_256 > poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if (poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12) - userInfo[idx][msg.sender].field_256 < 0:
                                            revert with 0, 'SafeMath: addition overflow'
                                    if not userInfo[idx][msg.sender].field_0:
                                        userInfo[idx][msg.sender].field_256 = 0
                                    else:
                                        if poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / userInfo[idx][msg.sender].field_0 != poolInfo[idx].field_768:
                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        userInfo[idx][msg.sender].field_256 = poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12
                            else:
                                if poolInfo[idx].field_768 * userInfo[idx][address(msg.sender)].field_0 / userInfo[idx][address(msg.sender)].field_0 != poolInfo[idx].field_768:
                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                if userInfo[idx][address(msg.sender)].field_256 > poolInfo[idx].field_768 * userInfo[idx][address(msg.sender)].field_0 / 10^12:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if (poolInfo[idx].field_768 * userInfo[idx][address(msg.sender)].field_0 / 10^12) - userInfo[idx][address(msg.sender)].field_256 > 0:
                                    require idx < poolInfo.length
                                    if block.timestamp <= poolInfo[idx].field_512:
                                        require idx < poolInfo.length
                                        mem[0] = 4
                                        _35172 = mem[64]
                                        mem[64] = mem[64] + 128
                                        mem[_35172] = poolInfo[idx].field_0
                                        mem[_35172 + 32] = poolInfo[idx].field_256
                                        mem[_35172 + 64] = poolInfo[idx].field_512
                                        mem[_35172 + 96] = poolInfo[idx].field_768
                                    else:
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(poolInfo[idx].field_0)
                                        staticcall poolInfo[idx].field_0.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            poolInfo[idx].field_512 = block.timestamp
                                            require idx < poolInfo.length
                                            mem[0] = 4
                                            _35233 = mem[64]
                                            mem[64] = mem[64] + 128
                                            mem[_35233] = poolInfo[idx].field_0
                                            mem[_35233 + 32] = poolInfo[idx].field_256
                                            mem[_35233 + 64] = poolInfo[idx].field_512
                                            mem[_35233 + 96] = poolInfo[idx].field_768
                                        else:
                                            if not totalAllocPoint:
                                                poolInfo[idx].field_512 = block.timestamp
                                                require idx < poolInfo.length
                                                mem[0] = 4
                                                _35258 = mem[64]
                                                mem[64] = mem[64] + 128
                                                mem[_35258] = poolInfo[idx].field_0
                                                mem[_35258 + 32] = poolInfo[idx].field_256
                                                mem[_35258 + 64] = poolInfo[idx].field_512
                                                mem[_35258 + 96] = poolInfo[idx].field_768
                                            else:
                                                if poolInfo[idx].field_512 > block.timestamp:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if not block.timestamp - poolInfo[idx].field_512:
                                                    if totalAllocPoint <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalAllocPoint
                                                    if not 0 / totalAllocPoint:
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                        poolInfo[idx].field_512 = block.timestamp
                                                        require idx < poolInfo.length
                                                        mem[0] = 4
                                                        _35958 = mem[64]
                                                        mem[64] = mem[64] + 128
                                                        mem[_35958] = poolInfo[idx].field_0
                                                        mem[_35958 + 32] = poolInfo[idx].field_256
                                                        mem[_35958 + 64] = poolInfo[idx].field_512
                                                        mem[_35958 + 96] = poolInfo[idx].field_768
                                                    else:
                                                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                        if ext_call.return_data[0] <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require ext_call.return_data[0]
                                                        if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                        poolInfo[idx].field_512 = block.timestamp
                                                        require idx < poolInfo.length
                                                        mem[0] = 4
                                                        _36016 = mem[64]
                                                        mem[64] = mem[64] + 128
                                                        mem[_36016] = poolInfo[idx].field_0
                                                        mem[_36016 + 32] = poolInfo[idx].field_256
                                                        mem[_36016 + 64] = poolInfo[idx].field_512
                                                        mem[_36016 + 96] = poolInfo[idx].field_768
                                                else:
                                                    if (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond) / block.timestamp - poolInfo[idx].field_512 != rewardsPerSecond:
                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                    if not (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond):
                                                        if totalAllocPoint <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require totalAllocPoint
                                                        if not 0 / totalAllocPoint:
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                            poolInfo[idx].field_512 = block.timestamp
                                                            require idx < poolInfo.length
                                                            mem[0] = 4
                                                            _36011 = mem[64]
                                                            mem[64] = mem[64] + 128
                                                            mem[_36011] = poolInfo[idx].field_0
                                                            mem[_36011 + 32] = poolInfo[idx].field_256
                                                            mem[_36011 + 64] = poolInfo[idx].field_512
                                                            mem[_36011 + 96] = poolInfo[idx].field_768
                                                        else:
                                                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                            poolInfo[idx].field_512 = block.timestamp
                                                            require idx < poolInfo.length
                                                            mem[0] = 4
                                                            _36072 = mem[64]
                                                            mem[64] = mem[64] + 128
                                                            mem[_36072] = poolInfo[idx].field_0
                                                            mem[_36072 + 32] = poolInfo[idx].field_256
                                                            mem[_36072 + 64] = poolInfo[idx].field_512
                                                            mem[_36072 + 96] = poolInfo[idx].field_768
                                                    else:
                                                        if (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond) != poolInfo[idx].field_256:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                        if totalAllocPoint <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require totalAllocPoint
                                                        if not (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint:
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                            poolInfo[idx].field_512 = block.timestamp
                                                            require idx < poolInfo.length
                                                            mem[0] = 4
                                                            _36067 = mem[64]
                                                            mem[64] = mem[64] + 128
                                                            mem[_36067] = poolInfo[idx].field_0
                                                            mem[_36067 + 32] = poolInfo[idx].field_256
                                                            mem[_36067 + 64] = poolInfo[idx].field_512
                                                            mem[_36067 + 96] = poolInfo[idx].field_768
                                                        else:
                                                            if 10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                                                            poolInfo[idx].field_512 = block.timestamp
                                                            require idx < poolInfo.length
                                                            mem[0] = 4
                                                            _36132 = mem[64]
                                                            mem[64] = mem[64] + 128
                                                            mem[_36132] = poolInfo[idx].field_0
                                                            mem[_36132 + 32] = poolInfo[idx].field_256
                                                            mem[_36132 + 64] = poolInfo[idx].field_512
                                                            mem[_36132 + 96] = poolInfo[idx].field_768
                                    mem[0] = msg.sender
                                    mem[32] = sha3(idx, 6)
                                    if not userInfo[idx][msg.sender].field_0:
                                        if userInfo[idx][msg.sender].field_256 > 0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if -userInfo[idx][msg.sender].field_256 < 0:
                                            revert with 0, 'SafeMath: addition overflow'
                                    else:
                                        if poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / userInfo[idx][msg.sender].field_0 != poolInfo[idx].field_768:
                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if userInfo[idx][msg.sender].field_256 > poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if (poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12) - userInfo[idx][msg.sender].field_256 < 0:
                                            revert with 0, 'SafeMath: addition overflow'
                                    if not userInfo[idx][msg.sender].field_0:
                                        userInfo[idx][msg.sender].field_256 = 0
                                    else:
                                        if poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / userInfo[idx][msg.sender].field_0 != poolInfo[idx].field_768:
                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        userInfo[idx][msg.sender].field_256 = poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12
                        else:
                            if not ext_call.return_data[0]:
                                if not userInfo[idx][address(msg.sender)].field_0:
                                    if userInfo[idx][address(msg.sender)].field_256 > 0:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if -userInfo[idx][address(msg.sender)].field_256 > 0:
                                        require idx < poolInfo.length
                                        if block.timestamp <= poolInfo[idx].field_512:
                                            require idx < poolInfo.length
                                            mem[0] = 4
                                            _35179 = mem[64]
                                            mem[64] = mem[64] + 128
                                            mem[_35179] = poolInfo[idx].field_0
                                            mem[_35179 + 32] = poolInfo[idx].field_256
                                            mem[_35179 + 64] = poolInfo[idx].field_512
                                            mem[_35179 + 96] = poolInfo[idx].field_768
                                        else:
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(poolInfo[idx].field_0)
                                            staticcall poolInfo[idx].field_0.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                poolInfo[idx].field_512 = block.timestamp
                                                require idx < poolInfo.length
                                                mem[0] = 4
                                                _35247 = mem[64]
                                                mem[64] = mem[64] + 128
                                                mem[_35247] = poolInfo[idx].field_0
                                                mem[_35247 + 32] = poolInfo[idx].field_256
                                                mem[_35247 + 64] = poolInfo[idx].field_512
                                                mem[_35247 + 96] = poolInfo[idx].field_768
                                            else:
                                                if not totalAllocPoint:
                                                    poolInfo[idx].field_512 = block.timestamp
                                                    require idx < poolInfo.length
                                                    mem[0] = 4
                                                    _35270 = mem[64]
                                                    mem[64] = mem[64] + 128
                                                    mem[_35270] = poolInfo[idx].field_0
                                                    mem[_35270 + 32] = poolInfo[idx].field_256
                                                    mem[_35270 + 64] = poolInfo[idx].field_512
                                                    mem[_35270 + 96] = poolInfo[idx].field_768
                                                else:
                                                    if poolInfo[idx].field_512 > block.timestamp:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if not block.timestamp - poolInfo[idx].field_512:
                                                        if totalAllocPoint <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require totalAllocPoint
                                                        if not 0 / totalAllocPoint:
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                            poolInfo[idx].field_512 = block.timestamp
                                                            require idx < poolInfo.length
                                                            mem[0] = 4
                                                            _35979 = mem[64]
                                                            mem[64] = mem[64] + 128
                                                            mem[_35979] = poolInfo[idx].field_0
                                                            mem[_35979 + 32] = poolInfo[idx].field_256
                                                            mem[_35979 + 64] = poolInfo[idx].field_512
                                                            mem[_35979 + 96] = poolInfo[idx].field_768
                                                        else:
                                                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                            poolInfo[idx].field_512 = block.timestamp
                                                            require idx < poolInfo.length
                                                            mem[0] = 4
                                                            _36043 = mem[64]
                                                            mem[64] = mem[64] + 128
                                                            mem[_36043] = poolInfo[idx].field_0
                                                            mem[_36043 + 32] = poolInfo[idx].field_256
                                                            mem[_36043 + 64] = poolInfo[idx].field_512
                                                            mem[_36043 + 96] = poolInfo[idx].field_768
                                                    else:
                                                        if (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond) / block.timestamp - poolInfo[idx].field_512 != rewardsPerSecond:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                        if not (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond):
                                                            if totalAllocPoint <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require totalAllocPoint
                                                            if not 0 / totalAllocPoint:
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                                poolInfo[idx].field_512 = block.timestamp
                                                                require idx < poolInfo.length
                                                                mem[0] = 4
                                                                _36038 = mem[64]
                                                                mem[64] = mem[64] + 128
                                                                mem[_36038] = poolInfo[idx].field_0
                                                                mem[_36038 + 32] = poolInfo[idx].field_256
                                                                mem[_36038 + 64] = poolInfo[idx].field_512
                                                                mem[_36038 + 96] = poolInfo[idx].field_768
                                                            else:
                                                                if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                                poolInfo[idx].field_512 = block.timestamp
                                                                require idx < poolInfo.length
                                                                mem[0] = 4
                                                                _36097 = mem[64]
                                                                mem[64] = mem[64] + 128
                                                                mem[_36097] = poolInfo[idx].field_0
                                                                mem[_36097 + 32] = poolInfo[idx].field_256
                                                                mem[_36097 + 64] = poolInfo[idx].field_512
                                                                mem[_36097 + 96] = poolInfo[idx].field_768
                                                        else:
                                                            if (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond) != poolInfo[idx].field_256:
                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                            if totalAllocPoint <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require totalAllocPoint
                                                            if not (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint:
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                                poolInfo[idx].field_512 = block.timestamp
                                                                require idx < poolInfo.length
                                                                mem[0] = 4
                                                                _36092 = mem[64]
                                                                mem[64] = mem[64] + 128
                                                                mem[_36092] = poolInfo[idx].field_0
                                                                mem[_36092 + 32] = poolInfo[idx].field_256
                                                                mem[_36092 + 64] = poolInfo[idx].field_512
                                                                mem[_36092 + 96] = poolInfo[idx].field_768
                                                            else:
                                                                if 10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                                                                poolInfo[idx].field_512 = block.timestamp
                                                                require idx < poolInfo.length
                                                                mem[0] = 4
                                                                _36149 = mem[64]
                                                                mem[64] = mem[64] + 128
                                                                mem[_36149] = poolInfo[idx].field_0
                                                                mem[_36149 + 32] = poolInfo[idx].field_256
                                                                mem[_36149 + 64] = poolInfo[idx].field_512
                                                                mem[_36149 + 96] = poolInfo[idx].field_768
                                        mem[0] = msg.sender
                                        mem[32] = sha3(idx, 6)
                                        if not userInfo[idx][msg.sender].field_0:
                                            if userInfo[idx][msg.sender].field_256 > 0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if -userInfo[idx][msg.sender].field_256 < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                        else:
                                            if poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / userInfo[idx][msg.sender].field_0 != poolInfo[idx].field_768:
                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if userInfo[idx][msg.sender].field_256 > poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if (poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12) - userInfo[idx][msg.sender].field_256 < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                        if not userInfo[idx][msg.sender].field_0:
                                            userInfo[idx][msg.sender].field_256 = 0
                                        else:
                                            if poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / userInfo[idx][msg.sender].field_0 != poolInfo[idx].field_768:
                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            userInfo[idx][msg.sender].field_256 = poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12
                                else:
                                    if poolInfo[idx].field_768 * userInfo[idx][address(msg.sender)].field_0 / userInfo[idx][address(msg.sender)].field_0 != poolInfo[idx].field_768:
                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    if userInfo[idx][address(msg.sender)].field_256 > poolInfo[idx].field_768 * userInfo[idx][address(msg.sender)].field_0 / 10^12:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if (poolInfo[idx].field_768 * userInfo[idx][address(msg.sender)].field_0 / 10^12) - userInfo[idx][address(msg.sender)].field_256 > 0:
                                        require idx < poolInfo.length
                                        if block.timestamp <= poolInfo[idx].field_512:
                                            require idx < poolInfo.length
                                            mem[0] = 4
                                            _35188 = mem[64]
                                            mem[64] = mem[64] + 128
                                            mem[_35188] = poolInfo[idx].field_0
                                            mem[_35188 + 32] = poolInfo[idx].field_256
                                            mem[_35188 + 64] = poolInfo[idx].field_512
                                            mem[_35188 + 96] = poolInfo[idx].field_768
                                        else:
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(poolInfo[idx].field_0)
                                            staticcall poolInfo[idx].field_0.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                poolInfo[idx].field_512 = block.timestamp
                                                require idx < poolInfo.length
                                                mem[0] = 4
                                                _35263 = mem[64]
                                                mem[64] = mem[64] + 128
                                                mem[_35263] = poolInfo[idx].field_0
                                                mem[_35263 + 32] = poolInfo[idx].field_256
                                                mem[_35263 + 64] = poolInfo[idx].field_512
                                                mem[_35263 + 96] = poolInfo[idx].field_768
                                            else:
                                                if not totalAllocPoint:
                                                    poolInfo[idx].field_512 = block.timestamp
                                                    require idx < poolInfo.length
                                                    mem[0] = 4
                                                    _35286 = mem[64]
                                                    mem[64] = mem[64] + 128
                                                    mem[_35286] = poolInfo[idx].field_0
                                                    mem[_35286 + 32] = poolInfo[idx].field_256
                                                    mem[_35286 + 64] = poolInfo[idx].field_512
                                                    mem[_35286 + 96] = poolInfo[idx].field_768
                                                else:
                                                    if poolInfo[idx].field_512 > block.timestamp:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if not block.timestamp - poolInfo[idx].field_512:
                                                        if totalAllocPoint <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        require totalAllocPoint
                                                        if not 0 / totalAllocPoint:
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                            poolInfo[idx].field_512 = block.timestamp
                                                            require idx < poolInfo.length
                                                            mem[0] = 4
                                                            _36033 = mem[64]
                                                            mem[64] = mem[64] + 128
                                                            mem[_36033] = poolInfo[idx].field_0
                                                            mem[_36033 + 32] = poolInfo[idx].field_256
                                                            mem[_36033 + 64] = poolInfo[idx].field_512
                                                            mem[_36033 + 96] = poolInfo[idx].field_768
                                                        else:
                                                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                            if ext_call.return_data[0] <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require ext_call.return_data[0]
                                                            if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                            poolInfo[idx].field_512 = block.timestamp
                                                            require idx < poolInfo.length
                                                            mem[0] = 4
                                                            _36087 = mem[64]
                                                            mem[64] = mem[64] + 128
                                                            mem[_36087] = poolInfo[idx].field_0
                                                            mem[_36087 + 32] = poolInfo[idx].field_256
                                                            mem[_36087 + 64] = poolInfo[idx].field_512
                                                            mem[_36087 + 96] = poolInfo[idx].field_768
                                                    else:
                                                        if (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond) / block.timestamp - poolInfo[idx].field_512 != rewardsPerSecond:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                        if not (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond):
                                                            if totalAllocPoint <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require totalAllocPoint
                                                            if not 0 / totalAllocPoint:
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                                poolInfo[idx].field_512 = block.timestamp
                                                                require idx < poolInfo.length
                                                                mem[0] = 4
                                                                _36082 = mem[64]
                                                                mem[64] = mem[64] + 128
                                                                mem[_36082] = poolInfo[idx].field_0
                                                                mem[_36082 + 32] = poolInfo[idx].field_256
                                                                mem[_36082 + 64] = poolInfo[idx].field_512
                                                                mem[_36082 + 96] = poolInfo[idx].field_768
                                                            else:
                                                                if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                                poolInfo[idx].field_512 = block.timestamp
                                                                require idx < poolInfo.length
                                                                mem[0] = 4
                                                                _36144 = mem[64]
                                                                mem[64] = mem[64] + 128
                                                                mem[_36144] = poolInfo[idx].field_0
                                                                mem[_36144 + 32] = poolInfo[idx].field_256
                                                                mem[_36144 + 64] = poolInfo[idx].field_512
                                                                mem[_36144 + 96] = poolInfo[idx].field_768
                                                        else:
                                                            if (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond) != poolInfo[idx].field_256:
                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                            if totalAllocPoint <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require totalAllocPoint
                                                            if not (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint:
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                                poolInfo[idx].field_512 = block.timestamp
                                                                require idx < poolInfo.length
                                                                mem[0] = 4
                                                                _36139 = mem[64]
                                                                mem[64] = mem[64] + 128
                                                                mem[_36139] = poolInfo[idx].field_0
                                                                mem[_36139 + 32] = poolInfo[idx].field_256
                                                                mem[_36139 + 64] = poolInfo[idx].field_512
                                                                mem[_36139 + 96] = poolInfo[idx].field_768
                                                            else:
                                                                if 10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                                                                poolInfo[idx].field_512 = block.timestamp
                                                                require idx < poolInfo.length
                                                                mem[0] = 4
                                                                _36214 = mem[64]
                                                                mem[64] = mem[64] + 128
                                                                mem[_36214] = poolInfo[idx].field_0
                                                                mem[_36214 + 32] = poolInfo[idx].field_256
                                                                mem[_36214 + 64] = poolInfo[idx].field_512
                                                                mem[_36214 + 96] = poolInfo[idx].field_768
                                        mem[0] = msg.sender
                                        mem[32] = sha3(idx, 6)
                                        if not userInfo[idx][msg.sender].field_0:
                                            if userInfo[idx][msg.sender].field_256 > 0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if -userInfo[idx][msg.sender].field_256 < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                        else:
                                            if poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / userInfo[idx][msg.sender].field_0 != poolInfo[idx].field_768:
                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if userInfo[idx][msg.sender].field_256 > poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if (poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12) - userInfo[idx][msg.sender].field_256 < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                        if not userInfo[idx][msg.sender].field_0:
                                            userInfo[idx][msg.sender].field_256 = 0
                                        else:
                                            if poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / userInfo[idx][msg.sender].field_0 != poolInfo[idx].field_768:
                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            userInfo[idx][msg.sender].field_256 = poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12
                            else:
                                if not totalAllocPoint:
                                    if not userInfo[idx][address(msg.sender)].field_0:
                                        if userInfo[idx][address(msg.sender)].field_256 > 0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if -userInfo[idx][address(msg.sender)].field_256 > 0:
                                            require idx < poolInfo.length
                                            if block.timestamp <= poolInfo[idx].field_512:
                                                require idx < poolInfo.length
                                                mem[0] = 4
                                                _35195 = mem[64]
                                                mem[64] = mem[64] + 128
                                                mem[_35195] = poolInfo[idx].field_0
                                                mem[_35195 + 32] = poolInfo[idx].field_256
                                                mem[_35195 + 64] = poolInfo[idx].field_512
                                                mem[_35195 + 96] = poolInfo[idx].field_768
                                            else:
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(poolInfo[idx].field_0)
                                                staticcall poolInfo[idx].field_0.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if not ext_call.return_data[0]:
                                                    poolInfo[idx].field_512 = block.timestamp
                                                    require idx < poolInfo.length
                                                    mem[0] = 4
                                                    _35277 = mem[64]
                                                    mem[64] = mem[64] + 128
                                                    mem[_35277] = poolInfo[idx].field_0
                                                    mem[_35277 + 32] = poolInfo[idx].field_256
                                                    mem[_35277 + 64] = poolInfo[idx].field_512
                                                    mem[_35277 + 96] = poolInfo[idx].field_768
                                                else:
                                                    if not totalAllocPoint:
                                                        poolInfo[idx].field_512 = block.timestamp
                                                        require idx < poolInfo.length
                                                        mem[0] = 4
                                                        _35298 = mem[64]
                                                        mem[64] = mem[64] + 128
                                                        mem[_35298] = poolInfo[idx].field_0
                                                        mem[_35298 + 32] = poolInfo[idx].field_256
                                                        mem[_35298 + 64] = poolInfo[idx].field_512
                                                        mem[_35298 + 96] = poolInfo[idx].field_768
                                                    else:
                                                        if poolInfo[idx].field_512 > block.timestamp:
                                                            revert with 0, 'SafeMath: subtraction overflow'
                                                        if not block.timestamp - poolInfo[idx].field_512:
                                                            if totalAllocPoint <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require totalAllocPoint
                                                            if not 0 / totalAllocPoint:
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                                poolInfo[idx].field_512 = block.timestamp
                                                                require idx < poolInfo.length
                                                                mem[0] = 4
                                                                _36054 = mem[64]
                                                                mem[64] = mem[64] + 128
                                                                mem[_36054] = poolInfo[idx].field_0
                                                                mem[_36054 + 32] = poolInfo[idx].field_256
                                                                mem[_36054 + 64] = poolInfo[idx].field_512
                                                                mem[_36054 + 96] = poolInfo[idx].field_768
                                                            else:
                                                                if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                                poolInfo[idx].field_512 = block.timestamp
                                                                require idx < poolInfo.length
                                                                mem[0] = 4
                                                                _36114 = mem[64]
                                                                mem[64] = mem[64] + 128
                                                                mem[_36114] = poolInfo[idx].field_0
                                                                mem[_36114 + 32] = poolInfo[idx].field_256
                                                                mem[_36114 + 64] = poolInfo[idx].field_512
                                                                mem[_36114 + 96] = poolInfo[idx].field_768
                                                        else:
                                                            if (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond) / block.timestamp - poolInfo[idx].field_512 != rewardsPerSecond:
                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                            if not (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond):
                                                                if totalAllocPoint <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require totalAllocPoint
                                                                if not 0 / totalAllocPoint:
                                                                    if ext_call.return_data[0] <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    require ext_call.return_data[0]
                                                                    if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                                    poolInfo[idx].field_512 = block.timestamp
                                                                    require idx < poolInfo.length
                                                                    mem[0] = 4
                                                                    _36109 = mem[64]
                                                                    mem[64] = mem[64] + 128
                                                                    mem[_36109] = poolInfo[idx].field_0
                                                                    mem[_36109 + 32] = poolInfo[idx].field_256
                                                                    mem[_36109 + 64] = poolInfo[idx].field_512
                                                                    mem[_36109 + 96] = poolInfo[idx].field_768
                                                                else:
                                                                    if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                    if ext_call.return_data[0] <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    require ext_call.return_data[0]
                                                                    if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                                    poolInfo[idx].field_512 = block.timestamp
                                                                    require idx < poolInfo.length
                                                                    mem[0] = 4
                                                                    _36169 = mem[64]
                                                                    mem[64] = mem[64] + 128
                                                                    mem[_36169] = poolInfo[idx].field_0
                                                                    mem[_36169 + 32] = poolInfo[idx].field_256
                                                                    mem[_36169 + 64] = poolInfo[idx].field_512
                                                                    mem[_36169 + 96] = poolInfo[idx].field_768
                                                            else:
                                                                if (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond) != poolInfo[idx].field_256:
                                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                if totalAllocPoint <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require totalAllocPoint
                                                                if not (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint:
                                                                    if ext_call.return_data[0] <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    require ext_call.return_data[0]
                                                                    if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                                    poolInfo[idx].field_512 = block.timestamp
                                                                    require idx < poolInfo.length
                                                                    mem[0] = 4
                                                                    _36164 = mem[64]
                                                                    mem[64] = mem[64] + 128
                                                                    mem[_36164] = poolInfo[idx].field_0
                                                                    mem[_36164 + 32] = poolInfo[idx].field_256
                                                                    mem[_36164 + 64] = poolInfo[idx].field_512
                                                                    mem[_36164 + 96] = poolInfo[idx].field_768
                                                                else:
                                                                    if 10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                    if ext_call.return_data[0] <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    require ext_call.return_data[0]
                                                                    if (10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    poolInfo[idx].field_768 += 10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                                                                    poolInfo[idx].field_512 = block.timestamp
                                                                    require idx < poolInfo.length
                                                                    mem[0] = 4
                                                                    _36231 = mem[64]
                                                                    mem[64] = mem[64] + 128
                                                                    mem[_36231] = poolInfo[idx].field_0
                                                                    mem[_36231 + 32] = poolInfo[idx].field_256
                                                                    mem[_36231 + 64] = poolInfo[idx].field_512
                                                                    mem[_36231 + 96] = poolInfo[idx].field_768
                                            mem[0] = msg.sender
                                            mem[32] = sha3(idx, 6)
                                            if not userInfo[idx][msg.sender].field_0:
                                                if userInfo[idx][msg.sender].field_256 > 0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if -userInfo[idx][msg.sender].field_256 < 0:
                                                    revert with 0, 'SafeMath: addition overflow'
                                            else:
                                                if poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / userInfo[idx][msg.sender].field_0 != poolInfo[idx].field_768:
                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                if userInfo[idx][msg.sender].field_256 > poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if (poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12) - userInfo[idx][msg.sender].field_256 < 0:
                                                    revert with 0, 'SafeMath: addition overflow'
                                            if not userInfo[idx][msg.sender].field_0:
                                                userInfo[idx][msg.sender].field_256 = 0
                                            else:
                                                if poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / userInfo[idx][msg.sender].field_0 != poolInfo[idx].field_768:
                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                userInfo[idx][msg.sender].field_256 = poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12
                                    else:
                                        if poolInfo[idx].field_768 * userInfo[idx][address(msg.sender)].field_0 / userInfo[idx][address(msg.sender)].field_0 != poolInfo[idx].field_768:
                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if userInfo[idx][address(msg.sender)].field_256 > poolInfo[idx].field_768 * userInfo[idx][address(msg.sender)].field_0 / 10^12:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if (poolInfo[idx].field_768 * userInfo[idx][address(msg.sender)].field_0 / 10^12) - userInfo[idx][address(msg.sender)].field_256 > 0:
                                            require idx < poolInfo.length
                                            if block.timestamp <= poolInfo[idx].field_512:
                                                require idx < poolInfo.length
                                                mem[0] = 4
                                                _35203 = mem[64]
                                                mem[64] = mem[64] + 128
                                                mem[_35203] = poolInfo[idx].field_0
                                                mem[_35203 + 32] = poolInfo[idx].field_256
                                                mem[_35203 + 64] = poolInfo[idx].field_512
                                                mem[_35203 + 96] = poolInfo[idx].field_768
                                            else:
                                                mem[mem[64] + 4] = this.address
                                                require ext_code.size(poolInfo[idx].field_0)
                                                staticcall poolInfo[idx].field_0.0x70a08231 with:
                                                        gas gas_remaining wei
                                                       args this.address
                                                mem[mem[64]] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if not ext_call.return_data[0]:
                                                    poolInfo[idx].field_512 = block.timestamp
                                                    require idx < poolInfo.length
                                                    mem[0] = 4
                                                    _35291 = mem[64]
                                                    mem[64] = mem[64] + 128
                                                    mem[_35291] = poolInfo[idx].field_0
                                                    mem[_35291 + 32] = poolInfo[idx].field_256
                                                    mem[_35291 + 64] = poolInfo[idx].field_512
                                                    mem[_35291 + 96] = poolInfo[idx].field_768
                                                else:
                                                    if not totalAllocPoint:
                                                        poolInfo[idx].field_512 = block.timestamp
                                                        require idx < poolInfo.length
                                                        mem[0] = 4
                                                        _35309 = mem[64]
                                                        mem[64] = mem[64] + 128
                                                        mem[_35309] = poolInfo[idx].field_0
                                                        mem[_35309 + 32] = poolInfo[idx].field_256
                                                        mem[_35309 + 64] = poolInfo[idx].field_512
                                                        mem[_35309 + 96] = poolInfo[idx].field_768
                                                    else:
                                                        if poolInfo[idx].field_512 > block.timestamp:
                                                            revert with 0, 'SafeMath: subtraction overflow'
                                                        if not block.timestamp - poolInfo[idx].field_512:
                                                            if totalAllocPoint <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            require totalAllocPoint
                                                            if not 0 / totalAllocPoint:
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                                poolInfo[idx].field_512 = block.timestamp
                                                                require idx < poolInfo.length
                                                                mem[0] = 4
                                                                _36104 = mem[64]
                                                                mem[64] = mem[64] + 128
                                                                mem[_36104] = poolInfo[idx].field_0
                                                                mem[_36104 + 32] = poolInfo[idx].field_256
                                                                mem[_36104 + 64] = poolInfo[idx].field_512
                                                                mem[_36104 + 96] = poolInfo[idx].field_768
                                                            else:
                                                                if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                if ext_call.return_data[0] <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require ext_call.return_data[0]
                                                                if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                                poolInfo[idx].field_512 = block.timestamp
                                                                require idx < poolInfo.length
                                                                mem[0] = 4
                                                                _36159 = mem[64]
                                                                mem[64] = mem[64] + 128
                                                                mem[_36159] = poolInfo[idx].field_0
                                                                mem[_36159 + 32] = poolInfo[idx].field_256
                                                                mem[_36159 + 64] = poolInfo[idx].field_512
                                                                mem[_36159 + 96] = poolInfo[idx].field_768
                                                        else:
                                                            if (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond) / block.timestamp - poolInfo[idx].field_512 != rewardsPerSecond:
                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                            if not (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond):
                                                                if totalAllocPoint <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require totalAllocPoint
                                                                if not 0 / totalAllocPoint:
                                                                    if ext_call.return_data[0] <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    require ext_call.return_data[0]
                                                                    if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                                    poolInfo[idx].field_512 = block.timestamp
                                                                    require idx < poolInfo.length
                                                                    mem[0] = 4
                                                                    _36154 = mem[64]
                                                                    mem[64] = mem[64] + 128
                                                                    mem[_36154] = poolInfo[idx].field_0
                                                                    mem[_36154 + 32] = poolInfo[idx].field_256
                                                                    mem[_36154 + 64] = poolInfo[idx].field_512
                                                                    mem[_36154 + 96] = poolInfo[idx].field_768
                                                                else:
                                                                    if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                    if ext_call.return_data[0] <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    require ext_call.return_data[0]
                                                                    if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                                    poolInfo[idx].field_512 = block.timestamp
                                                                    require idx < poolInfo.length
                                                                    mem[0] = 4
                                                                    _36226 = mem[64]
                                                                    mem[64] = mem[64] + 128
                                                                    mem[_36226] = poolInfo[idx].field_0
                                                                    mem[_36226 + 32] = poolInfo[idx].field_256
                                                                    mem[_36226 + 64] = poolInfo[idx].field_512
                                                                    mem[_36226 + 96] = poolInfo[idx].field_768
                                                            else:
                                                                if (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond) != poolInfo[idx].field_256:
                                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                if totalAllocPoint <= 0:
                                                                    revert with 0, 'SafeMath: division by zero'
                                                                require totalAllocPoint
                                                                if not (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint:
                                                                    if ext_call.return_data[0] <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    require ext_call.return_data[0]
                                                                    if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                                    poolInfo[idx].field_512 = block.timestamp
                                                                    require idx < poolInfo.length
                                                                    mem[0] = 4
                                                                    _36221 = mem[64]
                                                                    mem[64] = mem[64] + 128
                                                                    mem[_36221] = poolInfo[idx].field_0
                                                                    mem[_36221 + 32] = poolInfo[idx].field_256
                                                                    mem[_36221 + 64] = poolInfo[idx].field_512
                                                                    mem[_36221 + 96] = poolInfo[idx].field_768
                                                                else:
                                                                    if 10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                    if ext_call.return_data[0] <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    require ext_call.return_data[0]
                                                                    if (10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                        revert with 0, 'SafeMath: addition overflow'
                                                                    poolInfo[idx].field_768 += 10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                                                                    poolInfo[idx].field_512 = block.timestamp
                                                                    require idx < poolInfo.length
                                                                    mem[0] = 4
                                                                    _36299 = mem[64]
                                                                    mem[64] = mem[64] + 128
                                                                    mem[_36299] = poolInfo[idx].field_0
                                                                    mem[_36299 + 32] = poolInfo[idx].field_256
                                                                    mem[_36299 + 64] = poolInfo[idx].field_512
                                                                    mem[_36299 + 96] = poolInfo[idx].field_768
                                            mem[0] = msg.sender
                                            mem[32] = sha3(idx, 6)
                                            if not userInfo[idx][msg.sender].field_0:
                                                if userInfo[idx][msg.sender].field_256 > 0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if -userInfo[idx][msg.sender].field_256 < 0:
                                                    revert with 0, 'SafeMath: addition overflow'
                                            else:
                                                if poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / userInfo[idx][msg.sender].field_0 != poolInfo[idx].field_768:
                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                if userInfo[idx][msg.sender].field_256 > poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if (poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12) - userInfo[idx][msg.sender].field_256 < 0:
                                                    revert with 0, 'SafeMath: addition overflow'
                                            if not userInfo[idx][msg.sender].field_0:
                                                userInfo[idx][msg.sender].field_256 = 0
                                            else:
                                                if poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / userInfo[idx][msg.sender].field_0 != poolInfo[idx].field_768:
                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                userInfo[idx][msg.sender].field_256 = poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12
                                else:
                                    if poolInfo[idx].field_512 > block.timestamp:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if not block.timestamp - poolInfo[idx].field_512:
                                        if totalAllocPoint <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require totalAllocPoint
                                        if not 0 / totalAllocPoint:
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if not userInfo[idx][address(msg.sender)].field_0:
                                                if userInfo[idx][address(msg.sender)].field_256 > 0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if -userInfo[idx][address(msg.sender)].field_256 > 0:
                                                    require idx < poolInfo.length
                                                    if block.timestamp <= poolInfo[idx].field_512:
                                                        require idx < poolInfo.length
                                                        mem[0] = 4
                                                        _35857 = mem[64]
                                                        mem[64] = mem[64] + 128
                                                        mem[_35857] = poolInfo[idx].field_0
                                                        mem[_35857 + 32] = poolInfo[idx].field_256
                                                        mem[_35857 + 64] = poolInfo[idx].field_512
                                                        mem[_35857 + 96] = poolInfo[idx].field_768
                                                    else:
                                                        mem[mem[64] + 4] = this.address
                                                        require ext_code.size(poolInfo[idx].field_0)
                                                        staticcall poolInfo[idx].field_0.0x70a08231 with:
                                                                gas gas_remaining wei
                                                               args this.address
                                                        mem[mem[64]] = ext_call.return_data[0]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if not ext_call.return_data[0]:
                                                            poolInfo[idx].field_512 = block.timestamp
                                                            require idx < poolInfo.length
                                                            mem[0] = 4
                                                            _36125 = mem[64]
                                                            mem[64] = mem[64] + 128
                                                            mem[_36125] = poolInfo[idx].field_0
                                                            mem[_36125 + 32] = poolInfo[idx].field_256
                                                            mem[_36125 + 64] = poolInfo[idx].field_512
                                                            mem[_36125 + 96] = poolInfo[idx].field_768
                                                        else:
                                                            if not totalAllocPoint:
                                                                poolInfo[idx].field_512 = block.timestamp
                                                                require idx < poolInfo.length
                                                                mem[0] = 4
                                                                _36203 = mem[64]
                                                                mem[64] = mem[64] + 128
                                                                mem[_36203] = poolInfo[idx].field_0
                                                                mem[_36203 + 32] = poolInfo[idx].field_256
                                                                mem[_36203 + 64] = poolInfo[idx].field_512
                                                                mem[_36203 + 96] = poolInfo[idx].field_768
                                                            else:
                                                                if poolInfo[idx].field_512 > block.timestamp:
                                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                                if not block.timestamp - poolInfo[idx].field_512:
                                                                    if totalAllocPoint <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    require totalAllocPoint
                                                                    if not 0 / totalAllocPoint:
                                                                        if ext_call.return_data[0] <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        require ext_call.return_data[0]
                                                                        if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                            revert with 0, 'SafeMath: addition overflow'
                                                                        poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                                        poolInfo[idx].field_512 = block.timestamp
                                                                        require idx < poolInfo.length
                                                                        mem[0] = 4
                                                                        _37886 = mem[64]
                                                                        mem[64] = mem[64] + 128
                                                                        mem[_37886] = poolInfo[idx].field_0
                                                                        mem[_37886 + 32] = poolInfo[idx].field_256
                                                                        mem[_37886 + 64] = poolInfo[idx].field_512
                                                                        mem[_37886 + 96] = poolInfo[idx].field_768
                                                                    else:
                                                                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                        if ext_call.return_data[0] <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        require ext_call.return_data[0]
                                                                        if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                            revert with 0, 'SafeMath: addition overflow'
                                                                        poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                                        poolInfo[idx].field_512 = block.timestamp
                                                                        require idx < poolInfo.length
                                                                        mem[0] = 4
                                                                        _37947 = mem[64]
                                                                        mem[64] = mem[64] + 128
                                                                        mem[_37947] = poolInfo[idx].field_0
                                                                        mem[_37947 + 32] = poolInfo[idx].field_256
                                                                        mem[_37947 + 64] = poolInfo[idx].field_512
                                                                        mem[_37947 + 96] = poolInfo[idx].field_768
                                                                else:
                                                                    if (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond) / block.timestamp - poolInfo[idx].field_512 != rewardsPerSecond:
                                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                    if not (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond):
                                                                        if totalAllocPoint <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        require totalAllocPoint
                                                                        if not 0 / totalAllocPoint:
                                                                            if ext_call.return_data[0] <= 0:
                                                                                revert with 0, 'SafeMath: division by zero'
                                                                            require ext_call.return_data[0]
                                                                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                                revert with 0, 'SafeMath: addition overflow'
                                                                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                                            poolInfo[idx].field_512 = block.timestamp
                                                                            require idx < poolInfo.length
                                                                            mem[0] = 4
                                                                            _37942 = mem[64]
                                                                            mem[64] = mem[64] + 128
                                                                            mem[_37942] = poolInfo[idx].field_0
                                                                            mem[_37942 + 32] = poolInfo[idx].field_256
                                                                            mem[_37942 + 64] = poolInfo[idx].field_512
                                                                            mem[_37942 + 96] = poolInfo[idx].field_768
                                                                        else:
                                                                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                            if ext_call.return_data[0] <= 0:
                                                                                revert with 0, 'SafeMath: division by zero'
                                                                            require ext_call.return_data[0]
                                                                            if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                                revert with 0, 'SafeMath: addition overflow'
                                                                            poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                                            poolInfo[idx].field_512 = block.timestamp
                                                                            require idx < poolInfo.length
                                                                            mem[0] = 4
                                                                            _38031 = mem[64]
                                                                            mem[64] = mem[64] + 128
                                                                            mem[_38031] = poolInfo[idx].field_0
                                                                            mem[_38031 + 32] = poolInfo[idx].field_256
                                                                            mem[_38031 + 64] = poolInfo[idx].field_512
                                                                            mem[_38031 + 96] = poolInfo[idx].field_768
                                                                    else:
                                                                        if (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond) != poolInfo[idx].field_256:
                                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                        if totalAllocPoint <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        require totalAllocPoint
                                                                        if not (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint:
                                                                            if ext_call.return_data[0] <= 0:
                                                                                revert with 0, 'SafeMath: division by zero'
                                                                            require ext_call.return_data[0]
                                                                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                                revert with 0, 'SafeMath: addition overflow'
                                                                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                                            poolInfo[idx].field_512 = block.timestamp
                                                                            require idx < poolInfo.length
                                                                            mem[0] = 4
                                                                            _38026 = mem[64]
                                                                            mem[64] = mem[64] + 128
                                                                            mem[_38026] = poolInfo[idx].field_0
                                                                            mem[_38026 + 32] = poolInfo[idx].field_256
                                                                            mem[_38026 + 64] = poolInfo[idx].field_512
                                                                            mem[_38026 + 96] = poolInfo[idx].field_768
                                                                        else:
                                                                            if 10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                            if ext_call.return_data[0] <= 0:
                                                                                revert with 0, 'SafeMath: division by zero'
                                                                            require ext_call.return_data[0]
                                                                            if (10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                                revert with 0, 'SafeMath: addition overflow'
                                                                            poolInfo[idx].field_768 += 10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                                                                            poolInfo[idx].field_512 = block.timestamp
                                                                            require idx < poolInfo.length
                                                                            mem[0] = 4
                                                                            _38131 = mem[64]
                                                                            mem[64] = mem[64] + 128
                                                                            mem[_38131] = poolInfo[idx].field_0
                                                                            mem[_38131 + 32] = poolInfo[idx].field_256
                                                                            mem[_38131 + 64] = poolInfo[idx].field_512
                                                                            mem[_38131 + 96] = poolInfo[idx].field_768
                                                    mem[0] = msg.sender
                                                    mem[32] = sha3(idx, 6)
                                                    if not userInfo[idx][msg.sender].field_0:
                                                        if userInfo[idx][msg.sender].field_256 > 0:
                                                            revert with 0, 'SafeMath: subtraction overflow'
                                                        if -userInfo[idx][msg.sender].field_256 < 0:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                    else:
                                                        if poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / userInfo[idx][msg.sender].field_0 != poolInfo[idx].field_768:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                        if userInfo[idx][msg.sender].field_256 > poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12:
                                                            revert with 0, 'SafeMath: subtraction overflow'
                                                        if (poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12) - userInfo[idx][msg.sender].field_256 < 0:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                    if not userInfo[idx][msg.sender].field_0:
                                                        userInfo[idx][msg.sender].field_256 = 0
                                                    else:
                                                        if poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / userInfo[idx][msg.sender].field_0 != poolInfo[idx].field_768:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                        userInfo[idx][msg.sender].field_256 = poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12
                                            else:
                                                if (0 / ext_call.return_data[0] * userInfo[idx][address(msg.sender)].field_0) + (poolInfo[idx].field_768 * userInfo[idx][address(msg.sender)].field_0) / userInfo[idx][address(msg.sender)].field_0 != (0 / ext_call.return_data[0]) + poolInfo[idx].field_768:
                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                if userInfo[idx][address(msg.sender)].field_256 > (0 / ext_call.return_data[0] * userInfo[idx][address(msg.sender)].field_0) + (poolInfo[idx].field_768 * userInfo[idx][address(msg.sender)].field_0) / 10^12:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if ((0 / ext_call.return_data[0] * userInfo[idx][address(msg.sender)].field_0) + (poolInfo[idx].field_768 * userInfo[idx][address(msg.sender)].field_0) / 10^12) - userInfo[idx][address(msg.sender)].field_256 > 0:
                                                    require idx < poolInfo.length
                                                    if block.timestamp <= poolInfo[idx].field_512:
                                                        require idx < poolInfo.length
                                                        mem[0] = 4
                                                        _35899 = mem[64]
                                                        mem[64] = mem[64] + 128
                                                        mem[_35899] = poolInfo[idx].field_0
                                                        mem[_35899 + 32] = poolInfo[idx].field_256
                                                        mem[_35899 + 64] = poolInfo[idx].field_512
                                                        mem[_35899 + 96] = poolInfo[idx].field_768
                                                    else:
                                                        mem[mem[64] + 4] = this.address
                                                        require ext_code.size(poolInfo[idx].field_0)
                                                        staticcall poolInfo[idx].field_0.0x70a08231 with:
                                                                gas gas_remaining wei
                                                               args this.address
                                                        mem[mem[64]] = ext_call.return_data[0]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if not ext_call.return_data[0]:
                                                            poolInfo[idx].field_512 = block.timestamp
                                                            require idx < poolInfo.length
                                                            mem[0] = 4
                                                            _36196 = mem[64]
                                                            mem[64] = mem[64] + 128
                                                            mem[_36196] = poolInfo[idx].field_0
                                                            mem[_36196 + 32] = poolInfo[idx].field_256
                                                            mem[_36196 + 64] = poolInfo[idx].field_512
                                                            mem[_36196 + 96] = poolInfo[idx].field_768
                                                        else:
                                                            if not totalAllocPoint:
                                                                poolInfo[idx].field_512 = block.timestamp
                                                                require idx < poolInfo.length
                                                                mem[0] = 4
                                                                _36280 = mem[64]
                                                                mem[64] = mem[64] + 128
                                                                mem[_36280] = poolInfo[idx].field_0
                                                                mem[_36280 + 32] = poolInfo[idx].field_256
                                                                mem[_36280 + 64] = poolInfo[idx].field_512
                                                                mem[_36280 + 96] = poolInfo[idx].field_768
                                                            else:
                                                                if poolInfo[idx].field_512 > block.timestamp:
                                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                                if not block.timestamp - poolInfo[idx].field_512:
                                                                    if totalAllocPoint <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    require totalAllocPoint
                                                                    if not 0 / totalAllocPoint:
                                                                        if ext_call.return_data[0] <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        require ext_call.return_data[0]
                                                                        if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                            revert with 0, 'SafeMath: addition overflow'
                                                                        poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                                        poolInfo[idx].field_512 = block.timestamp
                                                                        require idx < poolInfo.length
                                                                        mem[0] = 4
                                                                        _37937 = mem[64]
                                                                        mem[64] = mem[64] + 128
                                                                        mem[_37937] = poolInfo[idx].field_0
                                                                        mem[_37937 + 32] = poolInfo[idx].field_256
                                                                        mem[_37937 + 64] = poolInfo[idx].field_512
                                                                        mem[_37937 + 96] = poolInfo[idx].field_768
                                                                    else:
                                                                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                        if ext_call.return_data[0] <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        require ext_call.return_data[0]
                                                                        if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                            revert with 0, 'SafeMath: addition overflow'
                                                                        poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                                        poolInfo[idx].field_512 = block.timestamp
                                                                        require idx < poolInfo.length
                                                                        mem[0] = 4
                                                                        _38021 = mem[64]
                                                                        mem[64] = mem[64] + 128
                                                                        mem[_38021] = poolInfo[idx].field_0
                                                                        mem[_38021 + 32] = poolInfo[idx].field_256
                                                                        mem[_38021 + 64] = poolInfo[idx].field_512
                                                                        mem[_38021 + 96] = poolInfo[idx].field_768
                                                                else:
                                                                    if (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond) / block.timestamp - poolInfo[idx].field_512 != rewardsPerSecond:
                                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                    if not (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond):
                                                                        if totalAllocPoint <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        require totalAllocPoint
                                                                        if not 0 / totalAllocPoint:
                                                                            if ext_call.return_data[0] <= 0:
                                                                                revert with 0, 'SafeMath: division by zero'
                                                                            require ext_call.return_data[0]
                                                                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                                revert with 0, 'SafeMath: addition overflow'
                                                                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                                            poolInfo[idx].field_512 = block.timestamp
                                                                            require idx < poolInfo.length
                                                                            mem[0] = 4
                                                                            _38016 = mem[64]
                                                                            mem[64] = mem[64] + 128
                                                                            mem[_38016] = poolInfo[idx].field_0
                                                                            mem[_38016 + 32] = poolInfo[idx].field_256
                                                                            mem[_38016 + 64] = poolInfo[idx].field_512
                                                                            mem[_38016 + 96] = poolInfo[idx].field_768
                                                                        else:
                                                                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                            if ext_call.return_data[0] <= 0:
                                                                                revert with 0, 'SafeMath: division by zero'
                                                                            require ext_call.return_data[0]
                                                                            if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                                revert with 0, 'SafeMath: addition overflow'
                                                                            poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                                            poolInfo[idx].field_512 = block.timestamp
                                                                            require idx < poolInfo.length
                                                                            mem[0] = 4
                                                                            _38126 = mem[64]
                                                                            mem[64] = mem[64] + 128
                                                                            mem[_38126] = poolInfo[idx].field_0
                                                                            mem[_38126 + 32] = poolInfo[idx].field_256
                                                                            mem[_38126 + 64] = poolInfo[idx].field_512
                                                                            mem[_38126 + 96] = poolInfo[idx].field_768
                                                                    else:
                                                                        if (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond) != poolInfo[idx].field_256:
                                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                        if totalAllocPoint <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        require totalAllocPoint
                                                                        if not (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint:
                                                                            if ext_call.return_data[0] <= 0:
                                                                                revert with 0, 'SafeMath: division by zero'
                                                                            require ext_call.return_data[0]
                                                                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                                revert with 0, 'SafeMath: addition overflow'
                                                                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                                            poolInfo[idx].field_512 = block.timestamp
                                                                            require idx < poolInfo.length
                                                                            mem[0] = 4
                                                                            _38121 = mem[64]
                                                                            mem[64] = mem[64] + 128
                                                                            mem[_38121] = poolInfo[idx].field_0
                                                                            mem[_38121 + 32] = poolInfo[idx].field_256
                                                                            mem[_38121 + 64] = poolInfo[idx].field_512
                                                                            mem[_38121 + 96] = poolInfo[idx].field_768
                                                                        else:
                                                                            if 10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                            if ext_call.return_data[0] <= 0:
                                                                                revert with 0, 'SafeMath: division by zero'
                                                                            require ext_call.return_data[0]
                                                                            if (10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                                revert with 0, 'SafeMath: addition overflow'
                                                                            poolInfo[idx].field_768 += 10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                                                                            poolInfo[idx].field_512 = block.timestamp
                                                                            require idx < poolInfo.length
                                                                            mem[0] = 4
                                                                            _38223 = mem[64]
                                                                            mem[64] = mem[64] + 128
                                                                            mem[_38223] = poolInfo[idx].field_0
                                                                            mem[_38223 + 32] = poolInfo[idx].field_256
                                                                            mem[_38223 + 64] = poolInfo[idx].field_512
                                                                            mem[_38223 + 96] = poolInfo[idx].field_768
                                                    mem[0] = msg.sender
                                                    mem[32] = sha3(idx, 6)
                                                    if not userInfo[idx][msg.sender].field_0:
                                                        if userInfo[idx][msg.sender].field_256 > 0:
                                                            revert with 0, 'SafeMath: subtraction overflow'
                                                        if -userInfo[idx][msg.sender].field_256 < 0:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                    else:
                                                        if poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / userInfo[idx][msg.sender].field_0 != poolInfo[idx].field_768:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                        if userInfo[idx][msg.sender].field_256 > poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12:
                                                            revert with 0, 'SafeMath: subtraction overflow'
                                                        if (poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12) - userInfo[idx][msg.sender].field_256 < 0:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                    if not userInfo[idx][msg.sender].field_0:
                                                        userInfo[idx][msg.sender].field_256 = 0
                                                    else:
                                                        if poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / userInfo[idx][msg.sender].field_0 != poolInfo[idx].field_768:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                        userInfo[idx][msg.sender].field_256 = poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12
                                        else:
                                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if ext_call.return_data[0] <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require ext_call.return_data[0]
                                            if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if not userInfo[idx][address(msg.sender)].field_0:
                                                if userInfo[idx][address(msg.sender)].field_256 > 0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if -userInfo[idx][address(msg.sender)].field_256 > 0:
                                                    require idx < poolInfo.length
                                                    if block.timestamp <= poolInfo[idx].field_512:
                                                        require idx < poolInfo.length
                                                        mem[0] = 4
                                                        _35893 = mem[64]
                                                        mem[64] = mem[64] + 128
                                                        mem[_35893] = poolInfo[idx].field_0
                                                        mem[_35893 + 32] = poolInfo[idx].field_256
                                                        mem[_35893 + 64] = poolInfo[idx].field_512
                                                        mem[_35893 + 96] = poolInfo[idx].field_768
                                                    else:
                                                        mem[mem[64] + 4] = this.address
                                                        require ext_code.size(poolInfo[idx].field_0)
                                                        staticcall poolInfo[idx].field_0.0x70a08231 with:
                                                                gas gas_remaining wei
                                                               args this.address
                                                        mem[mem[64]] = ext_call.return_data[0]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if not ext_call.return_data[0]:
                                                            poolInfo[idx].field_512 = block.timestamp
                                                            require idx < poolInfo.length
                                                            mem[0] = 4
                                                            _36189 = mem[64]
                                                            mem[64] = mem[64] + 128
                                                            mem[_36189] = poolInfo[idx].field_0
                                                            mem[_36189 + 32] = poolInfo[idx].field_256
                                                            mem[_36189 + 64] = poolInfo[idx].field_512
                                                            mem[_36189 + 96] = poolInfo[idx].field_768
                                                        else:
                                                            if not totalAllocPoint:
                                                                poolInfo[idx].field_512 = block.timestamp
                                                                require idx < poolInfo.length
                                                                mem[0] = 4
                                                                _36275 = mem[64]
                                                                mem[64] = mem[64] + 128
                                                                mem[_36275] = poolInfo[idx].field_0
                                                                mem[_36275 + 32] = poolInfo[idx].field_256
                                                                mem[_36275 + 64] = poolInfo[idx].field_512
                                                                mem[_36275 + 96] = poolInfo[idx].field_768
                                                            else:
                                                                if poolInfo[idx].field_512 > block.timestamp:
                                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                                if not block.timestamp - poolInfo[idx].field_512:
                                                                    if totalAllocPoint <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    require totalAllocPoint
                                                                    if not 0 / totalAllocPoint:
                                                                        if ext_call.return_data[0] <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        require ext_call.return_data[0]
                                                                        if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                            revert with 0, 'SafeMath: addition overflow'
                                                                        poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                                        poolInfo[idx].field_512 = block.timestamp
                                                                        require idx < poolInfo.length
                                                                        mem[0] = 4
                                                                        _37930 = mem[64]
                                                                        mem[64] = mem[64] + 128
                                                                        mem[_37930] = poolInfo[idx].field_0
                                                                        mem[_37930 + 32] = poolInfo[idx].field_256
                                                                        mem[_37930 + 64] = poolInfo[idx].field_512
                                                                        mem[_37930 + 96] = poolInfo[idx].field_768
                                                                    else:
                                                                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                        if ext_call.return_data[0] <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        require ext_call.return_data[0]
                                                                        if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                            revert with 0, 'SafeMath: addition overflow'
                                                                        poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                                        poolInfo[idx].field_512 = block.timestamp
                                                                        require idx < poolInfo.length
                                                                        mem[0] = 4
                                                                        _38011 = mem[64]
                                                                        mem[64] = mem[64] + 128
                                                                        mem[_38011] = poolInfo[idx].field_0
                                                                        mem[_38011 + 32] = poolInfo[idx].field_256
                                                                        mem[_38011 + 64] = poolInfo[idx].field_512
                                                                        mem[_38011 + 96] = poolInfo[idx].field_768
                                                                else:
                                                                    if (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond) / block.timestamp - poolInfo[idx].field_512 != rewardsPerSecond:
                                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                    if not (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond):
                                                                        if totalAllocPoint <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        require totalAllocPoint
                                                                        if not 0 / totalAllocPoint:
                                                                            if ext_call.return_data[0] <= 0:
                                                                                revert with 0, 'SafeMath: division by zero'
                                                                            require ext_call.return_data[0]
                                                                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                                revert with 0, 'SafeMath: addition overflow'
                                                                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                                            poolInfo[idx].field_512 = block.timestamp
                                                                            require idx < poolInfo.length
                                                                            mem[0] = 4
                                                                            _38006 = mem[64]
                                                                            mem[64] = mem[64] + 128
                                                                            mem[_38006] = poolInfo[idx].field_0
                                                                            mem[_38006 + 32] = poolInfo[idx].field_256
                                                                            mem[_38006 + 64] = poolInfo[idx].field_512
                                                                            mem[_38006 + 96] = poolInfo[idx].field_768
                                                                        else:
                                                                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                            if ext_call.return_data[0] <= 0:
                                                                                revert with 0, 'SafeMath: division by zero'
                                                                            require ext_call.return_data[0]
                                                                            if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                                revert with 0, 'SafeMath: addition overflow'
                                                                            poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                                            poolInfo[idx].field_512 = block.timestamp
                                                                            require idx < poolInfo.length
                                                                            mem[0] = 4
                                                                            _38116 = mem[64]
                                                                            mem[64] = mem[64] + 128
                                                                            mem[_38116] = poolInfo[idx].field_0
                                                                            mem[_38116 + 32] = poolInfo[idx].field_256
                                                                            mem[_38116 + 64] = poolInfo[idx].field_512
                                                                            mem[_38116 + 96] = poolInfo[idx].field_768
                                                                    else:
                                                                        if (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond) != poolInfo[idx].field_256:
                                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                        if totalAllocPoint <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        require totalAllocPoint
                                                                        if not (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint:
                                                                            if ext_call.return_data[0] <= 0:
                                                                                revert with 0, 'SafeMath: division by zero'
                                                                            require ext_call.return_data[0]
                                                                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                                revert with 0, 'SafeMath: addition overflow'
                                                                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                                            poolInfo[idx].field_512 = block.timestamp
                                                                            require idx < poolInfo.length
                                                                            mem[0] = 4
                                                                            _38111 = mem[64]
                                                                            mem[64] = mem[64] + 128
                                                                            mem[_38111] = poolInfo[idx].field_0
                                                                            mem[_38111 + 32] = poolInfo[idx].field_256
                                                                            mem[_38111 + 64] = poolInfo[idx].field_512
                                                                            mem[_38111 + 96] = poolInfo[idx].field_768
                                                                        else:
                                                                            if 10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                            if ext_call.return_data[0] <= 0:
                                                                                revert with 0, 'SafeMath: division by zero'
                                                                            require ext_call.return_data[0]
                                                                            if (10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                                revert with 0, 'SafeMath: addition overflow'
                                                                            poolInfo[idx].field_768 += 10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                                                                            poolInfo[idx].field_512 = block.timestamp
                                                                            require idx < poolInfo.length
                                                                            mem[0] = 4
                                                                            _38218 = mem[64]
                                                                            mem[64] = mem[64] + 128
                                                                            mem[_38218] = poolInfo[idx].field_0
                                                                            mem[_38218 + 32] = poolInfo[idx].field_256
                                                                            mem[_38218 + 64] = poolInfo[idx].field_512
                                                                            mem[_38218 + 96] = poolInfo[idx].field_768
                                                    mem[0] = msg.sender
                                                    mem[32] = sha3(idx, 6)
                                                    if not userInfo[idx][msg.sender].field_0:
                                                        if userInfo[idx][msg.sender].field_256 > 0:
                                                            revert with 0, 'SafeMath: subtraction overflow'
                                                        if -userInfo[idx][msg.sender].field_256 < 0:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                    else:
                                                        if poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / userInfo[idx][msg.sender].field_0 != poolInfo[idx].field_768:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                        if userInfo[idx][msg.sender].field_256 > poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12:
                                                            revert with 0, 'SafeMath: subtraction overflow'
                                                        if (poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12) - userInfo[idx][msg.sender].field_256 < 0:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                    if not userInfo[idx][msg.sender].field_0:
                                                        userInfo[idx][msg.sender].field_256 = 0
                                                    else:
                                                        if poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / userInfo[idx][msg.sender].field_0 != poolInfo[idx].field_768:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                        userInfo[idx][msg.sender].field_256 = poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12
                                            else:
                                                if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[idx][address(msg.sender)].field_0) + (poolInfo[idx].field_768 * userInfo[idx][address(msg.sender)].field_0) / userInfo[idx][address(msg.sender)].field_0 != (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768:
                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                if userInfo[idx][address(msg.sender)].field_256 > (10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[idx][address(msg.sender)].field_0) + (poolInfo[idx].field_768 * userInfo[idx][address(msg.sender)].field_0) / 10^12:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if ((10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[idx][address(msg.sender)].field_0) + (poolInfo[idx].field_768 * userInfo[idx][address(msg.sender)].field_0) / 10^12) - userInfo[idx][address(msg.sender)].field_256 > 0:
                                                    require idx < poolInfo.length
                                                    if block.timestamp <= poolInfo[idx].field_512:
                                                        require idx < poolInfo.length
                                                        mem[0] = 4
                                                        _35951 = mem[64]
                                                        mem[64] = mem[64] + 128
                                                        mem[_35951] = poolInfo[idx].field_0
                                                        mem[_35951 + 32] = poolInfo[idx].field_256
                                                        mem[_35951 + 64] = poolInfo[idx].field_512
                                                        mem[_35951 + 96] = poolInfo[idx].field_768
                                                    else:
                                                        mem[mem[64] + 4] = this.address
                                                        require ext_code.size(poolInfo[idx].field_0)
                                                        staticcall poolInfo[idx].field_0.0x70a08231 with:
                                                                gas gas_remaining wei
                                                               args this.address
                                                        mem[mem[64]] = ext_call.return_data[0]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        require return_data.size >= 32
                                                        if not ext_call.return_data[0]:
                                                            poolInfo[idx].field_512 = block.timestamp
                                                            require idx < poolInfo.length
                                                            mem[0] = 4
                                                            _36268 = mem[64]
                                                            mem[64] = mem[64] + 128
                                                            mem[_36268] = poolInfo[idx].field_0
                                                            mem[_36268 + 32] = poolInfo[idx].field_256
                                                            mem[_36268 + 64] = poolInfo[idx].field_512
                                                            mem[_36268 + 96] = poolInfo[idx].field_768
                                                        else:
                                                            if not totalAllocPoint:
                                                                poolInfo[idx].field_512 = block.timestamp
                                                                require idx < poolInfo.length
                                                                mem[0] = 4
                                                                _36344 = mem[64]
                                                                mem[64] = mem[64] + 128
                                                                mem[_36344] = poolInfo[idx].field_0
                                                                mem[_36344 + 32] = poolInfo[idx].field_256
                                                                mem[_36344 + 64] = poolInfo[idx].field_512
                                                                mem[_36344 + 96] = poolInfo[idx].field_768
                                                            else:
                                                                if poolInfo[idx].field_512 > block.timestamp:
                                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                                if not block.timestamp - poolInfo[idx].field_512:
                                                                    if totalAllocPoint <= 0:
                                                                        revert with 0, 'SafeMath: division by zero'
                                                                    require totalAllocPoint
                                                                    if not 0 / totalAllocPoint:
                                                                        if ext_call.return_data[0] <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        require ext_call.return_data[0]
                                                                        if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                            revert with 0, 'SafeMath: addition overflow'
                                                                        poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                                        poolInfo[idx].field_512 = block.timestamp
                                                                        require idx < poolInfo.length
                                                                        mem[0] = 4
                                                                        _38001 = mem[64]
                                                                        mem[64] = mem[64] + 128
                                                                        mem[_38001] = poolInfo[idx].field_0
                                                                        mem[_38001 + 32] = poolInfo[idx].field_256
                                                                        mem[_38001 + 64] = poolInfo[idx].field_512
                                                                        mem[_38001 + 96] = poolInfo[idx].field_768
                                                                    else:
                                                                        if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                        if ext_call.return_data[0] <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        require ext_call.return_data[0]
                                                                        if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                            revert with 0, 'SafeMath: addition overflow'
                                                                        poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                                        poolInfo[idx].field_512 = block.timestamp
                                                                        require idx < poolInfo.length
                                                                        mem[0] = 4
                                                                        _38106 = mem[64]
                                                                        mem[64] = mem[64] + 128
                                                                        mem[_38106] = poolInfo[idx].field_0
                                                                        mem[_38106 + 32] = poolInfo[idx].field_256
                                                                        mem[_38106 + 64] = poolInfo[idx].field_512
                                                                        mem[_38106 + 96] = poolInfo[idx].field_768
                                                                else:
                                                                    if (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond) / block.timestamp - poolInfo[idx].field_512 != rewardsPerSecond:
                                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                    if not (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond):
                                                                        if totalAllocPoint <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        require totalAllocPoint
                                                                        if not 0 / totalAllocPoint:
                                                                            if ext_call.return_data[0] <= 0:
                                                                                revert with 0, 'SafeMath: division by zero'
                                                                            require ext_call.return_data[0]
                                                                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                                revert with 0, 'SafeMath: addition overflow'
                                                                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                                            poolInfo[idx].field_512 = block.timestamp
                                                                            require idx < poolInfo.length
                                                                            mem[0] = 4
                                                                            _38101 = mem[64]
                                                                            mem[64] = mem[64] + 128
                                                                            mem[_38101] = poolInfo[idx].field_0
                                                                            mem[_38101 + 32] = poolInfo[idx].field_256
                                                                            mem[_38101 + 64] = poolInfo[idx].field_512
                                                                            mem[_38101 + 96] = poolInfo[idx].field_768
                                                                        else:
                                                                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                            if ext_call.return_data[0] <= 0:
                                                                                revert with 0, 'SafeMath: division by zero'
                                                                            require ext_call.return_data[0]
                                                                            if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                                revert with 0, 'SafeMath: addition overflow'
                                                                            poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                                            poolInfo[idx].field_512 = block.timestamp
                                                                            require idx < poolInfo.length
                                                                            mem[0] = 4
                                                                            _38213 = mem[64]
                                                                            mem[64] = mem[64] + 128
                                                                            mem[_38213] = poolInfo[idx].field_0
                                                                            mem[_38213 + 32] = poolInfo[idx].field_256
                                                                            mem[_38213 + 64] = poolInfo[idx].field_512
                                                                            mem[_38213 + 96] = poolInfo[idx].field_768
                                                                    else:
                                                                        if (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond) != poolInfo[idx].field_256:
                                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                        if totalAllocPoint <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        require totalAllocPoint
                                                                        if not (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint:
                                                                            if ext_call.return_data[0] <= 0:
                                                                                revert with 0, 'SafeMath: division by zero'
                                                                            require ext_call.return_data[0]
                                                                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                                revert with 0, 'SafeMath: addition overflow'
                                                                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                                            poolInfo[idx].field_512 = block.timestamp
                                                                            require idx < poolInfo.length
                                                                            mem[0] = 4
                                                                            _38208 = mem[64]
                                                                            mem[64] = mem[64] + 128
                                                                            mem[_38208] = poolInfo[idx].field_0
                                                                            mem[_38208 + 32] = poolInfo[idx].field_256
                                                                            mem[_38208 + 64] = poolInfo[idx].field_512
                                                                            mem[_38208 + 96] = poolInfo[idx].field_768
                                                                        else:
                                                                            if 10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                            if ext_call.return_data[0] <= 0:
                                                                                revert with 0, 'SafeMath: division by zero'
                                                                            require ext_call.return_data[0]
                                                                            if (10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                                revert with 0, 'SafeMath: addition overflow'
                                                                            poolInfo[idx].field_768 += 10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                                                                            poolInfo[idx].field_512 = block.timestamp
                                                                            require idx < poolInfo.length
                                                                            mem[0] = 4
                                                                            _38287 = mem[64]
                                                                            mem[64] = mem[64] + 128
                                                                            mem[_38287] = poolInfo[idx].field_0
                                                                            mem[_38287 + 32] = poolInfo[idx].field_256
                                                                            mem[_38287 + 64] = poolInfo[idx].field_512
                                                                            mem[_38287 + 96] = poolInfo[idx].field_768
                                                    mem[0] = msg.sender
                                                    mem[32] = sha3(idx, 6)
                                                    if not userInfo[idx][msg.sender].field_0:
                                                        if userInfo[idx][msg.sender].field_256 > 0:
                                                            revert with 0, 'SafeMath: subtraction overflow'
                                                        if -userInfo[idx][msg.sender].field_256 < 0:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                    else:
                                                        if poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / userInfo[idx][msg.sender].field_0 != poolInfo[idx].field_768:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                        if userInfo[idx][msg.sender].field_256 > poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12:
                                                            revert with 0, 'SafeMath: subtraction overflow'
                                                        if (poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12) - userInfo[idx][msg.sender].field_256 < 0:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                    if not userInfo[idx][msg.sender].field_0:
                                                        userInfo[idx][msg.sender].field_256 = 0
                                                    else:
                                                        if poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / userInfo[idx][msg.sender].field_0 != poolInfo[idx].field_768:
                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                        userInfo[idx][msg.sender].field_256 = poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12
                                    else:
                                        if (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond) / block.timestamp - poolInfo[idx].field_512 != rewardsPerSecond:
                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        if not (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond):
                                            if totalAllocPoint <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalAllocPoint
                                            if not 0 / totalAllocPoint:
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if not userInfo[idx][address(msg.sender)].field_0:
                                                    if userInfo[idx][address(msg.sender)].field_256 > 0:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if -userInfo[idx][address(msg.sender)].field_256 > 0:
                                                        require idx < poolInfo.length
                                                        if block.timestamp <= poolInfo[idx].field_512:
                                                            require idx < poolInfo.length
                                                            mem[0] = 4
                                                            _35886 = mem[64]
                                                            mem[64] = mem[64] + 128
                                                            mem[_35886] = poolInfo[idx].field_0
                                                            mem[_35886 + 32] = poolInfo[idx].field_256
                                                            mem[_35886 + 64] = poolInfo[idx].field_512
                                                            mem[_35886 + 96] = poolInfo[idx].field_768
                                                        else:
                                                            mem[mem[64] + 4] = this.address
                                                            require ext_code.size(poolInfo[idx].field_0)
                                                            staticcall poolInfo[idx].field_0.0x70a08231 with:
                                                                    gas gas_remaining wei
                                                                   args this.address
                                                            mem[mem[64]] = ext_call.return_data[0]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            require return_data.size >= 32
                                                            if not ext_call.return_data[0]:
                                                                poolInfo[idx].field_512 = block.timestamp
                                                                require idx < poolInfo.length
                                                                mem[0] = 4
                                                                _36180 = mem[64]
                                                                mem[64] = mem[64] + 128
                                                                mem[_36180] = poolInfo[idx].field_0
                                                                mem[_36180 + 32] = poolInfo[idx].field_256
                                                                mem[_36180 + 64] = poolInfo[idx].field_512
                                                                mem[_36180 + 96] = poolInfo[idx].field_768
                                                            else:
                                                                if not totalAllocPoint:
                                                                    poolInfo[idx].field_512 = block.timestamp
                                                                    require idx < poolInfo.length
                                                                    mem[0] = 4
                                                                    _36263 = mem[64]
                                                                    mem[64] = mem[64] + 128
                                                                    mem[_36263] = poolInfo[idx].field_0
                                                                    mem[_36263 + 32] = poolInfo[idx].field_256
                                                                    mem[_36263 + 64] = poolInfo[idx].field_512
                                                                    mem[_36263 + 96] = poolInfo[idx].field_768
                                                                else:
                                                                    if poolInfo[idx].field_512 > block.timestamp:
                                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                                    if not block.timestamp - poolInfo[idx].field_512:
                                                                        if totalAllocPoint <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        require totalAllocPoint
                                                                        if not 0 / totalAllocPoint:
                                                                            if ext_call.return_data[0] <= 0:
                                                                                revert with 0, 'SafeMath: division by zero'
                                                                            require ext_call.return_data[0]
                                                                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                                revert with 0, 'SafeMath: addition overflow'
                                                                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                                            poolInfo[idx].field_512 = block.timestamp
                                                                            require idx < poolInfo.length
                                                                            mem[0] = 4
                                                                            _37919 = mem[64]
                                                                            mem[64] = mem[64] + 128
                                                                            mem[_37919] = poolInfo[idx].field_0
                                                                            mem[_37919 + 32] = poolInfo[idx].field_256
                                                                            mem[_37919 + 64] = poolInfo[idx].field_512
                                                                            mem[_37919 + 96] = poolInfo[idx].field_768
                                                                        else:
                                                                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                            if ext_call.return_data[0] <= 0:
                                                                                revert with 0, 'SafeMath: division by zero'
                                                                            require ext_call.return_data[0]
                                                                            if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                                revert with 0, 'SafeMath: addition overflow'
                                                                            poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                                            poolInfo[idx].field_512 = block.timestamp
                                                                            require idx < poolInfo.length
                                                                            mem[0] = 4
                                                                            _37994 = mem[64]
                                                                            mem[64] = mem[64] + 128
                                                                            mem[_37994] = poolInfo[idx].field_0
                                                                            mem[_37994 + 32] = poolInfo[idx].field_256
                                                                            mem[_37994 + 64] = poolInfo[idx].field_512
                                                                            mem[_37994 + 96] = poolInfo[idx].field_768
                                                                    else:
                                                                        if (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond) / block.timestamp - poolInfo[idx].field_512 != rewardsPerSecond:
                                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                        if not (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond):
                                                                            if totalAllocPoint <= 0:
                                                                                revert with 0, 'SafeMath: division by zero'
                                                                            require totalAllocPoint
                                                                            if not 0 / totalAllocPoint:
                                                                                if ext_call.return_data[0] <= 0:
                                                                                    revert with 0, 'SafeMath: division by zero'
                                                                                require ext_call.return_data[0]
                                                                                if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                                poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                                                poolInfo[idx].field_512 = block.timestamp
                                                                                require idx < poolInfo.length
                                                                                mem[0] = 4
                                                                                _37989 = mem[64]
                                                                                mem[64] = mem[64] + 128
                                                                                mem[_37989] = poolInfo[idx].field_0
                                                                                mem[_37989 + 32] = poolInfo[idx].field_256
                                                                                mem[_37989 + 64] = poolInfo[idx].field_512
                                                                                mem[_37989 + 96] = poolInfo[idx].field_768
                                                                            else:
                                                                                if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                                if ext_call.return_data[0] <= 0:
                                                                                    revert with 0, 'SafeMath: division by zero'
                                                                                require ext_call.return_data[0]
                                                                                if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                                poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                                                poolInfo[idx].field_512 = block.timestamp
                                                                                require idx < poolInfo.length
                                                                                mem[0] = 4
                                                                                _38096 = mem[64]
                                                                                mem[64] = mem[64] + 128
                                                                                mem[_38096] = poolInfo[idx].field_0
                                                                                mem[_38096 + 32] = poolInfo[idx].field_256
                                                                                mem[_38096 + 64] = poolInfo[idx].field_512
                                                                                mem[_38096 + 96] = poolInfo[idx].field_768
                                                                        else:
                                                                            if (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond) != poolInfo[idx].field_256:
                                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                            if totalAllocPoint <= 0:
                                                                                revert with 0, 'SafeMath: division by zero'
                                                                            require totalAllocPoint
                                                                            if not (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint:
                                                                                if ext_call.return_data[0] <= 0:
                                                                                    revert with 0, 'SafeMath: division by zero'
                                                                                require ext_call.return_data[0]
                                                                                if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                                poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                                                poolInfo[idx].field_512 = block.timestamp
                                                                                require idx < poolInfo.length
                                                                                mem[0] = 4
                                                                                _38091 = mem[64]
                                                                                mem[64] = mem[64] + 128
                                                                                mem[_38091] = poolInfo[idx].field_0
                                                                                mem[_38091 + 32] = poolInfo[idx].field_256
                                                                                mem[_38091 + 64] = poolInfo[idx].field_512
                                                                                mem[_38091 + 96] = poolInfo[idx].field_768
                                                                            else:
                                                                                if 10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                                                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                                if ext_call.return_data[0] <= 0:
                                                                                    revert with 0, 'SafeMath: division by zero'
                                                                                require ext_call.return_data[0]
                                                                                if (10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                                poolInfo[idx].field_768 += 10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                                                                                poolInfo[idx].field_512 = block.timestamp
                                                                                require idx < poolInfo.length
                                                                                mem[0] = 4
                                                                                _38203 = mem[64]
                                                                                mem[64] = mem[64] + 128
                                                                                mem[_38203] = poolInfo[idx].field_0
                                                                                mem[_38203 + 32] = poolInfo[idx].field_256
                                                                                mem[_38203 + 64] = poolInfo[idx].field_512
                                                                                mem[_38203 + 96] = poolInfo[idx].field_768
                                                        mem[0] = msg.sender
                                                        mem[32] = sha3(idx, 6)
                                                        if not userInfo[idx][msg.sender].field_0:
                                                            if userInfo[idx][msg.sender].field_256 > 0:
                                                                revert with 0, 'SafeMath: subtraction overflow'
                                                            if -userInfo[idx][msg.sender].field_256 < 0:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                        else:
                                                            if poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / userInfo[idx][msg.sender].field_0 != poolInfo[idx].field_768:
                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                            if userInfo[idx][msg.sender].field_256 > poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12:
                                                                revert with 0, 'SafeMath: subtraction overflow'
                                                            if (poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12) - userInfo[idx][msg.sender].field_256 < 0:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                        if not userInfo[idx][msg.sender].field_0:
                                                            userInfo[idx][msg.sender].field_256 = 0
                                                        else:
                                                            if poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / userInfo[idx][msg.sender].field_0 != poolInfo[idx].field_768:
                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                            userInfo[idx][msg.sender].field_256 = poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12
                                                else:
                                                    if (0 / ext_call.return_data[0] * userInfo[idx][address(msg.sender)].field_0) + (poolInfo[idx].field_768 * userInfo[idx][address(msg.sender)].field_0) / userInfo[idx][address(msg.sender)].field_0 != (0 / ext_call.return_data[0]) + poolInfo[idx].field_768:
                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                    if userInfo[idx][address(msg.sender)].field_256 > (0 / ext_call.return_data[0] * userInfo[idx][address(msg.sender)].field_0) + (poolInfo[idx].field_768 * userInfo[idx][address(msg.sender)].field_0) / 10^12:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if ((0 / ext_call.return_data[0] * userInfo[idx][address(msg.sender)].field_0) + (poolInfo[idx].field_768 * userInfo[idx][address(msg.sender)].field_0) / 10^12) - userInfo[idx][address(msg.sender)].field_256 > 0:
                                                        require idx < poolInfo.length
                                                        if block.timestamp <= poolInfo[idx].field_512:
                                                            require idx < poolInfo.length
                                                            mem[0] = 4
                                                            _35945 = mem[64]
                                                            mem[64] = mem[64] + 128
                                                            mem[_35945] = poolInfo[idx].field_0
                                                            mem[_35945 + 32] = poolInfo[idx].field_256
                                                            mem[_35945 + 64] = poolInfo[idx].field_512
                                                            mem[_35945 + 96] = poolInfo[idx].field_768
                                                        else:
                                                            mem[mem[64] + 4] = this.address
                                                            require ext_code.size(poolInfo[idx].field_0)
                                                            staticcall poolInfo[idx].field_0.0x70a08231 with:
                                                                    gas gas_remaining wei
                                                                   args this.address
                                                            mem[mem[64]] = ext_call.return_data[0]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            require return_data.size >= 32
                                                            if not ext_call.return_data[0]:
                                                                poolInfo[idx].field_512 = block.timestamp
                                                                require idx < poolInfo.length
                                                                mem[0] = 4
                                                                _36256 = mem[64]
                                                                mem[64] = mem[64] + 128
                                                                mem[_36256] = poolInfo[idx].field_0
                                                                mem[_36256 + 32] = poolInfo[idx].field_256
                                                                mem[_36256 + 64] = poolInfo[idx].field_512
                                                                mem[_36256 + 96] = poolInfo[idx].field_768
                                                            else:
                                                                if not totalAllocPoint:
                                                                    poolInfo[idx].field_512 = block.timestamp
                                                                    require idx < poolInfo.length
                                                                    mem[0] = 4
                                                                    _36339 = mem[64]
                                                                    mem[64] = mem[64] + 128
                                                                    mem[_36339] = poolInfo[idx].field_0
                                                                    mem[_36339 + 32] = poolInfo[idx].field_256
                                                                    mem[_36339 + 64] = poolInfo[idx].field_512
                                                                    mem[_36339 + 96] = poolInfo[idx].field_768
                                                                else:
                                                                    if poolInfo[idx].field_512 > block.timestamp:
                                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                                    if not block.timestamp - poolInfo[idx].field_512:
                                                                        if totalAllocPoint <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        require totalAllocPoint
                                                                        if not 0 / totalAllocPoint:
                                                                            if ext_call.return_data[0] <= 0:
                                                                                revert with 0, 'SafeMath: division by zero'
                                                                            require ext_call.return_data[0]
                                                                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                                revert with 0, 'SafeMath: addition overflow'
                                                                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                                            poolInfo[idx].field_512 = block.timestamp
                                                                            require idx < poolInfo.length
                                                                            mem[0] = 4
                                                                            _37984 = mem[64]
                                                                            mem[64] = mem[64] + 128
                                                                            mem[_37984] = poolInfo[idx].field_0
                                                                            mem[_37984 + 32] = poolInfo[idx].field_256
                                                                            mem[_37984 + 64] = poolInfo[idx].field_512
                                                                            mem[_37984 + 96] = poolInfo[idx].field_768
                                                                        else:
                                                                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                            if ext_call.return_data[0] <= 0:
                                                                                revert with 0, 'SafeMath: division by zero'
                                                                            require ext_call.return_data[0]
                                                                            if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                                revert with 0, 'SafeMath: addition overflow'
                                                                            poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                                            poolInfo[idx].field_512 = block.timestamp
                                                                            require idx < poolInfo.length
                                                                            mem[0] = 4
                                                                            _38086 = mem[64]
                                                                            mem[64] = mem[64] + 128
                                                                            mem[_38086] = poolInfo[idx].field_0
                                                                            mem[_38086 + 32] = poolInfo[idx].field_256
                                                                            mem[_38086 + 64] = poolInfo[idx].field_512
                                                                            mem[_38086 + 96] = poolInfo[idx].field_768
                                                                    else:
                                                                        if (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond) / block.timestamp - poolInfo[idx].field_512 != rewardsPerSecond:
                                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                        if not (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond):
                                                                            if totalAllocPoint <= 0:
                                                                                revert with 0, 'SafeMath: division by zero'
                                                                            require totalAllocPoint
                                                                            if not 0 / totalAllocPoint:
                                                                                if ext_call.return_data[0] <= 0:
                                                                                    revert with 0, 'SafeMath: division by zero'
                                                                                require ext_call.return_data[0]
                                                                                if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                                poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                                                poolInfo[idx].field_512 = block.timestamp
                                                                                require idx < poolInfo.length
                                                                                mem[0] = 4
                                                                                _38081 = mem[64]
                                                                                mem[64] = mem[64] + 128
                                                                                mem[_38081] = poolInfo[idx].field_0
                                                                                mem[_38081 + 32] = poolInfo[idx].field_256
                                                                                mem[_38081 + 64] = poolInfo[idx].field_512
                                                                                mem[_38081 + 96] = poolInfo[idx].field_768
                                                                            else:
                                                                                if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                                if ext_call.return_data[0] <= 0:
                                                                                    revert with 0, 'SafeMath: division by zero'
                                                                                require ext_call.return_data[0]
                                                                                if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                                poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                                                poolInfo[idx].field_512 = block.timestamp
                                                                                require idx < poolInfo.length
                                                                                mem[0] = 4
                                                                                _38198 = mem[64]
                                                                                mem[64] = mem[64] + 128
                                                                                mem[_38198] = poolInfo[idx].field_0
                                                                                mem[_38198 + 32] = poolInfo[idx].field_256
                                                                                mem[_38198 + 64] = poolInfo[idx].field_512
                                                                                mem[_38198 + 96] = poolInfo[idx].field_768
                                                                        else:
                                                                            if (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond) != poolInfo[idx].field_256:
                                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                            if totalAllocPoint <= 0:
                                                                                revert with 0, 'SafeMath: division by zero'
                                                                            require totalAllocPoint
                                                                            if not (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint:
                                                                                if ext_call.return_data[0] <= 0:
                                                                                    revert with 0, 'SafeMath: division by zero'
                                                                                require ext_call.return_data[0]
                                                                                if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                                poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                                                poolInfo[idx].field_512 = block.timestamp
                                                                                require idx < poolInfo.length
                                                                                mem[0] = 4
                                                                                _38193 = mem[64]
                                                                                mem[64] = mem[64] + 128
                                                                                mem[_38193] = poolInfo[idx].field_0
                                                                                mem[_38193 + 32] = poolInfo[idx].field_256
                                                                                mem[_38193 + 64] = poolInfo[idx].field_512
                                                                                mem[_38193 + 96] = poolInfo[idx].field_768
                                                                            else:
                                                                                if 10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                                                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                                if ext_call.return_data[0] <= 0:
                                                                                    revert with 0, 'SafeMath: division by zero'
                                                                                require ext_call.return_data[0]
                                                                                if (10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                                poolInfo[idx].field_768 += 10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                                                                                poolInfo[idx].field_512 = block.timestamp
                                                                                require idx < poolInfo.length
                                                                                mem[0] = 4
                                                                                _38280 = mem[64]
                                                                                mem[64] = mem[64] + 128
                                                                                mem[_38280] = poolInfo[idx].field_0
                                                                                mem[_38280 + 32] = poolInfo[idx].field_256
                                                                                mem[_38280 + 64] = poolInfo[idx].field_512
                                                                                mem[_38280 + 96] = poolInfo[idx].field_768
                                                        mem[0] = msg.sender
                                                        mem[32] = sha3(idx, 6)
                                                        if not userInfo[idx][msg.sender].field_0:
                                                            if userInfo[idx][msg.sender].field_256 > 0:
                                                                revert with 0, 'SafeMath: subtraction overflow'
                                                            if -userInfo[idx][msg.sender].field_256 < 0:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                        else:
                                                            if poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / userInfo[idx][msg.sender].field_0 != poolInfo[idx].field_768:
                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                            if userInfo[idx][msg.sender].field_256 > poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12:
                                                                revert with 0, 'SafeMath: subtraction overflow'
                                                            if (poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12) - userInfo[idx][msg.sender].field_256 < 0:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                        if not userInfo[idx][msg.sender].field_0:
                                                            userInfo[idx][msg.sender].field_256 = 0
                                                        else:
                                                            if poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / userInfo[idx][msg.sender].field_0 != poolInfo[idx].field_768:
                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                            userInfo[idx][msg.sender].field_256 = poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12
                                            else:
                                                if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if not userInfo[idx][address(msg.sender)].field_0:
                                                    if userInfo[idx][address(msg.sender)].field_256 > 0:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if -userInfo[idx][address(msg.sender)].field_256 > 0:
                                                        require idx < poolInfo.length
                                                        if block.timestamp <= poolInfo[idx].field_512:
                                                            require idx < poolInfo.length
                                                            mem[0] = 4
                                                            _35939 = mem[64]
                                                            mem[64] = mem[64] + 128
                                                            mem[_35939] = poolInfo[idx].field_0
                                                            mem[_35939 + 32] = poolInfo[idx].field_256
                                                            mem[_35939 + 64] = poolInfo[idx].field_512
                                                            mem[_35939 + 96] = poolInfo[idx].field_768
                                                        else:
                                                            mem[mem[64] + 4] = this.address
                                                            require ext_code.size(poolInfo[idx].field_0)
                                                            staticcall poolInfo[idx].field_0.0x70a08231 with:
                                                                    gas gas_remaining wei
                                                                   args this.address
                                                            mem[mem[64]] = ext_call.return_data[0]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            require return_data.size >= 32
                                                            if not ext_call.return_data[0]:
                                                                poolInfo[idx].field_512 = block.timestamp
                                                                require idx < poolInfo.length
                                                                mem[0] = 4
                                                                _36249 = mem[64]
                                                                mem[64] = mem[64] + 128
                                                                mem[_36249] = poolInfo[idx].field_0
                                                                mem[_36249 + 32] = poolInfo[idx].field_256
                                                                mem[_36249 + 64] = poolInfo[idx].field_512
                                                                mem[_36249 + 96] = poolInfo[idx].field_768
                                                            else:
                                                                if not totalAllocPoint:
                                                                    poolInfo[idx].field_512 = block.timestamp
                                                                    require idx < poolInfo.length
                                                                    mem[0] = 4
                                                                    _36334 = mem[64]
                                                                    mem[64] = mem[64] + 128
                                                                    mem[_36334] = poolInfo[idx].field_0
                                                                    mem[_36334 + 32] = poolInfo[idx].field_256
                                                                    mem[_36334 + 64] = poolInfo[idx].field_512
                                                                    mem[_36334 + 96] = poolInfo[idx].field_768
                                                                else:
                                                                    if poolInfo[idx].field_512 > block.timestamp:
                                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                                    if not block.timestamp - poolInfo[idx].field_512:
                                                                        if totalAllocPoint <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        require totalAllocPoint
                                                                        if not 0 / totalAllocPoint:
                                                                            if ext_call.return_data[0] <= 0:
                                                                                revert with 0, 'SafeMath: division by zero'
                                                                            require ext_call.return_data[0]
                                                                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                                revert with 0, 'SafeMath: addition overflow'
                                                                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                                            poolInfo[idx].field_512 = block.timestamp
                                                                            require idx < poolInfo.length
                                                                            mem[0] = 4
                                                                            _37977 = mem[64]
                                                                            mem[64] = mem[64] + 128
                                                                            mem[_37977] = poolInfo[idx].field_0
                                                                            mem[_37977 + 32] = poolInfo[idx].field_256
                                                                            mem[_37977 + 64] = poolInfo[idx].field_512
                                                                            mem[_37977 + 96] = poolInfo[idx].field_768
                                                                        else:
                                                                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                            if ext_call.return_data[0] <= 0:
                                                                                revert with 0, 'SafeMath: division by zero'
                                                                            require ext_call.return_data[0]
                                                                            if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                                revert with 0, 'SafeMath: addition overflow'
                                                                            poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                                            poolInfo[idx].field_512 = block.timestamp
                                                                            require idx < poolInfo.length
                                                                            mem[0] = 4
                                                                            _38076 = mem[64]
                                                                            mem[64] = mem[64] + 128
                                                                            mem[_38076] = poolInfo[idx].field_0
                                                                            mem[_38076 + 32] = poolInfo[idx].field_256
                                                                            mem[_38076 + 64] = poolInfo[idx].field_512
                                                                            mem[_38076 + 96] = poolInfo[idx].field_768
                                                                    else:
                                                                        if (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond) / block.timestamp - poolInfo[idx].field_512 != rewardsPerSecond:
                                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                        if not (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond):
                                                                            if totalAllocPoint <= 0:
                                                                                revert with 0, 'SafeMath: division by zero'
                                                                            require totalAllocPoint
                                                                            if not 0 / totalAllocPoint:
                                                                                if ext_call.return_data[0] <= 0:
                                                                                    revert with 0, 'SafeMath: division by zero'
                                                                                require ext_call.return_data[0]
                                                                                if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                                poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                                                poolInfo[idx].field_512 = block.timestamp
                                                                                require idx < poolInfo.length
                                                                                mem[0] = 4
                                                                                _38071 = mem[64]
                                                                                mem[64] = mem[64] + 128
                                                                                mem[_38071] = poolInfo[idx].field_0
                                                                                mem[_38071 + 32] = poolInfo[idx].field_256
                                                                                mem[_38071 + 64] = poolInfo[idx].field_512
                                                                                mem[_38071 + 96] = poolInfo[idx].field_768
                                                                            else:
                                                                                if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                                if ext_call.return_data[0] <= 0:
                                                                                    revert with 0, 'SafeMath: division by zero'
                                                                                require ext_call.return_data[0]
                                                                                if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                                poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                                                poolInfo[idx].field_512 = block.timestamp
                                                                                require idx < poolInfo.length
                                                                                mem[0] = 4
                                                                                _38188 = mem[64]
                                                                                mem[64] = mem[64] + 128
                                                                                mem[_38188] = poolInfo[idx].field_0
                                                                                mem[_38188 + 32] = poolInfo[idx].field_256
                                                                                mem[_38188 + 64] = poolInfo[idx].field_512
                                                                                mem[_38188 + 96] = poolInfo[idx].field_768
                                                                        else:
                                                                            if (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond) != poolInfo[idx].field_256:
                                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                            if totalAllocPoint <= 0:
                                                                                revert with 0, 'SafeMath: division by zero'
                                                                            require totalAllocPoint
                                                                            if not (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint:
                                                                                if ext_call.return_data[0] <= 0:
                                                                                    revert with 0, 'SafeMath: division by zero'
                                                                                require ext_call.return_data[0]
                                                                                if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                                poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                                                poolInfo[idx].field_512 = block.timestamp
                                                                                require idx < poolInfo.length
                                                                                mem[0] = 4
                                                                                _38183 = mem[64]
                                                                                mem[64] = mem[64] + 128
                                                                                mem[_38183] = poolInfo[idx].field_0
                                                                                mem[_38183 + 32] = poolInfo[idx].field_256
                                                                                mem[_38183 + 64] = poolInfo[idx].field_512
                                                                                mem[_38183 + 96] = poolInfo[idx].field_768
                                                                            else:
                                                                                if 10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                                                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                                if ext_call.return_data[0] <= 0:
                                                                                    revert with 0, 'SafeMath: division by zero'
                                                                                require ext_call.return_data[0]
                                                                                if (10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                                poolInfo[idx].field_768 += 10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                                                                                poolInfo[idx].field_512 = block.timestamp
                                                                                require idx < poolInfo.length
                                                                                mem[0] = 4
                                                                                _38275 = mem[64]
                                                                                mem[64] = mem[64] + 128
                                                                                mem[_38275] = poolInfo[idx].field_0
                                                                                mem[_38275 + 32] = poolInfo[idx].field_256
                                                                                mem[_38275 + 64] = poolInfo[idx].field_512
                                                                                mem[_38275 + 96] = poolInfo[idx].field_768
                                                        mem[0] = msg.sender
                                                        mem[32] = sha3(idx, 6)
                                                        if not userInfo[idx][msg.sender].field_0:
                                                            if userInfo[idx][msg.sender].field_256 > 0:
                                                                revert with 0, 'SafeMath: subtraction overflow'
                                                            if -userInfo[idx][msg.sender].field_256 < 0:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                        else:
                                                            if poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / userInfo[idx][msg.sender].field_0 != poolInfo[idx].field_768:
                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                            if userInfo[idx][msg.sender].field_256 > poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12:
                                                                revert with 0, 'SafeMath: subtraction overflow'
                                                            if (poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12) - userInfo[idx][msg.sender].field_256 < 0:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                        if not userInfo[idx][msg.sender].field_0:
                                                            userInfo[idx][msg.sender].field_256 = 0
                                                        else:
                                                            if poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / userInfo[idx][msg.sender].field_0 != poolInfo[idx].field_768:
                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                            userInfo[idx][msg.sender].field_256 = poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12
                                                else:
                                                    if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[idx][address(msg.sender)].field_0) + (poolInfo[idx].field_768 * userInfo[idx][address(msg.sender)].field_0) / userInfo[idx][address(msg.sender)].field_0 != (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768:
                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                    if userInfo[idx][address(msg.sender)].field_256 > (10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[idx][address(msg.sender)].field_0) + (poolInfo[idx].field_768 * userInfo[idx][address(msg.sender)].field_0) / 10^12:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if ((10^12 * 0 / totalAllocPoint / ext_call.return_data[0] * userInfo[idx][address(msg.sender)].field_0) + (poolInfo[idx].field_768 * userInfo[idx][address(msg.sender)].field_0) / 10^12) - userInfo[idx][address(msg.sender)].field_256 > 0:
                                                        require idx < poolInfo.length
                                                        if block.timestamp <= poolInfo[idx].field_512:
                                                            require idx < poolInfo.length
                                                            mem[0] = 4
                                                            _36006 = mem[64]
                                                            mem[64] = mem[64] + 128
                                                            mem[_36006] = poolInfo[idx].field_0
                                                            mem[_36006 + 32] = poolInfo[idx].field_256
                                                            mem[_36006 + 64] = poolInfo[idx].field_512
                                                            mem[_36006 + 96] = poolInfo[idx].field_768
                                                        else:
                                                            mem[mem[64] + 4] = this.address
                                                            require ext_code.size(poolInfo[idx].field_0)
                                                            staticcall poolInfo[idx].field_0.0x70a08231 with:
                                                                    gas gas_remaining wei
                                                                   args this.address
                                                            mem[mem[64]] = ext_call.return_data[0]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            require return_data.size >= 32
                                                            if not ext_call.return_data[0]:
                                                                poolInfo[idx].field_512 = block.timestamp
                                                                require idx < poolInfo.length
                                                                mem[0] = 4
                                                                _36327 = mem[64]
                                                                mem[64] = mem[64] + 128
                                                                mem[_36327] = poolInfo[idx].field_0
                                                                mem[_36327 + 32] = poolInfo[idx].field_256
                                                                mem[_36327 + 64] = poolInfo[idx].field_512
                                                                mem[_36327 + 96] = poolInfo[idx].field_768
                                                            else:
                                                                if not totalAllocPoint:
                                                                    poolInfo[idx].field_512 = block.timestamp
                                                                    require idx < poolInfo.length
                                                                    mem[0] = 4
                                                                    _36386 = mem[64]
                                                                    mem[64] = mem[64] + 128
                                                                    mem[_36386] = poolInfo[idx].field_0
                                                                    mem[_36386 + 32] = poolInfo[idx].field_256
                                                                    mem[_36386 + 64] = poolInfo[idx].field_512
                                                                    mem[_36386 + 96] = poolInfo[idx].field_768
                                                                else:
                                                                    if poolInfo[idx].field_512 > block.timestamp:
                                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                                    if not block.timestamp - poolInfo[idx].field_512:
                                                                        if totalAllocPoint <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        require totalAllocPoint
                                                                        if not 0 / totalAllocPoint:
                                                                            if ext_call.return_data[0] <= 0:
                                                                                revert with 0, 'SafeMath: division by zero'
                                                                            require ext_call.return_data[0]
                                                                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                                revert with 0, 'SafeMath: addition overflow'
                                                                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                                            poolInfo[idx].field_512 = block.timestamp
                                                                            require idx < poolInfo.length
                                                                            mem[0] = 4
                                                                            _38066 = mem[64]
                                                                            mem[64] = mem[64] + 128
                                                                            mem[_38066] = poolInfo[idx].field_0
                                                                            mem[_38066 + 32] = poolInfo[idx].field_256
                                                                            mem[_38066 + 64] = poolInfo[idx].field_512
                                                                            mem[_38066 + 96] = poolInfo[idx].field_768
                                                                        else:
                                                                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                            if ext_call.return_data[0] <= 0:
                                                                                revert with 0, 'SafeMath: division by zero'
                                                                            require ext_call.return_data[0]
                                                                            if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                                revert with 0, 'SafeMath: addition overflow'
                                                                            poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                                            poolInfo[idx].field_512 = block.timestamp
                                                                            require idx < poolInfo.length
                                                                            mem[0] = 4
                                                                            _38178 = mem[64]
                                                                            mem[64] = mem[64] + 128
                                                                            mem[_38178] = poolInfo[idx].field_0
                                                                            mem[_38178 + 32] = poolInfo[idx].field_256
                                                                            mem[_38178 + 64] = poolInfo[idx].field_512
                                                                            mem[_38178 + 96] = poolInfo[idx].field_768
                                                                    else:
                                                                        if (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond) / block.timestamp - poolInfo[idx].field_512 != rewardsPerSecond:
                                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                        if not (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond):
                                                                            if totalAllocPoint <= 0:
                                                                                revert with 0, 'SafeMath: division by zero'
                                                                            require totalAllocPoint
                                                                            if not 0 / totalAllocPoint:
                                                                                if ext_call.return_data[0] <= 0:
                                                                                    revert with 0, 'SafeMath: division by zero'
                                                                                require ext_call.return_data[0]
                                                                                if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                                poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                                                poolInfo[idx].field_512 = block.timestamp
                                                                                require idx < poolInfo.length
                                                                                mem[0] = 4
                                                                                _38173 = mem[64]
                                                                                mem[64] = mem[64] + 128
                                                                                mem[_38173] = poolInfo[idx].field_0
                                                                                mem[_38173 + 32] = poolInfo[idx].field_256
                                                                                mem[_38173 + 64] = poolInfo[idx].field_512
                                                                                mem[_38173 + 96] = poolInfo[idx].field_768
                                                                            else:
                                                                                if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                                if ext_call.return_data[0] <= 0:
                                                                                    revert with 0, 'SafeMath: division by zero'
                                                                                require ext_call.return_data[0]
                                                                                if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                                poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                                                poolInfo[idx].field_512 = block.timestamp
                                                                                require idx < poolInfo.length
                                                                                mem[0] = 4
                                                                                _38270 = mem[64]
                                                                                mem[64] = mem[64] + 128
                                                                                mem[_38270] = poolInfo[idx].field_0
                                                                                mem[_38270 + 32] = poolInfo[idx].field_256
                                                                                mem[_38270 + 64] = poolInfo[idx].field_512
                                                                                mem[_38270 + 96] = poolInfo[idx].field_768
                                                                        else:
                                                                            if (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond) != poolInfo[idx].field_256:
                                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                            if totalAllocPoint <= 0:
                                                                                revert with 0, 'SafeMath: division by zero'
                                                                            require totalAllocPoint
                                                                            if not (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint:
                                                                                if ext_call.return_data[0] <= 0:
                                                                                    revert with 0, 'SafeMath: division by zero'
                                                                                require ext_call.return_data[0]
                                                                                if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                                poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                                                poolInfo[idx].field_512 = block.timestamp
                                                                                require idx < poolInfo.length
                                                                                mem[0] = 4
                                                                                _38265 = mem[64]
                                                                                mem[64] = mem[64] + 128
                                                                                mem[_38265] = poolInfo[idx].field_0
                                                                                mem[_38265 + 32] = poolInfo[idx].field_256
                                                                                mem[_38265 + 64] = poolInfo[idx].field_512
                                                                                mem[_38265 + 96] = poolInfo[idx].field_768
                                                                            else:
                                                                                if 10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                                                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                                if ext_call.return_data[0] <= 0:
                                                                                    revert with 0, 'SafeMath: division by zero'
                                                                                require ext_call.return_data[0]
                                                                                if (10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                                poolInfo[idx].field_768 += 10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                                                                                poolInfo[idx].field_512 = block.timestamp
                                                                                require idx < poolInfo.length
                                                                                mem[0] = 4
                                                                                _38322 = mem[64]
                                                                                mem[64] = mem[64] + 128
                                                                                mem[_38322] = poolInfo[idx].field_0
                                                                                mem[_38322 + 32] = poolInfo[idx].field_256
                                                                                mem[_38322 + 64] = poolInfo[idx].field_512
                                                                                mem[_38322 + 96] = poolInfo[idx].field_768
                                                        mem[0] = msg.sender
                                                        mem[32] = sha3(idx, 6)
                                                        if not userInfo[idx][msg.sender].field_0:
                                                            if userInfo[idx][msg.sender].field_256 > 0:
                                                                revert with 0, 'SafeMath: subtraction overflow'
                                                            if -userInfo[idx][msg.sender].field_256 < 0:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                        else:
                                                            if poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / userInfo[idx][msg.sender].field_0 != poolInfo[idx].field_768:
                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                            if userInfo[idx][msg.sender].field_256 > poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12:
                                                                revert with 0, 'SafeMath: subtraction overflow'
                                                            if (poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12) - userInfo[idx][msg.sender].field_256 < 0:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                        if not userInfo[idx][msg.sender].field_0:
                                                            userInfo[idx][msg.sender].field_256 = 0
                                                        else:
                                                            if poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / userInfo[idx][msg.sender].field_0 != poolInfo[idx].field_768:
                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                            userInfo[idx][msg.sender].field_256 = poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12
                                        else:
                                            if (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond) != poolInfo[idx].field_256:
                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            if totalAllocPoint <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalAllocPoint
                                            if not (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint:
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if not userInfo[idx][address(msg.sender)].field_0:
                                                    if userInfo[idx][address(msg.sender)].field_256 > 0:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if -userInfo[idx][address(msg.sender)].field_256 > 0:
                                                        require idx < poolInfo.length
                                                        if block.timestamp <= poolInfo[idx].field_512:
                                                            require idx < poolInfo.length
                                                            mem[0] = 4
                                                            _35932 = mem[64]
                                                            mem[64] = mem[64] + 128
                                                            mem[_35932] = poolInfo[idx].field_0
                                                            mem[_35932 + 32] = poolInfo[idx].field_256
                                                            mem[_35932 + 64] = poolInfo[idx].field_512
                                                            mem[_35932 + 96] = poolInfo[idx].field_768
                                                        else:
                                                            mem[mem[64] + 4] = this.address
                                                            require ext_code.size(poolInfo[idx].field_0)
                                                            staticcall poolInfo[idx].field_0.0x70a08231 with:
                                                                    gas gas_remaining wei
                                                                   args this.address
                                                            mem[mem[64]] = ext_call.return_data[0]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            require return_data.size >= 32
                                                            if not ext_call.return_data[0]:
                                                                poolInfo[idx].field_512 = block.timestamp
                                                                require idx < poolInfo.length
                                                                mem[0] = 4
                                                                _36240 = mem[64]
                                                                mem[64] = mem[64] + 128
                                                                mem[_36240] = poolInfo[idx].field_0
                                                                mem[_36240 + 32] = poolInfo[idx].field_256
                                                                mem[_36240 + 64] = poolInfo[idx].field_512
                                                                mem[_36240 + 96] = poolInfo[idx].field_768
                                                            else:
                                                                if not totalAllocPoint:
                                                                    poolInfo[idx].field_512 = block.timestamp
                                                                    require idx < poolInfo.length
                                                                    mem[0] = 4
                                                                    _36322 = mem[64]
                                                                    mem[64] = mem[64] + 128
                                                                    mem[_36322] = poolInfo[idx].field_0
                                                                    mem[_36322 + 32] = poolInfo[idx].field_256
                                                                    mem[_36322 + 64] = poolInfo[idx].field_512
                                                                    mem[_36322 + 96] = poolInfo[idx].field_768
                                                                else:
                                                                    if poolInfo[idx].field_512 > block.timestamp:
                                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                                    if not block.timestamp - poolInfo[idx].field_512:
                                                                        if totalAllocPoint <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        require totalAllocPoint
                                                                        if not 0 / totalAllocPoint:
                                                                            if ext_call.return_data[0] <= 0:
                                                                                revert with 0, 'SafeMath: division by zero'
                                                                            require ext_call.return_data[0]
                                                                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                                revert with 0, 'SafeMath: addition overflow'
                                                                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                                            poolInfo[idx].field_512 = block.timestamp
                                                                            require idx < poolInfo.length
                                                                            mem[0] = 4
                                                                            _37966 = mem[64]
                                                                            mem[64] = mem[64] + 128
                                                                            mem[_37966] = poolInfo[idx].field_0
                                                                            mem[_37966 + 32] = poolInfo[idx].field_256
                                                                            mem[_37966 + 64] = poolInfo[idx].field_512
                                                                            mem[_37966 + 96] = poolInfo[idx].field_768
                                                                        else:
                                                                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                            if ext_call.return_data[0] <= 0:
                                                                                revert with 0, 'SafeMath: division by zero'
                                                                            require ext_call.return_data[0]
                                                                            if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                                revert with 0, 'SafeMath: addition overflow'
                                                                            poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                                            poolInfo[idx].field_512 = block.timestamp
                                                                            require idx < poolInfo.length
                                                                            mem[0] = 4
                                                                            _38059 = mem[64]
                                                                            mem[64] = mem[64] + 128
                                                                            mem[_38059] = poolInfo[idx].field_0
                                                                            mem[_38059 + 32] = poolInfo[idx].field_256
                                                                            mem[_38059 + 64] = poolInfo[idx].field_512
                                                                            mem[_38059 + 96] = poolInfo[idx].field_768
                                                                    else:
                                                                        if (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond) / block.timestamp - poolInfo[idx].field_512 != rewardsPerSecond:
                                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                        if not (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond):
                                                                            if totalAllocPoint <= 0:
                                                                                revert with 0, 'SafeMath: division by zero'
                                                                            require totalAllocPoint
                                                                            if not 0 / totalAllocPoint:
                                                                                if ext_call.return_data[0] <= 0:
                                                                                    revert with 0, 'SafeMath: division by zero'
                                                                                require ext_call.return_data[0]
                                                                                if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                                poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                                                poolInfo[idx].field_512 = block.timestamp
                                                                                require idx < poolInfo.length
                                                                                mem[0] = 4
                                                                                _38054 = mem[64]
                                                                                mem[64] = mem[64] + 128
                                                                                mem[_38054] = poolInfo[idx].field_0
                                                                                mem[_38054 + 32] = poolInfo[idx].field_256
                                                                                mem[_38054 + 64] = poolInfo[idx].field_512
                                                                                mem[_38054 + 96] = poolInfo[idx].field_768
                                                                            else:
                                                                                if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                                if ext_call.return_data[0] <= 0:
                                                                                    revert with 0, 'SafeMath: division by zero'
                                                                                require ext_call.return_data[0]
                                                                                if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                                poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                                                poolInfo[idx].field_512 = block.timestamp
                                                                                require idx < poolInfo.length
                                                                                mem[0] = 4
                                                                                _38168 = mem[64]
                                                                                mem[64] = mem[64] + 128
                                                                                mem[_38168] = poolInfo[idx].field_0
                                                                                mem[_38168 + 32] = poolInfo[idx].field_256
                                                                                mem[_38168 + 64] = poolInfo[idx].field_512
                                                                                mem[_38168 + 96] = poolInfo[idx].field_768
                                                                        else:
                                                                            if (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond) != poolInfo[idx].field_256:
                                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                            if totalAllocPoint <= 0:
                                                                                revert with 0, 'SafeMath: division by zero'
                                                                            require totalAllocPoint
                                                                            if not (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint:
                                                                                if ext_call.return_data[0] <= 0:
                                                                                    revert with 0, 'SafeMath: division by zero'
                                                                                require ext_call.return_data[0]
                                                                                if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                                poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                                                poolInfo[idx].field_512 = block.timestamp
                                                                                require idx < poolInfo.length
                                                                                mem[0] = 4
                                                                                _38163 = mem[64]
                                                                                mem[64] = mem[64] + 128
                                                                                mem[_38163] = poolInfo[idx].field_0
                                                                                mem[_38163 + 32] = poolInfo[idx].field_256
                                                                                mem[_38163 + 64] = poolInfo[idx].field_512
                                                                                mem[_38163 + 96] = poolInfo[idx].field_768
                                                                            else:
                                                                                if 10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                                                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                                if ext_call.return_data[0] <= 0:
                                                                                    revert with 0, 'SafeMath: division by zero'
                                                                                require ext_call.return_data[0]
                                                                                if (10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                                poolInfo[idx].field_768 += 10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                                                                                poolInfo[idx].field_512 = block.timestamp
                                                                                require idx < poolInfo.length
                                                                                mem[0] = 4
                                                                                _38260 = mem[64]
                                                                                mem[64] = mem[64] + 128
                                                                                mem[_38260] = poolInfo[idx].field_0
                                                                                mem[_38260 + 32] = poolInfo[idx].field_256
                                                                                mem[_38260 + 64] = poolInfo[idx].field_512
                                                                                mem[_38260 + 96] = poolInfo[idx].field_768
                                                        mem[0] = msg.sender
                                                        mem[32] = sha3(idx, 6)
                                                        if not userInfo[idx][msg.sender].field_0:
                                                            if userInfo[idx][msg.sender].field_256 > 0:
                                                                revert with 0, 'SafeMath: subtraction overflow'
                                                            if -userInfo[idx][msg.sender].field_256 < 0:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                        else:
                                                            if poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / userInfo[idx][msg.sender].field_0 != poolInfo[idx].field_768:
                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                            if userInfo[idx][msg.sender].field_256 > poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12:
                                                                revert with 0, 'SafeMath: subtraction overflow'
                                                            if (poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12) - userInfo[idx][msg.sender].field_256 < 0:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                        if not userInfo[idx][msg.sender].field_0:
                                                            userInfo[idx][msg.sender].field_256 = 0
                                                        else:
                                                            if poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / userInfo[idx][msg.sender].field_0 != poolInfo[idx].field_768:
                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                            userInfo[idx][msg.sender].field_256 = poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12
                                                else:
                                                    if (0 / ext_call.return_data[0] * userInfo[idx][address(msg.sender)].field_0) + (poolInfo[idx].field_768 * userInfo[idx][address(msg.sender)].field_0) / userInfo[idx][address(msg.sender)].field_0 != (0 / ext_call.return_data[0]) + poolInfo[idx].field_768:
                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                    if userInfo[idx][address(msg.sender)].field_256 > (0 / ext_call.return_data[0] * userInfo[idx][address(msg.sender)].field_0) + (poolInfo[idx].field_768 * userInfo[idx][address(msg.sender)].field_0) / 10^12:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if ((0 / ext_call.return_data[0] * userInfo[idx][address(msg.sender)].field_0) + (poolInfo[idx].field_768 * userInfo[idx][address(msg.sender)].field_0) / 10^12) - userInfo[idx][address(msg.sender)].field_256 > 0:
                                                        require idx < poolInfo.length
                                                        if block.timestamp <= poolInfo[idx].field_512:
                                                            require idx < poolInfo.length
                                                            mem[0] = 4
                                                            _36000 = mem[64]
                                                            mem[64] = mem[64] + 128
                                                            mem[_36000] = poolInfo[idx].field_0
                                                            mem[_36000 + 32] = poolInfo[idx].field_256
                                                            mem[_36000 + 64] = poolInfo[idx].field_512
                                                            mem[_36000 + 96] = poolInfo[idx].field_768
                                                        else:
                                                            mem[mem[64] + 4] = this.address
                                                            require ext_code.size(poolInfo[idx].field_0)
                                                            staticcall poolInfo[idx].field_0.0x70a08231 with:
                                                                    gas gas_remaining wei
                                                                   args this.address
                                                            mem[mem[64]] = ext_call.return_data[0]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            require return_data.size >= 32
                                                            if not ext_call.return_data[0]:
                                                                poolInfo[idx].field_512 = block.timestamp
                                                                require idx < poolInfo.length
                                                                mem[0] = 4
                                                                _36315 = mem[64]
                                                                mem[64] = mem[64] + 128
                                                                mem[_36315] = poolInfo[idx].field_0
                                                                mem[_36315 + 32] = poolInfo[idx].field_256
                                                                mem[_36315 + 64] = poolInfo[idx].field_512
                                                                mem[_36315 + 96] = poolInfo[idx].field_768
                                                            else:
                                                                if not totalAllocPoint:
                                                                    poolInfo[idx].field_512 = block.timestamp
                                                                    require idx < poolInfo.length
                                                                    mem[0] = 4
                                                                    _36381 = mem[64]
                                                                    mem[64] = mem[64] + 128
                                                                    mem[_36381] = poolInfo[idx].field_0
                                                                    mem[_36381 + 32] = poolInfo[idx].field_256
                                                                    mem[_36381 + 64] = poolInfo[idx].field_512
                                                                    mem[_36381 + 96] = poolInfo[idx].field_768
                                                                else:
                                                                    if poolInfo[idx].field_512 > block.timestamp:
                                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                                    if not block.timestamp - poolInfo[idx].field_512:
                                                                        if totalAllocPoint <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        require totalAllocPoint
                                                                        if not 0 / totalAllocPoint:
                                                                            if ext_call.return_data[0] <= 0:
                                                                                revert with 0, 'SafeMath: division by zero'
                                                                            require ext_call.return_data[0]
                                                                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                                revert with 0, 'SafeMath: addition overflow'
                                                                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                                            poolInfo[idx].field_512 = block.timestamp
                                                                            require idx < poolInfo.length
                                                                            mem[0] = 4
                                                                            _38049 = mem[64]
                                                                            mem[64] = mem[64] + 128
                                                                            mem[_38049] = poolInfo[idx].field_0
                                                                            mem[_38049 + 32] = poolInfo[idx].field_256
                                                                            mem[_38049 + 64] = poolInfo[idx].field_512
                                                                            mem[_38049 + 96] = poolInfo[idx].field_768
                                                                        else:
                                                                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                            if ext_call.return_data[0] <= 0:
                                                                                revert with 0, 'SafeMath: division by zero'
                                                                            require ext_call.return_data[0]
                                                                            if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                                revert with 0, 'SafeMath: addition overflow'
                                                                            poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                                            poolInfo[idx].field_512 = block.timestamp
                                                                            require idx < poolInfo.length
                                                                            mem[0] = 4
                                                                            _38158 = mem[64]
                                                                            mem[64] = mem[64] + 128
                                                                            mem[_38158] = poolInfo[idx].field_0
                                                                            mem[_38158 + 32] = poolInfo[idx].field_256
                                                                            mem[_38158 + 64] = poolInfo[idx].field_512
                                                                            mem[_38158 + 96] = poolInfo[idx].field_768
                                                                    else:
                                                                        if (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond) / block.timestamp - poolInfo[idx].field_512 != rewardsPerSecond:
                                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                        if not (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond):
                                                                            if totalAllocPoint <= 0:
                                                                                revert with 0, 'SafeMath: division by zero'
                                                                            require totalAllocPoint
                                                                            if not 0 / totalAllocPoint:
                                                                                if ext_call.return_data[0] <= 0:
                                                                                    revert with 0, 'SafeMath: division by zero'
                                                                                require ext_call.return_data[0]
                                                                                if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                                poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                                                poolInfo[idx].field_512 = block.timestamp
                                                                                require idx < poolInfo.length
                                                                                mem[0] = 4
                                                                                _38153 = mem[64]
                                                                                mem[64] = mem[64] + 128
                                                                                mem[_38153] = poolInfo[idx].field_0
                                                                                mem[_38153 + 32] = poolInfo[idx].field_256
                                                                                mem[_38153 + 64] = poolInfo[idx].field_512
                                                                                mem[_38153 + 96] = poolInfo[idx].field_768
                                                                            else:
                                                                                if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                                if ext_call.return_data[0] <= 0:
                                                                                    revert with 0, 'SafeMath: division by zero'
                                                                                require ext_call.return_data[0]
                                                                                if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                                poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                                                poolInfo[idx].field_512 = block.timestamp
                                                                                require idx < poolInfo.length
                                                                                mem[0] = 4
                                                                                _38255 = mem[64]
                                                                                mem[64] = mem[64] + 128
                                                                                mem[_38255] = poolInfo[idx].field_0
                                                                                mem[_38255 + 32] = poolInfo[idx].field_256
                                                                                mem[_38255 + 64] = poolInfo[idx].field_512
                                                                                mem[_38255 + 96] = poolInfo[idx].field_768
                                                                        else:
                                                                            if (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond) != poolInfo[idx].field_256:
                                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                            if totalAllocPoint <= 0:
                                                                                revert with 0, 'SafeMath: division by zero'
                                                                            require totalAllocPoint
                                                                            if not (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint:
                                                                                if ext_call.return_data[0] <= 0:
                                                                                    revert with 0, 'SafeMath: division by zero'
                                                                                require ext_call.return_data[0]
                                                                                if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                                poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                                                poolInfo[idx].field_512 = block.timestamp
                                                                                require idx < poolInfo.length
                                                                                mem[0] = 4
                                                                                _38250 = mem[64]
                                                                                mem[64] = mem[64] + 128
                                                                                mem[_38250] = poolInfo[idx].field_0
                                                                                mem[_38250 + 32] = poolInfo[idx].field_256
                                                                                mem[_38250 + 64] = poolInfo[idx].field_512
                                                                                mem[_38250 + 96] = poolInfo[idx].field_768
                                                                            else:
                                                                                if 10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                                                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                                if ext_call.return_data[0] <= 0:
                                                                                    revert with 0, 'SafeMath: division by zero'
                                                                                require ext_call.return_data[0]
                                                                                if (10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                                poolInfo[idx].field_768 += 10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                                                                                poolInfo[idx].field_512 = block.timestamp
                                                                                require idx < poolInfo.length
                                                                                mem[0] = 4
                                                                                _38315 = mem[64]
                                                                                mem[64] = mem[64] + 128
                                                                                mem[_38315] = poolInfo[idx].field_0
                                                                                mem[_38315 + 32] = poolInfo[idx].field_256
                                                                                mem[_38315 + 64] = poolInfo[idx].field_512
                                                                                mem[_38315 + 96] = poolInfo[idx].field_768
                                                        mem[0] = msg.sender
                                                        mem[32] = sha3(idx, 6)
                                                        if not userInfo[idx][msg.sender].field_0:
                                                            if userInfo[idx][msg.sender].field_256 > 0:
                                                                revert with 0, 'SafeMath: subtraction overflow'
                                                            if -userInfo[idx][msg.sender].field_256 < 0:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                        else:
                                                            if poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / userInfo[idx][msg.sender].field_0 != poolInfo[idx].field_768:
                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                            if userInfo[idx][msg.sender].field_256 > poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12:
                                                                revert with 0, 'SafeMath: subtraction overflow'
                                                            if (poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12) - userInfo[idx][msg.sender].field_256 < 0:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                        if not userInfo[idx][msg.sender].field_0:
                                                            userInfo[idx][msg.sender].field_256 = 0
                                                        else:
                                                            if poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / userInfo[idx][msg.sender].field_0 != poolInfo[idx].field_768:
                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                            userInfo[idx][msg.sender].field_256 = poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12
                                            else:
                                                if 10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                if ext_call.return_data[0] <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require ext_call.return_data[0]
                                                if (10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if not userInfo[idx][address(msg.sender)].field_0:
                                                    if userInfo[idx][address(msg.sender)].field_256 > 0:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if -userInfo[idx][address(msg.sender)].field_256 > 0:
                                                        require idx < poolInfo.length
                                                        if block.timestamp <= poolInfo[idx].field_512:
                                                            require idx < poolInfo.length
                                                            mem[0] = 4
                                                            _35994 = mem[64]
                                                            mem[64] = mem[64] + 128
                                                            mem[_35994] = poolInfo[idx].field_0
                                                            mem[_35994 + 32] = poolInfo[idx].field_256
                                                            mem[_35994 + 64] = poolInfo[idx].field_512
                                                            mem[_35994 + 96] = poolInfo[idx].field_768
                                                        else:
                                                            mem[mem[64] + 4] = this.address
                                                            require ext_code.size(poolInfo[idx].field_0)
                                                            staticcall poolInfo[idx].field_0.0x70a08231 with:
                                                                    gas gas_remaining wei
                                                                   args this.address
                                                            mem[mem[64]] = ext_call.return_data[0]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            require return_data.size >= 32
                                                            if not ext_call.return_data[0]:
                                                                poolInfo[idx].field_512 = block.timestamp
                                                                require idx < poolInfo.length
                                                                mem[0] = 4
                                                                _36308 = mem[64]
                                                                mem[64] = mem[64] + 128
                                                                mem[_36308] = poolInfo[idx].field_0
                                                                mem[_36308 + 32] = poolInfo[idx].field_256
                                                                mem[_36308 + 64] = poolInfo[idx].field_512
                                                                mem[_36308 + 96] = poolInfo[idx].field_768
                                                            else:
                                                                if not totalAllocPoint:
                                                                    poolInfo[idx].field_512 = block.timestamp
                                                                    require idx < poolInfo.length
                                                                    mem[0] = 4
                                                                    _36376 = mem[64]
                                                                    mem[64] = mem[64] + 128
                                                                    mem[_36376] = poolInfo[idx].field_0
                                                                    mem[_36376 + 32] = poolInfo[idx].field_256
                                                                    mem[_36376 + 64] = poolInfo[idx].field_512
                                                                    mem[_36376 + 96] = poolInfo[idx].field_768
                                                                else:
                                                                    if poolInfo[idx].field_512 > block.timestamp:
                                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                                    if not block.timestamp - poolInfo[idx].field_512:
                                                                        if totalAllocPoint <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        require totalAllocPoint
                                                                        if not 0 / totalAllocPoint:
                                                                            if ext_call.return_data[0] <= 0:
                                                                                revert with 0, 'SafeMath: division by zero'
                                                                            require ext_call.return_data[0]
                                                                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                                revert with 0, 'SafeMath: addition overflow'
                                                                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                                            poolInfo[idx].field_512 = block.timestamp
                                                                            require idx < poolInfo.length
                                                                            mem[0] = 4
                                                                            _38042 = mem[64]
                                                                            mem[64] = mem[64] + 128
                                                                            mem[_38042] = poolInfo[idx].field_0
                                                                            mem[_38042 + 32] = poolInfo[idx].field_256
                                                                            mem[_38042 + 64] = poolInfo[idx].field_512
                                                                            mem[_38042 + 96] = poolInfo[idx].field_768
                                                                        else:
                                                                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                            if ext_call.return_data[0] <= 0:
                                                                                revert with 0, 'SafeMath: division by zero'
                                                                            require ext_call.return_data[0]
                                                                            if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                                revert with 0, 'SafeMath: addition overflow'
                                                                            poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                                            poolInfo[idx].field_512 = block.timestamp
                                                                            require idx < poolInfo.length
                                                                            mem[0] = 4
                                                                            _38148 = mem[64]
                                                                            mem[64] = mem[64] + 128
                                                                            mem[_38148] = poolInfo[idx].field_0
                                                                            mem[_38148 + 32] = poolInfo[idx].field_256
                                                                            mem[_38148 + 64] = poolInfo[idx].field_512
                                                                            mem[_38148 + 96] = poolInfo[idx].field_768
                                                                    else:
                                                                        if (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond) / block.timestamp - poolInfo[idx].field_512 != rewardsPerSecond:
                                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                        if not (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond):
                                                                            if totalAllocPoint <= 0:
                                                                                revert with 0, 'SafeMath: division by zero'
                                                                            require totalAllocPoint
                                                                            if not 0 / totalAllocPoint:
                                                                                if ext_call.return_data[0] <= 0:
                                                                                    revert with 0, 'SafeMath: division by zero'
                                                                                require ext_call.return_data[0]
                                                                                if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                                poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                                                poolInfo[idx].field_512 = block.timestamp
                                                                                require idx < poolInfo.length
                                                                                mem[0] = 4
                                                                                _38143 = mem[64]
                                                                                mem[64] = mem[64] + 128
                                                                                mem[_38143] = poolInfo[idx].field_0
                                                                                mem[_38143 + 32] = poolInfo[idx].field_256
                                                                                mem[_38143 + 64] = poolInfo[idx].field_512
                                                                                mem[_38143 + 96] = poolInfo[idx].field_768
                                                                            else:
                                                                                if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                                if ext_call.return_data[0] <= 0:
                                                                                    revert with 0, 'SafeMath: division by zero'
                                                                                require ext_call.return_data[0]
                                                                                if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                                poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                                                poolInfo[idx].field_512 = block.timestamp
                                                                                require idx < poolInfo.length
                                                                                mem[0] = 4
                                                                                _38245 = mem[64]
                                                                                mem[64] = mem[64] + 128
                                                                                mem[_38245] = poolInfo[idx].field_0
                                                                                mem[_38245 + 32] = poolInfo[idx].field_256
                                                                                mem[_38245 + 64] = poolInfo[idx].field_512
                                                                                mem[_38245 + 96] = poolInfo[idx].field_768
                                                                        else:
                                                                            if (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond) != poolInfo[idx].field_256:
                                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                            if totalAllocPoint <= 0:
                                                                                revert with 0, 'SafeMath: division by zero'
                                                                            require totalAllocPoint
                                                                            if not (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint:
                                                                                if ext_call.return_data[0] <= 0:
                                                                                    revert with 0, 'SafeMath: division by zero'
                                                                                require ext_call.return_data[0]
                                                                                if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                                poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                                                poolInfo[idx].field_512 = block.timestamp
                                                                                require idx < poolInfo.length
                                                                                mem[0] = 4
                                                                                _38240 = mem[64]
                                                                                mem[64] = mem[64] + 128
                                                                                mem[_38240] = poolInfo[idx].field_0
                                                                                mem[_38240 + 32] = poolInfo[idx].field_256
                                                                                mem[_38240 + 64] = poolInfo[idx].field_512
                                                                                mem[_38240 + 96] = poolInfo[idx].field_768
                                                                            else:
                                                                                if 10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                                                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                                if ext_call.return_data[0] <= 0:
                                                                                    revert with 0, 'SafeMath: division by zero'
                                                                                require ext_call.return_data[0]
                                                                                if (10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                                poolInfo[idx].field_768 += 10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                                                                                poolInfo[idx].field_512 = block.timestamp
                                                                                require idx < poolInfo.length
                                                                                mem[0] = 4
                                                                                _38310 = mem[64]
                                                                                mem[64] = mem[64] + 128
                                                                                mem[_38310] = poolInfo[idx].field_0
                                                                                mem[_38310 + 32] = poolInfo[idx].field_256
                                                                                mem[_38310 + 64] = poolInfo[idx].field_512
                                                                                mem[_38310 + 96] = poolInfo[idx].field_768
                                                        mem[0] = msg.sender
                                                        mem[32] = sha3(idx, 6)
                                                        if not userInfo[idx][msg.sender].field_0:
                                                            if userInfo[idx][msg.sender].field_256 > 0:
                                                                revert with 0, 'SafeMath: subtraction overflow'
                                                            if -userInfo[idx][msg.sender].field_256 < 0:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                        else:
                                                            if poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / userInfo[idx][msg.sender].field_0 != poolInfo[idx].field_768:
                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                            if userInfo[idx][msg.sender].field_256 > poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12:
                                                                revert with 0, 'SafeMath: subtraction overflow'
                                                            if (poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12) - userInfo[idx][msg.sender].field_256 < 0:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                        if not userInfo[idx][msg.sender].field_0:
                                                            userInfo[idx][msg.sender].field_256 = 0
                                                        else:
                                                            if poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / userInfo[idx][msg.sender].field_0 != poolInfo[idx].field_768:
                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                            userInfo[idx][msg.sender].field_256 = poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12
                                                else:
                                                    if (10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0] * userInfo[idx][address(msg.sender)].field_0) + (poolInfo[idx].field_768 * userInfo[idx][address(msg.sender)].field_0) / userInfo[idx][address(msg.sender)].field_0 != (10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768:
                                                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                    if userInfo[idx][address(msg.sender)].field_256 > (10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0] * userInfo[idx][address(msg.sender)].field_0) + (poolInfo[idx].field_768 * userInfo[idx][address(msg.sender)].field_0) / 10^12:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if ((10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0] * userInfo[idx][address(msg.sender)].field_0) + (poolInfo[idx].field_768 * userInfo[idx][address(msg.sender)].field_0) / 10^12) - userInfo[idx][address(msg.sender)].field_256 > 0:
                                                        require idx < poolInfo.length
                                                        if block.timestamp <= poolInfo[idx].field_512:
                                                            require idx < poolInfo.length
                                                            mem[0] = 4
                                                            _36060 = mem[64]
                                                            mem[64] = mem[64] + 128
                                                            mem[_36060] = poolInfo[idx].field_0
                                                            mem[_36060 + 32] = poolInfo[idx].field_256
                                                            mem[_36060 + 64] = poolInfo[idx].field_512
                                                            mem[_36060 + 96] = poolInfo[idx].field_768
                                                        else:
                                                            mem[mem[64] + 4] = this.address
                                                            require ext_code.size(poolInfo[idx].field_0)
                                                            staticcall poolInfo[idx].field_0.0x70a08231 with:
                                                                    gas gas_remaining wei
                                                                   args this.address
                                                            mem[mem[64]] = ext_call.return_data[0]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            require return_data.size >= 32
                                                            if not ext_call.return_data[0]:
                                                                poolInfo[idx].field_512 = block.timestamp
                                                                require idx < poolInfo.length
                                                                mem[0] = 4
                                                                _36369 = mem[64]
                                                                mem[64] = mem[64] + 128
                                                                mem[_36369] = poolInfo[idx].field_0
                                                                mem[_36369 + 32] = poolInfo[idx].field_256
                                                                mem[_36369 + 64] = poolInfo[idx].field_512
                                                                mem[_36369 + 96] = poolInfo[idx].field_768
                                                            else:
                                                                if not totalAllocPoint:
                                                                    poolInfo[idx].field_512 = block.timestamp
                                                                    require idx < poolInfo.length
                                                                    mem[0] = 4
                                                                    _36409 = mem[64]
                                                                    mem[64] = mem[64] + 128
                                                                    mem[_36409] = poolInfo[idx].field_0
                                                                    mem[_36409 + 32] = poolInfo[idx].field_256
                                                                    mem[_36409 + 64] = poolInfo[idx].field_512
                                                                    mem[_36409 + 96] = poolInfo[idx].field_768
                                                                else:
                                                                    if poolInfo[idx].field_512 > block.timestamp:
                                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                                    if not block.timestamp - poolInfo[idx].field_512:
                                                                        if totalAllocPoint <= 0:
                                                                            revert with 0, 'SafeMath: division by zero'
                                                                        require totalAllocPoint
                                                                        if not 0 / totalAllocPoint:
                                                                            if ext_call.return_data[0] <= 0:
                                                                                revert with 0, 'SafeMath: division by zero'
                                                                            require ext_call.return_data[0]
                                                                            if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                                revert with 0, 'SafeMath: addition overflow'
                                                                            poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                                            poolInfo[idx].field_512 = block.timestamp
                                                                            require idx < poolInfo.length
                                                                            mem[0] = 4
                                                                            _38138 = mem[64]
                                                                            mem[64] = mem[64] + 128
                                                                            mem[_38138] = poolInfo[idx].field_0
                                                                            mem[_38138 + 32] = poolInfo[idx].field_256
                                                                            mem[_38138 + 64] = poolInfo[idx].field_512
                                                                            mem[_38138 + 96] = poolInfo[idx].field_768
                                                                        else:
                                                                            if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                            if ext_call.return_data[0] <= 0:
                                                                                revert with 0, 'SafeMath: division by zero'
                                                                            require ext_call.return_data[0]
                                                                            if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                                revert with 0, 'SafeMath: addition overflow'
                                                                            poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                                            poolInfo[idx].field_512 = block.timestamp
                                                                            require idx < poolInfo.length
                                                                            mem[0] = 4
                                                                            _38235 = mem[64]
                                                                            mem[64] = mem[64] + 128
                                                                            mem[_38235] = poolInfo[idx].field_0
                                                                            mem[_38235 + 32] = poolInfo[idx].field_256
                                                                            mem[_38235 + 64] = poolInfo[idx].field_512
                                                                            mem[_38235 + 96] = poolInfo[idx].field_768
                                                                    else:
                                                                        if (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond) / block.timestamp - poolInfo[idx].field_512 != rewardsPerSecond:
                                                                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                        if not (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond):
                                                                            if totalAllocPoint <= 0:
                                                                                revert with 0, 'SafeMath: division by zero'
                                                                            require totalAllocPoint
                                                                            if not 0 / totalAllocPoint:
                                                                                if ext_call.return_data[0] <= 0:
                                                                                    revert with 0, 'SafeMath: division by zero'
                                                                                require ext_call.return_data[0]
                                                                                if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                                poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                                                poolInfo[idx].field_512 = block.timestamp
                                                                                require idx < poolInfo.length
                                                                                mem[0] = 4
                                                                                _38230 = mem[64]
                                                                                mem[64] = mem[64] + 128
                                                                                mem[_38230] = poolInfo[idx].field_0
                                                                                mem[_38230 + 32] = poolInfo[idx].field_256
                                                                                mem[_38230 + 64] = poolInfo[idx].field_512
                                                                                mem[_38230 + 96] = poolInfo[idx].field_768
                                                                            else:
                                                                                if 10^12 * 0 / totalAllocPoint / 0 / totalAllocPoint != 10^12:
                                                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                                if ext_call.return_data[0] <= 0:
                                                                                    revert with 0, 'SafeMath: division by zero'
                                                                                require ext_call.return_data[0]
                                                                                if (10^12 * 0 / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                                poolInfo[idx].field_768 += 10^12 * 0 / totalAllocPoint / ext_call.return_data[0]
                                                                                poolInfo[idx].field_512 = block.timestamp
                                                                                require idx < poolInfo.length
                                                                                mem[0] = 4
                                                                                _38305 = mem[64]
                                                                                mem[64] = mem[64] + 128
                                                                                mem[_38305] = poolInfo[idx].field_0
                                                                                mem[_38305 + 32] = poolInfo[idx].field_256
                                                                                mem[_38305 + 64] = poolInfo[idx].field_512
                                                                                mem[_38305 + 96] = poolInfo[idx].field_768
                                                                        else:
                                                                            if (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / (block.timestamp * rewardsPerSecond) - (poolInfo[idx].field_512 * rewardsPerSecond) != poolInfo[idx].field_256:
                                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                            if totalAllocPoint <= 0:
                                                                                revert with 0, 'SafeMath: division by zero'
                                                                            require totalAllocPoint
                                                                            if not (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint:
                                                                                if ext_call.return_data[0] <= 0:
                                                                                    revert with 0, 'SafeMath: division by zero'
                                                                                require ext_call.return_data[0]
                                                                                if (0 / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                                poolInfo[idx].field_768 += 0 / ext_call.return_data[0]
                                                                                poolInfo[idx].field_512 = block.timestamp
                                                                                require idx < poolInfo.length
                                                                                mem[0] = 4
                                                                                _38300 = mem[64]
                                                                                mem[64] = mem[64] + 128
                                                                                mem[_38300] = poolInfo[idx].field_0
                                                                                mem[_38300 + 32] = poolInfo[idx].field_256
                                                                                mem[_38300 + 64] = poolInfo[idx].field_512
                                                                                mem[_38300 + 96] = poolInfo[idx].field_768
                                                                            else:
                                                                                if 10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint != 10^12:
                                                                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                                                if ext_call.return_data[0] <= 0:
                                                                                    revert with 0, 'SafeMath: division by zero'
                                                                                require ext_call.return_data[0]
                                                                                if (10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]) + poolInfo[idx].field_768 < poolInfo[idx].field_768:
                                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                                poolInfo[idx].field_768 += 10^12 * (block.timestamp * rewardsPerSecond * poolInfo[idx].field_256) - (poolInfo[idx].field_512 * rewardsPerSecond * poolInfo[idx].field_256) / totalAllocPoint / ext_call.return_data[0]
                                                                                poolInfo[idx].field_512 = block.timestamp
                                                                                require idx < poolInfo.length
                                                                                mem[0] = 4
                                                                                _38349 = mem[64]
                                                                                mem[64] = mem[64] + 128
                                                                                mem[_38349] = poolInfo[idx].field_0
                                                                                mem[_38349 + 32] = poolInfo[idx].field_256
                                                                                mem[_38349 + 64] = poolInfo[idx].field_512
                                                                                mem[_38349 + 96] = poolInfo[idx].field_768
                                                        mem[0] = msg.sender
                                                        mem[32] = sha3(idx, 6)
                                                        if not userInfo[idx][msg.sender].field_0:
                                                            if userInfo[idx][msg.sender].field_256 > 0:
                                                                revert with 0, 'SafeMath: subtraction overflow'
                                                            if -userInfo[idx][msg.sender].field_256 < 0:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                        else:
                                                            if poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / userInfo[idx][msg.sender].field_0 != poolInfo[idx].field_768:
                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                            if userInfo[idx][msg.sender].field_256 > poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12:
                                                                revert with 0, 'SafeMath: subtraction overflow'
                                                            if (poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12) - userInfo[idx][msg.sender].field_256 < 0:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                        if not userInfo[idx][msg.sender].field_0:
                                                            userInfo[idx][msg.sender].field_256 = 0
                                                        else:
                                                            if poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / userInfo[idx][msg.sender].field_0 != poolInfo[idx].field_768:
                                                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                            userInfo[idx][msg.sender].field_256 = poolInfo[idx].field_768 * userInfo[idx][msg.sender].field_0 / 10^12
                    idx = idx + 1
                    continue 
}



}
