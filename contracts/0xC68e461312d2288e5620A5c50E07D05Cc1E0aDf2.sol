contract main {




// =====================  Runtime code  =====================


#
#  - transferFrom(address arg1, address arg2, uint256 arg3)
#
const deadAddress = 57005

const maxFees = 13


address owner;
array of struct stor3;
array of struct stor4;
uint8 decimals;
uint256 totalSupply;
address marketingAddress;
address sub_e5148bd6Address;
mapping of uint256 balanceOf;
mapping of struct allowance;
mapping of uint8 stor11;
mapping of uint8 stor12;
uint256 totalFees;
uint256 stor14;
uint256 liquidityFee;
uint256 burnFee;
uint256 marketingFee;
uint256 maxBalance;
address uniswapV2RouterAddress;
address uniswapV2PairAddress;
uint256 liquifyThreshhold;
uint8 stor22;

function totalFees() {
    return totalFees
}

function uniswapV2Router() {
    return uniswapV2RouterAddress
}

function totalSupply() {
    return totalSupply
}

function isExcludedFromMaxBalance(address arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    return bool(stor12[address(arg1)])
}

function decimals() {
    return decimals
}

function uniswapV2Pair() {
    return uniswapV2PairAddress
}

function isExcludedFromFees(address arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    return bool(stor11[address(arg1)])
}

function liquifyThreshhold() {
    return liquifyThreshhold
}

function marketingFee() {
    return marketingFee
}

function balanceOf(address arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    return balanceOf[address(arg1)]
}

function maxBalance() {
    return maxBalance
}

function owner() {
    return owner
}

function liquidityFee() {
    return liquidityFee
}

function marketingAddress() {
    return marketingAddress
}

function allowance(address arg1, address arg2) {
    require calldata.size - 4 >= 64
    require arg1 == arg1
    require arg2 == arg2
    return allowance[address(arg1)][address(arg2)].field_0
}

function sub_e5148bd6(?) {
    return sub_e5148bd6Address
}

function burnFee() {
    return burnFee
}

function _fallback() payable {
    revert
}

function renounceOwnership() {
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    emit OwnershipTransferred(owner, 0);
    owner = 0
}

function includeInFees(address arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    stor11[address(arg1)] = 0
}

function excludeFromFees(address arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    stor11[address(arg1)] = 1
}

function setMarketingAddress(address arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    marketingAddress = arg1
}

function setLiquifyThreshhold(uint256 arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    liquifyThreshhold = arg1
}

function includeInMaxBalance(address arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    stor12[address(arg1)] = 0
}

function excludeFromMaxBalance(address arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    stor12[address(arg1)] = 1
}

function setMarketingWalletToken(address arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    sub_e5148bd6Address = arg1
}

function transferOwnership(address arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    if not arg1:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'Ownable: new owner is the zero address'
    emit OwnershipTransferred(owner, arg1);
    owner = arg1
}

function approve(address arg1, uint256 arg2) {
    require calldata.size - 4 >= 64
    require arg1 == arg1
    require arg2 == arg2
    if not msg.sender:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: approve from the zero address'
    if not arg1:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: approve to the zero address'
    allowance[address(msg.sender)][address(arg1)].field_0 = arg2
    emit Approval(arg2, msg.sender, arg1);
    return 1
}

function setMaxBalance(uint256 arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    if not totalSupply:
        require arg1 >= 0
    else:
        if totalSupply and 5 > -1 / totalSupply:
            revert with 'NH{q', 17
        if not totalSupply:
            revert with 'NH{q', 18
        if 5 * totalSupply / totalSupply != 5:
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeMath: multiplication overflow'
        require arg1 >= 5 * totalSupply / 1000
    maxBalance = arg1
}

function decreaseAllowance(address arg1, uint256 arg2) {
    require calldata.size - 4 >= 64
    require arg1 == arg1
    require arg2 == arg2
    if arg2 > allowance[address(msg.sender)][address(arg1)].field_0:
        revert with 0, 32, 37, 0x6545524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a6572, mem[165 len 27] >> 40, 0
    if allowance[address(msg.sender)][address(arg1)].field_0 < arg2:
        revert with 'NH{q', 17
    if not msg.sender:
        revert with 0, 'ERC20: approve from the zero address'
    if not arg1:
        revert with 0, 'ERC20: approve to the zero address'
    allowance[address(msg.sender)][address(arg1)].field_0 -= arg2
    emit Approval((allowance[address(msg.sender)][address(arg1)].field_0 - arg2), msg.sender, arg1);
    return 1
}

function increaseAllowance(address arg1, uint256 arg2) {
    require calldata.size - 4 >= 64
    require arg1 == arg1
    require arg2 == arg2
    if allowance[address(msg.sender)][address(arg1)].field_0 > -arg2 - 1:
        revert with 'NH{q', 17
    if allowance[address(msg.sender)][address(arg1)].field_0 + arg2 < allowance[address(msg.sender)][address(arg1)].field_0:
        revert with 0, 'SafeMath: addition overflow'
    if not msg.sender:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: approve from the zero address'
    if not arg1:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: approve to the zero address'
    allowance[address(msg.sender)][address(arg1)].field_0 += arg2
    emit Approval((allowance[address(msg.sender)][address(arg1)].field_0 + arg2), msg.sender, arg1);
    return 1
}

function setBurnFeePercent(uint256 arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    if liquidityFee > -arg1 - 1:
        revert with 'NH{q', 17
    if liquidityFee + arg1 < liquidityFee:
        revert with 0, 'SafeMath: addition overflow'
    if liquidityFee + arg1 > -marketingFee - 1:
        revert with 'NH{q', 17
    if marketingFee < 0:
        revert with 0, 'SafeMath: addition overflow'
    if liquidityFee + arg1 + marketingFee > 13:
        revert with 0, 'Fees are too high.'
    burnFee = arg1
    if liquidityFee > -marketingFee - 1:
        revert with 'NH{q', 17
    if liquidityFee + marketingFee < liquidityFee:
        revert with 0, 'SafeMath: addition overflow'
    if liquidityFee + marketingFee > -burnFee - 1:
        revert with 'NH{q', 17
    if burnFee < 0:
        revert with 0, 'SafeMath: addition overflow'
    totalFees = liquidityFee + marketingFee + burnFee
    emit SetBurnFee(burnFee);
}

function setLiquidityFeePercent(uint256 arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    if stor22:
        revert with 0, 'inSwapAndLiquify'
    if arg1 > -burnFee - 1:
        revert with 'NH{q', 17
    if arg1 + burnFee < arg1:
        revert with 0, 'SafeMath: addition overflow'
    if arg1 + burnFee > -marketingFee - 1:
        revert with 'NH{q', 17
    if marketingFee < 0:
        revert with 0, 'SafeMath: addition overflow'
    if arg1 + burnFee + marketingFee > 13:
        revert with 0, 'Fees are too high.'
    liquidityFee = arg1
    if liquidityFee > -marketingFee - 1:
        revert with 'NH{q', 17
    if liquidityFee + marketingFee < liquidityFee:
        revert with 0, 'SafeMath: addition overflow'
    if liquidityFee + marketingFee > -burnFee - 1:
        revert with 'NH{q', 17
    if burnFee < 0:
        revert with 0, 'SafeMath: addition overflow'
    totalFees = liquidityFee + marketingFee + burnFee
    if liquidityFee > -marketingFee - 1:
        revert with 'NH{q', 17
    if liquidityFee + marketingFee < liquidityFee:
        revert with 0, 'SafeMath: addition overflow'
    stor14 = liquidityFee + marketingFee
    emit SetLiquidityFee(liquidityFee);
}

function setMarketingFeePercent(uint256 arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    if stor22:
        revert with 0, 'inSwapAndLiquify'
    if liquidityFee > -burnFee - 1:
        revert with 'NH{q', 17
    if liquidityFee + burnFee < liquidityFee:
        revert with 0, 'SafeMath: addition overflow'
    if liquidityFee + burnFee > -arg1 - 1:
        revert with 'NH{q', 17
    if arg1 < 0:
        revert with 0, 'SafeMath: addition overflow'
    if liquidityFee + burnFee + arg1 > 13:
        revert with 0, 'Fees are too high.'
    marketingFee = arg1
    if liquidityFee > -marketingFee - 1:
        revert with 'NH{q', 17
    if liquidityFee + marketingFee < liquidityFee:
        revert with 0, 'SafeMath: addition overflow'
    if liquidityFee + marketingFee > -burnFee - 1:
        revert with 'NH{q', 17
    if burnFee < 0:
        revert with 0, 'SafeMath: addition overflow'
    totalFees = liquidityFee + marketingFee + burnFee
    if liquidityFee > -marketingFee - 1:
        revert with 'NH{q', 17
    if liquidityFee + marketingFee < liquidityFee:
        revert with 0, 'SafeMath: addition overflow'
    stor14 = liquidityFee + marketingFee
    emit SetMarketingFee(marketingFee);
}

function name() {
    if bool(stor3.length):
        if bool(stor3.length) == stor3.length.field_1 < 32:
            revert with 'NH{q', 34
        if bool(stor3.length):
            if bool(stor3.length) == stor3.length.field_1 < 32:
                revert with 'NH{q', 34
            if stor3.length.field_1:
                if 31 < stor3.length.field_1:
                    mem[128] = uint256(stor3.field_0)
                    idx = 128
                    s = 0
                    while stor3.length.field_1 + 96 > idx:
                        mem[idx + 32] = stor3[s].field_256
                        idx = idx + 32
                        s = s + 1
                        continue 
                    return Array(len=2 * Mask(256, -1, stor3.length.field_1), data=mem[128 len ceil32(stor3.length.field_1)])
                mem[128] = 256 * stor3.length.field_8
        else:
            if bool(stor3.length) == stor3.length.field_1 < 32:
                revert with 'NH{q', 34
            if stor3.length.field_1:
                if 31 < stor3.length.field_1:
                    mem[128] = uint256(stor3.field_0)
                    idx = 128
                    s = 0
                    while stor3.length.field_1 + 96 > idx:
                        mem[idx + 32] = stor3[s].field_256
                        idx = idx + 32
                        s = s + 1
                        continue 
                    return Array(len=2 * Mask(256, -1, stor3.length.field_1), data=mem[128 len ceil32(stor3.length.field_1)])
                mem[128] = 256 * stor3.length.field_8
        mem[ceil32(stor3.length.field_1) + 192 len ceil32(stor3.length.field_1)] = mem[128 len ceil32(stor3.length.field_1)]
        if ceil32(stor3.length.field_1) > stor3.length.field_1:
            mem[ceil32(stor3.length.field_1) + stor3.length.field_1 + 192] = 0
        return Array(len=2 * Mask(256, -1, stor3.length.field_1), data=mem[128 len ceil32(stor3.length.field_1)], mem[(2 * ceil32(stor3.length.field_1)) + 192 len 2 * ceil32(stor3.length.field_1)]), 
    if bool(stor3.length) == stor3.length.field_1 < 32:
        revert with 'NH{q', 34
    if bool(stor3.length):
        if bool(stor3.length) == stor3.length.field_1 < 32:
            revert with 'NH{q', 34
        if stor3.length.field_1:
            if 31 < stor3.length.field_1:
                mem[128] = uint256(stor3.field_0)
                idx = 128
                s = 0
                while stor3.length.field_1 + 96 > idx:
                    mem[idx + 32] = stor3[s].field_256
                    idx = idx + 32
                    s = s + 1
                    continue 
                return Array(len=stor3.length % 128, data=mem[128 len ceil32(stor3.length.field_1)])
            mem[128] = 256 * stor3.length.field_8
    else:
        if bool(stor3.length) == stor3.length.field_1 < 32:
            revert with 'NH{q', 34
        if stor3.length.field_1:
            if 31 < stor3.length.field_1:
                mem[128] = uint256(stor3.field_0)
                idx = 128
                s = 0
                while stor3.length.field_1 + 96 > idx:
                    mem[idx + 32] = stor3[s].field_256
                    idx = idx + 32
                    s = s + 1
                    continue 
                return Array(len=stor3.length % 128, data=mem[128 len ceil32(stor3.length.field_1)])
            mem[128] = 256 * stor3.length.field_8
    mem[ceil32(stor3.length.field_1) + 192 len ceil32(stor3.length.field_1)] = mem[128 len ceil32(stor3.length.field_1)]
    if ceil32(stor3.length.field_1) > stor3.length.field_1:
        mem[ceil32(stor3.length.field_1) + stor3.length.field_1 + 192] = 0
    return Array(len=stor3.length % 128, data=mem[128 len ceil32(stor3.length.field_1)], mem[(2 * ceil32(stor3.length.field_1)) + 192 len 2 * ceil32(stor3.length.field_1)]), 
}

function symbol() {
    if bool(stor4.length):
        if bool(stor4.length) == stor4.length.field_1 < 32:
            revert with 'NH{q', 34
        if bool(stor4.length):
            if bool(stor4.length) == stor4.length.field_1 < 32:
                revert with 'NH{q', 34
            if stor4.length.field_1:
                if 31 < stor4.length.field_1:
                    mem[128] = uint256(stor4.field_0)
                    idx = 128
                    s = 0
                    while stor4.length.field_1 + 96 > idx:
                        mem[idx + 32] = stor4[s].field_256
                        idx = idx + 32
                        s = s + 1
                        continue 
                    return Array(len=2 * Mask(256, -1, stor4.length.field_1), data=mem[128 len ceil32(stor4.length.field_1)])
                mem[128] = 256 * stor4.length.field_8
        else:
            if bool(stor4.length) == stor4.length.field_1 < 32:
                revert with 'NH{q', 34
            if stor4.length.field_1:
                if 31 < stor4.length.field_1:
                    mem[128] = uint256(stor4.field_0)
                    idx = 128
                    s = 0
                    while stor4.length.field_1 + 96 > idx:
                        mem[idx + 32] = stor4[s].field_256
                        idx = idx + 32
                        s = s + 1
                        continue 
                    return Array(len=2 * Mask(256, -1, stor4.length.field_1), data=mem[128 len ceil32(stor4.length.field_1)])
                mem[128] = 256 * stor4.length.field_8
        mem[ceil32(stor4.length.field_1) + 192 len ceil32(stor4.length.field_1)] = mem[128 len ceil32(stor4.length.field_1)]
        if ceil32(stor4.length.field_1) > stor4.length.field_1:
            mem[ceil32(stor4.length.field_1) + stor4.length.field_1 + 192] = 0
        return Array(len=2 * Mask(256, -1, stor4.length.field_1), data=mem[128 len ceil32(stor4.length.field_1)], mem[(2 * ceil32(stor4.length.field_1)) + 192 len 2 * ceil32(stor4.length.field_1)]), 
    if bool(stor4.length) == stor4.length.field_1 < 32:
        revert with 'NH{q', 34
    if bool(stor4.length):
        if bool(stor4.length) == stor4.length.field_1 < 32:
            revert with 'NH{q', 34
        if stor4.length.field_1:
            if 31 < stor4.length.field_1:
                mem[128] = uint256(stor4.field_0)
                idx = 128
                s = 0
                while stor4.length.field_1 + 96 > idx:
                    mem[idx + 32] = stor4[s].field_256
                    idx = idx + 32
                    s = s + 1
                    continue 
                return Array(len=stor4.length % 128, data=mem[128 len ceil32(stor4.length.field_1)])
            mem[128] = 256 * stor4.length.field_8
    else:
        if bool(stor4.length) == stor4.length.field_1 < 32:
            revert with 'NH{q', 34
        if stor4.length.field_1:
            if 31 < stor4.length.field_1:
                mem[128] = uint256(stor4.field_0)
                idx = 128
                s = 0
                while stor4.length.field_1 + 96 > idx:
                    mem[idx + 32] = stor4[s].field_256
                    idx = idx + 32
                    s = s + 1
                    continue 
                return Array(len=stor4.length % 128, data=mem[128 len ceil32(stor4.length.field_1)])
            mem[128] = 256 * stor4.length.field_8
    mem[ceil32(stor4.length.field_1) + 192 len ceil32(stor4.length.field_1)] = mem[128 len ceil32(stor4.length.field_1)]
    if ceil32(stor4.length.field_1) > stor4.length.field_1:
        mem[ceil32(stor4.length.field_1) + stor4.length.field_1 + 192] = 0
    return Array(len=stor4.length % 128, data=mem[128 len ceil32(stor4.length.field_1)], mem[(2 * ceil32(stor4.length.field_1)) + 192 len 2 * ceil32(stor4.length.field_1)]), 
}

function transfer(address arg1, uint256 arg2) {
    require calldata.size - 4 >= 64
    require arg1 == arg1
    require arg2 == arg2
    if not msg.sender:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
    if not arg1:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
    if arg2 <= 0:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'Transfer amount must be greater than zero'
    if msg.sender == owner:
        if arg1 != uniswapV2PairAddress:
            if stor11[address(msg.sender)]:
                if not msg.sender:
                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                if not arg1:
                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                if arg2 > balanceOf[address(msg.sender)]:
                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                if balanceOf[address(msg.sender)] < arg2:
                    revert with 'NH{q', 17
                balanceOf[address(msg.sender)] -= arg2
                if balanceOf[address(arg1)] > -arg2 - 1:
                    revert with 'NH{q', 17
                if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                    revert with 0, 'SafeMath: addition overflow'
                balanceOf[address(arg1)] += arg2
                emit Transfer(arg2, msg.sender, arg1);
            else:
                if stor11[address(arg1)]:
                    if not msg.sender:
                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                    if not arg1:
                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                    if arg2 > balanceOf[address(msg.sender)]:
                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                    if balanceOf[address(msg.sender)] < arg2:
                        revert with 'NH{q', 17
                    balanceOf[address(msg.sender)] -= arg2
                    if balanceOf[address(arg1)] > -arg2 - 1:
                        revert with 'NH{q', 17
                    if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                        revert with 0, 'SafeMath: addition overflow'
                    balanceOf[address(arg1)] += arg2
                    emit Transfer(arg2, msg.sender, arg1);
                else:
                    if totalFees <= 0:
                        if not msg.sender:
                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                        if not arg1:
                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                        if arg2 > balanceOf[address(msg.sender)]:
                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                        if balanceOf[address(msg.sender)] < arg2:
                            revert with 'NH{q', 17
                        balanceOf[address(msg.sender)] -= arg2
                        if balanceOf[address(arg1)] > -arg2 - 1:
                            revert with 'NH{q', 17
                        if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                            revert with 0, 'SafeMath: addition overflow'
                        balanceOf[address(arg1)] += arg2
                        emit Transfer(arg2, msg.sender, arg1);
                    else:
                        if not arg2:
                            if not arg2:
                                if 0 > arg2:
                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                if arg2 < 0:
                                    revert with 'NH{q', 17
                                if not msg.sender:
                                    revert with 0, 'ERC20: transfer from the zero address'
                                if not this.address:
                                    revert with 0, 'ERC20: transfer to the zero address'
                                if 0 > balanceOf[address(msg.sender)]:
                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                if balanceOf[address(msg.sender)] < 0:
                                    revert with 'NH{q', 17
                                if balanceOf[address(this.address)] > -1:
                                    revert with 'NH{q', 17
                                if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                emit Transfer(0, msg.sender, this.address);
                                if not msg.sender:
                                    revert with 0, 'ERC20: transfer from the zero address'
                                if 0 > balanceOf[address(msg.sender)]:
                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                if balanceOf[address(msg.sender)] < 0:
                                    revert with 'NH{q', 17
                                if balanceOf[57005] > -1:
                                    revert with 'NH{q', 17
                                if balanceOf[57005] < balanceOf[57005]:
                                    revert with 0, 'SafeMath: addition overflow'
                                emit Transfer(0, msg.sender, 57005);
                                emit TokenBurn(0, msg.sender);
                                if not msg.sender:
                                    revert with 0, 'ERC20: transfer from the zero address'
                                if not arg1:
                                    revert with 0, 'ERC20: transfer to the zero address'
                                if arg2 > balanceOf[address(msg.sender)]:
                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                if balanceOf[address(msg.sender)] < arg2:
                                    revert with 'NH{q', 17
                                balanceOf[address(msg.sender)] -= arg2
                                if balanceOf[address(arg1)] > -arg2 - 1:
                                    revert with 'NH{q', 17
                                if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                balanceOf[address(arg1)] += arg2
                                emit Transfer(arg2, msg.sender, arg1);
                            else:
                                if arg2 and burnFee > -1 / arg2:
                                    revert with 'NH{q', 17
                                if not arg2:
                                    revert with 'NH{q', 18
                                if arg2 * burnFee / arg2 != burnFee:
                                    revert with 0, 'SafeMath: multiplication overflow'
                                if 0 > -(arg2 * burnFee / 100) - 1:
                                    revert with 'NH{q', 17
                                if arg2 * burnFee / 100 < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                                if arg2 * burnFee / 100 > arg2:
                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                if arg2 < arg2 * burnFee / 100:
                                    revert with 'NH{q', 17
                                if not msg.sender:
                                    revert with 0, 'ERC20: transfer from the zero address'
                                if not this.address:
                                    revert with 0, 'ERC20: transfer to the zero address'
                                if 0 > balanceOf[address(msg.sender)]:
                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                if balanceOf[address(msg.sender)] < 0:
                                    revert with 'NH{q', 17
                                if balanceOf[address(this.address)] > -1:
                                    revert with 'NH{q', 17
                                if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                emit Transfer(0, msg.sender, this.address);
                                if not msg.sender:
                                    revert with 0, 'ERC20: transfer from the zero address'
                                if arg2 * burnFee / 100 > balanceOf[address(msg.sender)]:
                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                if balanceOf[address(msg.sender)] < arg2 * burnFee / 100:
                                    revert with 'NH{q', 17
                                balanceOf[address(msg.sender)] -= arg2 * burnFee / 100
                                if balanceOf[57005] > -(arg2 * burnFee / 100) - 1:
                                    revert with 'NH{q', 17
                                if balanceOf[57005] + (arg2 * burnFee / 100) < balanceOf[57005]:
                                    revert with 0, 'SafeMath: addition overflow'
                                balanceOf[57005] += arg2 * burnFee / 100
                                emit Transfer((arg2 * burnFee / 100), msg.sender, 57005);
                                emit TokenBurn((arg2 * burnFee / 100), msg.sender);
                                if not msg.sender:
                                    revert with 0, 'ERC20: transfer from the zero address'
                                if not arg1:
                                    revert with 0, 'ERC20: transfer to the zero address'
                                if arg2 - (arg2 * burnFee / 100) > balanceOf[address(msg.sender)]:
                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                if balanceOf[address(msg.sender)] < arg2 - (arg2 * burnFee / 100):
                                    revert with 'NH{q', 17
                                balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * burnFee / 100)
                                if balanceOf[address(arg1)] > -arg2 + (arg2 * burnFee / 100) - 1:
                                    revert with 'NH{q', 17
                                if balanceOf[address(arg1)] + arg2 - (arg2 * burnFee / 100) < balanceOf[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * burnFee / 100)
                                emit Transfer((arg2 - (arg2 * burnFee / 100)), msg.sender, arg1);
                        else:
                            if arg2 and stor14 > -1 / arg2:
                                revert with 'NH{q', 17
                            if not arg2:
                                revert with 'NH{q', 18
                            if arg2 * stor14 / arg2 != stor14:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeMath: multiplication overflow'
                            if not arg2:
                                if arg2 * stor14 / 100 > -1:
                                    revert with 'NH{q', 17
                                if arg2 * stor14 / 100 < arg2 * stor14 / 100:
                                    revert with 0, 'SafeMath: addition overflow'
                                if arg2 * stor14 / 100 > arg2:
                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                if arg2 < arg2 * stor14 / 100:
                                    revert with 'NH{q', 17
                                if not msg.sender:
                                    revert with 0, 'ERC20: transfer from the zero address'
                                if not this.address:
                                    revert with 0, 'ERC20: transfer to the zero address'
                                if arg2 * stor14 / 100 > balanceOf[address(msg.sender)]:
                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                if balanceOf[address(msg.sender)] < arg2 * stor14 / 100:
                                    revert with 'NH{q', 17
                                balanceOf[address(msg.sender)] -= arg2 * stor14 / 100
                                if balanceOf[address(this.address)] > -(arg2 * stor14 / 100) - 1:
                                    revert with 'NH{q', 17
                                if balanceOf[address(this.address)] + (arg2 * stor14 / 100) < balanceOf[address(this.address)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                balanceOf[address(this.address)] += arg2 * stor14 / 100
                                emit Transfer((arg2 * stor14 / 100), msg.sender, this.address);
                                if not msg.sender:
                                    revert with 0, 'ERC20: transfer from the zero address'
                                if 0 > balanceOf[address(msg.sender)]:
                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                if balanceOf[address(msg.sender)] < 0:
                                    revert with 'NH{q', 17
                                if balanceOf[57005] > -1:
                                    revert with 'NH{q', 17
                                if balanceOf[57005] < balanceOf[57005]:
                                    revert with 0, 'SafeMath: addition overflow'
                                emit Transfer(0, msg.sender, 57005);
                                emit TokenBurn(0, msg.sender);
                                if not msg.sender:
                                    revert with 0, 'ERC20: transfer from the zero address'
                                if not arg1:
                                    revert with 0, 'ERC20: transfer to the zero address'
                                if arg2 - (arg2 * stor14 / 100) > balanceOf[address(msg.sender)]:
                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor14 / 100):
                                    revert with 'NH{q', 17
                                balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor14 / 100)
                                if balanceOf[address(arg1)] > -arg2 + (arg2 * stor14 / 100) - 1:
                                    revert with 'NH{q', 17
                                if balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) < balanceOf[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100)
                                emit Transfer((arg2 - (arg2 * stor14 / 100)), msg.sender, arg1);
                            else:
                                if arg2 and burnFee > -1 / arg2:
                                    revert with 'NH{q', 17
                                if not arg2:
                                    revert with 'NH{q', 18
                                if arg2 * burnFee / arg2 != burnFee:
                                    revert with 0, 'SafeMath: multiplication overflow'
                                if arg2 * stor14 / 100 > -(arg2 * burnFee / 100) - 1:
                                    revert with 'NH{q', 17
                                if (arg2 * stor14 / 100) + (arg2 * burnFee / 100) < arg2 * stor14 / 100:
                                    revert with 0, 'SafeMath: addition overflow'
                                if (arg2 * stor14 / 100) + (arg2 * burnFee / 100) > arg2:
                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                if arg2 < (arg2 * stor14 / 100) + (arg2 * burnFee / 100):
                                    revert with 'NH{q', 17
                                if not msg.sender:
                                    revert with 0, 'ERC20: transfer from the zero address'
                                if not this.address:
                                    revert with 0, 'ERC20: transfer to the zero address'
                                if arg2 * stor14 / 100 > balanceOf[address(msg.sender)]:
                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                if balanceOf[address(msg.sender)] < arg2 * stor14 / 100:
                                    revert with 'NH{q', 17
                                balanceOf[address(msg.sender)] -= arg2 * stor14 / 100
                                if balanceOf[address(this.address)] > -(arg2 * stor14 / 100) - 1:
                                    revert with 'NH{q', 17
                                if balanceOf[address(this.address)] + (arg2 * stor14 / 100) < balanceOf[address(this.address)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                balanceOf[address(this.address)] += arg2 * stor14 / 100
                                emit Transfer((arg2 * stor14 / 100), msg.sender, this.address);
                                if not msg.sender:
                                    revert with 0, 'ERC20: transfer from the zero address'
                                if arg2 * burnFee / 100 > balanceOf[address(msg.sender)]:
                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                if balanceOf[address(msg.sender)] < arg2 * burnFee / 100:
                                    revert with 'NH{q', 17
                                balanceOf[address(msg.sender)] -= arg2 * burnFee / 100
                                if balanceOf[57005] > -(arg2 * burnFee / 100) - 1:
                                    revert with 'NH{q', 17
                                if balanceOf[57005] + (arg2 * burnFee / 100) < balanceOf[57005]:
                                    revert with 0, 'SafeMath: addition overflow'
                                balanceOf[57005] += arg2 * burnFee / 100
                                emit Transfer((arg2 * burnFee / 100), msg.sender, 57005);
                                emit TokenBurn((arg2 * burnFee / 100), msg.sender);
                                if not msg.sender:
                                    revert with 0, 'ERC20: transfer from the zero address'
                                if not arg1:
                                    revert with 0, 'ERC20: transfer to the zero address'
                                if arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100) > balanceOf[address(msg.sender)]:
                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100):
                                    revert with 'NH{q', 17
                                balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor14 / 100) + (arg2 * burnFee / 100)
                                if balanceOf[address(arg1)] > -arg2 + (arg2 * stor14 / 100) + (arg2 * burnFee / 100) - 1:
                                    revert with 'NH{q', 17
                                if balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100) < balanceOf[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100)
                                emit Transfer((arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100)), msg.sender, arg1);
        else:
            if stor22:
                if stor11[address(msg.sender)]:
                    if not msg.sender:
                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                    if not arg1:
                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                    if arg2 > balanceOf[address(msg.sender)]:
                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                    if balanceOf[address(msg.sender)] < arg2:
                        revert with 'NH{q', 17
                    balanceOf[address(msg.sender)] -= arg2
                    if balanceOf[address(arg1)] > -arg2 - 1:
                        revert with 'NH{q', 17
                    if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                        revert with 0, 'SafeMath: addition overflow'
                    balanceOf[address(arg1)] += arg2
                    emit Transfer(arg2, msg.sender, arg1);
                else:
                    if stor11[address(arg1)]:
                        if not msg.sender:
                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                        if not arg1:
                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                        if arg2 > balanceOf[address(msg.sender)]:
                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                        if balanceOf[address(msg.sender)] < arg2:
                            revert with 'NH{q', 17
                        balanceOf[address(msg.sender)] -= arg2
                        if balanceOf[address(arg1)] > -arg2 - 1:
                            revert with 'NH{q', 17
                        if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                            revert with 0, 'SafeMath: addition overflow'
                        balanceOf[address(arg1)] += arg2
                        emit Transfer(arg2, msg.sender, arg1);
                    else:
                        if totalFees <= 0:
                            if not msg.sender:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                            if not arg1:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                            if arg2 > balanceOf[address(msg.sender)]:
                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                            if balanceOf[address(msg.sender)] < arg2:
                                revert with 'NH{q', 17
                            balanceOf[address(msg.sender)] -= arg2
                            if balanceOf[address(arg1)] > -arg2 - 1:
                                revert with 'NH{q', 17
                            if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                revert with 0, 'SafeMath: addition overflow'
                            balanceOf[address(arg1)] += arg2
                            emit Transfer(arg2, msg.sender, arg1);
                        else:
                            if not arg2:
                                if not arg2:
                                    if 0 > arg2:
                                        revert with 0, 'SafeMath: subtraction overflow', 0
                                    if arg2 < 0:
                                        revert with 'NH{q', 17
                                    if not msg.sender:
                                        revert with 0, 'ERC20: transfer from the zero address'
                                    if not this.address:
                                        revert with 0, 'ERC20: transfer to the zero address'
                                    if 0 > balanceOf[address(msg.sender)]:
                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                    if balanceOf[address(msg.sender)] < 0:
                                        revert with 'NH{q', 17
                                    if balanceOf[address(this.address)] > -1:
                                        revert with 'NH{q', 17
                                    if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    emit Transfer(0, msg.sender, this.address);
                                    if not msg.sender:
                                        revert with 0, 'ERC20: transfer from the zero address'
                                    if 0 > balanceOf[address(msg.sender)]:
                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                    if balanceOf[address(msg.sender)] < 0:
                                        revert with 'NH{q', 17
                                    if balanceOf[57005] > -1:
                                        revert with 'NH{q', 17
                                    if balanceOf[57005] < balanceOf[57005]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    emit Transfer(0, msg.sender, 57005);
                                    emit TokenBurn(0, msg.sender);
                                    if not msg.sender:
                                        revert with 0, 'ERC20: transfer from the zero address'
                                    if not arg1:
                                        revert with 0, 'ERC20: transfer to the zero address'
                                    if arg2 > balanceOf[address(msg.sender)]:
                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                    if balanceOf[address(msg.sender)] < arg2:
                                        revert with 'NH{q', 17
                                    balanceOf[address(msg.sender)] -= arg2
                                    if balanceOf[address(arg1)] > -arg2 - 1:
                                        revert with 'NH{q', 17
                                    if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(arg1)] += arg2
                                    emit Transfer(arg2, msg.sender, arg1);
                                else:
                                    if arg2 and burnFee > -1 / arg2:
                                        revert with 'NH{q', 17
                                    if not arg2:
                                        revert with 'NH{q', 18
                                    if arg2 * burnFee / arg2 != burnFee:
                                        revert with 0, 'SafeMath: multiplication overflow'
                                    if 0 > -(arg2 * burnFee / 100) - 1:
                                        revert with 'NH{q', 17
                                    if arg2 * burnFee / 100 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    if arg2 * burnFee / 100 > arg2:
                                        revert with 0, 'SafeMath: subtraction overflow', 0
                                    if arg2 < arg2 * burnFee / 100:
                                        revert with 'NH{q', 17
                                    if not msg.sender:
                                        revert with 0, 'ERC20: transfer from the zero address'
                                    if not this.address:
                                        revert with 0, 'ERC20: transfer to the zero address'
                                    if 0 > balanceOf[address(msg.sender)]:
                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                    if balanceOf[address(msg.sender)] < 0:
                                        revert with 'NH{q', 17
                                    if balanceOf[address(this.address)] > -1:
                                        revert with 'NH{q', 17
                                    if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    emit Transfer(0, msg.sender, this.address);
                                    if not msg.sender:
                                        revert with 0, 'ERC20: transfer from the zero address'
                                    if arg2 * burnFee / 100 > balanceOf[address(msg.sender)]:
                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                    if balanceOf[address(msg.sender)] < arg2 * burnFee / 100:
                                        revert with 'NH{q', 17
                                    balanceOf[address(msg.sender)] -= arg2 * burnFee / 100
                                    if balanceOf[57005] > -(arg2 * burnFee / 100) - 1:
                                        revert with 'NH{q', 17
                                    if balanceOf[57005] + (arg2 * burnFee / 100) < balanceOf[57005]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[57005] += arg2 * burnFee / 100
                                    emit Transfer((arg2 * burnFee / 100), msg.sender, 57005);
                                    emit TokenBurn((arg2 * burnFee / 100), msg.sender);
                                    if not msg.sender:
                                        revert with 0, 'ERC20: transfer from the zero address'
                                    if not arg1:
                                        revert with 0, 'ERC20: transfer to the zero address'
                                    if arg2 - (arg2 * burnFee / 100) > balanceOf[address(msg.sender)]:
                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                    if balanceOf[address(msg.sender)] < arg2 - (arg2 * burnFee / 100):
                                        revert with 'NH{q', 17
                                    balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * burnFee / 100)
                                    if balanceOf[address(arg1)] > -arg2 + (arg2 * burnFee / 100) - 1:
                                        revert with 'NH{q', 17
                                    if balanceOf[address(arg1)] + arg2 - (arg2 * burnFee / 100) < balanceOf[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * burnFee / 100)
                                    emit Transfer((arg2 - (arg2 * burnFee / 100)), msg.sender, arg1);
                            else:
                                if arg2 and stor14 > -1 / arg2:
                                    revert with 'NH{q', 17
                                if not arg2:
                                    revert with 'NH{q', 18
                                if arg2 * stor14 / arg2 != stor14:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeMath: multiplication overflow'
                                if not arg2:
                                    if arg2 * stor14 / 100 > -1:
                                        revert with 'NH{q', 17
                                    if arg2 * stor14 / 100 < arg2 * stor14 / 100:
                                        revert with 0, 'SafeMath: addition overflow'
                                    if arg2 * stor14 / 100 > arg2:
                                        revert with 0, 'SafeMath: subtraction overflow', 0
                                    if arg2 < arg2 * stor14 / 100:
                                        revert with 'NH{q', 17
                                    if not msg.sender:
                                        revert with 0, 'ERC20: transfer from the zero address'
                                    if not this.address:
                                        revert with 0, 'ERC20: transfer to the zero address'
                                    if arg2 * stor14 / 100 > balanceOf[address(msg.sender)]:
                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                    if balanceOf[address(msg.sender)] < arg2 * stor14 / 100:
                                        revert with 'NH{q', 17
                                    balanceOf[address(msg.sender)] -= arg2 * stor14 / 100
                                    if balanceOf[address(this.address)] > -(arg2 * stor14 / 100) - 1:
                                        revert with 'NH{q', 17
                                    if balanceOf[address(this.address)] + (arg2 * stor14 / 100) < balanceOf[address(this.address)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(this.address)] += arg2 * stor14 / 100
                                    emit Transfer((arg2 * stor14 / 100), msg.sender, this.address);
                                    if not msg.sender:
                                        revert with 0, 'ERC20: transfer from the zero address'
                                    if 0 > balanceOf[address(msg.sender)]:
                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                    if balanceOf[address(msg.sender)] < 0:
                                        revert with 'NH{q', 17
                                    if balanceOf[57005] > -1:
                                        revert with 'NH{q', 17
                                    if balanceOf[57005] < balanceOf[57005]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    emit Transfer(0, msg.sender, 57005);
                                    emit TokenBurn(0, msg.sender);
                                    if not msg.sender:
                                        revert with 0, 'ERC20: transfer from the zero address'
                                    if not arg1:
                                        revert with 0, 'ERC20: transfer to the zero address'
                                    if arg2 - (arg2 * stor14 / 100) > balanceOf[address(msg.sender)]:
                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                    if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor14 / 100):
                                        revert with 'NH{q', 17
                                    balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor14 / 100)
                                    if balanceOf[address(arg1)] > -arg2 + (arg2 * stor14 / 100) - 1:
                                        revert with 'NH{q', 17
                                    if balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) < balanceOf[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100)
                                    emit Transfer((arg2 - (arg2 * stor14 / 100)), msg.sender, arg1);
                                else:
                                    if arg2 and burnFee > -1 / arg2:
                                        revert with 'NH{q', 17
                                    if not arg2:
                                        revert with 'NH{q', 18
                                    if arg2 * burnFee / arg2 != burnFee:
                                        revert with 0, 'SafeMath: multiplication overflow'
                                    if arg2 * stor14 / 100 > -(arg2 * burnFee / 100) - 1:
                                        revert with 'NH{q', 17
                                    if (arg2 * stor14 / 100) + (arg2 * burnFee / 100) < arg2 * stor14 / 100:
                                        revert with 0, 'SafeMath: addition overflow'
                                    if (arg2 * stor14 / 100) + (arg2 * burnFee / 100) > arg2:
                                        revert with 0, 'SafeMath: subtraction overflow', 0
                                    if arg2 < (arg2 * stor14 / 100) + (arg2 * burnFee / 100):
                                        revert with 'NH{q', 17
                                    if not msg.sender:
                                        revert with 0, 'ERC20: transfer from the zero address'
                                    if not this.address:
                                        revert with 0, 'ERC20: transfer to the zero address'
                                    if arg2 * stor14 / 100 > balanceOf[address(msg.sender)]:
                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                    if balanceOf[address(msg.sender)] < arg2 * stor14 / 100:
                                        revert with 'NH{q', 17
                                    balanceOf[address(msg.sender)] -= arg2 * stor14 / 100
                                    if balanceOf[address(this.address)] > -(arg2 * stor14 / 100) - 1:
                                        revert with 'NH{q', 17
                                    if balanceOf[address(this.address)] + (arg2 * stor14 / 100) < balanceOf[address(this.address)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(this.address)] += arg2 * stor14 / 100
                                    emit Transfer((arg2 * stor14 / 100), msg.sender, this.address);
                                    if not msg.sender:
                                        revert with 0, 'ERC20: transfer from the zero address'
                                    if arg2 * burnFee / 100 > balanceOf[address(msg.sender)]:
                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                    if balanceOf[address(msg.sender)] < arg2 * burnFee / 100:
                                        revert with 'NH{q', 17
                                    balanceOf[address(msg.sender)] -= arg2 * burnFee / 100
                                    if balanceOf[57005] > -(arg2 * burnFee / 100) - 1:
                                        revert with 'NH{q', 17
                                    if balanceOf[57005] + (arg2 * burnFee / 100) < balanceOf[57005]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[57005] += arg2 * burnFee / 100
                                    emit Transfer((arg2 * burnFee / 100), msg.sender, 57005);
                                    emit TokenBurn((arg2 * burnFee / 100), msg.sender);
                                    if not msg.sender:
                                        revert with 0, 'ERC20: transfer from the zero address'
                                    if not arg1:
                                        revert with 0, 'ERC20: transfer to the zero address'
                                    if arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100) > balanceOf[address(msg.sender)]:
                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                    if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100):
                                        revert with 'NH{q', 17
                                    balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor14 / 100) + (arg2 * burnFee / 100)
                                    if balanceOf[address(arg1)] > -arg2 + (arg2 * stor14 / 100) + (arg2 * burnFee / 100) - 1:
                                        revert with 'NH{q', 17
                                    if balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100) < balanceOf[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100)
                                    emit Transfer((arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100)), msg.sender, arg1);
            else:
                if balanceOf[address(this.address)] < liquifyThreshhold:
                    if stor11[address(msg.sender)]:
                        if not msg.sender:
                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                        if not arg1:
                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                        if arg2 > balanceOf[address(msg.sender)]:
                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                        if balanceOf[address(msg.sender)] < arg2:
                            revert with 'NH{q', 17
                        balanceOf[address(msg.sender)] -= arg2
                        if balanceOf[address(arg1)] > -arg2 - 1:
                            revert with 'NH{q', 17
                        if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                            revert with 0, 'SafeMath: addition overflow'
                        balanceOf[address(arg1)] += arg2
                        emit Transfer(arg2, msg.sender, arg1);
                    else:
                        if stor11[address(arg1)]:
                            if not msg.sender:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                            if not arg1:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                            if arg2 > balanceOf[address(msg.sender)]:
                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                            if balanceOf[address(msg.sender)] < arg2:
                                revert with 'NH{q', 17
                            balanceOf[address(msg.sender)] -= arg2
                            if balanceOf[address(arg1)] > -arg2 - 1:
                                revert with 'NH{q', 17
                            if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                revert with 0, 'SafeMath: addition overflow'
                            balanceOf[address(arg1)] += arg2
                            emit Transfer(arg2, msg.sender, arg1);
                        else:
                            if totalFees <= 0:
                                if not msg.sender:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                if not arg1:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                if arg2 > balanceOf[address(msg.sender)]:
                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                                if balanceOf[address(msg.sender)] < arg2:
                                    revert with 'NH{q', 17
                                balanceOf[address(msg.sender)] -= arg2
                                if balanceOf[address(arg1)] > -arg2 - 1:
                                    revert with 'NH{q', 17
                                if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                balanceOf[address(arg1)] += arg2
                                emit Transfer(arg2, msg.sender, arg1);
                            else:
                                if not arg2:
                                    if not arg2:
                                        if 0 > arg2:
                                            revert with 0, 'SafeMath: subtraction overflow', 0
                                        if arg2 < 0:
                                            revert with 'NH{q', 17
                                        if not msg.sender:
                                            revert with 0, 'ERC20: transfer from the zero address'
                                        if not this.address:
                                            revert with 0, 'ERC20: transfer to the zero address'
                                        if 0 > balanceOf[address(msg.sender)]:
                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                        if balanceOf[address(msg.sender)] < 0:
                                            revert with 'NH{q', 17
                                        if balanceOf[address(this.address)] > -1:
                                            revert with 'NH{q', 17
                                        if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        emit Transfer(0, msg.sender, this.address);
                                        if not msg.sender:
                                            revert with 0, 'ERC20: transfer from the zero address'
                                        if 0 > balanceOf[address(msg.sender)]:
                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                        if balanceOf[address(msg.sender)] < 0:
                                            revert with 'NH{q', 17
                                        if balanceOf[57005] > -1:
                                            revert with 'NH{q', 17
                                        if balanceOf[57005] < balanceOf[57005]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        emit Transfer(0, msg.sender, 57005);
                                        emit TokenBurn(0, msg.sender);
                                        if not msg.sender:
                                            revert with 0, 'ERC20: transfer from the zero address'
                                        if not arg1:
                                            revert with 0, 'ERC20: transfer to the zero address'
                                        if arg2 > balanceOf[address(msg.sender)]:
                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                        if balanceOf[address(msg.sender)] < arg2:
                                            revert with 'NH{q', 17
                                        balanceOf[address(msg.sender)] -= arg2
                                        if balanceOf[address(arg1)] > -arg2 - 1:
                                            revert with 'NH{q', 17
                                        if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(arg1)] += arg2
                                        emit Transfer(arg2, msg.sender, arg1);
                                    else:
                                        if arg2 and burnFee > -1 / arg2:
                                            revert with 'NH{q', 17
                                        if not arg2:
                                            revert with 'NH{q', 18
                                        if arg2 * burnFee / arg2 != burnFee:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        if 0 > -(arg2 * burnFee / 100) - 1:
                                            revert with 'NH{q', 17
                                        if arg2 * burnFee / 100 < 0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if arg2 * burnFee / 100 > arg2:
                                            revert with 0, 'SafeMath: subtraction overflow', 0
                                        if arg2 < arg2 * burnFee / 100:
                                            revert with 'NH{q', 17
                                        if not msg.sender:
                                            revert with 0, 'ERC20: transfer from the zero address'
                                        if not this.address:
                                            revert with 0, 'ERC20: transfer to the zero address'
                                        if 0 > balanceOf[address(msg.sender)]:
                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                        if balanceOf[address(msg.sender)] < 0:
                                            revert with 'NH{q', 17
                                        if balanceOf[address(this.address)] > -1:
                                            revert with 'NH{q', 17
                                        if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        emit Transfer(0, msg.sender, this.address);
                                        if not msg.sender:
                                            revert with 0, 'ERC20: transfer from the zero address'
                                        if arg2 * burnFee / 100 > balanceOf[address(msg.sender)]:
                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                        if balanceOf[address(msg.sender)] < arg2 * burnFee / 100:
                                            revert with 'NH{q', 17
                                        balanceOf[address(msg.sender)] -= arg2 * burnFee / 100
                                        if balanceOf[57005] > -(arg2 * burnFee / 100) - 1:
                                            revert with 'NH{q', 17
                                        if balanceOf[57005] + (arg2 * burnFee / 100) < balanceOf[57005]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[57005] += arg2 * burnFee / 100
                                        emit Transfer((arg2 * burnFee / 100), msg.sender, 57005);
                                        emit TokenBurn((arg2 * burnFee / 100), msg.sender);
                                        if not msg.sender:
                                            revert with 0, 'ERC20: transfer from the zero address'
                                        if not arg1:
                                            revert with 0, 'ERC20: transfer to the zero address'
                                        if arg2 - (arg2 * burnFee / 100) > balanceOf[address(msg.sender)]:
                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                        if balanceOf[address(msg.sender)] < arg2 - (arg2 * burnFee / 100):
                                            revert with 'NH{q', 17
                                        balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * burnFee / 100)
                                        if balanceOf[address(arg1)] > -arg2 + (arg2 * burnFee / 100) - 1:
                                            revert with 'NH{q', 17
                                        if balanceOf[address(arg1)] + arg2 - (arg2 * burnFee / 100) < balanceOf[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * burnFee / 100)
                                        emit Transfer((arg2 - (arg2 * burnFee / 100)), msg.sender, arg1);
                                else:
                                    if arg2 and stor14 > -1 / arg2:
                                        revert with 'NH{q', 17
                                    if not arg2:
                                        revert with 'NH{q', 18
                                    if arg2 * stor14 / arg2 != stor14:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeMath: multiplication overflow'
                                    if not arg2:
                                        if arg2 * stor14 / 100 > -1:
                                            revert with 'NH{q', 17
                                        if arg2 * stor14 / 100 < arg2 * stor14 / 100:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if arg2 * stor14 / 100 > arg2:
                                            revert with 0, 'SafeMath: subtraction overflow', 0
                                        if arg2 < arg2 * stor14 / 100:
                                            revert with 'NH{q', 17
                                        if not msg.sender:
                                            revert with 0, 'ERC20: transfer from the zero address'
                                        if not this.address:
                                            revert with 0, 'ERC20: transfer to the zero address'
                                        if arg2 * stor14 / 100 > balanceOf[address(msg.sender)]:
                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                        if balanceOf[address(msg.sender)] < arg2 * stor14 / 100:
                                            revert with 'NH{q', 17
                                        balanceOf[address(msg.sender)] -= arg2 * stor14 / 100
                                        if balanceOf[address(this.address)] > -(arg2 * stor14 / 100) - 1:
                                            revert with 'NH{q', 17
                                        if balanceOf[address(this.address)] + (arg2 * stor14 / 100) < balanceOf[address(this.address)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(this.address)] += arg2 * stor14 / 100
                                        emit Transfer((arg2 * stor14 / 100), msg.sender, this.address);
                                        if not msg.sender:
                                            revert with 0, 'ERC20: transfer from the zero address'
                                        if 0 > balanceOf[address(msg.sender)]:
                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                        if balanceOf[address(msg.sender)] < 0:
                                            revert with 'NH{q', 17
                                        if balanceOf[57005] > -1:
                                            revert with 'NH{q', 17
                                        if balanceOf[57005] < balanceOf[57005]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        emit Transfer(0, msg.sender, 57005);
                                        emit TokenBurn(0, msg.sender);
                                        if not msg.sender:
                                            revert with 0, 'ERC20: transfer from the zero address'
                                        if not arg1:
                                            revert with 0, 'ERC20: transfer to the zero address'
                                        if arg2 - (arg2 * stor14 / 100) > balanceOf[address(msg.sender)]:
                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                        if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor14 / 100):
                                            revert with 'NH{q', 17
                                        balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor14 / 100)
                                        if balanceOf[address(arg1)] > -arg2 + (arg2 * stor14 / 100) - 1:
                                            revert with 'NH{q', 17
                                        if balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) < balanceOf[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100)
                                        emit Transfer((arg2 - (arg2 * stor14 / 100)), msg.sender, arg1);
                                    else:
                                        if arg2 and burnFee > -1 / arg2:
                                            revert with 'NH{q', 17
                                        if not arg2:
                                            revert with 'NH{q', 18
                                        if arg2 * burnFee / arg2 != burnFee:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        if arg2 * stor14 / 100 > -(arg2 * burnFee / 100) - 1:
                                            revert with 'NH{q', 17
                                        if (arg2 * stor14 / 100) + (arg2 * burnFee / 100) < arg2 * stor14 / 100:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if (arg2 * stor14 / 100) + (arg2 * burnFee / 100) > arg2:
                                            revert with 0, 'SafeMath: subtraction overflow', 0
                                        if arg2 < (arg2 * stor14 / 100) + (arg2 * burnFee / 100):
                                            revert with 'NH{q', 17
                                        if not msg.sender:
                                            revert with 0, 'ERC20: transfer from the zero address'
                                        if not this.address:
                                            revert with 0, 'ERC20: transfer to the zero address'
                                        if arg2 * stor14 / 100 > balanceOf[address(msg.sender)]:
                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                        if balanceOf[address(msg.sender)] < arg2 * stor14 / 100:
                                            revert with 'NH{q', 17
                                        balanceOf[address(msg.sender)] -= arg2 * stor14 / 100
                                        if balanceOf[address(this.address)] > -(arg2 * stor14 / 100) - 1:
                                            revert with 'NH{q', 17
                                        if balanceOf[address(this.address)] + (arg2 * stor14 / 100) < balanceOf[address(this.address)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(this.address)] += arg2 * stor14 / 100
                                        emit Transfer((arg2 * stor14 / 100), msg.sender, this.address);
                                        if not msg.sender:
                                            revert with 0, 'ERC20: transfer from the zero address'
                                        if arg2 * burnFee / 100 > balanceOf[address(msg.sender)]:
                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                        if balanceOf[address(msg.sender)] < arg2 * burnFee / 100:
                                            revert with 'NH{q', 17
                                        balanceOf[address(msg.sender)] -= arg2 * burnFee / 100
                                        if balanceOf[57005] > -(arg2 * burnFee / 100) - 1:
                                            revert with 'NH{q', 17
                                        if balanceOf[57005] + (arg2 * burnFee / 100) < balanceOf[57005]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[57005] += arg2 * burnFee / 100
                                        emit Transfer((arg2 * burnFee / 100), msg.sender, 57005);
                                        emit TokenBurn((arg2 * burnFee / 100), msg.sender);
                                        if not msg.sender:
                                            revert with 0, 'ERC20: transfer from the zero address'
                                        if not arg1:
                                            revert with 0, 'ERC20: transfer to the zero address'
                                        if arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100) > balanceOf[address(msg.sender)]:
                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                        if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100):
                                            revert with 'NH{q', 17
                                        balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor14 / 100) + (arg2 * burnFee / 100)
                                        if balanceOf[address(arg1)] > -arg2 + (arg2 * stor14 / 100) + (arg2 * burnFee / 100) - 1:
                                            revert with 'NH{q', 17
                                        if balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100) < balanceOf[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100)
                                        emit Transfer((arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100)), msg.sender, arg1);
                else:
                    if stor14 <= 0:
                        if stor11[address(msg.sender)]:
                            if not msg.sender:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                            if not arg1:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                            if arg2 > balanceOf[address(msg.sender)]:
                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                            if balanceOf[address(msg.sender)] < arg2:
                                revert with 'NH{q', 17
                            balanceOf[address(msg.sender)] -= arg2
                            if balanceOf[address(arg1)] > -arg2 - 1:
                                revert with 'NH{q', 17
                            if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                revert with 0, 'SafeMath: addition overflow'
                            balanceOf[address(arg1)] += arg2
                            emit Transfer(arg2, msg.sender, arg1);
                        else:
                            if stor11[address(arg1)]:
                                if not msg.sender:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                if not arg1:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                if arg2 > balanceOf[address(msg.sender)]:
                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                                if balanceOf[address(msg.sender)] < arg2:
                                    revert with 'NH{q', 17
                                balanceOf[address(msg.sender)] -= arg2
                                if balanceOf[address(arg1)] > -arg2 - 1:
                                    revert with 'NH{q', 17
                                if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                balanceOf[address(arg1)] += arg2
                                emit Transfer(arg2, msg.sender, arg1);
                            else:
                                if totalFees <= 0:
                                    if not msg.sender:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                    if not arg1:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                    if arg2 > balanceOf[address(msg.sender)]:
                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                                    if balanceOf[address(msg.sender)] < arg2:
                                        revert with 'NH{q', 17
                                    balanceOf[address(msg.sender)] -= arg2
                                    if balanceOf[address(arg1)] > -arg2 - 1:
                                        revert with 'NH{q', 17
                                    if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(arg1)] += arg2
                                    emit Transfer(arg2, msg.sender, arg1);
                                else:
                                    if not arg2:
                                        if not arg2:
                                            if 0 > arg2:
                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                            if arg2 < 0:
                                                revert with 'NH{q', 17
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if not this.address:
                                                revert with 0, 'ERC20: transfer to the zero address'
                                            if 0 > balanceOf[address(msg.sender)]:
                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                            if balanceOf[address(msg.sender)] < 0:
                                                revert with 'NH{q', 17
                                            if balanceOf[address(this.address)] > -1:
                                                revert with 'NH{q', 17
                                            if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            emit Transfer(0, msg.sender, this.address);
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if 0 > balanceOf[address(msg.sender)]:
                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                            if balanceOf[address(msg.sender)] < 0:
                                                revert with 'NH{q', 17
                                            if balanceOf[57005] > -1:
                                                revert with 'NH{q', 17
                                            if balanceOf[57005] < balanceOf[57005]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            emit Transfer(0, msg.sender, 57005);
                                            emit TokenBurn(0, msg.sender);
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if not arg1:
                                                revert with 0, 'ERC20: transfer to the zero address'
                                            if arg2 > balanceOf[address(msg.sender)]:
                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                            if balanceOf[address(msg.sender)] < arg2:
                                                revert with 'NH{q', 17
                                            balanceOf[address(msg.sender)] -= arg2
                                            if balanceOf[address(arg1)] > -arg2 - 1:
                                                revert with 'NH{q', 17
                                            if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(arg1)] += arg2
                                            emit Transfer(arg2, msg.sender, arg1);
                                        else:
                                            if arg2 and burnFee > -1 / arg2:
                                                revert with 'NH{q', 17
                                            if not arg2:
                                                revert with 'NH{q', 18
                                            if arg2 * burnFee / arg2 != burnFee:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            if 0 > -(arg2 * burnFee / 100) - 1:
                                                revert with 'NH{q', 17
                                            if arg2 * burnFee / 100 < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if arg2 * burnFee / 100 > arg2:
                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                            if arg2 < arg2 * burnFee / 100:
                                                revert with 'NH{q', 17
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if not this.address:
                                                revert with 0, 'ERC20: transfer to the zero address'
                                            if 0 > balanceOf[address(msg.sender)]:
                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                            if balanceOf[address(msg.sender)] < 0:
                                                revert with 'NH{q', 17
                                            if balanceOf[address(this.address)] > -1:
                                                revert with 'NH{q', 17
                                            if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            emit Transfer(0, msg.sender, this.address);
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if arg2 * burnFee / 100 > balanceOf[address(msg.sender)]:
                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                            if balanceOf[address(msg.sender)] < arg2 * burnFee / 100:
                                                revert with 'NH{q', 17
                                            balanceOf[address(msg.sender)] -= arg2 * burnFee / 100
                                            if balanceOf[57005] > -(arg2 * burnFee / 100) - 1:
                                                revert with 'NH{q', 17
                                            if balanceOf[57005] + (arg2 * burnFee / 100) < balanceOf[57005]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[57005] += arg2 * burnFee / 100
                                            emit Transfer((arg2 * burnFee / 100), msg.sender, 57005);
                                            emit TokenBurn((arg2 * burnFee / 100), msg.sender);
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if not arg1:
                                                revert with 0, 'ERC20: transfer to the zero address'
                                            if arg2 - (arg2 * burnFee / 100) > balanceOf[address(msg.sender)]:
                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                            if balanceOf[address(msg.sender)] < arg2 - (arg2 * burnFee / 100):
                                                revert with 'NH{q', 17
                                            balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * burnFee / 100)
                                            if balanceOf[address(arg1)] > -arg2 + (arg2 * burnFee / 100) - 1:
                                                revert with 'NH{q', 17
                                            if balanceOf[address(arg1)] + arg2 - (arg2 * burnFee / 100) < balanceOf[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * burnFee / 100)
                                            emit Transfer((arg2 - (arg2 * burnFee / 100)), msg.sender, arg1);
                                    else:
                                        if arg2 and stor14 > -1 / arg2:
                                            revert with 'NH{q', 17
                                        if not arg2:
                                            revert with 'NH{q', 18
                                        if arg2 * stor14 / arg2 != stor14:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeMath: multiplication overflow'
                                        if not arg2:
                                            if arg2 * stor14 / 100 > -1:
                                                revert with 'NH{q', 17
                                            if arg2 * stor14 / 100 < arg2 * stor14 / 100:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if arg2 * stor14 / 100 > arg2:
                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                            if arg2 < arg2 * stor14 / 100:
                                                revert with 'NH{q', 17
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if not this.address:
                                                revert with 0, 'ERC20: transfer to the zero address'
                                            if arg2 * stor14 / 100 > balanceOf[address(msg.sender)]:
                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                            if balanceOf[address(msg.sender)] < arg2 * stor14 / 100:
                                                revert with 'NH{q', 17
                                            balanceOf[address(msg.sender)] -= arg2 * stor14 / 100
                                            if balanceOf[address(this.address)] > -(arg2 * stor14 / 100) - 1:
                                                revert with 'NH{q', 17
                                            if balanceOf[address(this.address)] + (arg2 * stor14 / 100) < balanceOf[address(this.address)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(this.address)] += arg2 * stor14 / 100
                                            emit Transfer((arg2 * stor14 / 100), msg.sender, this.address);
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if 0 > balanceOf[address(msg.sender)]:
                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                            if balanceOf[address(msg.sender)] < 0:
                                                revert with 'NH{q', 17
                                            if balanceOf[57005] > -1:
                                                revert with 'NH{q', 17
                                            if balanceOf[57005] < balanceOf[57005]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            emit Transfer(0, msg.sender, 57005);
                                            emit TokenBurn(0, msg.sender);
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if not arg1:
                                                revert with 0, 'ERC20: transfer to the zero address'
                                            if arg2 - (arg2 * stor14 / 100) > balanceOf[address(msg.sender)]:
                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                            if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor14 / 100):
                                                revert with 'NH{q', 17
                                            balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor14 / 100)
                                            if balanceOf[address(arg1)] > -arg2 + (arg2 * stor14 / 100) - 1:
                                                revert with 'NH{q', 17
                                            if balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) < balanceOf[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100)
                                            emit Transfer((arg2 - (arg2 * stor14 / 100)), msg.sender, arg1);
                                        else:
                                            if arg2 and burnFee > -1 / arg2:
                                                revert with 'NH{q', 17
                                            if not arg2:
                                                revert with 'NH{q', 18
                                            if arg2 * burnFee / arg2 != burnFee:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            if arg2 * stor14 / 100 > -(arg2 * burnFee / 100) - 1:
                                                revert with 'NH{q', 17
                                            if (arg2 * stor14 / 100) + (arg2 * burnFee / 100) < arg2 * stor14 / 100:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if (arg2 * stor14 / 100) + (arg2 * burnFee / 100) > arg2:
                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                            if arg2 < (arg2 * stor14 / 100) + (arg2 * burnFee / 100):
                                                revert with 'NH{q', 17
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if not this.address:
                                                revert with 0, 'ERC20: transfer to the zero address'
                                            if arg2 * stor14 / 100 > balanceOf[address(msg.sender)]:
                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                            if balanceOf[address(msg.sender)] < arg2 * stor14 / 100:
                                                revert with 'NH{q', 17
                                            balanceOf[address(msg.sender)] -= arg2 * stor14 / 100
                                            if balanceOf[address(this.address)] > -(arg2 * stor14 / 100) - 1:
                                                revert with 'NH{q', 17
                                            if balanceOf[address(this.address)] + (arg2 * stor14 / 100) < balanceOf[address(this.address)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(this.address)] += arg2 * stor14 / 100
                                            emit Transfer((arg2 * stor14 / 100), msg.sender, this.address);
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if arg2 * burnFee / 100 > balanceOf[address(msg.sender)]:
                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                            if balanceOf[address(msg.sender)] < arg2 * burnFee / 100:
                                                revert with 'NH{q', 17
                                            balanceOf[address(msg.sender)] -= arg2 * burnFee / 100
                                            if balanceOf[57005] > -(arg2 * burnFee / 100) - 1:
                                                revert with 'NH{q', 17
                                            if balanceOf[57005] + (arg2 * burnFee / 100) < balanceOf[57005]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[57005] += arg2 * burnFee / 100
                                            emit Transfer((arg2 * burnFee / 100), msg.sender, 57005);
                                            emit TokenBurn((arg2 * burnFee / 100), msg.sender);
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if not arg1:
                                                revert with 0, 'ERC20: transfer to the zero address'
                                            if arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100) > balanceOf[address(msg.sender)]:
                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                            if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100):
                                                revert with 'NH{q', 17
                                            balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor14 / 100) + (arg2 * burnFee / 100)
                                            if balanceOf[address(arg1)] > -arg2 + (arg2 * stor14 / 100) + (arg2 * burnFee / 100) - 1:
                                                revert with 'NH{q', 17
                                            if balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100) < balanceOf[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100)
                                            emit Transfer((arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100)), msg.sender, arg1);
                    else:
                        if msg.sender == owner:
                            if stor11[address(msg.sender)]:
                                if not msg.sender:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                if not arg1:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                if arg2 > balanceOf[address(msg.sender)]:
                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                                if balanceOf[address(msg.sender)] < arg2:
                                    revert with 'NH{q', 17
                                balanceOf[address(msg.sender)] -= arg2
                                if balanceOf[address(arg1)] > -arg2 - 1:
                                    revert with 'NH{q', 17
                                if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                balanceOf[address(arg1)] += arg2
                                emit Transfer(arg2, msg.sender, arg1);
                            else:
                                if stor11[address(arg1)]:
                                    if not msg.sender:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                    if not arg1:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                    if arg2 > balanceOf[address(msg.sender)]:
                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                                    if balanceOf[address(msg.sender)] < arg2:
                                        revert with 'NH{q', 17
                                    balanceOf[address(msg.sender)] -= arg2
                                    if balanceOf[address(arg1)] > -arg2 - 1:
                                        revert with 'NH{q', 17
                                    if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(arg1)] += arg2
                                    emit Transfer(arg2, msg.sender, arg1);
                                else:
                                    if totalFees <= 0:
                                        if not msg.sender:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                        if not arg1:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                        if arg2 > balanceOf[address(msg.sender)]:
                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                                        if balanceOf[address(msg.sender)] < arg2:
                                            revert with 'NH{q', 17
                                        balanceOf[address(msg.sender)] -= arg2
                                        if balanceOf[address(arg1)] > -arg2 - 1:
                                            revert with 'NH{q', 17
                                        if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(arg1)] += arg2
                                        emit Transfer(arg2, msg.sender, arg1);
                                    else:
                                        if not arg2:
                                            if not arg2:
                                                if 0 > arg2:
                                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                                if arg2 < 0:
                                                    revert with 'NH{q', 17
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if not this.address:
                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                if 0 > balanceOf[address(msg.sender)]:
                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                                if balanceOf[address(msg.sender)] < 0:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(this.address)] > -1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                emit Transfer(0, msg.sender, this.address);
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if 0 > balanceOf[address(msg.sender)]:
                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                                if balanceOf[address(msg.sender)] < 0:
                                                    revert with 'NH{q', 17
                                                if balanceOf[57005] > -1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[57005] < balanceOf[57005]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                emit Transfer(0, msg.sender, 57005);
                                                emit TokenBurn(0, msg.sender);
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if not arg1:
                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                if arg2 > balanceOf[address(msg.sender)]:
                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                                if balanceOf[address(msg.sender)] < arg2:
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] -= arg2
                                                if balanceOf[address(arg1)] > -arg2 - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                balanceOf[address(arg1)] += arg2
                                                emit Transfer(arg2, msg.sender, arg1);
                                            else:
                                                if arg2 and burnFee > -1 / arg2:
                                                    revert with 'NH{q', 17
                                                if not arg2:
                                                    revert with 'NH{q', 18
                                                if arg2 * burnFee / arg2 != burnFee:
                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                if 0 > -(arg2 * burnFee / 100) - 1:
                                                    revert with 'NH{q', 17
                                                if arg2 * burnFee / 100 < 0:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if arg2 * burnFee / 100 > arg2:
                                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                                if arg2 < arg2 * burnFee / 100:
                                                    revert with 'NH{q', 17
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if not this.address:
                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                if 0 > balanceOf[address(msg.sender)]:
                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                                if balanceOf[address(msg.sender)] < 0:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(this.address)] > -1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                emit Transfer(0, msg.sender, this.address);
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if arg2 * burnFee / 100 > balanceOf[address(msg.sender)]:
                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                                if balanceOf[address(msg.sender)] < arg2 * burnFee / 100:
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] -= arg2 * burnFee / 100
                                                if balanceOf[57005] > -(arg2 * burnFee / 100) - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[57005] + (arg2 * burnFee / 100) < balanceOf[57005]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                balanceOf[57005] += arg2 * burnFee / 100
                                                emit Transfer((arg2 * burnFee / 100), msg.sender, 57005);
                                                emit TokenBurn((arg2 * burnFee / 100), msg.sender);
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if not arg1:
                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                if arg2 - (arg2 * burnFee / 100) > balanceOf[address(msg.sender)]:
                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                                if balanceOf[address(msg.sender)] < arg2 - (arg2 * burnFee / 100):
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * burnFee / 100)
                                                if balanceOf[address(arg1)] > -arg2 + (arg2 * burnFee / 100) - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(arg1)] + arg2 - (arg2 * burnFee / 100) < balanceOf[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * burnFee / 100)
                                                emit Transfer((arg2 - (arg2 * burnFee / 100)), msg.sender, arg1);
                                        else:
                                            if arg2 and stor14 > -1 / arg2:
                                                revert with 'NH{q', 17
                                            if not arg2:
                                                revert with 'NH{q', 18
                                            if arg2 * stor14 / arg2 != stor14:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeMath: multiplication overflow'
                                            if not arg2:
                                                if arg2 * stor14 / 100 > -1:
                                                    revert with 'NH{q', 17
                                                if arg2 * stor14 / 100 < arg2 * stor14 / 100:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if arg2 * stor14 / 100 > arg2:
                                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                                if arg2 < arg2 * stor14 / 100:
                                                    revert with 'NH{q', 17
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if not this.address:
                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                if arg2 * stor14 / 100 > balanceOf[address(msg.sender)]:
                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                                if balanceOf[address(msg.sender)] < arg2 * stor14 / 100:
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] -= arg2 * stor14 / 100
                                                if balanceOf[address(this.address)] > -(arg2 * stor14 / 100) - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(this.address)] + (arg2 * stor14 / 100) < balanceOf[address(this.address)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                balanceOf[address(this.address)] += arg2 * stor14 / 100
                                                emit Transfer((arg2 * stor14 / 100), msg.sender, this.address);
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if 0 > balanceOf[address(msg.sender)]:
                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                                if balanceOf[address(msg.sender)] < 0:
                                                    revert with 'NH{q', 17
                                                if balanceOf[57005] > -1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[57005] < balanceOf[57005]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                emit Transfer(0, msg.sender, 57005);
                                                emit TokenBurn(0, msg.sender);
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if not arg1:
                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                if arg2 - (arg2 * stor14 / 100) > balanceOf[address(msg.sender)]:
                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                                if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor14 / 100):
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor14 / 100)
                                                if balanceOf[address(arg1)] > -arg2 + (arg2 * stor14 / 100) - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) < balanceOf[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100)
                                                emit Transfer((arg2 - (arg2 * stor14 / 100)), msg.sender, arg1);
                                            else:
                                                if arg2 and burnFee > -1 / arg2:
                                                    revert with 'NH{q', 17
                                                if not arg2:
                                                    revert with 'NH{q', 18
                                                if arg2 * burnFee / arg2 != burnFee:
                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                if arg2 * stor14 / 100 > -(arg2 * burnFee / 100) - 1:
                                                    revert with 'NH{q', 17
                                                if (arg2 * stor14 / 100) + (arg2 * burnFee / 100) < arg2 * stor14 / 100:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if (arg2 * stor14 / 100) + (arg2 * burnFee / 100) > arg2:
                                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                                if arg2 < (arg2 * stor14 / 100) + (arg2 * burnFee / 100):
                                                    revert with 'NH{q', 17
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if not this.address:
                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                if arg2 * stor14 / 100 > balanceOf[address(msg.sender)]:
                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                                if balanceOf[address(msg.sender)] < arg2 * stor14 / 100:
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] -= arg2 * stor14 / 100
                                                if balanceOf[address(this.address)] > -(arg2 * stor14 / 100) - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(this.address)] + (arg2 * stor14 / 100) < balanceOf[address(this.address)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                balanceOf[address(this.address)] += arg2 * stor14 / 100
                                                emit Transfer((arg2 * stor14 / 100), msg.sender, this.address);
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if arg2 * burnFee / 100 > balanceOf[address(msg.sender)]:
                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                                if balanceOf[address(msg.sender)] < arg2 * burnFee / 100:
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] -= arg2 * burnFee / 100
                                                if balanceOf[57005] > -(arg2 * burnFee / 100) - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[57005] + (arg2 * burnFee / 100) < balanceOf[57005]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                balanceOf[57005] += arg2 * burnFee / 100
                                                emit Transfer((arg2 * burnFee / 100), msg.sender, 57005);
                                                emit TokenBurn((arg2 * burnFee / 100), msg.sender);
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if not arg1:
                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                if arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100) > balanceOf[address(msg.sender)]:
                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                                if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100):
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor14 / 100) + (arg2 * burnFee / 100)
                                                if balanceOf[address(arg1)] > -arg2 + (arg2 * stor14 / 100) + (arg2 * burnFee / 100) - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100) < balanceOf[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100)
                                                emit Transfer((arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100)), msg.sender, arg1);
                        else:
                            if arg1 == owner:
                                if stor11[address(msg.sender)]:
                                    if not msg.sender:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                    if not arg1:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                    if arg2 > balanceOf[address(msg.sender)]:
                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                                    if balanceOf[address(msg.sender)] < arg2:
                                        revert with 'NH{q', 17
                                    balanceOf[address(msg.sender)] -= arg2
                                    if balanceOf[address(arg1)] > -arg2 - 1:
                                        revert with 'NH{q', 17
                                    if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(arg1)] += arg2
                                    emit Transfer(arg2, msg.sender, arg1);
                                else:
                                    if stor11[address(arg1)]:
                                        if not msg.sender:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                        if not arg1:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                        if arg2 > balanceOf[address(msg.sender)]:
                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                                        if balanceOf[address(msg.sender)] < arg2:
                                            revert with 'NH{q', 17
                                        balanceOf[address(msg.sender)] -= arg2
                                        if balanceOf[address(arg1)] > -arg2 - 1:
                                            revert with 'NH{q', 17
                                        if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(arg1)] += arg2
                                        emit Transfer(arg2, msg.sender, arg1);
                                    else:
                                        if totalFees <= 0:
                                            if not msg.sender:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                            if not arg1:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                            if arg2 > balanceOf[address(msg.sender)]:
                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                                            if balanceOf[address(msg.sender)] < arg2:
                                                revert with 'NH{q', 17
                                            balanceOf[address(msg.sender)] -= arg2
                                            if balanceOf[address(arg1)] > -arg2 - 1:
                                                revert with 'NH{q', 17
                                            if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(arg1)] += arg2
                                            emit Transfer(arg2, msg.sender, arg1);
                                        else:
                                            if not arg2:
                                                if not arg2:
                                                    if 0 > arg2:
                                                        revert with 0, 'SafeMath: subtraction overflow', 0
                                                    if arg2 < 0:
                                                        revert with 'NH{q', 17
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if not this.address:
                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                    if 0 > balanceOf[address(msg.sender)]:
                                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                                    if balanceOf[address(msg.sender)] < 0:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(this.address)] > -1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    emit Transfer(0, msg.sender, this.address);
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if 0 > balanceOf[address(msg.sender)]:
                                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                                    if balanceOf[address(msg.sender)] < 0:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[57005] > -1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[57005] < balanceOf[57005]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    emit Transfer(0, msg.sender, 57005);
                                                    emit TokenBurn(0, msg.sender);
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if not arg1:
                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                    if arg2 > balanceOf[address(msg.sender)]:
                                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                                    if balanceOf[address(msg.sender)] < arg2:
                                                        revert with 'NH{q', 17
                                                    balanceOf[address(msg.sender)] -= arg2
                                                    if balanceOf[address(arg1)] > -arg2 - 1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    balanceOf[address(arg1)] += arg2
                                                    emit Transfer(arg2, msg.sender, arg1);
                                                else:
                                                    if arg2 and burnFee > -1 / arg2:
                                                        revert with 'NH{q', 17
                                                    if not arg2:
                                                        revert with 'NH{q', 18
                                                    if arg2 * burnFee / arg2 != burnFee:
                                                        revert with 0, 'SafeMath: multiplication overflow'
                                                    if 0 > -(arg2 * burnFee / 100) - 1:
                                                        revert with 'NH{q', 17
                                                    if arg2 * burnFee / 100 < 0:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if arg2 * burnFee / 100 > arg2:
                                                        revert with 0, 'SafeMath: subtraction overflow', 0
                                                    if arg2 < arg2 * burnFee / 100:
                                                        revert with 'NH{q', 17
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if not this.address:
                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                    if 0 > balanceOf[address(msg.sender)]:
                                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                                    if balanceOf[address(msg.sender)] < 0:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(this.address)] > -1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    emit Transfer(0, msg.sender, this.address);
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if arg2 * burnFee / 100 > balanceOf[address(msg.sender)]:
                                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                                    if balanceOf[address(msg.sender)] < arg2 * burnFee / 100:
                                                        revert with 'NH{q', 17
                                                    balanceOf[address(msg.sender)] -= arg2 * burnFee / 100
                                                    if balanceOf[57005] > -(arg2 * burnFee / 100) - 1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[57005] + (arg2 * burnFee / 100) < balanceOf[57005]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    balanceOf[57005] += arg2 * burnFee / 100
                                                    emit Transfer((arg2 * burnFee / 100), msg.sender, 57005);
                                                    emit TokenBurn((arg2 * burnFee / 100), msg.sender);
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if not arg1:
                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                    if arg2 - (arg2 * burnFee / 100) > balanceOf[address(msg.sender)]:
                                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                                    if balanceOf[address(msg.sender)] < arg2 - (arg2 * burnFee / 100):
                                                        revert with 'NH{q', 17
                                                    balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * burnFee / 100)
                                                    if balanceOf[address(arg1)] > -arg2 + (arg2 * burnFee / 100) - 1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(arg1)] + arg2 - (arg2 * burnFee / 100) < balanceOf[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * burnFee / 100)
                                                    emit Transfer((arg2 - (arg2 * burnFee / 100)), msg.sender, arg1);
                                            else:
                                                if arg2 and stor14 > -1 / arg2:
                                                    revert with 'NH{q', 17
                                                if not arg2:
                                                    revert with 'NH{q', 18
                                                if arg2 * stor14 / arg2 != stor14:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeMath: multiplication overflow'
                                                if not arg2:
                                                    if arg2 * stor14 / 100 > -1:
                                                        revert with 'NH{q', 17
                                                    if arg2 * stor14 / 100 < arg2 * stor14 / 100:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if arg2 * stor14 / 100 > arg2:
                                                        revert with 0, 'SafeMath: subtraction overflow', 0
                                                    if arg2 < arg2 * stor14 / 100:
                                                        revert with 'NH{q', 17
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if not this.address:
                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                    if arg2 * stor14 / 100 > balanceOf[address(msg.sender)]:
                                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                                    if balanceOf[address(msg.sender)] < arg2 * stor14 / 100:
                                                        revert with 'NH{q', 17
                                                    balanceOf[address(msg.sender)] -= arg2 * stor14 / 100
                                                    if balanceOf[address(this.address)] > -(arg2 * stor14 / 100) - 1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(this.address)] + (arg2 * stor14 / 100) < balanceOf[address(this.address)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    balanceOf[address(this.address)] += arg2 * stor14 / 100
                                                    emit Transfer((arg2 * stor14 / 100), msg.sender, this.address);
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if 0 > balanceOf[address(msg.sender)]:
                                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                                    if balanceOf[address(msg.sender)] < 0:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[57005] > -1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[57005] < balanceOf[57005]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    emit Transfer(0, msg.sender, 57005);
                                                    emit TokenBurn(0, msg.sender);
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if not arg1:
                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                    if arg2 - (arg2 * stor14 / 100) > balanceOf[address(msg.sender)]:
                                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                                    if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor14 / 100):
                                                        revert with 'NH{q', 17
                                                    balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor14 / 100)
                                                    if balanceOf[address(arg1)] > -arg2 + (arg2 * stor14 / 100) - 1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) < balanceOf[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100)
                                                    emit Transfer((arg2 - (arg2 * stor14 / 100)), msg.sender, arg1);
                                                else:
                                                    if arg2 and burnFee > -1 / arg2:
                                                        revert with 'NH{q', 17
                                                    if not arg2:
                                                        revert with 'NH{q', 18
                                                    if arg2 * burnFee / arg2 != burnFee:
                                                        revert with 0, 'SafeMath: multiplication overflow'
                                                    if arg2 * stor14 / 100 > -(arg2 * burnFee / 100) - 1:
                                                        revert with 'NH{q', 17
                                                    if (arg2 * stor14 / 100) + (arg2 * burnFee / 100) < arg2 * stor14 / 100:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if (arg2 * stor14 / 100) + (arg2 * burnFee / 100) > arg2:
                                                        revert with 0, 'SafeMath: subtraction overflow', 0
                                                    if arg2 < (arg2 * stor14 / 100) + (arg2 * burnFee / 100):
                                                        revert with 'NH{q', 17
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if not this.address:
                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                    if arg2 * stor14 / 100 > balanceOf[address(msg.sender)]:
                                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                                    if balanceOf[address(msg.sender)] < arg2 * stor14 / 100:
                                                        revert with 'NH{q', 17
                                                    balanceOf[address(msg.sender)] -= arg2 * stor14 / 100
                                                    if balanceOf[address(this.address)] > -(arg2 * stor14 / 100) - 1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(this.address)] + (arg2 * stor14 / 100) < balanceOf[address(this.address)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    balanceOf[address(this.address)] += arg2 * stor14 / 100
                                                    emit Transfer((arg2 * stor14 / 100), msg.sender, this.address);
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if arg2 * burnFee / 100 > balanceOf[address(msg.sender)]:
                                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                                    if balanceOf[address(msg.sender)] < arg2 * burnFee / 100:
                                                        revert with 'NH{q', 17
                                                    balanceOf[address(msg.sender)] -= arg2 * burnFee / 100
                                                    if balanceOf[57005] > -(arg2 * burnFee / 100) - 1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[57005] + (arg2 * burnFee / 100) < balanceOf[57005]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    balanceOf[57005] += arg2 * burnFee / 100
                                                    emit Transfer((arg2 * burnFee / 100), msg.sender, 57005);
                                                    emit TokenBurn((arg2 * burnFee / 100), msg.sender);
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if not arg1:
                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                    if arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100) > balanceOf[address(msg.sender)]:
                                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                                    if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100):
                                                        revert with 'NH{q', 17
                                                    balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor14 / 100) + (arg2 * burnFee / 100)
                                                    if balanceOf[address(arg1)] > -arg2 + (arg2 * stor14 / 100) + (arg2 * burnFee / 100) - 1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100) < balanceOf[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100)
                                                    emit Transfer((arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100)), msg.sender, arg1);
                            else:
                                stor22 = 1
                                if balanceOf[address(this.address)]:
                                    if balanceOf[address(this.address)] and liquidityFee > -1 / balanceOf[address(this.address)]:
                                        revert with 'NH{q', 17
                                    if not balanceOf[address(this.address)]:
                                        revert with 'NH{q', 18
                                    if balanceOf[address(this.address)] * liquidityFee / balanceOf[address(this.address)] != liquidityFee:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeMath: multiplication overflow'
                                    mem[96] = 26
                                    mem[128] = 'SafeMath: division by zero'
                                    if stor14 <= 0:
                                        revert with 0, 'SafeMath: division by zero', 0
                                    if not stor14:
                                        revert with 'NH{q', 18
                                    if balanceOf[address(this.address)]:
                                        if balanceOf[address(this.address)] and marketingFee > -1 / balanceOf[address(this.address)]:
                                            revert with 'NH{q', 17
                                        if not balanceOf[address(this.address)]:
                                            revert with 'NH{q', 18
                                        if balanceOf[address(this.address)] * marketingFee / balanceOf[address(this.address)] != marketingFee:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        mem[160] = 26
                                        mem[192] = 'SafeMath: division by zero'
                                        if stor14 <= 0:
                                            revert with 0, 'SafeMath: division by zero', 0
                                        if not stor14:
                                            revert with 'NH{q', 18
                                        mem[224] = 26
                                        mem[256] = 'SafeMath: division by zero'
                                        mem[288] = 30
                                        mem[320] = 'SafeMath: subtraction overflow'
                                        if balanceOf[address(this.address)] * liquidityFee / stor14 / 2 > balanceOf[address(this.address)] * liquidityFee / stor14:
                                            revert with 0, 'SafeMath: subtraction overflow', 0
                                        if balanceOf[address(this.address)] * liquidityFee / stor14 < balanceOf[address(this.address)] * liquidityFee / stor14 / 2:
                                            revert with 'NH{q', 17
                                        mem[352] = 2
                                        mem[384] = this.address
                                        require ext_code.size(uniswapV2RouterAddress)
                                        staticcall uniswapV2RouterAddress.WETH() with:
                                                gas gas_remaining wei
                                        mem[448] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                        mem[416] = ext_call.return_data[12 len 20]
                                        if not this.address:
                                            revert with 0, 'ERC20: approve from the zero address'
                                        if not uniswapV2RouterAddress:
                                            revert with 0, 'ERC20: approve to the zero address'
                                        allowance[address(this.address)][stor19].field_0 = balanceOf[address(this.address)] * liquidityFee / stor14 / 2
                                        allowance[address(this.address)][stor19].field_255 = 0
                                        emit Approval((balanceOf[address(this.address)] * liquidityFee / stor14 / 2), this.address, uniswapV2RouterAddress);
                                        mem[ceil32(return_data.size) + 448] = 0x791ac94700000000000000000000000000000000000000000000000000000000
                                        mem[ceil32(return_data.size) + 452] = balanceOf[address(this.address)] * liquidityFee / stor14 / 2
                                        idx = 0
                                        s = 384
                                        t = ceil32(return_data.size) + 644
                                        while idx < 2:
                                            mem[t] = mem[s + 12 len 20]
                                            idx = idx + 1
                                            s = s + 32
                                            t = t + 32
                                            continue 
                                        require ext_code.size(uniswapV2RouterAddress)
                                        call uniswapV2RouterAddress.swapExactTokensForETHSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args Mask(255, 1, balanceOf[address(this.address)] * liquidityFee / stor14), 0, 160, address(this.address), block.timestamp, 2, mem[ceil32(return_data.size) + 644 len 64]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[ceil32(return_data.size) + 448] = 30
                                        mem[ceil32(return_data.size) + 480] = 'SafeMath: subtraction overflow'
                                        if eth.balance(this.address) > eth.balance(this.address):
                                            revert with 0, 'SafeMath: subtraction overflow', 0
                                        if eth.balance(this.address) < eth.balance(this.address):
                                            revert with 'NH{q', 17
                                        if not this.address:
                                            revert with 0, 'ERC20: approve from the zero address'
                                        if not uniswapV2RouterAddress:
                                            revert with 0, 'ERC20: approve to the zero address'
                                        allowance[address(this.address)][stor19].field_0 = (balanceOf[address(this.address)] * liquidityFee / stor14) - (balanceOf[address(this.address)] * liquidityFee / stor14 / 2)
                                        emit Approval(((balanceOf[address(this.address)] * liquidityFee / stor14) - (balanceOf[address(this.address)] * liquidityFee / stor14 / 2)), this.address, uniswapV2RouterAddress);
                                        mem[ceil32(return_data.size) + 580] = 0
                                        mem[ceil32(return_data.size) + 612] = 0
                                        mem[ceil32(return_data.size) + 644] = owner
                                        mem[ceil32(return_data.size) + 676] = block.timestamp
                                        require ext_code.size(uniswapV2RouterAddress)
                                        call uniswapV2RouterAddress.addLiquidityETH(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                             gas gas_remaining wei
                                            args address(this.address), (balanceOf[address(this.address)] * liquidityFee / stor14) - (balanceOf[address(this.address)] * liquidityFee / stor14 / 2), 0, 0, owner, block.timestamp
                                        mem[ceil32(return_data.size) + 512 len 96] = ext_call.return_data[0 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 96
                                        require ext_call.return_data[0] == ext_call.return_data[0]
                                        require ext_call.return_data[32] == ext_call.return_data[32]
                                        require ext_call.return_data[64] == ext_call.return_data[64]
                                        mem[(2 * ceil32(return_data.size)) + 512] = 3
                                        mem[(2 * ceil32(return_data.size)) + 544] = this.address
                                        require ext_code.size(uniswapV2RouterAddress)
                                        staticcall uniswapV2RouterAddress.WETH() with:
                                                gas gas_remaining wei
                                        mem[(2 * ceil32(return_data.size)) + 640] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[64] = (4 * ceil32(return_data.size)) + 640
                                        require return_data.size >= 32
                                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                        mem[(2 * ceil32(return_data.size)) + 576] = ext_call.return_data[12 len 20]
                                        mem[(2 * ceil32(return_data.size)) + 608] = sub_e5148bd6Address
                                        if not this.address:
                                            revert with 0, 'ERC20: approve from the zero address'
                                        if not uniswapV2RouterAddress:
                                            revert with 0, 'ERC20: approve to the zero address'
                                        mem[0] = uniswapV2RouterAddress
                                        mem[32] = sha3(address(this.address), 10)
                                        allowance[address(this.address)][stor19].field_0 = balanceOf[address(this.address)] * marketingFee / stor14
                                        emit Approval((balanceOf[address(this.address)] * marketingFee / stor14), this.address, uniswapV2RouterAddress);
                                        mem[(4 * ceil32(return_data.size)) + 640] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                        mem[(4 * ceil32(return_data.size)) + 644] = balanceOf[address(this.address)] * marketingFee / stor14
                                        mem[(4 * ceil32(return_data.size)) + 676] = 0
                                        mem[(4 * ceil32(return_data.size)) + 708] = 160
                                        mem[(4 * ceil32(return_data.size)) + 804] = 3
                                        idx = 0
                                        s = (2 * ceil32(return_data.size)) + 544
                                        t = (4 * ceil32(return_data.size)) + 836
                                        while idx < mem[(2 * ceil32(return_data.size)) + 512]:
                                            mem[t] = mem[s + 12 len 20]
                                            idx = idx + 1
                                            s = s + 32
                                            t = t + 32
                                            continue 
                                        mem[(4 * ceil32(return_data.size)) + 740] = this.address
                                        mem[(4 * ceil32(return_data.size)) + 772] = block.timestamp
                                        require ext_code.size(uniswapV2RouterAddress)
                                        call uniswapV2RouterAddress.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args balanceOf[address(this.address)] * marketingFee / stor14, 0, 160, address(this.address), block.timestamp, mem[(4 * ceil32(return_data.size)) + 804 len (32 * mem[(2 * ceil32(return_data.size)) + 512]) + 32]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(sub_e5148bd6Address)
                                        staticcall sub_e5148bd6Address.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_call.return_data[0] == ext_call.return_data[0]
                                        mem[(4 * ceil32(return_data.size)) + 644] = marketingAddress
                                        mem[(4 * ceil32(return_data.size)) + 676] = ext_call.return_data[0]
                                        require ext_code.size(sub_e5148bd6Address)
                                        call sub_e5148bd6Address.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args mem[(4 * ceil32(return_data.size)) + 644 len (7 * ceil32(return_data.size)) + 64]
                                        mem[(4 * ceil32(return_data.size)) + 640] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                        stor22 = 0
                                        if stor11[address(msg.sender)]:
                                            if not msg.sender:
                                                mem[(8 * ceil32(return_data.size)) + 640] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[(8 * ceil32(return_data.size)) + 644] = 32
                                                mem[(8 * ceil32(return_data.size)) + 676] = 37
                                                mem[(8 * ceil32(return_data.size)) + 708] = 'ERC20: transfer from the zero ad'
                                                mem[(8 * ceil32(return_data.size)) + 740] = 'dress'
                                                revert with memory
                                                  from (8 * ceil32(return_data.size)) + 640
                                                   len (13 * ceil32(return_data.size)) + 132
                                            if not arg1:
                                                mem[(8 * ceil32(return_data.size)) + 640] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[(8 * ceil32(return_data.size)) + 644] = 32
                                                mem[(8 * ceil32(return_data.size)) + 676] = 35
                                                mem[(8 * ceil32(return_data.size)) + 708] = 'ERC20: transfer to the zero addr'
                                                mem[(8 * ceil32(return_data.size)) + 740] = 'ess'
                                                revert with memory
                                                  from (8 * ceil32(return_data.size)) + 640
                                                   len (13 * ceil32(return_data.size)) + 132
                                            if arg2 > balanceOf[address(msg.sender)]:
                                                mem[(8 * ceil32(return_data.size)) + 736] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[(8 * ceil32(return_data.size)) + 740] = 32
                                                mem[(8 * ceil32(return_data.size)) + 772] = 38
                                                mem[(8 * ceil32(return_data.size)) + 804 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 710 len 26]
                                                mem[(8 * ceil32(return_data.size)) + 842] = 0
                                                revert with memory
                                                  from (8 * ceil32(return_data.size)) + 736
                                                   len (13 * ceil32(return_data.size)) + 132
                                            if balanceOf[address(msg.sender)] < arg2:
                                                revert with 'NH{q', 17
                                            balanceOf[address(msg.sender)] -= arg2
                                            if balanceOf[address(arg1)] > -arg2 - 1:
                                                revert with 'NH{q', 17
                                            if balanceOf[address(arg1)] + arg2 >= balanceOf[address(arg1)]:
                                                balanceOf[address(arg1)] += arg2
                                                emit Transfer(arg2, msg.sender, arg1);
                                                return 1
                                            mem[(8 * ceil32(return_data.size)) + 736] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[(8 * ceil32(return_data.size)) + 740] = 32
                                            mem[(8 * ceil32(return_data.size)) + 772] = 27
                                            mem[(8 * ceil32(return_data.size)) + 804] = 'SafeMath: addition overflow'
                                            revert with memory
                                              from (8 * ceil32(return_data.size)) + 736
                                               len (13 * ceil32(return_data.size)) + 100
                                        if stor11[address(arg1)]:
                                            if not msg.sender:
                                                mem[(8 * ceil32(return_data.size)) + 640] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[(8 * ceil32(return_data.size)) + 644] = 32
                                                mem[(8 * ceil32(return_data.size)) + 676] = 37
                                                mem[(8 * ceil32(return_data.size)) + 708] = 'ERC20: transfer from the zero ad'
                                                mem[(8 * ceil32(return_data.size)) + 740] = 'dress'
                                                revert with memory
                                                  from (8 * ceil32(return_data.size)) + 640
                                                   len (13 * ceil32(return_data.size)) + 132
                                            if not arg1:
                                                mem[(8 * ceil32(return_data.size)) + 640] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[(8 * ceil32(return_data.size)) + 644] = 32
                                                mem[(8 * ceil32(return_data.size)) + 676] = 35
                                                mem[(8 * ceil32(return_data.size)) + 708] = 'ERC20: transfer to the zero addr'
                                                mem[(8 * ceil32(return_data.size)) + 740] = 'ess'
                                                revert with memory
                                                  from (8 * ceil32(return_data.size)) + 640
                                                   len (13 * ceil32(return_data.size)) + 132
                                            if arg2 > balanceOf[address(msg.sender)]:
                                                mem[(8 * ceil32(return_data.size)) + 736] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[(8 * ceil32(return_data.size)) + 740] = 32
                                                mem[(8 * ceil32(return_data.size)) + 772] = 38
                                                mem[(8 * ceil32(return_data.size)) + 804 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 710 len 26]
                                                mem[(8 * ceil32(return_data.size)) + 842] = 0
                                                revert with memory
                                                  from (8 * ceil32(return_data.size)) + 736
                                                   len (13 * ceil32(return_data.size)) + 132
                                            if balanceOf[address(msg.sender)] < arg2:
                                                revert with 'NH{q', 17
                                            balanceOf[address(msg.sender)] -= arg2
                                            if balanceOf[address(arg1)] > -arg2 - 1:
                                                revert with 'NH{q', 17
                                            if balanceOf[address(arg1)] + arg2 >= balanceOf[address(arg1)]:
                                                balanceOf[address(arg1)] += arg2
                                                emit Transfer(arg2, msg.sender, arg1);
                                                return 1
                                            mem[(8 * ceil32(return_data.size)) + 736] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[(8 * ceil32(return_data.size)) + 740] = 32
                                            mem[(8 * ceil32(return_data.size)) + 772] = 27
                                            mem[(8 * ceil32(return_data.size)) + 804] = 'SafeMath: addition overflow'
                                            revert with memory
                                              from (8 * ceil32(return_data.size)) + 736
                                               len (13 * ceil32(return_data.size)) + 100
                                        if totalFees <= 0:
                                            if not msg.sender:
                                                mem[(8 * ceil32(return_data.size)) + 640] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[(8 * ceil32(return_data.size)) + 644] = 32
                                                mem[(8 * ceil32(return_data.size)) + 676] = 37
                                                mem[(8 * ceil32(return_data.size)) + 708] = 'ERC20: transfer from the zero ad'
                                                mem[(8 * ceil32(return_data.size)) + 740] = 'dress'
                                                revert with memory
                                                  from (8 * ceil32(return_data.size)) + 640
                                                   len (13 * ceil32(return_data.size)) + 132
                                            if not arg1:
                                                mem[(8 * ceil32(return_data.size)) + 640] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[(8 * ceil32(return_data.size)) + 644] = 32
                                                mem[(8 * ceil32(return_data.size)) + 676] = 35
                                                mem[(8 * ceil32(return_data.size)) + 708] = 'ERC20: transfer to the zero addr'
                                                mem[(8 * ceil32(return_data.size)) + 740] = 'ess'
                                                revert with memory
                                                  from (8 * ceil32(return_data.size)) + 640
                                                   len (13 * ceil32(return_data.size)) + 132
                                            if arg2 > balanceOf[address(msg.sender)]:
                                                mem[(8 * ceil32(return_data.size)) + 736] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[(8 * ceil32(return_data.size)) + 740] = 32
                                                mem[(8 * ceil32(return_data.size)) + 772] = 38
                                                mem[(8 * ceil32(return_data.size)) + 804 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 710 len 26]
                                                mem[(8 * ceil32(return_data.size)) + 842] = 0
                                                revert with memory
                                                  from (8 * ceil32(return_data.size)) + 736
                                                   len (13 * ceil32(return_data.size)) + 132
                                            if balanceOf[address(msg.sender)] < arg2:
                                                revert with 'NH{q', 17
                                            balanceOf[address(msg.sender)] -= arg2
                                            if balanceOf[address(arg1)] > -arg2 - 1:
                                                revert with 'NH{q', 17
                                            if balanceOf[address(arg1)] + arg2 >= balanceOf[address(arg1)]:
                                                balanceOf[address(arg1)] += arg2
                                                emit Transfer(arg2, msg.sender, arg1);
                                                return 1
                                            mem[(8 * ceil32(return_data.size)) + 736] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[(8 * ceil32(return_data.size)) + 740] = 32
                                            mem[(8 * ceil32(return_data.size)) + 772] = 27
                                            mem[(8 * ceil32(return_data.size)) + 804] = 'SafeMath: addition overflow'
                                            revert with memory
                                              from (8 * ceil32(return_data.size)) + 736
                                               len (13 * ceil32(return_data.size)) + 100
                                        if not arg2:
                                            if not arg2:
                                                if 0 > arg2:
                                                    mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 868] = 30
                                                    mem[(8 * ceil32(return_data.size)) + 900] = 'SafeMath: subtraction overflow'
                                                    mem[(8 * ceil32(return_data.size)) + 930] = 0
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 832
                                                       len (13 * ceil32(return_data.size)) + 100
                                                if arg2 < 0:
                                                    revert with 'NH{q', 17
                                                if not msg.sender:
                                                    mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 868] = 37
                                                    mem[(8 * ceil32(return_data.size)) + 900] = 'ERC20: transfer from the zero ad'
                                                    mem[(8 * ceil32(return_data.size)) + 932] = 'dress'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 832
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if not this.address:
                                                    mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 868] = 35
                                                    mem[(8 * ceil32(return_data.size)) + 900] = 'ERC20: transfer to the zero addr'
                                                    mem[(8 * ceil32(return_data.size)) + 932] = 'ess'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 832
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if 0 > balanceOf[address(msg.sender)]:
                                                    mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 964] = 38
                                                    mem[(8 * ceil32(return_data.size)) + 996 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 902 len 26]
                                                    mem[(8 * ceil32(return_data.size)) + 1034] = 0
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 928
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if balanceOf[address(msg.sender)] < 0:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(this.address)] > -1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                                    mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 964] = 27
                                                    mem[(8 * ceil32(return_data.size)) + 996] = 'SafeMath: addition overflow'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 928
                                                       len (13 * ceil32(return_data.size)) + 100
                                                emit Transfer(0, msg.sender, this.address);
                                                if not msg.sender:
                                                    mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 964] = 37
                                                    mem[(8 * ceil32(return_data.size)) + 996] = 'ERC20: transfer from the zero ad'
                                                    mem[(8 * ceil32(return_data.size)) + 1028] = 'dress'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 928
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if 0 > balanceOf[address(msg.sender)]:
                                                    mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 1060] = 38
                                                    mem[(8 * ceil32(return_data.size)) + 1092 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 998 len 26]
                                                    mem[(8 * ceil32(return_data.size)) + 1130] = 0
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 1024
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if balanceOf[address(msg.sender)] < 0:
                                                    revert with 'NH{q', 17
                                                if balanceOf[57005] > -1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[57005] < balanceOf[57005]:
                                                    mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 1060] = 27
                                                    mem[(8 * ceil32(return_data.size)) + 1092] = 'SafeMath: addition overflow'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 1024
                                                       len (13 * ceil32(return_data.size)) + 100
                                                emit Transfer(0, msg.sender, 57005);
                                                emit TokenBurn(0, msg.sender);
                                                if not msg.sender:
                                                    mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 1060] = 37
                                                    mem[(8 * ceil32(return_data.size)) + 1092] = 'ERC20: transfer from the zero ad'
                                                    mem[(8 * ceil32(return_data.size)) + 1124] = 'dress'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 1024
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if not arg1:
                                                    mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 1060] = 35
                                                    mem[(8 * ceil32(return_data.size)) + 1092] = 'ERC20: transfer to the zero addr'
                                                    mem[(8 * ceil32(return_data.size)) + 1124] = 'ess'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 1024
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if arg2 > balanceOf[address(msg.sender)]:
                                                    mem[(8 * ceil32(return_data.size)) + 1120] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 1124] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 1156] = 38
                                                    mem[(8 * ceil32(return_data.size)) + 1188 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 1094 len 26]
                                                    mem[(8 * ceil32(return_data.size)) + 1226] = 0
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 1120
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if balanceOf[address(msg.sender)] < arg2:
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] -= arg2
                                                if balanceOf[address(arg1)] > -arg2 - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(arg1)] + arg2 >= balanceOf[address(arg1)]:
                                                    balanceOf[address(arg1)] += arg2
                                                    emit Transfer(arg2, msg.sender, arg1);
                                                    return 1
                                            else:
                                                if arg2 and burnFee > -1 / arg2:
                                                    revert with 'NH{q', 17
                                                if not arg2:
                                                    revert with 'NH{q', 18
                                                if arg2 * burnFee / arg2 != burnFee:
                                                    mem[(8 * ceil32(return_data.size)) + 704] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 708] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 740] = 33
                                                    mem[(8 * ceil32(return_data.size)) + 772] = 'SafeMath: multiplication overflo'
                                                    mem[(8 * ceil32(return_data.size)) + 804] = 'w'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 704
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if 0 > -(arg2 * burnFee / 100) - 1:
                                                    revert with 'NH{q', 17
                                                if arg2 * burnFee / 100 < 0:
                                                    mem[(8 * ceil32(return_data.size)) + 768] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 772] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 804] = 27
                                                    mem[(8 * ceil32(return_data.size)) + 836] = 'SafeMath: addition overflow'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 768
                                                       len (13 * ceil32(return_data.size)) + 100
                                                if arg2 * burnFee / 100 > arg2:
                                                    mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 868] = 30
                                                    mem[(8 * ceil32(return_data.size)) + 900] = 'SafeMath: subtraction overflow'
                                                    mem[(8 * ceil32(return_data.size)) + 930] = 0
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 832
                                                       len (13 * ceil32(return_data.size)) + 100
                                                if arg2 < arg2 * burnFee / 100:
                                                    revert with 'NH{q', 17
                                                if not msg.sender:
                                                    mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 868] = 37
                                                    mem[(8 * ceil32(return_data.size)) + 900] = 'ERC20: transfer from the zero ad'
                                                    mem[(8 * ceil32(return_data.size)) + 932] = 'dress'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 832
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if not this.address:
                                                    mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 868] = 35
                                                    mem[(8 * ceil32(return_data.size)) + 900] = 'ERC20: transfer to the zero addr'
                                                    mem[(8 * ceil32(return_data.size)) + 932] = 'ess'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 832
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if 0 > balanceOf[address(msg.sender)]:
                                                    mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 964] = 38
                                                    mem[(8 * ceil32(return_data.size)) + 996 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 902 len 26]
                                                    mem[(8 * ceil32(return_data.size)) + 1034] = 0
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 928
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if balanceOf[address(msg.sender)] < 0:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(this.address)] > -1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                                    mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 964] = 27
                                                    mem[(8 * ceil32(return_data.size)) + 996] = 'SafeMath: addition overflow'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 928
                                                       len (13 * ceil32(return_data.size)) + 100
                                                emit Transfer(0, msg.sender, this.address);
                                                if not msg.sender:
                                                    mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 964] = 37
                                                    mem[(8 * ceil32(return_data.size)) + 996] = 'ERC20: transfer from the zero ad'
                                                    mem[(8 * ceil32(return_data.size)) + 1028] = 'dress'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 928
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if arg2 * burnFee / 100 > balanceOf[address(msg.sender)]:
                                                    mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 1060] = 38
                                                    mem[(8 * ceil32(return_data.size)) + 1092 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 998 len 26]
                                                    mem[(8 * ceil32(return_data.size)) + 1130] = 0
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 1024
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if balanceOf[address(msg.sender)] < arg2 * burnFee / 100:
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] -= arg2 * burnFee / 100
                                                if balanceOf[57005] > -(arg2 * burnFee / 100) - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[57005] + (arg2 * burnFee / 100) < balanceOf[57005]:
                                                    mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 1060] = 27
                                                    mem[(8 * ceil32(return_data.size)) + 1092] = 'SafeMath: addition overflow'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 1024
                                                       len (13 * ceil32(return_data.size)) + 100
                                                balanceOf[57005] += arg2 * burnFee / 100
                                                emit Transfer((arg2 * burnFee / 100), msg.sender, 57005);
                                                emit TokenBurn((arg2 * burnFee / 100), msg.sender);
                                                if not msg.sender:
                                                    mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 1060] = 37
                                                    mem[(8 * ceil32(return_data.size)) + 1092] = 'ERC20: transfer from the zero ad'
                                                    mem[(8 * ceil32(return_data.size)) + 1124] = 'dress'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 1024
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if not arg1:
                                                    mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 1060] = 35
                                                    mem[(8 * ceil32(return_data.size)) + 1092] = 'ERC20: transfer to the zero addr'
                                                    mem[(8 * ceil32(return_data.size)) + 1124] = 'ess'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 1024
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if arg2 - (arg2 * burnFee / 100) > balanceOf[address(msg.sender)]:
                                                    mem[(8 * ceil32(return_data.size)) + 1120] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 1124] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 1156] = 38
                                                    mem[(8 * ceil32(return_data.size)) + 1188 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 1094 len 26]
                                                    mem[(8 * ceil32(return_data.size)) + 1226] = 0
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 1120
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if balanceOf[address(msg.sender)] < arg2 - (arg2 * burnFee / 100):
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * burnFee / 100)
                                                if balanceOf[address(arg1)] > -arg2 + (arg2 * burnFee / 100) - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(arg1)] + arg2 - (arg2 * burnFee / 100) >= balanceOf[address(arg1)]:
                                                    balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * burnFee / 100)
                                                    emit Transfer((arg2 - (arg2 * burnFee / 100)), msg.sender, arg1);
                                                    return 1
                                        else:
                                            if arg2 and stor14 > -1 / arg2:
                                                revert with 'NH{q', 17
                                            if not arg2:
                                                revert with 'NH{q', 18
                                            if arg2 * stor14 / arg2 != stor14:
                                                mem[(8 * ceil32(return_data.size)) + 640] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[(8 * ceil32(return_data.size)) + 644] = 32
                                                mem[(8 * ceil32(return_data.size)) + 676] = 33
                                                mem[(8 * ceil32(return_data.size)) + 708] = 'SafeMath: multiplication overflo'
                                                mem[(8 * ceil32(return_data.size)) + 740] = 'w'
                                                revert with memory
                                                  from (8 * ceil32(return_data.size)) + 640
                                                   len (13 * ceil32(return_data.size)) + 132
                                            if not arg2:
                                                if arg2 * stor14 / 100 > -1:
                                                    revert with 'NH{q', 17
                                                if arg2 * stor14 / 100 < arg2 * stor14 / 100:
                                                    mem[(8 * ceil32(return_data.size)) + 768] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 772] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 804] = 27
                                                    mem[(8 * ceil32(return_data.size)) + 836] = 'SafeMath: addition overflow'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 768
                                                       len (13 * ceil32(return_data.size)) + 100
                                                if arg2 * stor14 / 100 > arg2:
                                                    mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 868] = 30
                                                    mem[(8 * ceil32(return_data.size)) + 900] = 'SafeMath: subtraction overflow'
                                                    mem[(8 * ceil32(return_data.size)) + 930] = 0
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 832
                                                       len (13 * ceil32(return_data.size)) + 100
                                                if arg2 < arg2 * stor14 / 100:
                                                    revert with 'NH{q', 17
                                                if not msg.sender:
                                                    mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 868] = 37
                                                    mem[(8 * ceil32(return_data.size)) + 900] = 'ERC20: transfer from the zero ad'
                                                    mem[(8 * ceil32(return_data.size)) + 932] = 'dress'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 832
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if not this.address:
                                                    mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 868] = 35
                                                    mem[(8 * ceil32(return_data.size)) + 900] = 'ERC20: transfer to the zero addr'
                                                    mem[(8 * ceil32(return_data.size)) + 932] = 'ess'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 832
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if arg2 * stor14 / 100 > balanceOf[address(msg.sender)]:
                                                    mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 964] = 38
                                                    mem[(8 * ceil32(return_data.size)) + 996 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 902 len 26]
                                                    mem[(8 * ceil32(return_data.size)) + 1034] = 0
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 928
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if balanceOf[address(msg.sender)] < arg2 * stor14 / 100:
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] -= arg2 * stor14 / 100
                                                if balanceOf[address(this.address)] > -(arg2 * stor14 / 100) - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(this.address)] + (arg2 * stor14 / 100) < balanceOf[address(this.address)]:
                                                    mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 964] = 27
                                                    mem[(8 * ceil32(return_data.size)) + 996] = 'SafeMath: addition overflow'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 928
                                                       len (13 * ceil32(return_data.size)) + 100
                                                balanceOf[address(this.address)] += arg2 * stor14 / 100
                                                emit Transfer((arg2 * stor14 / 100), msg.sender, this.address);
                                                if not msg.sender:
                                                    mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 964] = 37
                                                    mem[(8 * ceil32(return_data.size)) + 996] = 'ERC20: transfer from the zero ad'
                                                    mem[(8 * ceil32(return_data.size)) + 1028] = 'dress'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 928
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if 0 > balanceOf[address(msg.sender)]:
                                                    mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 1060] = 38
                                                    mem[(8 * ceil32(return_data.size)) + 1092 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 998 len 26]
                                                    mem[(8 * ceil32(return_data.size)) + 1130] = 0
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 1024
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if balanceOf[address(msg.sender)] < 0:
                                                    revert with 'NH{q', 17
                                                if balanceOf[57005] > -1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[57005] < balanceOf[57005]:
                                                    mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 1060] = 27
                                                    mem[(8 * ceil32(return_data.size)) + 1092] = 'SafeMath: addition overflow'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 1024
                                                       len (13 * ceil32(return_data.size)) + 100
                                                emit Transfer(0, msg.sender, 57005);
                                                emit TokenBurn(0, msg.sender);
                                                if not msg.sender:
                                                    mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 1060] = 37
                                                    mem[(8 * ceil32(return_data.size)) + 1092] = 'ERC20: transfer from the zero ad'
                                                    mem[(8 * ceil32(return_data.size)) + 1124] = 'dress'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 1024
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if not arg1:
                                                    mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 1060] = 35
                                                    mem[(8 * ceil32(return_data.size)) + 1092] = 'ERC20: transfer to the zero addr'
                                                    mem[(8 * ceil32(return_data.size)) + 1124] = 'ess'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 1024
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if arg2 - (arg2 * stor14 / 100) > balanceOf[address(msg.sender)]:
                                                    mem[(8 * ceil32(return_data.size)) + 1120] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 1124] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 1156] = 38
                                                    mem[(8 * ceil32(return_data.size)) + 1188 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 1094 len 26]
                                                    mem[(8 * ceil32(return_data.size)) + 1226] = 0
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 1120
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor14 / 100):
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor14 / 100)
                                                if balanceOf[address(arg1)] > -arg2 + (arg2 * stor14 / 100) - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) >= balanceOf[address(arg1)]:
                                                    balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100)
                                                    emit Transfer((arg2 - (arg2 * stor14 / 100)), msg.sender, arg1);
                                                    return 1
                                            else:
                                                if arg2 and burnFee > -1 / arg2:
                                                    revert with 'NH{q', 17
                                                if not arg2:
                                                    revert with 'NH{q', 18
                                                if arg2 * burnFee / arg2 != burnFee:
                                                    mem[(8 * ceil32(return_data.size)) + 704] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 708] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 740] = 33
                                                    mem[(8 * ceil32(return_data.size)) + 772] = 'SafeMath: multiplication overflo'
                                                    mem[(8 * ceil32(return_data.size)) + 804] = 'w'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 704
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if arg2 * stor14 / 100 > -(arg2 * burnFee / 100) - 1:
                                                    revert with 'NH{q', 17
                                                if (arg2 * stor14 / 100) + (arg2 * burnFee / 100) < arg2 * stor14 / 100:
                                                    mem[(8 * ceil32(return_data.size)) + 768] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 772] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 804] = 27
                                                    mem[(8 * ceil32(return_data.size)) + 836] = 'SafeMath: addition overflow'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 768
                                                       len (13 * ceil32(return_data.size)) + 100
                                                if (arg2 * stor14 / 100) + (arg2 * burnFee / 100) > arg2:
                                                    mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 868] = 30
                                                    mem[(8 * ceil32(return_data.size)) + 900] = 'SafeMath: subtraction overflow'
                                                    mem[(8 * ceil32(return_data.size)) + 930] = 0
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 832
                                                       len (13 * ceil32(return_data.size)) + 100
                                                if arg2 < (arg2 * stor14 / 100) + (arg2 * burnFee / 100):
                                                    revert with 'NH{q', 17
                                                if not msg.sender:
                                                    mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 868] = 37
                                                    mem[(8 * ceil32(return_data.size)) + 900] = 'ERC20: transfer from the zero ad'
                                                    mem[(8 * ceil32(return_data.size)) + 932] = 'dress'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 832
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if not this.address:
                                                    mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 868] = 35
                                                    mem[(8 * ceil32(return_data.size)) + 900] = 'ERC20: transfer to the zero addr'
                                                    mem[(8 * ceil32(return_data.size)) + 932] = 'ess'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 832
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if arg2 * stor14 / 100 > balanceOf[address(msg.sender)]:
                                                    mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 964] = 38
                                                    mem[(8 * ceil32(return_data.size)) + 996 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 902 len 26]
                                                    mem[(8 * ceil32(return_data.size)) + 1034] = 0
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 928
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if balanceOf[address(msg.sender)] < arg2 * stor14 / 100:
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] -= arg2 * stor14 / 100
                                                if balanceOf[address(this.address)] > -(arg2 * stor14 / 100) - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(this.address)] + (arg2 * stor14 / 100) < balanceOf[address(this.address)]:
                                                    mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 964] = 27
                                                    mem[(8 * ceil32(return_data.size)) + 996] = 'SafeMath: addition overflow'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 928
                                                       len (13 * ceil32(return_data.size)) + 100
                                                balanceOf[address(this.address)] += arg2 * stor14 / 100
                                                emit Transfer((arg2 * stor14 / 100), msg.sender, this.address);
                                                if not msg.sender:
                                                    mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 964] = 37
                                                    mem[(8 * ceil32(return_data.size)) + 996] = 'ERC20: transfer from the zero ad'
                                                    mem[(8 * ceil32(return_data.size)) + 1028] = 'dress'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 928
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if arg2 * burnFee / 100 > balanceOf[address(msg.sender)]:
                                                    mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 1060] = 38
                                                    mem[(8 * ceil32(return_data.size)) + 1092 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 998 len 26]
                                                    mem[(8 * ceil32(return_data.size)) + 1130] = 0
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 1024
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if balanceOf[address(msg.sender)] < arg2 * burnFee / 100:
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] -= arg2 * burnFee / 100
                                                if balanceOf[57005] > -(arg2 * burnFee / 100) - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[57005] + (arg2 * burnFee / 100) < balanceOf[57005]:
                                                    mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 1060] = 27
                                                    mem[(8 * ceil32(return_data.size)) + 1092] = 'SafeMath: addition overflow'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 1024
                                                       len (13 * ceil32(return_data.size)) + 100
                                                balanceOf[57005] += arg2 * burnFee / 100
                                                emit Transfer((arg2 * burnFee / 100), msg.sender, 57005);
                                                emit TokenBurn((arg2 * burnFee / 100), msg.sender);
                                                if not msg.sender:
                                                    mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 1060] = 37
                                                    mem[(8 * ceil32(return_data.size)) + 1092] = 'ERC20: transfer from the zero ad'
                                                    mem[(8 * ceil32(return_data.size)) + 1124] = 'dress'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 1024
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if not arg1:
                                                    mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 1060] = 35
                                                    mem[(8 * ceil32(return_data.size)) + 1092] = 'ERC20: transfer to the zero addr'
                                                    mem[(8 * ceil32(return_data.size)) + 1124] = 'ess'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 1024
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100) > balanceOf[address(msg.sender)]:
                                                    mem[(8 * ceil32(return_data.size)) + 1120] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 1124] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 1156] = 38
                                                    mem[(8 * ceil32(return_data.size)) + 1188 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 1094 len 26]
                                                    mem[(8 * ceil32(return_data.size)) + 1226] = 0
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 1120
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100):
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor14 / 100) + (arg2 * burnFee / 100)
                                                if balanceOf[address(arg1)] > -arg2 + (arg2 * stor14 / 100) + (arg2 * burnFee / 100) - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100) >= balanceOf[address(arg1)]:
                                                    balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100)
                                                    emit Transfer((arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100)), msg.sender, arg1);
                                                    return 1
                                        mem[(8 * ceil32(return_data.size)) + 1120] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[(8 * ceil32(return_data.size)) + 1124] = 32
                                        mem[(8 * ceil32(return_data.size)) + 1156] = 27
                                        mem[(8 * ceil32(return_data.size)) + 1188] = 'SafeMath: addition overflow'
                                        revert with memory
                                          from (8 * ceil32(return_data.size)) + 1120
                                           len (13 * ceil32(return_data.size)) + 100
                                    mem[160] = 26
                                    mem[192] = 'SafeMath: division by zero'
                                    if stor14 <= 0:
                                        revert with 0, 'SafeMath: division by zero', 0
                                    if not stor14:
                                        revert with 'NH{q', 18
                                    mem[224] = 26
                                    mem[256] = 'SafeMath: division by zero'
                                    mem[288] = 30
                                    mem[320] = 'SafeMath: subtraction overflow'
                                    if balanceOf[address(this.address)] * liquidityFee / stor14 / 2 > balanceOf[address(this.address)] * liquidityFee / stor14:
                                        revert with 0, 'SafeMath: subtraction overflow', 0
                                    if balanceOf[address(this.address)] * liquidityFee / stor14 < balanceOf[address(this.address)] * liquidityFee / stor14 / 2:
                                        revert with 'NH{q', 17
                                    mem[352] = 2
                                    mem[384] = this.address
                                    require ext_code.size(uniswapV2RouterAddress)
                                    staticcall uniswapV2RouterAddress.WETH() with:
                                            gas gas_remaining wei
                                    mem[448] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                    mem[416] = ext_call.return_data[12 len 20]
                                    if not this.address:
                                        revert with 0, 'ERC20: approve from the zero address'
                                    if not uniswapV2RouterAddress:
                                        revert with 0, 'ERC20: approve to the zero address'
                                    allowance[address(this.address)][stor19].field_0 = balanceOf[address(this.address)] * liquidityFee / stor14 / 2
                                    allowance[address(this.address)][stor19].field_255 = 0
                                    emit Approval((balanceOf[address(this.address)] * liquidityFee / stor14 / 2), this.address, uniswapV2RouterAddress);
                                    mem[ceil32(return_data.size) + 448] = 0x791ac94700000000000000000000000000000000000000000000000000000000
                                    mem[ceil32(return_data.size) + 452] = balanceOf[address(this.address)] * liquidityFee / stor14 / 2
                                    idx = 0
                                    s = 384
                                    t = ceil32(return_data.size) + 644
                                    while idx < 2:
                                        mem[t] = mem[s + 12 len 20]
                                        idx = idx + 1
                                        s = s + 32
                                        t = t + 32
                                        continue 
                                    require ext_code.size(uniswapV2RouterAddress)
                                    call uniswapV2RouterAddress.swapExactTokensForETHSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                         gas gas_remaining wei
                                        args Mask(255, 1, balanceOf[address(this.address)] * liquidityFee / stor14), 0, 160, address(this.address), block.timestamp, 2, mem[ceil32(return_data.size) + 644 len 64]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    mem[ceil32(return_data.size) + 448] = 30
                                    mem[ceil32(return_data.size) + 480] = 'SafeMath: subtraction overflow'
                                    if eth.balance(this.address) > eth.balance(this.address):
                                        revert with 0, 'SafeMath: subtraction overflow', 0
                                    if eth.balance(this.address) < eth.balance(this.address):
                                        revert with 'NH{q', 17
                                    if not this.address:
                                        revert with 0, 'ERC20: approve from the zero address'
                                    if not uniswapV2RouterAddress:
                                        revert with 0, 'ERC20: approve to the zero address'
                                    allowance[address(this.address)][stor19].field_0 = (balanceOf[address(this.address)] * liquidityFee / stor14) - (balanceOf[address(this.address)] * liquidityFee / stor14 / 2)
                                    emit Approval(((balanceOf[address(this.address)] * liquidityFee / stor14) - (balanceOf[address(this.address)] * liquidityFee / stor14 / 2)), this.address, uniswapV2RouterAddress);
                                    mem[ceil32(return_data.size) + 580] = 0
                                    mem[ceil32(return_data.size) + 612] = 0
                                    mem[ceil32(return_data.size) + 644] = owner
                                    mem[ceil32(return_data.size) + 676] = block.timestamp
                                    require ext_code.size(uniswapV2RouterAddress)
                                    call uniswapV2RouterAddress.addLiquidityETH(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                         gas gas_remaining wei
                                        args address(this.address), (balanceOf[address(this.address)] * liquidityFee / stor14) - (balanceOf[address(this.address)] * liquidityFee / stor14 / 2), 0, 0, owner, block.timestamp
                                    mem[ceil32(return_data.size) + 512 len 96] = ext_call.return_data[0 len 96]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 96
                                    require ext_call.return_data[0] == ext_call.return_data[0]
                                    require ext_call.return_data[32] == ext_call.return_data[32]
                                    require ext_call.return_data[64] == ext_call.return_data[64]
                                    mem[(2 * ceil32(return_data.size)) + 512] = 3
                                    mem[(2 * ceil32(return_data.size)) + 544] = this.address
                                    require ext_code.size(uniswapV2RouterAddress)
                                    staticcall uniswapV2RouterAddress.WETH() with:
                                            gas gas_remaining wei
                                    mem[(2 * ceil32(return_data.size)) + 640] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    mem[64] = (4 * ceil32(return_data.size)) + 640
                                    require return_data.size >= 32
                                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                    mem[(2 * ceil32(return_data.size)) + 576] = ext_call.return_data[12 len 20]
                                    mem[(2 * ceil32(return_data.size)) + 608] = sub_e5148bd6Address
                                    if not this.address:
                                        revert with 0, 'ERC20: approve from the zero address'
                                    if not uniswapV2RouterAddress:
                                        revert with 0, 'ERC20: approve to the zero address'
                                    mem[0] = uniswapV2RouterAddress
                                    mem[32] = sha3(address(this.address), 10)
                                    allowance[address(this.address)][stor19].field_0 = 0 / stor14
                                    emit Approval((0 / stor14), this.address, uniswapV2RouterAddress);
                                    mem[(4 * ceil32(return_data.size)) + 640] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                    mem[(4 * ceil32(return_data.size)) + 644] = 0 / stor14
                                    mem[(4 * ceil32(return_data.size)) + 676] = 0
                                    mem[(4 * ceil32(return_data.size)) + 708] = 160
                                    mem[(4 * ceil32(return_data.size)) + 804] = 3
                                    idx = 0
                                    s = (2 * ceil32(return_data.size)) + 544
                                    t = (4 * ceil32(return_data.size)) + 836
                                    while idx < mem[(2 * ceil32(return_data.size)) + 512]:
                                        mem[t] = mem[s + 12 len 20]
                                        idx = idx + 1
                                        s = s + 32
                                        t = t + 32
                                        continue 
                                    mem[(4 * ceil32(return_data.size)) + 740] = this.address
                                    mem[(4 * ceil32(return_data.size)) + 772] = block.timestamp
                                    require ext_code.size(uniswapV2RouterAddress)
                                    call uniswapV2RouterAddress.mem[mem[64] len 4] with:
                                         gas gas_remaining wei
                                        args mem[mem[64] + 4 len (4 * ceil32(return_data.size)) + (32 * mem[(2 * ceil32(return_data.size)) + 512]) + -mem[64] + 832]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    mem[mem[64] + 4] = this.address
                                    require ext_code.size(sub_e5148bd6Address)
                                    staticcall sub_e5148bd6Address.0x70a08231 with:
                                            gas gas_remaining wei
                                           args address(this.address)
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _10829 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _10845 = mem[_10829]
                                    require mem[_10829] == mem[_10829]
                                    mem[mem[64] + 4] = marketingAddress
                                    mem[mem[64] + 36] = _10845
                                    require ext_code.size(sub_e5148bd6Address)
                                    call sub_e5148bd6Address.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args marketingAddress, _10845
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _10941 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require mem[_10941] == bool(mem[_10941])
                                    stor22 = 0
                                    mem[0] = msg.sender
                                    mem[32] = 11
                                    if stor11[address(msg.sender)]:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: transfer from the zero address'
                                        if not arg1:
                                            revert with 0, 'ERC20: transfer to the zero address'
                                        _10991 = mem[64]
                                        mem[64] = mem[64] + 96
                                        mem[_10991] = 38
                                        mem[_10991 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                        if arg2 > balanceOf[address(msg.sender)]:
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 38
                                            mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_10991 + 70 len 26]
                                            revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                        if balanceOf[address(msg.sender)] < arg2:
                                            revert with 'NH{q', 17
                                        balanceOf[address(msg.sender)] -= arg2
                                        if balanceOf[address(arg1)] > -arg2 - 1:
                                            revert with 'NH{q', 17
                                        if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(arg1)] += arg2
                                        emit Transfer(arg2, msg.sender, arg1);
                                    else:
                                        mem[0] = arg1
                                        mem[32] = 11
                                        if stor11[address(arg1)]:
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if not arg1:
                                                revert with 0, 'ERC20: transfer to the zero address'
                                            _11031 = mem[64]
                                            mem[64] = mem[64] + 96
                                            mem[_11031] = 38
                                            mem[_11031 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                            if arg2 > balanceOf[address(msg.sender)]:
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 38
                                                mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_11031 + 70 len 26]
                                                revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                            if balanceOf[address(msg.sender)] < arg2:
                                                revert with 'NH{q', 17
                                            balanceOf[address(msg.sender)] -= arg2
                                            if balanceOf[address(arg1)] > -arg2 - 1:
                                                revert with 'NH{q', 17
                                            if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(arg1)] += arg2
                                            emit Transfer(arg2, msg.sender, arg1);
                                        else:
                                            if totalFees <= 0:
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if not arg1:
                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                _11073 = mem[64]
                                                mem[64] = mem[64] + 96
                                                mem[_11073] = 38
                                                mem[_11073 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                if arg2 > balanceOf[address(msg.sender)]:
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 38
                                                    mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_11073 + 70 len 26]
                                                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                if balanceOf[address(msg.sender)] < arg2:
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] -= arg2
                                                if balanceOf[address(arg1)] > -arg2 - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                balanceOf[address(arg1)] += arg2
                                                emit Transfer(arg2, msg.sender, arg1);
                                            else:
                                                if not arg2:
                                                    _11129 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_11129] = 26
                                                    mem[_11129 + 32] = 'SafeMath: division by zero'
                                                    if not arg2:
                                                        _11429 = mem[64]
                                                        mem[64] = mem[64] + 64
                                                        mem[_11429] = 26
                                                        mem[_11429 + 32] = 'SafeMath: division by zero'
                                                        _11737 = mem[64]
                                                        mem[64] = mem[64] + 64
                                                        mem[_11737] = 30
                                                        mem[_11737 + 32] = 'SafeMath: subtraction overflow'
                                                        if 0 > arg2:
                                                            revert with 0, 'SafeMath: subtraction overflow', 0
                                                        if arg2 < 0:
                                                            revert with 'NH{q', 17
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if not this.address:
                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                        _11879 = mem[64]
                                                        mem[64] = mem[64] + 96
                                                        mem[_11879] = 38
                                                        mem[_11879 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                        if 0 > balanceOf[address(msg.sender)]:
                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = 32
                                                            mem[mem[64] + 36] = 38
                                                            mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_11879 + 70 len 26]
                                                            revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                        if balanceOf[address(msg.sender)] < 0:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(this.address)] > -1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        mem[0] = this.address
                                                        mem[32] = 9
                                                        emit Transfer(0, msg.sender, this.address);
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        _12548 = mem[64]
                                                        mem[64] = mem[64] + 96
                                                        mem[_12548] = 38
                                                        mem[_12548 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                        if 0 > balanceOf[address(msg.sender)]:
                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = 32
                                                            mem[mem[64] + 36] = 38
                                                            mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_12548 + 70 len 26]
                                                            revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                        if balanceOf[address(msg.sender)] < 0:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[57005] > -1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[57005] < balanceOf[57005]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        mem[0] = 57005
                                                        mem[32] = 9
                                                        emit Transfer(0, msg.sender, 57005);
                                                        emit TokenBurn(0, msg.sender);
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if not arg1:
                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                        _13422 = mem[64]
                                                        mem[64] = mem[64] + 96
                                                        mem[_13422] = 38
                                                        mem[_13422 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                        if arg2 > balanceOf[address(msg.sender)]:
                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = 32
                                                            mem[mem[64] + 36] = 38
                                                            mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_13422 + 70 len 26]
                                                            revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                        if balanceOf[address(msg.sender)] < arg2:
                                                            revert with 'NH{q', 17
                                                        balanceOf[address(msg.sender)] -= arg2
                                                        if balanceOf[address(arg1)] > -arg2 - 1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        balanceOf[address(arg1)] += arg2
                                                        emit Transfer(arg2, msg.sender, arg1);
                                                    else:
                                                        if arg2 and burnFee > -1 / arg2:
                                                            revert with 'NH{q', 17
                                                        if not arg2:
                                                            revert with 'NH{q', 18
                                                        if arg2 * burnFee / arg2 != burnFee:
                                                            revert with 0, 'SafeMath: multiplication overflow'
                                                        _11650 = mem[64]
                                                        mem[64] = mem[64] + 64
                                                        mem[_11650] = 26
                                                        mem[_11650 + 32] = 'SafeMath: division by zero'
                                                        if 0 > -(arg2 * burnFee / 100) - 1:
                                                            revert with 'NH{q', 17
                                                        if arg2 * burnFee / 100 < 0:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        _11910 = mem[64]
                                                        mem[64] = mem[64] + 64
                                                        mem[_11910] = 30
                                                        mem[_11910 + 32] = 'SafeMath: subtraction overflow'
                                                        if arg2 * burnFee / 100 > arg2:
                                                            revert with 0, 'SafeMath: subtraction overflow', 0
                                                        if arg2 < arg2 * burnFee / 100:
                                                            revert with 'NH{q', 17
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if not this.address:
                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                        _12156 = mem[64]
                                                        mem[64] = mem[64] + 96
                                                        mem[_12156] = 38
                                                        mem[_12156 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                        if 0 > balanceOf[address(msg.sender)]:
                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = 32
                                                            mem[mem[64] + 36] = 38
                                                            mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_12156 + 70 len 26]
                                                            revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                        if balanceOf[address(msg.sender)] < 0:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(this.address)] > -1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        mem[0] = this.address
                                                        mem[32] = 9
                                                        emit Transfer(0, msg.sender, this.address);
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        _12919 = mem[64]
                                                        mem[64] = mem[64] + 96
                                                        mem[_12919] = 38
                                                        mem[_12919 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                        if arg2 * burnFee / 100 > balanceOf[address(msg.sender)]:
                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = 32
                                                            mem[mem[64] + 36] = 38
                                                            mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_12919 + 70 len 26]
                                                            revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                        if balanceOf[address(msg.sender)] < arg2 * burnFee / 100:
                                                            revert with 'NH{q', 17
                                                        balanceOf[address(msg.sender)] -= arg2 * burnFee / 100
                                                        if balanceOf[57005] > -(arg2 * burnFee / 100) - 1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[57005] + (arg2 * burnFee / 100) < balanceOf[57005]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        mem[0] = 57005
                                                        mem[32] = 9
                                                        balanceOf[57005] += arg2 * burnFee / 100
                                                        emit Transfer((arg2 * burnFee / 100), msg.sender, 57005);
                                                        emit TokenBurn((arg2 * burnFee / 100), msg.sender);
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if not arg1:
                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                        _14158 = mem[64]
                                                        mem[64] = mem[64] + 96
                                                        mem[_14158] = 38
                                                        mem[_14158 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                        if arg2 - (arg2 * burnFee / 100) > balanceOf[address(msg.sender)]:
                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = 32
                                                            mem[mem[64] + 36] = 38
                                                            mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_14158 + 70 len 26]
                                                            revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                        if balanceOf[address(msg.sender)] < arg2 - (arg2 * burnFee / 100):
                                                            revert with 'NH{q', 17
                                                        balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * burnFee / 100)
                                                        if balanceOf[address(arg1)] > -arg2 + (arg2 * burnFee / 100) - 1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(arg1)] + arg2 - (arg2 * burnFee / 100) < balanceOf[address(arg1)]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * burnFee / 100)
                                                        emit Transfer((arg2 - (arg2 * burnFee / 100)), msg.sender, arg1);
                                                else:
                                                    if arg2 and stor14 > -1 / arg2:
                                                        revert with 'NH{q', 17
                                                    if not arg2:
                                                        revert with 'NH{q', 18
                                                    if arg2 * stor14 / arg2 != stor14:
                                                        revert with 0, 'SafeMath: multiplication overflow'
                                                    _11388 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_11388] = 26
                                                    mem[_11388 + 32] = 'SafeMath: division by zero'
                                                    if not arg2:
                                                        _11649 = mem[64]
                                                        mem[64] = mem[64] + 64
                                                        mem[_11649] = 26
                                                        mem[_11649 + 32] = 'SafeMath: division by zero'
                                                        if arg2 * stor14 / 100 > -1:
                                                            revert with 'NH{q', 17
                                                        if arg2 * stor14 / 100 < arg2 * stor14 / 100:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        _11909 = mem[64]
                                                        mem[64] = mem[64] + 64
                                                        mem[_11909] = 30
                                                        mem[_11909 + 32] = 'SafeMath: subtraction overflow'
                                                        if arg2 * stor14 / 100 > arg2:
                                                            revert with 0, 'SafeMath: subtraction overflow', 0
                                                        if arg2 < arg2 * stor14 / 100:
                                                            revert with 'NH{q', 17
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if not this.address:
                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                        _12153 = mem[64]
                                                        mem[64] = mem[64] + 96
                                                        mem[_12153] = 38
                                                        mem[_12153 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                        if arg2 * stor14 / 100 > balanceOf[address(msg.sender)]:
                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = 32
                                                            mem[mem[64] + 36] = 38
                                                            mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_12153 + 70 len 26]
                                                            revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                        if balanceOf[address(msg.sender)] < arg2 * stor14 / 100:
                                                            revert with 'NH{q', 17
                                                        balanceOf[address(msg.sender)] -= arg2 * stor14 / 100
                                                        if balanceOf[address(this.address)] > -(arg2 * stor14 / 100) - 1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(this.address)] + (arg2 * stor14 / 100) < balanceOf[address(this.address)]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        mem[0] = this.address
                                                        mem[32] = 9
                                                        balanceOf[address(this.address)] += arg2 * stor14 / 100
                                                        emit Transfer((arg2 * stor14 / 100), msg.sender, this.address);
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        _12917 = mem[64]
                                                        mem[64] = mem[64] + 96
                                                        mem[_12917] = 38
                                                        mem[_12917 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                        if 0 > balanceOf[address(msg.sender)]:
                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = 32
                                                            mem[mem[64] + 36] = 38
                                                            mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_12917 + 70 len 26]
                                                            revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                        if balanceOf[address(msg.sender)] < 0:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[57005] > -1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[57005] < balanceOf[57005]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        mem[0] = 57005
                                                        mem[32] = 9
                                                        emit Transfer(0, msg.sender, 57005);
                                                        emit TokenBurn(0, msg.sender);
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if not arg1:
                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                        _14155 = mem[64]
                                                        mem[64] = mem[64] + 96
                                                        mem[_14155] = 38
                                                        mem[_14155 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                        if arg2 - (arg2 * stor14 / 100) > balanceOf[address(msg.sender)]:
                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = 32
                                                            mem[mem[64] + 36] = 38
                                                            mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_14155 + 70 len 26]
                                                            revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                        if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor14 / 100):
                                                            revert with 'NH{q', 17
                                                        balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor14 / 100)
                                                        if balanceOf[address(arg1)] > -arg2 + (arg2 * stor14 / 100) - 1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) < balanceOf[address(arg1)]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100)
                                                        emit Transfer((arg2 - (arg2 * stor14 / 100)), msg.sender, arg1);
                                                    else:
                                                        if arg2 and burnFee > -1 / arg2:
                                                            revert with 'NH{q', 17
                                                        if not arg2:
                                                            revert with 'NH{q', 18
                                                        if arg2 * burnFee / arg2 != burnFee:
                                                            revert with 0, 'SafeMath: multiplication overflow'
                                                        _11778 = mem[64]
                                                        mem[64] = mem[64] + 64
                                                        mem[_11778] = 26
                                                        mem[_11778 + 32] = 'SafeMath: division by zero'
                                                        if arg2 * stor14 / 100 > -(arg2 * burnFee / 100) - 1:
                                                            revert with 'NH{q', 17
                                                        if (arg2 * stor14 / 100) + (arg2 * burnFee / 100) < arg2 * stor14 / 100:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        _12213 = mem[64]
                                                        mem[64] = mem[64] + 64
                                                        mem[_12213] = 30
                                                        mem[_12213 + 32] = 'SafeMath: subtraction overflow'
                                                        if (arg2 * stor14 / 100) + (arg2 * burnFee / 100) > arg2:
                                                            revert with 0, 'SafeMath: subtraction overflow', 0
                                                        if arg2 < (arg2 * stor14 / 100) + (arg2 * burnFee / 100):
                                                            revert with 'NH{q', 17
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if not this.address:
                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                        _12545 = mem[64]
                                                        mem[64] = mem[64] + 96
                                                        mem[_12545] = 38
                                                        mem[_12545 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                        if arg2 * stor14 / 100 > balanceOf[address(msg.sender)]:
                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = 32
                                                            mem[mem[64] + 36] = 38
                                                            mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_12545 + 70 len 26]
                                                            revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                        if balanceOf[address(msg.sender)] < arg2 * stor14 / 100:
                                                            revert with 'NH{q', 17
                                                        balanceOf[address(msg.sender)] -= arg2 * stor14 / 100
                                                        if balanceOf[address(this.address)] > -(arg2 * stor14 / 100) - 1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(this.address)] + (arg2 * stor14 / 100) < balanceOf[address(this.address)]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        mem[0] = this.address
                                                        mem[32] = 9
                                                        balanceOf[address(this.address)] += arg2 * stor14 / 100
                                                        emit Transfer((arg2 * stor14 / 100), msg.sender, this.address);
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        _13255 = mem[64]
                                                        mem[64] = mem[64] + 96
                                                        mem[_13255] = 38
                                                        mem[_13255 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                        if arg2 * burnFee / 100 > balanceOf[address(msg.sender)]:
                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = 32
                                                            mem[mem[64] + 36] = 38
                                                            mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_13255 + 70 len 26]
                                                            revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                        if balanceOf[address(msg.sender)] < arg2 * burnFee / 100:
                                                            revert with 'NH{q', 17
                                                        balanceOf[address(msg.sender)] -= arg2 * burnFee / 100
                                                        if balanceOf[57005] > -(arg2 * burnFee / 100) - 1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[57005] + (arg2 * burnFee / 100) < balanceOf[57005]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        mem[0] = 57005
                                                        mem[32] = 9
                                                        balanceOf[57005] += arg2 * burnFee / 100
                                                        emit Transfer((arg2 * burnFee / 100), msg.sender, 57005);
                                                        emit TokenBurn((arg2 * burnFee / 100), msg.sender);
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if not arg1:
                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                        _14504 = mem[64]
                                                        mem[64] = mem[64] + 96
                                                        mem[_14504] = 38
                                                        mem[_14504 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                        if arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100) > balanceOf[address(msg.sender)]:
                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = 32
                                                            mem[mem[64] + 36] = 38
                                                            mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_14504 + 70 len 26]
                                                            revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                        if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100):
                                                            revert with 'NH{q', 17
                                                        balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor14 / 100) + (arg2 * burnFee / 100)
                                                        if balanceOf[address(arg1)] > -arg2 + (arg2 * stor14 / 100) + (arg2 * burnFee / 100) - 1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100) < balanceOf[address(arg1)]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100)
                                                        emit Transfer((arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100)), msg.sender, arg1);
                                else:
                                    mem[96] = 26
                                    mem[128] = 'SafeMath: division by zero'
                                    if stor14 <= 0:
                                        revert with 0, 'SafeMath: division by zero', 0
                                    if not stor14:
                                        revert with 'NH{q', 18
                                    if not balanceOf[address(this.address)]:
                                        mem[160] = 26
                                        mem[192] = 'SafeMath: division by zero'
                                        if stor14 <= 0:
                                            revert with 0, 'SafeMath: division by zero', 0
                                        if not stor14:
                                            revert with 'NH{q', 18
                                        mem[224] = 26
                                        mem[256] = 'SafeMath: division by zero'
                                        mem[288] = 30
                                        mem[320] = 'SafeMath: subtraction overflow'
                                        if 0 / stor14 / 2 > 0 / stor14:
                                            revert with 0, 'SafeMath: subtraction overflow', 0
                                        if 0 / stor14 < 0 / stor14 / 2:
                                            revert with 'NH{q', 17
                                        mem[352] = 2
                                        mem[384] = this.address
                                        require ext_code.size(uniswapV2RouterAddress)
                                        staticcall uniswapV2RouterAddress.WETH() with:
                                                gas gas_remaining wei
                                        mem[448] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                        mem[416] = ext_call.return_data[12 len 20]
                                        if not this.address:
                                            revert with 0, 'ERC20: approve from the zero address'
                                        if not uniswapV2RouterAddress:
                                            revert with 0, 'ERC20: approve to the zero address'
                                        allowance[address(this.address)][stor19].field_0 = 0 / stor14 / 2
                                        allowance[address(this.address)][stor19].field_255 = 0
                                        emit Approval((0 / stor14 / 2), this.address, uniswapV2RouterAddress);
                                        mem[ceil32(return_data.size) + 448] = 0x791ac94700000000000000000000000000000000000000000000000000000000
                                        mem[ceil32(return_data.size) + 452] = 0 / stor14 / 2
                                        idx = 0
                                        s = 384
                                        t = ceil32(return_data.size) + 644
                                        while idx < 2:
                                            mem[t] = mem[s + 12 len 20]
                                            idx = idx + 1
                                            s = s + 32
                                            t = t + 32
                                            continue 
                                        require ext_code.size(uniswapV2RouterAddress)
                                        call uniswapV2RouterAddress.swapExactTokensForETHSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args Mask(255, 1, 0 / stor14), 0, 160, address(this.address), block.timestamp, 2, mem[ceil32(return_data.size) + 644 len 64]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[ceil32(return_data.size) + 448] = 30
                                        mem[ceil32(return_data.size) + 480] = 'SafeMath: subtraction overflow'
                                        if eth.balance(this.address) > eth.balance(this.address):
                                            revert with 0, 'SafeMath: subtraction overflow', 0
                                        if eth.balance(this.address) < eth.balance(this.address):
                                            revert with 'NH{q', 17
                                        if not this.address:
                                            revert with 0, 'ERC20: approve from the zero address'
                                        if not uniswapV2RouterAddress:
                                            revert with 0, 'ERC20: approve to the zero address'
                                        allowance[address(this.address)][stor19].field_0 = (0 / stor14) - (0 / stor14 / 2)
                                        emit Approval(((0 / stor14) - (0 / stor14 / 2)), this.address, uniswapV2RouterAddress);
                                        mem[ceil32(return_data.size) + 580] = 0
                                        mem[ceil32(return_data.size) + 612] = 0
                                        mem[ceil32(return_data.size) + 644] = owner
                                        mem[ceil32(return_data.size) + 676] = block.timestamp
                                        require ext_code.size(uniswapV2RouterAddress)
                                        call uniswapV2RouterAddress.addLiquidityETH(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                             gas gas_remaining wei
                                            args address(this.address), (0 / stor14) - (0 / stor14 / 2), 0, 0, owner, block.timestamp
                                        mem[ceil32(return_data.size) + 512 len 96] = ext_call.return_data[0 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 96
                                        require ext_call.return_data[0] == ext_call.return_data[0]
                                        require ext_call.return_data[32] == ext_call.return_data[32]
                                        require ext_call.return_data[64] == ext_call.return_data[64]
                                        mem[(2 * ceil32(return_data.size)) + 512] = 3
                                        mem[(2 * ceil32(return_data.size)) + 544] = this.address
                                        require ext_code.size(uniswapV2RouterAddress)
                                        staticcall uniswapV2RouterAddress.WETH() with:
                                                gas gas_remaining wei
                                        mem[(2 * ceil32(return_data.size)) + 640] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[64] = (4 * ceil32(return_data.size)) + 640
                                        require return_data.size >= 32
                                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                        mem[(2 * ceil32(return_data.size)) + 576] = ext_call.return_data[12 len 20]
                                        mem[(2 * ceil32(return_data.size)) + 608] = sub_e5148bd6Address
                                        if not this.address:
                                            revert with 0, 'ERC20: approve from the zero address'
                                        if not uniswapV2RouterAddress:
                                            revert with 0, 'ERC20: approve to the zero address'
                                        mem[0] = uniswapV2RouterAddress
                                        mem[32] = sha3(address(this.address), 10)
                                        allowance[address(this.address)][stor19].field_0 = 0 / stor14
                                        emit Approval((0 / stor14), this.address, uniswapV2RouterAddress);
                                        mem[(4 * ceil32(return_data.size)) + 640] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                        mem[(4 * ceil32(return_data.size)) + 644] = 0 / stor14
                                        mem[(4 * ceil32(return_data.size)) + 676] = 0
                                        mem[(4 * ceil32(return_data.size)) + 708] = 160
                                        mem[(4 * ceil32(return_data.size)) + 804] = 3
                                        idx = 0
                                        s = (2 * ceil32(return_data.size)) + 544
                                        t = (4 * ceil32(return_data.size)) + 836
                                        while idx < mem[(2 * ceil32(return_data.size)) + 512]:
                                            mem[t] = mem[s + 12 len 20]
                                            idx = idx + 1
                                            s = s + 32
                                            t = t + 32
                                            continue 
                                        mem[(4 * ceil32(return_data.size)) + 740] = this.address
                                        mem[(4 * ceil32(return_data.size)) + 772] = block.timestamp
                                        require ext_code.size(uniswapV2RouterAddress)
                                        call uniswapV2RouterAddress.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args 0 / stor14, 0, 160, address(this.address), block.timestamp, mem[(4 * ceil32(return_data.size)) + 804 len (32 * mem[(2 * ceil32(return_data.size)) + 512]) + 32]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(sub_e5148bd6Address)
                                        staticcall sub_e5148bd6Address.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_call.return_data[0] == ext_call.return_data[0]
                                        mem[(4 * ceil32(return_data.size)) + 644] = marketingAddress
                                        mem[(4 * ceil32(return_data.size)) + 676] = ext_call.return_data[0]
                                        require ext_code.size(sub_e5148bd6Address)
                                        call sub_e5148bd6Address.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args mem[(4 * ceil32(return_data.size)) + 644 len (7 * ceil32(return_data.size)) + 64]
                                        mem[(4 * ceil32(return_data.size)) + 640] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                        stor22 = 0
                                        if stor11[address(msg.sender)]:
                                            if not msg.sender:
                                                mem[(8 * ceil32(return_data.size)) + 640] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[(8 * ceil32(return_data.size)) + 644] = 32
                                                mem[(8 * ceil32(return_data.size)) + 676] = 37
                                                mem[(8 * ceil32(return_data.size)) + 708] = 'ERC20: transfer from the zero ad'
                                                mem[(8 * ceil32(return_data.size)) + 740] = 'dress'
                                                revert with memory
                                                  from (8 * ceil32(return_data.size)) + 640
                                                   len (13 * ceil32(return_data.size)) + 132
                                            if not arg1:
                                                mem[(8 * ceil32(return_data.size)) + 640] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[(8 * ceil32(return_data.size)) + 644] = 32
                                                mem[(8 * ceil32(return_data.size)) + 676] = 35
                                                mem[(8 * ceil32(return_data.size)) + 708] = 'ERC20: transfer to the zero addr'
                                                mem[(8 * ceil32(return_data.size)) + 740] = 'ess'
                                                revert with memory
                                                  from (8 * ceil32(return_data.size)) + 640
                                                   len (13 * ceil32(return_data.size)) + 132
                                            if arg2 > balanceOf[address(msg.sender)]:
                                                mem[(8 * ceil32(return_data.size)) + 736] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[(8 * ceil32(return_data.size)) + 740] = 32
                                                mem[(8 * ceil32(return_data.size)) + 772] = 38
                                                mem[(8 * ceil32(return_data.size)) + 804 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 710 len 26]
                                                mem[(8 * ceil32(return_data.size)) + 842] = 0
                                                revert with memory
                                                  from (8 * ceil32(return_data.size)) + 736
                                                   len (13 * ceil32(return_data.size)) + 132
                                            if balanceOf[address(msg.sender)] < arg2:
                                                revert with 'NH{q', 17
                                            balanceOf[address(msg.sender)] -= arg2
                                            if balanceOf[address(arg1)] > -arg2 - 1:
                                                revert with 'NH{q', 17
                                            if balanceOf[address(arg1)] + arg2 >= balanceOf[address(arg1)]:
                                                balanceOf[address(arg1)] += arg2
                                                emit Transfer(arg2, msg.sender, arg1);
                                                return 1
                                            mem[(8 * ceil32(return_data.size)) + 736] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[(8 * ceil32(return_data.size)) + 740] = 32
                                            mem[(8 * ceil32(return_data.size)) + 772] = 27
                                            mem[(8 * ceil32(return_data.size)) + 804] = 'SafeMath: addition overflow'
                                            revert with memory
                                              from (8 * ceil32(return_data.size)) + 736
                                               len (13 * ceil32(return_data.size)) + 100
                                        if stor11[address(arg1)]:
                                            if not msg.sender:
                                                mem[(8 * ceil32(return_data.size)) + 640] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[(8 * ceil32(return_data.size)) + 644] = 32
                                                mem[(8 * ceil32(return_data.size)) + 676] = 37
                                                mem[(8 * ceil32(return_data.size)) + 708] = 'ERC20: transfer from the zero ad'
                                                mem[(8 * ceil32(return_data.size)) + 740] = 'dress'
                                                revert with memory
                                                  from (8 * ceil32(return_data.size)) + 640
                                                   len (13 * ceil32(return_data.size)) + 132
                                            if not arg1:
                                                mem[(8 * ceil32(return_data.size)) + 640] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[(8 * ceil32(return_data.size)) + 644] = 32
                                                mem[(8 * ceil32(return_data.size)) + 676] = 35
                                                mem[(8 * ceil32(return_data.size)) + 708] = 'ERC20: transfer to the zero addr'
                                                mem[(8 * ceil32(return_data.size)) + 740] = 'ess'
                                                revert with memory
                                                  from (8 * ceil32(return_data.size)) + 640
                                                   len (13 * ceil32(return_data.size)) + 132
                                            if arg2 > balanceOf[address(msg.sender)]:
                                                mem[(8 * ceil32(return_data.size)) + 736] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[(8 * ceil32(return_data.size)) + 740] = 32
                                                mem[(8 * ceil32(return_data.size)) + 772] = 38
                                                mem[(8 * ceil32(return_data.size)) + 804 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 710 len 26]
                                                mem[(8 * ceil32(return_data.size)) + 842] = 0
                                                revert with memory
                                                  from (8 * ceil32(return_data.size)) + 736
                                                   len (13 * ceil32(return_data.size)) + 132
                                            if balanceOf[address(msg.sender)] < arg2:
                                                revert with 'NH{q', 17
                                            balanceOf[address(msg.sender)] -= arg2
                                            if balanceOf[address(arg1)] > -arg2 - 1:
                                                revert with 'NH{q', 17
                                            if balanceOf[address(arg1)] + arg2 >= balanceOf[address(arg1)]:
                                                balanceOf[address(arg1)] += arg2
                                                emit Transfer(arg2, msg.sender, arg1);
                                                return 1
                                            mem[(8 * ceil32(return_data.size)) + 736] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[(8 * ceil32(return_data.size)) + 740] = 32
                                            mem[(8 * ceil32(return_data.size)) + 772] = 27
                                            mem[(8 * ceil32(return_data.size)) + 804] = 'SafeMath: addition overflow'
                                            revert with memory
                                              from (8 * ceil32(return_data.size)) + 736
                                               len (13 * ceil32(return_data.size)) + 100
                                        if totalFees <= 0:
                                            if not msg.sender:
                                                mem[(8 * ceil32(return_data.size)) + 640] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[(8 * ceil32(return_data.size)) + 644] = 32
                                                mem[(8 * ceil32(return_data.size)) + 676] = 37
                                                mem[(8 * ceil32(return_data.size)) + 708] = 'ERC20: transfer from the zero ad'
                                                mem[(8 * ceil32(return_data.size)) + 740] = 'dress'
                                                revert with memory
                                                  from (8 * ceil32(return_data.size)) + 640
                                                   len (13 * ceil32(return_data.size)) + 132
                                            if not arg1:
                                                mem[(8 * ceil32(return_data.size)) + 640] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[(8 * ceil32(return_data.size)) + 644] = 32
                                                mem[(8 * ceil32(return_data.size)) + 676] = 35
                                                mem[(8 * ceil32(return_data.size)) + 708] = 'ERC20: transfer to the zero addr'
                                                mem[(8 * ceil32(return_data.size)) + 740] = 'ess'
                                                revert with memory
                                                  from (8 * ceil32(return_data.size)) + 640
                                                   len (13 * ceil32(return_data.size)) + 132
                                            if arg2 > balanceOf[address(msg.sender)]:
                                                mem[(8 * ceil32(return_data.size)) + 736] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[(8 * ceil32(return_data.size)) + 740] = 32
                                                mem[(8 * ceil32(return_data.size)) + 772] = 38
                                                mem[(8 * ceil32(return_data.size)) + 804 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 710 len 26]
                                                mem[(8 * ceil32(return_data.size)) + 842] = 0
                                                revert with memory
                                                  from (8 * ceil32(return_data.size)) + 736
                                                   len (13 * ceil32(return_data.size)) + 132
                                            if balanceOf[address(msg.sender)] < arg2:
                                                revert with 'NH{q', 17
                                            balanceOf[address(msg.sender)] -= arg2
                                            if balanceOf[address(arg1)] > -arg2 - 1:
                                                revert with 'NH{q', 17
                                            if balanceOf[address(arg1)] + arg2 >= balanceOf[address(arg1)]:
                                                balanceOf[address(arg1)] += arg2
                                                emit Transfer(arg2, msg.sender, arg1);
                                                return 1
                                            mem[(8 * ceil32(return_data.size)) + 736] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[(8 * ceil32(return_data.size)) + 740] = 32
                                            mem[(8 * ceil32(return_data.size)) + 772] = 27
                                            mem[(8 * ceil32(return_data.size)) + 804] = 'SafeMath: addition overflow'
                                            revert with memory
                                              from (8 * ceil32(return_data.size)) + 736
                                               len (13 * ceil32(return_data.size)) + 100
                                        if not arg2:
                                            if not arg2:
                                                if 0 > arg2:
                                                    mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 868] = 30
                                                    mem[(8 * ceil32(return_data.size)) + 900] = 'SafeMath: subtraction overflow'
                                                    mem[(8 * ceil32(return_data.size)) + 930] = 0
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 832
                                                       len (13 * ceil32(return_data.size)) + 100
                                                if arg2 < 0:
                                                    revert with 'NH{q', 17
                                                if not msg.sender:
                                                    mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 868] = 37
                                                    mem[(8 * ceil32(return_data.size)) + 900] = 'ERC20: transfer from the zero ad'
                                                    mem[(8 * ceil32(return_data.size)) + 932] = 'dress'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 832
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if not this.address:
                                                    mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 868] = 35
                                                    mem[(8 * ceil32(return_data.size)) + 900] = 'ERC20: transfer to the zero addr'
                                                    mem[(8 * ceil32(return_data.size)) + 932] = 'ess'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 832
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if 0 > balanceOf[address(msg.sender)]:
                                                    mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 964] = 38
                                                    mem[(8 * ceil32(return_data.size)) + 996 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 902 len 26]
                                                    mem[(8 * ceil32(return_data.size)) + 1034] = 0
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 928
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if balanceOf[address(msg.sender)] < 0:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(this.address)] > -1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                                    mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 964] = 27
                                                    mem[(8 * ceil32(return_data.size)) + 996] = 'SafeMath: addition overflow'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 928
                                                       len (13 * ceil32(return_data.size)) + 100
                                                emit Transfer(0, msg.sender, this.address);
                                                if not msg.sender:
                                                    mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 964] = 37
                                                    mem[(8 * ceil32(return_data.size)) + 996] = 'ERC20: transfer from the zero ad'
                                                    mem[(8 * ceil32(return_data.size)) + 1028] = 'dress'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 928
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if 0 > balanceOf[address(msg.sender)]:
                                                    mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 1060] = 38
                                                    mem[(8 * ceil32(return_data.size)) + 1092 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 998 len 26]
                                                    mem[(8 * ceil32(return_data.size)) + 1130] = 0
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 1024
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if balanceOf[address(msg.sender)] < 0:
                                                    revert with 'NH{q', 17
                                                if balanceOf[57005] > -1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[57005] < balanceOf[57005]:
                                                    mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 1060] = 27
                                                    mem[(8 * ceil32(return_data.size)) + 1092] = 'SafeMath: addition overflow'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 1024
                                                       len (13 * ceil32(return_data.size)) + 100
                                                emit Transfer(0, msg.sender, 57005);
                                                emit TokenBurn(0, msg.sender);
                                                if not msg.sender:
                                                    mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 1060] = 37
                                                    mem[(8 * ceil32(return_data.size)) + 1092] = 'ERC20: transfer from the zero ad'
                                                    mem[(8 * ceil32(return_data.size)) + 1124] = 'dress'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 1024
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if not arg1:
                                                    mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 1060] = 35
                                                    mem[(8 * ceil32(return_data.size)) + 1092] = 'ERC20: transfer to the zero addr'
                                                    mem[(8 * ceil32(return_data.size)) + 1124] = 'ess'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 1024
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if arg2 > balanceOf[address(msg.sender)]:
                                                    mem[(8 * ceil32(return_data.size)) + 1120] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 1124] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 1156] = 38
                                                    mem[(8 * ceil32(return_data.size)) + 1188 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 1094 len 26]
                                                    mem[(8 * ceil32(return_data.size)) + 1226] = 0
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 1120
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if balanceOf[address(msg.sender)] < arg2:
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] -= arg2
                                                if balanceOf[address(arg1)] > -arg2 - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(arg1)] + arg2 >= balanceOf[address(arg1)]:
                                                    balanceOf[address(arg1)] += arg2
                                                    emit Transfer(arg2, msg.sender, arg1);
                                                    return 1
                                            else:
                                                if arg2 and burnFee > -1 / arg2:
                                                    revert with 'NH{q', 17
                                                if not arg2:
                                                    revert with 'NH{q', 18
                                                if arg2 * burnFee / arg2 != burnFee:
                                                    mem[(8 * ceil32(return_data.size)) + 704] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 708] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 740] = 33
                                                    mem[(8 * ceil32(return_data.size)) + 772] = 'SafeMath: multiplication overflo'
                                                    mem[(8 * ceil32(return_data.size)) + 804] = 'w'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 704
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if 0 > -(arg2 * burnFee / 100) - 1:
                                                    revert with 'NH{q', 17
                                                if arg2 * burnFee / 100 < 0:
                                                    mem[(8 * ceil32(return_data.size)) + 768] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 772] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 804] = 27
                                                    mem[(8 * ceil32(return_data.size)) + 836] = 'SafeMath: addition overflow'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 768
                                                       len (13 * ceil32(return_data.size)) + 100
                                                if arg2 * burnFee / 100 > arg2:
                                                    mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 868] = 30
                                                    mem[(8 * ceil32(return_data.size)) + 900] = 'SafeMath: subtraction overflow'
                                                    mem[(8 * ceil32(return_data.size)) + 930] = 0
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 832
                                                       len (13 * ceil32(return_data.size)) + 100
                                                if arg2 < arg2 * burnFee / 100:
                                                    revert with 'NH{q', 17
                                                if not msg.sender:
                                                    mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 868] = 37
                                                    mem[(8 * ceil32(return_data.size)) + 900] = 'ERC20: transfer from the zero ad'
                                                    mem[(8 * ceil32(return_data.size)) + 932] = 'dress'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 832
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if not this.address:
                                                    mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 868] = 35
                                                    mem[(8 * ceil32(return_data.size)) + 900] = 'ERC20: transfer to the zero addr'
                                                    mem[(8 * ceil32(return_data.size)) + 932] = 'ess'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 832
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if 0 > balanceOf[address(msg.sender)]:
                                                    mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 964] = 38
                                                    mem[(8 * ceil32(return_data.size)) + 996 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 902 len 26]
                                                    mem[(8 * ceil32(return_data.size)) + 1034] = 0
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 928
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if balanceOf[address(msg.sender)] < 0:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(this.address)] > -1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                                    mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 964] = 27
                                                    mem[(8 * ceil32(return_data.size)) + 996] = 'SafeMath: addition overflow'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 928
                                                       len (13 * ceil32(return_data.size)) + 100
                                                emit Transfer(0, msg.sender, this.address);
                                                if not msg.sender:
                                                    mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 964] = 37
                                                    mem[(8 * ceil32(return_data.size)) + 996] = 'ERC20: transfer from the zero ad'
                                                    mem[(8 * ceil32(return_data.size)) + 1028] = 'dress'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 928
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if arg2 * burnFee / 100 > balanceOf[address(msg.sender)]:
                                                    mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 1060] = 38
                                                    mem[(8 * ceil32(return_data.size)) + 1092 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 998 len 26]
                                                    mem[(8 * ceil32(return_data.size)) + 1130] = 0
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 1024
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if balanceOf[address(msg.sender)] < arg2 * burnFee / 100:
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] -= arg2 * burnFee / 100
                                                if balanceOf[57005] > -(arg2 * burnFee / 100) - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[57005] + (arg2 * burnFee / 100) < balanceOf[57005]:
                                                    mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 1060] = 27
                                                    mem[(8 * ceil32(return_data.size)) + 1092] = 'SafeMath: addition overflow'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 1024
                                                       len (13 * ceil32(return_data.size)) + 100
                                                balanceOf[57005] += arg2 * burnFee / 100
                                                emit Transfer((arg2 * burnFee / 100), msg.sender, 57005);
                                                emit TokenBurn((arg2 * burnFee / 100), msg.sender);
                                                if not msg.sender:
                                                    mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 1060] = 37
                                                    mem[(8 * ceil32(return_data.size)) + 1092] = 'ERC20: transfer from the zero ad'
                                                    mem[(8 * ceil32(return_data.size)) + 1124] = 'dress'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 1024
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if not arg1:
                                                    mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 1060] = 35
                                                    mem[(8 * ceil32(return_data.size)) + 1092] = 'ERC20: transfer to the zero addr'
                                                    mem[(8 * ceil32(return_data.size)) + 1124] = 'ess'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 1024
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if arg2 - (arg2 * burnFee / 100) > balanceOf[address(msg.sender)]:
                                                    mem[(8 * ceil32(return_data.size)) + 1120] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 1124] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 1156] = 38
                                                    mem[(8 * ceil32(return_data.size)) + 1188 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 1094 len 26]
                                                    mem[(8 * ceil32(return_data.size)) + 1226] = 0
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 1120
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if balanceOf[address(msg.sender)] < arg2 - (arg2 * burnFee / 100):
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * burnFee / 100)
                                                if balanceOf[address(arg1)] > -arg2 + (arg2 * burnFee / 100) - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(arg1)] + arg2 - (arg2 * burnFee / 100) >= balanceOf[address(arg1)]:
                                                    balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * burnFee / 100)
                                                    emit Transfer((arg2 - (arg2 * burnFee / 100)), msg.sender, arg1);
                                                    return 1
                                        else:
                                            if arg2 and stor14 > -1 / arg2:
                                                revert with 'NH{q', 17
                                            if not arg2:
                                                revert with 'NH{q', 18
                                            if arg2 * stor14 / arg2 != stor14:
                                                mem[(8 * ceil32(return_data.size)) + 640] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[(8 * ceil32(return_data.size)) + 644] = 32
                                                mem[(8 * ceil32(return_data.size)) + 676] = 33
                                                mem[(8 * ceil32(return_data.size)) + 708] = 'SafeMath: multiplication overflo'
                                                mem[(8 * ceil32(return_data.size)) + 740] = 'w'
                                                revert with memory
                                                  from (8 * ceil32(return_data.size)) + 640
                                                   len (13 * ceil32(return_data.size)) + 132
                                            if not arg2:
                                                if arg2 * stor14 / 100 > -1:
                                                    revert with 'NH{q', 17
                                                if arg2 * stor14 / 100 < arg2 * stor14 / 100:
                                                    mem[(8 * ceil32(return_data.size)) + 768] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 772] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 804] = 27
                                                    mem[(8 * ceil32(return_data.size)) + 836] = 'SafeMath: addition overflow'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 768
                                                       len (13 * ceil32(return_data.size)) + 100
                                                if arg2 * stor14 / 100 > arg2:
                                                    mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 868] = 30
                                                    mem[(8 * ceil32(return_data.size)) + 900] = 'SafeMath: subtraction overflow'
                                                    mem[(8 * ceil32(return_data.size)) + 930] = 0
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 832
                                                       len (13 * ceil32(return_data.size)) + 100
                                                if arg2 < arg2 * stor14 / 100:
                                                    revert with 'NH{q', 17
                                                if not msg.sender:
                                                    mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 868] = 37
                                                    mem[(8 * ceil32(return_data.size)) + 900] = 'ERC20: transfer from the zero ad'
                                                    mem[(8 * ceil32(return_data.size)) + 932] = 'dress'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 832
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if not this.address:
                                                    mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 868] = 35
                                                    mem[(8 * ceil32(return_data.size)) + 900] = 'ERC20: transfer to the zero addr'
                                                    mem[(8 * ceil32(return_data.size)) + 932] = 'ess'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 832
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if arg2 * stor14 / 100 > balanceOf[address(msg.sender)]:
                                                    mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 964] = 38
                                                    mem[(8 * ceil32(return_data.size)) + 996 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 902 len 26]
                                                    mem[(8 * ceil32(return_data.size)) + 1034] = 0
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 928
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if balanceOf[address(msg.sender)] < arg2 * stor14 / 100:
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] -= arg2 * stor14 / 100
                                                if balanceOf[address(this.address)] > -(arg2 * stor14 / 100) - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(this.address)] + (arg2 * stor14 / 100) < balanceOf[address(this.address)]:
                                                    mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 964] = 27
                                                    mem[(8 * ceil32(return_data.size)) + 996] = 'SafeMath: addition overflow'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 928
                                                       len (13 * ceil32(return_data.size)) + 100
                                                balanceOf[address(this.address)] += arg2 * stor14 / 100
                                                emit Transfer((arg2 * stor14 / 100), msg.sender, this.address);
                                                if not msg.sender:
                                                    mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 964] = 37
                                                    mem[(8 * ceil32(return_data.size)) + 996] = 'ERC20: transfer from the zero ad'
                                                    mem[(8 * ceil32(return_data.size)) + 1028] = 'dress'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 928
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if 0 > balanceOf[address(msg.sender)]:
                                                    mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 1060] = 38
                                                    mem[(8 * ceil32(return_data.size)) + 1092 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 998 len 26]
                                                    mem[(8 * ceil32(return_data.size)) + 1130] = 0
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 1024
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if balanceOf[address(msg.sender)] < 0:
                                                    revert with 'NH{q', 17
                                                if balanceOf[57005] > -1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[57005] < balanceOf[57005]:
                                                    mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 1060] = 27
                                                    mem[(8 * ceil32(return_data.size)) + 1092] = 'SafeMath: addition overflow'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 1024
                                                       len (13 * ceil32(return_data.size)) + 100
                                                emit Transfer(0, msg.sender, 57005);
                                                emit TokenBurn(0, msg.sender);
                                                if not msg.sender:
                                                    mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 1060] = 37
                                                    mem[(8 * ceil32(return_data.size)) + 1092] = 'ERC20: transfer from the zero ad'
                                                    mem[(8 * ceil32(return_data.size)) + 1124] = 'dress'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 1024
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if not arg1:
                                                    mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 1060] = 35
                                                    mem[(8 * ceil32(return_data.size)) + 1092] = 'ERC20: transfer to the zero addr'
                                                    mem[(8 * ceil32(return_data.size)) + 1124] = 'ess'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 1024
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if arg2 - (arg2 * stor14 / 100) > balanceOf[address(msg.sender)]:
                                                    mem[(8 * ceil32(return_data.size)) + 1120] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 1124] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 1156] = 38
                                                    mem[(8 * ceil32(return_data.size)) + 1188 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 1094 len 26]
                                                    mem[(8 * ceil32(return_data.size)) + 1226] = 0
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 1120
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor14 / 100):
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor14 / 100)
                                                if balanceOf[address(arg1)] > -arg2 + (arg2 * stor14 / 100) - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) >= balanceOf[address(arg1)]:
                                                    balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100)
                                                    emit Transfer((arg2 - (arg2 * stor14 / 100)), msg.sender, arg1);
                                                    return 1
                                            else:
                                                if arg2 and burnFee > -1 / arg2:
                                                    revert with 'NH{q', 17
                                                if not arg2:
                                                    revert with 'NH{q', 18
                                                if arg2 * burnFee / arg2 != burnFee:
                                                    mem[(8 * ceil32(return_data.size)) + 704] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 708] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 740] = 33
                                                    mem[(8 * ceil32(return_data.size)) + 772] = 'SafeMath: multiplication overflo'
                                                    mem[(8 * ceil32(return_data.size)) + 804] = 'w'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 704
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if arg2 * stor14 / 100 > -(arg2 * burnFee / 100) - 1:
                                                    revert with 'NH{q', 17
                                                if (arg2 * stor14 / 100) + (arg2 * burnFee / 100) < arg2 * stor14 / 100:
                                                    mem[(8 * ceil32(return_data.size)) + 768] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 772] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 804] = 27
                                                    mem[(8 * ceil32(return_data.size)) + 836] = 'SafeMath: addition overflow'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 768
                                                       len (13 * ceil32(return_data.size)) + 100
                                                if (arg2 * stor14 / 100) + (arg2 * burnFee / 100) > arg2:
                                                    mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 868] = 30
                                                    mem[(8 * ceil32(return_data.size)) + 900] = 'SafeMath: subtraction overflow'
                                                    mem[(8 * ceil32(return_data.size)) + 930] = 0
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 832
                                                       len (13 * ceil32(return_data.size)) + 100
                                                if arg2 < (arg2 * stor14 / 100) + (arg2 * burnFee / 100):
                                                    revert with 'NH{q', 17
                                                if not msg.sender:
                                                    mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 868] = 37
                                                    mem[(8 * ceil32(return_data.size)) + 900] = 'ERC20: transfer from the zero ad'
                                                    mem[(8 * ceil32(return_data.size)) + 932] = 'dress'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 832
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if not this.address:
                                                    mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 868] = 35
                                                    mem[(8 * ceil32(return_data.size)) + 900] = 'ERC20: transfer to the zero addr'
                                                    mem[(8 * ceil32(return_data.size)) + 932] = 'ess'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 832
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if arg2 * stor14 / 100 > balanceOf[address(msg.sender)]:
                                                    mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 964] = 38
                                                    mem[(8 * ceil32(return_data.size)) + 996 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 902 len 26]
                                                    mem[(8 * ceil32(return_data.size)) + 1034] = 0
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 928
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if balanceOf[address(msg.sender)] < arg2 * stor14 / 100:
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] -= arg2 * stor14 / 100
                                                if balanceOf[address(this.address)] > -(arg2 * stor14 / 100) - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(this.address)] + (arg2 * stor14 / 100) < balanceOf[address(this.address)]:
                                                    mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 964] = 27
                                                    mem[(8 * ceil32(return_data.size)) + 996] = 'SafeMath: addition overflow'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 928
                                                       len (13 * ceil32(return_data.size)) + 100
                                                balanceOf[address(this.address)] += arg2 * stor14 / 100
                                                emit Transfer((arg2 * stor14 / 100), msg.sender, this.address);
                                                if not msg.sender:
                                                    mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 964] = 37
                                                    mem[(8 * ceil32(return_data.size)) + 996] = 'ERC20: transfer from the zero ad'
                                                    mem[(8 * ceil32(return_data.size)) + 1028] = 'dress'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 928
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if arg2 * burnFee / 100 > balanceOf[address(msg.sender)]:
                                                    mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 1060] = 38
                                                    mem[(8 * ceil32(return_data.size)) + 1092 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 998 len 26]
                                                    mem[(8 * ceil32(return_data.size)) + 1130] = 0
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 1024
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if balanceOf[address(msg.sender)] < arg2 * burnFee / 100:
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] -= arg2 * burnFee / 100
                                                if balanceOf[57005] > -(arg2 * burnFee / 100) - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[57005] + (arg2 * burnFee / 100) < balanceOf[57005]:
                                                    mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 1060] = 27
                                                    mem[(8 * ceil32(return_data.size)) + 1092] = 'SafeMath: addition overflow'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 1024
                                                       len (13 * ceil32(return_data.size)) + 100
                                                balanceOf[57005] += arg2 * burnFee / 100
                                                emit Transfer((arg2 * burnFee / 100), msg.sender, 57005);
                                                emit TokenBurn((arg2 * burnFee / 100), msg.sender);
                                                if not msg.sender:
                                                    mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 1060] = 37
                                                    mem[(8 * ceil32(return_data.size)) + 1092] = 'ERC20: transfer from the zero ad'
                                                    mem[(8 * ceil32(return_data.size)) + 1124] = 'dress'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 1024
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if not arg1:
                                                    mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 1060] = 35
                                                    mem[(8 * ceil32(return_data.size)) + 1092] = 'ERC20: transfer to the zero addr'
                                                    mem[(8 * ceil32(return_data.size)) + 1124] = 'ess'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 1024
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100) > balanceOf[address(msg.sender)]:
                                                    mem[(8 * ceil32(return_data.size)) + 1120] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 1124] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 1156] = 38
                                                    mem[(8 * ceil32(return_data.size)) + 1188 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 1094 len 26]
                                                    mem[(8 * ceil32(return_data.size)) + 1226] = 0
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 1120
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100):
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor14 / 100) + (arg2 * burnFee / 100)
                                                if balanceOf[address(arg1)] > -arg2 + (arg2 * stor14 / 100) + (arg2 * burnFee / 100) - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100) >= balanceOf[address(arg1)]:
                                                    balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100)
                                                    emit Transfer((arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100)), msg.sender, arg1);
                                                    return 1
                                        mem[(8 * ceil32(return_data.size)) + 1120] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[(8 * ceil32(return_data.size)) + 1124] = 32
                                        mem[(8 * ceil32(return_data.size)) + 1156] = 27
                                        mem[(8 * ceil32(return_data.size)) + 1188] = 'SafeMath: addition overflow'
                                        revert with memory
                                          from (8 * ceil32(return_data.size)) + 1120
                                           len (13 * ceil32(return_data.size)) + 100
                                    if balanceOf[address(this.address)] and marketingFee > -1 / balanceOf[address(this.address)]:
                                        revert with 'NH{q', 17
                                    if not balanceOf[address(this.address)]:
                                        revert with 'NH{q', 18
                                    if balanceOf[address(this.address)] * marketingFee / balanceOf[address(this.address)] != marketingFee:
                                        revert with 0, 'SafeMath: multiplication overflow'
                                    mem[160] = 26
                                    mem[192] = 'SafeMath: division by zero'
                                    if stor14 <= 0:
                                        revert with 0, 'SafeMath: division by zero', 0
                                    if not stor14:
                                        revert with 'NH{q', 18
                                    mem[224] = 26
                                    mem[256] = 'SafeMath: division by zero'
                                    mem[288] = 30
                                    mem[320] = 'SafeMath: subtraction overflow'
                                    if 0 / stor14 / 2 > 0 / stor14:
                                        revert with 0, 'SafeMath: subtraction overflow', 0
                                    if 0 / stor14 < 0 / stor14 / 2:
                                        revert with 'NH{q', 17
                                    mem[352] = 2
                                    mem[384] = this.address
                                    require ext_code.size(uniswapV2RouterAddress)
                                    staticcall uniswapV2RouterAddress.WETH() with:
                                            gas gas_remaining wei
                                    mem[448] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                    mem[416] = ext_call.return_data[12 len 20]
                                    if not this.address:
                                        revert with 0, 'ERC20: approve from the zero address'
                                    if not uniswapV2RouterAddress:
                                        revert with 0, 'ERC20: approve to the zero address'
                                    allowance[address(this.address)][stor19].field_0 = 0 / stor14 / 2
                                    allowance[address(this.address)][stor19].field_255 = 0
                                    emit Approval((0 / stor14 / 2), this.address, uniswapV2RouterAddress);
                                    mem[ceil32(return_data.size) + 448] = 0x791ac94700000000000000000000000000000000000000000000000000000000
                                    mem[ceil32(return_data.size) + 452] = 0 / stor14 / 2
                                    idx = 0
                                    s = 384
                                    t = ceil32(return_data.size) + 644
                                    while idx < 2:
                                        mem[t] = mem[s + 12 len 20]
                                        idx = idx + 1
                                        s = s + 32
                                        t = t + 32
                                        continue 
                                    require ext_code.size(uniswapV2RouterAddress)
                                    call uniswapV2RouterAddress.swapExactTokensForETHSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                         gas gas_remaining wei
                                        args Mask(255, 1, 0 / stor14), 0, 160, address(this.address), block.timestamp, 2, mem[ceil32(return_data.size) + 644 len 64]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    mem[ceil32(return_data.size) + 448] = 30
                                    mem[ceil32(return_data.size) + 480] = 'SafeMath: subtraction overflow'
                                    if eth.balance(this.address) > eth.balance(this.address):
                                        revert with 0, 'SafeMath: subtraction overflow', 0
                                    if eth.balance(this.address) < eth.balance(this.address):
                                        revert with 'NH{q', 17
                                    if not this.address:
                                        revert with 0, 'ERC20: approve from the zero address'
                                    if not uniswapV2RouterAddress:
                                        revert with 0, 'ERC20: approve to the zero address'
                                    allowance[address(this.address)][stor19].field_0 = (0 / stor14) - (0 / stor14 / 2)
                                    emit Approval(((0 / stor14) - (0 / stor14 / 2)), this.address, uniswapV2RouterAddress);
                                    mem[ceil32(return_data.size) + 580] = 0
                                    mem[ceil32(return_data.size) + 612] = 0
                                    mem[ceil32(return_data.size) + 644] = owner
                                    mem[ceil32(return_data.size) + 676] = block.timestamp
                                    require ext_code.size(uniswapV2RouterAddress)
                                    call uniswapV2RouterAddress.addLiquidityETH(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                         gas gas_remaining wei
                                        args address(this.address), (0 / stor14) - (0 / stor14 / 2), 0, 0, owner, block.timestamp
                                    mem[ceil32(return_data.size) + 512 len 96] = ext_call.return_data[0 len 96]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 96
                                    require ext_call.return_data[0] == ext_call.return_data[0]
                                    require ext_call.return_data[32] == ext_call.return_data[32]
                                    require ext_call.return_data[64] == ext_call.return_data[64]
                                    mem[(2 * ceil32(return_data.size)) + 512] = 3
                                    mem[(2 * ceil32(return_data.size)) + 544] = this.address
                                    require ext_code.size(uniswapV2RouterAddress)
                                    staticcall uniswapV2RouterAddress.WETH() with:
                                            gas gas_remaining wei
                                    mem[(2 * ceil32(return_data.size)) + 640] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    mem[64] = (4 * ceil32(return_data.size)) + 640
                                    require return_data.size >= 32
                                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                    mem[(2 * ceil32(return_data.size)) + 576] = ext_call.return_data[12 len 20]
                                    mem[(2 * ceil32(return_data.size)) + 608] = sub_e5148bd6Address
                                    if not this.address:
                                        revert with 0, 'ERC20: approve from the zero address'
                                    if not uniswapV2RouterAddress:
                                        revert with 0, 'ERC20: approve to the zero address'
                                    mem[0] = uniswapV2RouterAddress
                                    mem[32] = sha3(address(this.address), 10)
                                    allowance[address(this.address)][stor19].field_0 = balanceOf[address(this.address)] * marketingFee / stor14
                                    emit Approval((balanceOf[address(this.address)] * marketingFee / stor14), this.address, uniswapV2RouterAddress);
                                    mem[(4 * ceil32(return_data.size)) + 640] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                    mem[(4 * ceil32(return_data.size)) + 644] = balanceOf[address(this.address)] * marketingFee / stor14
                                    mem[(4 * ceil32(return_data.size)) + 676] = 0
                                    mem[(4 * ceil32(return_data.size)) + 708] = 160
                                    mem[(4 * ceil32(return_data.size)) + 804] = 3
                                    idx = 0
                                    s = (2 * ceil32(return_data.size)) + 544
                                    t = (4 * ceil32(return_data.size)) + 836
                                    while idx < mem[(2 * ceil32(return_data.size)) + 512]:
                                        mem[t] = mem[s + 12 len 20]
                                        idx = idx + 1
                                        s = s + 32
                                        t = t + 32
                                        continue 
                                    mem[(4 * ceil32(return_data.size)) + 740] = this.address
                                    mem[(4 * ceil32(return_data.size)) + 772] = block.timestamp
                                    require ext_code.size(uniswapV2RouterAddress)
                                    call uniswapV2RouterAddress.mem[mem[64] len 4] with:
                                         gas gas_remaining wei
                                        args mem[mem[64] + 4 len (4 * ceil32(return_data.size)) + (32 * mem[(2 * ceil32(return_data.size)) + 512]) + -mem[64] + 832]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    mem[mem[64] + 4] = this.address
                                    require ext_code.size(sub_e5148bd6Address)
                                    staticcall sub_e5148bd6Address.0x70a08231 with:
                                            gas gas_remaining wei
                                           args address(this.address)
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _10830 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    _10846 = mem[_10830]
                                    require mem[_10830] == mem[_10830]
                                    mem[mem[64] + 4] = marketingAddress
                                    mem[mem[64] + 36] = _10846
                                    require ext_code.size(sub_e5148bd6Address)
                                    call sub_e5148bd6Address.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args marketingAddress, _10846
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _10942 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require mem[_10942] == bool(mem[_10942])
                                    stor22 = 0
                                    mem[0] = msg.sender
                                    mem[32] = 11
                                    if stor11[address(msg.sender)]:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: transfer from the zero address'
                                        if not arg1:
                                            revert with 0, 'ERC20: transfer to the zero address'
                                        _10995 = mem[64]
                                        mem[64] = mem[64] + 96
                                        mem[_10995] = 38
                                        mem[_10995 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                        if arg2 > balanceOf[address(msg.sender)]:
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 38
                                            mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_10995 + 70 len 26]
                                            revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                        if balanceOf[address(msg.sender)] < arg2:
                                            revert with 'NH{q', 17
                                        balanceOf[address(msg.sender)] -= arg2
                                        if balanceOf[address(arg1)] > -arg2 - 1:
                                            revert with 'NH{q', 17
                                        if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(arg1)] += arg2
                                        emit Transfer(arg2, msg.sender, arg1);
                                    else:
                                        mem[0] = arg1
                                        mem[32] = 11
                                        if stor11[address(arg1)]:
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if not arg1:
                                                revert with 0, 'ERC20: transfer to the zero address'
                                            _11035 = mem[64]
                                            mem[64] = mem[64] + 96
                                            mem[_11035] = 38
                                            mem[_11035 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                            if arg2 > balanceOf[address(msg.sender)]:
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 38
                                                mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_11035 + 70 len 26]
                                                revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                            if balanceOf[address(msg.sender)] < arg2:
                                                revert with 'NH{q', 17
                                            balanceOf[address(msg.sender)] -= arg2
                                            if balanceOf[address(arg1)] > -arg2 - 1:
                                                revert with 'NH{q', 17
                                            if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(arg1)] += arg2
                                            emit Transfer(arg2, msg.sender, arg1);
                                        else:
                                            if totalFees <= 0:
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if not arg1:
                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                _11077 = mem[64]
                                                mem[64] = mem[64] + 96
                                                mem[_11077] = 38
                                                mem[_11077 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                if arg2 > balanceOf[address(msg.sender)]:
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 38
                                                    mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_11077 + 70 len 26]
                                                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                if balanceOf[address(msg.sender)] < arg2:
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] -= arg2
                                                if balanceOf[address(arg1)] > -arg2 - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                balanceOf[address(arg1)] += arg2
                                                emit Transfer(arg2, msg.sender, arg1);
                                            else:
                                                if not arg2:
                                                    _11131 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_11131] = 26
                                                    mem[_11131 + 32] = 'SafeMath: division by zero'
                                                    if not arg2:
                                                        _11434 = mem[64]
                                                        mem[64] = mem[64] + 64
                                                        mem[_11434] = 26
                                                        mem[_11434 + 32] = 'SafeMath: division by zero'
                                                        _11738 = mem[64]
                                                        mem[64] = mem[64] + 64
                                                        mem[_11738] = 30
                                                        mem[_11738 + 32] = 'SafeMath: subtraction overflow'
                                                        if 0 > arg2:
                                                            revert with 0, 'SafeMath: subtraction overflow', 0
                                                        if arg2 < 0:
                                                            revert with 'NH{q', 17
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if not this.address:
                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                        _11882 = mem[64]
                                                        mem[64] = mem[64] + 96
                                                        mem[_11882] = 38
                                                        mem[_11882 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                        if 0 > balanceOf[address(msg.sender)]:
                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = 32
                                                            mem[mem[64] + 36] = 38
                                                            mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_11882 + 70 len 26]
                                                            revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                        if balanceOf[address(msg.sender)] < 0:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(this.address)] > -1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        mem[0] = this.address
                                                        mem[32] = 9
                                                        emit Transfer(0, msg.sender, this.address);
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        _12553 = mem[64]
                                                        mem[64] = mem[64] + 96
                                                        mem[_12553] = 38
                                                        mem[_12553 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                        if 0 > balanceOf[address(msg.sender)]:
                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = 32
                                                            mem[mem[64] + 36] = 38
                                                            mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_12553 + 70 len 26]
                                                            revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                        if balanceOf[address(msg.sender)] < 0:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[57005] > -1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[57005] < balanceOf[57005]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        mem[0] = 57005
                                                        mem[32] = 9
                                                        emit Transfer(0, msg.sender, 57005);
                                                        emit TokenBurn(0, msg.sender);
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if not arg1:
                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                        _13426 = mem[64]
                                                        mem[64] = mem[64] + 96
                                                        mem[_13426] = 38
                                                        mem[_13426 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                        if arg2 > balanceOf[address(msg.sender)]:
                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = 32
                                                            mem[mem[64] + 36] = 38
                                                            mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_13426 + 70 len 26]
                                                            revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                        if balanceOf[address(msg.sender)] < arg2:
                                                            revert with 'NH{q', 17
                                                        balanceOf[address(msg.sender)] -= arg2
                                                        if balanceOf[address(arg1)] > -arg2 - 1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        balanceOf[address(arg1)] += arg2
                                                        emit Transfer(arg2, msg.sender, arg1);
                                                    else:
                                                        if arg2 and burnFee > -1 / arg2:
                                                            revert with 'NH{q', 17
                                                        if not arg2:
                                                            revert with 'NH{q', 18
                                                        if arg2 * burnFee / arg2 != burnFee:
                                                            revert with 0, 'SafeMath: multiplication overflow'
                                                        _11653 = mem[64]
                                                        mem[64] = mem[64] + 64
                                                        mem[_11653] = 26
                                                        mem[_11653 + 32] = 'SafeMath: division by zero'
                                                        if 0 > -(arg2 * burnFee / 100) - 1:
                                                            revert with 'NH{q', 17
                                                        if arg2 * burnFee / 100 < 0:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        _11912 = mem[64]
                                                        mem[64] = mem[64] + 64
                                                        mem[_11912] = 30
                                                        mem[_11912 + 32] = 'SafeMath: subtraction overflow'
                                                        if arg2 * burnFee / 100 > arg2:
                                                            revert with 0, 'SafeMath: subtraction overflow', 0
                                                        if arg2 < arg2 * burnFee / 100:
                                                            revert with 'NH{q', 17
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if not this.address:
                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                        _12162 = mem[64]
                                                        mem[64] = mem[64] + 96
                                                        mem[_12162] = 38
                                                        mem[_12162 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                        if 0 > balanceOf[address(msg.sender)]:
                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = 32
                                                            mem[mem[64] + 36] = 38
                                                            mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_12162 + 70 len 26]
                                                            revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                        if balanceOf[address(msg.sender)] < 0:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(this.address)] > -1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        mem[0] = this.address
                                                        mem[32] = 9
                                                        emit Transfer(0, msg.sender, this.address);
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        _12923 = mem[64]
                                                        mem[64] = mem[64] + 96
                                                        mem[_12923] = 38
                                                        mem[_12923 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                        if arg2 * burnFee / 100 > balanceOf[address(msg.sender)]:
                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = 32
                                                            mem[mem[64] + 36] = 38
                                                            mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_12923 + 70 len 26]
                                                            revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                        if balanceOf[address(msg.sender)] < arg2 * burnFee / 100:
                                                            revert with 'NH{q', 17
                                                        balanceOf[address(msg.sender)] -= arg2 * burnFee / 100
                                                        if balanceOf[57005] > -(arg2 * burnFee / 100) - 1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[57005] + (arg2 * burnFee / 100) < balanceOf[57005]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        mem[0] = 57005
                                                        mem[32] = 9
                                                        balanceOf[57005] += arg2 * burnFee / 100
                                                        emit Transfer((arg2 * burnFee / 100), msg.sender, 57005);
                                                        emit TokenBurn((arg2 * burnFee / 100), msg.sender);
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if not arg1:
                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                        _14164 = mem[64]
                                                        mem[64] = mem[64] + 96
                                                        mem[_14164] = 38
                                                        mem[_14164 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                        if arg2 - (arg2 * burnFee / 100) > balanceOf[address(msg.sender)]:
                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = 32
                                                            mem[mem[64] + 36] = 38
                                                            mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_14164 + 70 len 26]
                                                            revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                        if balanceOf[address(msg.sender)] < arg2 - (arg2 * burnFee / 100):
                                                            revert with 'NH{q', 17
                                                        balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * burnFee / 100)
                                                        if balanceOf[address(arg1)] > -arg2 + (arg2 * burnFee / 100) - 1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(arg1)] + arg2 - (arg2 * burnFee / 100) < balanceOf[address(arg1)]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * burnFee / 100)
                                                        emit Transfer((arg2 - (arg2 * burnFee / 100)), msg.sender, arg1);
                                                else:
                                                    if arg2 and stor14 > -1 / arg2:
                                                        revert with 'NH{q', 17
                                                    if not arg2:
                                                        revert with 'NH{q', 18
                                                    if arg2 * stor14 / arg2 != stor14:
                                                        revert with 0, 'SafeMath: multiplication overflow'
                                                    _11392 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_11392] = 26
                                                    mem[_11392 + 32] = 'SafeMath: division by zero'
                                                    if not arg2:
                                                        _11652 = mem[64]
                                                        mem[64] = mem[64] + 64
                                                        mem[_11652] = 26
                                                        mem[_11652 + 32] = 'SafeMath: division by zero'
                                                        if arg2 * stor14 / 100 > -1:
                                                            revert with 'NH{q', 17
                                                        if arg2 * stor14 / 100 < arg2 * stor14 / 100:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        _11911 = mem[64]
                                                        mem[64] = mem[64] + 64
                                                        mem[_11911] = 30
                                                        mem[_11911 + 32] = 'SafeMath: subtraction overflow'
                                                        if arg2 * stor14 / 100 > arg2:
                                                            revert with 0, 'SafeMath: subtraction overflow', 0
                                                        if arg2 < arg2 * stor14 / 100:
                                                            revert with 'NH{q', 17
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if not this.address:
                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                        _12159 = mem[64]
                                                        mem[64] = mem[64] + 96
                                                        mem[_12159] = 38
                                                        mem[_12159 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                        if arg2 * stor14 / 100 > balanceOf[address(msg.sender)]:
                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = 32
                                                            mem[mem[64] + 36] = 38
                                                            mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_12159 + 70 len 26]
                                                            revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                        if balanceOf[address(msg.sender)] < arg2 * stor14 / 100:
                                                            revert with 'NH{q', 17
                                                        balanceOf[address(msg.sender)] -= arg2 * stor14 / 100
                                                        if balanceOf[address(this.address)] > -(arg2 * stor14 / 100) - 1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(this.address)] + (arg2 * stor14 / 100) < balanceOf[address(this.address)]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        mem[0] = this.address
                                                        mem[32] = 9
                                                        balanceOf[address(this.address)] += arg2 * stor14 / 100
                                                        emit Transfer((arg2 * stor14 / 100), msg.sender, this.address);
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        _12921 = mem[64]
                                                        mem[64] = mem[64] + 96
                                                        mem[_12921] = 38
                                                        mem[_12921 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                        if 0 > balanceOf[address(msg.sender)]:
                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = 32
                                                            mem[mem[64] + 36] = 38
                                                            mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_12921 + 70 len 26]
                                                            revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                        if balanceOf[address(msg.sender)] < 0:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[57005] > -1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[57005] < balanceOf[57005]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        mem[0] = 57005
                                                        mem[32] = 9
                                                        emit Transfer(0, msg.sender, 57005);
                                                        emit TokenBurn(0, msg.sender);
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if not arg1:
                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                        _14161 = mem[64]
                                                        mem[64] = mem[64] + 96
                                                        mem[_14161] = 38
                                                        mem[_14161 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                        if arg2 - (arg2 * stor14 / 100) > balanceOf[address(msg.sender)]:
                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = 32
                                                            mem[mem[64] + 36] = 38
                                                            mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_14161 + 70 len 26]
                                                            revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                        if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor14 / 100):
                                                            revert with 'NH{q', 17
                                                        balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor14 / 100)
                                                        if balanceOf[address(arg1)] > -arg2 + (arg2 * stor14 / 100) - 1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) < balanceOf[address(arg1)]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100)
                                                        emit Transfer((arg2 - (arg2 * stor14 / 100)), msg.sender, arg1);
                                                    else:
                                                        if arg2 and burnFee > -1 / arg2:
                                                            revert with 'NH{q', 17
                                                        if not arg2:
                                                            revert with 'NH{q', 18
                                                        if arg2 * burnFee / arg2 != burnFee:
                                                            revert with 0, 'SafeMath: multiplication overflow'
                                                        _11779 = mem[64]
                                                        mem[64] = mem[64] + 64
                                                        mem[_11779] = 26
                                                        mem[_11779 + 32] = 'SafeMath: division by zero'
                                                        if arg2 * stor14 / 100 > -(arg2 * burnFee / 100) - 1:
                                                            revert with 'NH{q', 17
                                                        if (arg2 * stor14 / 100) + (arg2 * burnFee / 100) < arg2 * stor14 / 100:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        _12214 = mem[64]
                                                        mem[64] = mem[64] + 64
                                                        mem[_12214] = 30
                                                        mem[_12214 + 32] = 'SafeMath: subtraction overflow'
                                                        if (arg2 * stor14 / 100) + (arg2 * burnFee / 100) > arg2:
                                                            revert with 0, 'SafeMath: subtraction overflow', 0
                                                        if arg2 < (arg2 * stor14 / 100) + (arg2 * burnFee / 100):
                                                            revert with 'NH{q', 17
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if not this.address:
                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                        _12550 = mem[64]
                                                        mem[64] = mem[64] + 96
                                                        mem[_12550] = 38
                                                        mem[_12550 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                        if arg2 * stor14 / 100 > balanceOf[address(msg.sender)]:
                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = 32
                                                            mem[mem[64] + 36] = 38
                                                            mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_12550 + 70 len 26]
                                                            revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                        if balanceOf[address(msg.sender)] < arg2 * stor14 / 100:
                                                            revert with 'NH{q', 17
                                                        balanceOf[address(msg.sender)] -= arg2 * stor14 / 100
                                                        if balanceOf[address(this.address)] > -(arg2 * stor14 / 100) - 1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(this.address)] + (arg2 * stor14 / 100) < balanceOf[address(this.address)]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        mem[0] = this.address
                                                        mem[32] = 9
                                                        balanceOf[address(this.address)] += arg2 * stor14 / 100
                                                        emit Transfer((arg2 * stor14 / 100), msg.sender, this.address);
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        _13257 = mem[64]
                                                        mem[64] = mem[64] + 96
                                                        mem[_13257] = 38
                                                        mem[_13257 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                        if arg2 * burnFee / 100 > balanceOf[address(msg.sender)]:
                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = 32
                                                            mem[mem[64] + 36] = 38
                                                            mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_13257 + 70 len 26]
                                                            revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                        if balanceOf[address(msg.sender)] < arg2 * burnFee / 100:
                                                            revert with 'NH{q', 17
                                                        balanceOf[address(msg.sender)] -= arg2 * burnFee / 100
                                                        if balanceOf[57005] > -(arg2 * burnFee / 100) - 1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[57005] + (arg2 * burnFee / 100) < balanceOf[57005]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        mem[0] = 57005
                                                        mem[32] = 9
                                                        balanceOf[57005] += arg2 * burnFee / 100
                                                        emit Transfer((arg2 * burnFee / 100), msg.sender, 57005);
                                                        emit TokenBurn((arg2 * burnFee / 100), msg.sender);
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if not arg1:
                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                        _14507 = mem[64]
                                                        mem[64] = mem[64] + 96
                                                        mem[_14507] = 38
                                                        mem[_14507 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                        if arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100) > balanceOf[address(msg.sender)]:
                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = 32
                                                            mem[mem[64] + 36] = 38
                                                            mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_14507 + 70 len 26]
                                                            revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                        if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100):
                                                            revert with 'NH{q', 17
                                                        balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor14 / 100) + (arg2 * burnFee / 100)
                                                        if balanceOf[address(arg1)] > -arg2 + (arg2 * stor14 / 100) + (arg2 * burnFee / 100) - 1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100) < balanceOf[address(arg1)]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100)
                                                        emit Transfer((arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100)), msg.sender, arg1);
    else:
        if arg1 == owner:
            if arg1 != uniswapV2PairAddress:
                if stor11[address(msg.sender)]:
                    if not msg.sender:
                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                    if not arg1:
                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                    if arg2 > balanceOf[address(msg.sender)]:
                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                    if balanceOf[address(msg.sender)] < arg2:
                        revert with 'NH{q', 17
                    balanceOf[address(msg.sender)] -= arg2
                    if balanceOf[address(arg1)] > -arg2 - 1:
                        revert with 'NH{q', 17
                    if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                        revert with 0, 'SafeMath: addition overflow'
                    balanceOf[address(arg1)] += arg2
                    emit Transfer(arg2, msg.sender, arg1);
                else:
                    if stor11[address(arg1)]:
                        if not msg.sender:
                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                        if not arg1:
                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                        if arg2 > balanceOf[address(msg.sender)]:
                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                        if balanceOf[address(msg.sender)] < arg2:
                            revert with 'NH{q', 17
                        balanceOf[address(msg.sender)] -= arg2
                        if balanceOf[address(arg1)] > -arg2 - 1:
                            revert with 'NH{q', 17
                        if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                            revert with 0, 'SafeMath: addition overflow'
                        balanceOf[address(arg1)] += arg2
                        emit Transfer(arg2, msg.sender, arg1);
                    else:
                        if totalFees <= 0:
                            if not msg.sender:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                            if not arg1:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                            if arg2 > balanceOf[address(msg.sender)]:
                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                            if balanceOf[address(msg.sender)] < arg2:
                                revert with 'NH{q', 17
                            balanceOf[address(msg.sender)] -= arg2
                            if balanceOf[address(arg1)] > -arg2 - 1:
                                revert with 'NH{q', 17
                            if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                revert with 0, 'SafeMath: addition overflow'
                            balanceOf[address(arg1)] += arg2
                            emit Transfer(arg2, msg.sender, arg1);
                        else:
                            if not arg2:
                                if not arg2:
                                    if 0 > arg2:
                                        revert with 0, 'SafeMath: subtraction overflow', 0
                                    if arg2 < 0:
                                        revert with 'NH{q', 17
                                    if not msg.sender:
                                        revert with 0, 'ERC20: transfer from the zero address'
                                    if not this.address:
                                        revert with 0, 'ERC20: transfer to the zero address'
                                    if 0 > balanceOf[address(msg.sender)]:
                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                    if balanceOf[address(msg.sender)] < 0:
                                        revert with 'NH{q', 17
                                    if balanceOf[address(this.address)] > -1:
                                        revert with 'NH{q', 17
                                    if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    emit Transfer(0, msg.sender, this.address);
                                    if not msg.sender:
                                        revert with 0, 'ERC20: transfer from the zero address'
                                    if 0 > balanceOf[address(msg.sender)]:
                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                    if balanceOf[address(msg.sender)] < 0:
                                        revert with 'NH{q', 17
                                    if balanceOf[57005] > -1:
                                        revert with 'NH{q', 17
                                    if balanceOf[57005] < balanceOf[57005]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    emit Transfer(0, msg.sender, 57005);
                                    emit TokenBurn(0, msg.sender);
                                    if not msg.sender:
                                        revert with 0, 'ERC20: transfer from the zero address'
                                    if not arg1:
                                        revert with 0, 'ERC20: transfer to the zero address'
                                    if arg2 > balanceOf[address(msg.sender)]:
                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                    if balanceOf[address(msg.sender)] < arg2:
                                        revert with 'NH{q', 17
                                    balanceOf[address(msg.sender)] -= arg2
                                    if balanceOf[address(arg1)] > -arg2 - 1:
                                        revert with 'NH{q', 17
                                    if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(arg1)] += arg2
                                    emit Transfer(arg2, msg.sender, arg1);
                                else:
                                    if arg2 and burnFee > -1 / arg2:
                                        revert with 'NH{q', 17
                                    if not arg2:
                                        revert with 'NH{q', 18
                                    if arg2 * burnFee / arg2 != burnFee:
                                        revert with 0, 'SafeMath: multiplication overflow'
                                    if 0 > -(arg2 * burnFee / 100) - 1:
                                        revert with 'NH{q', 17
                                    if arg2 * burnFee / 100 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    if arg2 * burnFee / 100 > arg2:
                                        revert with 0, 'SafeMath: subtraction overflow', 0
                                    if arg2 < arg2 * burnFee / 100:
                                        revert with 'NH{q', 17
                                    if not msg.sender:
                                        revert with 0, 'ERC20: transfer from the zero address'
                                    if not this.address:
                                        revert with 0, 'ERC20: transfer to the zero address'
                                    if 0 > balanceOf[address(msg.sender)]:
                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                    if balanceOf[address(msg.sender)] < 0:
                                        revert with 'NH{q', 17
                                    if balanceOf[address(this.address)] > -1:
                                        revert with 'NH{q', 17
                                    if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    emit Transfer(0, msg.sender, this.address);
                                    if not msg.sender:
                                        revert with 0, 'ERC20: transfer from the zero address'
                                    if arg2 * burnFee / 100 > balanceOf[address(msg.sender)]:
                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                    if balanceOf[address(msg.sender)] < arg2 * burnFee / 100:
                                        revert with 'NH{q', 17
                                    balanceOf[address(msg.sender)] -= arg2 * burnFee / 100
                                    if balanceOf[57005] > -(arg2 * burnFee / 100) - 1:
                                        revert with 'NH{q', 17
                                    if balanceOf[57005] + (arg2 * burnFee / 100) < balanceOf[57005]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[57005] += arg2 * burnFee / 100
                                    emit Transfer((arg2 * burnFee / 100), msg.sender, 57005);
                                    emit TokenBurn((arg2 * burnFee / 100), msg.sender);
                                    if not msg.sender:
                                        revert with 0, 'ERC20: transfer from the zero address'
                                    if not arg1:
                                        revert with 0, 'ERC20: transfer to the zero address'
                                    if arg2 - (arg2 * burnFee / 100) > balanceOf[address(msg.sender)]:
                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                    if balanceOf[address(msg.sender)] < arg2 - (arg2 * burnFee / 100):
                                        revert with 'NH{q', 17
                                    balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * burnFee / 100)
                                    if balanceOf[address(arg1)] > -arg2 + (arg2 * burnFee / 100) - 1:
                                        revert with 'NH{q', 17
                                    if balanceOf[address(arg1)] + arg2 - (arg2 * burnFee / 100) < balanceOf[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * burnFee / 100)
                                    emit Transfer((arg2 - (arg2 * burnFee / 100)), msg.sender, arg1);
                            else:
                                if arg2 and stor14 > -1 / arg2:
                                    revert with 'NH{q', 17
                                if not arg2:
                                    revert with 'NH{q', 18
                                if arg2 * stor14 / arg2 != stor14:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeMath: multiplication overflow'
                                if not arg2:
                                    if arg2 * stor14 / 100 > -1:
                                        revert with 'NH{q', 17
                                    if arg2 * stor14 / 100 < arg2 * stor14 / 100:
                                        revert with 0, 'SafeMath: addition overflow'
                                    if arg2 * stor14 / 100 > arg2:
                                        revert with 0, 'SafeMath: subtraction overflow', 0
                                    if arg2 < arg2 * stor14 / 100:
                                        revert with 'NH{q', 17
                                    if not msg.sender:
                                        revert with 0, 'ERC20: transfer from the zero address'
                                    if not this.address:
                                        revert with 0, 'ERC20: transfer to the zero address'
                                    if arg2 * stor14 / 100 > balanceOf[address(msg.sender)]:
                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                    if balanceOf[address(msg.sender)] < arg2 * stor14 / 100:
                                        revert with 'NH{q', 17
                                    balanceOf[address(msg.sender)] -= arg2 * stor14 / 100
                                    if balanceOf[address(this.address)] > -(arg2 * stor14 / 100) - 1:
                                        revert with 'NH{q', 17
                                    if balanceOf[address(this.address)] + (arg2 * stor14 / 100) < balanceOf[address(this.address)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(this.address)] += arg2 * stor14 / 100
                                    emit Transfer((arg2 * stor14 / 100), msg.sender, this.address);
                                    if not msg.sender:
                                        revert with 0, 'ERC20: transfer from the zero address'
                                    if 0 > balanceOf[address(msg.sender)]:
                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                    if balanceOf[address(msg.sender)] < 0:
                                        revert with 'NH{q', 17
                                    if balanceOf[57005] > -1:
                                        revert with 'NH{q', 17
                                    if balanceOf[57005] < balanceOf[57005]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    emit Transfer(0, msg.sender, 57005);
                                    emit TokenBurn(0, msg.sender);
                                    if not msg.sender:
                                        revert with 0, 'ERC20: transfer from the zero address'
                                    if not arg1:
                                        revert with 0, 'ERC20: transfer to the zero address'
                                    if arg2 - (arg2 * stor14 / 100) > balanceOf[address(msg.sender)]:
                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                    if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor14 / 100):
                                        revert with 'NH{q', 17
                                    balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor14 / 100)
                                    if balanceOf[address(arg1)] > -arg2 + (arg2 * stor14 / 100) - 1:
                                        revert with 'NH{q', 17
                                    if balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) < balanceOf[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100)
                                    emit Transfer((arg2 - (arg2 * stor14 / 100)), msg.sender, arg1);
                                else:
                                    if arg2 and burnFee > -1 / arg2:
                                        revert with 'NH{q', 17
                                    if not arg2:
                                        revert with 'NH{q', 18
                                    if arg2 * burnFee / arg2 != burnFee:
                                        revert with 0, 'SafeMath: multiplication overflow'
                                    if arg2 * stor14 / 100 > -(arg2 * burnFee / 100) - 1:
                                        revert with 'NH{q', 17
                                    if (arg2 * stor14 / 100) + (arg2 * burnFee / 100) < arg2 * stor14 / 100:
                                        revert with 0, 'SafeMath: addition overflow'
                                    if (arg2 * stor14 / 100) + (arg2 * burnFee / 100) > arg2:
                                        revert with 0, 'SafeMath: subtraction overflow', 0
                                    if arg2 < (arg2 * stor14 / 100) + (arg2 * burnFee / 100):
                                        revert with 'NH{q', 17
                                    if not msg.sender:
                                        revert with 0, 'ERC20: transfer from the zero address'
                                    if not this.address:
                                        revert with 0, 'ERC20: transfer to the zero address'
                                    if arg2 * stor14 / 100 > balanceOf[address(msg.sender)]:
                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                    if balanceOf[address(msg.sender)] < arg2 * stor14 / 100:
                                        revert with 'NH{q', 17
                                    balanceOf[address(msg.sender)] -= arg2 * stor14 / 100
                                    if balanceOf[address(this.address)] > -(arg2 * stor14 / 100) - 1:
                                        revert with 'NH{q', 17
                                    if balanceOf[address(this.address)] + (arg2 * stor14 / 100) < balanceOf[address(this.address)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(this.address)] += arg2 * stor14 / 100
                                    emit Transfer((arg2 * stor14 / 100), msg.sender, this.address);
                                    if not msg.sender:
                                        revert with 0, 'ERC20: transfer from the zero address'
                                    if arg2 * burnFee / 100 > balanceOf[address(msg.sender)]:
                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                    if balanceOf[address(msg.sender)] < arg2 * burnFee / 100:
                                        revert with 'NH{q', 17
                                    balanceOf[address(msg.sender)] -= arg2 * burnFee / 100
                                    if balanceOf[57005] > -(arg2 * burnFee / 100) - 1:
                                        revert with 'NH{q', 17
                                    if balanceOf[57005] + (arg2 * burnFee / 100) < balanceOf[57005]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[57005] += arg2 * burnFee / 100
                                    emit Transfer((arg2 * burnFee / 100), msg.sender, 57005);
                                    emit TokenBurn((arg2 * burnFee / 100), msg.sender);
                                    if not msg.sender:
                                        revert with 0, 'ERC20: transfer from the zero address'
                                    if not arg1:
                                        revert with 0, 'ERC20: transfer to the zero address'
                                    if arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100) > balanceOf[address(msg.sender)]:
                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                    if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100):
                                        revert with 'NH{q', 17
                                    balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor14 / 100) + (arg2 * burnFee / 100)
                                    if balanceOf[address(arg1)] > -arg2 + (arg2 * stor14 / 100) + (arg2 * burnFee / 100) - 1:
                                        revert with 'NH{q', 17
                                    if balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100) < balanceOf[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100)
                                    emit Transfer((arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100)), msg.sender, arg1);
            else:
                if stor22:
                    if stor11[address(msg.sender)]:
                        if not msg.sender:
                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                        if not arg1:
                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                        if arg2 > balanceOf[address(msg.sender)]:
                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                        if balanceOf[address(msg.sender)] < arg2:
                            revert with 'NH{q', 17
                        balanceOf[address(msg.sender)] -= arg2
                        if balanceOf[address(arg1)] > -arg2 - 1:
                            revert with 'NH{q', 17
                        if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                            revert with 0, 'SafeMath: addition overflow'
                        balanceOf[address(arg1)] += arg2
                        emit Transfer(arg2, msg.sender, arg1);
                    else:
                        if stor11[address(arg1)]:
                            if not msg.sender:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                            if not arg1:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                            if arg2 > balanceOf[address(msg.sender)]:
                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                            if balanceOf[address(msg.sender)] < arg2:
                                revert with 'NH{q', 17
                            balanceOf[address(msg.sender)] -= arg2
                            if balanceOf[address(arg1)] > -arg2 - 1:
                                revert with 'NH{q', 17
                            if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                revert with 0, 'SafeMath: addition overflow'
                            balanceOf[address(arg1)] += arg2
                            emit Transfer(arg2, msg.sender, arg1);
                        else:
                            if totalFees <= 0:
                                if not msg.sender:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                if not arg1:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                if arg2 > balanceOf[address(msg.sender)]:
                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                                if balanceOf[address(msg.sender)] < arg2:
                                    revert with 'NH{q', 17
                                balanceOf[address(msg.sender)] -= arg2
                                if balanceOf[address(arg1)] > -arg2 - 1:
                                    revert with 'NH{q', 17
                                if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                balanceOf[address(arg1)] += arg2
                                emit Transfer(arg2, msg.sender, arg1);
                            else:
                                if not arg2:
                                    if not arg2:
                                        if 0 > arg2:
                                            revert with 0, 'SafeMath: subtraction overflow', 0
                                        if arg2 < 0:
                                            revert with 'NH{q', 17
                                        if not msg.sender:
                                            revert with 0, 'ERC20: transfer from the zero address'
                                        if not this.address:
                                            revert with 0, 'ERC20: transfer to the zero address'
                                        if 0 > balanceOf[address(msg.sender)]:
                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                        if balanceOf[address(msg.sender)] < 0:
                                            revert with 'NH{q', 17
                                        if balanceOf[address(this.address)] > -1:
                                            revert with 'NH{q', 17
                                        if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        emit Transfer(0, msg.sender, this.address);
                                        if not msg.sender:
                                            revert with 0, 'ERC20: transfer from the zero address'
                                        if 0 > balanceOf[address(msg.sender)]:
                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                        if balanceOf[address(msg.sender)] < 0:
                                            revert with 'NH{q', 17
                                        if balanceOf[57005] > -1:
                                            revert with 'NH{q', 17
                                        if balanceOf[57005] < balanceOf[57005]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        emit Transfer(0, msg.sender, 57005);
                                        emit TokenBurn(0, msg.sender);
                                        if not msg.sender:
                                            revert with 0, 'ERC20: transfer from the zero address'
                                        if not arg1:
                                            revert with 0, 'ERC20: transfer to the zero address'
                                        if arg2 > balanceOf[address(msg.sender)]:
                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                        if balanceOf[address(msg.sender)] < arg2:
                                            revert with 'NH{q', 17
                                        balanceOf[address(msg.sender)] -= arg2
                                        if balanceOf[address(arg1)] > -arg2 - 1:
                                            revert with 'NH{q', 17
                                        if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(arg1)] += arg2
                                        emit Transfer(arg2, msg.sender, arg1);
                                    else:
                                        if arg2 and burnFee > -1 / arg2:
                                            revert with 'NH{q', 17
                                        if not arg2:
                                            revert with 'NH{q', 18
                                        if arg2 * burnFee / arg2 != burnFee:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        if 0 > -(arg2 * burnFee / 100) - 1:
                                            revert with 'NH{q', 17
                                        if arg2 * burnFee / 100 < 0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if arg2 * burnFee / 100 > arg2:
                                            revert with 0, 'SafeMath: subtraction overflow', 0
                                        if arg2 < arg2 * burnFee / 100:
                                            revert with 'NH{q', 17
                                        if not msg.sender:
                                            revert with 0, 'ERC20: transfer from the zero address'
                                        if not this.address:
                                            revert with 0, 'ERC20: transfer to the zero address'
                                        if 0 > balanceOf[address(msg.sender)]:
                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                        if balanceOf[address(msg.sender)] < 0:
                                            revert with 'NH{q', 17
                                        if balanceOf[address(this.address)] > -1:
                                            revert with 'NH{q', 17
                                        if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        emit Transfer(0, msg.sender, this.address);
                                        if not msg.sender:
                                            revert with 0, 'ERC20: transfer from the zero address'
                                        if arg2 * burnFee / 100 > balanceOf[address(msg.sender)]:
                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                        if balanceOf[address(msg.sender)] < arg2 * burnFee / 100:
                                            revert with 'NH{q', 17
                                        balanceOf[address(msg.sender)] -= arg2 * burnFee / 100
                                        if balanceOf[57005] > -(arg2 * burnFee / 100) - 1:
                                            revert with 'NH{q', 17
                                        if balanceOf[57005] + (arg2 * burnFee / 100) < balanceOf[57005]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[57005] += arg2 * burnFee / 100
                                        emit Transfer((arg2 * burnFee / 100), msg.sender, 57005);
                                        emit TokenBurn((arg2 * burnFee / 100), msg.sender);
                                        if not msg.sender:
                                            revert with 0, 'ERC20: transfer from the zero address'
                                        if not arg1:
                                            revert with 0, 'ERC20: transfer to the zero address'
                                        if arg2 - (arg2 * burnFee / 100) > balanceOf[address(msg.sender)]:
                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                        if balanceOf[address(msg.sender)] < arg2 - (arg2 * burnFee / 100):
                                            revert with 'NH{q', 17
                                        balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * burnFee / 100)
                                        if balanceOf[address(arg1)] > -arg2 + (arg2 * burnFee / 100) - 1:
                                            revert with 'NH{q', 17
                                        if balanceOf[address(arg1)] + arg2 - (arg2 * burnFee / 100) < balanceOf[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * burnFee / 100)
                                        emit Transfer((arg2 - (arg2 * burnFee / 100)), msg.sender, arg1);
                                else:
                                    if arg2 and stor14 > -1 / arg2:
                                        revert with 'NH{q', 17
                                    if not arg2:
                                        revert with 'NH{q', 18
                                    if arg2 * stor14 / arg2 != stor14:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeMath: multiplication overflow'
                                    if not arg2:
                                        if arg2 * stor14 / 100 > -1:
                                            revert with 'NH{q', 17
                                        if arg2 * stor14 / 100 < arg2 * stor14 / 100:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if arg2 * stor14 / 100 > arg2:
                                            revert with 0, 'SafeMath: subtraction overflow', 0
                                        if arg2 < arg2 * stor14 / 100:
                                            revert with 'NH{q', 17
                                        if not msg.sender:
                                            revert with 0, 'ERC20: transfer from the zero address'
                                        if not this.address:
                                            revert with 0, 'ERC20: transfer to the zero address'
                                        if arg2 * stor14 / 100 > balanceOf[address(msg.sender)]:
                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                        if balanceOf[address(msg.sender)] < arg2 * stor14 / 100:
                                            revert with 'NH{q', 17
                                        balanceOf[address(msg.sender)] -= arg2 * stor14 / 100
                                        if balanceOf[address(this.address)] > -(arg2 * stor14 / 100) - 1:
                                            revert with 'NH{q', 17
                                        if balanceOf[address(this.address)] + (arg2 * stor14 / 100) < balanceOf[address(this.address)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(this.address)] += arg2 * stor14 / 100
                                        emit Transfer((arg2 * stor14 / 100), msg.sender, this.address);
                                        if not msg.sender:
                                            revert with 0, 'ERC20: transfer from the zero address'
                                        if 0 > balanceOf[address(msg.sender)]:
                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                        if balanceOf[address(msg.sender)] < 0:
                                            revert with 'NH{q', 17
                                        if balanceOf[57005] > -1:
                                            revert with 'NH{q', 17
                                        if balanceOf[57005] < balanceOf[57005]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        emit Transfer(0, msg.sender, 57005);
                                        emit TokenBurn(0, msg.sender);
                                        if not msg.sender:
                                            revert with 0, 'ERC20: transfer from the zero address'
                                        if not arg1:
                                            revert with 0, 'ERC20: transfer to the zero address'
                                        if arg2 - (arg2 * stor14 / 100) > balanceOf[address(msg.sender)]:
                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                        if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor14 / 100):
                                            revert with 'NH{q', 17
                                        balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor14 / 100)
                                        if balanceOf[address(arg1)] > -arg2 + (arg2 * stor14 / 100) - 1:
                                            revert with 'NH{q', 17
                                        if balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) < balanceOf[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100)
                                        emit Transfer((arg2 - (arg2 * stor14 / 100)), msg.sender, arg1);
                                    else:
                                        if arg2 and burnFee > -1 / arg2:
                                            revert with 'NH{q', 17
                                        if not arg2:
                                            revert with 'NH{q', 18
                                        if arg2 * burnFee / arg2 != burnFee:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        if arg2 * stor14 / 100 > -(arg2 * burnFee / 100) - 1:
                                            revert with 'NH{q', 17
                                        if (arg2 * stor14 / 100) + (arg2 * burnFee / 100) < arg2 * stor14 / 100:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if (arg2 * stor14 / 100) + (arg2 * burnFee / 100) > arg2:
                                            revert with 0, 'SafeMath: subtraction overflow', 0
                                        if arg2 < (arg2 * stor14 / 100) + (arg2 * burnFee / 100):
                                            revert with 'NH{q', 17
                                        if not msg.sender:
                                            revert with 0, 'ERC20: transfer from the zero address'
                                        if not this.address:
                                            revert with 0, 'ERC20: transfer to the zero address'
                                        if arg2 * stor14 / 100 > balanceOf[address(msg.sender)]:
                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                        if balanceOf[address(msg.sender)] < arg2 * stor14 / 100:
                                            revert with 'NH{q', 17
                                        balanceOf[address(msg.sender)] -= arg2 * stor14 / 100
                                        if balanceOf[address(this.address)] > -(arg2 * stor14 / 100) - 1:
                                            revert with 'NH{q', 17
                                        if balanceOf[address(this.address)] + (arg2 * stor14 / 100) < balanceOf[address(this.address)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(this.address)] += arg2 * stor14 / 100
                                        emit Transfer((arg2 * stor14 / 100), msg.sender, this.address);
                                        if not msg.sender:
                                            revert with 0, 'ERC20: transfer from the zero address'
                                        if arg2 * burnFee / 100 > balanceOf[address(msg.sender)]:
                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                        if balanceOf[address(msg.sender)] < arg2 * burnFee / 100:
                                            revert with 'NH{q', 17
                                        balanceOf[address(msg.sender)] -= arg2 * burnFee / 100
                                        if balanceOf[57005] > -(arg2 * burnFee / 100) - 1:
                                            revert with 'NH{q', 17
                                        if balanceOf[57005] + (arg2 * burnFee / 100) < balanceOf[57005]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[57005] += arg2 * burnFee / 100
                                        emit Transfer((arg2 * burnFee / 100), msg.sender, 57005);
                                        emit TokenBurn((arg2 * burnFee / 100), msg.sender);
                                        if not msg.sender:
                                            revert with 0, 'ERC20: transfer from the zero address'
                                        if not arg1:
                                            revert with 0, 'ERC20: transfer to the zero address'
                                        if arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100) > balanceOf[address(msg.sender)]:
                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                        if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100):
                                            revert with 'NH{q', 17
                                        balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor14 / 100) + (arg2 * burnFee / 100)
                                        if balanceOf[address(arg1)] > -arg2 + (arg2 * stor14 / 100) + (arg2 * burnFee / 100) - 1:
                                            revert with 'NH{q', 17
                                        if balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100) < balanceOf[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100)
                                        emit Transfer((arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100)), msg.sender, arg1);
                else:
                    if balanceOf[address(this.address)] < liquifyThreshhold:
                        if stor11[address(msg.sender)]:
                            if not msg.sender:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                            if not arg1:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                            if arg2 > balanceOf[address(msg.sender)]:
                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                            if balanceOf[address(msg.sender)] < arg2:
                                revert with 'NH{q', 17
                            balanceOf[address(msg.sender)] -= arg2
                            if balanceOf[address(arg1)] > -arg2 - 1:
                                revert with 'NH{q', 17
                            if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                revert with 0, 'SafeMath: addition overflow'
                            balanceOf[address(arg1)] += arg2
                            emit Transfer(arg2, msg.sender, arg1);
                        else:
                            if stor11[address(arg1)]:
                                if not msg.sender:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                if not arg1:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                if arg2 > balanceOf[address(msg.sender)]:
                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                                if balanceOf[address(msg.sender)] < arg2:
                                    revert with 'NH{q', 17
                                balanceOf[address(msg.sender)] -= arg2
                                if balanceOf[address(arg1)] > -arg2 - 1:
                                    revert with 'NH{q', 17
                                if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                balanceOf[address(arg1)] += arg2
                                emit Transfer(arg2, msg.sender, arg1);
                            else:
                                if totalFees <= 0:
                                    if not msg.sender:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                    if not arg1:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                    if arg2 > balanceOf[address(msg.sender)]:
                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                                    if balanceOf[address(msg.sender)] < arg2:
                                        revert with 'NH{q', 17
                                    balanceOf[address(msg.sender)] -= arg2
                                    if balanceOf[address(arg1)] > -arg2 - 1:
                                        revert with 'NH{q', 17
                                    if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(arg1)] += arg2
                                    emit Transfer(arg2, msg.sender, arg1);
                                else:
                                    if not arg2:
                                        if not arg2:
                                            if 0 > arg2:
                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                            if arg2 < 0:
                                                revert with 'NH{q', 17
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if not this.address:
                                                revert with 0, 'ERC20: transfer to the zero address'
                                            if 0 > balanceOf[address(msg.sender)]:
                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                            if balanceOf[address(msg.sender)] < 0:
                                                revert with 'NH{q', 17
                                            if balanceOf[address(this.address)] > -1:
                                                revert with 'NH{q', 17
                                            if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            emit Transfer(0, msg.sender, this.address);
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if 0 > balanceOf[address(msg.sender)]:
                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                            if balanceOf[address(msg.sender)] < 0:
                                                revert with 'NH{q', 17
                                            if balanceOf[57005] > -1:
                                                revert with 'NH{q', 17
                                            if balanceOf[57005] < balanceOf[57005]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            emit Transfer(0, msg.sender, 57005);
                                            emit TokenBurn(0, msg.sender);
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if not arg1:
                                                revert with 0, 'ERC20: transfer to the zero address'
                                            if arg2 > balanceOf[address(msg.sender)]:
                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                            if balanceOf[address(msg.sender)] < arg2:
                                                revert with 'NH{q', 17
                                            balanceOf[address(msg.sender)] -= arg2
                                            if balanceOf[address(arg1)] > -arg2 - 1:
                                                revert with 'NH{q', 17
                                            if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(arg1)] += arg2
                                            emit Transfer(arg2, msg.sender, arg1);
                                        else:
                                            if arg2 and burnFee > -1 / arg2:
                                                revert with 'NH{q', 17
                                            if not arg2:
                                                revert with 'NH{q', 18
                                            if arg2 * burnFee / arg2 != burnFee:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            if 0 > -(arg2 * burnFee / 100) - 1:
                                                revert with 'NH{q', 17
                                            if arg2 * burnFee / 100 < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if arg2 * burnFee / 100 > arg2:
                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                            if arg2 < arg2 * burnFee / 100:
                                                revert with 'NH{q', 17
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if not this.address:
                                                revert with 0, 'ERC20: transfer to the zero address'
                                            if 0 > balanceOf[address(msg.sender)]:
                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                            if balanceOf[address(msg.sender)] < 0:
                                                revert with 'NH{q', 17
                                            if balanceOf[address(this.address)] > -1:
                                                revert with 'NH{q', 17
                                            if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            emit Transfer(0, msg.sender, this.address);
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if arg2 * burnFee / 100 > balanceOf[address(msg.sender)]:
                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                            if balanceOf[address(msg.sender)] < arg2 * burnFee / 100:
                                                revert with 'NH{q', 17
                                            balanceOf[address(msg.sender)] -= arg2 * burnFee / 100
                                            if balanceOf[57005] > -(arg2 * burnFee / 100) - 1:
                                                revert with 'NH{q', 17
                                            if balanceOf[57005] + (arg2 * burnFee / 100) < balanceOf[57005]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[57005] += arg2 * burnFee / 100
                                            emit Transfer((arg2 * burnFee / 100), msg.sender, 57005);
                                            emit TokenBurn((arg2 * burnFee / 100), msg.sender);
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if not arg1:
                                                revert with 0, 'ERC20: transfer to the zero address'
                                            if arg2 - (arg2 * burnFee / 100) > balanceOf[address(msg.sender)]:
                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                            if balanceOf[address(msg.sender)] < arg2 - (arg2 * burnFee / 100):
                                                revert with 'NH{q', 17
                                            balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * burnFee / 100)
                                            if balanceOf[address(arg1)] > -arg2 + (arg2 * burnFee / 100) - 1:
                                                revert with 'NH{q', 17
                                            if balanceOf[address(arg1)] + arg2 - (arg2 * burnFee / 100) < balanceOf[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * burnFee / 100)
                                            emit Transfer((arg2 - (arg2 * burnFee / 100)), msg.sender, arg1);
                                    else:
                                        if arg2 and stor14 > -1 / arg2:
                                            revert with 'NH{q', 17
                                        if not arg2:
                                            revert with 'NH{q', 18
                                        if arg2 * stor14 / arg2 != stor14:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeMath: multiplication overflow'
                                        if not arg2:
                                            if arg2 * stor14 / 100 > -1:
                                                revert with 'NH{q', 17
                                            if arg2 * stor14 / 100 < arg2 * stor14 / 100:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if arg2 * stor14 / 100 > arg2:
                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                            if arg2 < arg2 * stor14 / 100:
                                                revert with 'NH{q', 17
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if not this.address:
                                                revert with 0, 'ERC20: transfer to the zero address'
                                            if arg2 * stor14 / 100 > balanceOf[address(msg.sender)]:
                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                            if balanceOf[address(msg.sender)] < arg2 * stor14 / 100:
                                                revert with 'NH{q', 17
                                            balanceOf[address(msg.sender)] -= arg2 * stor14 / 100
                                            if balanceOf[address(this.address)] > -(arg2 * stor14 / 100) - 1:
                                                revert with 'NH{q', 17
                                            if balanceOf[address(this.address)] + (arg2 * stor14 / 100) < balanceOf[address(this.address)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(this.address)] += arg2 * stor14 / 100
                                            emit Transfer((arg2 * stor14 / 100), msg.sender, this.address);
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if 0 > balanceOf[address(msg.sender)]:
                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                            if balanceOf[address(msg.sender)] < 0:
                                                revert with 'NH{q', 17
                                            if balanceOf[57005] > -1:
                                                revert with 'NH{q', 17
                                            if balanceOf[57005] < balanceOf[57005]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            emit Transfer(0, msg.sender, 57005);
                                            emit TokenBurn(0, msg.sender);
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if not arg1:
                                                revert with 0, 'ERC20: transfer to the zero address'
                                            if arg2 - (arg2 * stor14 / 100) > balanceOf[address(msg.sender)]:
                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                            if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor14 / 100):
                                                revert with 'NH{q', 17
                                            balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor14 / 100)
                                            if balanceOf[address(arg1)] > -arg2 + (arg2 * stor14 / 100) - 1:
                                                revert with 'NH{q', 17
                                            if balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) < balanceOf[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100)
                                            emit Transfer((arg2 - (arg2 * stor14 / 100)), msg.sender, arg1);
                                        else:
                                            if arg2 and burnFee > -1 / arg2:
                                                revert with 'NH{q', 17
                                            if not arg2:
                                                revert with 'NH{q', 18
                                            if arg2 * burnFee / arg2 != burnFee:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            if arg2 * stor14 / 100 > -(arg2 * burnFee / 100) - 1:
                                                revert with 'NH{q', 17
                                            if (arg2 * stor14 / 100) + (arg2 * burnFee / 100) < arg2 * stor14 / 100:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if (arg2 * stor14 / 100) + (arg2 * burnFee / 100) > arg2:
                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                            if arg2 < (arg2 * stor14 / 100) + (arg2 * burnFee / 100):
                                                revert with 'NH{q', 17
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if not this.address:
                                                revert with 0, 'ERC20: transfer to the zero address'
                                            if arg2 * stor14 / 100 > balanceOf[address(msg.sender)]:
                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                            if balanceOf[address(msg.sender)] < arg2 * stor14 / 100:
                                                revert with 'NH{q', 17
                                            balanceOf[address(msg.sender)] -= arg2 * stor14 / 100
                                            if balanceOf[address(this.address)] > -(arg2 * stor14 / 100) - 1:
                                                revert with 'NH{q', 17
                                            if balanceOf[address(this.address)] + (arg2 * stor14 / 100) < balanceOf[address(this.address)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(this.address)] += arg2 * stor14 / 100
                                            emit Transfer((arg2 * stor14 / 100), msg.sender, this.address);
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if arg2 * burnFee / 100 > balanceOf[address(msg.sender)]:
                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                            if balanceOf[address(msg.sender)] < arg2 * burnFee / 100:
                                                revert with 'NH{q', 17
                                            balanceOf[address(msg.sender)] -= arg2 * burnFee / 100
                                            if balanceOf[57005] > -(arg2 * burnFee / 100) - 1:
                                                revert with 'NH{q', 17
                                            if balanceOf[57005] + (arg2 * burnFee / 100) < balanceOf[57005]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[57005] += arg2 * burnFee / 100
                                            emit Transfer((arg2 * burnFee / 100), msg.sender, 57005);
                                            emit TokenBurn((arg2 * burnFee / 100), msg.sender);
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if not arg1:
                                                revert with 0, 'ERC20: transfer to the zero address'
                                            if arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100) > balanceOf[address(msg.sender)]:
                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                            if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100):
                                                revert with 'NH{q', 17
                                            balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor14 / 100) + (arg2 * burnFee / 100)
                                            if balanceOf[address(arg1)] > -arg2 + (arg2 * stor14 / 100) + (arg2 * burnFee / 100) - 1:
                                                revert with 'NH{q', 17
                                            if balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100) < balanceOf[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100)
                                            emit Transfer((arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100)), msg.sender, arg1);
                    else:
                        if stor14 <= 0:
                            if stor11[address(msg.sender)]:
                                if not msg.sender:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                if not arg1:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                if arg2 > balanceOf[address(msg.sender)]:
                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                                if balanceOf[address(msg.sender)] < arg2:
                                    revert with 'NH{q', 17
                                balanceOf[address(msg.sender)] -= arg2
                                if balanceOf[address(arg1)] > -arg2 - 1:
                                    revert with 'NH{q', 17
                                if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                balanceOf[address(arg1)] += arg2
                                emit Transfer(arg2, msg.sender, arg1);
                            else:
                                if stor11[address(arg1)]:
                                    if not msg.sender:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                    if not arg1:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                    if arg2 > balanceOf[address(msg.sender)]:
                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                                    if balanceOf[address(msg.sender)] < arg2:
                                        revert with 'NH{q', 17
                                    balanceOf[address(msg.sender)] -= arg2
                                    if balanceOf[address(arg1)] > -arg2 - 1:
                                        revert with 'NH{q', 17
                                    if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(arg1)] += arg2
                                    emit Transfer(arg2, msg.sender, arg1);
                                else:
                                    if totalFees <= 0:
                                        if not msg.sender:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                        if not arg1:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                        if arg2 > balanceOf[address(msg.sender)]:
                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                                        if balanceOf[address(msg.sender)] < arg2:
                                            revert with 'NH{q', 17
                                        balanceOf[address(msg.sender)] -= arg2
                                        if balanceOf[address(arg1)] > -arg2 - 1:
                                            revert with 'NH{q', 17
                                        if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(arg1)] += arg2
                                        emit Transfer(arg2, msg.sender, arg1);
                                    else:
                                        if not arg2:
                                            if not arg2:
                                                if 0 > arg2:
                                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                                if arg2 < 0:
                                                    revert with 'NH{q', 17
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if not this.address:
                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                if 0 > balanceOf[address(msg.sender)]:
                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                                if balanceOf[address(msg.sender)] < 0:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(this.address)] > -1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                emit Transfer(0, msg.sender, this.address);
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if 0 > balanceOf[address(msg.sender)]:
                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                                if balanceOf[address(msg.sender)] < 0:
                                                    revert with 'NH{q', 17
                                                if balanceOf[57005] > -1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[57005] < balanceOf[57005]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                emit Transfer(0, msg.sender, 57005);
                                                emit TokenBurn(0, msg.sender);
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if not arg1:
                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                if arg2 > balanceOf[address(msg.sender)]:
                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                                if balanceOf[address(msg.sender)] < arg2:
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] -= arg2
                                                if balanceOf[address(arg1)] > -arg2 - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                balanceOf[address(arg1)] += arg2
                                                emit Transfer(arg2, msg.sender, arg1);
                                            else:
                                                if arg2 and burnFee > -1 / arg2:
                                                    revert with 'NH{q', 17
                                                if not arg2:
                                                    revert with 'NH{q', 18
                                                if arg2 * burnFee / arg2 != burnFee:
                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                if 0 > -(arg2 * burnFee / 100) - 1:
                                                    revert with 'NH{q', 17
                                                if arg2 * burnFee / 100 < 0:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if arg2 * burnFee / 100 > arg2:
                                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                                if arg2 < arg2 * burnFee / 100:
                                                    revert with 'NH{q', 17
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if not this.address:
                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                if 0 > balanceOf[address(msg.sender)]:
                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                                if balanceOf[address(msg.sender)] < 0:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(this.address)] > -1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                emit Transfer(0, msg.sender, this.address);
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if arg2 * burnFee / 100 > balanceOf[address(msg.sender)]:
                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                                if balanceOf[address(msg.sender)] < arg2 * burnFee / 100:
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] -= arg2 * burnFee / 100
                                                if balanceOf[57005] > -(arg2 * burnFee / 100) - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[57005] + (arg2 * burnFee / 100) < balanceOf[57005]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                balanceOf[57005] += arg2 * burnFee / 100
                                                emit Transfer((arg2 * burnFee / 100), msg.sender, 57005);
                                                emit TokenBurn((arg2 * burnFee / 100), msg.sender);
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if not arg1:
                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                if arg2 - (arg2 * burnFee / 100) > balanceOf[address(msg.sender)]:
                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                                if balanceOf[address(msg.sender)] < arg2 - (arg2 * burnFee / 100):
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * burnFee / 100)
                                                if balanceOf[address(arg1)] > -arg2 + (arg2 * burnFee / 100) - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(arg1)] + arg2 - (arg2 * burnFee / 100) < balanceOf[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * burnFee / 100)
                                                emit Transfer((arg2 - (arg2 * burnFee / 100)), msg.sender, arg1);
                                        else:
                                            if arg2 and stor14 > -1 / arg2:
                                                revert with 'NH{q', 17
                                            if not arg2:
                                                revert with 'NH{q', 18
                                            if arg2 * stor14 / arg2 != stor14:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeMath: multiplication overflow'
                                            if not arg2:
                                                if arg2 * stor14 / 100 > -1:
                                                    revert with 'NH{q', 17
                                                if arg2 * stor14 / 100 < arg2 * stor14 / 100:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if arg2 * stor14 / 100 > arg2:
                                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                                if arg2 < arg2 * stor14 / 100:
                                                    revert with 'NH{q', 17
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if not this.address:
                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                if arg2 * stor14 / 100 > balanceOf[address(msg.sender)]:
                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                                if balanceOf[address(msg.sender)] < arg2 * stor14 / 100:
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] -= arg2 * stor14 / 100
                                                if balanceOf[address(this.address)] > -(arg2 * stor14 / 100) - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(this.address)] + (arg2 * stor14 / 100) < balanceOf[address(this.address)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                balanceOf[address(this.address)] += arg2 * stor14 / 100
                                                emit Transfer((arg2 * stor14 / 100), msg.sender, this.address);
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if 0 > balanceOf[address(msg.sender)]:
                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                                if balanceOf[address(msg.sender)] < 0:
                                                    revert with 'NH{q', 17
                                                if balanceOf[57005] > -1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[57005] < balanceOf[57005]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                emit Transfer(0, msg.sender, 57005);
                                                emit TokenBurn(0, msg.sender);
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if not arg1:
                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                if arg2 - (arg2 * stor14 / 100) > balanceOf[address(msg.sender)]:
                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                                if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor14 / 100):
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor14 / 100)
                                                if balanceOf[address(arg1)] > -arg2 + (arg2 * stor14 / 100) - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) < balanceOf[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100)
                                                emit Transfer((arg2 - (arg2 * stor14 / 100)), msg.sender, arg1);
                                            else:
                                                if arg2 and burnFee > -1 / arg2:
                                                    revert with 'NH{q', 17
                                                if not arg2:
                                                    revert with 'NH{q', 18
                                                if arg2 * burnFee / arg2 != burnFee:
                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                if arg2 * stor14 / 100 > -(arg2 * burnFee / 100) - 1:
                                                    revert with 'NH{q', 17
                                                if (arg2 * stor14 / 100) + (arg2 * burnFee / 100) < arg2 * stor14 / 100:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if (arg2 * stor14 / 100) + (arg2 * burnFee / 100) > arg2:
                                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                                if arg2 < (arg2 * stor14 / 100) + (arg2 * burnFee / 100):
                                                    revert with 'NH{q', 17
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if not this.address:
                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                if arg2 * stor14 / 100 > balanceOf[address(msg.sender)]:
                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                                if balanceOf[address(msg.sender)] < arg2 * stor14 / 100:
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] -= arg2 * stor14 / 100
                                                if balanceOf[address(this.address)] > -(arg2 * stor14 / 100) - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(this.address)] + (arg2 * stor14 / 100) < balanceOf[address(this.address)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                balanceOf[address(this.address)] += arg2 * stor14 / 100
                                                emit Transfer((arg2 * stor14 / 100), msg.sender, this.address);
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if arg2 * burnFee / 100 > balanceOf[address(msg.sender)]:
                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                                if balanceOf[address(msg.sender)] < arg2 * burnFee / 100:
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] -= arg2 * burnFee / 100
                                                if balanceOf[57005] > -(arg2 * burnFee / 100) - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[57005] + (arg2 * burnFee / 100) < balanceOf[57005]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                balanceOf[57005] += arg2 * burnFee / 100
                                                emit Transfer((arg2 * burnFee / 100), msg.sender, 57005);
                                                emit TokenBurn((arg2 * burnFee / 100), msg.sender);
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if not arg1:
                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                if arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100) > balanceOf[address(msg.sender)]:
                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                                if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100):
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor14 / 100) + (arg2 * burnFee / 100)
                                                if balanceOf[address(arg1)] > -arg2 + (arg2 * stor14 / 100) + (arg2 * burnFee / 100) - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100) < balanceOf[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100)
                                                emit Transfer((arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100)), msg.sender, arg1);
                        else:
                            if msg.sender == owner:
                                if stor11[address(msg.sender)]:
                                    if not msg.sender:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                    if not arg1:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                    if arg2 > balanceOf[address(msg.sender)]:
                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                                    if balanceOf[address(msg.sender)] < arg2:
                                        revert with 'NH{q', 17
                                    balanceOf[address(msg.sender)] -= arg2
                                    if balanceOf[address(arg1)] > -arg2 - 1:
                                        revert with 'NH{q', 17
                                    if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(arg1)] += arg2
                                    emit Transfer(arg2, msg.sender, arg1);
                                else:
                                    if stor11[address(arg1)]:
                                        if not msg.sender:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                        if not arg1:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                        if arg2 > balanceOf[address(msg.sender)]:
                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                                        if balanceOf[address(msg.sender)] < arg2:
                                            revert with 'NH{q', 17
                                        balanceOf[address(msg.sender)] -= arg2
                                        if balanceOf[address(arg1)] > -arg2 - 1:
                                            revert with 'NH{q', 17
                                        if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(arg1)] += arg2
                                        emit Transfer(arg2, msg.sender, arg1);
                                    else:
                                        if totalFees <= 0:
                                            if not msg.sender:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                            if not arg1:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                            if arg2 > balanceOf[address(msg.sender)]:
                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                                            if balanceOf[address(msg.sender)] < arg2:
                                                revert with 'NH{q', 17
                                            balanceOf[address(msg.sender)] -= arg2
                                            if balanceOf[address(arg1)] > -arg2 - 1:
                                                revert with 'NH{q', 17
                                            if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(arg1)] += arg2
                                            emit Transfer(arg2, msg.sender, arg1);
                                        else:
                                            if not arg2:
                                                if not arg2:
                                                    if 0 > arg2:
                                                        revert with 0, 'SafeMath: subtraction overflow', 0
                                                    if arg2 < 0:
                                                        revert with 'NH{q', 17
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if not this.address:
                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                    if 0 > balanceOf[address(msg.sender)]:
                                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                                    if balanceOf[address(msg.sender)] < 0:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(this.address)] > -1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    emit Transfer(0, msg.sender, this.address);
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if 0 > balanceOf[address(msg.sender)]:
                                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                                    if balanceOf[address(msg.sender)] < 0:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[57005] > -1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[57005] < balanceOf[57005]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    emit Transfer(0, msg.sender, 57005);
                                                    emit TokenBurn(0, msg.sender);
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if not arg1:
                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                    if arg2 > balanceOf[address(msg.sender)]:
                                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                                    if balanceOf[address(msg.sender)] < arg2:
                                                        revert with 'NH{q', 17
                                                    balanceOf[address(msg.sender)] -= arg2
                                                    if balanceOf[address(arg1)] > -arg2 - 1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    balanceOf[address(arg1)] += arg2
                                                    emit Transfer(arg2, msg.sender, arg1);
                                                else:
                                                    if arg2 and burnFee > -1 / arg2:
                                                        revert with 'NH{q', 17
                                                    if not arg2:
                                                        revert with 'NH{q', 18
                                                    if arg2 * burnFee / arg2 != burnFee:
                                                        revert with 0, 'SafeMath: multiplication overflow'
                                                    if 0 > -(arg2 * burnFee / 100) - 1:
                                                        revert with 'NH{q', 17
                                                    if arg2 * burnFee / 100 < 0:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if arg2 * burnFee / 100 > arg2:
                                                        revert with 0, 'SafeMath: subtraction overflow', 0
                                                    if arg2 < arg2 * burnFee / 100:
                                                        revert with 'NH{q', 17
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if not this.address:
                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                    if 0 > balanceOf[address(msg.sender)]:
                                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                                    if balanceOf[address(msg.sender)] < 0:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(this.address)] > -1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    emit Transfer(0, msg.sender, this.address);
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if arg2 * burnFee / 100 > balanceOf[address(msg.sender)]:
                                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                                    if balanceOf[address(msg.sender)] < arg2 * burnFee / 100:
                                                        revert with 'NH{q', 17
                                                    balanceOf[address(msg.sender)] -= arg2 * burnFee / 100
                                                    if balanceOf[57005] > -(arg2 * burnFee / 100) - 1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[57005] + (arg2 * burnFee / 100) < balanceOf[57005]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    balanceOf[57005] += arg2 * burnFee / 100
                                                    emit Transfer((arg2 * burnFee / 100), msg.sender, 57005);
                                                    emit TokenBurn((arg2 * burnFee / 100), msg.sender);
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if not arg1:
                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                    if arg2 - (arg2 * burnFee / 100) > balanceOf[address(msg.sender)]:
                                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                                    if balanceOf[address(msg.sender)] < arg2 - (arg2 * burnFee / 100):
                                                        revert with 'NH{q', 17
                                                    balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * burnFee / 100)
                                                    if balanceOf[address(arg1)] > -arg2 + (arg2 * burnFee / 100) - 1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(arg1)] + arg2 - (arg2 * burnFee / 100) < balanceOf[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * burnFee / 100)
                                                    emit Transfer((arg2 - (arg2 * burnFee / 100)), msg.sender, arg1);
                                            else:
                                                if arg2 and stor14 > -1 / arg2:
                                                    revert with 'NH{q', 17
                                                if not arg2:
                                                    revert with 'NH{q', 18
                                                if arg2 * stor14 / arg2 != stor14:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeMath: multiplication overflow'
                                                if not arg2:
                                                    if arg2 * stor14 / 100 > -1:
                                                        revert with 'NH{q', 17
                                                    if arg2 * stor14 / 100 < arg2 * stor14 / 100:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if arg2 * stor14 / 100 > arg2:
                                                        revert with 0, 'SafeMath: subtraction overflow', 0
                                                    if arg2 < arg2 * stor14 / 100:
                                                        revert with 'NH{q', 17
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if not this.address:
                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                    if arg2 * stor14 / 100 > balanceOf[address(msg.sender)]:
                                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                                    if balanceOf[address(msg.sender)] < arg2 * stor14 / 100:
                                                        revert with 'NH{q', 17
                                                    balanceOf[address(msg.sender)] -= arg2 * stor14 / 100
                                                    if balanceOf[address(this.address)] > -(arg2 * stor14 / 100) - 1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(this.address)] + (arg2 * stor14 / 100) < balanceOf[address(this.address)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    balanceOf[address(this.address)] += arg2 * stor14 / 100
                                                    emit Transfer((arg2 * stor14 / 100), msg.sender, this.address);
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if 0 > balanceOf[address(msg.sender)]:
                                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                                    if balanceOf[address(msg.sender)] < 0:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[57005] > -1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[57005] < balanceOf[57005]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    emit Transfer(0, msg.sender, 57005);
                                                    emit TokenBurn(0, msg.sender);
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if not arg1:
                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                    if arg2 - (arg2 * stor14 / 100) > balanceOf[address(msg.sender)]:
                                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                                    if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor14 / 100):
                                                        revert with 'NH{q', 17
                                                    balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor14 / 100)
                                                    if balanceOf[address(arg1)] > -arg2 + (arg2 * stor14 / 100) - 1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) < balanceOf[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100)
                                                    emit Transfer((arg2 - (arg2 * stor14 / 100)), msg.sender, arg1);
                                                else:
                                                    if arg2 and burnFee > -1 / arg2:
                                                        revert with 'NH{q', 17
                                                    if not arg2:
                                                        revert with 'NH{q', 18
                                                    if arg2 * burnFee / arg2 != burnFee:
                                                        revert with 0, 'SafeMath: multiplication overflow'
                                                    if arg2 * stor14 / 100 > -(arg2 * burnFee / 100) - 1:
                                                        revert with 'NH{q', 17
                                                    if (arg2 * stor14 / 100) + (arg2 * burnFee / 100) < arg2 * stor14 / 100:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if (arg2 * stor14 / 100) + (arg2 * burnFee / 100) > arg2:
                                                        revert with 0, 'SafeMath: subtraction overflow', 0
                                                    if arg2 < (arg2 * stor14 / 100) + (arg2 * burnFee / 100):
                                                        revert with 'NH{q', 17
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if not this.address:
                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                    if arg2 * stor14 / 100 > balanceOf[address(msg.sender)]:
                                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                                    if balanceOf[address(msg.sender)] < arg2 * stor14 / 100:
                                                        revert with 'NH{q', 17
                                                    balanceOf[address(msg.sender)] -= arg2 * stor14 / 100
                                                    if balanceOf[address(this.address)] > -(arg2 * stor14 / 100) - 1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(this.address)] + (arg2 * stor14 / 100) < balanceOf[address(this.address)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    balanceOf[address(this.address)] += arg2 * stor14 / 100
                                                    emit Transfer((arg2 * stor14 / 100), msg.sender, this.address);
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if arg2 * burnFee / 100 > balanceOf[address(msg.sender)]:
                                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                                    if balanceOf[address(msg.sender)] < arg2 * burnFee / 100:
                                                        revert with 'NH{q', 17
                                                    balanceOf[address(msg.sender)] -= arg2 * burnFee / 100
                                                    if balanceOf[57005] > -(arg2 * burnFee / 100) - 1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[57005] + (arg2 * burnFee / 100) < balanceOf[57005]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    balanceOf[57005] += arg2 * burnFee / 100
                                                    emit Transfer((arg2 * burnFee / 100), msg.sender, 57005);
                                                    emit TokenBurn((arg2 * burnFee / 100), msg.sender);
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if not arg1:
                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                    if arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100) > balanceOf[address(msg.sender)]:
                                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                                    if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100):
                                                        revert with 'NH{q', 17
                                                    balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor14 / 100) + (arg2 * burnFee / 100)
                                                    if balanceOf[address(arg1)] > -arg2 + (arg2 * stor14 / 100) + (arg2 * burnFee / 100) - 1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100) < balanceOf[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100)
                                                    emit Transfer((arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100)), msg.sender, arg1);
                            else:
                                if arg1 == owner:
                                    if stor11[address(msg.sender)]:
                                        if not msg.sender:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                        if not arg1:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                        if arg2 > balanceOf[address(msg.sender)]:
                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                                        if balanceOf[address(msg.sender)] < arg2:
                                            revert with 'NH{q', 17
                                        balanceOf[address(msg.sender)] -= arg2
                                        if balanceOf[address(arg1)] > -arg2 - 1:
                                            revert with 'NH{q', 17
                                        if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(arg1)] += arg2
                                        emit Transfer(arg2, msg.sender, arg1);
                                    else:
                                        if stor11[address(arg1)]:
                                            if not msg.sender:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                            if not arg1:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                            if arg2 > balanceOf[address(msg.sender)]:
                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                                            if balanceOf[address(msg.sender)] < arg2:
                                                revert with 'NH{q', 17
                                            balanceOf[address(msg.sender)] -= arg2
                                            if balanceOf[address(arg1)] > -arg2 - 1:
                                                revert with 'NH{q', 17
                                            if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(arg1)] += arg2
                                            emit Transfer(arg2, msg.sender, arg1);
                                        else:
                                            if totalFees <= 0:
                                                if not msg.sender:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                if not arg1:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                if arg2 > balanceOf[address(msg.sender)]:
                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                                                if balanceOf[address(msg.sender)] < arg2:
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] -= arg2
                                                if balanceOf[address(arg1)] > -arg2 - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                balanceOf[address(arg1)] += arg2
                                                emit Transfer(arg2, msg.sender, arg1);
                                            else:
                                                if not arg2:
                                                    if not arg2:
                                                        if 0 > arg2:
                                                            revert with 0, 'SafeMath: subtraction overflow', 0
                                                        if arg2 < 0:
                                                            revert with 'NH{q', 17
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if not this.address:
                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                        if 0 > balanceOf[address(msg.sender)]:
                                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                                        if balanceOf[address(msg.sender)] < 0:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(this.address)] > -1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        emit Transfer(0, msg.sender, this.address);
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if 0 > balanceOf[address(msg.sender)]:
                                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                                        if balanceOf[address(msg.sender)] < 0:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[57005] > -1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[57005] < balanceOf[57005]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        emit Transfer(0, msg.sender, 57005);
                                                        emit TokenBurn(0, msg.sender);
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if not arg1:
                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                        if arg2 > balanceOf[address(msg.sender)]:
                                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                                        if balanceOf[address(msg.sender)] < arg2:
                                                            revert with 'NH{q', 17
                                                        balanceOf[address(msg.sender)] -= arg2
                                                        if balanceOf[address(arg1)] > -arg2 - 1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        balanceOf[address(arg1)] += arg2
                                                        emit Transfer(arg2, msg.sender, arg1);
                                                    else:
                                                        if arg2 and burnFee > -1 / arg2:
                                                            revert with 'NH{q', 17
                                                        if not arg2:
                                                            revert with 'NH{q', 18
                                                        if arg2 * burnFee / arg2 != burnFee:
                                                            revert with 0, 'SafeMath: multiplication overflow'
                                                        if 0 > -(arg2 * burnFee / 100) - 1:
                                                            revert with 'NH{q', 17
                                                        if arg2 * burnFee / 100 < 0:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        if arg2 * burnFee / 100 > arg2:
                                                            revert with 0, 'SafeMath: subtraction overflow', 0
                                                        if arg2 < arg2 * burnFee / 100:
                                                            revert with 'NH{q', 17
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if not this.address:
                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                        if 0 > balanceOf[address(msg.sender)]:
                                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                                        if balanceOf[address(msg.sender)] < 0:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(this.address)] > -1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        emit Transfer(0, msg.sender, this.address);
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if arg2 * burnFee / 100 > balanceOf[address(msg.sender)]:
                                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                                        if balanceOf[address(msg.sender)] < arg2 * burnFee / 100:
                                                            revert with 'NH{q', 17
                                                        balanceOf[address(msg.sender)] -= arg2 * burnFee / 100
                                                        if balanceOf[57005] > -(arg2 * burnFee / 100) - 1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[57005] + (arg2 * burnFee / 100) < balanceOf[57005]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        balanceOf[57005] += arg2 * burnFee / 100
                                                        emit Transfer((arg2 * burnFee / 100), msg.sender, 57005);
                                                        emit TokenBurn((arg2 * burnFee / 100), msg.sender);
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if not arg1:
                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                        if arg2 - (arg2 * burnFee / 100) > balanceOf[address(msg.sender)]:
                                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                                        if balanceOf[address(msg.sender)] < arg2 - (arg2 * burnFee / 100):
                                                            revert with 'NH{q', 17
                                                        balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * burnFee / 100)
                                                        if balanceOf[address(arg1)] > -arg2 + (arg2 * burnFee / 100) - 1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(arg1)] + arg2 - (arg2 * burnFee / 100) < balanceOf[address(arg1)]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * burnFee / 100)
                                                        emit Transfer((arg2 - (arg2 * burnFee / 100)), msg.sender, arg1);
                                                else:
                                                    if arg2 and stor14 > -1 / arg2:
                                                        revert with 'NH{q', 17
                                                    if not arg2:
                                                        revert with 'NH{q', 18
                                                    if arg2 * stor14 / arg2 != stor14:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeMath: multiplication overflow'
                                                    if not arg2:
                                                        if arg2 * stor14 / 100 > -1:
                                                            revert with 'NH{q', 17
                                                        if arg2 * stor14 / 100 < arg2 * stor14 / 100:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        if arg2 * stor14 / 100 > arg2:
                                                            revert with 0, 'SafeMath: subtraction overflow', 0
                                                        if arg2 < arg2 * stor14 / 100:
                                                            revert with 'NH{q', 17
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if not this.address:
                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                        if arg2 * stor14 / 100 > balanceOf[address(msg.sender)]:
                                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                                        if balanceOf[address(msg.sender)] < arg2 * stor14 / 100:
                                                            revert with 'NH{q', 17
                                                        balanceOf[address(msg.sender)] -= arg2 * stor14 / 100
                                                        if balanceOf[address(this.address)] > -(arg2 * stor14 / 100) - 1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(this.address)] + (arg2 * stor14 / 100) < balanceOf[address(this.address)]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        balanceOf[address(this.address)] += arg2 * stor14 / 100
                                                        emit Transfer((arg2 * stor14 / 100), msg.sender, this.address);
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if 0 > balanceOf[address(msg.sender)]:
                                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                                        if balanceOf[address(msg.sender)] < 0:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[57005] > -1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[57005] < balanceOf[57005]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        emit Transfer(0, msg.sender, 57005);
                                                        emit TokenBurn(0, msg.sender);
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if not arg1:
                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                        if arg2 - (arg2 * stor14 / 100) > balanceOf[address(msg.sender)]:
                                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                                        if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor14 / 100):
                                                            revert with 'NH{q', 17
                                                        balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor14 / 100)
                                                        if balanceOf[address(arg1)] > -arg2 + (arg2 * stor14 / 100) - 1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) < balanceOf[address(arg1)]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100)
                                                        emit Transfer((arg2 - (arg2 * stor14 / 100)), msg.sender, arg1);
                                                    else:
                                                        if arg2 and burnFee > -1 / arg2:
                                                            revert with 'NH{q', 17
                                                        if not arg2:
                                                            revert with 'NH{q', 18
                                                        if arg2 * burnFee / arg2 != burnFee:
                                                            revert with 0, 'SafeMath: multiplication overflow'
                                                        if arg2 * stor14 / 100 > -(arg2 * burnFee / 100) - 1:
                                                            revert with 'NH{q', 17
                                                        if (arg2 * stor14 / 100) + (arg2 * burnFee / 100) < arg2 * stor14 / 100:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        if (arg2 * stor14 / 100) + (arg2 * burnFee / 100) > arg2:
                                                            revert with 0, 'SafeMath: subtraction overflow', 0
                                                        if arg2 < (arg2 * stor14 / 100) + (arg2 * burnFee / 100):
                                                            revert with 'NH{q', 17
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if not this.address:
                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                        if arg2 * stor14 / 100 > balanceOf[address(msg.sender)]:
                                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                                        if balanceOf[address(msg.sender)] < arg2 * stor14 / 100:
                                                            revert with 'NH{q', 17
                                                        balanceOf[address(msg.sender)] -= arg2 * stor14 / 100
                                                        if balanceOf[address(this.address)] > -(arg2 * stor14 / 100) - 1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(this.address)] + (arg2 * stor14 / 100) < balanceOf[address(this.address)]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        balanceOf[address(this.address)] += arg2 * stor14 / 100
                                                        emit Transfer((arg2 * stor14 / 100), msg.sender, this.address);
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if arg2 * burnFee / 100 > balanceOf[address(msg.sender)]:
                                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                                        if balanceOf[address(msg.sender)] < arg2 * burnFee / 100:
                                                            revert with 'NH{q', 17
                                                        balanceOf[address(msg.sender)] -= arg2 * burnFee / 100
                                                        if balanceOf[57005] > -(arg2 * burnFee / 100) - 1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[57005] + (arg2 * burnFee / 100) < balanceOf[57005]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        balanceOf[57005] += arg2 * burnFee / 100
                                                        emit Transfer((arg2 * burnFee / 100), msg.sender, 57005);
                                                        emit TokenBurn((arg2 * burnFee / 100), msg.sender);
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if not arg1:
                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                        if arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100) > balanceOf[address(msg.sender)]:
                                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                                        if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100):
                                                            revert with 'NH{q', 17
                                                        balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor14 / 100) + (arg2 * burnFee / 100)
                                                        if balanceOf[address(arg1)] > -arg2 + (arg2 * stor14 / 100) + (arg2 * burnFee / 100) - 1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100) < balanceOf[address(arg1)]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100)
                                                        emit Transfer((arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100)), msg.sender, arg1);
                                else:
                                    stor22 = 1
                                    if not balanceOf[address(this.address)]:
                                        mem[96] = 26
                                        mem[128] = 'SafeMath: division by zero'
                                        if stor14 <= 0:
                                            revert with 0, 'SafeMath: division by zero', 0
                                        if not stor14:
                                            revert with 'NH{q', 18
                                        if not balanceOf[address(this.address)]:
                                            mem[160] = 26
                                            mem[192] = 'SafeMath: division by zero'
                                            if stor14 <= 0:
                                                revert with 0, 'SafeMath: division by zero', 0
                                            if not stor14:
                                                revert with 'NH{q', 18
                                            mem[224] = 26
                                            mem[256] = 'SafeMath: division by zero'
                                            mem[288] = 30
                                            mem[320] = 'SafeMath: subtraction overflow'
                                            if 0 / stor14 / 2 > 0 / stor14:
                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                            if 0 / stor14 < 0 / stor14 / 2:
                                                revert with 'NH{q', 17
                                            mem[352] = 2
                                            mem[384] = this.address
                                            require ext_code.size(uniswapV2RouterAddress)
                                            staticcall uniswapV2RouterAddress.WETH() with:
                                                    gas gas_remaining wei
                                            mem[448] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                            mem[416] = ext_call.return_data[12 len 20]
                                            if not this.address:
                                                revert with 0, 'ERC20: approve from the zero address'
                                            if not uniswapV2RouterAddress:
                                                revert with 0, 'ERC20: approve to the zero address'
                                            allowance[address(this.address)][stor19].field_0 = 0 / stor14 / 2
                                            allowance[address(this.address)][stor19].field_255 = 0
                                            emit Approval((0 / stor14 / 2), this.address, uniswapV2RouterAddress);
                                            mem[ceil32(return_data.size) + 448] = 0x791ac94700000000000000000000000000000000000000000000000000000000
                                            mem[ceil32(return_data.size) + 452] = 0 / stor14 / 2
                                            idx = 0
                                            s = 384
                                            t = ceil32(return_data.size) + 644
                                            while idx < 2:
                                                mem[t] = mem[s + 12 len 20]
                                                idx = idx + 1
                                                s = s + 32
                                                t = t + 32
                                                continue 
                                            require ext_code.size(uniswapV2RouterAddress)
                                            call uniswapV2RouterAddress.swapExactTokensForETHSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args Mask(255, 1, 0 / stor14), 0, 160, address(this.address), block.timestamp, 2, mem[ceil32(return_data.size) + 644 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[ceil32(return_data.size) + 448] = 30
                                            mem[ceil32(return_data.size) + 480] = 'SafeMath: subtraction overflow'
                                            if eth.balance(this.address) > eth.balance(this.address):
                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                            if eth.balance(this.address) < eth.balance(this.address):
                                                revert with 'NH{q', 17
                                            if not this.address:
                                                revert with 0, 'ERC20: approve from the zero address'
                                            if not uniswapV2RouterAddress:
                                                revert with 0, 'ERC20: approve to the zero address'
                                            allowance[address(this.address)][stor19].field_0 = (0 / stor14) - (0 / stor14 / 2)
                                            emit Approval(((0 / stor14) - (0 / stor14 / 2)), this.address, uniswapV2RouterAddress);
                                            mem[ceil32(return_data.size) + 580] = 0
                                            mem[ceil32(return_data.size) + 612] = 0
                                            mem[ceil32(return_data.size) + 644] = owner
                                            mem[ceil32(return_data.size) + 676] = block.timestamp
                                            require ext_code.size(uniswapV2RouterAddress)
                                            call uniswapV2RouterAddress.addLiquidityETH(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                                 gas gas_remaining wei
                                                args address(this.address), (0 / stor14) - (0 / stor14 / 2), 0, 0, owner, block.timestamp
                                            mem[ceil32(return_data.size) + 512 len 96] = ext_call.return_data[0 len 96]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 96
                                            require ext_call.return_data[0] == ext_call.return_data[0]
                                            require ext_call.return_data[32] == ext_call.return_data[32]
                                            require ext_call.return_data[64] == ext_call.return_data[64]
                                            mem[(2 * ceil32(return_data.size)) + 512] = 3
                                            mem[(2 * ceil32(return_data.size)) + 544] = this.address
                                            require ext_code.size(uniswapV2RouterAddress)
                                            staticcall uniswapV2RouterAddress.WETH() with:
                                                    gas gas_remaining wei
                                            mem[(2 * ceil32(return_data.size)) + 640] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[64] = (4 * ceil32(return_data.size)) + 640
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                            mem[(2 * ceil32(return_data.size)) + 576] = ext_call.return_data[12 len 20]
                                            mem[(2 * ceil32(return_data.size)) + 608] = sub_e5148bd6Address
                                            if not this.address:
                                                revert with 0, 'ERC20: approve from the zero address'
                                            if not uniswapV2RouterAddress:
                                                revert with 0, 'ERC20: approve to the zero address'
                                            mem[0] = uniswapV2RouterAddress
                                            mem[32] = sha3(address(this.address), 10)
                                            allowance[address(this.address)][stor19].field_0 = 0 / stor14
                                            emit Approval((0 / stor14), this.address, uniswapV2RouterAddress);
                                            mem[(4 * ceil32(return_data.size)) + 640] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                            mem[(4 * ceil32(return_data.size)) + 644] = 0 / stor14
                                            mem[(4 * ceil32(return_data.size)) + 676] = 0
                                            mem[(4 * ceil32(return_data.size)) + 708] = 160
                                            mem[(4 * ceil32(return_data.size)) + 804] = 3
                                            idx = 0
                                            s = (2 * ceil32(return_data.size)) + 544
                                            t = (4 * ceil32(return_data.size)) + 836
                                            while idx < mem[(2 * ceil32(return_data.size)) + 512]:
                                                mem[t] = mem[s + 12 len 20]
                                                idx = idx + 1
                                                s = s + 32
                                                t = t + 32
                                                continue 
                                            mem[(4 * ceil32(return_data.size)) + 740] = this.address
                                            mem[(4 * ceil32(return_data.size)) + 772] = block.timestamp
                                            require ext_code.size(uniswapV2RouterAddress)
                                            call uniswapV2RouterAddress.mem[mem[64] len 4] with:
                                                 gas gas_remaining wei
                                                args mem[mem[64] + 4 len (4 * ceil32(return_data.size)) + (32 * mem[(2 * ceil32(return_data.size)) + 512]) + -mem[64] + 832]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(sub_e5148bd6Address)
                                            staticcall sub_e5148bd6Address.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args address(this.address)
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _10834 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _10850 = mem[_10834]
                                            require mem[_10834] == mem[_10834]
                                            mem[mem[64] + 4] = marketingAddress
                                            mem[mem[64] + 36] = _10850
                                            require ext_code.size(sub_e5148bd6Address)
                                            call sub_e5148bd6Address.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args marketingAddress, _10850
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _10946 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require mem[_10946] == bool(mem[_10946])
                                            stor22 = 0
                                            mem[0] = msg.sender
                                            mem[32] = 11
                                            if stor11[address(msg.sender)]:
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if not arg1:
                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                _11011 = mem[64]
                                                mem[64] = mem[64] + 96
                                                mem[_11011] = 38
                                                mem[_11011 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                if arg2 > balanceOf[address(msg.sender)]:
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 38
                                                    mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_11011 + 70 len 26]
                                                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                if balanceOf[address(msg.sender)] < arg2:
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] -= arg2
                                                if balanceOf[address(arg1)] > -arg2 - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                balanceOf[address(arg1)] += arg2
                                                emit Transfer(arg2, msg.sender, arg1);
                                            else:
                                                mem[0] = arg1
                                                mem[32] = 11
                                                if stor11[address(arg1)]:
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if not arg1:
                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                    _11051 = mem[64]
                                                    mem[64] = mem[64] + 96
                                                    mem[_11051] = 38
                                                    mem[_11051 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                    if arg2 > balanceOf[address(msg.sender)]:
                                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = 32
                                                        mem[mem[64] + 36] = 38
                                                        mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_11051 + 70 len 26]
                                                        revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                    if balanceOf[address(msg.sender)] < arg2:
                                                        revert with 'NH{q', 17
                                                    balanceOf[address(msg.sender)] -= arg2
                                                    if balanceOf[address(arg1)] > -arg2 - 1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    balanceOf[address(arg1)] += arg2
                                                    emit Transfer(arg2, msg.sender, arg1);
                                                else:
                                                    if totalFees <= 0:
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if not arg1:
                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                        _11094 = mem[64]
                                                        mem[64] = mem[64] + 96
                                                        mem[_11094] = 38
                                                        mem[_11094 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                        if arg2 > balanceOf[address(msg.sender)]:
                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = 32
                                                            mem[mem[64] + 36] = 38
                                                            mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_11094 + 70 len 26]
                                                            revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                        if balanceOf[address(msg.sender)] < arg2:
                                                            revert with 'NH{q', 17
                                                        balanceOf[address(msg.sender)] -= arg2
                                                        if balanceOf[address(arg1)] > -arg2 - 1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        balanceOf[address(arg1)] += arg2
                                                        emit Transfer(arg2, msg.sender, arg1);
                                                    else:
                                                        if not arg2:
                                                            _11140 = mem[64]
                                                            mem[64] = mem[64] + 64
                                                            mem[_11140] = 26
                                                            mem[_11140 + 32] = 'SafeMath: division by zero'
                                                            if not arg2:
                                                                _11454 = mem[64]
                                                                mem[64] = mem[64] + 64
                                                                mem[_11454] = 26
                                                                mem[_11454 + 32] = 'SafeMath: division by zero'
                                                                _11742 = mem[64]
                                                                mem[64] = mem[64] + 64
                                                                mem[_11742] = 30
                                                                mem[_11742 + 32] = 'SafeMath: subtraction overflow'
                                                                if 0 > arg2:
                                                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                                                if arg2 < 0:
                                                                    revert with 'NH{q', 17
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                if not this.address:
                                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                                _11894 = mem[64]
                                                                mem[64] = mem[64] + 96
                                                                mem[_11894] = 38
                                                                mem[_11894 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                if 0 > balanceOf[address(msg.sender)]:
                                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 32
                                                                    mem[mem[64] + 36] = 38
                                                                    mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_11894 + 70 len 26]
                                                                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                                if balanceOf[address(msg.sender)] < 0:
                                                                    revert with 'NH{q', 17
                                                                if balanceOf[address(this.address)] > -1:
                                                                    revert with 'NH{q', 17
                                                                if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                mem[0] = this.address
                                                                mem[32] = 9
                                                                emit Transfer(0, msg.sender, this.address);
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                _12573 = mem[64]
                                                                mem[64] = mem[64] + 96
                                                                mem[_12573] = 38
                                                                mem[_12573 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                if 0 > balanceOf[address(msg.sender)]:
                                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 32
                                                                    mem[mem[64] + 36] = 38
                                                                    mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_12573 + 70 len 26]
                                                                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                                if balanceOf[address(msg.sender)] < 0:
                                                                    revert with 'NH{q', 17
                                                                if balanceOf[57005] > -1:
                                                                    revert with 'NH{q', 17
                                                                if balanceOf[57005] < balanceOf[57005]:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                mem[0] = 57005
                                                                mem[32] = 9
                                                                emit Transfer(0, msg.sender, 57005);
                                                                emit TokenBurn(0, msg.sender);
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                if not arg1:
                                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                                _13442 = mem[64]
                                                                mem[64] = mem[64] + 96
                                                                mem[_13442] = 38
                                                                mem[_13442 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                if arg2 > balanceOf[address(msg.sender)]:
                                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 32
                                                                    mem[mem[64] + 36] = 38
                                                                    mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_13442 + 70 len 26]
                                                                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                                if balanceOf[address(msg.sender)] < arg2:
                                                                    revert with 'NH{q', 17
                                                                balanceOf[address(msg.sender)] -= arg2
                                                                if balanceOf[address(arg1)] > -arg2 - 1:
                                                                    revert with 'NH{q', 17
                                                                if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                balanceOf[address(arg1)] += arg2
                                                                emit Transfer(arg2, msg.sender, arg1);
                                                            else:
                                                                if arg2 and burnFee > -1 / arg2:
                                                                    revert with 'NH{q', 17
                                                                if not arg2:
                                                                    revert with 'NH{q', 18
                                                                if arg2 * burnFee / arg2 != burnFee:
                                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                                _11666 = mem[64]
                                                                mem[64] = mem[64] + 64
                                                                mem[_11666] = 26
                                                                mem[_11666 + 32] = 'SafeMath: division by zero'
                                                                if 0 > -(arg2 * burnFee / 100) - 1:
                                                                    revert with 'NH{q', 17
                                                                if arg2 * burnFee / 100 < 0:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                _11920 = mem[64]
                                                                mem[64] = mem[64] + 64
                                                                mem[_11920] = 30
                                                                mem[_11920 + 32] = 'SafeMath: subtraction overflow'
                                                                if arg2 * burnFee / 100 > arg2:
                                                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                                                if arg2 < arg2 * burnFee / 100:
                                                                    revert with 'NH{q', 17
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                if not this.address:
                                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                                _12186 = mem[64]
                                                                mem[64] = mem[64] + 96
                                                                mem[_12186] = 38
                                                                mem[_12186 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                if 0 > balanceOf[address(msg.sender)]:
                                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 32
                                                                    mem[mem[64] + 36] = 38
                                                                    mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_12186 + 70 len 26]
                                                                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                                if balanceOf[address(msg.sender)] < 0:
                                                                    revert with 'NH{q', 17
                                                                if balanceOf[address(this.address)] > -1:
                                                                    revert with 'NH{q', 17
                                                                if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                mem[0] = this.address
                                                                mem[32] = 9
                                                                emit Transfer(0, msg.sender, this.address);
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                _12939 = mem[64]
                                                                mem[64] = mem[64] + 96
                                                                mem[_12939] = 38
                                                                mem[_12939 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                if arg2 * burnFee / 100 > balanceOf[address(msg.sender)]:
                                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 32
                                                                    mem[mem[64] + 36] = 38
                                                                    mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_12939 + 70 len 26]
                                                                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                                if balanceOf[address(msg.sender)] < arg2 * burnFee / 100:
                                                                    revert with 'NH{q', 17
                                                                balanceOf[address(msg.sender)] -= arg2 * burnFee / 100
                                                                if balanceOf[57005] > -(arg2 * burnFee / 100) - 1:
                                                                    revert with 'NH{q', 17
                                                                if balanceOf[57005] + (arg2 * burnFee / 100) < balanceOf[57005]:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                mem[0] = 57005
                                                                mem[32] = 9
                                                                balanceOf[57005] += arg2 * burnFee / 100
                                                                emit Transfer((arg2 * burnFee / 100), msg.sender, 57005);
                                                                emit TokenBurn((arg2 * burnFee / 100), msg.sender);
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                if not arg1:
                                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                                _14188 = mem[64]
                                                                mem[64] = mem[64] + 96
                                                                mem[_14188] = 38
                                                                mem[_14188 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                if arg2 - (arg2 * burnFee / 100) > balanceOf[address(msg.sender)]:
                                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 32
                                                                    mem[mem[64] + 36] = 38
                                                                    mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_14188 + 70 len 26]
                                                                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                                if balanceOf[address(msg.sender)] < arg2 - (arg2 * burnFee / 100):
                                                                    revert with 'NH{q', 17
                                                                balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * burnFee / 100)
                                                                if balanceOf[address(arg1)] > -arg2 + (arg2 * burnFee / 100) - 1:
                                                                    revert with 'NH{q', 17
                                                                if balanceOf[address(arg1)] + arg2 - (arg2 * burnFee / 100) < balanceOf[address(arg1)]:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * burnFee / 100)
                                                                emit Transfer((arg2 - (arg2 * burnFee / 100)), msg.sender, arg1);
                                                        else:
                                                            if arg2 and stor14 > -1 / arg2:
                                                                revert with 'NH{q', 17
                                                            if not arg2:
                                                                revert with 'NH{q', 18
                                                            if arg2 * stor14 / arg2 != stor14:
                                                                revert with 0, 'SafeMath: multiplication overflow'
                                                            _11408 = mem[64]
                                                            mem[64] = mem[64] + 64
                                                            mem[_11408] = 26
                                                            mem[_11408 + 32] = 'SafeMath: division by zero'
                                                            if not arg2:
                                                                _11665 = mem[64]
                                                                mem[64] = mem[64] + 64
                                                                mem[_11665] = 26
                                                                mem[_11665 + 32] = 'SafeMath: division by zero'
                                                                if arg2 * stor14 / 100 > -1:
                                                                    revert with 'NH{q', 17
                                                                if arg2 * stor14 / 100 < arg2 * stor14 / 100:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                _11919 = mem[64]
                                                                mem[64] = mem[64] + 64
                                                                mem[_11919] = 30
                                                                mem[_11919 + 32] = 'SafeMath: subtraction overflow'
                                                                if arg2 * stor14 / 100 > arg2:
                                                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                                                if arg2 < arg2 * stor14 / 100:
                                                                    revert with 'NH{q', 17
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                if not this.address:
                                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                                _12183 = mem[64]
                                                                mem[64] = mem[64] + 96
                                                                mem[_12183] = 38
                                                                mem[_12183 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                if arg2 * stor14 / 100 > balanceOf[address(msg.sender)]:
                                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 32
                                                                    mem[mem[64] + 36] = 38
                                                                    mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_12183 + 70 len 26]
                                                                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                                if balanceOf[address(msg.sender)] < arg2 * stor14 / 100:
                                                                    revert with 'NH{q', 17
                                                                balanceOf[address(msg.sender)] -= arg2 * stor14 / 100
                                                                if balanceOf[address(this.address)] > -(arg2 * stor14 / 100) - 1:
                                                                    revert with 'NH{q', 17
                                                                if balanceOf[address(this.address)] + (arg2 * stor14 / 100) < balanceOf[address(this.address)]:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                mem[0] = this.address
                                                                mem[32] = 9
                                                                balanceOf[address(this.address)] += arg2 * stor14 / 100
                                                                emit Transfer((arg2 * stor14 / 100), msg.sender, this.address);
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                _12937 = mem[64]
                                                                mem[64] = mem[64] + 96
                                                                mem[_12937] = 38
                                                                mem[_12937 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                if 0 > balanceOf[address(msg.sender)]:
                                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 32
                                                                    mem[mem[64] + 36] = 38
                                                                    mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_12937 + 70 len 26]
                                                                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                                if balanceOf[address(msg.sender)] < 0:
                                                                    revert with 'NH{q', 17
                                                                if balanceOf[57005] > -1:
                                                                    revert with 'NH{q', 17
                                                                if balanceOf[57005] < balanceOf[57005]:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                mem[0] = 57005
                                                                mem[32] = 9
                                                                emit Transfer(0, msg.sender, 57005);
                                                                emit TokenBurn(0, msg.sender);
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                if not arg1:
                                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                                _14185 = mem[64]
                                                                mem[64] = mem[64] + 96
                                                                mem[_14185] = 38
                                                                mem[_14185 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                if arg2 - (arg2 * stor14 / 100) > balanceOf[address(msg.sender)]:
                                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 32
                                                                    mem[mem[64] + 36] = 38
                                                                    mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_14185 + 70 len 26]
                                                                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                                if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor14 / 100):
                                                                    revert with 'NH{q', 17
                                                                balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor14 / 100)
                                                                if balanceOf[address(arg1)] > -arg2 + (arg2 * stor14 / 100) - 1:
                                                                    revert with 'NH{q', 17
                                                                if balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) < balanceOf[address(arg1)]:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100)
                                                                emit Transfer((arg2 - (arg2 * stor14 / 100)), msg.sender, arg1);
                                                            else:
                                                                if arg2 and burnFee > -1 / arg2:
                                                                    revert with 'NH{q', 17
                                                                if not arg2:
                                                                    revert with 'NH{q', 18
                                                                if arg2 * burnFee / arg2 != burnFee:
                                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                                _11784 = mem[64]
                                                                mem[64] = mem[64] + 64
                                                                mem[_11784] = 26
                                                                mem[_11784 + 32] = 'SafeMath: division by zero'
                                                                if arg2 * stor14 / 100 > -(arg2 * burnFee / 100) - 1:
                                                                    revert with 'NH{q', 17
                                                                if (arg2 * stor14 / 100) + (arg2 * burnFee / 100) < arg2 * stor14 / 100:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                _12218 = mem[64]
                                                                mem[64] = mem[64] + 64
                                                                mem[_12218] = 30
                                                                mem[_12218 + 32] = 'SafeMath: subtraction overflow'
                                                                if (arg2 * stor14 / 100) + (arg2 * burnFee / 100) > arg2:
                                                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                                                if arg2 < (arg2 * stor14 / 100) + (arg2 * burnFee / 100):
                                                                    revert with 'NH{q', 17
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                if not this.address:
                                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                                _12570 = mem[64]
                                                                mem[64] = mem[64] + 96
                                                                mem[_12570] = 38
                                                                mem[_12570 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                if arg2 * stor14 / 100 > balanceOf[address(msg.sender)]:
                                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 32
                                                                    mem[mem[64] + 36] = 38
                                                                    mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_12570 + 70 len 26]
                                                                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                                if balanceOf[address(msg.sender)] < arg2 * stor14 / 100:
                                                                    revert with 'NH{q', 17
                                                                balanceOf[address(msg.sender)] -= arg2 * stor14 / 100
                                                                if balanceOf[address(this.address)] > -(arg2 * stor14 / 100) - 1:
                                                                    revert with 'NH{q', 17
                                                                if balanceOf[address(this.address)] + (arg2 * stor14 / 100) < balanceOf[address(this.address)]:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                mem[0] = this.address
                                                                mem[32] = 9
                                                                balanceOf[address(this.address)] += arg2 * stor14 / 100
                                                                emit Transfer((arg2 * stor14 / 100), msg.sender, this.address);
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                _13265 = mem[64]
                                                                mem[64] = mem[64] + 96
                                                                mem[_13265] = 38
                                                                mem[_13265 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                if arg2 * burnFee / 100 > balanceOf[address(msg.sender)]:
                                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 32
                                                                    mem[mem[64] + 36] = 38
                                                                    mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_13265 + 70 len 26]
                                                                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                                if balanceOf[address(msg.sender)] < arg2 * burnFee / 100:
                                                                    revert with 'NH{q', 17
                                                                balanceOf[address(msg.sender)] -= arg2 * burnFee / 100
                                                                if balanceOf[57005] > -(arg2 * burnFee / 100) - 1:
                                                                    revert with 'NH{q', 17
                                                                if balanceOf[57005] + (arg2 * burnFee / 100) < balanceOf[57005]:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                mem[0] = 57005
                                                                mem[32] = 9
                                                                balanceOf[57005] += arg2 * burnFee / 100
                                                                emit Transfer((arg2 * burnFee / 100), msg.sender, 57005);
                                                                emit TokenBurn((arg2 * burnFee / 100), msg.sender);
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                if not arg1:
                                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                                _14520 = mem[64]
                                                                mem[64] = mem[64] + 96
                                                                mem[_14520] = 38
                                                                mem[_14520 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                if arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100) > balanceOf[address(msg.sender)]:
                                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 32
                                                                    mem[mem[64] + 36] = 38
                                                                    mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_14520 + 70 len 26]
                                                                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                                if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100):
                                                                    revert with 'NH{q', 17
                                                                balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor14 / 100) + (arg2 * burnFee / 100)
                                                                if balanceOf[address(arg1)] > -arg2 + (arg2 * stor14 / 100) + (arg2 * burnFee / 100) - 1:
                                                                    revert with 'NH{q', 17
                                                                if balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100) < balanceOf[address(arg1)]:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100)
                                                                emit Transfer((arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100)), msg.sender, arg1);
                                        else:
                                            if balanceOf[address(this.address)] and marketingFee > -1 / balanceOf[address(this.address)]:
                                                revert with 'NH{q', 17
                                            if not balanceOf[address(this.address)]:
                                                revert with 'NH{q', 18
                                            if balanceOf[address(this.address)] * marketingFee / balanceOf[address(this.address)] != marketingFee:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            mem[160] = 26
                                            mem[192] = 'SafeMath: division by zero'
                                            if stor14 <= 0:
                                                revert with 0, 'SafeMath: division by zero', 0
                                            if not stor14:
                                                revert with 'NH{q', 18
                                            mem[224] = 26
                                            mem[256] = 'SafeMath: division by zero'
                                            mem[288] = 30
                                            mem[320] = 'SafeMath: subtraction overflow'
                                            if 0 / stor14 / 2 > 0 / stor14:
                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                            if 0 / stor14 < 0 / stor14 / 2:
                                                revert with 'NH{q', 17
                                            mem[352] = 2
                                            mem[384] = this.address
                                            require ext_code.size(uniswapV2RouterAddress)
                                            staticcall uniswapV2RouterAddress.WETH() with:
                                                    gas gas_remaining wei
                                            mem[448] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                            mem[416] = ext_call.return_data[12 len 20]
                                            if not this.address:
                                                revert with 0, 'ERC20: approve from the zero address'
                                            if not uniswapV2RouterAddress:
                                                revert with 0, 'ERC20: approve to the zero address'
                                            allowance[address(this.address)][stor19].field_0 = 0 / stor14 / 2
                                            allowance[address(this.address)][stor19].field_255 = 0
                                            emit Approval((0 / stor14 / 2), this.address, uniswapV2RouterAddress);
                                            mem[ceil32(return_data.size) + 448] = 0x791ac94700000000000000000000000000000000000000000000000000000000
                                            mem[ceil32(return_data.size) + 452] = 0 / stor14 / 2
                                            idx = 0
                                            s = 384
                                            t = ceil32(return_data.size) + 644
                                            while idx < 2:
                                                mem[t] = mem[s + 12 len 20]
                                                idx = idx + 1
                                                s = s + 32
                                                t = t + 32
                                                continue 
                                            require ext_code.size(uniswapV2RouterAddress)
                                            call uniswapV2RouterAddress.swapExactTokensForETHSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args Mask(255, 1, 0 / stor14), 0, 160, address(this.address), block.timestamp, 2, mem[ceil32(return_data.size) + 644 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[ceil32(return_data.size) + 448] = 30
                                            mem[ceil32(return_data.size) + 480] = 'SafeMath: subtraction overflow'
                                            if eth.balance(this.address) > eth.balance(this.address):
                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                            if eth.balance(this.address) < eth.balance(this.address):
                                                revert with 'NH{q', 17
                                            if not this.address:
                                                revert with 0, 'ERC20: approve from the zero address'
                                            if not uniswapV2RouterAddress:
                                                revert with 0, 'ERC20: approve to the zero address'
                                            allowance[address(this.address)][stor19].field_0 = (0 / stor14) - (0 / stor14 / 2)
                                            emit Approval(((0 / stor14) - (0 / stor14 / 2)), this.address, uniswapV2RouterAddress);
                                            mem[ceil32(return_data.size) + 580] = 0
                                            mem[ceil32(return_data.size) + 612] = 0
                                            mem[ceil32(return_data.size) + 644] = owner
                                            mem[ceil32(return_data.size) + 676] = block.timestamp
                                            require ext_code.size(uniswapV2RouterAddress)
                                            call uniswapV2RouterAddress.addLiquidityETH(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                                 gas gas_remaining wei
                                                args address(this.address), (0 / stor14) - (0 / stor14 / 2), 0, 0, owner, block.timestamp
                                            mem[ceil32(return_data.size) + 512 len 96] = ext_call.return_data[0 len 96]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 96
                                            require ext_call.return_data[0] == ext_call.return_data[0]
                                            require ext_call.return_data[32] == ext_call.return_data[32]
                                            require ext_call.return_data[64] == ext_call.return_data[64]
                                            mem[(2 * ceil32(return_data.size)) + 512] = 3
                                            mem[(2 * ceil32(return_data.size)) + 544] = this.address
                                            require ext_code.size(uniswapV2RouterAddress)
                                            staticcall uniswapV2RouterAddress.WETH() with:
                                                    gas gas_remaining wei
                                            mem[(2 * ceil32(return_data.size)) + 640] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[64] = (4 * ceil32(return_data.size)) + 640
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                            mem[(2 * ceil32(return_data.size)) + 576] = ext_call.return_data[12 len 20]
                                            mem[(2 * ceil32(return_data.size)) + 608] = sub_e5148bd6Address
                                            if not this.address:
                                                revert with 0, 'ERC20: approve from the zero address'
                                            if not uniswapV2RouterAddress:
                                                revert with 0, 'ERC20: approve to the zero address'
                                            mem[0] = uniswapV2RouterAddress
                                            mem[32] = sha3(address(this.address), 10)
                                            allowance[address(this.address)][stor19].field_0 = balanceOf[address(this.address)] * marketingFee / stor14
                                            emit Approval((balanceOf[address(this.address)] * marketingFee / stor14), this.address, uniswapV2RouterAddress);
                                            mem[(4 * ceil32(return_data.size)) + 640] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                            mem[(4 * ceil32(return_data.size)) + 644] = balanceOf[address(this.address)] * marketingFee / stor14
                                            mem[(4 * ceil32(return_data.size)) + 676] = 0
                                            mem[(4 * ceil32(return_data.size)) + 708] = 160
                                            mem[(4 * ceil32(return_data.size)) + 804] = 3
                                            idx = 0
                                            s = (2 * ceil32(return_data.size)) + 544
                                            t = (4 * ceil32(return_data.size)) + 836
                                            while idx < mem[(2 * ceil32(return_data.size)) + 512]:
                                                mem[t] = mem[s + 12 len 20]
                                                idx = idx + 1
                                                s = s + 32
                                                t = t + 32
                                                continue 
                                            mem[(4 * ceil32(return_data.size)) + 740] = this.address
                                            mem[(4 * ceil32(return_data.size)) + 772] = block.timestamp
                                            require ext_code.size(uniswapV2RouterAddress)
                                            call uniswapV2RouterAddress.mem[mem[64] len 4] with:
                                                 gas gas_remaining wei
                                                args mem[mem[64] + 4 len (4 * ceil32(return_data.size)) + (32 * mem[(2 * ceil32(return_data.size)) + 512]) + -mem[64] + 832]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(sub_e5148bd6Address)
                                            staticcall sub_e5148bd6Address.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args address(this.address)
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _10833 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _10849 = mem[_10833]
                                            require mem[_10833] == mem[_10833]
                                            mem[mem[64] + 4] = marketingAddress
                                            mem[mem[64] + 36] = _10849
                                            require ext_code.size(sub_e5148bd6Address)
                                            call sub_e5148bd6Address.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args marketingAddress, _10849
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _10945 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require mem[_10945] == bool(mem[_10945])
                                            stor22 = 0
                                            mem[0] = msg.sender
                                            mem[32] = 11
                                            if stor11[address(msg.sender)]:
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if not arg1:
                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                _11007 = mem[64]
                                                mem[64] = mem[64] + 96
                                                mem[_11007] = 38
                                                mem[_11007 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                if arg2 > balanceOf[address(msg.sender)]:
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 38
                                                    mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_11007 + 70 len 26]
                                                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                if balanceOf[address(msg.sender)] < arg2:
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] -= arg2
                                                if balanceOf[address(arg1)] > -arg2 - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                balanceOf[address(arg1)] += arg2
                                                emit Transfer(arg2, msg.sender, arg1);
                                            else:
                                                mem[0] = arg1
                                                mem[32] = 11
                                                if stor11[address(arg1)]:
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if not arg1:
                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                    _11047 = mem[64]
                                                    mem[64] = mem[64] + 96
                                                    mem[_11047] = 38
                                                    mem[_11047 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                    if arg2 > balanceOf[address(msg.sender)]:
                                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = 32
                                                        mem[mem[64] + 36] = 38
                                                        mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_11047 + 70 len 26]
                                                        revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                    if balanceOf[address(msg.sender)] < arg2:
                                                        revert with 'NH{q', 17
                                                    balanceOf[address(msg.sender)] -= arg2
                                                    if balanceOf[address(arg1)] > -arg2 - 1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    balanceOf[address(arg1)] += arg2
                                                    emit Transfer(arg2, msg.sender, arg1);
                                                else:
                                                    if totalFees <= 0:
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if not arg1:
                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                        _11090 = mem[64]
                                                        mem[64] = mem[64] + 96
                                                        mem[_11090] = 38
                                                        mem[_11090 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                        if arg2 > balanceOf[address(msg.sender)]:
                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = 32
                                                            mem[mem[64] + 36] = 38
                                                            mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_11090 + 70 len 26]
                                                            revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                        if balanceOf[address(msg.sender)] < arg2:
                                                            revert with 'NH{q', 17
                                                        balanceOf[address(msg.sender)] -= arg2
                                                        if balanceOf[address(arg1)] > -arg2 - 1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        balanceOf[address(arg1)] += arg2
                                                        emit Transfer(arg2, msg.sender, arg1);
                                                    else:
                                                        if not arg2:
                                                            _11138 = mem[64]
                                                            mem[64] = mem[64] + 64
                                                            mem[_11138] = 26
                                                            mem[_11138 + 32] = 'SafeMath: division by zero'
                                                            if not arg2:
                                                                _11449 = mem[64]
                                                                mem[64] = mem[64] + 64
                                                                mem[_11449] = 26
                                                                mem[_11449 + 32] = 'SafeMath: division by zero'
                                                                _11741 = mem[64]
                                                                mem[64] = mem[64] + 64
                                                                mem[_11741] = 30
                                                                mem[_11741 + 32] = 'SafeMath: subtraction overflow'
                                                                if 0 > arg2:
                                                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                                                if arg2 < 0:
                                                                    revert with 'NH{q', 17
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                if not this.address:
                                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                                _11891 = mem[64]
                                                                mem[64] = mem[64] + 96
                                                                mem[_11891] = 38
                                                                mem[_11891 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                if 0 > balanceOf[address(msg.sender)]:
                                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 32
                                                                    mem[mem[64] + 36] = 38
                                                                    mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_11891 + 70 len 26]
                                                                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                                if balanceOf[address(msg.sender)] < 0:
                                                                    revert with 'NH{q', 17
                                                                if balanceOf[address(this.address)] > -1:
                                                                    revert with 'NH{q', 17
                                                                if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                mem[0] = this.address
                                                                mem[32] = 9
                                                                emit Transfer(0, msg.sender, this.address);
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                _12568 = mem[64]
                                                                mem[64] = mem[64] + 96
                                                                mem[_12568] = 38
                                                                mem[_12568 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                if 0 > balanceOf[address(msg.sender)]:
                                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 32
                                                                    mem[mem[64] + 36] = 38
                                                                    mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_12568 + 70 len 26]
                                                                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                                if balanceOf[address(msg.sender)] < 0:
                                                                    revert with 'NH{q', 17
                                                                if balanceOf[57005] > -1:
                                                                    revert with 'NH{q', 17
                                                                if balanceOf[57005] < balanceOf[57005]:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                mem[0] = 57005
                                                                mem[32] = 9
                                                                emit Transfer(0, msg.sender, 57005);
                                                                emit TokenBurn(0, msg.sender);
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                if not arg1:
                                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                                _13438 = mem[64]
                                                                mem[64] = mem[64] + 96
                                                                mem[_13438] = 38
                                                                mem[_13438 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                if arg2 > balanceOf[address(msg.sender)]:
                                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 32
                                                                    mem[mem[64] + 36] = 38
                                                                    mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_13438 + 70 len 26]
                                                                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                                if balanceOf[address(msg.sender)] < arg2:
                                                                    revert with 'NH{q', 17
                                                                balanceOf[address(msg.sender)] -= arg2
                                                                if balanceOf[address(arg1)] > -arg2 - 1:
                                                                    revert with 'NH{q', 17
                                                                if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                balanceOf[address(arg1)] += arg2
                                                                emit Transfer(arg2, msg.sender, arg1);
                                                            else:
                                                                if arg2 and burnFee > -1 / arg2:
                                                                    revert with 'NH{q', 17
                                                                if not arg2:
                                                                    revert with 'NH{q', 18
                                                                if arg2 * burnFee / arg2 != burnFee:
                                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                                _11663 = mem[64]
                                                                mem[64] = mem[64] + 64
                                                                mem[_11663] = 26
                                                                mem[_11663 + 32] = 'SafeMath: division by zero'
                                                                if 0 > -(arg2 * burnFee / 100) - 1:
                                                                    revert with 'NH{q', 17
                                                                if arg2 * burnFee / 100 < 0:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                _11918 = mem[64]
                                                                mem[64] = mem[64] + 64
                                                                mem[_11918] = 30
                                                                mem[_11918 + 32] = 'SafeMath: subtraction overflow'
                                                                if arg2 * burnFee / 100 > arg2:
                                                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                                                if arg2 < arg2 * burnFee / 100:
                                                                    revert with 'NH{q', 17
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                if not this.address:
                                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                                _12180 = mem[64]
                                                                mem[64] = mem[64] + 96
                                                                mem[_12180] = 38
                                                                mem[_12180 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                if 0 > balanceOf[address(msg.sender)]:
                                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 32
                                                                    mem[mem[64] + 36] = 38
                                                                    mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_12180 + 70 len 26]
                                                                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                                if balanceOf[address(msg.sender)] < 0:
                                                                    revert with 'NH{q', 17
                                                                if balanceOf[address(this.address)] > -1:
                                                                    revert with 'NH{q', 17
                                                                if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                mem[0] = this.address
                                                                mem[32] = 9
                                                                emit Transfer(0, msg.sender, this.address);
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                _12935 = mem[64]
                                                                mem[64] = mem[64] + 96
                                                                mem[_12935] = 38
                                                                mem[_12935 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                if arg2 * burnFee / 100 > balanceOf[address(msg.sender)]:
                                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 32
                                                                    mem[mem[64] + 36] = 38
                                                                    mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_12935 + 70 len 26]
                                                                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                                if balanceOf[address(msg.sender)] < arg2 * burnFee / 100:
                                                                    revert with 'NH{q', 17
                                                                balanceOf[address(msg.sender)] -= arg2 * burnFee / 100
                                                                if balanceOf[57005] > -(arg2 * burnFee / 100) - 1:
                                                                    revert with 'NH{q', 17
                                                                if balanceOf[57005] + (arg2 * burnFee / 100) < balanceOf[57005]:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                mem[0] = 57005
                                                                mem[32] = 9
                                                                balanceOf[57005] += arg2 * burnFee / 100
                                                                emit Transfer((arg2 * burnFee / 100), msg.sender, 57005);
                                                                emit TokenBurn((arg2 * burnFee / 100), msg.sender);
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                if not arg1:
                                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                                _14182 = mem[64]
                                                                mem[64] = mem[64] + 96
                                                                mem[_14182] = 38
                                                                mem[_14182 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                if arg2 - (arg2 * burnFee / 100) > balanceOf[address(msg.sender)]:
                                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 32
                                                                    mem[mem[64] + 36] = 38
                                                                    mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_14182 + 70 len 26]
                                                                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                                if balanceOf[address(msg.sender)] < arg2 - (arg2 * burnFee / 100):
                                                                    revert with 'NH{q', 17
                                                                balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * burnFee / 100)
                                                                if balanceOf[address(arg1)] > -arg2 + (arg2 * burnFee / 100) - 1:
                                                                    revert with 'NH{q', 17
                                                                if balanceOf[address(arg1)] + arg2 - (arg2 * burnFee / 100) < balanceOf[address(arg1)]:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * burnFee / 100)
                                                                emit Transfer((arg2 - (arg2 * burnFee / 100)), msg.sender, arg1);
                                                        else:
                                                            if arg2 and stor14 > -1 / arg2:
                                                                revert with 'NH{q', 17
                                                            if not arg2:
                                                                revert with 'NH{q', 18
                                                            if arg2 * stor14 / arg2 != stor14:
                                                                revert with 0, 'SafeMath: multiplication overflow'
                                                            _11404 = mem[64]
                                                            mem[64] = mem[64] + 64
                                                            mem[_11404] = 26
                                                            mem[_11404 + 32] = 'SafeMath: division by zero'
                                                            if not arg2:
                                                                _11662 = mem[64]
                                                                mem[64] = mem[64] + 64
                                                                mem[_11662] = 26
                                                                mem[_11662 + 32] = 'SafeMath: division by zero'
                                                                if arg2 * stor14 / 100 > -1:
                                                                    revert with 'NH{q', 17
                                                                if arg2 * stor14 / 100 < arg2 * stor14 / 100:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                _11917 = mem[64]
                                                                mem[64] = mem[64] + 64
                                                                mem[_11917] = 30
                                                                mem[_11917 + 32] = 'SafeMath: subtraction overflow'
                                                                if arg2 * stor14 / 100 > arg2:
                                                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                                                if arg2 < arg2 * stor14 / 100:
                                                                    revert with 'NH{q', 17
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                if not this.address:
                                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                                _12177 = mem[64]
                                                                mem[64] = mem[64] + 96
                                                                mem[_12177] = 38
                                                                mem[_12177 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                if arg2 * stor14 / 100 > balanceOf[address(msg.sender)]:
                                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 32
                                                                    mem[mem[64] + 36] = 38
                                                                    mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_12177 + 70 len 26]
                                                                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                                if balanceOf[address(msg.sender)] < arg2 * stor14 / 100:
                                                                    revert with 'NH{q', 17
                                                                balanceOf[address(msg.sender)] -= arg2 * stor14 / 100
                                                                if balanceOf[address(this.address)] > -(arg2 * stor14 / 100) - 1:
                                                                    revert with 'NH{q', 17
                                                                if balanceOf[address(this.address)] + (arg2 * stor14 / 100) < balanceOf[address(this.address)]:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                mem[0] = this.address
                                                                mem[32] = 9
                                                                balanceOf[address(this.address)] += arg2 * stor14 / 100
                                                                emit Transfer((arg2 * stor14 / 100), msg.sender, this.address);
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                _12933 = mem[64]
                                                                mem[64] = mem[64] + 96
                                                                mem[_12933] = 38
                                                                mem[_12933 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                if 0 > balanceOf[address(msg.sender)]:
                                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 32
                                                                    mem[mem[64] + 36] = 38
                                                                    mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_12933 + 70 len 26]
                                                                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                                if balanceOf[address(msg.sender)] < 0:
                                                                    revert with 'NH{q', 17
                                                                if balanceOf[57005] > -1:
                                                                    revert with 'NH{q', 17
                                                                if balanceOf[57005] < balanceOf[57005]:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                mem[0] = 57005
                                                                mem[32] = 9
                                                                emit Transfer(0, msg.sender, 57005);
                                                                emit TokenBurn(0, msg.sender);
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                if not arg1:
                                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                                _14179 = mem[64]
                                                                mem[64] = mem[64] + 96
                                                                mem[_14179] = 38
                                                                mem[_14179 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                if arg2 - (arg2 * stor14 / 100) > balanceOf[address(msg.sender)]:
                                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 32
                                                                    mem[mem[64] + 36] = 38
                                                                    mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_14179 + 70 len 26]
                                                                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                                if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor14 / 100):
                                                                    revert with 'NH{q', 17
                                                                balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor14 / 100)
                                                                if balanceOf[address(arg1)] > -arg2 + (arg2 * stor14 / 100) - 1:
                                                                    revert with 'NH{q', 17
                                                                if balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) < balanceOf[address(arg1)]:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100)
                                                                emit Transfer((arg2 - (arg2 * stor14 / 100)), msg.sender, arg1);
                                                            else:
                                                                if arg2 and burnFee > -1 / arg2:
                                                                    revert with 'NH{q', 17
                                                                if not arg2:
                                                                    revert with 'NH{q', 18
                                                                if arg2 * burnFee / arg2 != burnFee:
                                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                                _11783 = mem[64]
                                                                mem[64] = mem[64] + 64
                                                                mem[_11783] = 26
                                                                mem[_11783 + 32] = 'SafeMath: division by zero'
                                                                if arg2 * stor14 / 100 > -(arg2 * burnFee / 100) - 1:
                                                                    revert with 'NH{q', 17
                                                                if (arg2 * stor14 / 100) + (arg2 * burnFee / 100) < arg2 * stor14 / 100:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                _12217 = mem[64]
                                                                mem[64] = mem[64] + 64
                                                                mem[_12217] = 30
                                                                mem[_12217 + 32] = 'SafeMath: subtraction overflow'
                                                                if (arg2 * stor14 / 100) + (arg2 * burnFee / 100) > arg2:
                                                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                                                if arg2 < (arg2 * stor14 / 100) + (arg2 * burnFee / 100):
                                                                    revert with 'NH{q', 17
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                if not this.address:
                                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                                _12565 = mem[64]
                                                                mem[64] = mem[64] + 96
                                                                mem[_12565] = 38
                                                                mem[_12565 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                if arg2 * stor14 / 100 > balanceOf[address(msg.sender)]:
                                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 32
                                                                    mem[mem[64] + 36] = 38
                                                                    mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_12565 + 70 len 26]
                                                                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                                if balanceOf[address(msg.sender)] < arg2 * stor14 / 100:
                                                                    revert with 'NH{q', 17
                                                                balanceOf[address(msg.sender)] -= arg2 * stor14 / 100
                                                                if balanceOf[address(this.address)] > -(arg2 * stor14 / 100) - 1:
                                                                    revert with 'NH{q', 17
                                                                if balanceOf[address(this.address)] + (arg2 * stor14 / 100) < balanceOf[address(this.address)]:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                mem[0] = this.address
                                                                mem[32] = 9
                                                                balanceOf[address(this.address)] += arg2 * stor14 / 100
                                                                emit Transfer((arg2 * stor14 / 100), msg.sender, this.address);
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                _13263 = mem[64]
                                                                mem[64] = mem[64] + 96
                                                                mem[_13263] = 38
                                                                mem[_13263 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                if arg2 * burnFee / 100 > balanceOf[address(msg.sender)]:
                                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 32
                                                                    mem[mem[64] + 36] = 38
                                                                    mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_13263 + 70 len 26]
                                                                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                                if balanceOf[address(msg.sender)] < arg2 * burnFee / 100:
                                                                    revert with 'NH{q', 17
                                                                balanceOf[address(msg.sender)] -= arg2 * burnFee / 100
                                                                if balanceOf[57005] > -(arg2 * burnFee / 100) - 1:
                                                                    revert with 'NH{q', 17
                                                                if balanceOf[57005] + (arg2 * burnFee / 100) < balanceOf[57005]:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                mem[0] = 57005
                                                                mem[32] = 9
                                                                balanceOf[57005] += arg2 * burnFee / 100
                                                                emit Transfer((arg2 * burnFee / 100), msg.sender, 57005);
                                                                emit TokenBurn((arg2 * burnFee / 100), msg.sender);
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                if not arg1:
                                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                                _14517 = mem[64]
                                                                mem[64] = mem[64] + 96
                                                                mem[_14517] = 38
                                                                mem[_14517 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                if arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100) > balanceOf[address(msg.sender)]:
                                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 32
                                                                    mem[mem[64] + 36] = 38
                                                                    mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_14517 + 70 len 26]
                                                                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                                if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100):
                                                                    revert with 'NH{q', 17
                                                                balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor14 / 100) + (arg2 * burnFee / 100)
                                                                if balanceOf[address(arg1)] > -arg2 + (arg2 * stor14 / 100) + (arg2 * burnFee / 100) - 1:
                                                                    revert with 'NH{q', 17
                                                                if balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100) < balanceOf[address(arg1)]:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100)
                                                                emit Transfer((arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100)), msg.sender, arg1);
                                    else:
                                        if balanceOf[address(this.address)] and liquidityFee > -1 / balanceOf[address(this.address)]:
                                            revert with 'NH{q', 17
                                        if not balanceOf[address(this.address)]:
                                            revert with 'NH{q', 18
                                        if balanceOf[address(this.address)] * liquidityFee / balanceOf[address(this.address)] != liquidityFee:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeMath: multiplication overflow'
                                        mem[96] = 26
                                        mem[128] = 'SafeMath: division by zero'
                                        if stor14 <= 0:
                                            revert with 0, 'SafeMath: division by zero', 0
                                        if not stor14:
                                            revert with 'NH{q', 18
                                        if not balanceOf[address(this.address)]:
                                            mem[160] = 26
                                            mem[192] = 'SafeMath: division by zero'
                                            if stor14 <= 0:
                                                revert with 0, 'SafeMath: division by zero', 0
                                            if not stor14:
                                                revert with 'NH{q', 18
                                            mem[224] = 26
                                            mem[256] = 'SafeMath: division by zero'
                                            mem[288] = 30
                                            mem[320] = 'SafeMath: subtraction overflow'
                                            if balanceOf[address(this.address)] * liquidityFee / stor14 / 2 > balanceOf[address(this.address)] * liquidityFee / stor14:
                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                            if balanceOf[address(this.address)] * liquidityFee / stor14 < balanceOf[address(this.address)] * liquidityFee / stor14 / 2:
                                                revert with 'NH{q', 17
                                            mem[352] = 2
                                            mem[384] = this.address
                                            require ext_code.size(uniswapV2RouterAddress)
                                            staticcall uniswapV2RouterAddress.WETH() with:
                                                    gas gas_remaining wei
                                            mem[448] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                            mem[416] = ext_call.return_data[12 len 20]
                                            if not this.address:
                                                revert with 0, 'ERC20: approve from the zero address'
                                            if not uniswapV2RouterAddress:
                                                revert with 0, 'ERC20: approve to the zero address'
                                            allowance[address(this.address)][stor19].field_0 = balanceOf[address(this.address)] * liquidityFee / stor14 / 2
                                            allowance[address(this.address)][stor19].field_255 = 0
                                            emit Approval((balanceOf[address(this.address)] * liquidityFee / stor14 / 2), this.address, uniswapV2RouterAddress);
                                            mem[ceil32(return_data.size) + 448] = 0x791ac94700000000000000000000000000000000000000000000000000000000
                                            mem[ceil32(return_data.size) + 452] = balanceOf[address(this.address)] * liquidityFee / stor14 / 2
                                            idx = 0
                                            s = 384
                                            t = ceil32(return_data.size) + 644
                                            while idx < 2:
                                                mem[t] = mem[s + 12 len 20]
                                                idx = idx + 1
                                                s = s + 32
                                                t = t + 32
                                                continue 
                                            require ext_code.size(uniswapV2RouterAddress)
                                            call uniswapV2RouterAddress.swapExactTokensForETHSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args Mask(255, 1, balanceOf[address(this.address)] * liquidityFee / stor14), 0, 160, address(this.address), block.timestamp, 2, mem[ceil32(return_data.size) + 644 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[ceil32(return_data.size) + 448] = 30
                                            mem[ceil32(return_data.size) + 480] = 'SafeMath: subtraction overflow'
                                            if eth.balance(this.address) > eth.balance(this.address):
                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                            if eth.balance(this.address) < eth.balance(this.address):
                                                revert with 'NH{q', 17
                                            if not this.address:
                                                revert with 0, 'ERC20: approve from the zero address'
                                            if not uniswapV2RouterAddress:
                                                revert with 0, 'ERC20: approve to the zero address'
                                            allowance[address(this.address)][stor19].field_0 = (balanceOf[address(this.address)] * liquidityFee / stor14) - (balanceOf[address(this.address)] * liquidityFee / stor14 / 2)
                                            emit Approval(((balanceOf[address(this.address)] * liquidityFee / stor14) - (balanceOf[address(this.address)] * liquidityFee / stor14 / 2)), this.address, uniswapV2RouterAddress);
                                            mem[ceil32(return_data.size) + 580] = 0
                                            mem[ceil32(return_data.size) + 612] = 0
                                            mem[ceil32(return_data.size) + 644] = owner
                                            mem[ceil32(return_data.size) + 676] = block.timestamp
                                            require ext_code.size(uniswapV2RouterAddress)
                                            call uniswapV2RouterAddress.addLiquidityETH(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                                 gas gas_remaining wei
                                                args address(this.address), (balanceOf[address(this.address)] * liquidityFee / stor14) - (balanceOf[address(this.address)] * liquidityFee / stor14 / 2), 0, 0, owner, block.timestamp
                                            mem[ceil32(return_data.size) + 512 len 96] = ext_call.return_data[0 len 96]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 96
                                            require ext_call.return_data[0] == ext_call.return_data[0]
                                            require ext_call.return_data[32] == ext_call.return_data[32]
                                            require ext_call.return_data[64] == ext_call.return_data[64]
                                            mem[(2 * ceil32(return_data.size)) + 512] = 3
                                            mem[(2 * ceil32(return_data.size)) + 544] = this.address
                                            require ext_code.size(uniswapV2RouterAddress)
                                            staticcall uniswapV2RouterAddress.WETH() with:
                                                    gas gas_remaining wei
                                            mem[(2 * ceil32(return_data.size)) + 640] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[64] = (4 * ceil32(return_data.size)) + 640
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                            mem[(2 * ceil32(return_data.size)) + 576] = ext_call.return_data[12 len 20]
                                            mem[(2 * ceil32(return_data.size)) + 608] = sub_e5148bd6Address
                                            if not this.address:
                                                revert with 0, 'ERC20: approve from the zero address'
                                            if not uniswapV2RouterAddress:
                                                revert with 0, 'ERC20: approve to the zero address'
                                            mem[0] = uniswapV2RouterAddress
                                            mem[32] = sha3(address(this.address), 10)
                                            allowance[address(this.address)][stor19].field_0 = 0 / stor14
                                            emit Approval((0 / stor14), this.address, uniswapV2RouterAddress);
                                            mem[(4 * ceil32(return_data.size)) + 640] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                            mem[(4 * ceil32(return_data.size)) + 644] = 0 / stor14
                                            mem[(4 * ceil32(return_data.size)) + 676] = 0
                                            mem[(4 * ceil32(return_data.size)) + 708] = 160
                                            mem[(4 * ceil32(return_data.size)) + 804] = 3
                                            idx = 0
                                            s = (2 * ceil32(return_data.size)) + 544
                                            t = (4 * ceil32(return_data.size)) + 836
                                            while idx < mem[(2 * ceil32(return_data.size)) + 512]:
                                                mem[t] = mem[s + 12 len 20]
                                                idx = idx + 1
                                                s = s + 32
                                                t = t + 32
                                                continue 
                                            mem[(4 * ceil32(return_data.size)) + 740] = this.address
                                            mem[(4 * ceil32(return_data.size)) + 772] = block.timestamp
                                            require ext_code.size(uniswapV2RouterAddress)
                                            call uniswapV2RouterAddress.mem[mem[64] len 4] with:
                                                 gas gas_remaining wei
                                                args mem[mem[64] + 4 len (4 * ceil32(return_data.size)) + (32 * mem[(2 * ceil32(return_data.size)) + 512]) + -mem[64] + 832]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(sub_e5148bd6Address)
                                            staticcall sub_e5148bd6Address.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args address(this.address)
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _10832 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _10848 = mem[_10832]
                                            require mem[_10832] == mem[_10832]
                                            mem[mem[64] + 4] = marketingAddress
                                            mem[mem[64] + 36] = _10848
                                            require ext_code.size(sub_e5148bd6Address)
                                            call sub_e5148bd6Address.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args marketingAddress, _10848
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _10944 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require mem[_10944] == bool(mem[_10944])
                                            stor22 = 0
                                            mem[0] = msg.sender
                                            mem[32] = 11
                                            if stor11[address(msg.sender)]:
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if not arg1:
                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                _11003 = mem[64]
                                                mem[64] = mem[64] + 96
                                                mem[_11003] = 38
                                                mem[_11003 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                if arg2 > balanceOf[address(msg.sender)]:
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 38
                                                    mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_11003 + 70 len 26]
                                                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                if balanceOf[address(msg.sender)] < arg2:
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] -= arg2
                                                if balanceOf[address(arg1)] > -arg2 - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                balanceOf[address(arg1)] += arg2
                                                emit Transfer(arg2, msg.sender, arg1);
                                            else:
                                                mem[0] = arg1
                                                mem[32] = 11
                                                if stor11[address(arg1)]:
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if not arg1:
                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                    _11043 = mem[64]
                                                    mem[64] = mem[64] + 96
                                                    mem[_11043] = 38
                                                    mem[_11043 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                    if arg2 > balanceOf[address(msg.sender)]:
                                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = 32
                                                        mem[mem[64] + 36] = 38
                                                        mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_11043 + 70 len 26]
                                                        revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                    if balanceOf[address(msg.sender)] < arg2:
                                                        revert with 'NH{q', 17
                                                    balanceOf[address(msg.sender)] -= arg2
                                                    if balanceOf[address(arg1)] > -arg2 - 1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    balanceOf[address(arg1)] += arg2
                                                    emit Transfer(arg2, msg.sender, arg1);
                                                else:
                                                    if totalFees <= 0:
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if not arg1:
                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                        _11086 = mem[64]
                                                        mem[64] = mem[64] + 96
                                                        mem[_11086] = 38
                                                        mem[_11086 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                        if arg2 > balanceOf[address(msg.sender)]:
                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = 32
                                                            mem[mem[64] + 36] = 38
                                                            mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_11086 + 70 len 26]
                                                            revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                        if balanceOf[address(msg.sender)] < arg2:
                                                            revert with 'NH{q', 17
                                                        balanceOf[address(msg.sender)] -= arg2
                                                        if balanceOf[address(arg1)] > -arg2 - 1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        balanceOf[address(arg1)] += arg2
                                                        emit Transfer(arg2, msg.sender, arg1);
                                                    else:
                                                        if not arg2:
                                                            _11136 = mem[64]
                                                            mem[64] = mem[64] + 64
                                                            mem[_11136] = 26
                                                            mem[_11136 + 32] = 'SafeMath: division by zero'
                                                            if not arg2:
                                                                _11444 = mem[64]
                                                                mem[64] = mem[64] + 64
                                                                mem[_11444] = 26
                                                                mem[_11444 + 32] = 'SafeMath: division by zero'
                                                                _11740 = mem[64]
                                                                mem[64] = mem[64] + 64
                                                                mem[_11740] = 30
                                                                mem[_11740 + 32] = 'SafeMath: subtraction overflow'
                                                                if 0 > arg2:
                                                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                                                if arg2 < 0:
                                                                    revert with 'NH{q', 17
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                if not this.address:
                                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                                _11888 = mem[64]
                                                                mem[64] = mem[64] + 96
                                                                mem[_11888] = 38
                                                                mem[_11888 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                if 0 > balanceOf[address(msg.sender)]:
                                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 32
                                                                    mem[mem[64] + 36] = 38
                                                                    mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_11888 + 70 len 26]
                                                                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                                if balanceOf[address(msg.sender)] < 0:
                                                                    revert with 'NH{q', 17
                                                                if balanceOf[address(this.address)] > -1:
                                                                    revert with 'NH{q', 17
                                                                if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                mem[0] = this.address
                                                                mem[32] = 9
                                                                emit Transfer(0, msg.sender, this.address);
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                _12563 = mem[64]
                                                                mem[64] = mem[64] + 96
                                                                mem[_12563] = 38
                                                                mem[_12563 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                if 0 > balanceOf[address(msg.sender)]:
                                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 32
                                                                    mem[mem[64] + 36] = 38
                                                                    mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_12563 + 70 len 26]
                                                                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                                if balanceOf[address(msg.sender)] < 0:
                                                                    revert with 'NH{q', 17
                                                                if balanceOf[57005] > -1:
                                                                    revert with 'NH{q', 17
                                                                if balanceOf[57005] < balanceOf[57005]:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                mem[0] = 57005
                                                                mem[32] = 9
                                                                emit Transfer(0, msg.sender, 57005);
                                                                emit TokenBurn(0, msg.sender);
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                if not arg1:
                                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                                _13434 = mem[64]
                                                                mem[64] = mem[64] + 96
                                                                mem[_13434] = 38
                                                                mem[_13434 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                if arg2 > balanceOf[address(msg.sender)]:
                                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 32
                                                                    mem[mem[64] + 36] = 38
                                                                    mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_13434 + 70 len 26]
                                                                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                                if balanceOf[address(msg.sender)] < arg2:
                                                                    revert with 'NH{q', 17
                                                                balanceOf[address(msg.sender)] -= arg2
                                                                if balanceOf[address(arg1)] > -arg2 - 1:
                                                                    revert with 'NH{q', 17
                                                                if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                balanceOf[address(arg1)] += arg2
                                                                emit Transfer(arg2, msg.sender, arg1);
                                                            else:
                                                                if arg2 and burnFee > -1 / arg2:
                                                                    revert with 'NH{q', 17
                                                                if not arg2:
                                                                    revert with 'NH{q', 18
                                                                if arg2 * burnFee / arg2 != burnFee:
                                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                                _11660 = mem[64]
                                                                mem[64] = mem[64] + 64
                                                                mem[_11660] = 26
                                                                mem[_11660 + 32] = 'SafeMath: division by zero'
                                                                if 0 > -(arg2 * burnFee / 100) - 1:
                                                                    revert with 'NH{q', 17
                                                                if arg2 * burnFee / 100 < 0:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                _11916 = mem[64]
                                                                mem[64] = mem[64] + 64
                                                                mem[_11916] = 30
                                                                mem[_11916 + 32] = 'SafeMath: subtraction overflow'
                                                                if arg2 * burnFee / 100 > arg2:
                                                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                                                if arg2 < arg2 * burnFee / 100:
                                                                    revert with 'NH{q', 17
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                if not this.address:
                                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                                _12174 = mem[64]
                                                                mem[64] = mem[64] + 96
                                                                mem[_12174] = 38
                                                                mem[_12174 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                if 0 > balanceOf[address(msg.sender)]:
                                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 32
                                                                    mem[mem[64] + 36] = 38
                                                                    mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_12174 + 70 len 26]
                                                                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                                if balanceOf[address(msg.sender)] < 0:
                                                                    revert with 'NH{q', 17
                                                                if balanceOf[address(this.address)] > -1:
                                                                    revert with 'NH{q', 17
                                                                if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                mem[0] = this.address
                                                                mem[32] = 9
                                                                emit Transfer(0, msg.sender, this.address);
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                _12931 = mem[64]
                                                                mem[64] = mem[64] + 96
                                                                mem[_12931] = 38
                                                                mem[_12931 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                if arg2 * burnFee / 100 > balanceOf[address(msg.sender)]:
                                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 32
                                                                    mem[mem[64] + 36] = 38
                                                                    mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_12931 + 70 len 26]
                                                                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                                if balanceOf[address(msg.sender)] < arg2 * burnFee / 100:
                                                                    revert with 'NH{q', 17
                                                                balanceOf[address(msg.sender)] -= arg2 * burnFee / 100
                                                                if balanceOf[57005] > -(arg2 * burnFee / 100) - 1:
                                                                    revert with 'NH{q', 17
                                                                if balanceOf[57005] + (arg2 * burnFee / 100) < balanceOf[57005]:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                mem[0] = 57005
                                                                mem[32] = 9
                                                                balanceOf[57005] += arg2 * burnFee / 100
                                                                emit Transfer((arg2 * burnFee / 100), msg.sender, 57005);
                                                                emit TokenBurn((arg2 * burnFee / 100), msg.sender);
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                if not arg1:
                                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                                _14176 = mem[64]
                                                                mem[64] = mem[64] + 96
                                                                mem[_14176] = 38
                                                                mem[_14176 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                if arg2 - (arg2 * burnFee / 100) > balanceOf[address(msg.sender)]:
                                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 32
                                                                    mem[mem[64] + 36] = 38
                                                                    mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_14176 + 70 len 26]
                                                                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                                if balanceOf[address(msg.sender)] < arg2 - (arg2 * burnFee / 100):
                                                                    revert with 'NH{q', 17
                                                                balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * burnFee / 100)
                                                                if balanceOf[address(arg1)] > -arg2 + (arg2 * burnFee / 100) - 1:
                                                                    revert with 'NH{q', 17
                                                                if balanceOf[address(arg1)] + arg2 - (arg2 * burnFee / 100) < balanceOf[address(arg1)]:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * burnFee / 100)
                                                                emit Transfer((arg2 - (arg2 * burnFee / 100)), msg.sender, arg1);
                                                        else:
                                                            if arg2 and stor14 > -1 / arg2:
                                                                revert with 'NH{q', 17
                                                            if not arg2:
                                                                revert with 'NH{q', 18
                                                            if arg2 * stor14 / arg2 != stor14:
                                                                revert with 0, 'SafeMath: multiplication overflow'
                                                            _11400 = mem[64]
                                                            mem[64] = mem[64] + 64
                                                            mem[_11400] = 26
                                                            mem[_11400 + 32] = 'SafeMath: division by zero'
                                                            if not arg2:
                                                                _11659 = mem[64]
                                                                mem[64] = mem[64] + 64
                                                                mem[_11659] = 26
                                                                mem[_11659 + 32] = 'SafeMath: division by zero'
                                                                if arg2 * stor14 / 100 > -1:
                                                                    revert with 'NH{q', 17
                                                                if arg2 * stor14 / 100 < arg2 * stor14 / 100:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                _11915 = mem[64]
                                                                mem[64] = mem[64] + 64
                                                                mem[_11915] = 30
                                                                mem[_11915 + 32] = 'SafeMath: subtraction overflow'
                                                                if arg2 * stor14 / 100 > arg2:
                                                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                                                if arg2 < arg2 * stor14 / 100:
                                                                    revert with 'NH{q', 17
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                if not this.address:
                                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                                _12171 = mem[64]
                                                                mem[64] = mem[64] + 96
                                                                mem[_12171] = 38
                                                                mem[_12171 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                if arg2 * stor14 / 100 > balanceOf[address(msg.sender)]:
                                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 32
                                                                    mem[mem[64] + 36] = 38
                                                                    mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_12171 + 70 len 26]
                                                                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                                if balanceOf[address(msg.sender)] < arg2 * stor14 / 100:
                                                                    revert with 'NH{q', 17
                                                                balanceOf[address(msg.sender)] -= arg2 * stor14 / 100
                                                                if balanceOf[address(this.address)] > -(arg2 * stor14 / 100) - 1:
                                                                    revert with 'NH{q', 17
                                                                if balanceOf[address(this.address)] + (arg2 * stor14 / 100) < balanceOf[address(this.address)]:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                mem[0] = this.address
                                                                mem[32] = 9
                                                                balanceOf[address(this.address)] += arg2 * stor14 / 100
                                                                emit Transfer((arg2 * stor14 / 100), msg.sender, this.address);
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                _12929 = mem[64]
                                                                mem[64] = mem[64] + 96
                                                                mem[_12929] = 38
                                                                mem[_12929 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                if 0 > balanceOf[address(msg.sender)]:
                                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 32
                                                                    mem[mem[64] + 36] = 38
                                                                    mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_12929 + 70 len 26]
                                                                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                                if balanceOf[address(msg.sender)] < 0:
                                                                    revert with 'NH{q', 17
                                                                if balanceOf[57005] > -1:
                                                                    revert with 'NH{q', 17
                                                                if balanceOf[57005] < balanceOf[57005]:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                mem[0] = 57005
                                                                mem[32] = 9
                                                                emit Transfer(0, msg.sender, 57005);
                                                                emit TokenBurn(0, msg.sender);
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                if not arg1:
                                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                                _14173 = mem[64]
                                                                mem[64] = mem[64] + 96
                                                                mem[_14173] = 38
                                                                mem[_14173 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                if arg2 - (arg2 * stor14 / 100) > balanceOf[address(msg.sender)]:
                                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 32
                                                                    mem[mem[64] + 36] = 38
                                                                    mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_14173 + 70 len 26]
                                                                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                                if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor14 / 100):
                                                                    revert with 'NH{q', 17
                                                                balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor14 / 100)
                                                                if balanceOf[address(arg1)] > -arg2 + (arg2 * stor14 / 100) - 1:
                                                                    revert with 'NH{q', 17
                                                                if balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) < balanceOf[address(arg1)]:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100)
                                                                emit Transfer((arg2 - (arg2 * stor14 / 100)), msg.sender, arg1);
                                                            else:
                                                                if arg2 and burnFee > -1 / arg2:
                                                                    revert with 'NH{q', 17
                                                                if not arg2:
                                                                    revert with 'NH{q', 18
                                                                if arg2 * burnFee / arg2 != burnFee:
                                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                                _11782 = mem[64]
                                                                mem[64] = mem[64] + 64
                                                                mem[_11782] = 26
                                                                mem[_11782 + 32] = 'SafeMath: division by zero'
                                                                if arg2 * stor14 / 100 > -(arg2 * burnFee / 100) - 1:
                                                                    revert with 'NH{q', 17
                                                                if (arg2 * stor14 / 100) + (arg2 * burnFee / 100) < arg2 * stor14 / 100:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                _12216 = mem[64]
                                                                mem[64] = mem[64] + 64
                                                                mem[_12216] = 30
                                                                mem[_12216 + 32] = 'SafeMath: subtraction overflow'
                                                                if (arg2 * stor14 / 100) + (arg2 * burnFee / 100) > arg2:
                                                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                                                if arg2 < (arg2 * stor14 / 100) + (arg2 * burnFee / 100):
                                                                    revert with 'NH{q', 17
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                if not this.address:
                                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                                _12560 = mem[64]
                                                                mem[64] = mem[64] + 96
                                                                mem[_12560] = 38
                                                                mem[_12560 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                if arg2 * stor14 / 100 > balanceOf[address(msg.sender)]:
                                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 32
                                                                    mem[mem[64] + 36] = 38
                                                                    mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_12560 + 70 len 26]
                                                                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                                if balanceOf[address(msg.sender)] < arg2 * stor14 / 100:
                                                                    revert with 'NH{q', 17
                                                                balanceOf[address(msg.sender)] -= arg2 * stor14 / 100
                                                                if balanceOf[address(this.address)] > -(arg2 * stor14 / 100) - 1:
                                                                    revert with 'NH{q', 17
                                                                if balanceOf[address(this.address)] + (arg2 * stor14 / 100) < balanceOf[address(this.address)]:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                mem[0] = this.address
                                                                mem[32] = 9
                                                                balanceOf[address(this.address)] += arg2 * stor14 / 100
                                                                emit Transfer((arg2 * stor14 / 100), msg.sender, this.address);
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                _13261 = mem[64]
                                                                mem[64] = mem[64] + 96
                                                                mem[_13261] = 38
                                                                mem[_13261 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                if arg2 * burnFee / 100 > balanceOf[address(msg.sender)]:
                                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 32
                                                                    mem[mem[64] + 36] = 38
                                                                    mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_13261 + 70 len 26]
                                                                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                                if balanceOf[address(msg.sender)] < arg2 * burnFee / 100:
                                                                    revert with 'NH{q', 17
                                                                balanceOf[address(msg.sender)] -= arg2 * burnFee / 100
                                                                if balanceOf[57005] > -(arg2 * burnFee / 100) - 1:
                                                                    revert with 'NH{q', 17
                                                                if balanceOf[57005] + (arg2 * burnFee / 100) < balanceOf[57005]:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                mem[0] = 57005
                                                                mem[32] = 9
                                                                balanceOf[57005] += arg2 * burnFee / 100
                                                                emit Transfer((arg2 * burnFee / 100), msg.sender, 57005);
                                                                emit TokenBurn((arg2 * burnFee / 100), msg.sender);
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                if not arg1:
                                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                                _14514 = mem[64]
                                                                mem[64] = mem[64] + 96
                                                                mem[_14514] = 38
                                                                mem[_14514 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                if arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100) > balanceOf[address(msg.sender)]:
                                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 32
                                                                    mem[mem[64] + 36] = 38
                                                                    mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_14514 + 70 len 26]
                                                                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                                if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100):
                                                                    revert with 'NH{q', 17
                                                                balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor14 / 100) + (arg2 * burnFee / 100)
                                                                if balanceOf[address(arg1)] > -arg2 + (arg2 * stor14 / 100) + (arg2 * burnFee / 100) - 1:
                                                                    revert with 'NH{q', 17
                                                                if balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100) < balanceOf[address(arg1)]:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100)
                                                                emit Transfer((arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100)), msg.sender, arg1);
                                        else:
                                            if balanceOf[address(this.address)] and marketingFee > -1 / balanceOf[address(this.address)]:
                                                revert with 'NH{q', 17
                                            if not balanceOf[address(this.address)]:
                                                revert with 'NH{q', 18
                                            if balanceOf[address(this.address)] * marketingFee / balanceOf[address(this.address)] != marketingFee:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            mem[160] = 26
                                            mem[192] = 'SafeMath: division by zero'
                                            if stor14 <= 0:
                                                revert with 0, 'SafeMath: division by zero', 0
                                            if not stor14:
                                                revert with 'NH{q', 18
                                            mem[224] = 26
                                            mem[256] = 'SafeMath: division by zero'
                                            mem[288] = 30
                                            mem[320] = 'SafeMath: subtraction overflow'
                                            if balanceOf[address(this.address)] * liquidityFee / stor14 / 2 > balanceOf[address(this.address)] * liquidityFee / stor14:
                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                            if balanceOf[address(this.address)] * liquidityFee / stor14 < balanceOf[address(this.address)] * liquidityFee / stor14 / 2:
                                                revert with 'NH{q', 17
                                            mem[352] = 2
                                            mem[384] = this.address
                                            require ext_code.size(uniswapV2RouterAddress)
                                            staticcall uniswapV2RouterAddress.WETH() with:
                                                    gas gas_remaining wei
                                            mem[448] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                            mem[416] = ext_call.return_data[12 len 20]
                                            if not this.address:
                                                revert with 0, 'ERC20: approve from the zero address'
                                            if not uniswapV2RouterAddress:
                                                revert with 0, 'ERC20: approve to the zero address'
                                            allowance[address(this.address)][stor19].field_0 = balanceOf[address(this.address)] * liquidityFee / stor14 / 2
                                            allowance[address(this.address)][stor19].field_255 = 0
                                            emit Approval((balanceOf[address(this.address)] * liquidityFee / stor14 / 2), this.address, uniswapV2RouterAddress);
                                            mem[ceil32(return_data.size) + 448] = 0x791ac94700000000000000000000000000000000000000000000000000000000
                                            mem[ceil32(return_data.size) + 452] = balanceOf[address(this.address)] * liquidityFee / stor14 / 2
                                            idx = 0
                                            s = 384
                                            t = ceil32(return_data.size) + 644
                                            while idx < 2:
                                                mem[t] = mem[s + 12 len 20]
                                                idx = idx + 1
                                                s = s + 32
                                                t = t + 32
                                                continue 
                                            require ext_code.size(uniswapV2RouterAddress)
                                            call uniswapV2RouterAddress.swapExactTokensForETHSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args Mask(255, 1, balanceOf[address(this.address)] * liquidityFee / stor14), 0, 160, address(this.address), block.timestamp, 2, mem[ceil32(return_data.size) + 644 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[ceil32(return_data.size) + 448] = 30
                                            mem[ceil32(return_data.size) + 480] = 'SafeMath: subtraction overflow'
                                            if eth.balance(this.address) > eth.balance(this.address):
                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                            if eth.balance(this.address) < eth.balance(this.address):
                                                revert with 'NH{q', 17
                                            if not this.address:
                                                revert with 0, 'ERC20: approve from the zero address'
                                            if not uniswapV2RouterAddress:
                                                revert with 0, 'ERC20: approve to the zero address'
                                            allowance[address(this.address)][stor19].field_0 = (balanceOf[address(this.address)] * liquidityFee / stor14) - (balanceOf[address(this.address)] * liquidityFee / stor14 / 2)
                                            emit Approval(((balanceOf[address(this.address)] * liquidityFee / stor14) - (balanceOf[address(this.address)] * liquidityFee / stor14 / 2)), this.address, uniswapV2RouterAddress);
                                            mem[ceil32(return_data.size) + 580] = 0
                                            mem[ceil32(return_data.size) + 612] = 0
                                            mem[ceil32(return_data.size) + 644] = owner
                                            mem[ceil32(return_data.size) + 676] = block.timestamp
                                            require ext_code.size(uniswapV2RouterAddress)
                                            call uniswapV2RouterAddress.addLiquidityETH(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                                 gas gas_remaining wei
                                                args address(this.address), (balanceOf[address(this.address)] * liquidityFee / stor14) - (balanceOf[address(this.address)] * liquidityFee / stor14 / 2), 0, 0, owner, block.timestamp
                                            mem[ceil32(return_data.size) + 512 len 96] = ext_call.return_data[0 len 96]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 96
                                            require ext_call.return_data[0] == ext_call.return_data[0]
                                            require ext_call.return_data[32] == ext_call.return_data[32]
                                            require ext_call.return_data[64] == ext_call.return_data[64]
                                            mem[(2 * ceil32(return_data.size)) + 512] = 3
                                            mem[(2 * ceil32(return_data.size)) + 544] = this.address
                                            require ext_code.size(uniswapV2RouterAddress)
                                            staticcall uniswapV2RouterAddress.WETH() with:
                                                    gas gas_remaining wei
                                            mem[(2 * ceil32(return_data.size)) + 640] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[64] = (4 * ceil32(return_data.size)) + 640
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                            mem[(2 * ceil32(return_data.size)) + 576] = ext_call.return_data[12 len 20]
                                            mem[(2 * ceil32(return_data.size)) + 608] = sub_e5148bd6Address
                                            if not this.address:
                                                revert with 0, 'ERC20: approve from the zero address'
                                            if not uniswapV2RouterAddress:
                                                revert with 0, 'ERC20: approve to the zero address'
                                            mem[0] = uniswapV2RouterAddress
                                            mem[32] = sha3(address(this.address), 10)
                                            allowance[address(this.address)][stor19].field_0 = balanceOf[address(this.address)] * marketingFee / stor14
                                            emit Approval((balanceOf[address(this.address)] * marketingFee / stor14), this.address, uniswapV2RouterAddress);
                                            mem[(4 * ceil32(return_data.size)) + 640] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                            mem[(4 * ceil32(return_data.size)) + 644] = balanceOf[address(this.address)] * marketingFee / stor14
                                            mem[(4 * ceil32(return_data.size)) + 676] = 0
                                            mem[(4 * ceil32(return_data.size)) + 708] = 160
                                            mem[(4 * ceil32(return_data.size)) + 804] = 3
                                            idx = 0
                                            s = (2 * ceil32(return_data.size)) + 544
                                            t = (4 * ceil32(return_data.size)) + 836
                                            while idx < mem[(2 * ceil32(return_data.size)) + 512]:
                                                mem[t] = mem[s + 12 len 20]
                                                idx = idx + 1
                                                s = s + 32
                                                t = t + 32
                                                continue 
                                            mem[(4 * ceil32(return_data.size)) + 740] = this.address
                                            mem[(4 * ceil32(return_data.size)) + 772] = block.timestamp
                                            require ext_code.size(uniswapV2RouterAddress)
                                            call uniswapV2RouterAddress.mem[mem[64] len 4] with:
                                                 gas gas_remaining wei
                                                args mem[mem[64] + 4 len (4 * ceil32(return_data.size)) + (32 * mem[(2 * ceil32(return_data.size)) + 512]) + -mem[64] + 832]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(sub_e5148bd6Address)
                                            staticcall sub_e5148bd6Address.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args address(this.address)
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _14513 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _14576 = mem[_14513]
                                            require mem[_14513] == mem[_14513]
                                            mem[mem[64] + 4] = marketingAddress
                                            mem[mem[64] + 36] = _14576
                                            require ext_code.size(sub_e5148bd6Address)
                                            call sub_e5148bd6Address.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args marketingAddress, _14576
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _14888 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require mem[_14888] == bool(mem[_14888])
                                            stor22 = 0
                                            mem[0] = msg.sender
                                            mem[32] = 11
                                            if stor11[address(msg.sender)]:
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if not arg1:
                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                _14941 = mem[64]
                                                mem[64] = mem[64] + 96
                                                mem[_14941] = 38
                                                mem[_14941 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                if arg2 > balanceOf[address(msg.sender)]:
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 38
                                                    mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_14941 + 70 len 26]
                                                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                if balanceOf[address(msg.sender)] < arg2:
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] -= arg2
                                                if balanceOf[address(arg1)] > -arg2 - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                balanceOf[address(arg1)] += arg2
                                                emit Transfer(arg2, msg.sender, arg1);
                                            else:
                                                mem[0] = arg1
                                                mem[32] = 11
                                                if stor11[address(arg1)]:
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if not arg1:
                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                    _14965 = mem[64]
                                                    mem[64] = mem[64] + 96
                                                    mem[_14965] = 38
                                                    mem[_14965 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                    if arg2 > balanceOf[address(msg.sender)]:
                                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = 32
                                                        mem[mem[64] + 36] = 38
                                                        mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_14965 + 70 len 26]
                                                        revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                    if balanceOf[address(msg.sender)] < arg2:
                                                        revert with 'NH{q', 17
                                                    balanceOf[address(msg.sender)] -= arg2
                                                    if balanceOf[address(arg1)] > -arg2 - 1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    balanceOf[address(arg1)] += arg2
                                                    emit Transfer(arg2, msg.sender, arg1);
                                                else:
                                                    if totalFees <= 0:
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if not arg1:
                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                        _14990 = mem[64]
                                                        mem[64] = mem[64] + 96
                                                        mem[_14990] = 38
                                                        mem[_14990 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                        if arg2 > balanceOf[address(msg.sender)]:
                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = 32
                                                            mem[mem[64] + 36] = 38
                                                            mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_14990 + 70 len 26]
                                                            revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                        if balanceOf[address(msg.sender)] < arg2:
                                                            revert with 'NH{q', 17
                                                        balanceOf[address(msg.sender)] -= arg2
                                                        if balanceOf[address(arg1)] > -arg2 - 1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        balanceOf[address(arg1)] += arg2
                                                        emit Transfer(arg2, msg.sender, arg1);
                                                    else:
                                                        if not arg2:
                                                            _15018 = mem[64]
                                                            mem[64] = mem[64] + 64
                                                            mem[_15018] = 26
                                                            mem[_15018 + 32] = 'SafeMath: division by zero'
                                                            if not arg2:
                                                                _15192 = mem[64]
                                                                mem[64] = mem[64] + 64
                                                                mem[_15192] = 26
                                                                mem[_15192 + 32] = 'SafeMath: division by zero'
                                                                _15346 = mem[64]
                                                                mem[64] = mem[64] + 64
                                                                mem[_15346] = 30
                                                                mem[_15346 + 32] = 'SafeMath: subtraction overflow'
                                                                if 0 > arg2:
                                                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                                                if arg2 < 0:
                                                                    revert with 'NH{q', 17
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                if not this.address:
                                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                                _15408 = mem[64]
                                                                mem[64] = mem[64] + 96
                                                                mem[_15408] = 38
                                                                mem[_15408 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                if 0 > balanceOf[address(msg.sender)]:
                                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 32
                                                                    mem[mem[64] + 36] = 38
                                                                    mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_15408 + 70 len 26]
                                                                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                                if balanceOf[address(msg.sender)] < 0:
                                                                    revert with 'NH{q', 17
                                                                if balanceOf[address(this.address)] > -1:
                                                                    revert with 'NH{q', 17
                                                                if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                mem[0] = this.address
                                                                mem[32] = 9
                                                                emit Transfer(0, msg.sender, this.address);
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                _15791 = mem[64]
                                                                mem[64] = mem[64] + 96
                                                                mem[_15791] = 38
                                                                mem[_15791 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                if 0 > balanceOf[address(msg.sender)]:
                                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 32
                                                                    mem[mem[64] + 36] = 38
                                                                    mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_15791 + 70 len 26]
                                                                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                                if balanceOf[address(msg.sender)] < 0:
                                                                    revert with 'NH{q', 17
                                                                if balanceOf[57005] > -1:
                                                                    revert with 'NH{q', 17
                                                                if balanceOf[57005] < balanceOf[57005]:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                mem[0] = 57005
                                                                mem[32] = 9
                                                                emit Transfer(0, msg.sender, 57005);
                                                                emit TokenBurn(0, msg.sender);
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                if not arg1:
                                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                                _16292 = mem[64]
                                                                mem[64] = mem[64] + 96
                                                                mem[_16292] = 38
                                                                mem[_16292 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                if arg2 > balanceOf[address(msg.sender)]:
                                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 32
                                                                    mem[mem[64] + 36] = 38
                                                                    mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_16292 + 70 len 26]
                                                                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                                if balanceOf[address(msg.sender)] < arg2:
                                                                    revert with 'NH{q', 17
                                                                balanceOf[address(msg.sender)] -= arg2
                                                                if balanceOf[address(arg1)] > -arg2 - 1:
                                                                    revert with 'NH{q', 17
                                                                if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                balanceOf[address(arg1)] += arg2
                                                                emit Transfer(arg2, msg.sender, arg1);
                                                            else:
                                                                if arg2 and burnFee > -1 / arg2:
                                                                    revert with 'NH{q', 17
                                                                if not arg2:
                                                                    revert with 'NH{q', 18
                                                                if arg2 * burnFee / arg2 != burnFee:
                                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                                _15314 = mem[64]
                                                                mem[64] = mem[64] + 64
                                                                mem[_15314] = 26
                                                                mem[_15314 + 32] = 'SafeMath: division by zero'
                                                                if 0 > -(arg2 * burnFee / 100) - 1:
                                                                    revert with 'NH{q', 17
                                                                if arg2 * burnFee / 100 < 0:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                _15426 = mem[64]
                                                                mem[64] = mem[64] + 64
                                                                mem[_15426] = 30
                                                                mem[_15426 + 32] = 'SafeMath: subtraction overflow'
                                                                if arg2 * burnFee / 100 > arg2:
                                                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                                                if arg2 < arg2 * burnFee / 100:
                                                                    revert with 'NH{q', 17
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                if not this.address:
                                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                                _15564 = mem[64]
                                                                mem[64] = mem[64] + 96
                                                                mem[_15564] = 38
                                                                mem[_15564 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                if 0 > balanceOf[address(msg.sender)]:
                                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 32
                                                                    mem[mem[64] + 36] = 38
                                                                    mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_15564 + 70 len 26]
                                                                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                                if balanceOf[address(msg.sender)] < 0:
                                                                    revert with 'NH{q', 17
                                                                if balanceOf[address(this.address)] > -1:
                                                                    revert with 'NH{q', 17
                                                                if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                mem[0] = this.address
                                                                mem[32] = 9
                                                                emit Transfer(0, msg.sender, this.address);
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                _16005 = mem[64]
                                                                mem[64] = mem[64] + 96
                                                                mem[_16005] = 38
                                                                mem[_16005 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                if arg2 * burnFee / 100 > balanceOf[address(msg.sender)]:
                                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 32
                                                                    mem[mem[64] + 36] = 38
                                                                    mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_16005 + 70 len 26]
                                                                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                                if balanceOf[address(msg.sender)] < arg2 * burnFee / 100:
                                                                    revert with 'NH{q', 17
                                                                balanceOf[address(msg.sender)] -= arg2 * burnFee / 100
                                                                if balanceOf[57005] > -(arg2 * burnFee / 100) - 1:
                                                                    revert with 'NH{q', 17
                                                                if balanceOf[57005] + (arg2 * burnFee / 100) < balanceOf[57005]:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                mem[0] = 57005
                                                                mem[32] = 9
                                                                balanceOf[57005] += arg2 * burnFee / 100
                                                                emit Transfer((arg2 * burnFee / 100), msg.sender, 57005);
                                                                emit TokenBurn((arg2 * burnFee / 100), msg.sender);
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                if not arg1:
                                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                                _16872 = mem[64]
                                                                mem[64] = mem[64] + 96
                                                                mem[_16872] = 38
                                                                mem[_16872 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                if arg2 - (arg2 * burnFee / 100) > balanceOf[address(msg.sender)]:
                                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 32
                                                                    mem[mem[64] + 36] = 38
                                                                    mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_16872 + 70 len 26]
                                                                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                                if balanceOf[address(msg.sender)] < arg2 - (arg2 * burnFee / 100):
                                                                    revert with 'NH{q', 17
                                                                balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * burnFee / 100)
                                                                if balanceOf[address(arg1)] > -arg2 + (arg2 * burnFee / 100) - 1:
                                                                    revert with 'NH{q', 17
                                                                if balanceOf[address(arg1)] + arg2 - (arg2 * burnFee / 100) < balanceOf[address(arg1)]:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * burnFee / 100)
                                                                emit Transfer((arg2 - (arg2 * burnFee / 100)), msg.sender, arg1);
                                                        else:
                                                            if arg2 and stor14 > -1 / arg2:
                                                                revert with 'NH{q', 17
                                                            if not arg2:
                                                                revert with 'NH{q', 18
                                                            if arg2 * stor14 / arg2 != stor14:
                                                                revert with 0, 'SafeMath: multiplication overflow'
                                                            _15166 = mem[64]
                                                            mem[64] = mem[64] + 64
                                                            mem[_15166] = 26
                                                            mem[_15166 + 32] = 'SafeMath: division by zero'
                                                            if not arg2:
                                                                _15313 = mem[64]
                                                                mem[64] = mem[64] + 64
                                                                mem[_15313] = 26
                                                                mem[_15313 + 32] = 'SafeMath: division by zero'
                                                                if arg2 * stor14 / 100 > -1:
                                                                    revert with 'NH{q', 17
                                                                if arg2 * stor14 / 100 < arg2 * stor14 / 100:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                _15425 = mem[64]
                                                                mem[64] = mem[64] + 64
                                                                mem[_15425] = 30
                                                                mem[_15425 + 32] = 'SafeMath: subtraction overflow'
                                                                if arg2 * stor14 / 100 > arg2:
                                                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                                                if arg2 < arg2 * stor14 / 100:
                                                                    revert with 'NH{q', 17
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                if not this.address:
                                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                                _15561 = mem[64]
                                                                mem[64] = mem[64] + 96
                                                                mem[_15561] = 38
                                                                mem[_15561 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                if arg2 * stor14 / 100 > balanceOf[address(msg.sender)]:
                                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 32
                                                                    mem[mem[64] + 36] = 38
                                                                    mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_15561 + 70 len 26]
                                                                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                                if balanceOf[address(msg.sender)] < arg2 * stor14 / 100:
                                                                    revert with 'NH{q', 17
                                                                balanceOf[address(msg.sender)] -= arg2 * stor14 / 100
                                                                if balanceOf[address(this.address)] > -(arg2 * stor14 / 100) - 1:
                                                                    revert with 'NH{q', 17
                                                                if balanceOf[address(this.address)] + (arg2 * stor14 / 100) < balanceOf[address(this.address)]:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                mem[0] = this.address
                                                                mem[32] = 9
                                                                balanceOf[address(this.address)] += arg2 * stor14 / 100
                                                                emit Transfer((arg2 * stor14 / 100), msg.sender, this.address);
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                _16003 = mem[64]
                                                                mem[64] = mem[64] + 96
                                                                mem[_16003] = 38
                                                                mem[_16003 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                if 0 > balanceOf[address(msg.sender)]:
                                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 32
                                                                    mem[mem[64] + 36] = 38
                                                                    mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_16003 + 70 len 26]
                                                                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                                if balanceOf[address(msg.sender)] < 0:
                                                                    revert with 'NH{q', 17
                                                                if balanceOf[57005] > -1:
                                                                    revert with 'NH{q', 17
                                                                if balanceOf[57005] < balanceOf[57005]:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                mem[0] = 57005
                                                                mem[32] = 9
                                                                emit Transfer(0, msg.sender, 57005);
                                                                emit TokenBurn(0, msg.sender);
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                if not arg1:
                                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                                _16869 = mem[64]
                                                                mem[64] = mem[64] + 96
                                                                mem[_16869] = 38
                                                                mem[_16869 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                if arg2 - (arg2 * stor14 / 100) > balanceOf[address(msg.sender)]:
                                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 32
                                                                    mem[mem[64] + 36] = 38
                                                                    mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_16869 + 70 len 26]
                                                                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                                if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor14 / 100):
                                                                    revert with 'NH{q', 17
                                                                balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor14 / 100)
                                                                if balanceOf[address(arg1)] > -arg2 + (arg2 * stor14 / 100) - 1:
                                                                    revert with 'NH{q', 17
                                                                if balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) < balanceOf[address(arg1)]:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100)
                                                                emit Transfer((arg2 - (arg2 * stor14 / 100)), msg.sender, arg1);
                                                            else:
                                                                if arg2 and burnFee > -1 / arg2:
                                                                    revert with 'NH{q', 17
                                                                if not arg2:
                                                                    revert with 'NH{q', 18
                                                                if arg2 * burnFee / arg2 != burnFee:
                                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                                _15370 = mem[64]
                                                                mem[64] = mem[64] + 64
                                                                mem[_15370] = 26
                                                                mem[_15370 + 32] = 'SafeMath: division by zero'
                                                                if arg2 * stor14 / 100 > -(arg2 * burnFee / 100) - 1:
                                                                    revert with 'NH{q', 17
                                                                if (arg2 * stor14 / 100) + (arg2 * burnFee / 100) < arg2 * stor14 / 100:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                _15592 = mem[64]
                                                                mem[64] = mem[64] + 64
                                                                mem[_15592] = 30
                                                                mem[_15592 + 32] = 'SafeMath: subtraction overflow'
                                                                if (arg2 * stor14 / 100) + (arg2 * burnFee / 100) > arg2:
                                                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                                                if arg2 < (arg2 * stor14 / 100) + (arg2 * burnFee / 100):
                                                                    revert with 'NH{q', 17
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                if not this.address:
                                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                                _15788 = mem[64]
                                                                mem[64] = mem[64] + 96
                                                                mem[_15788] = 38
                                                                mem[_15788 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                if arg2 * stor14 / 100 > balanceOf[address(msg.sender)]:
                                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 32
                                                                    mem[mem[64] + 36] = 38
                                                                    mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_15788 + 70 len 26]
                                                                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                                if balanceOf[address(msg.sender)] < arg2 * stor14 / 100:
                                                                    revert with 'NH{q', 17
                                                                balanceOf[address(msg.sender)] -= arg2 * stor14 / 100
                                                                if balanceOf[address(this.address)] > -(arg2 * stor14 / 100) - 1:
                                                                    revert with 'NH{q', 17
                                                                if balanceOf[address(this.address)] + (arg2 * stor14 / 100) < balanceOf[address(this.address)]:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                mem[0] = this.address
                                                                mem[32] = 9
                                                                balanceOf[address(this.address)] += arg2 * stor14 / 100
                                                                emit Transfer((arg2 * stor14 / 100), msg.sender, this.address);
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                _16193 = mem[64]
                                                                mem[64] = mem[64] + 96
                                                                mem[_16193] = 38
                                                                mem[_16193 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                if arg2 * burnFee / 100 > balanceOf[address(msg.sender)]:
                                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 32
                                                                    mem[mem[64] + 36] = 38
                                                                    mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_16193 + 70 len 26]
                                                                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                                if balanceOf[address(msg.sender)] < arg2 * burnFee / 100:
                                                                    revert with 'NH{q', 17
                                                                balanceOf[address(msg.sender)] -= arg2 * burnFee / 100
                                                                if balanceOf[57005] > -(arg2 * burnFee / 100) - 1:
                                                                    revert with 'NH{q', 17
                                                                if balanceOf[57005] + (arg2 * burnFee / 100) < balanceOf[57005]:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                mem[0] = 57005
                                                                mem[32] = 9
                                                                balanceOf[57005] += arg2 * burnFee / 100
                                                                emit Transfer((arg2 * burnFee / 100), msg.sender, 57005);
                                                                emit TokenBurn((arg2 * burnFee / 100), msg.sender);
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                if not arg1:
                                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                                _17064 = mem[64]
                                                                mem[64] = mem[64] + 96
                                                                mem[_17064] = 38
                                                                mem[_17064 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                if arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100) > balanceOf[address(msg.sender)]:
                                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 32
                                                                    mem[mem[64] + 36] = 38
                                                                    mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_17064 + 70 len 26]
                                                                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                                if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100):
                                                                    revert with 'NH{q', 17
                                                                balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor14 / 100) + (arg2 * burnFee / 100)
                                                                if balanceOf[address(arg1)] > -arg2 + (arg2 * stor14 / 100) + (arg2 * burnFee / 100) - 1:
                                                                    revert with 'NH{q', 17
                                                                if balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100) < balanceOf[address(arg1)]:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100)
                                                                emit Transfer((arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100)), msg.sender, arg1);
        else:
            if stor12[address(arg1)]:
                if arg1 != uniswapV2PairAddress:
                    if stor11[address(msg.sender)]:
                        if not msg.sender:
                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                        if not arg1:
                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                        if arg2 > balanceOf[address(msg.sender)]:
                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                        if balanceOf[address(msg.sender)] < arg2:
                            revert with 'NH{q', 17
                        balanceOf[address(msg.sender)] -= arg2
                        if balanceOf[address(arg1)] > -arg2 - 1:
                            revert with 'NH{q', 17
                        if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                            revert with 0, 'SafeMath: addition overflow'
                        balanceOf[address(arg1)] += arg2
                        emit Transfer(arg2, msg.sender, arg1);
                    else:
                        if stor11[address(arg1)]:
                            if not msg.sender:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                            if not arg1:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                            if arg2 > balanceOf[address(msg.sender)]:
                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                            if balanceOf[address(msg.sender)] < arg2:
                                revert with 'NH{q', 17
                            balanceOf[address(msg.sender)] -= arg2
                            if balanceOf[address(arg1)] > -arg2 - 1:
                                revert with 'NH{q', 17
                            if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                revert with 0, 'SafeMath: addition overflow'
                            balanceOf[address(arg1)] += arg2
                            emit Transfer(arg2, msg.sender, arg1);
                        else:
                            if totalFees <= 0:
                                if not msg.sender:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                if not arg1:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                if arg2 > balanceOf[address(msg.sender)]:
                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                                if balanceOf[address(msg.sender)] < arg2:
                                    revert with 'NH{q', 17
                                balanceOf[address(msg.sender)] -= arg2
                                if balanceOf[address(arg1)] > -arg2 - 1:
                                    revert with 'NH{q', 17
                                if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                balanceOf[address(arg1)] += arg2
                                emit Transfer(arg2, msg.sender, arg1);
                            else:
                                if not arg2:
                                    if not arg2:
                                        if 0 > arg2:
                                            revert with 0, 'SafeMath: subtraction overflow', 0
                                        if arg2 < 0:
                                            revert with 'NH{q', 17
                                        if not msg.sender:
                                            revert with 0, 'ERC20: transfer from the zero address'
                                        if not this.address:
                                            revert with 0, 'ERC20: transfer to the zero address'
                                        if 0 > balanceOf[address(msg.sender)]:
                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                        if balanceOf[address(msg.sender)] < 0:
                                            revert with 'NH{q', 17
                                        if balanceOf[address(this.address)] > -1:
                                            revert with 'NH{q', 17
                                        if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        emit Transfer(0, msg.sender, this.address);
                                        if not msg.sender:
                                            revert with 0, 'ERC20: transfer from the zero address'
                                        if 0 > balanceOf[address(msg.sender)]:
                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                        if balanceOf[address(msg.sender)] < 0:
                                            revert with 'NH{q', 17
                                        if balanceOf[57005] > -1:
                                            revert with 'NH{q', 17
                                        if balanceOf[57005] < balanceOf[57005]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        emit Transfer(0, msg.sender, 57005);
                                        emit TokenBurn(0, msg.sender);
                                        if not msg.sender:
                                            revert with 0, 'ERC20: transfer from the zero address'
                                        if not arg1:
                                            revert with 0, 'ERC20: transfer to the zero address'
                                        if arg2 > balanceOf[address(msg.sender)]:
                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                        if balanceOf[address(msg.sender)] < arg2:
                                            revert with 'NH{q', 17
                                        balanceOf[address(msg.sender)] -= arg2
                                        if balanceOf[address(arg1)] > -arg2 - 1:
                                            revert with 'NH{q', 17
                                        if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(arg1)] += arg2
                                        emit Transfer(arg2, msg.sender, arg1);
                                    else:
                                        if arg2 and burnFee > -1 / arg2:
                                            revert with 'NH{q', 17
                                        if not arg2:
                                            revert with 'NH{q', 18
                                        if arg2 * burnFee / arg2 != burnFee:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        if 0 > -(arg2 * burnFee / 100) - 1:
                                            revert with 'NH{q', 17
                                        if arg2 * burnFee / 100 < 0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if arg2 * burnFee / 100 > arg2:
                                            revert with 0, 'SafeMath: subtraction overflow', 0
                                        if arg2 < arg2 * burnFee / 100:
                                            revert with 'NH{q', 17
                                        if not msg.sender:
                                            revert with 0, 'ERC20: transfer from the zero address'
                                        if not this.address:
                                            revert with 0, 'ERC20: transfer to the zero address'
                                        if 0 > balanceOf[address(msg.sender)]:
                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                        if balanceOf[address(msg.sender)] < 0:
                                            revert with 'NH{q', 17
                                        if balanceOf[address(this.address)] > -1:
                                            revert with 'NH{q', 17
                                        if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        emit Transfer(0, msg.sender, this.address);
                                        if not msg.sender:
                                            revert with 0, 'ERC20: transfer from the zero address'
                                        if arg2 * burnFee / 100 > balanceOf[address(msg.sender)]:
                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                        if balanceOf[address(msg.sender)] < arg2 * burnFee / 100:
                                            revert with 'NH{q', 17
                                        balanceOf[address(msg.sender)] -= arg2 * burnFee / 100
                                        if balanceOf[57005] > -(arg2 * burnFee / 100) - 1:
                                            revert with 'NH{q', 17
                                        if balanceOf[57005] + (arg2 * burnFee / 100) < balanceOf[57005]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[57005] += arg2 * burnFee / 100
                                        emit Transfer((arg2 * burnFee / 100), msg.sender, 57005);
                                        emit TokenBurn((arg2 * burnFee / 100), msg.sender);
                                        if not msg.sender:
                                            revert with 0, 'ERC20: transfer from the zero address'
                                        if not arg1:
                                            revert with 0, 'ERC20: transfer to the zero address'
                                        if arg2 - (arg2 * burnFee / 100) > balanceOf[address(msg.sender)]:
                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                        if balanceOf[address(msg.sender)] < arg2 - (arg2 * burnFee / 100):
                                            revert with 'NH{q', 17
                                        balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * burnFee / 100)
                                        if balanceOf[address(arg1)] > -arg2 + (arg2 * burnFee / 100) - 1:
                                            revert with 'NH{q', 17
                                        if balanceOf[address(arg1)] + arg2 - (arg2 * burnFee / 100) < balanceOf[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * burnFee / 100)
                                        emit Transfer((arg2 - (arg2 * burnFee / 100)), msg.sender, arg1);
                                else:
                                    if arg2 and stor14 > -1 / arg2:
                                        revert with 'NH{q', 17
                                    if not arg2:
                                        revert with 'NH{q', 18
                                    if arg2 * stor14 / arg2 != stor14:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeMath: multiplication overflow'
                                    if not arg2:
                                        if arg2 * stor14 / 100 > -1:
                                            revert with 'NH{q', 17
                                        if arg2 * stor14 / 100 < arg2 * stor14 / 100:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if arg2 * stor14 / 100 > arg2:
                                            revert with 0, 'SafeMath: subtraction overflow', 0
                                        if arg2 < arg2 * stor14 / 100:
                                            revert with 'NH{q', 17
                                        if not msg.sender:
                                            revert with 0, 'ERC20: transfer from the zero address'
                                        if not this.address:
                                            revert with 0, 'ERC20: transfer to the zero address'
                                        if arg2 * stor14 / 100 > balanceOf[address(msg.sender)]:
                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                        if balanceOf[address(msg.sender)] < arg2 * stor14 / 100:
                                            revert with 'NH{q', 17
                                        balanceOf[address(msg.sender)] -= arg2 * stor14 / 100
                                        if balanceOf[address(this.address)] > -(arg2 * stor14 / 100) - 1:
                                            revert with 'NH{q', 17
                                        if balanceOf[address(this.address)] + (arg2 * stor14 / 100) < balanceOf[address(this.address)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(this.address)] += arg2 * stor14 / 100
                                        emit Transfer((arg2 * stor14 / 100), msg.sender, this.address);
                                        if not msg.sender:
                                            revert with 0, 'ERC20: transfer from the zero address'
                                        if 0 > balanceOf[address(msg.sender)]:
                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                        if balanceOf[address(msg.sender)] < 0:
                                            revert with 'NH{q', 17
                                        if balanceOf[57005] > -1:
                                            revert with 'NH{q', 17
                                        if balanceOf[57005] < balanceOf[57005]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        emit Transfer(0, msg.sender, 57005);
                                        emit TokenBurn(0, msg.sender);
                                        if not msg.sender:
                                            revert with 0, 'ERC20: transfer from the zero address'
                                        if not arg1:
                                            revert with 0, 'ERC20: transfer to the zero address'
                                        if arg2 - (arg2 * stor14 / 100) > balanceOf[address(msg.sender)]:
                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                        if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor14 / 100):
                                            revert with 'NH{q', 17
                                        balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor14 / 100)
                                        if balanceOf[address(arg1)] > -arg2 + (arg2 * stor14 / 100) - 1:
                                            revert with 'NH{q', 17
                                        if balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) < balanceOf[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100)
                                        emit Transfer((arg2 - (arg2 * stor14 / 100)), msg.sender, arg1);
                                    else:
                                        if arg2 and burnFee > -1 / arg2:
                                            revert with 'NH{q', 17
                                        if not arg2:
                                            revert with 'NH{q', 18
                                        if arg2 * burnFee / arg2 != burnFee:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        if arg2 * stor14 / 100 > -(arg2 * burnFee / 100) - 1:
                                            revert with 'NH{q', 17
                                        if (arg2 * stor14 / 100) + (arg2 * burnFee / 100) < arg2 * stor14 / 100:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if (arg2 * stor14 / 100) + (arg2 * burnFee / 100) > arg2:
                                            revert with 0, 'SafeMath: subtraction overflow', 0
                                        if arg2 < (arg2 * stor14 / 100) + (arg2 * burnFee / 100):
                                            revert with 'NH{q', 17
                                        if not msg.sender:
                                            revert with 0, 'ERC20: transfer from the zero address'
                                        if not this.address:
                                            revert with 0, 'ERC20: transfer to the zero address'
                                        if arg2 * stor14 / 100 > balanceOf[address(msg.sender)]:
                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                        if balanceOf[address(msg.sender)] < arg2 * stor14 / 100:
                                            revert with 'NH{q', 17
                                        balanceOf[address(msg.sender)] -= arg2 * stor14 / 100
                                        if balanceOf[address(this.address)] > -(arg2 * stor14 / 100) - 1:
                                            revert with 'NH{q', 17
                                        if balanceOf[address(this.address)] + (arg2 * stor14 / 100) < balanceOf[address(this.address)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(this.address)] += arg2 * stor14 / 100
                                        emit Transfer((arg2 * stor14 / 100), msg.sender, this.address);
                                        if not msg.sender:
                                            revert with 0, 'ERC20: transfer from the zero address'
                                        if arg2 * burnFee / 100 > balanceOf[address(msg.sender)]:
                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                        if balanceOf[address(msg.sender)] < arg2 * burnFee / 100:
                                            revert with 'NH{q', 17
                                        balanceOf[address(msg.sender)] -= arg2 * burnFee / 100
                                        if balanceOf[57005] > -(arg2 * burnFee / 100) - 1:
                                            revert with 'NH{q', 17
                                        if balanceOf[57005] + (arg2 * burnFee / 100) < balanceOf[57005]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[57005] += arg2 * burnFee / 100
                                        emit Transfer((arg2 * burnFee / 100), msg.sender, 57005);
                                        emit TokenBurn((arg2 * burnFee / 100), msg.sender);
                                        if not msg.sender:
                                            revert with 0, 'ERC20: transfer from the zero address'
                                        if not arg1:
                                            revert with 0, 'ERC20: transfer to the zero address'
                                        if arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100) > balanceOf[address(msg.sender)]:
                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                        if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100):
                                            revert with 'NH{q', 17
                                        balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor14 / 100) + (arg2 * burnFee / 100)
                                        if balanceOf[address(arg1)] > -arg2 + (arg2 * stor14 / 100) + (arg2 * burnFee / 100) - 1:
                                            revert with 'NH{q', 17
                                        if balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100) < balanceOf[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100)
                                        emit Transfer((arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100)), msg.sender, arg1);
                else:
                    if stor22:
                        if stor11[address(msg.sender)]:
                            if not msg.sender:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                            if not arg1:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                            if arg2 > balanceOf[address(msg.sender)]:
                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                            if balanceOf[address(msg.sender)] < arg2:
                                revert with 'NH{q', 17
                            balanceOf[address(msg.sender)] -= arg2
                            if balanceOf[address(arg1)] > -arg2 - 1:
                                revert with 'NH{q', 17
                            if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                revert with 0, 'SafeMath: addition overflow'
                            balanceOf[address(arg1)] += arg2
                            emit Transfer(arg2, msg.sender, arg1);
                        else:
                            if stor11[address(arg1)]:
                                if not msg.sender:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                if not arg1:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                if arg2 > balanceOf[address(msg.sender)]:
                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                                if balanceOf[address(msg.sender)] < arg2:
                                    revert with 'NH{q', 17
                                balanceOf[address(msg.sender)] -= arg2
                                if balanceOf[address(arg1)] > -arg2 - 1:
                                    revert with 'NH{q', 17
                                if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                balanceOf[address(arg1)] += arg2
                                emit Transfer(arg2, msg.sender, arg1);
                            else:
                                if totalFees <= 0:
                                    if not msg.sender:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                    if not arg1:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                    if arg2 > balanceOf[address(msg.sender)]:
                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                                    if balanceOf[address(msg.sender)] < arg2:
                                        revert with 'NH{q', 17
                                    balanceOf[address(msg.sender)] -= arg2
                                    if balanceOf[address(arg1)] > -arg2 - 1:
                                        revert with 'NH{q', 17
                                    if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(arg1)] += arg2
                                    emit Transfer(arg2, msg.sender, arg1);
                                else:
                                    if not arg2:
                                        if not arg2:
                                            if 0 > arg2:
                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                            if arg2 < 0:
                                                revert with 'NH{q', 17
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if not this.address:
                                                revert with 0, 'ERC20: transfer to the zero address'
                                            if 0 > balanceOf[address(msg.sender)]:
                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                            if balanceOf[address(msg.sender)] < 0:
                                                revert with 'NH{q', 17
                                            if balanceOf[address(this.address)] > -1:
                                                revert with 'NH{q', 17
                                            if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            emit Transfer(0, msg.sender, this.address);
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if 0 > balanceOf[address(msg.sender)]:
                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                            if balanceOf[address(msg.sender)] < 0:
                                                revert with 'NH{q', 17
                                            if balanceOf[57005] > -1:
                                                revert with 'NH{q', 17
                                            if balanceOf[57005] < balanceOf[57005]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            emit Transfer(0, msg.sender, 57005);
                                            emit TokenBurn(0, msg.sender);
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if not arg1:
                                                revert with 0, 'ERC20: transfer to the zero address'
                                            if arg2 > balanceOf[address(msg.sender)]:
                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                            if balanceOf[address(msg.sender)] < arg2:
                                                revert with 'NH{q', 17
                                            balanceOf[address(msg.sender)] -= arg2
                                            if balanceOf[address(arg1)] > -arg2 - 1:
                                                revert with 'NH{q', 17
                                            if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(arg1)] += arg2
                                            emit Transfer(arg2, msg.sender, arg1);
                                        else:
                                            if arg2 and burnFee > -1 / arg2:
                                                revert with 'NH{q', 17
                                            if not arg2:
                                                revert with 'NH{q', 18
                                            if arg2 * burnFee / arg2 != burnFee:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            if 0 > -(arg2 * burnFee / 100) - 1:
                                                revert with 'NH{q', 17
                                            if arg2 * burnFee / 100 < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if arg2 * burnFee / 100 > arg2:
                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                            if arg2 < arg2 * burnFee / 100:
                                                revert with 'NH{q', 17
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if not this.address:
                                                revert with 0, 'ERC20: transfer to the zero address'
                                            if 0 > balanceOf[address(msg.sender)]:
                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                            if balanceOf[address(msg.sender)] < 0:
                                                revert with 'NH{q', 17
                                            if balanceOf[address(this.address)] > -1:
                                                revert with 'NH{q', 17
                                            if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            emit Transfer(0, msg.sender, this.address);
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if arg2 * burnFee / 100 > balanceOf[address(msg.sender)]:
                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                            if balanceOf[address(msg.sender)] < arg2 * burnFee / 100:
                                                revert with 'NH{q', 17
                                            balanceOf[address(msg.sender)] -= arg2 * burnFee / 100
                                            if balanceOf[57005] > -(arg2 * burnFee / 100) - 1:
                                                revert with 'NH{q', 17
                                            if balanceOf[57005] + (arg2 * burnFee / 100) < balanceOf[57005]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[57005] += arg2 * burnFee / 100
                                            emit Transfer((arg2 * burnFee / 100), msg.sender, 57005);
                                            emit TokenBurn((arg2 * burnFee / 100), msg.sender);
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if not arg1:
                                                revert with 0, 'ERC20: transfer to the zero address'
                                            if arg2 - (arg2 * burnFee / 100) > balanceOf[address(msg.sender)]:
                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                            if balanceOf[address(msg.sender)] < arg2 - (arg2 * burnFee / 100):
                                                revert with 'NH{q', 17
                                            balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * burnFee / 100)
                                            if balanceOf[address(arg1)] > -arg2 + (arg2 * burnFee / 100) - 1:
                                                revert with 'NH{q', 17
                                            if balanceOf[address(arg1)] + arg2 - (arg2 * burnFee / 100) < balanceOf[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * burnFee / 100)
                                            emit Transfer((arg2 - (arg2 * burnFee / 100)), msg.sender, arg1);
                                    else:
                                        if arg2 and stor14 > -1 / arg2:
                                            revert with 'NH{q', 17
                                        if not arg2:
                                            revert with 'NH{q', 18
                                        if arg2 * stor14 / arg2 != stor14:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeMath: multiplication overflow'
                                        if not arg2:
                                            if arg2 * stor14 / 100 > -1:
                                                revert with 'NH{q', 17
                                            if arg2 * stor14 / 100 < arg2 * stor14 / 100:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if arg2 * stor14 / 100 > arg2:
                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                            if arg2 < arg2 * stor14 / 100:
                                                revert with 'NH{q', 17
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if not this.address:
                                                revert with 0, 'ERC20: transfer to the zero address'
                                            if arg2 * stor14 / 100 > balanceOf[address(msg.sender)]:
                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                            if balanceOf[address(msg.sender)] < arg2 * stor14 / 100:
                                                revert with 'NH{q', 17
                                            balanceOf[address(msg.sender)] -= arg2 * stor14 / 100
                                            if balanceOf[address(this.address)] > -(arg2 * stor14 / 100) - 1:
                                                revert with 'NH{q', 17
                                            if balanceOf[address(this.address)] + (arg2 * stor14 / 100) < balanceOf[address(this.address)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(this.address)] += arg2 * stor14 / 100
                                            emit Transfer((arg2 * stor14 / 100), msg.sender, this.address);
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if 0 > balanceOf[address(msg.sender)]:
                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                            if balanceOf[address(msg.sender)] < 0:
                                                revert with 'NH{q', 17
                                            if balanceOf[57005] > -1:
                                                revert with 'NH{q', 17
                                            if balanceOf[57005] < balanceOf[57005]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            emit Transfer(0, msg.sender, 57005);
                                            emit TokenBurn(0, msg.sender);
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if not arg1:
                                                revert with 0, 'ERC20: transfer to the zero address'
                                            if arg2 - (arg2 * stor14 / 100) > balanceOf[address(msg.sender)]:
                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                            if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor14 / 100):
                                                revert with 'NH{q', 17
                                            balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor14 / 100)
                                            if balanceOf[address(arg1)] > -arg2 + (arg2 * stor14 / 100) - 1:
                                                revert with 'NH{q', 17
                                            if balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) < balanceOf[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100)
                                            emit Transfer((arg2 - (arg2 * stor14 / 100)), msg.sender, arg1);
                                        else:
                                            if arg2 and burnFee > -1 / arg2:
                                                revert with 'NH{q', 17
                                            if not arg2:
                                                revert with 'NH{q', 18
                                            if arg2 * burnFee / arg2 != burnFee:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            if arg2 * stor14 / 100 > -(arg2 * burnFee / 100) - 1:
                                                revert with 'NH{q', 17
                                            if (arg2 * stor14 / 100) + (arg2 * burnFee / 100) < arg2 * stor14 / 100:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if (arg2 * stor14 / 100) + (arg2 * burnFee / 100) > arg2:
                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                            if arg2 < (arg2 * stor14 / 100) + (arg2 * burnFee / 100):
                                                revert with 'NH{q', 17
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if not this.address:
                                                revert with 0, 'ERC20: transfer to the zero address'
                                            if arg2 * stor14 / 100 > balanceOf[address(msg.sender)]:
                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                            if balanceOf[address(msg.sender)] < arg2 * stor14 / 100:
                                                revert with 'NH{q', 17
                                            balanceOf[address(msg.sender)] -= arg2 * stor14 / 100
                                            if balanceOf[address(this.address)] > -(arg2 * stor14 / 100) - 1:
                                                revert with 'NH{q', 17
                                            if balanceOf[address(this.address)] + (arg2 * stor14 / 100) < balanceOf[address(this.address)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(this.address)] += arg2 * stor14 / 100
                                            emit Transfer((arg2 * stor14 / 100), msg.sender, this.address);
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if arg2 * burnFee / 100 > balanceOf[address(msg.sender)]:
                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                            if balanceOf[address(msg.sender)] < arg2 * burnFee / 100:
                                                revert with 'NH{q', 17
                                            balanceOf[address(msg.sender)] -= arg2 * burnFee / 100
                                            if balanceOf[57005] > -(arg2 * burnFee / 100) - 1:
                                                revert with 'NH{q', 17
                                            if balanceOf[57005] + (arg2 * burnFee / 100) < balanceOf[57005]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[57005] += arg2 * burnFee / 100
                                            emit Transfer((arg2 * burnFee / 100), msg.sender, 57005);
                                            emit TokenBurn((arg2 * burnFee / 100), msg.sender);
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if not arg1:
                                                revert with 0, 'ERC20: transfer to the zero address'
                                            if arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100) > balanceOf[address(msg.sender)]:
                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                            if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100):
                                                revert with 'NH{q', 17
                                            balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor14 / 100) + (arg2 * burnFee / 100)
                                            if balanceOf[address(arg1)] > -arg2 + (arg2 * stor14 / 100) + (arg2 * burnFee / 100) - 1:
                                                revert with 'NH{q', 17
                                            if balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100) < balanceOf[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100)
                                            emit Transfer((arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100)), msg.sender, arg1);
                    else:
                        if balanceOf[address(this.address)] < liquifyThreshhold:
                            if stor11[address(msg.sender)]:
                                if not msg.sender:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                if not arg1:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                if arg2 > balanceOf[address(msg.sender)]:
                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                                if balanceOf[address(msg.sender)] < arg2:
                                    revert with 'NH{q', 17
                                balanceOf[address(msg.sender)] -= arg2
                                if balanceOf[address(arg1)] > -arg2 - 1:
                                    revert with 'NH{q', 17
                                if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                balanceOf[address(arg1)] += arg2
                                emit Transfer(arg2, msg.sender, arg1);
                            else:
                                if stor11[address(arg1)]:
                                    if not msg.sender:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                    if not arg1:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                    if arg2 > balanceOf[address(msg.sender)]:
                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                                    if balanceOf[address(msg.sender)] < arg2:
                                        revert with 'NH{q', 17
                                    balanceOf[address(msg.sender)] -= arg2
                                    if balanceOf[address(arg1)] > -arg2 - 1:
                                        revert with 'NH{q', 17
                                    if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(arg1)] += arg2
                                    emit Transfer(arg2, msg.sender, arg1);
                                else:
                                    if totalFees <= 0:
                                        if not msg.sender:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                        if not arg1:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                        if arg2 > balanceOf[address(msg.sender)]:
                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                                        if balanceOf[address(msg.sender)] < arg2:
                                            revert with 'NH{q', 17
                                        balanceOf[address(msg.sender)] -= arg2
                                        if balanceOf[address(arg1)] > -arg2 - 1:
                                            revert with 'NH{q', 17
                                        if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(arg1)] += arg2
                                        emit Transfer(arg2, msg.sender, arg1);
                                    else:
                                        if not arg2:
                                            if not arg2:
                                                if 0 > arg2:
                                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                                if arg2 < 0:
                                                    revert with 'NH{q', 17
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if not this.address:
                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                if 0 > balanceOf[address(msg.sender)]:
                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                                if balanceOf[address(msg.sender)] < 0:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(this.address)] > -1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                emit Transfer(0, msg.sender, this.address);
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if 0 > balanceOf[address(msg.sender)]:
                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                                if balanceOf[address(msg.sender)] < 0:
                                                    revert with 'NH{q', 17
                                                if balanceOf[57005] > -1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[57005] < balanceOf[57005]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                emit Transfer(0, msg.sender, 57005);
                                                emit TokenBurn(0, msg.sender);
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if not arg1:
                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                if arg2 > balanceOf[address(msg.sender)]:
                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                                if balanceOf[address(msg.sender)] < arg2:
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] -= arg2
                                                if balanceOf[address(arg1)] > -arg2 - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                balanceOf[address(arg1)] += arg2
                                                emit Transfer(arg2, msg.sender, arg1);
                                            else:
                                                if arg2 and burnFee > -1 / arg2:
                                                    revert with 'NH{q', 17
                                                if not arg2:
                                                    revert with 'NH{q', 18
                                                if arg2 * burnFee / arg2 != burnFee:
                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                if 0 > -(arg2 * burnFee / 100) - 1:
                                                    revert with 'NH{q', 17
                                                if arg2 * burnFee / 100 < 0:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if arg2 * burnFee / 100 > arg2:
                                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                                if arg2 < arg2 * burnFee / 100:
                                                    revert with 'NH{q', 17
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if not this.address:
                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                if 0 > balanceOf[address(msg.sender)]:
                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                                if balanceOf[address(msg.sender)] < 0:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(this.address)] > -1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                emit Transfer(0, msg.sender, this.address);
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if arg2 * burnFee / 100 > balanceOf[address(msg.sender)]:
                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                                if balanceOf[address(msg.sender)] < arg2 * burnFee / 100:
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] -= arg2 * burnFee / 100
                                                if balanceOf[57005] > -(arg2 * burnFee / 100) - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[57005] + (arg2 * burnFee / 100) < balanceOf[57005]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                balanceOf[57005] += arg2 * burnFee / 100
                                                emit Transfer((arg2 * burnFee / 100), msg.sender, 57005);
                                                emit TokenBurn((arg2 * burnFee / 100), msg.sender);
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if not arg1:
                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                if arg2 - (arg2 * burnFee / 100) > balanceOf[address(msg.sender)]:
                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                                if balanceOf[address(msg.sender)] < arg2 - (arg2 * burnFee / 100):
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * burnFee / 100)
                                                if balanceOf[address(arg1)] > -arg2 + (arg2 * burnFee / 100) - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(arg1)] + arg2 - (arg2 * burnFee / 100) < balanceOf[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * burnFee / 100)
                                                emit Transfer((arg2 - (arg2 * burnFee / 100)), msg.sender, arg1);
                                        else:
                                            if arg2 and stor14 > -1 / arg2:
                                                revert with 'NH{q', 17
                                            if not arg2:
                                                revert with 'NH{q', 18
                                            if arg2 * stor14 / arg2 != stor14:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeMath: multiplication overflow'
                                            if not arg2:
                                                if arg2 * stor14 / 100 > -1:
                                                    revert with 'NH{q', 17
                                                if arg2 * stor14 / 100 < arg2 * stor14 / 100:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if arg2 * stor14 / 100 > arg2:
                                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                                if arg2 < arg2 * stor14 / 100:
                                                    revert with 'NH{q', 17
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if not this.address:
                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                if arg2 * stor14 / 100 > balanceOf[address(msg.sender)]:
                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                                if balanceOf[address(msg.sender)] < arg2 * stor14 / 100:
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] -= arg2 * stor14 / 100
                                                if balanceOf[address(this.address)] > -(arg2 * stor14 / 100) - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(this.address)] + (arg2 * stor14 / 100) < balanceOf[address(this.address)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                balanceOf[address(this.address)] += arg2 * stor14 / 100
                                                emit Transfer((arg2 * stor14 / 100), msg.sender, this.address);
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if 0 > balanceOf[address(msg.sender)]:
                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                                if balanceOf[address(msg.sender)] < 0:
                                                    revert with 'NH{q', 17
                                                if balanceOf[57005] > -1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[57005] < balanceOf[57005]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                emit Transfer(0, msg.sender, 57005);
                                                emit TokenBurn(0, msg.sender);
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if not arg1:
                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                if arg2 - (arg2 * stor14 / 100) > balanceOf[address(msg.sender)]:
                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                                if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor14 / 100):
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor14 / 100)
                                                if balanceOf[address(arg1)] > -arg2 + (arg2 * stor14 / 100) - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) < balanceOf[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100)
                                                emit Transfer((arg2 - (arg2 * stor14 / 100)), msg.sender, arg1);
                                            else:
                                                if arg2 and burnFee > -1 / arg2:
                                                    revert with 'NH{q', 17
                                                if not arg2:
                                                    revert with 'NH{q', 18
                                                if arg2 * burnFee / arg2 != burnFee:
                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                if arg2 * stor14 / 100 > -(arg2 * burnFee / 100) - 1:
                                                    revert with 'NH{q', 17
                                                if (arg2 * stor14 / 100) + (arg2 * burnFee / 100) < arg2 * stor14 / 100:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if (arg2 * stor14 / 100) + (arg2 * burnFee / 100) > arg2:
                                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                                if arg2 < (arg2 * stor14 / 100) + (arg2 * burnFee / 100):
                                                    revert with 'NH{q', 17
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if not this.address:
                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                if arg2 * stor14 / 100 > balanceOf[address(msg.sender)]:
                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                                if balanceOf[address(msg.sender)] < arg2 * stor14 / 100:
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] -= arg2 * stor14 / 100
                                                if balanceOf[address(this.address)] > -(arg2 * stor14 / 100) - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(this.address)] + (arg2 * stor14 / 100) < balanceOf[address(this.address)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                balanceOf[address(this.address)] += arg2 * stor14 / 100
                                                emit Transfer((arg2 * stor14 / 100), msg.sender, this.address);
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if arg2 * burnFee / 100 > balanceOf[address(msg.sender)]:
                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                                if balanceOf[address(msg.sender)] < arg2 * burnFee / 100:
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] -= arg2 * burnFee / 100
                                                if balanceOf[57005] > -(arg2 * burnFee / 100) - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[57005] + (arg2 * burnFee / 100) < balanceOf[57005]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                balanceOf[57005] += arg2 * burnFee / 100
                                                emit Transfer((arg2 * burnFee / 100), msg.sender, 57005);
                                                emit TokenBurn((arg2 * burnFee / 100), msg.sender);
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if not arg1:
                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                if arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100) > balanceOf[address(msg.sender)]:
                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                                if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100):
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor14 / 100) + (arg2 * burnFee / 100)
                                                if balanceOf[address(arg1)] > -arg2 + (arg2 * stor14 / 100) + (arg2 * burnFee / 100) - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100) < balanceOf[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100)
                                                emit Transfer((arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100)), msg.sender, arg1);
                        else:
                            if stor14 <= 0:
                                if stor11[address(msg.sender)]:
                                    if not msg.sender:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                    if not arg1:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                    if arg2 > balanceOf[address(msg.sender)]:
                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                                    if balanceOf[address(msg.sender)] < arg2:
                                        revert with 'NH{q', 17
                                    balanceOf[address(msg.sender)] -= arg2
                                    if balanceOf[address(arg1)] > -arg2 - 1:
                                        revert with 'NH{q', 17
                                    if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(arg1)] += arg2
                                    emit Transfer(arg2, msg.sender, arg1);
                                else:
                                    if stor11[address(arg1)]:
                                        if not msg.sender:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                        if not arg1:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                        if arg2 > balanceOf[address(msg.sender)]:
                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                                        if balanceOf[address(msg.sender)] < arg2:
                                            revert with 'NH{q', 17
                                        balanceOf[address(msg.sender)] -= arg2
                                        if balanceOf[address(arg1)] > -arg2 - 1:
                                            revert with 'NH{q', 17
                                        if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(arg1)] += arg2
                                        emit Transfer(arg2, msg.sender, arg1);
                                    else:
                                        if totalFees <= 0:
                                            if not msg.sender:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                            if not arg1:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                            if arg2 > balanceOf[address(msg.sender)]:
                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                                            if balanceOf[address(msg.sender)] < arg2:
                                                revert with 'NH{q', 17
                                            balanceOf[address(msg.sender)] -= arg2
                                            if balanceOf[address(arg1)] > -arg2 - 1:
                                                revert with 'NH{q', 17
                                            if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(arg1)] += arg2
                                            emit Transfer(arg2, msg.sender, arg1);
                                        else:
                                            if not arg2:
                                                if not arg2:
                                                    if 0 > arg2:
                                                        revert with 0, 'SafeMath: subtraction overflow', 0
                                                    if arg2 < 0:
                                                        revert with 'NH{q', 17
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if not this.address:
                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                    if 0 > balanceOf[address(msg.sender)]:
                                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                                    if balanceOf[address(msg.sender)] < 0:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(this.address)] > -1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    emit Transfer(0, msg.sender, this.address);
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if 0 > balanceOf[address(msg.sender)]:
                                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                                    if balanceOf[address(msg.sender)] < 0:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[57005] > -1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[57005] < balanceOf[57005]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    emit Transfer(0, msg.sender, 57005);
                                                    emit TokenBurn(0, msg.sender);
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if not arg1:
                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                    if arg2 > balanceOf[address(msg.sender)]:
                                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                                    if balanceOf[address(msg.sender)] < arg2:
                                                        revert with 'NH{q', 17
                                                    balanceOf[address(msg.sender)] -= arg2
                                                    if balanceOf[address(arg1)] > -arg2 - 1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    balanceOf[address(arg1)] += arg2
                                                    emit Transfer(arg2, msg.sender, arg1);
                                                else:
                                                    if arg2 and burnFee > -1 / arg2:
                                                        revert with 'NH{q', 17
                                                    if not arg2:
                                                        revert with 'NH{q', 18
                                                    if arg2 * burnFee / arg2 != burnFee:
                                                        revert with 0, 'SafeMath: multiplication overflow'
                                                    if 0 > -(arg2 * burnFee / 100) - 1:
                                                        revert with 'NH{q', 17
                                                    if arg2 * burnFee / 100 < 0:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if arg2 * burnFee / 100 > arg2:
                                                        revert with 0, 'SafeMath: subtraction overflow', 0
                                                    if arg2 < arg2 * burnFee / 100:
                                                        revert with 'NH{q', 17
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if not this.address:
                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                    if 0 > balanceOf[address(msg.sender)]:
                                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                                    if balanceOf[address(msg.sender)] < 0:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(this.address)] > -1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    emit Transfer(0, msg.sender, this.address);
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if arg2 * burnFee / 100 > balanceOf[address(msg.sender)]:
                                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                                    if balanceOf[address(msg.sender)] < arg2 * burnFee / 100:
                                                        revert with 'NH{q', 17
                                                    balanceOf[address(msg.sender)] -= arg2 * burnFee / 100
                                                    if balanceOf[57005] > -(arg2 * burnFee / 100) - 1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[57005] + (arg2 * burnFee / 100) < balanceOf[57005]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    balanceOf[57005] += arg2 * burnFee / 100
                                                    emit Transfer((arg2 * burnFee / 100), msg.sender, 57005);
                                                    emit TokenBurn((arg2 * burnFee / 100), msg.sender);
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if not arg1:
                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                    if arg2 - (arg2 * burnFee / 100) > balanceOf[address(msg.sender)]:
                                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                                    if balanceOf[address(msg.sender)] < arg2 - (arg2 * burnFee / 100):
                                                        revert with 'NH{q', 17
                                                    balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * burnFee / 100)
                                                    if balanceOf[address(arg1)] > -arg2 + (arg2 * burnFee / 100) - 1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(arg1)] + arg2 - (arg2 * burnFee / 100) < balanceOf[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * burnFee / 100)
                                                    emit Transfer((arg2 - (arg2 * burnFee / 100)), msg.sender, arg1);
                                            else:
                                                if arg2 and stor14 > -1 / arg2:
                                                    revert with 'NH{q', 17
                                                if not arg2:
                                                    revert with 'NH{q', 18
                                                if arg2 * stor14 / arg2 != stor14:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeMath: multiplication overflow'
                                                if not arg2:
                                                    if arg2 * stor14 / 100 > -1:
                                                        revert with 'NH{q', 17
                                                    if arg2 * stor14 / 100 < arg2 * stor14 / 100:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if arg2 * stor14 / 100 > arg2:
                                                        revert with 0, 'SafeMath: subtraction overflow', 0
                                                    if arg2 < arg2 * stor14 / 100:
                                                        revert with 'NH{q', 17
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if not this.address:
                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                    if arg2 * stor14 / 100 > balanceOf[address(msg.sender)]:
                                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                                    if balanceOf[address(msg.sender)] < arg2 * stor14 / 100:
                                                        revert with 'NH{q', 17
                                                    balanceOf[address(msg.sender)] -= arg2 * stor14 / 100
                                                    if balanceOf[address(this.address)] > -(arg2 * stor14 / 100) - 1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(this.address)] + (arg2 * stor14 / 100) < balanceOf[address(this.address)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    balanceOf[address(this.address)] += arg2 * stor14 / 100
                                                    emit Transfer((arg2 * stor14 / 100), msg.sender, this.address);
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if 0 > balanceOf[address(msg.sender)]:
                                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                                    if balanceOf[address(msg.sender)] < 0:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[57005] > -1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[57005] < balanceOf[57005]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    emit Transfer(0, msg.sender, 57005);
                                                    emit TokenBurn(0, msg.sender);
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if not arg1:
                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                    if arg2 - (arg2 * stor14 / 100) > balanceOf[address(msg.sender)]:
                                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                                    if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor14 / 100):
                                                        revert with 'NH{q', 17
                                                    balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor14 / 100)
                                                    if balanceOf[address(arg1)] > -arg2 + (arg2 * stor14 / 100) - 1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) < balanceOf[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100)
                                                    emit Transfer((arg2 - (arg2 * stor14 / 100)), msg.sender, arg1);
                                                else:
                                                    if arg2 and burnFee > -1 / arg2:
                                                        revert with 'NH{q', 17
                                                    if not arg2:
                                                        revert with 'NH{q', 18
                                                    if arg2 * burnFee / arg2 != burnFee:
                                                        revert with 0, 'SafeMath: multiplication overflow'
                                                    if arg2 * stor14 / 100 > -(arg2 * burnFee / 100) - 1:
                                                        revert with 'NH{q', 17
                                                    if (arg2 * stor14 / 100) + (arg2 * burnFee / 100) < arg2 * stor14 / 100:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if (arg2 * stor14 / 100) + (arg2 * burnFee / 100) > arg2:
                                                        revert with 0, 'SafeMath: subtraction overflow', 0
                                                    if arg2 < (arg2 * stor14 / 100) + (arg2 * burnFee / 100):
                                                        revert with 'NH{q', 17
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if not this.address:
                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                    if arg2 * stor14 / 100 > balanceOf[address(msg.sender)]:
                                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                                    if balanceOf[address(msg.sender)] < arg2 * stor14 / 100:
                                                        revert with 'NH{q', 17
                                                    balanceOf[address(msg.sender)] -= arg2 * stor14 / 100
                                                    if balanceOf[address(this.address)] > -(arg2 * stor14 / 100) - 1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(this.address)] + (arg2 * stor14 / 100) < balanceOf[address(this.address)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    balanceOf[address(this.address)] += arg2 * stor14 / 100
                                                    emit Transfer((arg2 * stor14 / 100), msg.sender, this.address);
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if arg2 * burnFee / 100 > balanceOf[address(msg.sender)]:
                                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                                    if balanceOf[address(msg.sender)] < arg2 * burnFee / 100:
                                                        revert with 'NH{q', 17
                                                    balanceOf[address(msg.sender)] -= arg2 * burnFee / 100
                                                    if balanceOf[57005] > -(arg2 * burnFee / 100) - 1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[57005] + (arg2 * burnFee / 100) < balanceOf[57005]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    balanceOf[57005] += arg2 * burnFee / 100
                                                    emit Transfer((arg2 * burnFee / 100), msg.sender, 57005);
                                                    emit TokenBurn((arg2 * burnFee / 100), msg.sender);
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if not arg1:
                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                    if arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100) > balanceOf[address(msg.sender)]:
                                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                                    if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100):
                                                        revert with 'NH{q', 17
                                                    balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor14 / 100) + (arg2 * burnFee / 100)
                                                    if balanceOf[address(arg1)] > -arg2 + (arg2 * stor14 / 100) + (arg2 * burnFee / 100) - 1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100) < balanceOf[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100)
                                                    emit Transfer((arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100)), msg.sender, arg1);
                            else:
                                if msg.sender == owner:
                                    if stor11[address(msg.sender)]:
                                        if not msg.sender:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                        if not arg1:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                        if arg2 > balanceOf[address(msg.sender)]:
                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                                        if balanceOf[address(msg.sender)] < arg2:
                                            revert with 'NH{q', 17
                                        balanceOf[address(msg.sender)] -= arg2
                                        if balanceOf[address(arg1)] > -arg2 - 1:
                                            revert with 'NH{q', 17
                                        if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(arg1)] += arg2
                                        emit Transfer(arg2, msg.sender, arg1);
                                    else:
                                        if stor11[address(arg1)]:
                                            if not msg.sender:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                            if not arg1:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                            if arg2 > balanceOf[address(msg.sender)]:
                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                                            if balanceOf[address(msg.sender)] < arg2:
                                                revert with 'NH{q', 17
                                            balanceOf[address(msg.sender)] -= arg2
                                            if balanceOf[address(arg1)] > -arg2 - 1:
                                                revert with 'NH{q', 17
                                            if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(arg1)] += arg2
                                            emit Transfer(arg2, msg.sender, arg1);
                                        else:
                                            if totalFees <= 0:
                                                if not msg.sender:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                if not arg1:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                if arg2 > balanceOf[address(msg.sender)]:
                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                                                if balanceOf[address(msg.sender)] < arg2:
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] -= arg2
                                                if balanceOf[address(arg1)] > -arg2 - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                balanceOf[address(arg1)] += arg2
                                                emit Transfer(arg2, msg.sender, arg1);
                                            else:
                                                if not arg2:
                                                    if not arg2:
                                                        if 0 > arg2:
                                                            revert with 0, 'SafeMath: subtraction overflow', 0
                                                        if arg2 < 0:
                                                            revert with 'NH{q', 17
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if not this.address:
                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                        if 0 > balanceOf[address(msg.sender)]:
                                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                                        if balanceOf[address(msg.sender)] < 0:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(this.address)] > -1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        emit Transfer(0, msg.sender, this.address);
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if 0 > balanceOf[address(msg.sender)]:
                                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                                        if balanceOf[address(msg.sender)] < 0:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[57005] > -1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[57005] < balanceOf[57005]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        emit Transfer(0, msg.sender, 57005);
                                                        emit TokenBurn(0, msg.sender);
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if not arg1:
                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                        if arg2 > balanceOf[address(msg.sender)]:
                                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                                        if balanceOf[address(msg.sender)] < arg2:
                                                            revert with 'NH{q', 17
                                                        balanceOf[address(msg.sender)] -= arg2
                                                        if balanceOf[address(arg1)] > -arg2 - 1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        balanceOf[address(arg1)] += arg2
                                                        emit Transfer(arg2, msg.sender, arg1);
                                                    else:
                                                        if arg2 and burnFee > -1 / arg2:
                                                            revert with 'NH{q', 17
                                                        if not arg2:
                                                            revert with 'NH{q', 18
                                                        if arg2 * burnFee / arg2 != burnFee:
                                                            revert with 0, 'SafeMath: multiplication overflow'
                                                        if 0 > -(arg2 * burnFee / 100) - 1:
                                                            revert with 'NH{q', 17
                                                        if arg2 * burnFee / 100 < 0:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        if arg2 * burnFee / 100 > arg2:
                                                            revert with 0, 'SafeMath: subtraction overflow', 0
                                                        if arg2 < arg2 * burnFee / 100:
                                                            revert with 'NH{q', 17
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if not this.address:
                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                        if 0 > balanceOf[address(msg.sender)]:
                                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                                        if balanceOf[address(msg.sender)] < 0:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(this.address)] > -1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        emit Transfer(0, msg.sender, this.address);
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if arg2 * burnFee / 100 > balanceOf[address(msg.sender)]:
                                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                                        if balanceOf[address(msg.sender)] < arg2 * burnFee / 100:
                                                            revert with 'NH{q', 17
                                                        balanceOf[address(msg.sender)] -= arg2 * burnFee / 100
                                                        if balanceOf[57005] > -(arg2 * burnFee / 100) - 1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[57005] + (arg2 * burnFee / 100) < balanceOf[57005]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        balanceOf[57005] += arg2 * burnFee / 100
                                                        emit Transfer((arg2 * burnFee / 100), msg.sender, 57005);
                                                        emit TokenBurn((arg2 * burnFee / 100), msg.sender);
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if not arg1:
                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                        if arg2 - (arg2 * burnFee / 100) > balanceOf[address(msg.sender)]:
                                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                                        if balanceOf[address(msg.sender)] < arg2 - (arg2 * burnFee / 100):
                                                            revert with 'NH{q', 17
                                                        balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * burnFee / 100)
                                                        if balanceOf[address(arg1)] > -arg2 + (arg2 * burnFee / 100) - 1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(arg1)] + arg2 - (arg2 * burnFee / 100) < balanceOf[address(arg1)]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * burnFee / 100)
                                                        emit Transfer((arg2 - (arg2 * burnFee / 100)), msg.sender, arg1);
                                                else:
                                                    if arg2 and stor14 > -1 / arg2:
                                                        revert with 'NH{q', 17
                                                    if not arg2:
                                                        revert with 'NH{q', 18
                                                    if arg2 * stor14 / arg2 != stor14:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeMath: multiplication overflow'
                                                    if not arg2:
                                                        if arg2 * stor14 / 100 > -1:
                                                            revert with 'NH{q', 17
                                                        if arg2 * stor14 / 100 < arg2 * stor14 / 100:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        if arg2 * stor14 / 100 > arg2:
                                                            revert with 0, 'SafeMath: subtraction overflow', 0
                                                        if arg2 < arg2 * stor14 / 100:
                                                            revert with 'NH{q', 17
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if not this.address:
                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                        if arg2 * stor14 / 100 > balanceOf[address(msg.sender)]:
                                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                                        if balanceOf[address(msg.sender)] < arg2 * stor14 / 100:
                                                            revert with 'NH{q', 17
                                                        balanceOf[address(msg.sender)] -= arg2 * stor14 / 100
                                                        if balanceOf[address(this.address)] > -(arg2 * stor14 / 100) - 1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(this.address)] + (arg2 * stor14 / 100) < balanceOf[address(this.address)]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        balanceOf[address(this.address)] += arg2 * stor14 / 100
                                                        emit Transfer((arg2 * stor14 / 100), msg.sender, this.address);
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if 0 > balanceOf[address(msg.sender)]:
                                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                                        if balanceOf[address(msg.sender)] < 0:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[57005] > -1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[57005] < balanceOf[57005]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        emit Transfer(0, msg.sender, 57005);
                                                        emit TokenBurn(0, msg.sender);
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if not arg1:
                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                        if arg2 - (arg2 * stor14 / 100) > balanceOf[address(msg.sender)]:
                                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                                        if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor14 / 100):
                                                            revert with 'NH{q', 17
                                                        balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor14 / 100)
                                                        if balanceOf[address(arg1)] > -arg2 + (arg2 * stor14 / 100) - 1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) < balanceOf[address(arg1)]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100)
                                                        emit Transfer((arg2 - (arg2 * stor14 / 100)), msg.sender, arg1);
                                                    else:
                                                        if arg2 and burnFee > -1 / arg2:
                                                            revert with 'NH{q', 17
                                                        if not arg2:
                                                            revert with 'NH{q', 18
                                                        if arg2 * burnFee / arg2 != burnFee:
                                                            revert with 0, 'SafeMath: multiplication overflow'
                                                        if arg2 * stor14 / 100 > -(arg2 * burnFee / 100) - 1:
                                                            revert with 'NH{q', 17
                                                        if (arg2 * stor14 / 100) + (arg2 * burnFee / 100) < arg2 * stor14 / 100:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        if (arg2 * stor14 / 100) + (arg2 * burnFee / 100) > arg2:
                                                            revert with 0, 'SafeMath: subtraction overflow', 0
                                                        if arg2 < (arg2 * stor14 / 100) + (arg2 * burnFee / 100):
                                                            revert with 'NH{q', 17
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if not this.address:
                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                        if arg2 * stor14 / 100 > balanceOf[address(msg.sender)]:
                                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                                        if balanceOf[address(msg.sender)] < arg2 * stor14 / 100:
                                                            revert with 'NH{q', 17
                                                        balanceOf[address(msg.sender)] -= arg2 * stor14 / 100
                                                        if balanceOf[address(this.address)] > -(arg2 * stor14 / 100) - 1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(this.address)] + (arg2 * stor14 / 100) < balanceOf[address(this.address)]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        balanceOf[address(this.address)] += arg2 * stor14 / 100
                                                        emit Transfer((arg2 * stor14 / 100), msg.sender, this.address);
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if arg2 * burnFee / 100 > balanceOf[address(msg.sender)]:
                                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                                        if balanceOf[address(msg.sender)] < arg2 * burnFee / 100:
                                                            revert with 'NH{q', 17
                                                        balanceOf[address(msg.sender)] -= arg2 * burnFee / 100
                                                        if balanceOf[57005] > -(arg2 * burnFee / 100) - 1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[57005] + (arg2 * burnFee / 100) < balanceOf[57005]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        balanceOf[57005] += arg2 * burnFee / 100
                                                        emit Transfer((arg2 * burnFee / 100), msg.sender, 57005);
                                                        emit TokenBurn((arg2 * burnFee / 100), msg.sender);
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if not arg1:
                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                        if arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100) > balanceOf[address(msg.sender)]:
                                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                                        if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100):
                                                            revert with 'NH{q', 17
                                                        balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor14 / 100) + (arg2 * burnFee / 100)
                                                        if balanceOf[address(arg1)] > -arg2 + (arg2 * stor14 / 100) + (arg2 * burnFee / 100) - 1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100) < balanceOf[address(arg1)]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100)
                                                        emit Transfer((arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100)), msg.sender, arg1);
                                else:
                                    if arg1 == owner:
                                        if stor11[address(msg.sender)]:
                                            if not msg.sender:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                            if not arg1:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                            if arg2 > balanceOf[address(msg.sender)]:
                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                                            if balanceOf[address(msg.sender)] < arg2:
                                                revert with 'NH{q', 17
                                            balanceOf[address(msg.sender)] -= arg2
                                            if balanceOf[address(arg1)] > -arg2 - 1:
                                                revert with 'NH{q', 17
                                            if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(arg1)] += arg2
                                            emit Transfer(arg2, msg.sender, arg1);
                                        else:
                                            if stor11[address(arg1)]:
                                                if not msg.sender:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                if not arg1:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                if arg2 > balanceOf[address(msg.sender)]:
                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                                                if balanceOf[address(msg.sender)] < arg2:
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] -= arg2
                                                if balanceOf[address(arg1)] > -arg2 - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                balanceOf[address(arg1)] += arg2
                                                emit Transfer(arg2, msg.sender, arg1);
                                            else:
                                                if totalFees <= 0:
                                                    if not msg.sender:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                    if not arg1:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                    if arg2 > balanceOf[address(msg.sender)]:
                                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                                                    if balanceOf[address(msg.sender)] < arg2:
                                                        revert with 'NH{q', 17
                                                    balanceOf[address(msg.sender)] -= arg2
                                                    if balanceOf[address(arg1)] > -arg2 - 1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    balanceOf[address(arg1)] += arg2
                                                    emit Transfer(arg2, msg.sender, arg1);
                                                else:
                                                    if not arg2:
                                                        if not arg2:
                                                            if 0 > arg2:
                                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                                            if arg2 < 0:
                                                                revert with 'NH{q', 17
                                                            if not msg.sender:
                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                            if not this.address:
                                                                revert with 0, 'ERC20: transfer to the zero address'
                                                            if 0 > balanceOf[address(msg.sender)]:
                                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                                            if balanceOf[address(msg.sender)] < 0:
                                                                revert with 'NH{q', 17
                                                            if balanceOf[address(this.address)] > -1:
                                                                revert with 'NH{q', 17
                                                            if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            emit Transfer(0, msg.sender, this.address);
                                                            if not msg.sender:
                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                            if 0 > balanceOf[address(msg.sender)]:
                                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                                            if balanceOf[address(msg.sender)] < 0:
                                                                revert with 'NH{q', 17
                                                            if balanceOf[57005] > -1:
                                                                revert with 'NH{q', 17
                                                            if balanceOf[57005] < balanceOf[57005]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            emit Transfer(0, msg.sender, 57005);
                                                            emit TokenBurn(0, msg.sender);
                                                            if not msg.sender:
                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                            if not arg1:
                                                                revert with 0, 'ERC20: transfer to the zero address'
                                                            if arg2 > balanceOf[address(msg.sender)]:
                                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                                            if balanceOf[address(msg.sender)] < arg2:
                                                                revert with 'NH{q', 17
                                                            balanceOf[address(msg.sender)] -= arg2
                                                            if balanceOf[address(arg1)] > -arg2 - 1:
                                                                revert with 'NH{q', 17
                                                            if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            balanceOf[address(arg1)] += arg2
                                                            emit Transfer(arg2, msg.sender, arg1);
                                                        else:
                                                            if arg2 and burnFee > -1 / arg2:
                                                                revert with 'NH{q', 17
                                                            if not arg2:
                                                                revert with 'NH{q', 18
                                                            if arg2 * burnFee / arg2 != burnFee:
                                                                revert with 0, 'SafeMath: multiplication overflow'
                                                            if 0 > -(arg2 * burnFee / 100) - 1:
                                                                revert with 'NH{q', 17
                                                            if arg2 * burnFee / 100 < 0:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            if arg2 * burnFee / 100 > arg2:
                                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                                            if arg2 < arg2 * burnFee / 100:
                                                                revert with 'NH{q', 17
                                                            if not msg.sender:
                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                            if not this.address:
                                                                revert with 0, 'ERC20: transfer to the zero address'
                                                            if 0 > balanceOf[address(msg.sender)]:
                                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                                            if balanceOf[address(msg.sender)] < 0:
                                                                revert with 'NH{q', 17
                                                            if balanceOf[address(this.address)] > -1:
                                                                revert with 'NH{q', 17
                                                            if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            emit Transfer(0, msg.sender, this.address);
                                                            if not msg.sender:
                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                            if arg2 * burnFee / 100 > balanceOf[address(msg.sender)]:
                                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                                            if balanceOf[address(msg.sender)] < arg2 * burnFee / 100:
                                                                revert with 'NH{q', 17
                                                            balanceOf[address(msg.sender)] -= arg2 * burnFee / 100
                                                            if balanceOf[57005] > -(arg2 * burnFee / 100) - 1:
                                                                revert with 'NH{q', 17
                                                            if balanceOf[57005] + (arg2 * burnFee / 100) < balanceOf[57005]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            balanceOf[57005] += arg2 * burnFee / 100
                                                            emit Transfer((arg2 * burnFee / 100), msg.sender, 57005);
                                                            emit TokenBurn((arg2 * burnFee / 100), msg.sender);
                                                            if not msg.sender:
                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                            if not arg1:
                                                                revert with 0, 'ERC20: transfer to the zero address'
                                                            if arg2 - (arg2 * burnFee / 100) > balanceOf[address(msg.sender)]:
                                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                                            if balanceOf[address(msg.sender)] < arg2 - (arg2 * burnFee / 100):
                                                                revert with 'NH{q', 17
                                                            balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * burnFee / 100)
                                                            if balanceOf[address(arg1)] > -arg2 + (arg2 * burnFee / 100) - 1:
                                                                revert with 'NH{q', 17
                                                            if balanceOf[address(arg1)] + arg2 - (arg2 * burnFee / 100) < balanceOf[address(arg1)]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * burnFee / 100)
                                                            emit Transfer((arg2 - (arg2 * burnFee / 100)), msg.sender, arg1);
                                                    else:
                                                        if arg2 and stor14 > -1 / arg2:
                                                            revert with 'NH{q', 17
                                                        if not arg2:
                                                            revert with 'NH{q', 18
                                                        if arg2 * stor14 / arg2 != stor14:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeMath: multiplication overflow'
                                                        if not arg2:
                                                            if arg2 * stor14 / 100 > -1:
                                                                revert with 'NH{q', 17
                                                            if arg2 * stor14 / 100 < arg2 * stor14 / 100:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            if arg2 * stor14 / 100 > arg2:
                                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                                            if arg2 < arg2 * stor14 / 100:
                                                                revert with 'NH{q', 17
                                                            if not msg.sender:
                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                            if not this.address:
                                                                revert with 0, 'ERC20: transfer to the zero address'
                                                            if arg2 * stor14 / 100 > balanceOf[address(msg.sender)]:
                                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                                            if balanceOf[address(msg.sender)] < arg2 * stor14 / 100:
                                                                revert with 'NH{q', 17
                                                            balanceOf[address(msg.sender)] -= arg2 * stor14 / 100
                                                            if balanceOf[address(this.address)] > -(arg2 * stor14 / 100) - 1:
                                                                revert with 'NH{q', 17
                                                            if balanceOf[address(this.address)] + (arg2 * stor14 / 100) < balanceOf[address(this.address)]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            balanceOf[address(this.address)] += arg2 * stor14 / 100
                                                            emit Transfer((arg2 * stor14 / 100), msg.sender, this.address);
                                                            if not msg.sender:
                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                            if 0 > balanceOf[address(msg.sender)]:
                                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                                            if balanceOf[address(msg.sender)] < 0:
                                                                revert with 'NH{q', 17
                                                            if balanceOf[57005] > -1:
                                                                revert with 'NH{q', 17
                                                            if balanceOf[57005] < balanceOf[57005]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            emit Transfer(0, msg.sender, 57005);
                                                            emit TokenBurn(0, msg.sender);
                                                            if not msg.sender:
                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                            if not arg1:
                                                                revert with 0, 'ERC20: transfer to the zero address'
                                                            if arg2 - (arg2 * stor14 / 100) > balanceOf[address(msg.sender)]:
                                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                                            if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor14 / 100):
                                                                revert with 'NH{q', 17
                                                            balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor14 / 100)
                                                            if balanceOf[address(arg1)] > -arg2 + (arg2 * stor14 / 100) - 1:
                                                                revert with 'NH{q', 17
                                                            if balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) < balanceOf[address(arg1)]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100)
                                                            emit Transfer((arg2 - (arg2 * stor14 / 100)), msg.sender, arg1);
                                                        else:
                                                            if arg2 and burnFee > -1 / arg2:
                                                                revert with 'NH{q', 17
                                                            if not arg2:
                                                                revert with 'NH{q', 18
                                                            if arg2 * burnFee / arg2 != burnFee:
                                                                revert with 0, 'SafeMath: multiplication overflow'
                                                            if arg2 * stor14 / 100 > -(arg2 * burnFee / 100) - 1:
                                                                revert with 'NH{q', 17
                                                            if (arg2 * stor14 / 100) + (arg2 * burnFee / 100) < arg2 * stor14 / 100:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            if (arg2 * stor14 / 100) + (arg2 * burnFee / 100) > arg2:
                                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                                            if arg2 < (arg2 * stor14 / 100) + (arg2 * burnFee / 100):
                                                                revert with 'NH{q', 17
                                                            if not msg.sender:
                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                            if not this.address:
                                                                revert with 0, 'ERC20: transfer to the zero address'
                                                            if arg2 * stor14 / 100 > balanceOf[address(msg.sender)]:
                                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                                            if balanceOf[address(msg.sender)] < arg2 * stor14 / 100:
                                                                revert with 'NH{q', 17
                                                            balanceOf[address(msg.sender)] -= arg2 * stor14 / 100
                                                            if balanceOf[address(this.address)] > -(arg2 * stor14 / 100) - 1:
                                                                revert with 'NH{q', 17
                                                            if balanceOf[address(this.address)] + (arg2 * stor14 / 100) < balanceOf[address(this.address)]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            balanceOf[address(this.address)] += arg2 * stor14 / 100
                                                            emit Transfer((arg2 * stor14 / 100), msg.sender, this.address);
                                                            if not msg.sender:
                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                            if arg2 * burnFee / 100 > balanceOf[address(msg.sender)]:
                                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                                            if balanceOf[address(msg.sender)] < arg2 * burnFee / 100:
                                                                revert with 'NH{q', 17
                                                            balanceOf[address(msg.sender)] -= arg2 * burnFee / 100
                                                            if balanceOf[57005] > -(arg2 * burnFee / 100) - 1:
                                                                revert with 'NH{q', 17
                                                            if balanceOf[57005] + (arg2 * burnFee / 100) < balanceOf[57005]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            balanceOf[57005] += arg2 * burnFee / 100
                                                            emit Transfer((arg2 * burnFee / 100), msg.sender, 57005);
                                                            emit TokenBurn((arg2 * burnFee / 100), msg.sender);
                                                            if not msg.sender:
                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                            if not arg1:
                                                                revert with 0, 'ERC20: transfer to the zero address'
                                                            if arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100) > balanceOf[address(msg.sender)]:
                                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                                            if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100):
                                                                revert with 'NH{q', 17
                                                            balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor14 / 100) + (arg2 * burnFee / 100)
                                                            if balanceOf[address(arg1)] > -arg2 + (arg2 * stor14 / 100) + (arg2 * burnFee / 100) - 1:
                                                                revert with 'NH{q', 17
                                                            if balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100) < balanceOf[address(arg1)]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100)
                                                            emit Transfer((arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100)), msg.sender, arg1);
                                    else:
                                        stor22 = 1
                                        if balanceOf[address(this.address)]:
                                            if balanceOf[address(this.address)] and liquidityFee > -1 / balanceOf[address(this.address)]:
                                                revert with 'NH{q', 17
                                            if not balanceOf[address(this.address)]:
                                                revert with 'NH{q', 18
                                            if balanceOf[address(this.address)] * liquidityFee / balanceOf[address(this.address)] != liquidityFee:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeMath: multiplication overflow'
                                            mem[96] = 26
                                            mem[128] = 'SafeMath: division by zero'
                                            if stor14 <= 0:
                                                revert with 0, 'SafeMath: division by zero', 0
                                            if not stor14:
                                                revert with 'NH{q', 18
                                            if not balanceOf[address(this.address)]:
                                                mem[160] = 26
                                                mem[192] = 'SafeMath: division by zero'
                                                if stor14 <= 0:
                                                    revert with 0, 'SafeMath: division by zero', 0
                                                if not stor14:
                                                    revert with 'NH{q', 18
                                                mem[224] = 26
                                                mem[256] = 'SafeMath: division by zero'
                                                mem[288] = 30
                                                mem[320] = 'SafeMath: subtraction overflow'
                                                if balanceOf[address(this.address)] * liquidityFee / stor14 / 2 > balanceOf[address(this.address)] * liquidityFee / stor14:
                                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                                if balanceOf[address(this.address)] * liquidityFee / stor14 < balanceOf[address(this.address)] * liquidityFee / stor14 / 2:
                                                    revert with 'NH{q', 17
                                                mem[352] = 2
                                                mem[384] = this.address
                                                require ext_code.size(uniswapV2RouterAddress)
                                                staticcall uniswapV2RouterAddress.WETH() with:
                                                        gas gas_remaining wei
                                                mem[448] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                mem[416] = ext_call.return_data[12 len 20]
                                                if not this.address:
                                                    revert with 0, 'ERC20: approve from the zero address'
                                                if not uniswapV2RouterAddress:
                                                    revert with 0, 'ERC20: approve to the zero address'
                                                allowance[address(this.address)][stor19].field_0 = balanceOf[address(this.address)] * liquidityFee / stor14 / 2
                                                allowance[address(this.address)][stor19].field_255 = 0
                                                emit Approval((balanceOf[address(this.address)] * liquidityFee / stor14 / 2), this.address, uniswapV2RouterAddress);
                                                mem[ceil32(return_data.size) + 448] = 0x791ac94700000000000000000000000000000000000000000000000000000000
                                                mem[ceil32(return_data.size) + 452] = balanceOf[address(this.address)] * liquidityFee / stor14 / 2
                                                idx = 0
                                                s = 384
                                                t = ceil32(return_data.size) + 644
                                                while idx < 2:
                                                    mem[t] = mem[s + 12 len 20]
                                                    idx = idx + 1
                                                    s = s + 32
                                                    t = t + 32
                                                    continue 
                                                require ext_code.size(uniswapV2RouterAddress)
                                                call uniswapV2RouterAddress.swapExactTokensForETHSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                     gas gas_remaining wei
                                                    args Mask(255, 1, balanceOf[address(this.address)] * liquidityFee / stor14), 0, 160, address(this.address), block.timestamp, 2, mem[ceil32(return_data.size) + 644 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[ceil32(return_data.size) + 448] = 30
                                                mem[ceil32(return_data.size) + 480] = 'SafeMath: subtraction overflow'
                                                if eth.balance(this.address) > eth.balance(this.address):
                                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                                if eth.balance(this.address) < eth.balance(this.address):
                                                    revert with 'NH{q', 17
                                                if not this.address:
                                                    revert with 0, 'ERC20: approve from the zero address'
                                                if not uniswapV2RouterAddress:
                                                    revert with 0, 'ERC20: approve to the zero address'
                                                allowance[address(this.address)][stor19].field_0 = (balanceOf[address(this.address)] * liquidityFee / stor14) - (balanceOf[address(this.address)] * liquidityFee / stor14 / 2)
                                                emit Approval(((balanceOf[address(this.address)] * liquidityFee / stor14) - (balanceOf[address(this.address)] * liquidityFee / stor14 / 2)), this.address, uniswapV2RouterAddress);
                                                mem[ceil32(return_data.size) + 580] = 0
                                                mem[ceil32(return_data.size) + 612] = 0
                                                mem[ceil32(return_data.size) + 644] = owner
                                                mem[ceil32(return_data.size) + 676] = block.timestamp
                                                require ext_code.size(uniswapV2RouterAddress)
                                                call uniswapV2RouterAddress.addLiquidityETH(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), (balanceOf[address(this.address)] * liquidityFee / stor14) - (balanceOf[address(this.address)] * liquidityFee / stor14 / 2), 0, 0, owner, block.timestamp
                                                mem[ceil32(return_data.size) + 512 len 96] = ext_call.return_data[0 len 96]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 96
                                                require ext_call.return_data[0] == ext_call.return_data[0]
                                                require ext_call.return_data[32] == ext_call.return_data[32]
                                                require ext_call.return_data[64] == ext_call.return_data[64]
                                                mem[(2 * ceil32(return_data.size)) + 512] = 3
                                                mem[(2 * ceil32(return_data.size)) + 544] = this.address
                                                require ext_code.size(uniswapV2RouterAddress)
                                                staticcall uniswapV2RouterAddress.WETH() with:
                                                        gas gas_remaining wei
                                                mem[(2 * ceil32(return_data.size)) + 640] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[64] = (4 * ceil32(return_data.size)) + 640
                                                require return_data.size >= 32
                                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                mem[(2 * ceil32(return_data.size)) + 576] = ext_call.return_data[12 len 20]
                                                mem[(2 * ceil32(return_data.size)) + 608] = sub_e5148bd6Address
                                                if not this.address:
                                                    revert with 0, 'ERC20: approve from the zero address'
                                                if not uniswapV2RouterAddress:
                                                    revert with 0, 'ERC20: approve to the zero address'
                                                mem[0] = uniswapV2RouterAddress
                                                mem[32] = sha3(address(this.address), 10)
                                                allowance[address(this.address)][stor19].field_0 = 0 / stor14
                                                emit Approval((0 / stor14), this.address, uniswapV2RouterAddress);
                                                mem[(4 * ceil32(return_data.size)) + 640] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                                mem[(4 * ceil32(return_data.size)) + 644] = 0 / stor14
                                                mem[(4 * ceil32(return_data.size)) + 676] = 0
                                                mem[(4 * ceil32(return_data.size)) + 708] = 160
                                                mem[(4 * ceil32(return_data.size)) + 804] = 3
                                                idx = 0
                                                s = (2 * ceil32(return_data.size)) + 544
                                                t = (4 * ceil32(return_data.size)) + 836
                                                while idx < mem[(2 * ceil32(return_data.size)) + 512]:
                                                    mem[t] = mem[s + 12 len 20]
                                                    idx = idx + 1
                                                    s = s + 32
                                                    t = t + 32
                                                    continue 
                                                mem[(4 * ceil32(return_data.size)) + 740] = this.address
                                                mem[(4 * ceil32(return_data.size)) + 772] = block.timestamp
                                                require ext_code.size(uniswapV2RouterAddress)
                                                call uniswapV2RouterAddress.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                     gas gas_remaining wei
                                                    args 0 / stor14, 0, 160, address(this.address), block.timestamp, mem[(4 * ceil32(return_data.size)) + 804 len (32 * mem[(2 * ceil32(return_data.size)) + 512]) + 32]
                                            else:
                                                if balanceOf[address(this.address)] and marketingFee > -1 / balanceOf[address(this.address)]:
                                                    revert with 'NH{q', 17
                                                if not balanceOf[address(this.address)]:
                                                    revert with 'NH{q', 18
                                                if balanceOf[address(this.address)] * marketingFee / balanceOf[address(this.address)] != marketingFee:
                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                mem[160] = 26
                                                mem[192] = 'SafeMath: division by zero'
                                                if stor14 <= 0:
                                                    revert with 0, 'SafeMath: division by zero', 0
                                                if not stor14:
                                                    revert with 'NH{q', 18
                                                mem[224] = 26
                                                mem[256] = 'SafeMath: division by zero'
                                                mem[288] = 30
                                                mem[320] = 'SafeMath: subtraction overflow'
                                                if balanceOf[address(this.address)] * liquidityFee / stor14 / 2 > balanceOf[address(this.address)] * liquidityFee / stor14:
                                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                                if balanceOf[address(this.address)] * liquidityFee / stor14 < balanceOf[address(this.address)] * liquidityFee / stor14 / 2:
                                                    revert with 'NH{q', 17
                                                mem[352] = 2
                                                mem[384] = this.address
                                                require ext_code.size(uniswapV2RouterAddress)
                                                staticcall uniswapV2RouterAddress.WETH() with:
                                                        gas gas_remaining wei
                                                mem[448] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                mem[416] = ext_call.return_data[12 len 20]
                                                if not this.address:
                                                    revert with 0, 'ERC20: approve from the zero address'
                                                if not uniswapV2RouterAddress:
                                                    revert with 0, 'ERC20: approve to the zero address'
                                                allowance[address(this.address)][stor19].field_0 = balanceOf[address(this.address)] * liquidityFee / stor14 / 2
                                                allowance[address(this.address)][stor19].field_255 = 0
                                                emit Approval((balanceOf[address(this.address)] * liquidityFee / stor14 / 2), this.address, uniswapV2RouterAddress);
                                                mem[ceil32(return_data.size) + 448] = 0x791ac94700000000000000000000000000000000000000000000000000000000
                                                mem[ceil32(return_data.size) + 452] = balanceOf[address(this.address)] * liquidityFee / stor14 / 2
                                                idx = 0
                                                s = 384
                                                t = ceil32(return_data.size) + 644
                                                while idx < 2:
                                                    mem[t] = mem[s + 12 len 20]
                                                    idx = idx + 1
                                                    s = s + 32
                                                    t = t + 32
                                                    continue 
                                                require ext_code.size(uniswapV2RouterAddress)
                                                call uniswapV2RouterAddress.swapExactTokensForETHSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                     gas gas_remaining wei
                                                    args Mask(255, 1, balanceOf[address(this.address)] * liquidityFee / stor14), 0, 160, address(this.address), block.timestamp, 2, mem[ceil32(return_data.size) + 644 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[ceil32(return_data.size) + 448] = 30
                                                mem[ceil32(return_data.size) + 480] = 'SafeMath: subtraction overflow'
                                                if eth.balance(this.address) > eth.balance(this.address):
                                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                                if eth.balance(this.address) < eth.balance(this.address):
                                                    revert with 'NH{q', 17
                                                if not this.address:
                                                    revert with 0, 'ERC20: approve from the zero address'
                                                if not uniswapV2RouterAddress:
                                                    revert with 0, 'ERC20: approve to the zero address'
                                                allowance[address(this.address)][stor19].field_0 = (balanceOf[address(this.address)] * liquidityFee / stor14) - (balanceOf[address(this.address)] * liquidityFee / stor14 / 2)
                                                emit Approval(((balanceOf[address(this.address)] * liquidityFee / stor14) - (balanceOf[address(this.address)] * liquidityFee / stor14 / 2)), this.address, uniswapV2RouterAddress);
                                                mem[ceil32(return_data.size) + 580] = 0
                                                mem[ceil32(return_data.size) + 612] = 0
                                                mem[ceil32(return_data.size) + 644] = owner
                                                mem[ceil32(return_data.size) + 676] = block.timestamp
                                                require ext_code.size(uniswapV2RouterAddress)
                                                call uniswapV2RouterAddress.addLiquidityETH(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), (balanceOf[address(this.address)] * liquidityFee / stor14) - (balanceOf[address(this.address)] * liquidityFee / stor14 / 2), 0, 0, owner, block.timestamp
                                                mem[ceil32(return_data.size) + 512 len 96] = ext_call.return_data[0 len 96]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 96
                                                require ext_call.return_data[0] == ext_call.return_data[0]
                                                require ext_call.return_data[32] == ext_call.return_data[32]
                                                require ext_call.return_data[64] == ext_call.return_data[64]
                                                mem[(2 * ceil32(return_data.size)) + 512] = 3
                                                mem[(2 * ceil32(return_data.size)) + 544] = this.address
                                                require ext_code.size(uniswapV2RouterAddress)
                                                staticcall uniswapV2RouterAddress.WETH() with:
                                                        gas gas_remaining wei
                                                mem[(2 * ceil32(return_data.size)) + 640] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[64] = (4 * ceil32(return_data.size)) + 640
                                                require return_data.size >= 32
                                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                mem[(2 * ceil32(return_data.size)) + 576] = ext_call.return_data[12 len 20]
                                                mem[(2 * ceil32(return_data.size)) + 608] = sub_e5148bd6Address
                                                if not this.address:
                                                    revert with 0, 'ERC20: approve from the zero address'
                                                if not uniswapV2RouterAddress:
                                                    revert with 0, 'ERC20: approve to the zero address'
                                                mem[0] = uniswapV2RouterAddress
                                                mem[32] = sha3(address(this.address), 10)
                                                allowance[address(this.address)][stor19].field_0 = balanceOf[address(this.address)] * marketingFee / stor14
                                                emit Approval((balanceOf[address(this.address)] * marketingFee / stor14), this.address, uniswapV2RouterAddress);
                                                mem[(4 * ceil32(return_data.size)) + 640] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                                mem[(4 * ceil32(return_data.size)) + 644] = balanceOf[address(this.address)] * marketingFee / stor14
                                                mem[(4 * ceil32(return_data.size)) + 676] = 0
                                                mem[(4 * ceil32(return_data.size)) + 708] = 160
                                                mem[(4 * ceil32(return_data.size)) + 804] = 3
                                                idx = 0
                                                s = (2 * ceil32(return_data.size)) + 544
                                                t = (4 * ceil32(return_data.size)) + 836
                                                while idx < mem[(2 * ceil32(return_data.size)) + 512]:
                                                    mem[t] = mem[s + 12 len 20]
                                                    idx = idx + 1
                                                    s = s + 32
                                                    t = t + 32
                                                    continue 
                                                mem[(4 * ceil32(return_data.size)) + 740] = this.address
                                                mem[(4 * ceil32(return_data.size)) + 772] = block.timestamp
                                                require ext_code.size(uniswapV2RouterAddress)
                                                call uniswapV2RouterAddress.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                     gas gas_remaining wei
                                                    args balanceOf[address(this.address)] * marketingFee / stor14, 0, 160, address(this.address), block.timestamp, mem[(4 * ceil32(return_data.size)) + 804 len (32 * mem[(2 * ceil32(return_data.size)) + 512]) + 32]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require ext_code.size(sub_e5148bd6Address)
                                            staticcall sub_e5148bd6Address.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == ext_call.return_data[0]
                                            mem[(4 * ceil32(return_data.size)) + 644] = marketingAddress
                                            mem[(4 * ceil32(return_data.size)) + 676] = ext_call.return_data[0]
                                            require ext_code.size(sub_e5148bd6Address)
                                            call sub_e5148bd6Address.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args mem[(4 * ceil32(return_data.size)) + 644 len (7 * ceil32(return_data.size)) + 64]
                                            mem[(4 * ceil32(return_data.size)) + 640] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                            stor22 = 0
                                            if stor11[address(msg.sender)]:
                                                if not msg.sender:
                                                    mem[(8 * ceil32(return_data.size)) + 640] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 644] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 676] = 37
                                                    mem[(8 * ceil32(return_data.size)) + 708] = 'ERC20: transfer from the zero ad'
                                                    mem[(8 * ceil32(return_data.size)) + 740] = 'dress'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 640
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if not arg1:
                                                    mem[(8 * ceil32(return_data.size)) + 640] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 644] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 676] = 35
                                                    mem[(8 * ceil32(return_data.size)) + 708] = 'ERC20: transfer to the zero addr'
                                                    mem[(8 * ceil32(return_data.size)) + 740] = 'ess'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 640
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if arg2 > balanceOf[address(msg.sender)]:
                                                    mem[(8 * ceil32(return_data.size)) + 736] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 740] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 772] = 38
                                                    mem[(8 * ceil32(return_data.size)) + 804 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 710 len 26]
                                                    mem[(8 * ceil32(return_data.size)) + 842] = 0
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 736
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if balanceOf[address(msg.sender)] < arg2:
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] -= arg2
                                                if balanceOf[address(arg1)] > -arg2 - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(arg1)] + arg2 >= balanceOf[address(arg1)]:
                                                    balanceOf[address(arg1)] += arg2
                                                    emit Transfer(arg2, msg.sender, arg1);
                                                    return 1
                                                mem[(8 * ceil32(return_data.size)) + 736] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[(8 * ceil32(return_data.size)) + 740] = 32
                                                mem[(8 * ceil32(return_data.size)) + 772] = 27
                                                mem[(8 * ceil32(return_data.size)) + 804] = 'SafeMath: addition overflow'
                                                revert with memory
                                                  from (8 * ceil32(return_data.size)) + 736
                                                   len (13 * ceil32(return_data.size)) + 100
                                            if stor11[address(arg1)]:
                                                if not msg.sender:
                                                    mem[(8 * ceil32(return_data.size)) + 640] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 644] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 676] = 37
                                                    mem[(8 * ceil32(return_data.size)) + 708] = 'ERC20: transfer from the zero ad'
                                                    mem[(8 * ceil32(return_data.size)) + 740] = 'dress'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 640
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if not arg1:
                                                    mem[(8 * ceil32(return_data.size)) + 640] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 644] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 676] = 35
                                                    mem[(8 * ceil32(return_data.size)) + 708] = 'ERC20: transfer to the zero addr'
                                                    mem[(8 * ceil32(return_data.size)) + 740] = 'ess'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 640
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if arg2 > balanceOf[address(msg.sender)]:
                                                    mem[(8 * ceil32(return_data.size)) + 736] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 740] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 772] = 38
                                                    mem[(8 * ceil32(return_data.size)) + 804 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 710 len 26]
                                                    mem[(8 * ceil32(return_data.size)) + 842] = 0
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 736
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if balanceOf[address(msg.sender)] < arg2:
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] -= arg2
                                                if balanceOf[address(arg1)] > -arg2 - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(arg1)] + arg2 >= balanceOf[address(arg1)]:
                                                    balanceOf[address(arg1)] += arg2
                                                    emit Transfer(arg2, msg.sender, arg1);
                                                    return 1
                                                mem[(8 * ceil32(return_data.size)) + 736] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[(8 * ceil32(return_data.size)) + 740] = 32
                                                mem[(8 * ceil32(return_data.size)) + 772] = 27
                                                mem[(8 * ceil32(return_data.size)) + 804] = 'SafeMath: addition overflow'
                                                revert with memory
                                                  from (8 * ceil32(return_data.size)) + 736
                                                   len (13 * ceil32(return_data.size)) + 100
                                            if totalFees <= 0:
                                                if not msg.sender:
                                                    mem[(8 * ceil32(return_data.size)) + 640] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 644] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 676] = 37
                                                    mem[(8 * ceil32(return_data.size)) + 708] = 'ERC20: transfer from the zero ad'
                                                    mem[(8 * ceil32(return_data.size)) + 740] = 'dress'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 640
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if not arg1:
                                                    mem[(8 * ceil32(return_data.size)) + 640] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 644] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 676] = 35
                                                    mem[(8 * ceil32(return_data.size)) + 708] = 'ERC20: transfer to the zero addr'
                                                    mem[(8 * ceil32(return_data.size)) + 740] = 'ess'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 640
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if arg2 > balanceOf[address(msg.sender)]:
                                                    mem[(8 * ceil32(return_data.size)) + 736] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 740] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 772] = 38
                                                    mem[(8 * ceil32(return_data.size)) + 804 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 710 len 26]
                                                    mem[(8 * ceil32(return_data.size)) + 842] = 0
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 736
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if balanceOf[address(msg.sender)] < arg2:
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] -= arg2
                                                if balanceOf[address(arg1)] > -arg2 - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(arg1)] + arg2 >= balanceOf[address(arg1)]:
                                                    balanceOf[address(arg1)] += arg2
                                                    emit Transfer(arg2, msg.sender, arg1);
                                                    return 1
                                                mem[(8 * ceil32(return_data.size)) + 736] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[(8 * ceil32(return_data.size)) + 740] = 32
                                                mem[(8 * ceil32(return_data.size)) + 772] = 27
                                                mem[(8 * ceil32(return_data.size)) + 804] = 'SafeMath: addition overflow'
                                                revert with memory
                                                  from (8 * ceil32(return_data.size)) + 736
                                                   len (13 * ceil32(return_data.size)) + 100
                                            if not arg2:
                                                if not arg2:
                                                    if 0 > arg2:
                                                        mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 868] = 30
                                                        mem[(8 * ceil32(return_data.size)) + 900] = 'SafeMath: subtraction overflow'
                                                        mem[(8 * ceil32(return_data.size)) + 930] = 0
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 832
                                                           len (13 * ceil32(return_data.size)) + 100
                                                    if arg2 < 0:
                                                        revert with 'NH{q', 17
                                                    if not msg.sender:
                                                        mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 868] = 37
                                                        mem[(8 * ceil32(return_data.size)) + 900] = 'ERC20: transfer from the zero ad'
                                                        mem[(8 * ceil32(return_data.size)) + 932] = 'dress'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 832
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if not this.address:
                                                        mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 868] = 35
                                                        mem[(8 * ceil32(return_data.size)) + 900] = 'ERC20: transfer to the zero addr'
                                                        mem[(8 * ceil32(return_data.size)) + 932] = 'ess'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 832
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if 0 > balanceOf[address(msg.sender)]:
                                                        mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 964] = 38
                                                        mem[(8 * ceil32(return_data.size)) + 996 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 902 len 26]
                                                        mem[(8 * ceil32(return_data.size)) + 1034] = 0
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 928
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if balanceOf[address(msg.sender)] < 0:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(this.address)] > -1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                                        mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 964] = 27
                                                        mem[(8 * ceil32(return_data.size)) + 996] = 'SafeMath: addition overflow'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 928
                                                           len (13 * ceil32(return_data.size)) + 100
                                                    emit Transfer(0, msg.sender, this.address);
                                                    if not msg.sender:
                                                        mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 964] = 37
                                                        mem[(8 * ceil32(return_data.size)) + 996] = 'ERC20: transfer from the zero ad'
                                                        mem[(8 * ceil32(return_data.size)) + 1028] = 'dress'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 928
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if 0 > balanceOf[address(msg.sender)]:
                                                        mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 1060] = 38
                                                        mem[(8 * ceil32(return_data.size)) + 1092 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 998 len 26]
                                                        mem[(8 * ceil32(return_data.size)) + 1130] = 0
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 1024
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if balanceOf[address(msg.sender)] < 0:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[57005] > -1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[57005] < balanceOf[57005]:
                                                        mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 1060] = 27
                                                        mem[(8 * ceil32(return_data.size)) + 1092] = 'SafeMath: addition overflow'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 1024
                                                           len (13 * ceil32(return_data.size)) + 100
                                                    emit Transfer(0, msg.sender, 57005);
                                                    emit TokenBurn(0, msg.sender);
                                                    if not msg.sender:
                                                        mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 1060] = 37
                                                        mem[(8 * ceil32(return_data.size)) + 1092] = 'ERC20: transfer from the zero ad'
                                                        mem[(8 * ceil32(return_data.size)) + 1124] = 'dress'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 1024
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if not arg1:
                                                        mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 1060] = 35
                                                        mem[(8 * ceil32(return_data.size)) + 1092] = 'ERC20: transfer to the zero addr'
                                                        mem[(8 * ceil32(return_data.size)) + 1124] = 'ess'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 1024
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if arg2 > balanceOf[address(msg.sender)]:
                                                        mem[(8 * ceil32(return_data.size)) + 1120] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 1124] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 1156] = 38
                                                        mem[(8 * ceil32(return_data.size)) + 1188 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 1094 len 26]
                                                        mem[(8 * ceil32(return_data.size)) + 1226] = 0
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 1120
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if balanceOf[address(msg.sender)] < arg2:
                                                        revert with 'NH{q', 17
                                                    balanceOf[address(msg.sender)] -= arg2
                                                    if balanceOf[address(arg1)] > -arg2 - 1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(arg1)] + arg2 >= balanceOf[address(arg1)]:
                                                        balanceOf[address(arg1)] += arg2
                                                        emit Transfer(arg2, msg.sender, arg1);
                                                        return 1
                                                else:
                                                    if arg2 and burnFee > -1 / arg2:
                                                        revert with 'NH{q', 17
                                                    if not arg2:
                                                        revert with 'NH{q', 18
                                                    if arg2 * burnFee / arg2 != burnFee:
                                                        mem[(8 * ceil32(return_data.size)) + 704] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 708] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 740] = 33
                                                        mem[(8 * ceil32(return_data.size)) + 772] = 'SafeMath: multiplication overflo'
                                                        mem[(8 * ceil32(return_data.size)) + 804] = 'w'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 704
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if 0 > -(arg2 * burnFee / 100) - 1:
                                                        revert with 'NH{q', 17
                                                    if arg2 * burnFee / 100 < 0:
                                                        mem[(8 * ceil32(return_data.size)) + 768] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 772] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 804] = 27
                                                        mem[(8 * ceil32(return_data.size)) + 836] = 'SafeMath: addition overflow'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 768
                                                           len (13 * ceil32(return_data.size)) + 100
                                                    if arg2 * burnFee / 100 > arg2:
                                                        mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 868] = 30
                                                        mem[(8 * ceil32(return_data.size)) + 900] = 'SafeMath: subtraction overflow'
                                                        mem[(8 * ceil32(return_data.size)) + 930] = 0
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 832
                                                           len (13 * ceil32(return_data.size)) + 100
                                                    if arg2 < arg2 * burnFee / 100:
                                                        revert with 'NH{q', 17
                                                    if not msg.sender:
                                                        mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 868] = 37
                                                        mem[(8 * ceil32(return_data.size)) + 900] = 'ERC20: transfer from the zero ad'
                                                        mem[(8 * ceil32(return_data.size)) + 932] = 'dress'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 832
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if not this.address:
                                                        mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 868] = 35
                                                        mem[(8 * ceil32(return_data.size)) + 900] = 'ERC20: transfer to the zero addr'
                                                        mem[(8 * ceil32(return_data.size)) + 932] = 'ess'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 832
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if 0 > balanceOf[address(msg.sender)]:
                                                        mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 964] = 38
                                                        mem[(8 * ceil32(return_data.size)) + 996 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 902 len 26]
                                                        mem[(8 * ceil32(return_data.size)) + 1034] = 0
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 928
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if balanceOf[address(msg.sender)] < 0:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(this.address)] > -1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                                        mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 964] = 27
                                                        mem[(8 * ceil32(return_data.size)) + 996] = 'SafeMath: addition overflow'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 928
                                                           len (13 * ceil32(return_data.size)) + 100
                                                    emit Transfer(0, msg.sender, this.address);
                                                    if not msg.sender:
                                                        mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 964] = 37
                                                        mem[(8 * ceil32(return_data.size)) + 996] = 'ERC20: transfer from the zero ad'
                                                        mem[(8 * ceil32(return_data.size)) + 1028] = 'dress'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 928
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if arg2 * burnFee / 100 > balanceOf[address(msg.sender)]:
                                                        mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 1060] = 38
                                                        mem[(8 * ceil32(return_data.size)) + 1092 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 998 len 26]
                                                        mem[(8 * ceil32(return_data.size)) + 1130] = 0
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 1024
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if balanceOf[address(msg.sender)] < arg2 * burnFee / 100:
                                                        revert with 'NH{q', 17
                                                    balanceOf[address(msg.sender)] -= arg2 * burnFee / 100
                                                    if balanceOf[57005] > -(arg2 * burnFee / 100) - 1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[57005] + (arg2 * burnFee / 100) < balanceOf[57005]:
                                                        mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 1060] = 27
                                                        mem[(8 * ceil32(return_data.size)) + 1092] = 'SafeMath: addition overflow'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 1024
                                                           len (13 * ceil32(return_data.size)) + 100
                                                    balanceOf[57005] += arg2 * burnFee / 100
                                                    emit Transfer((arg2 * burnFee / 100), msg.sender, 57005);
                                                    emit TokenBurn((arg2 * burnFee / 100), msg.sender);
                                                    if not msg.sender:
                                                        mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 1060] = 37
                                                        mem[(8 * ceil32(return_data.size)) + 1092] = 'ERC20: transfer from the zero ad'
                                                        mem[(8 * ceil32(return_data.size)) + 1124] = 'dress'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 1024
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if not arg1:
                                                        mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 1060] = 35
                                                        mem[(8 * ceil32(return_data.size)) + 1092] = 'ERC20: transfer to the zero addr'
                                                        mem[(8 * ceil32(return_data.size)) + 1124] = 'ess'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 1024
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if arg2 - (arg2 * burnFee / 100) > balanceOf[address(msg.sender)]:
                                                        mem[(8 * ceil32(return_data.size)) + 1120] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 1124] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 1156] = 38
                                                        mem[(8 * ceil32(return_data.size)) + 1188 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 1094 len 26]
                                                        mem[(8 * ceil32(return_data.size)) + 1226] = 0
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 1120
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if balanceOf[address(msg.sender)] < arg2 - (arg2 * burnFee / 100):
                                                        revert with 'NH{q', 17
                                                    balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * burnFee / 100)
                                                    if balanceOf[address(arg1)] > -arg2 + (arg2 * burnFee / 100) - 1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(arg1)] + arg2 - (arg2 * burnFee / 100) >= balanceOf[address(arg1)]:
                                                        balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * burnFee / 100)
                                                        emit Transfer((arg2 - (arg2 * burnFee / 100)), msg.sender, arg1);
                                                        return 1
                                            else:
                                                if arg2 and stor14 > -1 / arg2:
                                                    revert with 'NH{q', 17
                                                if not arg2:
                                                    revert with 'NH{q', 18
                                                if arg2 * stor14 / arg2 != stor14:
                                                    mem[(8 * ceil32(return_data.size)) + 640] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 644] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 676] = 33
                                                    mem[(8 * ceil32(return_data.size)) + 708] = 'SafeMath: multiplication overflo'
                                                    mem[(8 * ceil32(return_data.size)) + 740] = 'w'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 640
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if not arg2:
                                                    if arg2 * stor14 / 100 > -1:
                                                        revert with 'NH{q', 17
                                                    if arg2 * stor14 / 100 < arg2 * stor14 / 100:
                                                        mem[(8 * ceil32(return_data.size)) + 768] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 772] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 804] = 27
                                                        mem[(8 * ceil32(return_data.size)) + 836] = 'SafeMath: addition overflow'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 768
                                                           len (13 * ceil32(return_data.size)) + 100
                                                    if arg2 * stor14 / 100 > arg2:
                                                        mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 868] = 30
                                                        mem[(8 * ceil32(return_data.size)) + 900] = 'SafeMath: subtraction overflow'
                                                        mem[(8 * ceil32(return_data.size)) + 930] = 0
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 832
                                                           len (13 * ceil32(return_data.size)) + 100
                                                    if arg2 < arg2 * stor14 / 100:
                                                        revert with 'NH{q', 17
                                                    if not msg.sender:
                                                        mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 868] = 37
                                                        mem[(8 * ceil32(return_data.size)) + 900] = 'ERC20: transfer from the zero ad'
                                                        mem[(8 * ceil32(return_data.size)) + 932] = 'dress'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 832
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if not this.address:
                                                        mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 868] = 35
                                                        mem[(8 * ceil32(return_data.size)) + 900] = 'ERC20: transfer to the zero addr'
                                                        mem[(8 * ceil32(return_data.size)) + 932] = 'ess'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 832
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if arg2 * stor14 / 100 > balanceOf[address(msg.sender)]:
                                                        mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 964] = 38
                                                        mem[(8 * ceil32(return_data.size)) + 996 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 902 len 26]
                                                        mem[(8 * ceil32(return_data.size)) + 1034] = 0
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 928
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if balanceOf[address(msg.sender)] < arg2 * stor14 / 100:
                                                        revert with 'NH{q', 17
                                                    balanceOf[address(msg.sender)] -= arg2 * stor14 / 100
                                                    if balanceOf[address(this.address)] > -(arg2 * stor14 / 100) - 1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(this.address)] + (arg2 * stor14 / 100) < balanceOf[address(this.address)]:
                                                        mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 964] = 27
                                                        mem[(8 * ceil32(return_data.size)) + 996] = 'SafeMath: addition overflow'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 928
                                                           len (13 * ceil32(return_data.size)) + 100
                                                    balanceOf[address(this.address)] += arg2 * stor14 / 100
                                                    emit Transfer((arg2 * stor14 / 100), msg.sender, this.address);
                                                    if not msg.sender:
                                                        mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 964] = 37
                                                        mem[(8 * ceil32(return_data.size)) + 996] = 'ERC20: transfer from the zero ad'
                                                        mem[(8 * ceil32(return_data.size)) + 1028] = 'dress'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 928
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if 0 > balanceOf[address(msg.sender)]:
                                                        mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 1060] = 38
                                                        mem[(8 * ceil32(return_data.size)) + 1092 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 998 len 26]
                                                        mem[(8 * ceil32(return_data.size)) + 1130] = 0
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 1024
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if balanceOf[address(msg.sender)] < 0:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[57005] > -1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[57005] < balanceOf[57005]:
                                                        mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 1060] = 27
                                                        mem[(8 * ceil32(return_data.size)) + 1092] = 'SafeMath: addition overflow'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 1024
                                                           len (13 * ceil32(return_data.size)) + 100
                                                    emit Transfer(0, msg.sender, 57005);
                                                    emit TokenBurn(0, msg.sender);
                                                    if not msg.sender:
                                                        mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 1060] = 37
                                                        mem[(8 * ceil32(return_data.size)) + 1092] = 'ERC20: transfer from the zero ad'
                                                        mem[(8 * ceil32(return_data.size)) + 1124] = 'dress'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 1024
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if not arg1:
                                                        mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 1060] = 35
                                                        mem[(8 * ceil32(return_data.size)) + 1092] = 'ERC20: transfer to the zero addr'
                                                        mem[(8 * ceil32(return_data.size)) + 1124] = 'ess'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 1024
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if arg2 - (arg2 * stor14 / 100) > balanceOf[address(msg.sender)]:
                                                        mem[(8 * ceil32(return_data.size)) + 1120] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 1124] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 1156] = 38
                                                        mem[(8 * ceil32(return_data.size)) + 1188 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 1094 len 26]
                                                        mem[(8 * ceil32(return_data.size)) + 1226] = 0
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 1120
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor14 / 100):
                                                        revert with 'NH{q', 17
                                                    balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor14 / 100)
                                                    if balanceOf[address(arg1)] > -arg2 + (arg2 * stor14 / 100) - 1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) >= balanceOf[address(arg1)]:
                                                        balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100)
                                                        emit Transfer((arg2 - (arg2 * stor14 / 100)), msg.sender, arg1);
                                                        return 1
                                                else:
                                                    if arg2 and burnFee > -1 / arg2:
                                                        revert with 'NH{q', 17
                                                    if not arg2:
                                                        revert with 'NH{q', 18
                                                    if arg2 * burnFee / arg2 != burnFee:
                                                        mem[(8 * ceil32(return_data.size)) + 704] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 708] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 740] = 33
                                                        mem[(8 * ceil32(return_data.size)) + 772] = 'SafeMath: multiplication overflo'
                                                        mem[(8 * ceil32(return_data.size)) + 804] = 'w'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 704
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if arg2 * stor14 / 100 > -(arg2 * burnFee / 100) - 1:
                                                        revert with 'NH{q', 17
                                                    if (arg2 * stor14 / 100) + (arg2 * burnFee / 100) < arg2 * stor14 / 100:
                                                        mem[(8 * ceil32(return_data.size)) + 768] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 772] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 804] = 27
                                                        mem[(8 * ceil32(return_data.size)) + 836] = 'SafeMath: addition overflow'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 768
                                                           len (13 * ceil32(return_data.size)) + 100
                                                    if (arg2 * stor14 / 100) + (arg2 * burnFee / 100) > arg2:
                                                        mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 868] = 30
                                                        mem[(8 * ceil32(return_data.size)) + 900] = 'SafeMath: subtraction overflow'
                                                        mem[(8 * ceil32(return_data.size)) + 930] = 0
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 832
                                                           len (13 * ceil32(return_data.size)) + 100
                                                    if arg2 < (arg2 * stor14 / 100) + (arg2 * burnFee / 100):
                                                        revert with 'NH{q', 17
                                                    if not msg.sender:
                                                        mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 868] = 37
                                                        mem[(8 * ceil32(return_data.size)) + 900] = 'ERC20: transfer from the zero ad'
                                                        mem[(8 * ceil32(return_data.size)) + 932] = 'dress'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 832
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if not this.address:
                                                        mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 868] = 35
                                                        mem[(8 * ceil32(return_data.size)) + 900] = 'ERC20: transfer to the zero addr'
                                                        mem[(8 * ceil32(return_data.size)) + 932] = 'ess'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 832
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if arg2 * stor14 / 100 > balanceOf[address(msg.sender)]:
                                                        mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 964] = 38
                                                        mem[(8 * ceil32(return_data.size)) + 996 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 902 len 26]
                                                        mem[(8 * ceil32(return_data.size)) + 1034] = 0
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 928
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if balanceOf[address(msg.sender)] < arg2 * stor14 / 100:
                                                        revert with 'NH{q', 17
                                                    balanceOf[address(msg.sender)] -= arg2 * stor14 / 100
                                                    if balanceOf[address(this.address)] > -(arg2 * stor14 / 100) - 1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(this.address)] + (arg2 * stor14 / 100) < balanceOf[address(this.address)]:
                                                        mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 964] = 27
                                                        mem[(8 * ceil32(return_data.size)) + 996] = 'SafeMath: addition overflow'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 928
                                                           len (13 * ceil32(return_data.size)) + 100
                                                    balanceOf[address(this.address)] += arg2 * stor14 / 100
                                                    emit Transfer((arg2 * stor14 / 100), msg.sender, this.address);
                                                    if not msg.sender:
                                                        mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 964] = 37
                                                        mem[(8 * ceil32(return_data.size)) + 996] = 'ERC20: transfer from the zero ad'
                                                        mem[(8 * ceil32(return_data.size)) + 1028] = 'dress'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 928
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if arg2 * burnFee / 100 > balanceOf[address(msg.sender)]:
                                                        mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 1060] = 38
                                                        mem[(8 * ceil32(return_data.size)) + 1092 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 998 len 26]
                                                        mem[(8 * ceil32(return_data.size)) + 1130] = 0
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 1024
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if balanceOf[address(msg.sender)] < arg2 * burnFee / 100:
                                                        revert with 'NH{q', 17
                                                    balanceOf[address(msg.sender)] -= arg2 * burnFee / 100
                                                    if balanceOf[57005] > -(arg2 * burnFee / 100) - 1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[57005] + (arg2 * burnFee / 100) < balanceOf[57005]:
                                                        mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 1060] = 27
                                                        mem[(8 * ceil32(return_data.size)) + 1092] = 'SafeMath: addition overflow'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 1024
                                                           len (13 * ceil32(return_data.size)) + 100
                                                    balanceOf[57005] += arg2 * burnFee / 100
                                                    emit Transfer((arg2 * burnFee / 100), msg.sender, 57005);
                                                    emit TokenBurn((arg2 * burnFee / 100), msg.sender);
                                                    if not msg.sender:
                                                        mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 1060] = 37
                                                        mem[(8 * ceil32(return_data.size)) + 1092] = 'ERC20: transfer from the zero ad'
                                                        mem[(8 * ceil32(return_data.size)) + 1124] = 'dress'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 1024
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if not arg1:
                                                        mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 1060] = 35
                                                        mem[(8 * ceil32(return_data.size)) + 1092] = 'ERC20: transfer to the zero addr'
                                                        mem[(8 * ceil32(return_data.size)) + 1124] = 'ess'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 1024
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100) > balanceOf[address(msg.sender)]:
                                                        mem[(8 * ceil32(return_data.size)) + 1120] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 1124] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 1156] = 38
                                                        mem[(8 * ceil32(return_data.size)) + 1188 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 1094 len 26]
                                                        mem[(8 * ceil32(return_data.size)) + 1226] = 0
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 1120
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100):
                                                        revert with 'NH{q', 17
                                                    balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor14 / 100) + (arg2 * burnFee / 100)
                                                    if balanceOf[address(arg1)] > -arg2 + (arg2 * stor14 / 100) + (arg2 * burnFee / 100) - 1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100) >= balanceOf[address(arg1)]:
                                                        balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100)
                                                        emit Transfer((arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100)), msg.sender, arg1);
                                                        return 1
                                            mem[(8 * ceil32(return_data.size)) + 1120] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[(8 * ceil32(return_data.size)) + 1124] = 32
                                            mem[(8 * ceil32(return_data.size)) + 1156] = 27
                                            mem[(8 * ceil32(return_data.size)) + 1188] = 'SafeMath: addition overflow'
                                            revert with memory
                                              from (8 * ceil32(return_data.size)) + 1120
                                               len (13 * ceil32(return_data.size)) + 100
                                        mem[96] = 26
                                        mem[128] = 'SafeMath: division by zero'
                                        if stor14 <= 0:
                                            revert with 0, 'SafeMath: division by zero', 0
                                        if not stor14:
                                            revert with 'NH{q', 18
                                        if balanceOf[address(this.address)]:
                                            if balanceOf[address(this.address)] and marketingFee > -1 / balanceOf[address(this.address)]:
                                                revert with 'NH{q', 17
                                            if not balanceOf[address(this.address)]:
                                                revert with 'NH{q', 18
                                            if balanceOf[address(this.address)] * marketingFee / balanceOf[address(this.address)] != marketingFee:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            mem[160] = 26
                                            mem[192] = 'SafeMath: division by zero'
                                            if stor14 <= 0:
                                                revert with 0, 'SafeMath: division by zero', 0
                                            if not stor14:
                                                revert with 'NH{q', 18
                                            mem[224] = 26
                                            mem[256] = 'SafeMath: division by zero'
                                            mem[288] = 30
                                            mem[320] = 'SafeMath: subtraction overflow'
                                            if 0 / stor14 / 2 > 0 / stor14:
                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                            if 0 / stor14 < 0 / stor14 / 2:
                                                revert with 'NH{q', 17
                                            mem[352] = 2
                                            mem[384] = this.address
                                            require ext_code.size(uniswapV2RouterAddress)
                                            staticcall uniswapV2RouterAddress.WETH() with:
                                                    gas gas_remaining wei
                                            mem[448] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                            mem[416] = ext_call.return_data[12 len 20]
                                            if not this.address:
                                                revert with 0, 'ERC20: approve from the zero address'
                                            if not uniswapV2RouterAddress:
                                                revert with 0, 'ERC20: approve to the zero address'
                                            allowance[address(this.address)][stor19].field_0 = 0 / stor14 / 2
                                            allowance[address(this.address)][stor19].field_255 = 0
                                            emit Approval((0 / stor14 / 2), this.address, uniswapV2RouterAddress);
                                            mem[ceil32(return_data.size) + 448] = 0x791ac94700000000000000000000000000000000000000000000000000000000
                                            mem[ceil32(return_data.size) + 452] = 0 / stor14 / 2
                                            idx = 0
                                            s = 384
                                            t = ceil32(return_data.size) + 644
                                            while idx < 2:
                                                mem[t] = mem[s + 12 len 20]
                                                idx = idx + 1
                                                s = s + 32
                                                t = t + 32
                                                continue 
                                            require ext_code.size(uniswapV2RouterAddress)
                                            call uniswapV2RouterAddress.swapExactTokensForETHSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args Mask(255, 1, 0 / stor14), 0, 160, address(this.address), block.timestamp, 2, mem[ceil32(return_data.size) + 644 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[ceil32(return_data.size) + 448] = 30
                                            mem[ceil32(return_data.size) + 480] = 'SafeMath: subtraction overflow'
                                            if eth.balance(this.address) > eth.balance(this.address):
                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                            if eth.balance(this.address) < eth.balance(this.address):
                                                revert with 'NH{q', 17
                                            if not this.address:
                                                revert with 0, 'ERC20: approve from the zero address'
                                            if not uniswapV2RouterAddress:
                                                revert with 0, 'ERC20: approve to the zero address'
                                            allowance[address(this.address)][stor19].field_0 = (0 / stor14) - (0 / stor14 / 2)
                                            emit Approval(((0 / stor14) - (0 / stor14 / 2)), this.address, uniswapV2RouterAddress);
                                            mem[ceil32(return_data.size) + 580] = 0
                                            mem[ceil32(return_data.size) + 612] = 0
                                            mem[ceil32(return_data.size) + 644] = owner
                                            mem[ceil32(return_data.size) + 676] = block.timestamp
                                            require ext_code.size(uniswapV2RouterAddress)
                                            call uniswapV2RouterAddress.addLiquidityETH(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                                 gas gas_remaining wei
                                                args address(this.address), (0 / stor14) - (0 / stor14 / 2), 0, 0, owner, block.timestamp
                                            mem[ceil32(return_data.size) + 512 len 96] = ext_call.return_data[0 len 96]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 96
                                            require ext_call.return_data[0] == ext_call.return_data[0]
                                            require ext_call.return_data[32] == ext_call.return_data[32]
                                            require ext_call.return_data[64] == ext_call.return_data[64]
                                            mem[(2 * ceil32(return_data.size)) + 512] = 3
                                            mem[(2 * ceil32(return_data.size)) + 544] = this.address
                                            require ext_code.size(uniswapV2RouterAddress)
                                            staticcall uniswapV2RouterAddress.WETH() with:
                                                    gas gas_remaining wei
                                            mem[(2 * ceil32(return_data.size)) + 640] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[64] = (4 * ceil32(return_data.size)) + 640
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                            mem[(2 * ceil32(return_data.size)) + 576] = ext_call.return_data[12 len 20]
                                            mem[(2 * ceil32(return_data.size)) + 608] = sub_e5148bd6Address
                                            if not this.address:
                                                revert with 0, 'ERC20: approve from the zero address'
                                            if not uniswapV2RouterAddress:
                                                revert with 0, 'ERC20: approve to the zero address'
                                            mem[0] = uniswapV2RouterAddress
                                            mem[32] = sha3(address(this.address), 10)
                                            allowance[address(this.address)][stor19].field_0 = balanceOf[address(this.address)] * marketingFee / stor14
                                            emit Approval((balanceOf[address(this.address)] * marketingFee / stor14), this.address, uniswapV2RouterAddress);
                                            mem[(4 * ceil32(return_data.size)) + 640] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                            mem[(4 * ceil32(return_data.size)) + 644] = balanceOf[address(this.address)] * marketingFee / stor14
                                            mem[(4 * ceil32(return_data.size)) + 676] = 0
                                            mem[(4 * ceil32(return_data.size)) + 708] = 160
                                            mem[(4 * ceil32(return_data.size)) + 804] = 3
                                            idx = 0
                                            s = (2 * ceil32(return_data.size)) + 544
                                            t = (4 * ceil32(return_data.size)) + 836
                                            while idx < mem[(2 * ceil32(return_data.size)) + 512]:
                                                mem[t] = mem[s + 12 len 20]
                                                idx = idx + 1
                                                s = s + 32
                                                t = t + 32
                                                continue 
                                            mem[(4 * ceil32(return_data.size)) + 740] = this.address
                                            mem[(4 * ceil32(return_data.size)) + 772] = block.timestamp
                                            require ext_code.size(uniswapV2RouterAddress)
                                            call uniswapV2RouterAddress.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args balanceOf[address(this.address)] * marketingFee / stor14, 0, 160, address(this.address), block.timestamp, mem[(4 * ceil32(return_data.size)) + 804 len (32 * mem[(2 * ceil32(return_data.size)) + 512]) + 32]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require ext_code.size(sub_e5148bd6Address)
                                            staticcall sub_e5148bd6Address.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == ext_call.return_data[0]
                                            mem[(4 * ceil32(return_data.size)) + 644] = marketingAddress
                                            mem[(4 * ceil32(return_data.size)) + 676] = ext_call.return_data[0]
                                            require ext_code.size(sub_e5148bd6Address)
                                            call sub_e5148bd6Address.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args mem[(4 * ceil32(return_data.size)) + 644 len (7 * ceil32(return_data.size)) + 64]
                                            mem[(4 * ceil32(return_data.size)) + 640] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                            stor22 = 0
                                            if stor11[address(msg.sender)]:
                                                if not msg.sender:
                                                    mem[(8 * ceil32(return_data.size)) + 640] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 644] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 676] = 37
                                                    mem[(8 * ceil32(return_data.size)) + 708] = 'ERC20: transfer from the zero ad'
                                                    mem[(8 * ceil32(return_data.size)) + 740] = 'dress'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 640
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if not arg1:
                                                    mem[(8 * ceil32(return_data.size)) + 640] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 644] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 676] = 35
                                                    mem[(8 * ceil32(return_data.size)) + 708] = 'ERC20: transfer to the zero addr'
                                                    mem[(8 * ceil32(return_data.size)) + 740] = 'ess'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 640
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if arg2 > balanceOf[address(msg.sender)]:
                                                    mem[(8 * ceil32(return_data.size)) + 736] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 740] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 772] = 38
                                                    mem[(8 * ceil32(return_data.size)) + 804 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 710 len 26]
                                                    mem[(8 * ceil32(return_data.size)) + 842] = 0
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 736
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if balanceOf[address(msg.sender)] < arg2:
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] -= arg2
                                                if balanceOf[address(arg1)] > -arg2 - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(arg1)] + arg2 >= balanceOf[address(arg1)]:
                                                    balanceOf[address(arg1)] += arg2
                                                    emit Transfer(arg2, msg.sender, arg1);
                                                    return 1
                                                mem[(8 * ceil32(return_data.size)) + 736] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[(8 * ceil32(return_data.size)) + 740] = 32
                                                mem[(8 * ceil32(return_data.size)) + 772] = 27
                                                mem[(8 * ceil32(return_data.size)) + 804] = 'SafeMath: addition overflow'
                                                revert with memory
                                                  from (8 * ceil32(return_data.size)) + 736
                                                   len (13 * ceil32(return_data.size)) + 100
                                            if stor11[address(arg1)]:
                                                if not msg.sender:
                                                    mem[(8 * ceil32(return_data.size)) + 640] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 644] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 676] = 37
                                                    mem[(8 * ceil32(return_data.size)) + 708] = 'ERC20: transfer from the zero ad'
                                                    mem[(8 * ceil32(return_data.size)) + 740] = 'dress'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 640
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if not arg1:
                                                    mem[(8 * ceil32(return_data.size)) + 640] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 644] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 676] = 35
                                                    mem[(8 * ceil32(return_data.size)) + 708] = 'ERC20: transfer to the zero addr'
                                                    mem[(8 * ceil32(return_data.size)) + 740] = 'ess'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 640
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if arg2 > balanceOf[address(msg.sender)]:
                                                    mem[(8 * ceil32(return_data.size)) + 736] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 740] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 772] = 38
                                                    mem[(8 * ceil32(return_data.size)) + 804 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 710 len 26]
                                                    mem[(8 * ceil32(return_data.size)) + 842] = 0
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 736
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if balanceOf[address(msg.sender)] < arg2:
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] -= arg2
                                                if balanceOf[address(arg1)] > -arg2 - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(arg1)] + arg2 >= balanceOf[address(arg1)]:
                                                    balanceOf[address(arg1)] += arg2
                                                    emit Transfer(arg2, msg.sender, arg1);
                                                    return 1
                                                mem[(8 * ceil32(return_data.size)) + 736] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[(8 * ceil32(return_data.size)) + 740] = 32
                                                mem[(8 * ceil32(return_data.size)) + 772] = 27
                                                mem[(8 * ceil32(return_data.size)) + 804] = 'SafeMath: addition overflow'
                                                revert with memory
                                                  from (8 * ceil32(return_data.size)) + 736
                                                   len (13 * ceil32(return_data.size)) + 100
                                            if totalFees <= 0:
                                                if not msg.sender:
                                                    mem[(8 * ceil32(return_data.size)) + 640] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 644] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 676] = 37
                                                    mem[(8 * ceil32(return_data.size)) + 708] = 'ERC20: transfer from the zero ad'
                                                    mem[(8 * ceil32(return_data.size)) + 740] = 'dress'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 640
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if not arg1:
                                                    mem[(8 * ceil32(return_data.size)) + 640] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 644] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 676] = 35
                                                    mem[(8 * ceil32(return_data.size)) + 708] = 'ERC20: transfer to the zero addr'
                                                    mem[(8 * ceil32(return_data.size)) + 740] = 'ess'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 640
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if arg2 > balanceOf[address(msg.sender)]:
                                                    mem[(8 * ceil32(return_data.size)) + 736] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 740] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 772] = 38
                                                    mem[(8 * ceil32(return_data.size)) + 804 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 710 len 26]
                                                    mem[(8 * ceil32(return_data.size)) + 842] = 0
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 736
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if balanceOf[address(msg.sender)] < arg2:
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] -= arg2
                                                if balanceOf[address(arg1)] > -arg2 - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(arg1)] + arg2 >= balanceOf[address(arg1)]:
                                                    balanceOf[address(arg1)] += arg2
                                                    emit Transfer(arg2, msg.sender, arg1);
                                                    return 1
                                                mem[(8 * ceil32(return_data.size)) + 736] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[(8 * ceil32(return_data.size)) + 740] = 32
                                                mem[(8 * ceil32(return_data.size)) + 772] = 27
                                                mem[(8 * ceil32(return_data.size)) + 804] = 'SafeMath: addition overflow'
                                                revert with memory
                                                  from (8 * ceil32(return_data.size)) + 736
                                                   len (13 * ceil32(return_data.size)) + 100
                                            if not arg2:
                                                if not arg2:
                                                    if 0 > arg2:
                                                        mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 868] = 30
                                                        mem[(8 * ceil32(return_data.size)) + 900] = 'SafeMath: subtraction overflow'
                                                        mem[(8 * ceil32(return_data.size)) + 930] = 0
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 832
                                                           len (13 * ceil32(return_data.size)) + 100
                                                    if arg2 < 0:
                                                        revert with 'NH{q', 17
                                                    if not msg.sender:
                                                        mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 868] = 37
                                                        mem[(8 * ceil32(return_data.size)) + 900] = 'ERC20: transfer from the zero ad'
                                                        mem[(8 * ceil32(return_data.size)) + 932] = 'dress'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 832
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if not this.address:
                                                        mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 868] = 35
                                                        mem[(8 * ceil32(return_data.size)) + 900] = 'ERC20: transfer to the zero addr'
                                                        mem[(8 * ceil32(return_data.size)) + 932] = 'ess'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 832
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if 0 > balanceOf[address(msg.sender)]:
                                                        mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 964] = 38
                                                        mem[(8 * ceil32(return_data.size)) + 996 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 902 len 26]
                                                        mem[(8 * ceil32(return_data.size)) + 1034] = 0
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 928
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if balanceOf[address(msg.sender)] < 0:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(this.address)] > -1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                                        mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 964] = 27
                                                        mem[(8 * ceil32(return_data.size)) + 996] = 'SafeMath: addition overflow'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 928
                                                           len (13 * ceil32(return_data.size)) + 100
                                                    emit Transfer(0, msg.sender, this.address);
                                                    if not msg.sender:
                                                        mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 964] = 37
                                                        mem[(8 * ceil32(return_data.size)) + 996] = 'ERC20: transfer from the zero ad'
                                                        mem[(8 * ceil32(return_data.size)) + 1028] = 'dress'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 928
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if 0 > balanceOf[address(msg.sender)]:
                                                        mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 1060] = 38
                                                        mem[(8 * ceil32(return_data.size)) + 1092 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 998 len 26]
                                                        mem[(8 * ceil32(return_data.size)) + 1130] = 0
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 1024
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if balanceOf[address(msg.sender)] < 0:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[57005] > -1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[57005] < balanceOf[57005]:
                                                        mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 1060] = 27
                                                        mem[(8 * ceil32(return_data.size)) + 1092] = 'SafeMath: addition overflow'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 1024
                                                           len (13 * ceil32(return_data.size)) + 100
                                                    emit Transfer(0, msg.sender, 57005);
                                                    emit TokenBurn(0, msg.sender);
                                                    if not msg.sender:
                                                        mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 1060] = 37
                                                        mem[(8 * ceil32(return_data.size)) + 1092] = 'ERC20: transfer from the zero ad'
                                                        mem[(8 * ceil32(return_data.size)) + 1124] = 'dress'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 1024
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if not arg1:
                                                        mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 1060] = 35
                                                        mem[(8 * ceil32(return_data.size)) + 1092] = 'ERC20: transfer to the zero addr'
                                                        mem[(8 * ceil32(return_data.size)) + 1124] = 'ess'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 1024
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if arg2 > balanceOf[address(msg.sender)]:
                                                        mem[(8 * ceil32(return_data.size)) + 1120] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 1124] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 1156] = 38
                                                        mem[(8 * ceil32(return_data.size)) + 1188 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 1094 len 26]
                                                        mem[(8 * ceil32(return_data.size)) + 1226] = 0
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 1120
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if balanceOf[address(msg.sender)] < arg2:
                                                        revert with 'NH{q', 17
                                                    balanceOf[address(msg.sender)] -= arg2
                                                    if balanceOf[address(arg1)] > -arg2 - 1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(arg1)] + arg2 >= balanceOf[address(arg1)]:
                                                        balanceOf[address(arg1)] += arg2
                                                        emit Transfer(arg2, msg.sender, arg1);
                                                        return 1
                                                else:
                                                    if arg2 and burnFee > -1 / arg2:
                                                        revert with 'NH{q', 17
                                                    if not arg2:
                                                        revert with 'NH{q', 18
                                                    if arg2 * burnFee / arg2 != burnFee:
                                                        mem[(8 * ceil32(return_data.size)) + 704] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 708] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 740] = 33
                                                        mem[(8 * ceil32(return_data.size)) + 772] = 'SafeMath: multiplication overflo'
                                                        mem[(8 * ceil32(return_data.size)) + 804] = 'w'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 704
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if 0 > -(arg2 * burnFee / 100) - 1:
                                                        revert with 'NH{q', 17
                                                    if arg2 * burnFee / 100 < 0:
                                                        mem[(8 * ceil32(return_data.size)) + 768] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 772] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 804] = 27
                                                        mem[(8 * ceil32(return_data.size)) + 836] = 'SafeMath: addition overflow'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 768
                                                           len (13 * ceil32(return_data.size)) + 100
                                                    if arg2 * burnFee / 100 > arg2:
                                                        mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 868] = 30
                                                        mem[(8 * ceil32(return_data.size)) + 900] = 'SafeMath: subtraction overflow'
                                                        mem[(8 * ceil32(return_data.size)) + 930] = 0
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 832
                                                           len (13 * ceil32(return_data.size)) + 100
                                                    if arg2 < arg2 * burnFee / 100:
                                                        revert with 'NH{q', 17
                                                    if not msg.sender:
                                                        mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 868] = 37
                                                        mem[(8 * ceil32(return_data.size)) + 900] = 'ERC20: transfer from the zero ad'
                                                        mem[(8 * ceil32(return_data.size)) + 932] = 'dress'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 832
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if not this.address:
                                                        mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 868] = 35
                                                        mem[(8 * ceil32(return_data.size)) + 900] = 'ERC20: transfer to the zero addr'
                                                        mem[(8 * ceil32(return_data.size)) + 932] = 'ess'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 832
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if 0 > balanceOf[address(msg.sender)]:
                                                        mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 964] = 38
                                                        mem[(8 * ceil32(return_data.size)) + 996 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 902 len 26]
                                                        mem[(8 * ceil32(return_data.size)) + 1034] = 0
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 928
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if balanceOf[address(msg.sender)] < 0:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(this.address)] > -1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                                        mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 964] = 27
                                                        mem[(8 * ceil32(return_data.size)) + 996] = 'SafeMath: addition overflow'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 928
                                                           len (13 * ceil32(return_data.size)) + 100
                                                    emit Transfer(0, msg.sender, this.address);
                                                    if not msg.sender:
                                                        mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 964] = 37
                                                        mem[(8 * ceil32(return_data.size)) + 996] = 'ERC20: transfer from the zero ad'
                                                        mem[(8 * ceil32(return_data.size)) + 1028] = 'dress'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 928
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if arg2 * burnFee / 100 > balanceOf[address(msg.sender)]:
                                                        mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 1060] = 38
                                                        mem[(8 * ceil32(return_data.size)) + 1092 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 998 len 26]
                                                        mem[(8 * ceil32(return_data.size)) + 1130] = 0
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 1024
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if balanceOf[address(msg.sender)] < arg2 * burnFee / 100:
                                                        revert with 'NH{q', 17
                                                    balanceOf[address(msg.sender)] -= arg2 * burnFee / 100
                                                    if balanceOf[57005] > -(arg2 * burnFee / 100) - 1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[57005] + (arg2 * burnFee / 100) < balanceOf[57005]:
                                                        mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 1060] = 27
                                                        mem[(8 * ceil32(return_data.size)) + 1092] = 'SafeMath: addition overflow'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 1024
                                                           len (13 * ceil32(return_data.size)) + 100
                                                    balanceOf[57005] += arg2 * burnFee / 100
                                                    emit Transfer((arg2 * burnFee / 100), msg.sender, 57005);
                                                    emit TokenBurn((arg2 * burnFee / 100), msg.sender);
                                                    if not msg.sender:
                                                        mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 1060] = 37
                                                        mem[(8 * ceil32(return_data.size)) + 1092] = 'ERC20: transfer from the zero ad'
                                                        mem[(8 * ceil32(return_data.size)) + 1124] = 'dress'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 1024
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if not arg1:
                                                        mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 1060] = 35
                                                        mem[(8 * ceil32(return_data.size)) + 1092] = 'ERC20: transfer to the zero addr'
                                                        mem[(8 * ceil32(return_data.size)) + 1124] = 'ess'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 1024
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if arg2 - (arg2 * burnFee / 100) > balanceOf[address(msg.sender)]:
                                                        mem[(8 * ceil32(return_data.size)) + 1120] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 1124] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 1156] = 38
                                                        mem[(8 * ceil32(return_data.size)) + 1188 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 1094 len 26]
                                                        mem[(8 * ceil32(return_data.size)) + 1226] = 0
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 1120
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if balanceOf[address(msg.sender)] < arg2 - (arg2 * burnFee / 100):
                                                        revert with 'NH{q', 17
                                                    balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * burnFee / 100)
                                                    if balanceOf[address(arg1)] > -arg2 + (arg2 * burnFee / 100) - 1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(arg1)] + arg2 - (arg2 * burnFee / 100) >= balanceOf[address(arg1)]:
                                                        balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * burnFee / 100)
                                                        emit Transfer((arg2 - (arg2 * burnFee / 100)), msg.sender, arg1);
                                                        return 1
                                            else:
                                                if arg2 and stor14 > -1 / arg2:
                                                    revert with 'NH{q', 17
                                                if not arg2:
                                                    revert with 'NH{q', 18
                                                if arg2 * stor14 / arg2 != stor14:
                                                    mem[(8 * ceil32(return_data.size)) + 640] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 644] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 676] = 33
                                                    mem[(8 * ceil32(return_data.size)) + 708] = 'SafeMath: multiplication overflo'
                                                    mem[(8 * ceil32(return_data.size)) + 740] = 'w'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 640
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if not arg2:
                                                    if arg2 * stor14 / 100 > -1:
                                                        revert with 'NH{q', 17
                                                    if arg2 * stor14 / 100 < arg2 * stor14 / 100:
                                                        mem[(8 * ceil32(return_data.size)) + 768] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 772] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 804] = 27
                                                        mem[(8 * ceil32(return_data.size)) + 836] = 'SafeMath: addition overflow'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 768
                                                           len (13 * ceil32(return_data.size)) + 100
                                                    if arg2 * stor14 / 100 > arg2:
                                                        mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 868] = 30
                                                        mem[(8 * ceil32(return_data.size)) + 900] = 'SafeMath: subtraction overflow'
                                                        mem[(8 * ceil32(return_data.size)) + 930] = 0
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 832
                                                           len (13 * ceil32(return_data.size)) + 100
                                                    if arg2 < arg2 * stor14 / 100:
                                                        revert with 'NH{q', 17
                                                    if not msg.sender:
                                                        mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 868] = 37
                                                        mem[(8 * ceil32(return_data.size)) + 900] = 'ERC20: transfer from the zero ad'
                                                        mem[(8 * ceil32(return_data.size)) + 932] = 'dress'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 832
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if not this.address:
                                                        mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 868] = 35
                                                        mem[(8 * ceil32(return_data.size)) + 900] = 'ERC20: transfer to the zero addr'
                                                        mem[(8 * ceil32(return_data.size)) + 932] = 'ess'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 832
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if arg2 * stor14 / 100 > balanceOf[address(msg.sender)]:
                                                        mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 964] = 38
                                                        mem[(8 * ceil32(return_data.size)) + 996 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 902 len 26]
                                                        mem[(8 * ceil32(return_data.size)) + 1034] = 0
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 928
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if balanceOf[address(msg.sender)] < arg2 * stor14 / 100:
                                                        revert with 'NH{q', 17
                                                    balanceOf[address(msg.sender)] -= arg2 * stor14 / 100
                                                    if balanceOf[address(this.address)] > -(arg2 * stor14 / 100) - 1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(this.address)] + (arg2 * stor14 / 100) < balanceOf[address(this.address)]:
                                                        mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 964] = 27
                                                        mem[(8 * ceil32(return_data.size)) + 996] = 'SafeMath: addition overflow'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 928
                                                           len (13 * ceil32(return_data.size)) + 100
                                                    balanceOf[address(this.address)] += arg2 * stor14 / 100
                                                    emit Transfer((arg2 * stor14 / 100), msg.sender, this.address);
                                                    if not msg.sender:
                                                        mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 964] = 37
                                                        mem[(8 * ceil32(return_data.size)) + 996] = 'ERC20: transfer from the zero ad'
                                                        mem[(8 * ceil32(return_data.size)) + 1028] = 'dress'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 928
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if 0 > balanceOf[address(msg.sender)]:
                                                        mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 1060] = 38
                                                        mem[(8 * ceil32(return_data.size)) + 1092 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 998 len 26]
                                                        mem[(8 * ceil32(return_data.size)) + 1130] = 0
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 1024
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if balanceOf[address(msg.sender)] < 0:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[57005] > -1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[57005] < balanceOf[57005]:
                                                        mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 1060] = 27
                                                        mem[(8 * ceil32(return_data.size)) + 1092] = 'SafeMath: addition overflow'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 1024
                                                           len (13 * ceil32(return_data.size)) + 100
                                                    emit Transfer(0, msg.sender, 57005);
                                                    emit TokenBurn(0, msg.sender);
                                                    if not msg.sender:
                                                        mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 1060] = 37
                                                        mem[(8 * ceil32(return_data.size)) + 1092] = 'ERC20: transfer from the zero ad'
                                                        mem[(8 * ceil32(return_data.size)) + 1124] = 'dress'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 1024
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if not arg1:
                                                        mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 1060] = 35
                                                        mem[(8 * ceil32(return_data.size)) + 1092] = 'ERC20: transfer to the zero addr'
                                                        mem[(8 * ceil32(return_data.size)) + 1124] = 'ess'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 1024
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if arg2 - (arg2 * stor14 / 100) > balanceOf[address(msg.sender)]:
                                                        mem[(8 * ceil32(return_data.size)) + 1120] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 1124] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 1156] = 38
                                                        mem[(8 * ceil32(return_data.size)) + 1188 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 1094 len 26]
                                                        mem[(8 * ceil32(return_data.size)) + 1226] = 0
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 1120
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor14 / 100):
                                                        revert with 'NH{q', 17
                                                    balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor14 / 100)
                                                    if balanceOf[address(arg1)] > -arg2 + (arg2 * stor14 / 100) - 1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) >= balanceOf[address(arg1)]:
                                                        balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100)
                                                        emit Transfer((arg2 - (arg2 * stor14 / 100)), msg.sender, arg1);
                                                        return 1
                                                else:
                                                    if arg2 and burnFee > -1 / arg2:
                                                        revert with 'NH{q', 17
                                                    if not arg2:
                                                        revert with 'NH{q', 18
                                                    if arg2 * burnFee / arg2 != burnFee:
                                                        mem[(8 * ceil32(return_data.size)) + 704] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 708] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 740] = 33
                                                        mem[(8 * ceil32(return_data.size)) + 772] = 'SafeMath: multiplication overflo'
                                                        mem[(8 * ceil32(return_data.size)) + 804] = 'w'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 704
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if arg2 * stor14 / 100 > -(arg2 * burnFee / 100) - 1:
                                                        revert with 'NH{q', 17
                                                    if (arg2 * stor14 / 100) + (arg2 * burnFee / 100) < arg2 * stor14 / 100:
                                                        mem[(8 * ceil32(return_data.size)) + 768] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 772] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 804] = 27
                                                        mem[(8 * ceil32(return_data.size)) + 836] = 'SafeMath: addition overflow'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 768
                                                           len (13 * ceil32(return_data.size)) + 100
                                                    if (arg2 * stor14 / 100) + (arg2 * burnFee / 100) > arg2:
                                                        mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 868] = 30
                                                        mem[(8 * ceil32(return_data.size)) + 900] = 'SafeMath: subtraction overflow'
                                                        mem[(8 * ceil32(return_data.size)) + 930] = 0
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 832
                                                           len (13 * ceil32(return_data.size)) + 100
                                                    if arg2 < (arg2 * stor14 / 100) + (arg2 * burnFee / 100):
                                                        revert with 'NH{q', 17
                                                    if not msg.sender:
                                                        mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 868] = 37
                                                        mem[(8 * ceil32(return_data.size)) + 900] = 'ERC20: transfer from the zero ad'
                                                        mem[(8 * ceil32(return_data.size)) + 932] = 'dress'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 832
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if not this.address:
                                                        mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 868] = 35
                                                        mem[(8 * ceil32(return_data.size)) + 900] = 'ERC20: transfer to the zero addr'
                                                        mem[(8 * ceil32(return_data.size)) + 932] = 'ess'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 832
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if arg2 * stor14 / 100 > balanceOf[address(msg.sender)]:
                                                        mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 964] = 38
                                                        mem[(8 * ceil32(return_data.size)) + 996 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 902 len 26]
                                                        mem[(8 * ceil32(return_data.size)) + 1034] = 0
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 928
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if balanceOf[address(msg.sender)] < arg2 * stor14 / 100:
                                                        revert with 'NH{q', 17
                                                    balanceOf[address(msg.sender)] -= arg2 * stor14 / 100
                                                    if balanceOf[address(this.address)] > -(arg2 * stor14 / 100) - 1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(this.address)] + (arg2 * stor14 / 100) < balanceOf[address(this.address)]:
                                                        mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 964] = 27
                                                        mem[(8 * ceil32(return_data.size)) + 996] = 'SafeMath: addition overflow'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 928
                                                           len (13 * ceil32(return_data.size)) + 100
                                                    balanceOf[address(this.address)] += arg2 * stor14 / 100
                                                    emit Transfer((arg2 * stor14 / 100), msg.sender, this.address);
                                                    if not msg.sender:
                                                        mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 964] = 37
                                                        mem[(8 * ceil32(return_data.size)) + 996] = 'ERC20: transfer from the zero ad'
                                                        mem[(8 * ceil32(return_data.size)) + 1028] = 'dress'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 928
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if arg2 * burnFee / 100 > balanceOf[address(msg.sender)]:
                                                        mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 1060] = 38
                                                        mem[(8 * ceil32(return_data.size)) + 1092 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 998 len 26]
                                                        mem[(8 * ceil32(return_data.size)) + 1130] = 0
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 1024
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if balanceOf[address(msg.sender)] < arg2 * burnFee / 100:
                                                        revert with 'NH{q', 17
                                                    balanceOf[address(msg.sender)] -= arg2 * burnFee / 100
                                                    if balanceOf[57005] > -(arg2 * burnFee / 100) - 1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[57005] + (arg2 * burnFee / 100) < balanceOf[57005]:
                                                        mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 1060] = 27
                                                        mem[(8 * ceil32(return_data.size)) + 1092] = 'SafeMath: addition overflow'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 1024
                                                           len (13 * ceil32(return_data.size)) + 100
                                                    balanceOf[57005] += arg2 * burnFee / 100
                                                    emit Transfer((arg2 * burnFee / 100), msg.sender, 57005);
                                                    emit TokenBurn((arg2 * burnFee / 100), msg.sender);
                                                    if not msg.sender:
                                                        mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 1060] = 37
                                                        mem[(8 * ceil32(return_data.size)) + 1092] = 'ERC20: transfer from the zero ad'
                                                        mem[(8 * ceil32(return_data.size)) + 1124] = 'dress'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 1024
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if not arg1:
                                                        mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 1060] = 35
                                                        mem[(8 * ceil32(return_data.size)) + 1092] = 'ERC20: transfer to the zero addr'
                                                        mem[(8 * ceil32(return_data.size)) + 1124] = 'ess'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 1024
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100) > balanceOf[address(msg.sender)]:
                                                        mem[(8 * ceil32(return_data.size)) + 1120] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 1124] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 1156] = 38
                                                        mem[(8 * ceil32(return_data.size)) + 1188 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 1094 len 26]
                                                        mem[(8 * ceil32(return_data.size)) + 1226] = 0
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 1120
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100):
                                                        revert with 'NH{q', 17
                                                    balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor14 / 100) + (arg2 * burnFee / 100)
                                                    if balanceOf[address(arg1)] > -arg2 + (arg2 * stor14 / 100) + (arg2 * burnFee / 100) - 1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100) >= balanceOf[address(arg1)]:
                                                        balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100)
                                                        emit Transfer((arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100)), msg.sender, arg1);
                                                        return 1
                                            mem[(8 * ceil32(return_data.size)) + 1120] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[(8 * ceil32(return_data.size)) + 1124] = 32
                                            mem[(8 * ceil32(return_data.size)) + 1156] = 27
                                            mem[(8 * ceil32(return_data.size)) + 1188] = 'SafeMath: addition overflow'
                                            revert with memory
                                              from (8 * ceil32(return_data.size)) + 1120
                                               len (13 * ceil32(return_data.size)) + 100
                                        mem[160] = 26
                                        mem[192] = 'SafeMath: division by zero'
                                        if stor14 <= 0:
                                            revert with 0, 'SafeMath: division by zero', 0
                                        if not stor14:
                                            revert with 'NH{q', 18
                                        mem[224] = 26
                                        mem[256] = 'SafeMath: division by zero'
                                        mem[288] = 30
                                        mem[320] = 'SafeMath: subtraction overflow'
                                        if 0 / stor14 / 2 > 0 / stor14:
                                            revert with 0, 'SafeMath: subtraction overflow', 0
                                        if 0 / stor14 < 0 / stor14 / 2:
                                            revert with 'NH{q', 17
                                        mem[352] = 2
                                        mem[384] = this.address
                                        require ext_code.size(uniswapV2RouterAddress)
                                        staticcall uniswapV2RouterAddress.WETH() with:
                                                gas gas_remaining wei
                                        mem[448] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                        mem[416] = ext_call.return_data[12 len 20]
                                        if not this.address:
                                            revert with 0, 'ERC20: approve from the zero address'
                                        if not uniswapV2RouterAddress:
                                            revert with 0, 'ERC20: approve to the zero address'
                                        allowance[address(this.address)][stor19].field_0 = 0 / stor14 / 2
                                        allowance[address(this.address)][stor19].field_255 = 0
                                        emit Approval((0 / stor14 / 2), this.address, uniswapV2RouterAddress);
                                        mem[ceil32(return_data.size) + 448] = 0x791ac94700000000000000000000000000000000000000000000000000000000
                                        mem[ceil32(return_data.size) + 452] = 0 / stor14 / 2
                                        idx = 0
                                        s = 384
                                        t = ceil32(return_data.size) + 644
                                        while idx < 2:
                                            mem[t] = mem[s + 12 len 20]
                                            idx = idx + 1
                                            s = s + 32
                                            t = t + 32
                                            continue 
                                        require ext_code.size(uniswapV2RouterAddress)
                                        call uniswapV2RouterAddress.swapExactTokensForETHSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                             gas gas_remaining wei
                                            args Mask(255, 1, 0 / stor14), 0, 160, address(this.address), block.timestamp, 2, mem[ceil32(return_data.size) + 644 len 64]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[ceil32(return_data.size) + 448] = 30
                                        mem[ceil32(return_data.size) + 480] = 'SafeMath: subtraction overflow'
                                        if eth.balance(this.address) > eth.balance(this.address):
                                            revert with 0, 'SafeMath: subtraction overflow', 0
                                        if eth.balance(this.address) < eth.balance(this.address):
                                            revert with 'NH{q', 17
                                        if not this.address:
                                            revert with 0, 'ERC20: approve from the zero address'
                                        if not uniswapV2RouterAddress:
                                            revert with 0, 'ERC20: approve to the zero address'
                                        allowance[address(this.address)][stor19].field_0 = (0 / stor14) - (0 / stor14 / 2)
                                        emit Approval(((0 / stor14) - (0 / stor14 / 2)), this.address, uniswapV2RouterAddress);
                                        mem[ceil32(return_data.size) + 580] = 0
                                        mem[ceil32(return_data.size) + 612] = 0
                                        mem[ceil32(return_data.size) + 644] = owner
                                        mem[ceil32(return_data.size) + 676] = block.timestamp
                                        require ext_code.size(uniswapV2RouterAddress)
                                        call uniswapV2RouterAddress.addLiquidityETH(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                             gas gas_remaining wei
                                            args address(this.address), (0 / stor14) - (0 / stor14 / 2), 0, 0, owner, block.timestamp
                                        mem[ceil32(return_data.size) + 512 len 96] = ext_call.return_data[0 len 96]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 96
                                        require ext_call.return_data[0] == ext_call.return_data[0]
                                        require ext_call.return_data[32] == ext_call.return_data[32]
                                        require ext_call.return_data[64] == ext_call.return_data[64]
                                        mem[(2 * ceil32(return_data.size)) + 512] = 3
                                        mem[(2 * ceil32(return_data.size)) + 544] = this.address
                                        require ext_code.size(uniswapV2RouterAddress)
                                        staticcall uniswapV2RouterAddress.WETH() with:
                                                gas gas_remaining wei
                                        mem[(2 * ceil32(return_data.size)) + 640] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[64] = (4 * ceil32(return_data.size)) + 640
                                        require return_data.size >= 32
                                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                        mem[(2 * ceil32(return_data.size)) + 576] = ext_call.return_data[12 len 20]
                                        mem[(2 * ceil32(return_data.size)) + 608] = sub_e5148bd6Address
                                        if not this.address:
                                            revert with 0, 'ERC20: approve from the zero address'
                                        if not uniswapV2RouterAddress:
                                            revert with 0, 'ERC20: approve to the zero address'
                                        mem[0] = uniswapV2RouterAddress
                                        mem[32] = sha3(address(this.address), 10)
                                        allowance[address(this.address)][stor19].field_0 = 0 / stor14
                                        emit Approval((0 / stor14), this.address, uniswapV2RouterAddress);
                                        mem[(4 * ceil32(return_data.size)) + 640] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                        mem[(4 * ceil32(return_data.size)) + 644] = 0 / stor14
                                        mem[(4 * ceil32(return_data.size)) + 676] = 0
                                        mem[(4 * ceil32(return_data.size)) + 708] = 160
                                        mem[(4 * ceil32(return_data.size)) + 804] = 3
                                        idx = 0
                                        s = (2 * ceil32(return_data.size)) + 544
                                        t = (4 * ceil32(return_data.size)) + 836
                                        while idx < mem[(2 * ceil32(return_data.size)) + 512]:
                                            mem[t] = mem[s + 12 len 20]
                                            idx = idx + 1
                                            s = s + 32
                                            t = t + 32
                                            continue 
                                        mem[(4 * ceil32(return_data.size)) + 740] = this.address
                                        mem[(4 * ceil32(return_data.size)) + 772] = block.timestamp
                                        require ext_code.size(uniswapV2RouterAddress)
                                        call uniswapV2RouterAddress.mem[mem[64] len 4] with:
                                             gas gas_remaining wei
                                            args mem[mem[64] + 4 len (4 * ceil32(return_data.size)) + (32 * mem[(2 * ceil32(return_data.size)) + 512]) + -mem[64] + 832]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        mem[mem[64] + 4] = this.address
                                        require ext_code.size(sub_e5148bd6Address)
                                        staticcall sub_e5148bd6Address.0x70a08231 with:
                                                gas gas_remaining wei
                                               args address(this.address)
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _10837 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _10853 = mem[_10837]
                                        require mem[_10837] == mem[_10837]
                                        mem[mem[64] + 4] = marketingAddress
                                        mem[mem[64] + 36] = _10853
                                        require ext_code.size(sub_e5148bd6Address)
                                        call sub_e5148bd6Address.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args marketingAddress, _10853
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _10949 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_10949] == bool(mem[_10949])
                                        stor22 = 0
                                        mem[0] = msg.sender
                                        mem[32] = 11
                                        if stor11[address(msg.sender)]:
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if not arg1:
                                                revert with 0, 'ERC20: transfer to the zero address'
                                            _11023 = mem[64]
                                            mem[64] = mem[64] + 96
                                            mem[_11023] = 38
                                            mem[_11023 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                            if arg2 > balanceOf[address(msg.sender)]:
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 38
                                                mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_11023 + 70 len 26]
                                                revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                            if balanceOf[address(msg.sender)] < arg2:
                                                revert with 'NH{q', 17
                                            balanceOf[address(msg.sender)] -= arg2
                                            if balanceOf[address(arg1)] > -arg2 - 1:
                                                revert with 'NH{q', 17
                                            if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(arg1)] += arg2
                                            emit Transfer(arg2, msg.sender, arg1);
                                        else:
                                            mem[0] = arg1
                                            mem[32] = 11
                                            if stor11[address(arg1)]:
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if not arg1:
                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                _11063 = mem[64]
                                                mem[64] = mem[64] + 96
                                                mem[_11063] = 38
                                                mem[_11063 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                if arg2 > balanceOf[address(msg.sender)]:
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 38
                                                    mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_11063 + 70 len 26]
                                                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                if balanceOf[address(msg.sender)] < arg2:
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] -= arg2
                                                if balanceOf[address(arg1)] > -arg2 - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                balanceOf[address(arg1)] += arg2
                                                emit Transfer(arg2, msg.sender, arg1);
                                            else:
                                                if totalFees <= 0:
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if not arg1:
                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                    _11107 = mem[64]
                                                    mem[64] = mem[64] + 96
                                                    mem[_11107] = 38
                                                    mem[_11107 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                    if arg2 > balanceOf[address(msg.sender)]:
                                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = 32
                                                        mem[mem[64] + 36] = 38
                                                        mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_11107 + 70 len 26]
                                                        revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                    if balanceOf[address(msg.sender)] < arg2:
                                                        revert with 'NH{q', 17
                                                    balanceOf[address(msg.sender)] -= arg2
                                                    if balanceOf[address(arg1)] > -arg2 - 1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    balanceOf[address(arg1)] += arg2
                                                    emit Transfer(arg2, msg.sender, arg1);
                                                else:
                                                    if not arg2:
                                                        _11147 = mem[64]
                                                        mem[64] = mem[64] + 64
                                                        mem[_11147] = 26
                                                        mem[_11147 + 32] = 'SafeMath: division by zero'
                                                        if not arg2:
                                                            _11469 = mem[64]
                                                            mem[64] = mem[64] + 64
                                                            mem[_11469] = 26
                                                            mem[_11469 + 32] = 'SafeMath: division by zero'
                                                            _11745 = mem[64]
                                                            mem[64] = mem[64] + 64
                                                            mem[_11745] = 30
                                                            mem[_11745 + 32] = 'SafeMath: subtraction overflow'
                                                            if 0 > arg2:
                                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                                            if arg2 < 0:
                                                                revert with 'NH{q', 17
                                                            if not msg.sender:
                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                            if not this.address:
                                                                revert with 0, 'ERC20: transfer to the zero address'
                                                            _11903 = mem[64]
                                                            mem[64] = mem[64] + 96
                                                            mem[_11903] = 38
                                                            mem[_11903 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                            if 0 > balanceOf[address(msg.sender)]:
                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = 32
                                                                mem[mem[64] + 36] = 38
                                                                mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_11903 + 70 len 26]
                                                                revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                            if balanceOf[address(msg.sender)] < 0:
                                                                revert with 'NH{q', 17
                                                            if balanceOf[address(this.address)] > -1:
                                                                revert with 'NH{q', 17
                                                            if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            mem[0] = this.address
                                                            mem[32] = 9
                                                            emit Transfer(0, msg.sender, this.address);
                                                            if not msg.sender:
                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                            _12588 = mem[64]
                                                            mem[64] = mem[64] + 96
                                                            mem[_12588] = 38
                                                            mem[_12588 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                            if 0 > balanceOf[address(msg.sender)]:
                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = 32
                                                                mem[mem[64] + 36] = 38
                                                                mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_12588 + 70 len 26]
                                                                revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                            if balanceOf[address(msg.sender)] < 0:
                                                                revert with 'NH{q', 17
                                                            if balanceOf[57005] > -1:
                                                                revert with 'NH{q', 17
                                                            if balanceOf[57005] < balanceOf[57005]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            mem[0] = 57005
                                                            mem[32] = 9
                                                            emit Transfer(0, msg.sender, 57005);
                                                            emit TokenBurn(0, msg.sender);
                                                            if not msg.sender:
                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                            if not arg1:
                                                                revert with 0, 'ERC20: transfer to the zero address'
                                                            _13454 = mem[64]
                                                            mem[64] = mem[64] + 96
                                                            mem[_13454] = 38
                                                            mem[_13454 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                            if arg2 > balanceOf[address(msg.sender)]:
                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = 32
                                                                mem[mem[64] + 36] = 38
                                                                mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_13454 + 70 len 26]
                                                                revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                            if balanceOf[address(msg.sender)] < arg2:
                                                                revert with 'NH{q', 17
                                                            balanceOf[address(msg.sender)] -= arg2
                                                            if balanceOf[address(arg1)] > -arg2 - 1:
                                                                revert with 'NH{q', 17
                                                            if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            balanceOf[address(arg1)] += arg2
                                                            emit Transfer(arg2, msg.sender, arg1);
                                                        else:
                                                            if arg2 and burnFee > -1 / arg2:
                                                                revert with 'NH{q', 17
                                                            if not arg2:
                                                                revert with 'NH{q', 18
                                                            if arg2 * burnFee / arg2 != burnFee:
                                                                revert with 0, 'SafeMath: multiplication overflow'
                                                            _11676 = mem[64]
                                                            mem[64] = mem[64] + 64
                                                            mem[_11676] = 26
                                                            mem[_11676 + 32] = 'SafeMath: division by zero'
                                                            if 0 > -(arg2 * burnFee / 100) - 1:
                                                                revert with 'NH{q', 17
                                                            if arg2 * burnFee / 100 < 0:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            _11926 = mem[64]
                                                            mem[64] = mem[64] + 64
                                                            mem[_11926] = 30
                                                            mem[_11926 + 32] = 'SafeMath: subtraction overflow'
                                                            if arg2 * burnFee / 100 > arg2:
                                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                                            if arg2 < arg2 * burnFee / 100:
                                                                revert with 'NH{q', 17
                                                            if not msg.sender:
                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                            if not this.address:
                                                                revert with 0, 'ERC20: transfer to the zero address'
                                                            _12204 = mem[64]
                                                            mem[64] = mem[64] + 96
                                                            mem[_12204] = 38
                                                            mem[_12204 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                            if 0 > balanceOf[address(msg.sender)]:
                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = 32
                                                                mem[mem[64] + 36] = 38
                                                                mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_12204 + 70 len 26]
                                                                revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                            if balanceOf[address(msg.sender)] < 0:
                                                                revert with 'NH{q', 17
                                                            if balanceOf[address(this.address)] > -1:
                                                                revert with 'NH{q', 17
                                                            if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            mem[0] = this.address
                                                            mem[32] = 9
                                                            emit Transfer(0, msg.sender, this.address);
                                                            if not msg.sender:
                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                            _12951 = mem[64]
                                                            mem[64] = mem[64] + 96
                                                            mem[_12951] = 38
                                                            mem[_12951 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                            if arg2 * burnFee / 100 > balanceOf[address(msg.sender)]:
                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = 32
                                                                mem[mem[64] + 36] = 38
                                                                mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_12951 + 70 len 26]
                                                                revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                            if balanceOf[address(msg.sender)] < arg2 * burnFee / 100:
                                                                revert with 'NH{q', 17
                                                            balanceOf[address(msg.sender)] -= arg2 * burnFee / 100
                                                            if balanceOf[57005] > -(arg2 * burnFee / 100) - 1:
                                                                revert with 'NH{q', 17
                                                            if balanceOf[57005] + (arg2 * burnFee / 100) < balanceOf[57005]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            mem[0] = 57005
                                                            mem[32] = 9
                                                            balanceOf[57005] += arg2 * burnFee / 100
                                                            emit Transfer((arg2 * burnFee / 100), msg.sender, 57005);
                                                            emit TokenBurn((arg2 * burnFee / 100), msg.sender);
                                                            if not msg.sender:
                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                            if not arg1:
                                                                revert with 0, 'ERC20: transfer to the zero address'
                                                            _14206 = mem[64]
                                                            mem[64] = mem[64] + 96
                                                            mem[_14206] = 38
                                                            mem[_14206 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                            if arg2 - (arg2 * burnFee / 100) > balanceOf[address(msg.sender)]:
                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = 32
                                                                mem[mem[64] + 36] = 38
                                                                mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_14206 + 70 len 26]
                                                                revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                            if balanceOf[address(msg.sender)] < arg2 - (arg2 * burnFee / 100):
                                                                revert with 'NH{q', 17
                                                            balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * burnFee / 100)
                                                            if balanceOf[address(arg1)] > -arg2 + (arg2 * burnFee / 100) - 1:
                                                                revert with 'NH{q', 17
                                                            if balanceOf[address(arg1)] + arg2 - (arg2 * burnFee / 100) < balanceOf[address(arg1)]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * burnFee / 100)
                                                            emit Transfer((arg2 - (arg2 * burnFee / 100)), msg.sender, arg1);
                                                    else:
                                                        if arg2 and stor14 > -1 / arg2:
                                                            revert with 'NH{q', 17
                                                        if not arg2:
                                                            revert with 'NH{q', 18
                                                        if arg2 * stor14 / arg2 != stor14:
                                                            revert with 0, 'SafeMath: multiplication overflow'
                                                        _11420 = mem[64]
                                                        mem[64] = mem[64] + 64
                                                        mem[_11420] = 26
                                                        mem[_11420 + 32] = 'SafeMath: division by zero'
                                                        if not arg2:
                                                            _11675 = mem[64]
                                                            mem[64] = mem[64] + 64
                                                            mem[_11675] = 26
                                                            mem[_11675 + 32] = 'SafeMath: division by zero'
                                                            if arg2 * stor14 / 100 > -1:
                                                                revert with 'NH{q', 17
                                                            if arg2 * stor14 / 100 < arg2 * stor14 / 100:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            _11925 = mem[64]
                                                            mem[64] = mem[64] + 64
                                                            mem[_11925] = 30
                                                            mem[_11925 + 32] = 'SafeMath: subtraction overflow'
                                                            if arg2 * stor14 / 100 > arg2:
                                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                                            if arg2 < arg2 * stor14 / 100:
                                                                revert with 'NH{q', 17
                                                            if not msg.sender:
                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                            if not this.address:
                                                                revert with 0, 'ERC20: transfer to the zero address'
                                                            _12201 = mem[64]
                                                            mem[64] = mem[64] + 96
                                                            mem[_12201] = 38
                                                            mem[_12201 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                            if arg2 * stor14 / 100 > balanceOf[address(msg.sender)]:
                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = 32
                                                                mem[mem[64] + 36] = 38
                                                                mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_12201 + 70 len 26]
                                                                revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                            if balanceOf[address(msg.sender)] < arg2 * stor14 / 100:
                                                                revert with 'NH{q', 17
                                                            balanceOf[address(msg.sender)] -= arg2 * stor14 / 100
                                                            if balanceOf[address(this.address)] > -(arg2 * stor14 / 100) - 1:
                                                                revert with 'NH{q', 17
                                                            if balanceOf[address(this.address)] + (arg2 * stor14 / 100) < balanceOf[address(this.address)]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            mem[0] = this.address
                                                            mem[32] = 9
                                                            balanceOf[address(this.address)] += arg2 * stor14 / 100
                                                            emit Transfer((arg2 * stor14 / 100), msg.sender, this.address);
                                                            if not msg.sender:
                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                            _12949 = mem[64]
                                                            mem[64] = mem[64] + 96
                                                            mem[_12949] = 38
                                                            mem[_12949 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                            if 0 > balanceOf[address(msg.sender)]:
                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = 32
                                                                mem[mem[64] + 36] = 38
                                                                mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_12949 + 70 len 26]
                                                                revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                            if balanceOf[address(msg.sender)] < 0:
                                                                revert with 'NH{q', 17
                                                            if balanceOf[57005] > -1:
                                                                revert with 'NH{q', 17
                                                            if balanceOf[57005] < balanceOf[57005]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            mem[0] = 57005
                                                            mem[32] = 9
                                                            emit Transfer(0, msg.sender, 57005);
                                                            emit TokenBurn(0, msg.sender);
                                                            if not msg.sender:
                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                            if not arg1:
                                                                revert with 0, 'ERC20: transfer to the zero address'
                                                            _14203 = mem[64]
                                                            mem[64] = mem[64] + 96
                                                            mem[_14203] = 38
                                                            mem[_14203 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                            if arg2 - (arg2 * stor14 / 100) > balanceOf[address(msg.sender)]:
                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = 32
                                                                mem[mem[64] + 36] = 38
                                                                mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_14203 + 70 len 26]
                                                                revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                            if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor14 / 100):
                                                                revert with 'NH{q', 17
                                                            balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor14 / 100)
                                                            if balanceOf[address(arg1)] > -arg2 + (arg2 * stor14 / 100) - 1:
                                                                revert with 'NH{q', 17
                                                            if balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) < balanceOf[address(arg1)]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100)
                                                            emit Transfer((arg2 - (arg2 * stor14 / 100)), msg.sender, arg1);
                                                        else:
                                                            if arg2 and burnFee > -1 / arg2:
                                                                revert with 'NH{q', 17
                                                            if not arg2:
                                                                revert with 'NH{q', 18
                                                            if arg2 * burnFee / arg2 != burnFee:
                                                                revert with 0, 'SafeMath: multiplication overflow'
                                                            _11788 = mem[64]
                                                            mem[64] = mem[64] + 64
                                                            mem[_11788] = 26
                                                            mem[_11788 + 32] = 'SafeMath: division by zero'
                                                            if arg2 * stor14 / 100 > -(arg2 * burnFee / 100) - 1:
                                                                revert with 'NH{q', 17
                                                            if (arg2 * stor14 / 100) + (arg2 * burnFee / 100) < arg2 * stor14 / 100:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            _12221 = mem[64]
                                                            mem[64] = mem[64] + 64
                                                            mem[_12221] = 30
                                                            mem[_12221 + 32] = 'SafeMath: subtraction overflow'
                                                            if (arg2 * stor14 / 100) + (arg2 * burnFee / 100) > arg2:
                                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                                            if arg2 < (arg2 * stor14 / 100) + (arg2 * burnFee / 100):
                                                                revert with 'NH{q', 17
                                                            if not msg.sender:
                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                            if not this.address:
                                                                revert with 0, 'ERC20: transfer to the zero address'
                                                            _12585 = mem[64]
                                                            mem[64] = mem[64] + 96
                                                            mem[_12585] = 38
                                                            mem[_12585 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                            if arg2 * stor14 / 100 > balanceOf[address(msg.sender)]:
                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = 32
                                                                mem[mem[64] + 36] = 38
                                                                mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_12585 + 70 len 26]
                                                                revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                            if balanceOf[address(msg.sender)] < arg2 * stor14 / 100:
                                                                revert with 'NH{q', 17
                                                            balanceOf[address(msg.sender)] -= arg2 * stor14 / 100
                                                            if balanceOf[address(this.address)] > -(arg2 * stor14 / 100) - 1:
                                                                revert with 'NH{q', 17
                                                            if balanceOf[address(this.address)] + (arg2 * stor14 / 100) < balanceOf[address(this.address)]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            mem[0] = this.address
                                                            mem[32] = 9
                                                            balanceOf[address(this.address)] += arg2 * stor14 / 100
                                                            emit Transfer((arg2 * stor14 / 100), msg.sender, this.address);
                                                            if not msg.sender:
                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                            _13271 = mem[64]
                                                            mem[64] = mem[64] + 96
                                                            mem[_13271] = 38
                                                            mem[_13271 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                            if arg2 * burnFee / 100 > balanceOf[address(msg.sender)]:
                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = 32
                                                                mem[mem[64] + 36] = 38
                                                                mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_13271 + 70 len 26]
                                                                revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                            if balanceOf[address(msg.sender)] < arg2 * burnFee / 100:
                                                                revert with 'NH{q', 17
                                                            balanceOf[address(msg.sender)] -= arg2 * burnFee / 100
                                                            if balanceOf[57005] > -(arg2 * burnFee / 100) - 1:
                                                                revert with 'NH{q', 17
                                                            if balanceOf[57005] + (arg2 * burnFee / 100) < balanceOf[57005]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            mem[0] = 57005
                                                            mem[32] = 9
                                                            balanceOf[57005] += arg2 * burnFee / 100
                                                            emit Transfer((arg2 * burnFee / 100), msg.sender, 57005);
                                                            emit TokenBurn((arg2 * burnFee / 100), msg.sender);
                                                            if not msg.sender:
                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                            if not arg1:
                                                                revert with 0, 'ERC20: transfer to the zero address'
                                                            _14530 = mem[64]
                                                            mem[64] = mem[64] + 96
                                                            mem[_14530] = 38
                                                            mem[_14530 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                            if arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100) > balanceOf[address(msg.sender)]:
                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = 32
                                                                mem[mem[64] + 36] = 38
                                                                mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_14530 + 70 len 26]
                                                                revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                            if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100):
                                                                revert with 'NH{q', 17
                                                            balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor14 / 100) + (arg2 * burnFee / 100)
                                                            if balanceOf[address(arg1)] > -arg2 + (arg2 * stor14 / 100) + (arg2 * burnFee / 100) - 1:
                                                                revert with 'NH{q', 17
                                                            if balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100) < balanceOf[address(arg1)]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100)
                                                            emit Transfer((arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100)), msg.sender, arg1);
            else:
                if balanceOf[address(arg1)] > -arg2 - 1:
                    revert with 'NH{q', 17
                if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                    revert with 0, 'SafeMath: addition overflow'
                if balanceOf[address(arg1)] + arg2 > maxBalance:
                    revert with 0, 'Max Balance is reached.'
                if arg1 != uniswapV2PairAddress:
                    if stor11[address(msg.sender)]:
                        if not msg.sender:
                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                        if not arg1:
                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                        if arg2 > balanceOf[address(msg.sender)]:
                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                        if balanceOf[address(msg.sender)] < arg2:
                            revert with 'NH{q', 17
                        balanceOf[address(msg.sender)] -= arg2
                        if balanceOf[address(arg1)] > -arg2 - 1:
                            revert with 'NH{q', 17
                        if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                            revert with 0, 'SafeMath: addition overflow'
                        balanceOf[address(arg1)] += arg2
                        emit Transfer(arg2, msg.sender, arg1);
                    else:
                        if stor11[address(arg1)]:
                            if not msg.sender:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                            if not arg1:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                            if arg2 > balanceOf[address(msg.sender)]:
                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                            if balanceOf[address(msg.sender)] < arg2:
                                revert with 'NH{q', 17
                            balanceOf[address(msg.sender)] -= arg2
                            if balanceOf[address(arg1)] > -arg2 - 1:
                                revert with 'NH{q', 17
                            if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                revert with 0, 'SafeMath: addition overflow'
                            balanceOf[address(arg1)] += arg2
                            emit Transfer(arg2, msg.sender, arg1);
                        else:
                            if totalFees <= 0:
                                if not msg.sender:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                if not arg1:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                if arg2 > balanceOf[address(msg.sender)]:
                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                                if balanceOf[address(msg.sender)] < arg2:
                                    revert with 'NH{q', 17
                                balanceOf[address(msg.sender)] -= arg2
                                if balanceOf[address(arg1)] > -arg2 - 1:
                                    revert with 'NH{q', 17
                                if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                balanceOf[address(arg1)] += arg2
                                emit Transfer(arg2, msg.sender, arg1);
                            else:
                                if not arg2:
                                    if not arg2:
                                        if 0 > arg2:
                                            revert with 0, 'SafeMath: subtraction overflow', 0
                                        if arg2 < 0:
                                            revert with 'NH{q', 17
                                        if not msg.sender:
                                            revert with 0, 'ERC20: transfer from the zero address'
                                        if not this.address:
                                            revert with 0, 'ERC20: transfer to the zero address'
                                        if 0 > balanceOf[address(msg.sender)]:
                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                        if balanceOf[address(msg.sender)] < 0:
                                            revert with 'NH{q', 17
                                        if balanceOf[address(this.address)] > -1:
                                            revert with 'NH{q', 17
                                        if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        emit Transfer(0, msg.sender, this.address);
                                        if not msg.sender:
                                            revert with 0, 'ERC20: transfer from the zero address'
                                        if 0 > balanceOf[address(msg.sender)]:
                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                        if balanceOf[address(msg.sender)] < 0:
                                            revert with 'NH{q', 17
                                        if balanceOf[57005] > -1:
                                            revert with 'NH{q', 17
                                        if balanceOf[57005] < balanceOf[57005]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        emit Transfer(0, msg.sender, 57005);
                                        emit TokenBurn(0, msg.sender);
                                        if not msg.sender:
                                            revert with 0, 'ERC20: transfer from the zero address'
                                        if not arg1:
                                            revert with 0, 'ERC20: transfer to the zero address'
                                        if arg2 > balanceOf[address(msg.sender)]:
                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                        if balanceOf[address(msg.sender)] < arg2:
                                            revert with 'NH{q', 17
                                        balanceOf[address(msg.sender)] -= arg2
                                        if balanceOf[address(arg1)] > -arg2 - 1:
                                            revert with 'NH{q', 17
                                        if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(arg1)] += arg2
                                        emit Transfer(arg2, msg.sender, arg1);
                                    else:
                                        if arg2 and burnFee > -1 / arg2:
                                            revert with 'NH{q', 17
                                        if not arg2:
                                            revert with 'NH{q', 18
                                        if arg2 * burnFee / arg2 != burnFee:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        if 0 > -(arg2 * burnFee / 100) - 1:
                                            revert with 'NH{q', 17
                                        if arg2 * burnFee / 100 < 0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if arg2 * burnFee / 100 > arg2:
                                            revert with 0, 'SafeMath: subtraction overflow', 0
                                        if arg2 < arg2 * burnFee / 100:
                                            revert with 'NH{q', 17
                                        if not msg.sender:
                                            revert with 0, 'ERC20: transfer from the zero address'
                                        if not this.address:
                                            revert with 0, 'ERC20: transfer to the zero address'
                                        if 0 > balanceOf[address(msg.sender)]:
                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                        if balanceOf[address(msg.sender)] < 0:
                                            revert with 'NH{q', 17
                                        if balanceOf[address(this.address)] > -1:
                                            revert with 'NH{q', 17
                                        if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        emit Transfer(0, msg.sender, this.address);
                                        if not msg.sender:
                                            revert with 0, 'ERC20: transfer from the zero address'
                                        if arg2 * burnFee / 100 > balanceOf[address(msg.sender)]:
                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                        if balanceOf[address(msg.sender)] < arg2 * burnFee / 100:
                                            revert with 'NH{q', 17
                                        balanceOf[address(msg.sender)] -= arg2 * burnFee / 100
                                        if balanceOf[57005] > -(arg2 * burnFee / 100) - 1:
                                            revert with 'NH{q', 17
                                        if balanceOf[57005] + (arg2 * burnFee / 100) < balanceOf[57005]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[57005] += arg2 * burnFee / 100
                                        emit Transfer((arg2 * burnFee / 100), msg.sender, 57005);
                                        emit TokenBurn((arg2 * burnFee / 100), msg.sender);
                                        if not msg.sender:
                                            revert with 0, 'ERC20: transfer from the zero address'
                                        if not arg1:
                                            revert with 0, 'ERC20: transfer to the zero address'
                                        if arg2 - (arg2 * burnFee / 100) > balanceOf[address(msg.sender)]:
                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                        if balanceOf[address(msg.sender)] < arg2 - (arg2 * burnFee / 100):
                                            revert with 'NH{q', 17
                                        balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * burnFee / 100)
                                        if balanceOf[address(arg1)] > -arg2 + (arg2 * burnFee / 100) - 1:
                                            revert with 'NH{q', 17
                                        if balanceOf[address(arg1)] + arg2 - (arg2 * burnFee / 100) < balanceOf[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * burnFee / 100)
                                        emit Transfer((arg2 - (arg2 * burnFee / 100)), msg.sender, arg1);
                                else:
                                    if arg2 and stor14 > -1 / arg2:
                                        revert with 'NH{q', 17
                                    if not arg2:
                                        revert with 'NH{q', 18
                                    if arg2 * stor14 / arg2 != stor14:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeMath: multiplication overflow'
                                    if not arg2:
                                        if arg2 * stor14 / 100 > -1:
                                            revert with 'NH{q', 17
                                        if arg2 * stor14 / 100 < arg2 * stor14 / 100:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if arg2 * stor14 / 100 > arg2:
                                            revert with 0, 'SafeMath: subtraction overflow', 0
                                        if arg2 < arg2 * stor14 / 100:
                                            revert with 'NH{q', 17
                                        if not msg.sender:
                                            revert with 0, 'ERC20: transfer from the zero address'
                                        if not this.address:
                                            revert with 0, 'ERC20: transfer to the zero address'
                                        if arg2 * stor14 / 100 > balanceOf[address(msg.sender)]:
                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                        if balanceOf[address(msg.sender)] < arg2 * stor14 / 100:
                                            revert with 'NH{q', 17
                                        balanceOf[address(msg.sender)] -= arg2 * stor14 / 100
                                        if balanceOf[address(this.address)] > -(arg2 * stor14 / 100) - 1:
                                            revert with 'NH{q', 17
                                        if balanceOf[address(this.address)] + (arg2 * stor14 / 100) < balanceOf[address(this.address)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(this.address)] += arg2 * stor14 / 100
                                        emit Transfer((arg2 * stor14 / 100), msg.sender, this.address);
                                        if not msg.sender:
                                            revert with 0, 'ERC20: transfer from the zero address'
                                        if 0 > balanceOf[address(msg.sender)]:
                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                        if balanceOf[address(msg.sender)] < 0:
                                            revert with 'NH{q', 17
                                        if balanceOf[57005] > -1:
                                            revert with 'NH{q', 17
                                        if balanceOf[57005] < balanceOf[57005]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        emit Transfer(0, msg.sender, 57005);
                                        emit TokenBurn(0, msg.sender);
                                        if not msg.sender:
                                            revert with 0, 'ERC20: transfer from the zero address'
                                        if not arg1:
                                            revert with 0, 'ERC20: transfer to the zero address'
                                        if arg2 - (arg2 * stor14 / 100) > balanceOf[address(msg.sender)]:
                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                        if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor14 / 100):
                                            revert with 'NH{q', 17
                                        balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor14 / 100)
                                        if balanceOf[address(arg1)] > -arg2 + (arg2 * stor14 / 100) - 1:
                                            revert with 'NH{q', 17
                                        if balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) < balanceOf[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100)
                                        emit Transfer((arg2 - (arg2 * stor14 / 100)), msg.sender, arg1);
                                    else:
                                        if arg2 and burnFee > -1 / arg2:
                                            revert with 'NH{q', 17
                                        if not arg2:
                                            revert with 'NH{q', 18
                                        if arg2 * burnFee / arg2 != burnFee:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        if arg2 * stor14 / 100 > -(arg2 * burnFee / 100) - 1:
                                            revert with 'NH{q', 17
                                        if (arg2 * stor14 / 100) + (arg2 * burnFee / 100) < arg2 * stor14 / 100:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if (arg2 * stor14 / 100) + (arg2 * burnFee / 100) > arg2:
                                            revert with 0, 'SafeMath: subtraction overflow', 0
                                        if arg2 < (arg2 * stor14 / 100) + (arg2 * burnFee / 100):
                                            revert with 'NH{q', 17
                                        if not msg.sender:
                                            revert with 0, 'ERC20: transfer from the zero address'
                                        if not this.address:
                                            revert with 0, 'ERC20: transfer to the zero address'
                                        if arg2 * stor14 / 100 > balanceOf[address(msg.sender)]:
                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                        if balanceOf[address(msg.sender)] < arg2 * stor14 / 100:
                                            revert with 'NH{q', 17
                                        balanceOf[address(msg.sender)] -= arg2 * stor14 / 100
                                        if balanceOf[address(this.address)] > -(arg2 * stor14 / 100) - 1:
                                            revert with 'NH{q', 17
                                        if balanceOf[address(this.address)] + (arg2 * stor14 / 100) < balanceOf[address(this.address)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(this.address)] += arg2 * stor14 / 100
                                        emit Transfer((arg2 * stor14 / 100), msg.sender, this.address);
                                        if not msg.sender:
                                            revert with 0, 'ERC20: transfer from the zero address'
                                        if arg2 * burnFee / 100 > balanceOf[address(msg.sender)]:
                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                        if balanceOf[address(msg.sender)] < arg2 * burnFee / 100:
                                            revert with 'NH{q', 17
                                        balanceOf[address(msg.sender)] -= arg2 * burnFee / 100
                                        if balanceOf[57005] > -(arg2 * burnFee / 100) - 1:
                                            revert with 'NH{q', 17
                                        if balanceOf[57005] + (arg2 * burnFee / 100) < balanceOf[57005]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[57005] += arg2 * burnFee / 100
                                        emit Transfer((arg2 * burnFee / 100), msg.sender, 57005);
                                        emit TokenBurn((arg2 * burnFee / 100), msg.sender);
                                        if not msg.sender:
                                            revert with 0, 'ERC20: transfer from the zero address'
                                        if not arg1:
                                            revert with 0, 'ERC20: transfer to the zero address'
                                        if arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100) > balanceOf[address(msg.sender)]:
                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                        if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100):
                                            revert with 'NH{q', 17
                                        balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor14 / 100) + (arg2 * burnFee / 100)
                                        if balanceOf[address(arg1)] > -arg2 + (arg2 * stor14 / 100) + (arg2 * burnFee / 100) - 1:
                                            revert with 'NH{q', 17
                                        if balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100) < balanceOf[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100)
                                        emit Transfer((arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100)), msg.sender, arg1);
                else:
                    if stor22:
                        if stor11[address(msg.sender)]:
                            if not msg.sender:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                            if not arg1:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                            if arg2 > balanceOf[address(msg.sender)]:
                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                            if balanceOf[address(msg.sender)] < arg2:
                                revert with 'NH{q', 17
                            balanceOf[address(msg.sender)] -= arg2
                            if balanceOf[address(arg1)] > -arg2 - 1:
                                revert with 'NH{q', 17
                            if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                revert with 0, 'SafeMath: addition overflow'
                            balanceOf[address(arg1)] += arg2
                            emit Transfer(arg2, msg.sender, arg1);
                        else:
                            if stor11[address(arg1)]:
                                if not msg.sender:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                if not arg1:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                if arg2 > balanceOf[address(msg.sender)]:
                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                                if balanceOf[address(msg.sender)] < arg2:
                                    revert with 'NH{q', 17
                                balanceOf[address(msg.sender)] -= arg2
                                if balanceOf[address(arg1)] > -arg2 - 1:
                                    revert with 'NH{q', 17
                                if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                balanceOf[address(arg1)] += arg2
                                emit Transfer(arg2, msg.sender, arg1);
                            else:
                                if totalFees <= 0:
                                    if not msg.sender:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                    if not arg1:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                    if arg2 > balanceOf[address(msg.sender)]:
                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                                    if balanceOf[address(msg.sender)] < arg2:
                                        revert with 'NH{q', 17
                                    balanceOf[address(msg.sender)] -= arg2
                                    if balanceOf[address(arg1)] > -arg2 - 1:
                                        revert with 'NH{q', 17
                                    if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(arg1)] += arg2
                                    emit Transfer(arg2, msg.sender, arg1);
                                else:
                                    if not arg2:
                                        if not arg2:
                                            if 0 > arg2:
                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                            if arg2 < 0:
                                                revert with 'NH{q', 17
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if not this.address:
                                                revert with 0, 'ERC20: transfer to the zero address'
                                            if 0 > balanceOf[address(msg.sender)]:
                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                            if balanceOf[address(msg.sender)] < 0:
                                                revert with 'NH{q', 17
                                            if balanceOf[address(this.address)] > -1:
                                                revert with 'NH{q', 17
                                            if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            emit Transfer(0, msg.sender, this.address);
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if 0 > balanceOf[address(msg.sender)]:
                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                            if balanceOf[address(msg.sender)] < 0:
                                                revert with 'NH{q', 17
                                            if balanceOf[57005] > -1:
                                                revert with 'NH{q', 17
                                            if balanceOf[57005] < balanceOf[57005]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            emit Transfer(0, msg.sender, 57005);
                                            emit TokenBurn(0, msg.sender);
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if not arg1:
                                                revert with 0, 'ERC20: transfer to the zero address'
                                            if arg2 > balanceOf[address(msg.sender)]:
                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                            if balanceOf[address(msg.sender)] < arg2:
                                                revert with 'NH{q', 17
                                            balanceOf[address(msg.sender)] -= arg2
                                            if balanceOf[address(arg1)] > -arg2 - 1:
                                                revert with 'NH{q', 17
                                            if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(arg1)] += arg2
                                            emit Transfer(arg2, msg.sender, arg1);
                                        else:
                                            if arg2 and burnFee > -1 / arg2:
                                                revert with 'NH{q', 17
                                            if not arg2:
                                                revert with 'NH{q', 18
                                            if arg2 * burnFee / arg2 != burnFee:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            if 0 > -(arg2 * burnFee / 100) - 1:
                                                revert with 'NH{q', 17
                                            if arg2 * burnFee / 100 < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if arg2 * burnFee / 100 > arg2:
                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                            if arg2 < arg2 * burnFee / 100:
                                                revert with 'NH{q', 17
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if not this.address:
                                                revert with 0, 'ERC20: transfer to the zero address'
                                            if 0 > balanceOf[address(msg.sender)]:
                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                            if balanceOf[address(msg.sender)] < 0:
                                                revert with 'NH{q', 17
                                            if balanceOf[address(this.address)] > -1:
                                                revert with 'NH{q', 17
                                            if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            emit Transfer(0, msg.sender, this.address);
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if arg2 * burnFee / 100 > balanceOf[address(msg.sender)]:
                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                            if balanceOf[address(msg.sender)] < arg2 * burnFee / 100:
                                                revert with 'NH{q', 17
                                            balanceOf[address(msg.sender)] -= arg2 * burnFee / 100
                                            if balanceOf[57005] > -(arg2 * burnFee / 100) - 1:
                                                revert with 'NH{q', 17
                                            if balanceOf[57005] + (arg2 * burnFee / 100) < balanceOf[57005]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[57005] += arg2 * burnFee / 100
                                            emit Transfer((arg2 * burnFee / 100), msg.sender, 57005);
                                            emit TokenBurn((arg2 * burnFee / 100), msg.sender);
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if not arg1:
                                                revert with 0, 'ERC20: transfer to the zero address'
                                            if arg2 - (arg2 * burnFee / 100) > balanceOf[address(msg.sender)]:
                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                            if balanceOf[address(msg.sender)] < arg2 - (arg2 * burnFee / 100):
                                                revert with 'NH{q', 17
                                            balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * burnFee / 100)
                                            if balanceOf[address(arg1)] > -arg2 + (arg2 * burnFee / 100) - 1:
                                                revert with 'NH{q', 17
                                            if balanceOf[address(arg1)] + arg2 - (arg2 * burnFee / 100) < balanceOf[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * burnFee / 100)
                                            emit Transfer((arg2 - (arg2 * burnFee / 100)), msg.sender, arg1);
                                    else:
                                        if arg2 and stor14 > -1 / arg2:
                                            revert with 'NH{q', 17
                                        if not arg2:
                                            revert with 'NH{q', 18
                                        if arg2 * stor14 / arg2 != stor14:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeMath: multiplication overflow'
                                        if not arg2:
                                            if arg2 * stor14 / 100 > -1:
                                                revert with 'NH{q', 17
                                            if arg2 * stor14 / 100 < arg2 * stor14 / 100:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if arg2 * stor14 / 100 > arg2:
                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                            if arg2 < arg2 * stor14 / 100:
                                                revert with 'NH{q', 17
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if not this.address:
                                                revert with 0, 'ERC20: transfer to the zero address'
                                            if arg2 * stor14 / 100 > balanceOf[address(msg.sender)]:
                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                            if balanceOf[address(msg.sender)] < arg2 * stor14 / 100:
                                                revert with 'NH{q', 17
                                            balanceOf[address(msg.sender)] -= arg2 * stor14 / 100
                                            if balanceOf[address(this.address)] > -(arg2 * stor14 / 100) - 1:
                                                revert with 'NH{q', 17
                                            if balanceOf[address(this.address)] + (arg2 * stor14 / 100) < balanceOf[address(this.address)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(this.address)] += arg2 * stor14 / 100
                                            emit Transfer((arg2 * stor14 / 100), msg.sender, this.address);
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if 0 > balanceOf[address(msg.sender)]:
                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                            if balanceOf[address(msg.sender)] < 0:
                                                revert with 'NH{q', 17
                                            if balanceOf[57005] > -1:
                                                revert with 'NH{q', 17
                                            if balanceOf[57005] < balanceOf[57005]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            emit Transfer(0, msg.sender, 57005);
                                            emit TokenBurn(0, msg.sender);
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if not arg1:
                                                revert with 0, 'ERC20: transfer to the zero address'
                                            if arg2 - (arg2 * stor14 / 100) > balanceOf[address(msg.sender)]:
                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                            if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor14 / 100):
                                                revert with 'NH{q', 17
                                            balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor14 / 100)
                                            if balanceOf[address(arg1)] > -arg2 + (arg2 * stor14 / 100) - 1:
                                                revert with 'NH{q', 17
                                            if balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) < balanceOf[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100)
                                            emit Transfer((arg2 - (arg2 * stor14 / 100)), msg.sender, arg1);
                                        else:
                                            if arg2 and burnFee > -1 / arg2:
                                                revert with 'NH{q', 17
                                            if not arg2:
                                                revert with 'NH{q', 18
                                            if arg2 * burnFee / arg2 != burnFee:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            if arg2 * stor14 / 100 > -(arg2 * burnFee / 100) - 1:
                                                revert with 'NH{q', 17
                                            if (arg2 * stor14 / 100) + (arg2 * burnFee / 100) < arg2 * stor14 / 100:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if (arg2 * stor14 / 100) + (arg2 * burnFee / 100) > arg2:
                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                            if arg2 < (arg2 * stor14 / 100) + (arg2 * burnFee / 100):
                                                revert with 'NH{q', 17
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if not this.address:
                                                revert with 0, 'ERC20: transfer to the zero address'
                                            if arg2 * stor14 / 100 > balanceOf[address(msg.sender)]:
                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                            if balanceOf[address(msg.sender)] < arg2 * stor14 / 100:
                                                revert with 'NH{q', 17
                                            balanceOf[address(msg.sender)] -= arg2 * stor14 / 100
                                            if balanceOf[address(this.address)] > -(arg2 * stor14 / 100) - 1:
                                                revert with 'NH{q', 17
                                            if balanceOf[address(this.address)] + (arg2 * stor14 / 100) < balanceOf[address(this.address)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(this.address)] += arg2 * stor14 / 100
                                            emit Transfer((arg2 * stor14 / 100), msg.sender, this.address);
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if arg2 * burnFee / 100 > balanceOf[address(msg.sender)]:
                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                            if balanceOf[address(msg.sender)] < arg2 * burnFee / 100:
                                                revert with 'NH{q', 17
                                            balanceOf[address(msg.sender)] -= arg2 * burnFee / 100
                                            if balanceOf[57005] > -(arg2 * burnFee / 100) - 1:
                                                revert with 'NH{q', 17
                                            if balanceOf[57005] + (arg2 * burnFee / 100) < balanceOf[57005]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[57005] += arg2 * burnFee / 100
                                            emit Transfer((arg2 * burnFee / 100), msg.sender, 57005);
                                            emit TokenBurn((arg2 * burnFee / 100), msg.sender);
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if not arg1:
                                                revert with 0, 'ERC20: transfer to the zero address'
                                            if arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100) > balanceOf[address(msg.sender)]:
                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                            if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100):
                                                revert with 'NH{q', 17
                                            balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor14 / 100) + (arg2 * burnFee / 100)
                                            if balanceOf[address(arg1)] > -arg2 + (arg2 * stor14 / 100) + (arg2 * burnFee / 100) - 1:
                                                revert with 'NH{q', 17
                                            if balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100) < balanceOf[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100)
                                            emit Transfer((arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100)), msg.sender, arg1);
                    else:
                        if balanceOf[address(this.address)] < liquifyThreshhold:
                            if stor11[address(msg.sender)]:
                                if not msg.sender:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                if not arg1:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                if arg2 > balanceOf[address(msg.sender)]:
                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                                if balanceOf[address(msg.sender)] < arg2:
                                    revert with 'NH{q', 17
                                balanceOf[address(msg.sender)] -= arg2
                                if balanceOf[address(arg1)] > -arg2 - 1:
                                    revert with 'NH{q', 17
                                if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                balanceOf[address(arg1)] += arg2
                                emit Transfer(arg2, msg.sender, arg1);
                            else:
                                if stor11[address(arg1)]:
                                    if not msg.sender:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                    if not arg1:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                    if arg2 > balanceOf[address(msg.sender)]:
                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                                    if balanceOf[address(msg.sender)] < arg2:
                                        revert with 'NH{q', 17
                                    balanceOf[address(msg.sender)] -= arg2
                                    if balanceOf[address(arg1)] > -arg2 - 1:
                                        revert with 'NH{q', 17
                                    if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(arg1)] += arg2
                                    emit Transfer(arg2, msg.sender, arg1);
                                else:
                                    if totalFees <= 0:
                                        if not msg.sender:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                        if not arg1:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                        if arg2 > balanceOf[address(msg.sender)]:
                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                                        if balanceOf[address(msg.sender)] < arg2:
                                            revert with 'NH{q', 17
                                        balanceOf[address(msg.sender)] -= arg2
                                        if balanceOf[address(arg1)] > -arg2 - 1:
                                            revert with 'NH{q', 17
                                        if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(arg1)] += arg2
                                        emit Transfer(arg2, msg.sender, arg1);
                                    else:
                                        if not arg2:
                                            if not arg2:
                                                if 0 > arg2:
                                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                                if arg2 < 0:
                                                    revert with 'NH{q', 17
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if not this.address:
                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                if 0 > balanceOf[address(msg.sender)]:
                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                                if balanceOf[address(msg.sender)] < 0:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(this.address)] > -1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                emit Transfer(0, msg.sender, this.address);
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if 0 > balanceOf[address(msg.sender)]:
                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                                if balanceOf[address(msg.sender)] < 0:
                                                    revert with 'NH{q', 17
                                                if balanceOf[57005] > -1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[57005] < balanceOf[57005]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                emit Transfer(0, msg.sender, 57005);
                                                emit TokenBurn(0, msg.sender);
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if not arg1:
                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                if arg2 > balanceOf[address(msg.sender)]:
                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                                if balanceOf[address(msg.sender)] < arg2:
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] -= arg2
                                                if balanceOf[address(arg1)] > -arg2 - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                balanceOf[address(arg1)] += arg2
                                                emit Transfer(arg2, msg.sender, arg1);
                                            else:
                                                if arg2 and burnFee > -1 / arg2:
                                                    revert with 'NH{q', 17
                                                if not arg2:
                                                    revert with 'NH{q', 18
                                                if arg2 * burnFee / arg2 != burnFee:
                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                if 0 > -(arg2 * burnFee / 100) - 1:
                                                    revert with 'NH{q', 17
                                                if arg2 * burnFee / 100 < 0:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if arg2 * burnFee / 100 > arg2:
                                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                                if arg2 < arg2 * burnFee / 100:
                                                    revert with 'NH{q', 17
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if not this.address:
                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                if 0 > balanceOf[address(msg.sender)]:
                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                                if balanceOf[address(msg.sender)] < 0:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(this.address)] > -1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                emit Transfer(0, msg.sender, this.address);
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if arg2 * burnFee / 100 > balanceOf[address(msg.sender)]:
                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                                if balanceOf[address(msg.sender)] < arg2 * burnFee / 100:
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] -= arg2 * burnFee / 100
                                                if balanceOf[57005] > -(arg2 * burnFee / 100) - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[57005] + (arg2 * burnFee / 100) < balanceOf[57005]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                balanceOf[57005] += arg2 * burnFee / 100
                                                emit Transfer((arg2 * burnFee / 100), msg.sender, 57005);
                                                emit TokenBurn((arg2 * burnFee / 100), msg.sender);
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if not arg1:
                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                if arg2 - (arg2 * burnFee / 100) > balanceOf[address(msg.sender)]:
                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                                if balanceOf[address(msg.sender)] < arg2 - (arg2 * burnFee / 100):
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * burnFee / 100)
                                                if balanceOf[address(arg1)] > -arg2 + (arg2 * burnFee / 100) - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(arg1)] + arg2 - (arg2 * burnFee / 100) < balanceOf[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * burnFee / 100)
                                                emit Transfer((arg2 - (arg2 * burnFee / 100)), msg.sender, arg1);
                                        else:
                                            if arg2 and stor14 > -1 / arg2:
                                                revert with 'NH{q', 17
                                            if not arg2:
                                                revert with 'NH{q', 18
                                            if arg2 * stor14 / arg2 != stor14:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeMath: multiplication overflow'
                                            if not arg2:
                                                if arg2 * stor14 / 100 > -1:
                                                    revert with 'NH{q', 17
                                                if arg2 * stor14 / 100 < arg2 * stor14 / 100:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if arg2 * stor14 / 100 > arg2:
                                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                                if arg2 < arg2 * stor14 / 100:
                                                    revert with 'NH{q', 17
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if not this.address:
                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                if arg2 * stor14 / 100 > balanceOf[address(msg.sender)]:
                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                                if balanceOf[address(msg.sender)] < arg2 * stor14 / 100:
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] -= arg2 * stor14 / 100
                                                if balanceOf[address(this.address)] > -(arg2 * stor14 / 100) - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(this.address)] + (arg2 * stor14 / 100) < balanceOf[address(this.address)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                balanceOf[address(this.address)] += arg2 * stor14 / 100
                                                emit Transfer((arg2 * stor14 / 100), msg.sender, this.address);
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if 0 > balanceOf[address(msg.sender)]:
                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                                if balanceOf[address(msg.sender)] < 0:
                                                    revert with 'NH{q', 17
                                                if balanceOf[57005] > -1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[57005] < balanceOf[57005]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                emit Transfer(0, msg.sender, 57005);
                                                emit TokenBurn(0, msg.sender);
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if not arg1:
                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                if arg2 - (arg2 * stor14 / 100) > balanceOf[address(msg.sender)]:
                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                                if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor14 / 100):
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor14 / 100)
                                                if balanceOf[address(arg1)] > -arg2 + (arg2 * stor14 / 100) - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) < balanceOf[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100)
                                                emit Transfer((arg2 - (arg2 * stor14 / 100)), msg.sender, arg1);
                                            else:
                                                if arg2 and burnFee > -1 / arg2:
                                                    revert with 'NH{q', 17
                                                if not arg2:
                                                    revert with 'NH{q', 18
                                                if arg2 * burnFee / arg2 != burnFee:
                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                if arg2 * stor14 / 100 > -(arg2 * burnFee / 100) - 1:
                                                    revert with 'NH{q', 17
                                                if (arg2 * stor14 / 100) + (arg2 * burnFee / 100) < arg2 * stor14 / 100:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if (arg2 * stor14 / 100) + (arg2 * burnFee / 100) > arg2:
                                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                                if arg2 < (arg2 * stor14 / 100) + (arg2 * burnFee / 100):
                                                    revert with 'NH{q', 17
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if not this.address:
                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                if arg2 * stor14 / 100 > balanceOf[address(msg.sender)]:
                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                                if balanceOf[address(msg.sender)] < arg2 * stor14 / 100:
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] -= arg2 * stor14 / 100
                                                if balanceOf[address(this.address)] > -(arg2 * stor14 / 100) - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(this.address)] + (arg2 * stor14 / 100) < balanceOf[address(this.address)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                balanceOf[address(this.address)] += arg2 * stor14 / 100
                                                emit Transfer((arg2 * stor14 / 100), msg.sender, this.address);
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if arg2 * burnFee / 100 > balanceOf[address(msg.sender)]:
                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                                if balanceOf[address(msg.sender)] < arg2 * burnFee / 100:
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] -= arg2 * burnFee / 100
                                                if balanceOf[57005] > -(arg2 * burnFee / 100) - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[57005] + (arg2 * burnFee / 100) < balanceOf[57005]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                balanceOf[57005] += arg2 * burnFee / 100
                                                emit Transfer((arg2 * burnFee / 100), msg.sender, 57005);
                                                emit TokenBurn((arg2 * burnFee / 100), msg.sender);
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if not arg1:
                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                if arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100) > balanceOf[address(msg.sender)]:
                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                                if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100):
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor14 / 100) + (arg2 * burnFee / 100)
                                                if balanceOf[address(arg1)] > -arg2 + (arg2 * stor14 / 100) + (arg2 * burnFee / 100) - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100) < balanceOf[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100)
                                                emit Transfer((arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100)), msg.sender, arg1);
                        else:
                            if stor14 <= 0:
                                if stor11[address(msg.sender)]:
                                    if not msg.sender:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                    if not arg1:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                    if arg2 > balanceOf[address(msg.sender)]:
                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                                    if balanceOf[address(msg.sender)] < arg2:
                                        revert with 'NH{q', 17
                                    balanceOf[address(msg.sender)] -= arg2
                                    if balanceOf[address(arg1)] > -arg2 - 1:
                                        revert with 'NH{q', 17
                                    if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(arg1)] += arg2
                                    emit Transfer(arg2, msg.sender, arg1);
                                else:
                                    if stor11[address(arg1)]:
                                        if not msg.sender:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                        if not arg1:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                        if arg2 > balanceOf[address(msg.sender)]:
                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                                        if balanceOf[address(msg.sender)] < arg2:
                                            revert with 'NH{q', 17
                                        balanceOf[address(msg.sender)] -= arg2
                                        if balanceOf[address(arg1)] > -arg2 - 1:
                                            revert with 'NH{q', 17
                                        if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(arg1)] += arg2
                                        emit Transfer(arg2, msg.sender, arg1);
                                    else:
                                        if totalFees <= 0:
                                            if not msg.sender:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                            if not arg1:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                            if arg2 > balanceOf[address(msg.sender)]:
                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                                            if balanceOf[address(msg.sender)] < arg2:
                                                revert with 'NH{q', 17
                                            balanceOf[address(msg.sender)] -= arg2
                                            if balanceOf[address(arg1)] > -arg2 - 1:
                                                revert with 'NH{q', 17
                                            if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(arg1)] += arg2
                                            emit Transfer(arg2, msg.sender, arg1);
                                        else:
                                            if not arg2:
                                                if not arg2:
                                                    if 0 > arg2:
                                                        revert with 0, 'SafeMath: subtraction overflow', 0
                                                    if arg2 < 0:
                                                        revert with 'NH{q', 17
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if not this.address:
                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                    if 0 > balanceOf[address(msg.sender)]:
                                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                                    if balanceOf[address(msg.sender)] < 0:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(this.address)] > -1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    emit Transfer(0, msg.sender, this.address);
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if 0 > balanceOf[address(msg.sender)]:
                                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                                    if balanceOf[address(msg.sender)] < 0:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[57005] > -1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[57005] < balanceOf[57005]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    emit Transfer(0, msg.sender, 57005);
                                                    emit TokenBurn(0, msg.sender);
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if not arg1:
                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                    if arg2 > balanceOf[address(msg.sender)]:
                                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                                    if balanceOf[address(msg.sender)] < arg2:
                                                        revert with 'NH{q', 17
                                                    balanceOf[address(msg.sender)] -= arg2
                                                    if balanceOf[address(arg1)] > -arg2 - 1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    balanceOf[address(arg1)] += arg2
                                                    emit Transfer(arg2, msg.sender, arg1);
                                                else:
                                                    if arg2 and burnFee > -1 / arg2:
                                                        revert with 'NH{q', 17
                                                    if not arg2:
                                                        revert with 'NH{q', 18
                                                    if arg2 * burnFee / arg2 != burnFee:
                                                        revert with 0, 'SafeMath: multiplication overflow'
                                                    if 0 > -(arg2 * burnFee / 100) - 1:
                                                        revert with 'NH{q', 17
                                                    if arg2 * burnFee / 100 < 0:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if arg2 * burnFee / 100 > arg2:
                                                        revert with 0, 'SafeMath: subtraction overflow', 0
                                                    if arg2 < arg2 * burnFee / 100:
                                                        revert with 'NH{q', 17
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if not this.address:
                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                    if 0 > balanceOf[address(msg.sender)]:
                                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                                    if balanceOf[address(msg.sender)] < 0:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(this.address)] > -1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    emit Transfer(0, msg.sender, this.address);
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if arg2 * burnFee / 100 > balanceOf[address(msg.sender)]:
                                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                                    if balanceOf[address(msg.sender)] < arg2 * burnFee / 100:
                                                        revert with 'NH{q', 17
                                                    balanceOf[address(msg.sender)] -= arg2 * burnFee / 100
                                                    if balanceOf[57005] > -(arg2 * burnFee / 100) - 1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[57005] + (arg2 * burnFee / 100) < balanceOf[57005]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    balanceOf[57005] += arg2 * burnFee / 100
                                                    emit Transfer((arg2 * burnFee / 100), msg.sender, 57005);
                                                    emit TokenBurn((arg2 * burnFee / 100), msg.sender);
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if not arg1:
                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                    if arg2 - (arg2 * burnFee / 100) > balanceOf[address(msg.sender)]:
                                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                                    if balanceOf[address(msg.sender)] < arg2 - (arg2 * burnFee / 100):
                                                        revert with 'NH{q', 17
                                                    balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * burnFee / 100)
                                                    if balanceOf[address(arg1)] > -arg2 + (arg2 * burnFee / 100) - 1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(arg1)] + arg2 - (arg2 * burnFee / 100) < balanceOf[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * burnFee / 100)
                                                    emit Transfer((arg2 - (arg2 * burnFee / 100)), msg.sender, arg1);
                                            else:
                                                if arg2 and stor14 > -1 / arg2:
                                                    revert with 'NH{q', 17
                                                if not arg2:
                                                    revert with 'NH{q', 18
                                                if arg2 * stor14 / arg2 != stor14:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeMath: multiplication overflow'
                                                if not arg2:
                                                    if arg2 * stor14 / 100 > -1:
                                                        revert with 'NH{q', 17
                                                    if arg2 * stor14 / 100 < arg2 * stor14 / 100:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if arg2 * stor14 / 100 > arg2:
                                                        revert with 0, 'SafeMath: subtraction overflow', 0
                                                    if arg2 < arg2 * stor14 / 100:
                                                        revert with 'NH{q', 17
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if not this.address:
                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                    if arg2 * stor14 / 100 > balanceOf[address(msg.sender)]:
                                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                                    if balanceOf[address(msg.sender)] < arg2 * stor14 / 100:
                                                        revert with 'NH{q', 17
                                                    balanceOf[address(msg.sender)] -= arg2 * stor14 / 100
                                                    if balanceOf[address(this.address)] > -(arg2 * stor14 / 100) - 1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(this.address)] + (arg2 * stor14 / 100) < balanceOf[address(this.address)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    balanceOf[address(this.address)] += arg2 * stor14 / 100
                                                    emit Transfer((arg2 * stor14 / 100), msg.sender, this.address);
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if 0 > balanceOf[address(msg.sender)]:
                                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                                    if balanceOf[address(msg.sender)] < 0:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[57005] > -1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[57005] < balanceOf[57005]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    emit Transfer(0, msg.sender, 57005);
                                                    emit TokenBurn(0, msg.sender);
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if not arg1:
                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                    if arg2 - (arg2 * stor14 / 100) > balanceOf[address(msg.sender)]:
                                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                                    if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor14 / 100):
                                                        revert with 'NH{q', 17
                                                    balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor14 / 100)
                                                    if balanceOf[address(arg1)] > -arg2 + (arg2 * stor14 / 100) - 1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) < balanceOf[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100)
                                                    emit Transfer((arg2 - (arg2 * stor14 / 100)), msg.sender, arg1);
                                                else:
                                                    if arg2 and burnFee > -1 / arg2:
                                                        revert with 'NH{q', 17
                                                    if not arg2:
                                                        revert with 'NH{q', 18
                                                    if arg2 * burnFee / arg2 != burnFee:
                                                        revert with 0, 'SafeMath: multiplication overflow'
                                                    if arg2 * stor14 / 100 > -(arg2 * burnFee / 100) - 1:
                                                        revert with 'NH{q', 17
                                                    if (arg2 * stor14 / 100) + (arg2 * burnFee / 100) < arg2 * stor14 / 100:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if (arg2 * stor14 / 100) + (arg2 * burnFee / 100) > arg2:
                                                        revert with 0, 'SafeMath: subtraction overflow', 0
                                                    if arg2 < (arg2 * stor14 / 100) + (arg2 * burnFee / 100):
                                                        revert with 'NH{q', 17
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if not this.address:
                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                    if arg2 * stor14 / 100 > balanceOf[address(msg.sender)]:
                                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                                    if balanceOf[address(msg.sender)] < arg2 * stor14 / 100:
                                                        revert with 'NH{q', 17
                                                    balanceOf[address(msg.sender)] -= arg2 * stor14 / 100
                                                    if balanceOf[address(this.address)] > -(arg2 * stor14 / 100) - 1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(this.address)] + (arg2 * stor14 / 100) < balanceOf[address(this.address)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    balanceOf[address(this.address)] += arg2 * stor14 / 100
                                                    emit Transfer((arg2 * stor14 / 100), msg.sender, this.address);
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if arg2 * burnFee / 100 > balanceOf[address(msg.sender)]:
                                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                                    if balanceOf[address(msg.sender)] < arg2 * burnFee / 100:
                                                        revert with 'NH{q', 17
                                                    balanceOf[address(msg.sender)] -= arg2 * burnFee / 100
                                                    if balanceOf[57005] > -(arg2 * burnFee / 100) - 1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[57005] + (arg2 * burnFee / 100) < balanceOf[57005]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    balanceOf[57005] += arg2 * burnFee / 100
                                                    emit Transfer((arg2 * burnFee / 100), msg.sender, 57005);
                                                    emit TokenBurn((arg2 * burnFee / 100), msg.sender);
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if not arg1:
                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                    if arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100) > balanceOf[address(msg.sender)]:
                                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                                    if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100):
                                                        revert with 'NH{q', 17
                                                    balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor14 / 100) + (arg2 * burnFee / 100)
                                                    if balanceOf[address(arg1)] > -arg2 + (arg2 * stor14 / 100) + (arg2 * burnFee / 100) - 1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100) < balanceOf[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100)
                                                    emit Transfer((arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100)), msg.sender, arg1);
                            else:
                                if msg.sender == owner:
                                    if stor11[address(msg.sender)]:
                                        if not msg.sender:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                        if not arg1:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                        if arg2 > balanceOf[address(msg.sender)]:
                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                                        if balanceOf[address(msg.sender)] < arg2:
                                            revert with 'NH{q', 17
                                        balanceOf[address(msg.sender)] -= arg2
                                        if balanceOf[address(arg1)] > -arg2 - 1:
                                            revert with 'NH{q', 17
                                        if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(arg1)] += arg2
                                        emit Transfer(arg2, msg.sender, arg1);
                                    else:
                                        if stor11[address(arg1)]:
                                            if not msg.sender:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                            if not arg1:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                            if arg2 > balanceOf[address(msg.sender)]:
                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                                            if balanceOf[address(msg.sender)] < arg2:
                                                revert with 'NH{q', 17
                                            balanceOf[address(msg.sender)] -= arg2
                                            if balanceOf[address(arg1)] > -arg2 - 1:
                                                revert with 'NH{q', 17
                                            if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(arg1)] += arg2
                                            emit Transfer(arg2, msg.sender, arg1);
                                        else:
                                            if totalFees <= 0:
                                                if not msg.sender:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                if not arg1:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                if arg2 > balanceOf[address(msg.sender)]:
                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                                                if balanceOf[address(msg.sender)] < arg2:
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] -= arg2
                                                if balanceOf[address(arg1)] > -arg2 - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                balanceOf[address(arg1)] += arg2
                                                emit Transfer(arg2, msg.sender, arg1);
                                            else:
                                                if not arg2:
                                                    if not arg2:
                                                        if 0 > arg2:
                                                            revert with 0, 'SafeMath: subtraction overflow', 0
                                                        if arg2 < 0:
                                                            revert with 'NH{q', 17
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if not this.address:
                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                        if 0 > balanceOf[address(msg.sender)]:
                                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                                        if balanceOf[address(msg.sender)] < 0:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(this.address)] > -1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        emit Transfer(0, msg.sender, this.address);
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if 0 > balanceOf[address(msg.sender)]:
                                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                                        if balanceOf[address(msg.sender)] < 0:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[57005] > -1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[57005] < balanceOf[57005]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        emit Transfer(0, msg.sender, 57005);
                                                        emit TokenBurn(0, msg.sender);
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if not arg1:
                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                        if arg2 > balanceOf[address(msg.sender)]:
                                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                                        if balanceOf[address(msg.sender)] < arg2:
                                                            revert with 'NH{q', 17
                                                        balanceOf[address(msg.sender)] -= arg2
                                                        if balanceOf[address(arg1)] > -arg2 - 1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        balanceOf[address(arg1)] += arg2
                                                        emit Transfer(arg2, msg.sender, arg1);
                                                    else:
                                                        if arg2 and burnFee > -1 / arg2:
                                                            revert with 'NH{q', 17
                                                        if not arg2:
                                                            revert with 'NH{q', 18
                                                        if arg2 * burnFee / arg2 != burnFee:
                                                            revert with 0, 'SafeMath: multiplication overflow'
                                                        if 0 > -(arg2 * burnFee / 100) - 1:
                                                            revert with 'NH{q', 17
                                                        if arg2 * burnFee / 100 < 0:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        if arg2 * burnFee / 100 > arg2:
                                                            revert with 0, 'SafeMath: subtraction overflow', 0
                                                        if arg2 < arg2 * burnFee / 100:
                                                            revert with 'NH{q', 17
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if not this.address:
                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                        if 0 > balanceOf[address(msg.sender)]:
                                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                                        if balanceOf[address(msg.sender)] < 0:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(this.address)] > -1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        emit Transfer(0, msg.sender, this.address);
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if arg2 * burnFee / 100 > balanceOf[address(msg.sender)]:
                                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                                        if balanceOf[address(msg.sender)] < arg2 * burnFee / 100:
                                                            revert with 'NH{q', 17
                                                        balanceOf[address(msg.sender)] -= arg2 * burnFee / 100
                                                        if balanceOf[57005] > -(arg2 * burnFee / 100) - 1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[57005] + (arg2 * burnFee / 100) < balanceOf[57005]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        balanceOf[57005] += arg2 * burnFee / 100
                                                        emit Transfer((arg2 * burnFee / 100), msg.sender, 57005);
                                                        emit TokenBurn((arg2 * burnFee / 100), msg.sender);
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if not arg1:
                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                        if arg2 - (arg2 * burnFee / 100) > balanceOf[address(msg.sender)]:
                                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                                        if balanceOf[address(msg.sender)] < arg2 - (arg2 * burnFee / 100):
                                                            revert with 'NH{q', 17
                                                        balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * burnFee / 100)
                                                        if balanceOf[address(arg1)] > -arg2 + (arg2 * burnFee / 100) - 1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(arg1)] + arg2 - (arg2 * burnFee / 100) < balanceOf[address(arg1)]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * burnFee / 100)
                                                        emit Transfer((arg2 - (arg2 * burnFee / 100)), msg.sender, arg1);
                                                else:
                                                    if arg2 and stor14 > -1 / arg2:
                                                        revert with 'NH{q', 17
                                                    if not arg2:
                                                        revert with 'NH{q', 18
                                                    if arg2 * stor14 / arg2 != stor14:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeMath: multiplication overflow'
                                                    if not arg2:
                                                        if arg2 * stor14 / 100 > -1:
                                                            revert with 'NH{q', 17
                                                        if arg2 * stor14 / 100 < arg2 * stor14 / 100:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        if arg2 * stor14 / 100 > arg2:
                                                            revert with 0, 'SafeMath: subtraction overflow', 0
                                                        if arg2 < arg2 * stor14 / 100:
                                                            revert with 'NH{q', 17
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if not this.address:
                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                        if arg2 * stor14 / 100 > balanceOf[address(msg.sender)]:
                                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                                        if balanceOf[address(msg.sender)] < arg2 * stor14 / 100:
                                                            revert with 'NH{q', 17
                                                        balanceOf[address(msg.sender)] -= arg2 * stor14 / 100
                                                        if balanceOf[address(this.address)] > -(arg2 * stor14 / 100) - 1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(this.address)] + (arg2 * stor14 / 100) < balanceOf[address(this.address)]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        balanceOf[address(this.address)] += arg2 * stor14 / 100
                                                        emit Transfer((arg2 * stor14 / 100), msg.sender, this.address);
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if 0 > balanceOf[address(msg.sender)]:
                                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                                        if balanceOf[address(msg.sender)] < 0:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[57005] > -1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[57005] < balanceOf[57005]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        emit Transfer(0, msg.sender, 57005);
                                                        emit TokenBurn(0, msg.sender);
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if not arg1:
                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                        if arg2 - (arg2 * stor14 / 100) > balanceOf[address(msg.sender)]:
                                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                                        if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor14 / 100):
                                                            revert with 'NH{q', 17
                                                        balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor14 / 100)
                                                        if balanceOf[address(arg1)] > -arg2 + (arg2 * stor14 / 100) - 1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) < balanceOf[address(arg1)]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100)
                                                        emit Transfer((arg2 - (arg2 * stor14 / 100)), msg.sender, arg1);
                                                    else:
                                                        if arg2 and burnFee > -1 / arg2:
                                                            revert with 'NH{q', 17
                                                        if not arg2:
                                                            revert with 'NH{q', 18
                                                        if arg2 * burnFee / arg2 != burnFee:
                                                            revert with 0, 'SafeMath: multiplication overflow'
                                                        if arg2 * stor14 / 100 > -(arg2 * burnFee / 100) - 1:
                                                            revert with 'NH{q', 17
                                                        if (arg2 * stor14 / 100) + (arg2 * burnFee / 100) < arg2 * stor14 / 100:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        if (arg2 * stor14 / 100) + (arg2 * burnFee / 100) > arg2:
                                                            revert with 0, 'SafeMath: subtraction overflow', 0
                                                        if arg2 < (arg2 * stor14 / 100) + (arg2 * burnFee / 100):
                                                            revert with 'NH{q', 17
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if not this.address:
                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                        if arg2 * stor14 / 100 > balanceOf[address(msg.sender)]:
                                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                                        if balanceOf[address(msg.sender)] < arg2 * stor14 / 100:
                                                            revert with 'NH{q', 17
                                                        balanceOf[address(msg.sender)] -= arg2 * stor14 / 100
                                                        if balanceOf[address(this.address)] > -(arg2 * stor14 / 100) - 1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(this.address)] + (arg2 * stor14 / 100) < balanceOf[address(this.address)]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        balanceOf[address(this.address)] += arg2 * stor14 / 100
                                                        emit Transfer((arg2 * stor14 / 100), msg.sender, this.address);
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if arg2 * burnFee / 100 > balanceOf[address(msg.sender)]:
                                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                                        if balanceOf[address(msg.sender)] < arg2 * burnFee / 100:
                                                            revert with 'NH{q', 17
                                                        balanceOf[address(msg.sender)] -= arg2 * burnFee / 100
                                                        if balanceOf[57005] > -(arg2 * burnFee / 100) - 1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[57005] + (arg2 * burnFee / 100) < balanceOf[57005]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        balanceOf[57005] += arg2 * burnFee / 100
                                                        emit Transfer((arg2 * burnFee / 100), msg.sender, 57005);
                                                        emit TokenBurn((arg2 * burnFee / 100), msg.sender);
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if not arg1:
                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                        if arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100) > balanceOf[address(msg.sender)]:
                                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                                        if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100):
                                                            revert with 'NH{q', 17
                                                        balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor14 / 100) + (arg2 * burnFee / 100)
                                                        if balanceOf[address(arg1)] > -arg2 + (arg2 * stor14 / 100) + (arg2 * burnFee / 100) - 1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100) < balanceOf[address(arg1)]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100)
                                                        emit Transfer((arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100)), msg.sender, arg1);
                                else:
                                    if arg1 == owner:
                                        if stor11[address(msg.sender)]:
                                            if not msg.sender:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                            if not arg1:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                            if arg2 > balanceOf[address(msg.sender)]:
                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                                            if balanceOf[address(msg.sender)] < arg2:
                                                revert with 'NH{q', 17
                                            balanceOf[address(msg.sender)] -= arg2
                                            if balanceOf[address(arg1)] > -arg2 - 1:
                                                revert with 'NH{q', 17
                                            if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(arg1)] += arg2
                                            emit Transfer(arg2, msg.sender, arg1);
                                        else:
                                            if stor11[address(arg1)]:
                                                if not msg.sender:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                if not arg1:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                if arg2 > balanceOf[address(msg.sender)]:
                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                                                if balanceOf[address(msg.sender)] < arg2:
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] -= arg2
                                                if balanceOf[address(arg1)] > -arg2 - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                balanceOf[address(arg1)] += arg2
                                                emit Transfer(arg2, msg.sender, arg1);
                                            else:
                                                if totalFees <= 0:
                                                    if not msg.sender:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                                    if not arg1:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                                    if arg2 > balanceOf[address(msg.sender)]:
                                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                                                    if balanceOf[address(msg.sender)] < arg2:
                                                        revert with 'NH{q', 17
                                                    balanceOf[address(msg.sender)] -= arg2
                                                    if balanceOf[address(arg1)] > -arg2 - 1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    balanceOf[address(arg1)] += arg2
                                                    emit Transfer(arg2, msg.sender, arg1);
                                                else:
                                                    if not arg2:
                                                        if not arg2:
                                                            if 0 > arg2:
                                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                                            if arg2 < 0:
                                                                revert with 'NH{q', 17
                                                            if not msg.sender:
                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                            if not this.address:
                                                                revert with 0, 'ERC20: transfer to the zero address'
                                                            if 0 > balanceOf[address(msg.sender)]:
                                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                                            if balanceOf[address(msg.sender)] < 0:
                                                                revert with 'NH{q', 17
                                                            if balanceOf[address(this.address)] > -1:
                                                                revert with 'NH{q', 17
                                                            if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            emit Transfer(0, msg.sender, this.address);
                                                            if not msg.sender:
                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                            if 0 > balanceOf[address(msg.sender)]:
                                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                                            if balanceOf[address(msg.sender)] < 0:
                                                                revert with 'NH{q', 17
                                                            if balanceOf[57005] > -1:
                                                                revert with 'NH{q', 17
                                                            if balanceOf[57005] < balanceOf[57005]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            emit Transfer(0, msg.sender, 57005);
                                                            emit TokenBurn(0, msg.sender);
                                                            if not msg.sender:
                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                            if not arg1:
                                                                revert with 0, 'ERC20: transfer to the zero address'
                                                            if arg2 > balanceOf[address(msg.sender)]:
                                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                                            if balanceOf[address(msg.sender)] < arg2:
                                                                revert with 'NH{q', 17
                                                            balanceOf[address(msg.sender)] -= arg2
                                                            if balanceOf[address(arg1)] > -arg2 - 1:
                                                                revert with 'NH{q', 17
                                                            if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            balanceOf[address(arg1)] += arg2
                                                            emit Transfer(arg2, msg.sender, arg1);
                                                        else:
                                                            if arg2 and burnFee > -1 / arg2:
                                                                revert with 'NH{q', 17
                                                            if not arg2:
                                                                revert with 'NH{q', 18
                                                            if arg2 * burnFee / arg2 != burnFee:
                                                                revert with 0, 'SafeMath: multiplication overflow'
                                                            if 0 > -(arg2 * burnFee / 100) - 1:
                                                                revert with 'NH{q', 17
                                                            if arg2 * burnFee / 100 < 0:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            if arg2 * burnFee / 100 > arg2:
                                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                                            if arg2 < arg2 * burnFee / 100:
                                                                revert with 'NH{q', 17
                                                            if not msg.sender:
                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                            if not this.address:
                                                                revert with 0, 'ERC20: transfer to the zero address'
                                                            if 0 > balanceOf[address(msg.sender)]:
                                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                                            if balanceOf[address(msg.sender)] < 0:
                                                                revert with 'NH{q', 17
                                                            if balanceOf[address(this.address)] > -1:
                                                                revert with 'NH{q', 17
                                                            if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            emit Transfer(0, msg.sender, this.address);
                                                            if not msg.sender:
                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                            if arg2 * burnFee / 100 > balanceOf[address(msg.sender)]:
                                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                                            if balanceOf[address(msg.sender)] < arg2 * burnFee / 100:
                                                                revert with 'NH{q', 17
                                                            balanceOf[address(msg.sender)] -= arg2 * burnFee / 100
                                                            if balanceOf[57005] > -(arg2 * burnFee / 100) - 1:
                                                                revert with 'NH{q', 17
                                                            if balanceOf[57005] + (arg2 * burnFee / 100) < balanceOf[57005]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            balanceOf[57005] += arg2 * burnFee / 100
                                                            emit Transfer((arg2 * burnFee / 100), msg.sender, 57005);
                                                            emit TokenBurn((arg2 * burnFee / 100), msg.sender);
                                                            if not msg.sender:
                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                            if not arg1:
                                                                revert with 0, 'ERC20: transfer to the zero address'
                                                            if arg2 - (arg2 * burnFee / 100) > balanceOf[address(msg.sender)]:
                                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                                            if balanceOf[address(msg.sender)] < arg2 - (arg2 * burnFee / 100):
                                                                revert with 'NH{q', 17
                                                            balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * burnFee / 100)
                                                            if balanceOf[address(arg1)] > -arg2 + (arg2 * burnFee / 100) - 1:
                                                                revert with 'NH{q', 17
                                                            if balanceOf[address(arg1)] + arg2 - (arg2 * burnFee / 100) < balanceOf[address(arg1)]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * burnFee / 100)
                                                            emit Transfer((arg2 - (arg2 * burnFee / 100)), msg.sender, arg1);
                                                    else:
                                                        if arg2 and stor14 > -1 / arg2:
                                                            revert with 'NH{q', 17
                                                        if not arg2:
                                                            revert with 'NH{q', 18
                                                        if arg2 * stor14 / arg2 != stor14:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeMath: multiplication overflow'
                                                        if not arg2:
                                                            if arg2 * stor14 / 100 > -1:
                                                                revert with 'NH{q', 17
                                                            if arg2 * stor14 / 100 < arg2 * stor14 / 100:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            if arg2 * stor14 / 100 > arg2:
                                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                                            if arg2 < arg2 * stor14 / 100:
                                                                revert with 'NH{q', 17
                                                            if not msg.sender:
                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                            if not this.address:
                                                                revert with 0, 'ERC20: transfer to the zero address'
                                                            if arg2 * stor14 / 100 > balanceOf[address(msg.sender)]:
                                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                                            if balanceOf[address(msg.sender)] < arg2 * stor14 / 100:
                                                                revert with 'NH{q', 17
                                                            balanceOf[address(msg.sender)] -= arg2 * stor14 / 100
                                                            if balanceOf[address(this.address)] > -(arg2 * stor14 / 100) - 1:
                                                                revert with 'NH{q', 17
                                                            if balanceOf[address(this.address)] + (arg2 * stor14 / 100) < balanceOf[address(this.address)]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            balanceOf[address(this.address)] += arg2 * stor14 / 100
                                                            emit Transfer((arg2 * stor14 / 100), msg.sender, this.address);
                                                            if not msg.sender:
                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                            if 0 > balanceOf[address(msg.sender)]:
                                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                                            if balanceOf[address(msg.sender)] < 0:
                                                                revert with 'NH{q', 17
                                                            if balanceOf[57005] > -1:
                                                                revert with 'NH{q', 17
                                                            if balanceOf[57005] < balanceOf[57005]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            emit Transfer(0, msg.sender, 57005);
                                                            emit TokenBurn(0, msg.sender);
                                                            if not msg.sender:
                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                            if not arg1:
                                                                revert with 0, 'ERC20: transfer to the zero address'
                                                            if arg2 - (arg2 * stor14 / 100) > balanceOf[address(msg.sender)]:
                                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                                            if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor14 / 100):
                                                                revert with 'NH{q', 17
                                                            balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor14 / 100)
                                                            if balanceOf[address(arg1)] > -arg2 + (arg2 * stor14 / 100) - 1:
                                                                revert with 'NH{q', 17
                                                            if balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) < balanceOf[address(arg1)]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100)
                                                            emit Transfer((arg2 - (arg2 * stor14 / 100)), msg.sender, arg1);
                                                        else:
                                                            if arg2 and burnFee > -1 / arg2:
                                                                revert with 'NH{q', 17
                                                            if not arg2:
                                                                revert with 'NH{q', 18
                                                            if arg2 * burnFee / arg2 != burnFee:
                                                                revert with 0, 'SafeMath: multiplication overflow'
                                                            if arg2 * stor14 / 100 > -(arg2 * burnFee / 100) - 1:
                                                                revert with 'NH{q', 17
                                                            if (arg2 * stor14 / 100) + (arg2 * burnFee / 100) < arg2 * stor14 / 100:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            if (arg2 * stor14 / 100) + (arg2 * burnFee / 100) > arg2:
                                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                                            if arg2 < (arg2 * stor14 / 100) + (arg2 * burnFee / 100):
                                                                revert with 'NH{q', 17
                                                            if not msg.sender:
                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                            if not this.address:
                                                                revert with 0, 'ERC20: transfer to the zero address'
                                                            if arg2 * stor14 / 100 > balanceOf[address(msg.sender)]:
                                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                                            if balanceOf[address(msg.sender)] < arg2 * stor14 / 100:
                                                                revert with 'NH{q', 17
                                                            balanceOf[address(msg.sender)] -= arg2 * stor14 / 100
                                                            if balanceOf[address(this.address)] > -(arg2 * stor14 / 100) - 1:
                                                                revert with 'NH{q', 17
                                                            if balanceOf[address(this.address)] + (arg2 * stor14 / 100) < balanceOf[address(this.address)]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            balanceOf[address(this.address)] += arg2 * stor14 / 100
                                                            emit Transfer((arg2 * stor14 / 100), msg.sender, this.address);
                                                            if not msg.sender:
                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                            if arg2 * burnFee / 100 > balanceOf[address(msg.sender)]:
                                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                                            if balanceOf[address(msg.sender)] < arg2 * burnFee / 100:
                                                                revert with 'NH{q', 17
                                                            balanceOf[address(msg.sender)] -= arg2 * burnFee / 100
                                                            if balanceOf[57005] > -(arg2 * burnFee / 100) - 1:
                                                                revert with 'NH{q', 17
                                                            if balanceOf[57005] + (arg2 * burnFee / 100) < balanceOf[57005]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            balanceOf[57005] += arg2 * burnFee / 100
                                                            emit Transfer((arg2 * burnFee / 100), msg.sender, 57005);
                                                            emit TokenBurn((arg2 * burnFee / 100), msg.sender);
                                                            if not msg.sender:
                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                            if not arg1:
                                                                revert with 0, 'ERC20: transfer to the zero address'
                                                            if arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100) > balanceOf[address(msg.sender)]:
                                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[550 len 26] >> 48, 0
                                                            if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100):
                                                                revert with 'NH{q', 17
                                                            balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor14 / 100) + (arg2 * burnFee / 100)
                                                            if balanceOf[address(arg1)] > -arg2 + (arg2 * stor14 / 100) + (arg2 * burnFee / 100) - 1:
                                                                revert with 'NH{q', 17
                                                            if balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100) < balanceOf[address(arg1)]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100)
                                                            emit Transfer((arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100)), msg.sender, arg1);
                                    else:
                                        stor22 = 1
                                        if balanceOf[address(this.address)]:
                                            if balanceOf[address(this.address)] and liquidityFee > -1 / balanceOf[address(this.address)]:
                                                revert with 'NH{q', 17
                                            if not balanceOf[address(this.address)]:
                                                revert with 'NH{q', 18
                                            if balanceOf[address(this.address)] * liquidityFee / balanceOf[address(this.address)] != liquidityFee:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeMath: multiplication overflow'
                                            mem[96] = 26
                                            mem[128] = 'SafeMath: division by zero'
                                            if stor14 <= 0:
                                                revert with 0, 'SafeMath: division by zero', 0
                                            if not stor14:
                                                revert with 'NH{q', 18
                                            if not balanceOf[address(this.address)]:
                                                mem[160] = 26
                                                mem[192] = 'SafeMath: division by zero'
                                                if stor14 <= 0:
                                                    revert with 0, 'SafeMath: division by zero', 0
                                                if not stor14:
                                                    revert with 'NH{q', 18
                                                mem[224] = 26
                                                mem[256] = 'SafeMath: division by zero'
                                                mem[288] = 30
                                                mem[320] = 'SafeMath: subtraction overflow'
                                                if balanceOf[address(this.address)] * liquidityFee / stor14 / 2 > balanceOf[address(this.address)] * liquidityFee / stor14:
                                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                                if balanceOf[address(this.address)] * liquidityFee / stor14 < balanceOf[address(this.address)] * liquidityFee / stor14 / 2:
                                                    revert with 'NH{q', 17
                                                mem[352] = 2
                                                mem[384] = this.address
                                                require ext_code.size(uniswapV2RouterAddress)
                                                staticcall uniswapV2RouterAddress.WETH() with:
                                                        gas gas_remaining wei
                                                mem[448] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                mem[416] = ext_call.return_data[12 len 20]
                                                if not this.address:
                                                    revert with 0, 'ERC20: approve from the zero address'
                                                if not uniswapV2RouterAddress:
                                                    revert with 0, 'ERC20: approve to the zero address'
                                                allowance[address(this.address)][stor19].field_0 = balanceOf[address(this.address)] * liquidityFee / stor14 / 2
                                                allowance[address(this.address)][stor19].field_255 = 0
                                                emit Approval((balanceOf[address(this.address)] * liquidityFee / stor14 / 2), this.address, uniswapV2RouterAddress);
                                                mem[ceil32(return_data.size) + 448] = 0x791ac94700000000000000000000000000000000000000000000000000000000
                                                mem[ceil32(return_data.size) + 452] = balanceOf[address(this.address)] * liquidityFee / stor14 / 2
                                                idx = 0
                                                s = 384
                                                t = ceil32(return_data.size) + 644
                                                while idx < 2:
                                                    mem[t] = mem[s + 12 len 20]
                                                    idx = idx + 1
                                                    s = s + 32
                                                    t = t + 32
                                                    continue 
                                                require ext_code.size(uniswapV2RouterAddress)
                                                call uniswapV2RouterAddress.swapExactTokensForETHSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                     gas gas_remaining wei
                                                    args Mask(255, 1, balanceOf[address(this.address)] * liquidityFee / stor14), 0, 160, address(this.address), block.timestamp, 2, mem[ceil32(return_data.size) + 644 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[ceil32(return_data.size) + 448] = 30
                                                mem[ceil32(return_data.size) + 480] = 'SafeMath: subtraction overflow'
                                                if eth.balance(this.address) > eth.balance(this.address):
                                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                                if eth.balance(this.address) < eth.balance(this.address):
                                                    revert with 'NH{q', 17
                                                if not this.address:
                                                    revert with 0, 'ERC20: approve from the zero address'
                                                if not uniswapV2RouterAddress:
                                                    revert with 0, 'ERC20: approve to the zero address'
                                                allowance[address(this.address)][stor19].field_0 = (balanceOf[address(this.address)] * liquidityFee / stor14) - (balanceOf[address(this.address)] * liquidityFee / stor14 / 2)
                                                emit Approval(((balanceOf[address(this.address)] * liquidityFee / stor14) - (balanceOf[address(this.address)] * liquidityFee / stor14 / 2)), this.address, uniswapV2RouterAddress);
                                                mem[ceil32(return_data.size) + 580] = 0
                                                mem[ceil32(return_data.size) + 612] = 0
                                                mem[ceil32(return_data.size) + 644] = owner
                                                mem[ceil32(return_data.size) + 676] = block.timestamp
                                                require ext_code.size(uniswapV2RouterAddress)
                                                call uniswapV2RouterAddress.addLiquidityETH(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), (balanceOf[address(this.address)] * liquidityFee / stor14) - (balanceOf[address(this.address)] * liquidityFee / stor14 / 2), 0, 0, owner, block.timestamp
                                                mem[ceil32(return_data.size) + 512 len 96] = ext_call.return_data[0 len 96]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 96
                                                require ext_call.return_data[0] == ext_call.return_data[0]
                                                require ext_call.return_data[32] == ext_call.return_data[32]
                                                require ext_call.return_data[64] == ext_call.return_data[64]
                                                mem[(2 * ceil32(return_data.size)) + 512] = 3
                                                mem[(2 * ceil32(return_data.size)) + 544] = this.address
                                                require ext_code.size(uniswapV2RouterAddress)
                                                staticcall uniswapV2RouterAddress.WETH() with:
                                                        gas gas_remaining wei
                                                mem[(2 * ceil32(return_data.size)) + 640] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[64] = (4 * ceil32(return_data.size)) + 640
                                                require return_data.size >= 32
                                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                mem[(2 * ceil32(return_data.size)) + 576] = ext_call.return_data[12 len 20]
                                                mem[(2 * ceil32(return_data.size)) + 608] = sub_e5148bd6Address
                                                if not this.address:
                                                    revert with 0, 'ERC20: approve from the zero address'
                                                if not uniswapV2RouterAddress:
                                                    revert with 0, 'ERC20: approve to the zero address'
                                                mem[0] = uniswapV2RouterAddress
                                                mem[32] = sha3(address(this.address), 10)
                                                allowance[address(this.address)][stor19].field_0 = 0 / stor14
                                                emit Approval((0 / stor14), this.address, uniswapV2RouterAddress);
                                                mem[(4 * ceil32(return_data.size)) + 640] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                                mem[(4 * ceil32(return_data.size)) + 644] = 0 / stor14
                                                mem[(4 * ceil32(return_data.size)) + 676] = 0
                                                mem[(4 * ceil32(return_data.size)) + 708] = 160
                                                mem[(4 * ceil32(return_data.size)) + 804] = 3
                                                idx = 0
                                                s = (2 * ceil32(return_data.size)) + 544
                                                t = (4 * ceil32(return_data.size)) + 836
                                                while idx < mem[(2 * ceil32(return_data.size)) + 512]:
                                                    mem[t] = mem[s + 12 len 20]
                                                    idx = idx + 1
                                                    s = s + 32
                                                    t = t + 32
                                                    continue 
                                                mem[(4 * ceil32(return_data.size)) + 740] = this.address
                                                mem[(4 * ceil32(return_data.size)) + 772] = block.timestamp
                                                require ext_code.size(uniswapV2RouterAddress)
                                                call uniswapV2RouterAddress.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                     gas gas_remaining wei
                                                    args 0 / stor14, 0, 160, address(this.address), block.timestamp, mem[(4 * ceil32(return_data.size)) + 804 len (32 * mem[(2 * ceil32(return_data.size)) + 512]) + 32]
                                            else:
                                                if balanceOf[address(this.address)] and marketingFee > -1 / balanceOf[address(this.address)]:
                                                    revert with 'NH{q', 17
                                                if not balanceOf[address(this.address)]:
                                                    revert with 'NH{q', 18
                                                if balanceOf[address(this.address)] * marketingFee / balanceOf[address(this.address)] != marketingFee:
                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                mem[160] = 26
                                                mem[192] = 'SafeMath: division by zero'
                                                if stor14 <= 0:
                                                    revert with 0, 'SafeMath: division by zero', 0
                                                if not stor14:
                                                    revert with 'NH{q', 18
                                                mem[224] = 26
                                                mem[256] = 'SafeMath: division by zero'
                                                mem[288] = 30
                                                mem[320] = 'SafeMath: subtraction overflow'
                                                if balanceOf[address(this.address)] * liquidityFee / stor14 / 2 > balanceOf[address(this.address)] * liquidityFee / stor14:
                                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                                if balanceOf[address(this.address)] * liquidityFee / stor14 < balanceOf[address(this.address)] * liquidityFee / stor14 / 2:
                                                    revert with 'NH{q', 17
                                                mem[352] = 2
                                                mem[384] = this.address
                                                require ext_code.size(uniswapV2RouterAddress)
                                                staticcall uniswapV2RouterAddress.WETH() with:
                                                        gas gas_remaining wei
                                                mem[448] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                mem[416] = ext_call.return_data[12 len 20]
                                                if not this.address:
                                                    revert with 0, 'ERC20: approve from the zero address'
                                                if not uniswapV2RouterAddress:
                                                    revert with 0, 'ERC20: approve to the zero address'
                                                allowance[address(this.address)][stor19].field_0 = balanceOf[address(this.address)] * liquidityFee / stor14 / 2
                                                allowance[address(this.address)][stor19].field_255 = 0
                                                emit Approval((balanceOf[address(this.address)] * liquidityFee / stor14 / 2), this.address, uniswapV2RouterAddress);
                                                mem[ceil32(return_data.size) + 448] = 0x791ac94700000000000000000000000000000000000000000000000000000000
                                                mem[ceil32(return_data.size) + 452] = balanceOf[address(this.address)] * liquidityFee / stor14 / 2
                                                idx = 0
                                                s = 384
                                                t = ceil32(return_data.size) + 644
                                                while idx < 2:
                                                    mem[t] = mem[s + 12 len 20]
                                                    idx = idx + 1
                                                    s = s + 32
                                                    t = t + 32
                                                    continue 
                                                require ext_code.size(uniswapV2RouterAddress)
                                                call uniswapV2RouterAddress.swapExactTokensForETHSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                     gas gas_remaining wei
                                                    args Mask(255, 1, balanceOf[address(this.address)] * liquidityFee / stor14), 0, 160, address(this.address), block.timestamp, 2, mem[ceil32(return_data.size) + 644 len 64]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[ceil32(return_data.size) + 448] = 30
                                                mem[ceil32(return_data.size) + 480] = 'SafeMath: subtraction overflow'
                                                if eth.balance(this.address) > eth.balance(this.address):
                                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                                if eth.balance(this.address) < eth.balance(this.address):
                                                    revert with 'NH{q', 17
                                                if not this.address:
                                                    revert with 0, 'ERC20: approve from the zero address'
                                                if not uniswapV2RouterAddress:
                                                    revert with 0, 'ERC20: approve to the zero address'
                                                allowance[address(this.address)][stor19].field_0 = (balanceOf[address(this.address)] * liquidityFee / stor14) - (balanceOf[address(this.address)] * liquidityFee / stor14 / 2)
                                                emit Approval(((balanceOf[address(this.address)] * liquidityFee / stor14) - (balanceOf[address(this.address)] * liquidityFee / stor14 / 2)), this.address, uniswapV2RouterAddress);
                                                mem[ceil32(return_data.size) + 580] = 0
                                                mem[ceil32(return_data.size) + 612] = 0
                                                mem[ceil32(return_data.size) + 644] = owner
                                                mem[ceil32(return_data.size) + 676] = block.timestamp
                                                require ext_code.size(uniswapV2RouterAddress)
                                                call uniswapV2RouterAddress.addLiquidityETH(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                                     gas gas_remaining wei
                                                    args address(this.address), (balanceOf[address(this.address)] * liquidityFee / stor14) - (balanceOf[address(this.address)] * liquidityFee / stor14 / 2), 0, 0, owner, block.timestamp
                                                mem[ceil32(return_data.size) + 512 len 96] = ext_call.return_data[0 len 96]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 96
                                                require ext_call.return_data[0] == ext_call.return_data[0]
                                                require ext_call.return_data[32] == ext_call.return_data[32]
                                                require ext_call.return_data[64] == ext_call.return_data[64]
                                                mem[(2 * ceil32(return_data.size)) + 512] = 3
                                                mem[(2 * ceil32(return_data.size)) + 544] = this.address
                                                require ext_code.size(uniswapV2RouterAddress)
                                                staticcall uniswapV2RouterAddress.WETH() with:
                                                        gas gas_remaining wei
                                                mem[(2 * ceil32(return_data.size)) + 640] = ext_call.return_data[0]
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                mem[64] = (4 * ceil32(return_data.size)) + 640
                                                require return_data.size >= 32
                                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                                mem[(2 * ceil32(return_data.size)) + 576] = ext_call.return_data[12 len 20]
                                                mem[(2 * ceil32(return_data.size)) + 608] = sub_e5148bd6Address
                                                if not this.address:
                                                    revert with 0, 'ERC20: approve from the zero address'
                                                if not uniswapV2RouterAddress:
                                                    revert with 0, 'ERC20: approve to the zero address'
                                                mem[0] = uniswapV2RouterAddress
                                                mem[32] = sha3(address(this.address), 10)
                                                allowance[address(this.address)][stor19].field_0 = balanceOf[address(this.address)] * marketingFee / stor14
                                                emit Approval((balanceOf[address(this.address)] * marketingFee / stor14), this.address, uniswapV2RouterAddress);
                                                mem[(4 * ceil32(return_data.size)) + 640] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                                mem[(4 * ceil32(return_data.size)) + 644] = balanceOf[address(this.address)] * marketingFee / stor14
                                                mem[(4 * ceil32(return_data.size)) + 676] = 0
                                                mem[(4 * ceil32(return_data.size)) + 708] = 160
                                                mem[(4 * ceil32(return_data.size)) + 804] = 3
                                                idx = 0
                                                s = (2 * ceil32(return_data.size)) + 544
                                                t = (4 * ceil32(return_data.size)) + 836
                                                while idx < mem[(2 * ceil32(return_data.size)) + 512]:
                                                    mem[t] = mem[s + 12 len 20]
                                                    idx = idx + 1
                                                    s = s + 32
                                                    t = t + 32
                                                    continue 
                                                mem[(4 * ceil32(return_data.size)) + 740] = this.address
                                                mem[(4 * ceil32(return_data.size)) + 772] = block.timestamp
                                                require ext_code.size(uniswapV2RouterAddress)
                                                call uniswapV2RouterAddress.swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                     gas gas_remaining wei
                                                    args balanceOf[address(this.address)] * marketingFee / stor14, 0, 160, address(this.address), block.timestamp, mem[(4 * ceil32(return_data.size)) + 804 len (32 * mem[(2 * ceil32(return_data.size)) + 512]) + 32]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require ext_code.size(sub_e5148bd6Address)
                                            staticcall sub_e5148bd6Address.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args this.address
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == ext_call.return_data[0]
                                            mem[(4 * ceil32(return_data.size)) + 644] = marketingAddress
                                            mem[(4 * ceil32(return_data.size)) + 676] = ext_call.return_data[0]
                                            require ext_code.size(sub_e5148bd6Address)
                                            call sub_e5148bd6Address.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args mem[(4 * ceil32(return_data.size)) + 644 len (7 * ceil32(return_data.size)) + 64]
                                            mem[(4 * ceil32(return_data.size)) + 640] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == bool(ext_call.return_data[0])
                                            stor22 = 0
                                            if stor11[address(msg.sender)]:
                                                if not msg.sender:
                                                    mem[(8 * ceil32(return_data.size)) + 640] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 644] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 676] = 37
                                                    mem[(8 * ceil32(return_data.size)) + 708] = 'ERC20: transfer from the zero ad'
                                                    mem[(8 * ceil32(return_data.size)) + 740] = 'dress'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 640
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if not arg1:
                                                    mem[(8 * ceil32(return_data.size)) + 640] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 644] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 676] = 35
                                                    mem[(8 * ceil32(return_data.size)) + 708] = 'ERC20: transfer to the zero addr'
                                                    mem[(8 * ceil32(return_data.size)) + 740] = 'ess'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 640
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if arg2 > balanceOf[address(msg.sender)]:
                                                    mem[(8 * ceil32(return_data.size)) + 736] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 740] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 772] = 38
                                                    mem[(8 * ceil32(return_data.size)) + 804 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 710 len 26]
                                                    mem[(8 * ceil32(return_data.size)) + 842] = 0
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 736
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if balanceOf[address(msg.sender)] < arg2:
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] -= arg2
                                                if balanceOf[address(arg1)] > -arg2 - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(arg1)] + arg2 >= balanceOf[address(arg1)]:
                                                    balanceOf[address(arg1)] += arg2
                                                    emit Transfer(arg2, msg.sender, arg1);
                                                    return 1
                                                mem[(8 * ceil32(return_data.size)) + 736] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[(8 * ceil32(return_data.size)) + 740] = 32
                                                mem[(8 * ceil32(return_data.size)) + 772] = 27
                                                mem[(8 * ceil32(return_data.size)) + 804] = 'SafeMath: addition overflow'
                                                revert with memory
                                                  from (8 * ceil32(return_data.size)) + 736
                                                   len (13 * ceil32(return_data.size)) + 100
                                            if stor11[address(arg1)]:
                                                if not msg.sender:
                                                    mem[(8 * ceil32(return_data.size)) + 640] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 644] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 676] = 37
                                                    mem[(8 * ceil32(return_data.size)) + 708] = 'ERC20: transfer from the zero ad'
                                                    mem[(8 * ceil32(return_data.size)) + 740] = 'dress'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 640
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if not arg1:
                                                    mem[(8 * ceil32(return_data.size)) + 640] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 644] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 676] = 35
                                                    mem[(8 * ceil32(return_data.size)) + 708] = 'ERC20: transfer to the zero addr'
                                                    mem[(8 * ceil32(return_data.size)) + 740] = 'ess'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 640
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if arg2 > balanceOf[address(msg.sender)]:
                                                    mem[(8 * ceil32(return_data.size)) + 736] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 740] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 772] = 38
                                                    mem[(8 * ceil32(return_data.size)) + 804 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 710 len 26]
                                                    mem[(8 * ceil32(return_data.size)) + 842] = 0
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 736
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if balanceOf[address(msg.sender)] < arg2:
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] -= arg2
                                                if balanceOf[address(arg1)] > -arg2 - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(arg1)] + arg2 >= balanceOf[address(arg1)]:
                                                    balanceOf[address(arg1)] += arg2
                                                    emit Transfer(arg2, msg.sender, arg1);
                                                    return 1
                                                mem[(8 * ceil32(return_data.size)) + 736] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[(8 * ceil32(return_data.size)) + 740] = 32
                                                mem[(8 * ceil32(return_data.size)) + 772] = 27
                                                mem[(8 * ceil32(return_data.size)) + 804] = 'SafeMath: addition overflow'
                                                revert with memory
                                                  from (8 * ceil32(return_data.size)) + 736
                                                   len (13 * ceil32(return_data.size)) + 100
                                            if totalFees <= 0:
                                                if not msg.sender:
                                                    mem[(8 * ceil32(return_data.size)) + 640] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 644] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 676] = 37
                                                    mem[(8 * ceil32(return_data.size)) + 708] = 'ERC20: transfer from the zero ad'
                                                    mem[(8 * ceil32(return_data.size)) + 740] = 'dress'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 640
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if not arg1:
                                                    mem[(8 * ceil32(return_data.size)) + 640] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 644] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 676] = 35
                                                    mem[(8 * ceil32(return_data.size)) + 708] = 'ERC20: transfer to the zero addr'
                                                    mem[(8 * ceil32(return_data.size)) + 740] = 'ess'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 640
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if arg2 > balanceOf[address(msg.sender)]:
                                                    mem[(8 * ceil32(return_data.size)) + 736] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 740] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 772] = 38
                                                    mem[(8 * ceil32(return_data.size)) + 804 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 710 len 26]
                                                    mem[(8 * ceil32(return_data.size)) + 842] = 0
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 736
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if balanceOf[address(msg.sender)] < arg2:
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] -= arg2
                                                if balanceOf[address(arg1)] > -arg2 - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(arg1)] + arg2 >= balanceOf[address(arg1)]:
                                                    balanceOf[address(arg1)] += arg2
                                                    emit Transfer(arg2, msg.sender, arg1);
                                                    return 1
                                                mem[(8 * ceil32(return_data.size)) + 736] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[(8 * ceil32(return_data.size)) + 740] = 32
                                                mem[(8 * ceil32(return_data.size)) + 772] = 27
                                                mem[(8 * ceil32(return_data.size)) + 804] = 'SafeMath: addition overflow'
                                                revert with memory
                                                  from (8 * ceil32(return_data.size)) + 736
                                                   len (13 * ceil32(return_data.size)) + 100
                                            if not arg2:
                                                if not arg2:
                                                    if 0 > arg2:
                                                        mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 868] = 30
                                                        mem[(8 * ceil32(return_data.size)) + 900] = 'SafeMath: subtraction overflow'
                                                        mem[(8 * ceil32(return_data.size)) + 930] = 0
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 832
                                                           len (13 * ceil32(return_data.size)) + 100
                                                    if arg2 < 0:
                                                        revert with 'NH{q', 17
                                                    if not msg.sender:
                                                        mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 868] = 37
                                                        mem[(8 * ceil32(return_data.size)) + 900] = 'ERC20: transfer from the zero ad'
                                                        mem[(8 * ceil32(return_data.size)) + 932] = 'dress'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 832
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if not this.address:
                                                        mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 868] = 35
                                                        mem[(8 * ceil32(return_data.size)) + 900] = 'ERC20: transfer to the zero addr'
                                                        mem[(8 * ceil32(return_data.size)) + 932] = 'ess'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 832
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if 0 > balanceOf[address(msg.sender)]:
                                                        mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 964] = 38
                                                        mem[(8 * ceil32(return_data.size)) + 996 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 902 len 26]
                                                        mem[(8 * ceil32(return_data.size)) + 1034] = 0
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 928
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if balanceOf[address(msg.sender)] < 0:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(this.address)] > -1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                                        mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 964] = 27
                                                        mem[(8 * ceil32(return_data.size)) + 996] = 'SafeMath: addition overflow'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 928
                                                           len (13 * ceil32(return_data.size)) + 100
                                                    emit Transfer(0, msg.sender, this.address);
                                                    if not msg.sender:
                                                        mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 964] = 37
                                                        mem[(8 * ceil32(return_data.size)) + 996] = 'ERC20: transfer from the zero ad'
                                                        mem[(8 * ceil32(return_data.size)) + 1028] = 'dress'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 928
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if 0 > balanceOf[address(msg.sender)]:
                                                        mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 1060] = 38
                                                        mem[(8 * ceil32(return_data.size)) + 1092 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 998 len 26]
                                                        mem[(8 * ceil32(return_data.size)) + 1130] = 0
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 1024
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if balanceOf[address(msg.sender)] < 0:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[57005] > -1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[57005] < balanceOf[57005]:
                                                        mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 1060] = 27
                                                        mem[(8 * ceil32(return_data.size)) + 1092] = 'SafeMath: addition overflow'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 1024
                                                           len (13 * ceil32(return_data.size)) + 100
                                                    emit Transfer(0, msg.sender, 57005);
                                                    emit TokenBurn(0, msg.sender);
                                                    if not msg.sender:
                                                        mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 1060] = 37
                                                        mem[(8 * ceil32(return_data.size)) + 1092] = 'ERC20: transfer from the zero ad'
                                                        mem[(8 * ceil32(return_data.size)) + 1124] = 'dress'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 1024
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if not arg1:
                                                        mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 1060] = 35
                                                        mem[(8 * ceil32(return_data.size)) + 1092] = 'ERC20: transfer to the zero addr'
                                                        mem[(8 * ceil32(return_data.size)) + 1124] = 'ess'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 1024
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if arg2 > balanceOf[address(msg.sender)]:
                                                        mem[(8 * ceil32(return_data.size)) + 1120] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 1124] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 1156] = 38
                                                        mem[(8 * ceil32(return_data.size)) + 1188 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 1094 len 26]
                                                        mem[(8 * ceil32(return_data.size)) + 1226] = 0
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 1120
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if balanceOf[address(msg.sender)] < arg2:
                                                        revert with 'NH{q', 17
                                                    balanceOf[address(msg.sender)] -= arg2
                                                    if balanceOf[address(arg1)] > -arg2 - 1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(arg1)] + arg2 >= balanceOf[address(arg1)]:
                                                        balanceOf[address(arg1)] += arg2
                                                        emit Transfer(arg2, msg.sender, arg1);
                                                        return 1
                                                else:
                                                    if arg2 and burnFee > -1 / arg2:
                                                        revert with 'NH{q', 17
                                                    if not arg2:
                                                        revert with 'NH{q', 18
                                                    if arg2 * burnFee / arg2 != burnFee:
                                                        mem[(8 * ceil32(return_data.size)) + 704] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 708] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 740] = 33
                                                        mem[(8 * ceil32(return_data.size)) + 772] = 'SafeMath: multiplication overflo'
                                                        mem[(8 * ceil32(return_data.size)) + 804] = 'w'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 704
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if 0 > -(arg2 * burnFee / 100) - 1:
                                                        revert with 'NH{q', 17
                                                    if arg2 * burnFee / 100 < 0:
                                                        mem[(8 * ceil32(return_data.size)) + 768] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 772] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 804] = 27
                                                        mem[(8 * ceil32(return_data.size)) + 836] = 'SafeMath: addition overflow'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 768
                                                           len (13 * ceil32(return_data.size)) + 100
                                                    if arg2 * burnFee / 100 > arg2:
                                                        mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 868] = 30
                                                        mem[(8 * ceil32(return_data.size)) + 900] = 'SafeMath: subtraction overflow'
                                                        mem[(8 * ceil32(return_data.size)) + 930] = 0
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 832
                                                           len (13 * ceil32(return_data.size)) + 100
                                                    if arg2 < arg2 * burnFee / 100:
                                                        revert with 'NH{q', 17
                                                    if not msg.sender:
                                                        mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 868] = 37
                                                        mem[(8 * ceil32(return_data.size)) + 900] = 'ERC20: transfer from the zero ad'
                                                        mem[(8 * ceil32(return_data.size)) + 932] = 'dress'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 832
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if not this.address:
                                                        mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 868] = 35
                                                        mem[(8 * ceil32(return_data.size)) + 900] = 'ERC20: transfer to the zero addr'
                                                        mem[(8 * ceil32(return_data.size)) + 932] = 'ess'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 832
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if 0 > balanceOf[address(msg.sender)]:
                                                        mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 964] = 38
                                                        mem[(8 * ceil32(return_data.size)) + 996 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 902 len 26]
                                                        mem[(8 * ceil32(return_data.size)) + 1034] = 0
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 928
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if balanceOf[address(msg.sender)] < 0:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(this.address)] > -1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                                        mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 964] = 27
                                                        mem[(8 * ceil32(return_data.size)) + 996] = 'SafeMath: addition overflow'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 928
                                                           len (13 * ceil32(return_data.size)) + 100
                                                    emit Transfer(0, msg.sender, this.address);
                                                    if not msg.sender:
                                                        mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 964] = 37
                                                        mem[(8 * ceil32(return_data.size)) + 996] = 'ERC20: transfer from the zero ad'
                                                        mem[(8 * ceil32(return_data.size)) + 1028] = 'dress'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 928
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if arg2 * burnFee / 100 > balanceOf[address(msg.sender)]:
                                                        mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 1060] = 38
                                                        mem[(8 * ceil32(return_data.size)) + 1092 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 998 len 26]
                                                        mem[(8 * ceil32(return_data.size)) + 1130] = 0
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 1024
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if balanceOf[address(msg.sender)] < arg2 * burnFee / 100:
                                                        revert with 'NH{q', 17
                                                    balanceOf[address(msg.sender)] -= arg2 * burnFee / 100
                                                    if balanceOf[57005] > -(arg2 * burnFee / 100) - 1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[57005] + (arg2 * burnFee / 100) < balanceOf[57005]:
                                                        mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 1060] = 27
                                                        mem[(8 * ceil32(return_data.size)) + 1092] = 'SafeMath: addition overflow'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 1024
                                                           len (13 * ceil32(return_data.size)) + 100
                                                    balanceOf[57005] += arg2 * burnFee / 100
                                                    emit Transfer((arg2 * burnFee / 100), msg.sender, 57005);
                                                    emit TokenBurn((arg2 * burnFee / 100), msg.sender);
                                                    if not msg.sender:
                                                        mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 1060] = 37
                                                        mem[(8 * ceil32(return_data.size)) + 1092] = 'ERC20: transfer from the zero ad'
                                                        mem[(8 * ceil32(return_data.size)) + 1124] = 'dress'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 1024
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if not arg1:
                                                        mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 1060] = 35
                                                        mem[(8 * ceil32(return_data.size)) + 1092] = 'ERC20: transfer to the zero addr'
                                                        mem[(8 * ceil32(return_data.size)) + 1124] = 'ess'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 1024
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if arg2 - (arg2 * burnFee / 100) > balanceOf[address(msg.sender)]:
                                                        mem[(8 * ceil32(return_data.size)) + 1120] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 1124] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 1156] = 38
                                                        mem[(8 * ceil32(return_data.size)) + 1188 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 1094 len 26]
                                                        mem[(8 * ceil32(return_data.size)) + 1226] = 0
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 1120
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if balanceOf[address(msg.sender)] < arg2 - (arg2 * burnFee / 100):
                                                        revert with 'NH{q', 17
                                                    balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * burnFee / 100)
                                                    if balanceOf[address(arg1)] > -arg2 + (arg2 * burnFee / 100) - 1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(arg1)] + arg2 - (arg2 * burnFee / 100) >= balanceOf[address(arg1)]:
                                                        balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * burnFee / 100)
                                                        emit Transfer((arg2 - (arg2 * burnFee / 100)), msg.sender, arg1);
                                                        return 1
                                            else:
                                                if arg2 and stor14 > -1 / arg2:
                                                    revert with 'NH{q', 17
                                                if not arg2:
                                                    revert with 'NH{q', 18
                                                if arg2 * stor14 / arg2 != stor14:
                                                    mem[(8 * ceil32(return_data.size)) + 640] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[(8 * ceil32(return_data.size)) + 644] = 32
                                                    mem[(8 * ceil32(return_data.size)) + 676] = 33
                                                    mem[(8 * ceil32(return_data.size)) + 708] = 'SafeMath: multiplication overflo'
                                                    mem[(8 * ceil32(return_data.size)) + 740] = 'w'
                                                    revert with memory
                                                      from (8 * ceil32(return_data.size)) + 640
                                                       len (13 * ceil32(return_data.size)) + 132
                                                if not arg2:
                                                    if arg2 * stor14 / 100 > -1:
                                                        revert with 'NH{q', 17
                                                    if arg2 * stor14 / 100 < arg2 * stor14 / 100:
                                                        mem[(8 * ceil32(return_data.size)) + 768] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 772] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 804] = 27
                                                        mem[(8 * ceil32(return_data.size)) + 836] = 'SafeMath: addition overflow'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 768
                                                           len (13 * ceil32(return_data.size)) + 100
                                                    if arg2 * stor14 / 100 > arg2:
                                                        mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 868] = 30
                                                        mem[(8 * ceil32(return_data.size)) + 900] = 'SafeMath: subtraction overflow'
                                                        mem[(8 * ceil32(return_data.size)) + 930] = 0
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 832
                                                           len (13 * ceil32(return_data.size)) + 100
                                                    if arg2 < arg2 * stor14 / 100:
                                                        revert with 'NH{q', 17
                                                    if not msg.sender:
                                                        mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 868] = 37
                                                        mem[(8 * ceil32(return_data.size)) + 900] = 'ERC20: transfer from the zero ad'
                                                        mem[(8 * ceil32(return_data.size)) + 932] = 'dress'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 832
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if not this.address:
                                                        mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 868] = 35
                                                        mem[(8 * ceil32(return_data.size)) + 900] = 'ERC20: transfer to the zero addr'
                                                        mem[(8 * ceil32(return_data.size)) + 932] = 'ess'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 832
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if arg2 * stor14 / 100 > balanceOf[address(msg.sender)]:
                                                        mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 964] = 38
                                                        mem[(8 * ceil32(return_data.size)) + 996 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 902 len 26]
                                                        mem[(8 * ceil32(return_data.size)) + 1034] = 0
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 928
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if balanceOf[address(msg.sender)] < arg2 * stor14 / 100:
                                                        revert with 'NH{q', 17
                                                    balanceOf[address(msg.sender)] -= arg2 * stor14 / 100
                                                    if balanceOf[address(this.address)] > -(arg2 * stor14 / 100) - 1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(this.address)] + (arg2 * stor14 / 100) < balanceOf[address(this.address)]:
                                                        mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 964] = 27
                                                        mem[(8 * ceil32(return_data.size)) + 996] = 'SafeMath: addition overflow'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 928
                                                           len (13 * ceil32(return_data.size)) + 100
                                                    balanceOf[address(this.address)] += arg2 * stor14 / 100
                                                    emit Transfer((arg2 * stor14 / 100), msg.sender, this.address);
                                                    if not msg.sender:
                                                        mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 964] = 37
                                                        mem[(8 * ceil32(return_data.size)) + 996] = 'ERC20: transfer from the zero ad'
                                                        mem[(8 * ceil32(return_data.size)) + 1028] = 'dress'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 928
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if 0 > balanceOf[address(msg.sender)]:
                                                        mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 1060] = 38
                                                        mem[(8 * ceil32(return_data.size)) + 1092 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 998 len 26]
                                                        mem[(8 * ceil32(return_data.size)) + 1130] = 0
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 1024
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if balanceOf[address(msg.sender)] < 0:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[57005] > -1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[57005] < balanceOf[57005]:
                                                        mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 1060] = 27
                                                        mem[(8 * ceil32(return_data.size)) + 1092] = 'SafeMath: addition overflow'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 1024
                                                           len (13 * ceil32(return_data.size)) + 100
                                                    emit Transfer(0, msg.sender, 57005);
                                                    emit TokenBurn(0, msg.sender);
                                                    if not msg.sender:
                                                        mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 1060] = 37
                                                        mem[(8 * ceil32(return_data.size)) + 1092] = 'ERC20: transfer from the zero ad'
                                                        mem[(8 * ceil32(return_data.size)) + 1124] = 'dress'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 1024
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if not arg1:
                                                        mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 1060] = 35
                                                        mem[(8 * ceil32(return_data.size)) + 1092] = 'ERC20: transfer to the zero addr'
                                                        mem[(8 * ceil32(return_data.size)) + 1124] = 'ess'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 1024
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if arg2 - (arg2 * stor14 / 100) > balanceOf[address(msg.sender)]:
                                                        mem[(8 * ceil32(return_data.size)) + 1120] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 1124] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 1156] = 38
                                                        mem[(8 * ceil32(return_data.size)) + 1188 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 1094 len 26]
                                                        mem[(8 * ceil32(return_data.size)) + 1226] = 0
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 1120
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor14 / 100):
                                                        revert with 'NH{q', 17
                                                    balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor14 / 100)
                                                    if balanceOf[address(arg1)] > -arg2 + (arg2 * stor14 / 100) - 1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) >= balanceOf[address(arg1)]:
                                                        balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100)
                                                        emit Transfer((arg2 - (arg2 * stor14 / 100)), msg.sender, arg1);
                                                        return 1
                                                else:
                                                    if arg2 and burnFee > -1 / arg2:
                                                        revert with 'NH{q', 17
                                                    if not arg2:
                                                        revert with 'NH{q', 18
                                                    if arg2 * burnFee / arg2 != burnFee:
                                                        mem[(8 * ceil32(return_data.size)) + 704] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 708] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 740] = 33
                                                        mem[(8 * ceil32(return_data.size)) + 772] = 'SafeMath: multiplication overflo'
                                                        mem[(8 * ceil32(return_data.size)) + 804] = 'w'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 704
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if arg2 * stor14 / 100 > -(arg2 * burnFee / 100) - 1:
                                                        revert with 'NH{q', 17
                                                    if (arg2 * stor14 / 100) + (arg2 * burnFee / 100) < arg2 * stor14 / 100:
                                                        mem[(8 * ceil32(return_data.size)) + 768] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 772] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 804] = 27
                                                        mem[(8 * ceil32(return_data.size)) + 836] = 'SafeMath: addition overflow'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 768
                                                           len (13 * ceil32(return_data.size)) + 100
                                                    if (arg2 * stor14 / 100) + (arg2 * burnFee / 100) > arg2:
                                                        mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 868] = 30
                                                        mem[(8 * ceil32(return_data.size)) + 900] = 'SafeMath: subtraction overflow'
                                                        mem[(8 * ceil32(return_data.size)) + 930] = 0
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 832
                                                           len (13 * ceil32(return_data.size)) + 100
                                                    if arg2 < (arg2 * stor14 / 100) + (arg2 * burnFee / 100):
                                                        revert with 'NH{q', 17
                                                    if not msg.sender:
                                                        mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 868] = 37
                                                        mem[(8 * ceil32(return_data.size)) + 900] = 'ERC20: transfer from the zero ad'
                                                        mem[(8 * ceil32(return_data.size)) + 932] = 'dress'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 832
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if not this.address:
                                                        mem[(8 * ceil32(return_data.size)) + 832] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 836] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 868] = 35
                                                        mem[(8 * ceil32(return_data.size)) + 900] = 'ERC20: transfer to the zero addr'
                                                        mem[(8 * ceil32(return_data.size)) + 932] = 'ess'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 832
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if arg2 * stor14 / 100 > balanceOf[address(msg.sender)]:
                                                        mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 964] = 38
                                                        mem[(8 * ceil32(return_data.size)) + 996 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 902 len 26]
                                                        mem[(8 * ceil32(return_data.size)) + 1034] = 0
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 928
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if balanceOf[address(msg.sender)] < arg2 * stor14 / 100:
                                                        revert with 'NH{q', 17
                                                    balanceOf[address(msg.sender)] -= arg2 * stor14 / 100
                                                    if balanceOf[address(this.address)] > -(arg2 * stor14 / 100) - 1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(this.address)] + (arg2 * stor14 / 100) < balanceOf[address(this.address)]:
                                                        mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 964] = 27
                                                        mem[(8 * ceil32(return_data.size)) + 996] = 'SafeMath: addition overflow'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 928
                                                           len (13 * ceil32(return_data.size)) + 100
                                                    balanceOf[address(this.address)] += arg2 * stor14 / 100
                                                    emit Transfer((arg2 * stor14 / 100), msg.sender, this.address);
                                                    if not msg.sender:
                                                        mem[(8 * ceil32(return_data.size)) + 928] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 932] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 964] = 37
                                                        mem[(8 * ceil32(return_data.size)) + 996] = 'ERC20: transfer from the zero ad'
                                                        mem[(8 * ceil32(return_data.size)) + 1028] = 'dress'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 928
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if arg2 * burnFee / 100 > balanceOf[address(msg.sender)]:
                                                        mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 1060] = 38
                                                        mem[(8 * ceil32(return_data.size)) + 1092 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 998 len 26]
                                                        mem[(8 * ceil32(return_data.size)) + 1130] = 0
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 1024
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if balanceOf[address(msg.sender)] < arg2 * burnFee / 100:
                                                        revert with 'NH{q', 17
                                                    balanceOf[address(msg.sender)] -= arg2 * burnFee / 100
                                                    if balanceOf[57005] > -(arg2 * burnFee / 100) - 1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[57005] + (arg2 * burnFee / 100) < balanceOf[57005]:
                                                        mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 1060] = 27
                                                        mem[(8 * ceil32(return_data.size)) + 1092] = 'SafeMath: addition overflow'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 1024
                                                           len (13 * ceil32(return_data.size)) + 100
                                                    balanceOf[57005] += arg2 * burnFee / 100
                                                    emit Transfer((arg2 * burnFee / 100), msg.sender, 57005);
                                                    emit TokenBurn((arg2 * burnFee / 100), msg.sender);
                                                    if not msg.sender:
                                                        mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 1060] = 37
                                                        mem[(8 * ceil32(return_data.size)) + 1092] = 'ERC20: transfer from the zero ad'
                                                        mem[(8 * ceil32(return_data.size)) + 1124] = 'dress'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 1024
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if not arg1:
                                                        mem[(8 * ceil32(return_data.size)) + 1024] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 1028] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 1060] = 35
                                                        mem[(8 * ceil32(return_data.size)) + 1092] = 'ERC20: transfer to the zero addr'
                                                        mem[(8 * ceil32(return_data.size)) + 1124] = 'ess'
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 1024
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100) > balanceOf[address(msg.sender)]:
                                                        mem[(8 * ceil32(return_data.size)) + 1120] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[(8 * ceil32(return_data.size)) + 1124] = 32
                                                        mem[(8 * ceil32(return_data.size)) + 1156] = 38
                                                        mem[(8 * ceil32(return_data.size)) + 1188 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[(8 * ceil32(return_data.size)) + 1094 len 26]
                                                        mem[(8 * ceil32(return_data.size)) + 1226] = 0
                                                        revert with memory
                                                          from (8 * ceil32(return_data.size)) + 1120
                                                           len (13 * ceil32(return_data.size)) + 132
                                                    if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100):
                                                        revert with 'NH{q', 17
                                                    balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor14 / 100) + (arg2 * burnFee / 100)
                                                    if balanceOf[address(arg1)] > -arg2 + (arg2 * stor14 / 100) + (arg2 * burnFee / 100) - 1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100) >= balanceOf[address(arg1)]:
                                                        balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100)
                                                        emit Transfer((arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100)), msg.sender, arg1);
                                                        return 1
                                            mem[(8 * ceil32(return_data.size)) + 1120] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[(8 * ceil32(return_data.size)) + 1124] = 32
                                            mem[(8 * ceil32(return_data.size)) + 1156] = 27
                                            mem[(8 * ceil32(return_data.size)) + 1188] = 'SafeMath: addition overflow'
                                            revert with memory
                                              from (8 * ceil32(return_data.size)) + 1120
                                               len (13 * ceil32(return_data.size)) + 100
                                        mem[96] = 26
                                        mem[128] = 'SafeMath: division by zero'
                                        if stor14 <= 0:
                                            revert with 0, 'SafeMath: division by zero', 0
                                        if not stor14:
                                            revert with 'NH{q', 18
                                        if not balanceOf[address(this.address)]:
                                            mem[160] = 26
                                            mem[192] = 'SafeMath: division by zero'
                                            if stor14 <= 0:
                                                revert with 0, 'SafeMath: division by zero', 0
                                            if not stor14:
                                                revert with 'NH{q', 18
                                            mem[224] = 26
                                            mem[256] = 'SafeMath: division by zero'
                                            mem[288] = 30
                                            mem[320] = 'SafeMath: subtraction overflow'
                                            if 0 / stor14 / 2 > 0 / stor14:
                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                            if 0 / stor14 < 0 / stor14 / 2:
                                                revert with 'NH{q', 17
                                            mem[352] = 2
                                            mem[384] = this.address
                                            require ext_code.size(uniswapV2RouterAddress)
                                            staticcall uniswapV2RouterAddress.WETH() with:
                                                    gas gas_remaining wei
                                            mem[448] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                            mem[416] = ext_call.return_data[12 len 20]
                                            if not this.address:
                                                revert with 0, 'ERC20: approve from the zero address'
                                            if not uniswapV2RouterAddress:
                                                revert with 0, 'ERC20: approve to the zero address'
                                            allowance[address(this.address)][stor19].field_0 = 0 / stor14 / 2
                                            allowance[address(this.address)][stor19].field_255 = 0
                                            emit Approval((0 / stor14 / 2), this.address, uniswapV2RouterAddress);
                                            mem[ceil32(return_data.size) + 448] = 0x791ac94700000000000000000000000000000000000000000000000000000000
                                            mem[ceil32(return_data.size) + 452] = 0 / stor14 / 2
                                            idx = 0
                                            s = 384
                                            t = ceil32(return_data.size) + 644
                                            while idx < 2:
                                                mem[t] = mem[s + 12 len 20]
                                                idx = idx + 1
                                                s = s + 32
                                                t = t + 32
                                                continue 
                                            require ext_code.size(uniswapV2RouterAddress)
                                            call uniswapV2RouterAddress.swapExactTokensForETHSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args Mask(255, 1, 0 / stor14), 0, 160, address(this.address), block.timestamp, 2, mem[ceil32(return_data.size) + 644 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[ceil32(return_data.size) + 448] = 30
                                            mem[ceil32(return_data.size) + 480] = 'SafeMath: subtraction overflow'
                                            if eth.balance(this.address) > eth.balance(this.address):
                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                            if eth.balance(this.address) < eth.balance(this.address):
                                                revert with 'NH{q', 17
                                            if not this.address:
                                                revert with 0, 'ERC20: approve from the zero address'
                                            if not uniswapV2RouterAddress:
                                                revert with 0, 'ERC20: approve to the zero address'
                                            allowance[address(this.address)][stor19].field_0 = (0 / stor14) - (0 / stor14 / 2)
                                            emit Approval(((0 / stor14) - (0 / stor14 / 2)), this.address, uniswapV2RouterAddress);
                                            mem[ceil32(return_data.size) + 580] = 0
                                            mem[ceil32(return_data.size) + 612] = 0
                                            mem[ceil32(return_data.size) + 644] = owner
                                            mem[ceil32(return_data.size) + 676] = block.timestamp
                                            require ext_code.size(uniswapV2RouterAddress)
                                            call uniswapV2RouterAddress.addLiquidityETH(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                                 gas gas_remaining wei
                                                args address(this.address), (0 / stor14) - (0 / stor14 / 2), 0, 0, owner, block.timestamp
                                            mem[ceil32(return_data.size) + 512 len 96] = ext_call.return_data[0 len 96]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 96
                                            require ext_call.return_data[0] == ext_call.return_data[0]
                                            require ext_call.return_data[32] == ext_call.return_data[32]
                                            require ext_call.return_data[64] == ext_call.return_data[64]
                                            mem[(2 * ceil32(return_data.size)) + 512] = 3
                                            mem[(2 * ceil32(return_data.size)) + 544] = this.address
                                            require ext_code.size(uniswapV2RouterAddress)
                                            staticcall uniswapV2RouterAddress.WETH() with:
                                                    gas gas_remaining wei
                                            mem[(2 * ceil32(return_data.size)) + 640] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[64] = (4 * ceil32(return_data.size)) + 640
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                            mem[(2 * ceil32(return_data.size)) + 576] = ext_call.return_data[12 len 20]
                                            mem[(2 * ceil32(return_data.size)) + 608] = sub_e5148bd6Address
                                            if not this.address:
                                                revert with 0, 'ERC20: approve from the zero address'
                                            if not uniswapV2RouterAddress:
                                                revert with 0, 'ERC20: approve to the zero address'
                                            mem[0] = uniswapV2RouterAddress
                                            mem[32] = sha3(address(this.address), 10)
                                            allowance[address(this.address)][stor19].field_0 = 0 / stor14
                                            emit Approval((0 / stor14), this.address, uniswapV2RouterAddress);
                                            mem[(4 * ceil32(return_data.size)) + 640] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                            mem[(4 * ceil32(return_data.size)) + 644] = 0 / stor14
                                            mem[(4 * ceil32(return_data.size)) + 676] = 0
                                            mem[(4 * ceil32(return_data.size)) + 708] = 160
                                            mem[(4 * ceil32(return_data.size)) + 804] = 3
                                            idx = 0
                                            s = (2 * ceil32(return_data.size)) + 544
                                            t = (4 * ceil32(return_data.size)) + 836
                                            while idx < mem[(2 * ceil32(return_data.size)) + 512]:
                                                mem[t] = mem[s + 12 len 20]
                                                idx = idx + 1
                                                s = s + 32
                                                t = t + 32
                                                continue 
                                            mem[(4 * ceil32(return_data.size)) + 740] = this.address
                                            mem[(4 * ceil32(return_data.size)) + 772] = block.timestamp
                                            require ext_code.size(uniswapV2RouterAddress)
                                            call uniswapV2RouterAddress.mem[mem[64] len 4] with:
                                                 gas gas_remaining wei
                                                args mem[mem[64] + 4 len (4 * ceil32(return_data.size)) + (32 * mem[(2 * ceil32(return_data.size)) + 512]) + -mem[64] + 832]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(sub_e5148bd6Address)
                                            staticcall sub_e5148bd6Address.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args address(this.address)
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _10838 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _10854 = mem[_10838]
                                            require mem[_10838] == mem[_10838]
                                            mem[mem[64] + 4] = marketingAddress
                                            mem[mem[64] + 36] = _10854
                                            require ext_code.size(sub_e5148bd6Address)
                                            call sub_e5148bd6Address.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args marketingAddress, _10854
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _10950 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require mem[_10950] == bool(mem[_10950])
                                            stor22 = 0
                                            mem[0] = msg.sender
                                            mem[32] = 11
                                            if stor11[address(msg.sender)]:
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if not arg1:
                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                _11027 = mem[64]
                                                mem[64] = mem[64] + 96
                                                mem[_11027] = 38
                                                mem[_11027 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                if arg2 > balanceOf[address(msg.sender)]:
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 38
                                                    mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_11027 + 70 len 26]
                                                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                if balanceOf[address(msg.sender)] < arg2:
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] -= arg2
                                                if balanceOf[address(arg1)] > -arg2 - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                balanceOf[address(arg1)] += arg2
                                                emit Transfer(arg2, msg.sender, arg1);
                                            else:
                                                mem[0] = arg1
                                                mem[32] = 11
                                                if stor11[address(arg1)]:
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if not arg1:
                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                    _11067 = mem[64]
                                                    mem[64] = mem[64] + 96
                                                    mem[_11067] = 38
                                                    mem[_11067 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                    if arg2 > balanceOf[address(msg.sender)]:
                                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = 32
                                                        mem[mem[64] + 36] = 38
                                                        mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_11067 + 70 len 26]
                                                        revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                    if balanceOf[address(msg.sender)] < arg2:
                                                        revert with 'NH{q', 17
                                                    balanceOf[address(msg.sender)] -= arg2
                                                    if balanceOf[address(arg1)] > -arg2 - 1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    balanceOf[address(arg1)] += arg2
                                                    emit Transfer(arg2, msg.sender, arg1);
                                                else:
                                                    if totalFees <= 0:
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if not arg1:
                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                        _11114 = mem[64]
                                                        mem[64] = mem[64] + 96
                                                        mem[_11114] = 38
                                                        mem[_11114 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                        if arg2 > balanceOf[address(msg.sender)]:
                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = 32
                                                            mem[mem[64] + 36] = 38
                                                            mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_11114 + 70 len 26]
                                                            revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                        if balanceOf[address(msg.sender)] < arg2:
                                                            revert with 'NH{q', 17
                                                        balanceOf[address(msg.sender)] -= arg2
                                                        if balanceOf[address(arg1)] > -arg2 - 1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        balanceOf[address(arg1)] += arg2
                                                        emit Transfer(arg2, msg.sender, arg1);
                                                    else:
                                                        if not arg2:
                                                            _11152 = mem[64]
                                                            mem[64] = mem[64] + 64
                                                            mem[_11152] = 26
                                                            mem[_11152 + 32] = 'SafeMath: division by zero'
                                                            if not arg2:
                                                                _11474 = mem[64]
                                                                mem[64] = mem[64] + 64
                                                                mem[_11474] = 26
                                                                mem[_11474 + 32] = 'SafeMath: division by zero'
                                                                _11746 = mem[64]
                                                                mem[64] = mem[64] + 64
                                                                mem[_11746] = 30
                                                                mem[_11746 + 32] = 'SafeMath: subtraction overflow'
                                                                if 0 > arg2:
                                                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                                                if arg2 < 0:
                                                                    revert with 'NH{q', 17
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                if not this.address:
                                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                                _11906 = mem[64]
                                                                mem[64] = mem[64] + 96
                                                                mem[_11906] = 38
                                                                mem[_11906 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                if 0 > balanceOf[address(msg.sender)]:
                                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 32
                                                                    mem[mem[64] + 36] = 38
                                                                    mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_11906 + 70 len 26]
                                                                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                                if balanceOf[address(msg.sender)] < 0:
                                                                    revert with 'NH{q', 17
                                                                if balanceOf[address(this.address)] > -1:
                                                                    revert with 'NH{q', 17
                                                                if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                mem[0] = this.address
                                                                mem[32] = 9
                                                                emit Transfer(0, msg.sender, this.address);
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                _12593 = mem[64]
                                                                mem[64] = mem[64] + 96
                                                                mem[_12593] = 38
                                                                mem[_12593 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                if 0 > balanceOf[address(msg.sender)]:
                                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 32
                                                                    mem[mem[64] + 36] = 38
                                                                    mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_12593 + 70 len 26]
                                                                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                                if balanceOf[address(msg.sender)] < 0:
                                                                    revert with 'NH{q', 17
                                                                if balanceOf[57005] > -1:
                                                                    revert with 'NH{q', 17
                                                                if balanceOf[57005] < balanceOf[57005]:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                mem[0] = 57005
                                                                mem[32] = 9
                                                                emit Transfer(0, msg.sender, 57005);
                                                                emit TokenBurn(0, msg.sender);
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                if not arg1:
                                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                                _13458 = mem[64]
                                                                mem[64] = mem[64] + 96
                                                                mem[_13458] = 38
                                                                mem[_13458 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                if arg2 > balanceOf[address(msg.sender)]:
                                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 32
                                                                    mem[mem[64] + 36] = 38
                                                                    mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_13458 + 70 len 26]
                                                                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                                if balanceOf[address(msg.sender)] < arg2:
                                                                    revert with 'NH{q', 17
                                                                balanceOf[address(msg.sender)] -= arg2
                                                                if balanceOf[address(arg1)] > -arg2 - 1:
                                                                    revert with 'NH{q', 17
                                                                if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                balanceOf[address(arg1)] += arg2
                                                                emit Transfer(arg2, msg.sender, arg1);
                                                            else:
                                                                if arg2 and burnFee > -1 / arg2:
                                                                    revert with 'NH{q', 17
                                                                if not arg2:
                                                                    revert with 'NH{q', 18
                                                                if arg2 * burnFee / arg2 != burnFee:
                                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                                _11682 = mem[64]
                                                                mem[64] = mem[64] + 64
                                                                mem[_11682] = 26
                                                                mem[_11682 + 32] = 'SafeMath: division by zero'
                                                                if 0 > -(arg2 * burnFee / 100) - 1:
                                                                    revert with 'NH{q', 17
                                                                if arg2 * burnFee / 100 < 0:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                _11928 = mem[64]
                                                                mem[64] = mem[64] + 64
                                                                mem[_11928] = 30
                                                                mem[_11928 + 32] = 'SafeMath: subtraction overflow'
                                                                if arg2 * burnFee / 100 > arg2:
                                                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                                                if arg2 < arg2 * burnFee / 100:
                                                                    revert with 'NH{q', 17
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                if not this.address:
                                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                                _12210 = mem[64]
                                                                mem[64] = mem[64] + 96
                                                                mem[_12210] = 38
                                                                mem[_12210 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                if 0 > balanceOf[address(msg.sender)]:
                                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 32
                                                                    mem[mem[64] + 36] = 38
                                                                    mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_12210 + 70 len 26]
                                                                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                                if balanceOf[address(msg.sender)] < 0:
                                                                    revert with 'NH{q', 17
                                                                if balanceOf[address(this.address)] > -1:
                                                                    revert with 'NH{q', 17
                                                                if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                mem[0] = this.address
                                                                mem[32] = 9
                                                                emit Transfer(0, msg.sender, this.address);
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                _12955 = mem[64]
                                                                mem[64] = mem[64] + 96
                                                                mem[_12955] = 38
                                                                mem[_12955 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                if arg2 * burnFee / 100 > balanceOf[address(msg.sender)]:
                                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 32
                                                                    mem[mem[64] + 36] = 38
                                                                    mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_12955 + 70 len 26]
                                                                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                                if balanceOf[address(msg.sender)] < arg2 * burnFee / 100:
                                                                    revert with 'NH{q', 17
                                                                balanceOf[address(msg.sender)] -= arg2 * burnFee / 100
                                                                if balanceOf[57005] > -(arg2 * burnFee / 100) - 1:
                                                                    revert with 'NH{q', 17
                                                                if balanceOf[57005] + (arg2 * burnFee / 100) < balanceOf[57005]:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                mem[0] = 57005
                                                                mem[32] = 9
                                                                balanceOf[57005] += arg2 * burnFee / 100
                                                                emit Transfer((arg2 * burnFee / 100), msg.sender, 57005);
                                                                emit TokenBurn((arg2 * burnFee / 100), msg.sender);
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                if not arg1:
                                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                                _14212 = mem[64]
                                                                mem[64] = mem[64] + 96
                                                                mem[_14212] = 38
                                                                mem[_14212 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                if arg2 - (arg2 * burnFee / 100) > balanceOf[address(msg.sender)]:
                                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 32
                                                                    mem[mem[64] + 36] = 38
                                                                    mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_14212 + 70 len 26]
                                                                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                                if balanceOf[address(msg.sender)] < arg2 - (arg2 * burnFee / 100):
                                                                    revert with 'NH{q', 17
                                                                balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * burnFee / 100)
                                                                if balanceOf[address(arg1)] > -arg2 + (arg2 * burnFee / 100) - 1:
                                                                    revert with 'NH{q', 17
                                                                if balanceOf[address(arg1)] + arg2 - (arg2 * burnFee / 100) < balanceOf[address(arg1)]:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * burnFee / 100)
                                                                emit Transfer((arg2 - (arg2 * burnFee / 100)), msg.sender, arg1);
                                                        else:
                                                            if arg2 and stor14 > -1 / arg2:
                                                                revert with 'NH{q', 17
                                                            if not arg2:
                                                                revert with 'NH{q', 18
                                                            if arg2 * stor14 / arg2 != stor14:
                                                                revert with 0, 'SafeMath: multiplication overflow'
                                                            _11424 = mem[64]
                                                            mem[64] = mem[64] + 64
                                                            mem[_11424] = 26
                                                            mem[_11424 + 32] = 'SafeMath: division by zero'
                                                            if not arg2:
                                                                _11681 = mem[64]
                                                                mem[64] = mem[64] + 64
                                                                mem[_11681] = 26
                                                                mem[_11681 + 32] = 'SafeMath: division by zero'
                                                                if arg2 * stor14 / 100 > -1:
                                                                    revert with 'NH{q', 17
                                                                if arg2 * stor14 / 100 < arg2 * stor14 / 100:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                _11927 = mem[64]
                                                                mem[64] = mem[64] + 64
                                                                mem[_11927] = 30
                                                                mem[_11927 + 32] = 'SafeMath: subtraction overflow'
                                                                if arg2 * stor14 / 100 > arg2:
                                                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                                                if arg2 < arg2 * stor14 / 100:
                                                                    revert with 'NH{q', 17
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                if not this.address:
                                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                                _12207 = mem[64]
                                                                mem[64] = mem[64] + 96
                                                                mem[_12207] = 38
                                                                mem[_12207 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                if arg2 * stor14 / 100 > balanceOf[address(msg.sender)]:
                                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 32
                                                                    mem[mem[64] + 36] = 38
                                                                    mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_12207 + 70 len 26]
                                                                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                                if balanceOf[address(msg.sender)] < arg2 * stor14 / 100:
                                                                    revert with 'NH{q', 17
                                                                balanceOf[address(msg.sender)] -= arg2 * stor14 / 100
                                                                if balanceOf[address(this.address)] > -(arg2 * stor14 / 100) - 1:
                                                                    revert with 'NH{q', 17
                                                                if balanceOf[address(this.address)] + (arg2 * stor14 / 100) < balanceOf[address(this.address)]:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                mem[0] = this.address
                                                                mem[32] = 9
                                                                balanceOf[address(this.address)] += arg2 * stor14 / 100
                                                                emit Transfer((arg2 * stor14 / 100), msg.sender, this.address);
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                _12953 = mem[64]
                                                                mem[64] = mem[64] + 96
                                                                mem[_12953] = 38
                                                                mem[_12953 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                if 0 > balanceOf[address(msg.sender)]:
                                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 32
                                                                    mem[mem[64] + 36] = 38
                                                                    mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_12953 + 70 len 26]
                                                                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                                if balanceOf[address(msg.sender)] < 0:
                                                                    revert with 'NH{q', 17
                                                                if balanceOf[57005] > -1:
                                                                    revert with 'NH{q', 17
                                                                if balanceOf[57005] < balanceOf[57005]:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                mem[0] = 57005
                                                                mem[32] = 9
                                                                emit Transfer(0, msg.sender, 57005);
                                                                emit TokenBurn(0, msg.sender);
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                if not arg1:
                                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                                _14209 = mem[64]
                                                                mem[64] = mem[64] + 96
                                                                mem[_14209] = 38
                                                                mem[_14209 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                if arg2 - (arg2 * stor14 / 100) > balanceOf[address(msg.sender)]:
                                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 32
                                                                    mem[mem[64] + 36] = 38
                                                                    mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_14209 + 70 len 26]
                                                                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                                if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor14 / 100):
                                                                    revert with 'NH{q', 17
                                                                balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor14 / 100)
                                                                if balanceOf[address(arg1)] > -arg2 + (arg2 * stor14 / 100) - 1:
                                                                    revert with 'NH{q', 17
                                                                if balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) < balanceOf[address(arg1)]:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100)
                                                                emit Transfer((arg2 - (arg2 * stor14 / 100)), msg.sender, arg1);
                                                            else:
                                                                if arg2 and burnFee > -1 / arg2:
                                                                    revert with 'NH{q', 17
                                                                if not arg2:
                                                                    revert with 'NH{q', 18
                                                                if arg2 * burnFee / arg2 != burnFee:
                                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                                _11792 = mem[64]
                                                                mem[64] = mem[64] + 64
                                                                mem[_11792] = 26
                                                                mem[_11792 + 32] = 'SafeMath: division by zero'
                                                                if arg2 * stor14 / 100 > -(arg2 * burnFee / 100) - 1:
                                                                    revert with 'NH{q', 17
                                                                if (arg2 * stor14 / 100) + (arg2 * burnFee / 100) < arg2 * stor14 / 100:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                _12222 = mem[64]
                                                                mem[64] = mem[64] + 64
                                                                mem[_12222] = 30
                                                                mem[_12222 + 32] = 'SafeMath: subtraction overflow'
                                                                if (arg2 * stor14 / 100) + (arg2 * burnFee / 100) > arg2:
                                                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                                                if arg2 < (arg2 * stor14 / 100) + (arg2 * burnFee / 100):
                                                                    revert with 'NH{q', 17
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                if not this.address:
                                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                                _12590 = mem[64]
                                                                mem[64] = mem[64] + 96
                                                                mem[_12590] = 38
                                                                mem[_12590 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                if arg2 * stor14 / 100 > balanceOf[address(msg.sender)]:
                                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 32
                                                                    mem[mem[64] + 36] = 38
                                                                    mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_12590 + 70 len 26]
                                                                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                                if balanceOf[address(msg.sender)] < arg2 * stor14 / 100:
                                                                    revert with 'NH{q', 17
                                                                balanceOf[address(msg.sender)] -= arg2 * stor14 / 100
                                                                if balanceOf[address(this.address)] > -(arg2 * stor14 / 100) - 1:
                                                                    revert with 'NH{q', 17
                                                                if balanceOf[address(this.address)] + (arg2 * stor14 / 100) < balanceOf[address(this.address)]:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                mem[0] = this.address
                                                                mem[32] = 9
                                                                balanceOf[address(this.address)] += arg2 * stor14 / 100
                                                                emit Transfer((arg2 * stor14 / 100), msg.sender, this.address);
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                _13273 = mem[64]
                                                                mem[64] = mem[64] + 96
                                                                mem[_13273] = 38
                                                                mem[_13273 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                if arg2 * burnFee / 100 > balanceOf[address(msg.sender)]:
                                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 32
                                                                    mem[mem[64] + 36] = 38
                                                                    mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_13273 + 70 len 26]
                                                                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                                if balanceOf[address(msg.sender)] < arg2 * burnFee / 100:
                                                                    revert with 'NH{q', 17
                                                                balanceOf[address(msg.sender)] -= arg2 * burnFee / 100
                                                                if balanceOf[57005] > -(arg2 * burnFee / 100) - 1:
                                                                    revert with 'NH{q', 17
                                                                if balanceOf[57005] + (arg2 * burnFee / 100) < balanceOf[57005]:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                mem[0] = 57005
                                                                mem[32] = 9
                                                                balanceOf[57005] += arg2 * burnFee / 100
                                                                emit Transfer((arg2 * burnFee / 100), msg.sender, 57005);
                                                                emit TokenBurn((arg2 * burnFee / 100), msg.sender);
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                if not arg1:
                                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                                _14536 = mem[64]
                                                                mem[64] = mem[64] + 96
                                                                mem[_14536] = 38
                                                                mem[_14536 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                if arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100) > balanceOf[address(msg.sender)]:
                                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 32
                                                                    mem[mem[64] + 36] = 38
                                                                    mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_14536 + 70 len 26]
                                                                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                                if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100):
                                                                    revert with 'NH{q', 17
                                                                balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor14 / 100) + (arg2 * burnFee / 100)
                                                                if balanceOf[address(arg1)] > -arg2 + (arg2 * stor14 / 100) + (arg2 * burnFee / 100) - 1:
                                                                    revert with 'NH{q', 17
                                                                if balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100) < balanceOf[address(arg1)]:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100)
                                                                emit Transfer((arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100)), msg.sender, arg1);
                                        else:
                                            if balanceOf[address(this.address)] and marketingFee > -1 / balanceOf[address(this.address)]:
                                                revert with 'NH{q', 17
                                            if not balanceOf[address(this.address)]:
                                                revert with 'NH{q', 18
                                            if balanceOf[address(this.address)] * marketingFee / balanceOf[address(this.address)] != marketingFee:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            mem[160] = 26
                                            mem[192] = 'SafeMath: division by zero'
                                            if stor14 <= 0:
                                                revert with 0, 'SafeMath: division by zero', 0
                                            if not stor14:
                                                revert with 'NH{q', 18
                                            mem[224] = 26
                                            mem[256] = 'SafeMath: division by zero'
                                            mem[288] = 30
                                            mem[320] = 'SafeMath: subtraction overflow'
                                            if 0 / stor14 / 2 > 0 / stor14:
                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                            if 0 / stor14 < 0 / stor14 / 2:
                                                revert with 'NH{q', 17
                                            mem[352] = 2
                                            mem[384] = this.address
                                            require ext_code.size(uniswapV2RouterAddress)
                                            staticcall uniswapV2RouterAddress.WETH() with:
                                                    gas gas_remaining wei
                                            mem[448] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                            mem[416] = ext_call.return_data[12 len 20]
                                            if not this.address:
                                                revert with 0, 'ERC20: approve from the zero address'
                                            if not uniswapV2RouterAddress:
                                                revert with 0, 'ERC20: approve to the zero address'
                                            allowance[address(this.address)][stor19].field_0 = 0 / stor14 / 2
                                            allowance[address(this.address)][stor19].field_255 = 0
                                            emit Approval((0 / stor14 / 2), this.address, uniswapV2RouterAddress);
                                            mem[ceil32(return_data.size) + 448] = 0x791ac94700000000000000000000000000000000000000000000000000000000
                                            mem[ceil32(return_data.size) + 452] = 0 / stor14 / 2
                                            idx = 0
                                            s = 384
                                            t = ceil32(return_data.size) + 644
                                            while idx < 2:
                                                mem[t] = mem[s + 12 len 20]
                                                idx = idx + 1
                                                s = s + 32
                                                t = t + 32
                                                continue 
                                            require ext_code.size(uniswapV2RouterAddress)
                                            call uniswapV2RouterAddress.swapExactTokensForETHSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                                 gas gas_remaining wei
                                                args Mask(255, 1, 0 / stor14), 0, 160, address(this.address), block.timestamp, 2, mem[ceil32(return_data.size) + 644 len 64]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[ceil32(return_data.size) + 448] = 30
                                            mem[ceil32(return_data.size) + 480] = 'SafeMath: subtraction overflow'
                                            if eth.balance(this.address) > eth.balance(this.address):
                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                            if eth.balance(this.address) < eth.balance(this.address):
                                                revert with 'NH{q', 17
                                            if not this.address:
                                                revert with 0, 'ERC20: approve from the zero address'
                                            if not uniswapV2RouterAddress:
                                                revert with 0, 'ERC20: approve to the zero address'
                                            allowance[address(this.address)][stor19].field_0 = (0 / stor14) - (0 / stor14 / 2)
                                            emit Approval(((0 / stor14) - (0 / stor14 / 2)), this.address, uniswapV2RouterAddress);
                                            mem[ceil32(return_data.size) + 580] = 0
                                            mem[ceil32(return_data.size) + 612] = 0
                                            mem[ceil32(return_data.size) + 644] = owner
                                            mem[ceil32(return_data.size) + 676] = block.timestamp
                                            require ext_code.size(uniswapV2RouterAddress)
                                            call uniswapV2RouterAddress.addLiquidityETH(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                                 gas gas_remaining wei
                                                args address(this.address), (0 / stor14) - (0 / stor14 / 2), 0, 0, owner, block.timestamp
                                            mem[ceil32(return_data.size) + 512 len 96] = ext_call.return_data[0 len 96]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 96
                                            require ext_call.return_data[0] == ext_call.return_data[0]
                                            require ext_call.return_data[32] == ext_call.return_data[32]
                                            require ext_call.return_data[64] == ext_call.return_data[64]
                                            mem[(2 * ceil32(return_data.size)) + 512] = 3
                                            mem[(2 * ceil32(return_data.size)) + 544] = this.address
                                            require ext_code.size(uniswapV2RouterAddress)
                                            staticcall uniswapV2RouterAddress.WETH() with:
                                                    gas gas_remaining wei
                                            mem[(2 * ceil32(return_data.size)) + 640] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[64] = (4 * ceil32(return_data.size)) + 640
                                            require return_data.size >= 32
                                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                            mem[(2 * ceil32(return_data.size)) + 576] = ext_call.return_data[12 len 20]
                                            mem[(2 * ceil32(return_data.size)) + 608] = sub_e5148bd6Address
                                            if not this.address:
                                                revert with 0, 'ERC20: approve from the zero address'
                                            if not uniswapV2RouterAddress:
                                                revert with 0, 'ERC20: approve to the zero address'
                                            mem[0] = uniswapV2RouterAddress
                                            mem[32] = sha3(address(this.address), 10)
                                            allowance[address(this.address)][stor19].field_0 = balanceOf[address(this.address)] * marketingFee / stor14
                                            emit Approval((balanceOf[address(this.address)] * marketingFee / stor14), this.address, uniswapV2RouterAddress);
                                            mem[(4 * ceil32(return_data.size)) + 640] = 0x5c11d79500000000000000000000000000000000000000000000000000000000
                                            mem[(4 * ceil32(return_data.size)) + 644] = balanceOf[address(this.address)] * marketingFee / stor14
                                            mem[(4 * ceil32(return_data.size)) + 676] = 0
                                            mem[(4 * ceil32(return_data.size)) + 708] = 160
                                            mem[(4 * ceil32(return_data.size)) + 804] = 3
                                            idx = 0
                                            s = (2 * ceil32(return_data.size)) + 544
                                            t = (4 * ceil32(return_data.size)) + 836
                                            while idx < mem[(2 * ceil32(return_data.size)) + 512]:
                                                mem[t] = mem[s + 12 len 20]
                                                idx = idx + 1
                                                s = s + 32
                                                t = t + 32
                                                continue 
                                            mem[(4 * ceil32(return_data.size)) + 740] = this.address
                                            mem[(4 * ceil32(return_data.size)) + 772] = block.timestamp
                                            require ext_code.size(uniswapV2RouterAddress)
                                            call uniswapV2RouterAddress.mem[mem[64] len 4] with:
                                                 gas gas_remaining wei
                                                args mem[mem[64] + 4 len (4 * ceil32(return_data.size)) + (32 * mem[(2 * ceil32(return_data.size)) + 512]) + -mem[64] + 832]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            mem[mem[64] + 4] = this.address
                                            require ext_code.size(sub_e5148bd6Address)
                                            staticcall sub_e5148bd6Address.0x70a08231 with:
                                                    gas gas_remaining wei
                                                   args address(this.address)
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _14535 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _14592 = mem[_14535]
                                            require mem[_14535] == mem[_14535]
                                            mem[mem[64] + 4] = marketingAddress
                                            mem[mem[64] + 36] = _14592
                                            require ext_code.size(sub_e5148bd6Address)
                                            call sub_e5148bd6Address.0xa9059cbb with:
                                                 gas gas_remaining wei
                                                args marketingAddress, _14592
                                            mem[mem[64]] = ext_call.return_data[0]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _14892 = mem[64]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            require mem[_14892] == bool(mem[_14892])
                                            stor22 = 0
                                            mem[0] = msg.sender
                                            mem[32] = 11
                                            if stor11[address(msg.sender)]:
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if not arg1:
                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                _14957 = mem[64]
                                                mem[64] = mem[64] + 96
                                                mem[_14957] = 38
                                                mem[_14957 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                if arg2 > balanceOf[address(msg.sender)]:
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 38
                                                    mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_14957 + 70 len 26]
                                                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                if balanceOf[address(msg.sender)] < arg2:
                                                    revert with 'NH{q', 17
                                                balanceOf[address(msg.sender)] -= arg2
                                                if balanceOf[address(arg1)] > -arg2 - 1:
                                                    revert with 'NH{q', 17
                                                if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                balanceOf[address(arg1)] += arg2
                                                emit Transfer(arg2, msg.sender, arg1);
                                            else:
                                                mem[0] = arg1
                                                mem[32] = 11
                                                if stor11[address(arg1)]:
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if not arg1:
                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                    _14981 = mem[64]
                                                    mem[64] = mem[64] + 96
                                                    mem[_14981] = 38
                                                    mem[_14981 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                    if arg2 > balanceOf[address(msg.sender)]:
                                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = 32
                                                        mem[mem[64] + 36] = 38
                                                        mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_14981 + 70 len 26]
                                                        revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                    if balanceOf[address(msg.sender)] < arg2:
                                                        revert with 'NH{q', 17
                                                    balanceOf[address(msg.sender)] -= arg2
                                                    if balanceOf[address(arg1)] > -arg2 - 1:
                                                        revert with 'NH{q', 17
                                                    if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    balanceOf[address(arg1)] += arg2
                                                    emit Transfer(arg2, msg.sender, arg1);
                                                else:
                                                    if totalFees <= 0:
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if not arg1:
                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                        _15006 = mem[64]
                                                        mem[64] = mem[64] + 96
                                                        mem[_15006] = 38
                                                        mem[_15006 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                        if arg2 > balanceOf[address(msg.sender)]:
                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = 32
                                                            mem[mem[64] + 36] = 38
                                                            mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_15006 + 70 len 26]
                                                            revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                        if balanceOf[address(msg.sender)] < arg2:
                                                            revert with 'NH{q', 17
                                                        balanceOf[address(msg.sender)] -= arg2
                                                        if balanceOf[address(arg1)] > -arg2 - 1:
                                                            revert with 'NH{q', 17
                                                        if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        balanceOf[address(arg1)] += arg2
                                                        emit Transfer(arg2, msg.sender, arg1);
                                                    else:
                                                        if not arg2:
                                                            _15026 = mem[64]
                                                            mem[64] = mem[64] + 64
                                                            mem[_15026] = 26
                                                            mem[_15026 + 32] = 'SafeMath: division by zero'
                                                            if not arg2:
                                                                _15212 = mem[64]
                                                                mem[64] = mem[64] + 64
                                                                mem[_15212] = 26
                                                                mem[_15212 + 32] = 'SafeMath: division by zero'
                                                                _15350 = mem[64]
                                                                mem[64] = mem[64] + 64
                                                                mem[_15350] = 30
                                                                mem[_15350 + 32] = 'SafeMath: subtraction overflow'
                                                                if 0 > arg2:
                                                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                                                if arg2 < 0:
                                                                    revert with 'NH{q', 17
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                if not this.address:
                                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                                _15420 = mem[64]
                                                                mem[64] = mem[64] + 96
                                                                mem[_15420] = 38
                                                                mem[_15420 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                if 0 > balanceOf[address(msg.sender)]:
                                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 32
                                                                    mem[mem[64] + 36] = 38
                                                                    mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_15420 + 70 len 26]
                                                                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                                if balanceOf[address(msg.sender)] < 0:
                                                                    revert with 'NH{q', 17
                                                                if balanceOf[address(this.address)] > -1:
                                                                    revert with 'NH{q', 17
                                                                if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                mem[0] = this.address
                                                                mem[32] = 9
                                                                emit Transfer(0, msg.sender, this.address);
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                _15811 = mem[64]
                                                                mem[64] = mem[64] + 96
                                                                mem[_15811] = 38
                                                                mem[_15811 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                if 0 > balanceOf[address(msg.sender)]:
                                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 32
                                                                    mem[mem[64] + 36] = 38
                                                                    mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_15811 + 70 len 26]
                                                                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                                if balanceOf[address(msg.sender)] < 0:
                                                                    revert with 'NH{q', 17
                                                                if balanceOf[57005] > -1:
                                                                    revert with 'NH{q', 17
                                                                if balanceOf[57005] < balanceOf[57005]:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                mem[0] = 57005
                                                                mem[32] = 9
                                                                emit Transfer(0, msg.sender, 57005);
                                                                emit TokenBurn(0, msg.sender);
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                if not arg1:
                                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                                _16308 = mem[64]
                                                                mem[64] = mem[64] + 96
                                                                mem[_16308] = 38
                                                                mem[_16308 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                if arg2 > balanceOf[address(msg.sender)]:
                                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 32
                                                                    mem[mem[64] + 36] = 38
                                                                    mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_16308 + 70 len 26]
                                                                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                                if balanceOf[address(msg.sender)] < arg2:
                                                                    revert with 'NH{q', 17
                                                                balanceOf[address(msg.sender)] -= arg2
                                                                if balanceOf[address(arg1)] > -arg2 - 1:
                                                                    revert with 'NH{q', 17
                                                                if balanceOf[address(arg1)] + arg2 < balanceOf[address(arg1)]:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                balanceOf[address(arg1)] += arg2
                                                                emit Transfer(arg2, msg.sender, arg1);
                                                            else:
                                                                if arg2 and burnFee > -1 / arg2:
                                                                    revert with 'NH{q', 17
                                                                if not arg2:
                                                                    revert with 'NH{q', 18
                                                                if arg2 * burnFee / arg2 != burnFee:
                                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                                _15326 = mem[64]
                                                                mem[64] = mem[64] + 64
                                                                mem[_15326] = 26
                                                                mem[_15326 + 32] = 'SafeMath: division by zero'
                                                                if 0 > -(arg2 * burnFee / 100) - 1:
                                                                    revert with 'NH{q', 17
                                                                if arg2 * burnFee / 100 < 0:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                _15434 = mem[64]
                                                                mem[64] = mem[64] + 64
                                                                mem[_15434] = 30
                                                                mem[_15434 + 32] = 'SafeMath: subtraction overflow'
                                                                if arg2 * burnFee / 100 > arg2:
                                                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                                                if arg2 < arg2 * burnFee / 100:
                                                                    revert with 'NH{q', 17
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                if not this.address:
                                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                                _15588 = mem[64]
                                                                mem[64] = mem[64] + 96
                                                                mem[_15588] = 38
                                                                mem[_15588 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                if 0 > balanceOf[address(msg.sender)]:
                                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 32
                                                                    mem[mem[64] + 36] = 38
                                                                    mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_15588 + 70 len 26]
                                                                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                                if balanceOf[address(msg.sender)] < 0:
                                                                    revert with 'NH{q', 17
                                                                if balanceOf[address(this.address)] > -1:
                                                                    revert with 'NH{q', 17
                                                                if balanceOf[address(this.address)] < balanceOf[address(this.address)]:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                mem[0] = this.address
                                                                mem[32] = 9
                                                                emit Transfer(0, msg.sender, this.address);
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                _16021 = mem[64]
                                                                mem[64] = mem[64] + 96
                                                                mem[_16021] = 38
                                                                mem[_16021 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                if arg2 * burnFee / 100 > balanceOf[address(msg.sender)]:
                                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 32
                                                                    mem[mem[64] + 36] = 38
                                                                    mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_16021 + 70 len 26]
                                                                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                                if balanceOf[address(msg.sender)] < arg2 * burnFee / 100:
                                                                    revert with 'NH{q', 17
                                                                balanceOf[address(msg.sender)] -= arg2 * burnFee / 100
                                                                if balanceOf[57005] > -(arg2 * burnFee / 100) - 1:
                                                                    revert with 'NH{q', 17
                                                                if balanceOf[57005] + (arg2 * burnFee / 100) < balanceOf[57005]:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                mem[0] = 57005
                                                                mem[32] = 9
                                                                balanceOf[57005] += arg2 * burnFee / 100
                                                                emit Transfer((arg2 * burnFee / 100), msg.sender, 57005);
                                                                emit TokenBurn((arg2 * burnFee / 100), msg.sender);
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                if not arg1:
                                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                                _16896 = mem[64]
                                                                mem[64] = mem[64] + 96
                                                                mem[_16896] = 38
                                                                mem[_16896 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                if arg2 - (arg2 * burnFee / 100) > balanceOf[address(msg.sender)]:
                                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 32
                                                                    mem[mem[64] + 36] = 38
                                                                    mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_16896 + 70 len 26]
                                                                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                                if balanceOf[address(msg.sender)] < arg2 - (arg2 * burnFee / 100):
                                                                    revert with 'NH{q', 17
                                                                balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * burnFee / 100)
                                                                if balanceOf[address(arg1)] > -arg2 + (arg2 * burnFee / 100) - 1:
                                                                    revert with 'NH{q', 17
                                                                if balanceOf[address(arg1)] + arg2 - (arg2 * burnFee / 100) < balanceOf[address(arg1)]:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * burnFee / 100)
                                                                emit Transfer((arg2 - (arg2 * burnFee / 100)), msg.sender, arg1);
                                                        else:
                                                            if arg2 and stor14 > -1 / arg2:
                                                                revert with 'NH{q', 17
                                                            if not arg2:
                                                                revert with 'NH{q', 18
                                                            if arg2 * stor14 / arg2 != stor14:
                                                                revert with 0, 'SafeMath: multiplication overflow'
                                                            _15182 = mem[64]
                                                            mem[64] = mem[64] + 64
                                                            mem[_15182] = 26
                                                            mem[_15182 + 32] = 'SafeMath: division by zero'
                                                            if not arg2:
                                                                _15325 = mem[64]
                                                                mem[64] = mem[64] + 64
                                                                mem[_15325] = 26
                                                                mem[_15325 + 32] = 'SafeMath: division by zero'
                                                                if arg2 * stor14 / 100 > -1:
                                                                    revert with 'NH{q', 17
                                                                if arg2 * stor14 / 100 < arg2 * stor14 / 100:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                _15433 = mem[64]
                                                                mem[64] = mem[64] + 64
                                                                mem[_15433] = 30
                                                                mem[_15433 + 32] = 'SafeMath: subtraction overflow'
                                                                if arg2 * stor14 / 100 > arg2:
                                                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                                                if arg2 < arg2 * stor14 / 100:
                                                                    revert with 'NH{q', 17
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                if not this.address:
                                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                                _15585 = mem[64]
                                                                mem[64] = mem[64] + 96
                                                                mem[_15585] = 38
                                                                mem[_15585 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                if arg2 * stor14 / 100 > balanceOf[address(msg.sender)]:
                                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 32
                                                                    mem[mem[64] + 36] = 38
                                                                    mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_15585 + 70 len 26]
                                                                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                                if balanceOf[address(msg.sender)] < arg2 * stor14 / 100:
                                                                    revert with 'NH{q', 17
                                                                balanceOf[address(msg.sender)] -= arg2 * stor14 / 100
                                                                if balanceOf[address(this.address)] > -(arg2 * stor14 / 100) - 1:
                                                                    revert with 'NH{q', 17
                                                                if balanceOf[address(this.address)] + (arg2 * stor14 / 100) < balanceOf[address(this.address)]:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                mem[0] = this.address
                                                                mem[32] = 9
                                                                balanceOf[address(this.address)] += arg2 * stor14 / 100
                                                                emit Transfer((arg2 * stor14 / 100), msg.sender, this.address);
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                _16019 = mem[64]
                                                                mem[64] = mem[64] + 96
                                                                mem[_16019] = 38
                                                                mem[_16019 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                if 0 > balanceOf[address(msg.sender)]:
                                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 32
                                                                    mem[mem[64] + 36] = 38
                                                                    mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_16019 + 70 len 26]
                                                                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                                if balanceOf[address(msg.sender)] < 0:
                                                                    revert with 'NH{q', 17
                                                                if balanceOf[57005] > -1:
                                                                    revert with 'NH{q', 17
                                                                if balanceOf[57005] < balanceOf[57005]:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                mem[0] = 57005
                                                                mem[32] = 9
                                                                emit Transfer(0, msg.sender, 57005);
                                                                emit TokenBurn(0, msg.sender);
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                if not arg1:
                                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                                _16893 = mem[64]
                                                                mem[64] = mem[64] + 96
                                                                mem[_16893] = 38
                                                                mem[_16893 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                if arg2 - (arg2 * stor14 / 100) > balanceOf[address(msg.sender)]:
                                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 32
                                                                    mem[mem[64] + 36] = 38
                                                                    mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_16893 + 70 len 26]
                                                                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                                if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor14 / 100):
                                                                    revert with 'NH{q', 17
                                                                balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor14 / 100)
                                                                if balanceOf[address(arg1)] > -arg2 + (arg2 * stor14 / 100) - 1:
                                                                    revert with 'NH{q', 17
                                                                if balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) < balanceOf[address(arg1)]:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100)
                                                                emit Transfer((arg2 - (arg2 * stor14 / 100)), msg.sender, arg1);
                                                            else:
                                                                if arg2 and burnFee > -1 / arg2:
                                                                    revert with 'NH{q', 17
                                                                if not arg2:
                                                                    revert with 'NH{q', 18
                                                                if arg2 * burnFee / arg2 != burnFee:
                                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                                _15374 = mem[64]
                                                                mem[64] = mem[64] + 64
                                                                mem[_15374] = 26
                                                                mem[_15374 + 32] = 'SafeMath: division by zero'
                                                                if arg2 * stor14 / 100 > -(arg2 * burnFee / 100) - 1:
                                                                    revert with 'NH{q', 17
                                                                if (arg2 * stor14 / 100) + (arg2 * burnFee / 100) < arg2 * stor14 / 100:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                _15596 = mem[64]
                                                                mem[64] = mem[64] + 64
                                                                mem[_15596] = 30
                                                                mem[_15596 + 32] = 'SafeMath: subtraction overflow'
                                                                if (arg2 * stor14 / 100) + (arg2 * burnFee / 100) > arg2:
                                                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                                                if arg2 < (arg2 * stor14 / 100) + (arg2 * burnFee / 100):
                                                                    revert with 'NH{q', 17
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                if not this.address:
                                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                                _15808 = mem[64]
                                                                mem[64] = mem[64] + 96
                                                                mem[_15808] = 38
                                                                mem[_15808 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                if arg2 * stor14 / 100 > balanceOf[address(msg.sender)]:
                                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 32
                                                                    mem[mem[64] + 36] = 38
                                                                    mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_15808 + 70 len 26]
                                                                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                                if balanceOf[address(msg.sender)] < arg2 * stor14 / 100:
                                                                    revert with 'NH{q', 17
                                                                balanceOf[address(msg.sender)] -= arg2 * stor14 / 100
                                                                if balanceOf[address(this.address)] > -(arg2 * stor14 / 100) - 1:
                                                                    revert with 'NH{q', 17
                                                                if balanceOf[address(this.address)] + (arg2 * stor14 / 100) < balanceOf[address(this.address)]:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                mem[0] = this.address
                                                                mem[32] = 9
                                                                balanceOf[address(this.address)] += arg2 * stor14 / 100
                                                                emit Transfer((arg2 * stor14 / 100), msg.sender, this.address);
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                _16201 = mem[64]
                                                                mem[64] = mem[64] + 96
                                                                mem[_16201] = 38
                                                                mem[_16201 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                if arg2 * burnFee / 100 > balanceOf[address(msg.sender)]:
                                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 32
                                                                    mem[mem[64] + 36] = 38
                                                                    mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_16201 + 70 len 26]
                                                                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                                if balanceOf[address(msg.sender)] < arg2 * burnFee / 100:
                                                                    revert with 'NH{q', 17
                                                                balanceOf[address(msg.sender)] -= arg2 * burnFee / 100
                                                                if balanceOf[57005] > -(arg2 * burnFee / 100) - 1:
                                                                    revert with 'NH{q', 17
                                                                if balanceOf[57005] + (arg2 * burnFee / 100) < balanceOf[57005]:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                mem[0] = 57005
                                                                mem[32] = 9
                                                                balanceOf[57005] += arg2 * burnFee / 100
                                                                emit Transfer((arg2 * burnFee / 100), msg.sender, 57005);
                                                                emit TokenBurn((arg2 * burnFee / 100), msg.sender);
                                                                if not msg.sender:
                                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                                if not arg1:
                                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                                _17076 = mem[64]
                                                                mem[64] = mem[64] + 96
                                                                mem[_17076] = 38
                                                                mem[_17076 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                                if arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100) > balanceOf[address(msg.sender)]:
                                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 32
                                                                    mem[mem[64] + 36] = 38
                                                                    mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_17076 + 70 len 26]
                                                                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                                if balanceOf[address(msg.sender)] < arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100):
                                                                    revert with 'NH{q', 17
                                                                balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * stor14 / 100) + (arg2 * burnFee / 100)
                                                                if balanceOf[address(arg1)] > -arg2 + (arg2 * stor14 / 100) + (arg2 * burnFee / 100) - 1:
                                                                    revert with 'NH{q', 17
                                                                if balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100) < balanceOf[address(arg1)]:
                                                                    revert with 0, 'SafeMath: addition overflow'
                                                                balanceOf[address(arg1)] = balanceOf[address(arg1)] + arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100)
                                                                emit Transfer((arg2 - (arg2 * stor14 / 100) - (arg2 * burnFee / 100)), msg.sender, arg1);
    return 1
}



}
