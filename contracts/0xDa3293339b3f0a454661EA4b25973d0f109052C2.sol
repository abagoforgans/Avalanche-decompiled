contract main {




// =====================  Runtime code  =====================


#
#  - bTokenSell(uint256 arg1, uint256 arg2, uint256 arg3)
#  - withdrawCapital(uint256 arg1, bool arg2, uint256 arg3)
#  - provideCapital(uint256 arg1, uint256 arg2)
#  - bTokenBuy(uint256 arg1, uint256 arg2, uint256 arg3)
#  - getTokensSaleValue(uint256 arg1)
#  - bTokenGetCollateralOut(address arg1, uint256 arg2)
#  - bTokenGetCollateralIn(address arg1, uint256 arg2)
#
const proxiableUUID = code.data[21791 len 32]

const MINIMUM_TRADE_SIZE = 1000


uint8 stor0;
uint8 stor0; offset 8
uint256 stor0; offset 8
address owner;
address lpTokenAddress;
address collateralTokenAddress;
uint8 stor153;
uint8 stor153; offset 160
uint8 stor153; offset 168
address paymentTokenAddress;
address registryAddress;
address stor155;
uint8 stor157;
uint16 tradeFeeBasisPoints; offset 8
uint256 volatilityFactor;
uint8 stor159;
uint256 stor160; offset 32
uint256 assetPair;
uint8 enforceDepositLimits;
uint256 globalDepositLimit;
mapping of struct collateralDepositLimits;

function assetPair() payable {
    return assetPair
}

function enforceDepositLimits() payable {
    return bool(enforceDepositLimits)
}

function globalDepositLimit() payable {
    return globalDepositLimit
}

function paymentToken() payable {
    return paymentTokenAddress
}

function lpToken() payable {
    return lpTokenAddress
}

function registry() payable {
    return registryAddress
}

function volatilityFactor() payable {
    return volatilityFactor
}

function owner() payable {
    return owner
}

function getLogicAddress() payable {
    return address(stor[code.data[21791 len 32]].field_0)
}

function collateralDepositLimits(address arg1) payable {
    require calldata.size - 4 >= 32
    return bool(uint8(collateralDepositLimits[arg1].field_0)), uint256(collateralDepositLimits[arg1].field_256)
}

function collateralToken() payable {
    return collateralTokenAddress
}

function tradeFeeBasisPoints() payable {
    return tradeFeeBasisPoints
}

function _fallback() payable {
    revert
}

function renounceOwnership() payable {
    if owner != msg.sender:
        revert with 0, 32, 32, code.data[21856 len 32]
    emit OwnershipTransferred(owner, 0);
    owner = 0
}

function claimExpiredTokens(address arg1, uint256 arg2) payable {
    require calldata.size - 4 >= 64
    require ext_code.size(arg1)
    call arg1.0xc49785b4 with:
         gas gas_remaining wei
        args arg2
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
}

function setEnforceDepositLimits(bool arg1, uint256 arg2) payable {
    require calldata.size - 4 >= 64
    if owner != msg.sender:
        revert with 0, 32, 32, code.data[21856 len 32]
    enforceDepositLimits = uint8(arg1)
    globalDepositLimit = arg2
    emit EnforceDepositLimitsUpdated(bool(uint8(arg1)), arg2);
}

function setVolatilityFactor(uint256 arg1) payable {
    require calldata.size - 4 >= 32
    if owner != msg.sender:
        revert with 0, 32, 32, code.data[21856 len 32]
    if arg1 <= 5 * 10^12:
        revert with 0, 'VolatilityFactor is too low'
    volatilityFactor = arg1
    emit VolatilityFactorUpdated(arg1);
}

function transferOwnership(address arg1) payable {
    require calldata.size - 4 >= 32
    if owner != msg.sender:
        revert with 0, 32, 32, code.data[21856 len 32]
    if not arg1:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 32, 38, code.data[21605 len 38], mem[202 len 26]
    emit OwnershipTransferred(owner, arg1);
    owner = arg1
}

function setCapitalDepositLimit(address[] arg1, bool[] arg2) payable {
    require calldata.size - 4 >= 64
    require arg1 <= 4294967296
    require arg1 + 36 <= calldata.size
    require arg1.length <= 4294967296 and arg1 + (32 * arg1.length) + 36 <= calldata.size
    require arg2 <= 4294967296
    require arg2 + 36 <= calldata.size
    require arg2.length <= 4294967296 and arg2 + (32 * arg2.length) + 36 <= calldata.size
    if owner != msg.sender:
        revert with 0, 32, 32, code.data[21856 len 32]
    revert with 0, 'Feature not supported'
}

function updateAmmImplementation(address arg1) payable {
    require calldata.size - 4 >= 32
    if owner != msg.sender:
        revert with 0, 32, 32, code.data[21856 len 32]
    if not arg1:
        revert with 0, 'Invalid newAmmImplementation'
    require ext_code.size(arg1)
    staticcall arg1.0x52d1902d with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if code.data[21791 len 32] != ext_call.return_data[0]:
        revert with 0, 'Not compatible'
    address(stor[code.data[21791 len 32]].field_0) = arg1
    Mask(96, 0, stor[code.data[21791 len 32]].field_160) = 0
    emit CodeAddressUpdated(arg1);
}

function getMarket(uint256 arg1) payable {
    require calldata.size - 4 >= 32
    mem[96] = 0x7caf154500000000000000000000000000000000000000000000000000000000
    mem[100] = assetPair
    require ext_code.size(registryAddress)
    staticcall registryAddress.getMarketsByAssetPair(bytes32 rg1) with:
            gas gas_remaining wei
           args assetPair
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    mem[96 len return_data.size] = ext_call.return_data[0 len return_data.size]
    mem[64] = ceil32(return_data.size) + 96
    require return_data.size >= 32
    _4 = mem[96 len 4], stor160
    require mem[96 len 4], stor160 <= 4294967296
    require mem[96 len 4], stor160 + 32 <= return_data.size
    require mem[mem[96 len 4], stor160 + 96] <= 4294967296 and mem[96 len 4], stor160 + (32 * mem[mem[96 len 4], stor160 + 96]) + 32 <= return_data.size
    mem[ceil32(return_data.size) + 96] = mem[mem[96 len 4], stor160 + 96]
    _7 = mem[_4 + 96]
    mem[ceil32(return_data.size) + 128 len floor32(mem[_4 + 96])] = mem[_4 + 128 len floor32(mem[_4 + 96])]
    require arg1 < mem[ceil32(return_data.size) + 96]
    mem[(32 * _7) + ceil32(return_data.size) + 128] = mem[(32 * arg1) + ceil32(return_data.size) + 140 len 20]
    return memory
      from (32 * _7) + ceil32(return_data.size) + 128
       len 32
}

function getMarkets() payable {
    mem[96] = 0x7caf154500000000000000000000000000000000000000000000000000000000
    mem[100] = assetPair
    require ext_code.size(registryAddress)
    staticcall registryAddress.getMarketsByAssetPair(bytes32 rg1) with:
            gas gas_remaining wei
           args assetPair
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    mem[96 len return_data.size] = ext_call.return_data[0 len return_data.size]
    mem[64] = ceil32(return_data.size) + 96
    require return_data.size >= 32
    _4 = mem[96 len 4], stor160
    require mem[96 len 4], stor160 <= 4294967296
    require mem[96 len 4], stor160 + 32 <= return_data.size
    require mem[mem[96 len 4], stor160 + 96] <= 4294967296 and mem[96 len 4], stor160 + (32 * mem[mem[96 len 4], stor160 + 96]) + 32 <= return_data.size
    mem[ceil32(return_data.size) + 96] = mem[mem[96 len 4], stor160 + 96]
    _7 = mem[_4 + 96]
    mem[ceil32(return_data.size) + 128 len floor32(mem[_4 + 96])] = mem[_4 + 128 len floor32(mem[_4 + 96])]
    mem[(32 * _7) + ceil32(return_data.size) + 128] = 32
    mem[(32 * _7) + ceil32(return_data.size) + 160] = mem[ceil32(return_data.size) + 96]
    mem[(32 * _7) + ceil32(return_data.size) + 192 len floor32(mem[ceil32(return_data.size) + 96])] = mem[ceil32(return_data.size) + 128 len floor32(mem[ceil32(return_data.size) + 96])]
    return 32, mem[(32 * _7) + ceil32(return_data.size) + 160 len (32 * mem[ceil32(return_data.size) + 96]) + 32]
}

function claimAllExpiredTokens() payable {
    mem[96] = 0x7caf154500000000000000000000000000000000000000000000000000000000
    mem[100] = assetPair
    require ext_code.size(registryAddress)
    staticcall registryAddress.getMarketsByAssetPair(bytes32 rg1) with:
            gas gas_remaining wei
           args assetPair
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    mem[96 len return_data.size] = ext_call.return_data[0 len return_data.size]
    mem[64] = ceil32(return_data.size) + 96
    require return_data.size >= 32
    _4 = mem[96 len 4], stor160
    require mem[96 len 4], stor160 <= 4294967296
    require mem[96 len 4], stor160 + 32 <= return_data.size
    require mem[mem[96 len 4], stor160 + 96] <= 4294967296 and mem[96 len 4], stor160 + (32 * mem[mem[96 len 4], stor160 + 96]) + 32 <= return_data.size
    mem[ceil32(return_data.size) + 96] = mem[mem[96 len 4], stor160 + 96]
    _7 = mem[_4 + 96]
    mem[ceil32(return_data.size) + 128 len floor32(mem[_4 + 96])] = mem[_4 + 128 len floor32(mem[_4 + 96])]
    idx = 0
    while idx < mem[ceil32(return_data.size) + 96]:
        require idx < mem[ceil32(return_data.size) + 96]
        _46 = mem[(32 * idx) + ceil32(return_data.size) + 128]
        require ext_code.size(mem[(32 * idx) + ceil32(return_data.size) + 140 len 20])
        staticcall mem[(32 * idx) + ceil32(return_data.size) + 140 len 20].0xc19d93fb with:
                gas gas_remaining wei
        mem[(32 * _7) + ceil32(return_data.size) + 128] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] <= 2
        if ext_call.return_data[0] == 1:
            require ext_code.size(address(_46))
            staticcall address(_46).wToken() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            mem[(32 * _7) + ceil32(return_data.size) + 132] = this.address
            require ext_code.size(address(ext_call.return_data[0]))
            staticcall address(ext_call.return_data[0]).0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            mem[(32 * _7) + ceil32(return_data.size) + 128] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if ext_call.return_data[0]:
                mem[(32 * _7) + ceil32(return_data.size) + 128] = 0xc49785b400000000000000000000000000000000000000000000000000000000
                mem[(32 * _7) + ceil32(return_data.size) + 132] = ext_call.return_data[0]
                require ext_code.size(address(_46))
                call address(_46).0xc49785b4 with:
                     gas gas_remaining wei
                    args ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
        idx = idx + 1
        continue 
}

function getCurrentCollateralPrice() payable {
    require ext_code.size(stor155)
    staticcall stor155.latestRoundData() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 160
    if ext_call.return_data[32] < 0:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    32,
                    40,
                    code.data[21934 len 40],
                    ext_call.return_data[108 len 24]
    require ext_code.size(stor155)
    staticcall stor155.0x313ce567 with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if 10^18 * 10^uint8(stor153.field_168) / 10^18 != 10^uint8(stor153.field_168):
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    32,
                    33,
                    code.data[21823 len 33],
                    ext_call.return_data[101 len 31]
    if not stor157:
        if not 10^18 * 10^uint8(stor153.field_168):
            if not 10^uint8(stor153.field_160):
                revert with 0, 'SafeMath: division by zero'
            if not 10^uint8(ext_call.return_data[0]):
                revert with 0, 'SafeMath: division by zero'
            return (0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]))
        if 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^18 * 10^uint8(stor153.field_168) != ext_call.return_data[32]:
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                        32,
                        33,
                        code.data[21823 len 33],
                        ext_call.return_data[101 len 31]
        if not 10^uint8(stor153.field_160):
            revert with 0, 'SafeMath: division by zero'
        if not 10^uint8(ext_call.return_data[0]):
            revert with 0, 'SafeMath: division by zero'
        return (10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]))
    if not 10^18 * 10^uint8(stor153.field_168):
        if not 10^uint8(stor153.field_160):
            revert with 0, 'SafeMath: division by zero'
        if not ext_call.return_data[32]:
            revert with 0, 'SafeMath: division by zero'
        return (0 / 10^uint8(stor153.field_160) / ext_call.return_data[32])
    if 10^18 * 10^ext_call.return_data[31 len 1] * 10^uint8(stor153.field_168) / 10^18 * 10^uint8(stor153.field_168) != 10^ext_call.return_data[31 len 1]:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    32,
                    33,
                    code.data[21823 len 33],
                    ext_call.return_data[101 len 31]
    if not 10^uint8(stor153.field_160):
        revert with 0, 'SafeMath: division by zero'
    if not ext_call.return_data[32]:
        revert with 0, 'SafeMath: division by zero'
    return (10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32])
}

function calcPrice(uint256 arg1, uint256 arg2, uint256 arg3, uint256 arg4) payable {
    require calldata.size - 4 >= 128
    if arg3 <= arg2:
        if arg1 <= 3:
            if not arg1:
                if not arg2:
                    revert with 0, 'SafeMath: division by zero'
                if 0 / arg2 < 0:
                    revert with 0, 'SafeMath: addition overflow'
                return (0 / arg2)
            if arg4 != arg4:
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 32, 33, code.data[21823 len 33], mem[197 len 31]
            if not arg4:
                if not arg2:
                    revert with 0, 'SafeMath: division by zero'
                if 0 / arg2 < 0:
                    revert with 0, 'SafeMath: addition overflow'
                return (0 / arg2)
            if arg3 * arg4 / arg4 != arg3:
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 32, 33, code.data[21823 len 33], mem[197 len 31]
            if not arg2:
                revert with 0, 'SafeMath: division by zero'
            if arg3 * arg4 / arg2 < 0:
                revert with 0, 'SafeMath: addition overflow'
            return (arg3 * arg4 / arg2)
        s = (arg1 / 2) + 1
        t = arg1
        while s < t:
            require s
            s = (arg1 / s) + s / 2
            t = s
            continue 
        if not t:
            if not arg2:
                revert with 0, 'SafeMath: division by zero'
            if 0 / arg2 < 0:
                revert with 0, 'SafeMath: addition overflow'
            return (0 / arg2)
        if arg4 * t / t != arg4:
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 32, 33, code.data[21823 len 33], mem[197 len 31]
        if not arg4 * t:
            if not arg2:
                revert with 0, 'SafeMath: division by zero'
            if 0 / arg2 < 0:
                revert with 0, 'SafeMath: addition overflow'
            return (0 / arg2)
        if arg3 * arg4 * t / arg4 * t != arg3:
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 32, 33, code.data[21823 len 33], mem[197 len 31]
        if not arg2:
            revert with 0, 'SafeMath: division by zero'
        if arg3 * arg4 * t / arg2 < 0:
            revert with 0, 'SafeMath: addition overflow'
        return (arg3 * arg4 * t / arg2)
    if arg2 > arg3:
        revert with 0, 'SafeMath: subtraction overflow'
    if not arg3 - arg2:
        if not arg3:
            revert with 0, 'SafeMath: division by zero'
        if arg1 <= 3:
            if not arg1:
                if not arg2:
                    revert with 0, 'SafeMath: division by zero'
                if (0 / arg2) + (0 / arg3) < 0 / arg3:
                    revert with 0, 'SafeMath: addition overflow'
                return ((0 / arg2) + (0 / arg3))
            if arg4 != arg4:
                revert with 0, 32, 33, code.data[21823 len 33], mem[325 len 31]
            if not arg4:
                if not arg2:
                    revert with 0, 'SafeMath: division by zero'
                if (0 / arg2) + (0 / arg3) < 0 / arg3:
                    revert with 0, 'SafeMath: addition overflow'
                return ((0 / arg2) + (0 / arg3))
            if arg3 * arg4 / arg4 != arg3:
                revert with 0, 32, 33, code.data[21823 len 33], mem[325 len 31]
            if not arg2:
                revert with 0, 'SafeMath: division by zero'
            if (arg3 * arg4 / arg2) + (0 / arg3) < 0 / arg3:
                revert with 0, 'SafeMath: addition overflow'
            return ((arg3 * arg4 / arg2) + (0 / arg3))
        s = (arg1 / 2) + 1
        t = arg1
        while s < t:
            require s
            s = (arg1 / s) + s / 2
            t = s
            continue 
        if not t:
            if not arg2:
                revert with 0, 'SafeMath: division by zero'
            if (0 / arg2) + (0 / arg3) < 0 / arg3:
                revert with 0, 'SafeMath: addition overflow'
            return ((0 / arg2) + (0 / arg3))
        if arg4 * t / t != arg4:
            revert with 0, 32, 33, code.data[21823 len 33], mem[325 len 31]
        if not arg4 * t:
            if not arg2:
                revert with 0, 'SafeMath: division by zero'
            if (0 / arg2) + (0 / arg3) < 0 / arg3:
                revert with 0, 'SafeMath: addition overflow'
            return ((0 / arg2) + (0 / arg3))
        if arg3 * arg4 * t / arg4 * t != arg3:
            revert with 0, 32, 33, code.data[21823 len 33], mem[325 len 31]
        if not arg2:
            revert with 0, 'SafeMath: division by zero'
        if (arg3 * arg4 * t / arg2) + (0 / arg3) < 0 / arg3:
            revert with 0, 'SafeMath: addition overflow'
        return ((arg3 * arg4 * t / arg2) + (0 / arg3))
    if (10^18 * arg3) - (10^18 * arg2) / arg3 - arg2 != 10^18:
        revert with 0, 32, 33, code.data[21823 len 33], mem[261 len 31]
    if not arg3:
        revert with 0, 'SafeMath: division by zero'
    if arg1 <= 3:
        if not arg1:
            if not arg2:
                revert with 0, 'SafeMath: division by zero'
            if (0 / arg2) + ((10^18 * arg3) - (10^18 * arg2) / arg3) < (10^18 * arg3) - (10^18 * arg2) / arg3:
                revert with 0, 'SafeMath: addition overflow'
            return ((0 / arg2) + ((10^18 * arg3) - (10^18 * arg2) / arg3))
        if arg4 != arg4:
            revert with 0, 32, 33, code.data[21823 len 33], mem[325 len 31]
        if not arg4:
            if not arg2:
                revert with 0, 'SafeMath: division by zero'
            if (0 / arg2) + ((10^18 * arg3) - (10^18 * arg2) / arg3) < (10^18 * arg3) - (10^18 * arg2) / arg3:
                revert with 0, 'SafeMath: addition overflow'
            return ((0 / arg2) + ((10^18 * arg3) - (10^18 * arg2) / arg3))
        if arg3 * arg4 / arg4 != arg3:
            revert with 0, 32, 33, code.data[21823 len 33], mem[325 len 31]
        if not arg2:
            revert with 0, 'SafeMath: division by zero'
        if (arg3 * arg4 / arg2) + ((10^18 * arg3) - (10^18 * arg2) / arg3) < (10^18 * arg3) - (10^18 * arg2) / arg3:
            revert with 0, 'SafeMath: addition overflow'
        return ((arg3 * arg4 / arg2) + ((10^18 * arg3) - (10^18 * arg2) / arg3))
    s = (arg1 / 2) + 1
    t = arg1
    while s < t:
        require s
        s = (arg1 / s) + s / 2
        t = s
        continue 
    if not t:
        if not arg2:
            revert with 0, 'SafeMath: division by zero'
        if (0 / arg2) + ((10^18 * arg3) - (10^18 * arg2) / arg3) < (10^18 * arg3) - (10^18 * arg2) / arg3:
            revert with 0, 'SafeMath: addition overflow'
        return ((0 / arg2) + ((10^18 * arg3) - (10^18 * arg2) / arg3))
    if arg4 * t / t != arg4:
        revert with 0, 32, 33, code.data[21823 len 33], mem[325 len 31]
    if not arg4 * t:
        if not arg2:
            revert with 0, 'SafeMath: division by zero'
        if (0 / arg2) + ((10^18 * arg3) - (10^18 * arg2) / arg3) < (10^18 * arg3) - (10^18 * arg2) / arg3:
            revert with 0, 'SafeMath: addition overflow'
        return ((0 / arg2) + ((10^18 * arg3) - (10^18 * arg2) / arg3))
    if arg3 * arg4 * t / arg4 * t != arg3:
        revert with 0, 32, 33, code.data[21823 len 33], mem[325 len 31]
    if not arg2:
        revert with 0, 'SafeMath: division by zero'
    if (arg3 * arg4 * t / arg2) + ((10^18 * arg3) - (10^18 * arg2) / arg3) < (10^18 * arg3) - (10^18 * arg2) / arg3:
        revert with 0, 'SafeMath: addition overflow'
    return ((arg3 * arg4 * t / arg2) + ((10^18 * arg3) - (10^18 * arg2) / arg3))
}

function getUnclaimedBalances() payable {
    mem[96] = 0x7caf154500000000000000000000000000000000000000000000000000000000
    mem[100] = assetPair
    require ext_code.size(registryAddress)
    staticcall registryAddress.getMarketsByAssetPair(bytes32 rg1) with:
            gas gas_remaining wei
           args assetPair
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    mem[96 len return_data.size] = ext_call.return_data[0 len return_data.size]
    mem[64] = ceil32(return_data.size) + 96
    require return_data.size >= 32
    _4 = mem[96 len 4], stor160
    require mem[96 len 4], stor160 <= 4294967296
    require mem[96 len 4], stor160 + 32 <= return_data.size
    require mem[mem[96 len 4], stor160 + 96] <= 4294967296 and mem[96 len 4], stor160 + (32 * mem[mem[96 len 4], stor160 + 96]) + 32 <= return_data.size
    mem[ceil32(return_data.size) + 96] = mem[mem[96 len 4], stor160 + 96]
    _7 = mem[_4 + 96]
    mem[ceil32(return_data.size) + 128 len floor32(mem[_4 + 96])] = mem[_4 + 128 len floor32(mem[_4 + 96])]
    mem[64] = (32 * _7) + ceil32(return_data.size) + 128
    _216 = mem[ceil32(return_data.size) + 96]
    idx = 0
    while idx < _216:
        require idx < mem[ceil32(return_data.size) + 96]
        _220 = mem[(32 * idx) + ceil32(return_data.size) + 128]
        require ext_code.size(mem[(32 * idx) + ceil32(return_data.size) + 140 len 20])
        staticcall mem[(32 * idx) + ceil32(return_data.size) + 140 len 20].0xc19d93fb with:
                gas gas_remaining wei
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] <= 2
        if ext_call.return_data[0] != 1:
            idx = idx + 1
            continue 
        require ext_code.size(address(_220))
        staticcall address(_220).wToken() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        mem[mem[64] + 4] = this.address
        require ext_code.size(address(ext_call.return_data[0]))
        staticcall address(ext_call.return_data[0]).0x70a08231 with:
                gas gas_remaining wei
               args this.address
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_code.size(address(_220))
        staticcall address(_220).wToken() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_code.size(address(ext_call.return_data[0]))
        staticcall address(ext_call.return_data[0]).0x18160ddd with:
                gas gas_remaining wei
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if not ext_call.return_data[0]:
            idx = idx + 1
            continue 
        if not ext_call.return_data[0]:
            idx = idx + 1
            continue 
        require ext_code.size(collateralTokenAddress)
        staticcall collateralTokenAddress.0x70a08231 with:
                gas gas_remaining wei
               args address(_220)
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if not ext_call.return_data[0]:
            _247 = mem[64]
            mem[64] = mem[64] + 64
            mem[_247] = 26
            mem[_247 + 32] = 'SafeMath: division by zero'
            if not ext_call.return_data[0]:
                _249 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 26
                idx = 0
                while idx < 26:
                    mem[idx + _249 + 68] = mem[idx + _247 + 32]
                    idx = idx + 32
                    continue 
                mem[_249 + 68] = mem[_249 + 74 len 26]
                revert with memory
                  from mem[64]
                   len _249 + -mem[64] + 100
            if 0 / ext_call.return_data[0] < 0:
                revert with 0, 'SafeMath: addition overflow'
            mem[mem[64] + 4] = address(_220)
            require ext_code.size(paymentTokenAddress)
            staticcall paymentTokenAddress.0x70a08231 with:
                    gas gas_remaining wei
                   args address(_220)
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0]:
                _279 = mem[64]
                mem[64] = mem[64] + 64
                mem[_279] = 26
                mem[_279 + 32] = 'SafeMath: division by zero'
                if ext_call.return_data[0]:
                    if 0 / ext_call.return_data[0] < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    idx = idx + 1
                    continue 
                _283 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 26
                idx = 0
                while idx < 26:
                    mem[idx + _283 + 68] = mem[idx + _279 + 32]
                    idx = idx + 32
                    continue 
                mem[_283 + 68] = mem[_283 + 74 len 26]
                revert with memory
                  from mem[64]
                   len _283 + -mem[64] + 100
            if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
            _281 = mem[64]
            mem[64] = mem[64] + 64
            mem[_281] = 26
            mem[_281 + 32] = 'SafeMath: division by zero'
            if ext_call.return_data[0]:
                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] < 0:
                    revert with 0, 'SafeMath: addition overflow'
                idx = idx + 1
                continue 
            _289 = mem[64]
            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = 32
            mem[mem[64] + 36] = 26
            idx = 0
            while idx < 26:
                mem[idx + _289 + 68] = mem[idx + _281 + 32]
                idx = idx + 32
                continue 
            mem[_289 + 68] = mem[_289 + 74 len 26]
            revert with memory
              from mem[64]
               len _289 + -mem[64] + 100
        if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
            revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
        _248 = mem[64]
        mem[64] = mem[64] + 64
        mem[_248] = 26
        mem[_248 + 32] = 'SafeMath: division by zero'
        if not ext_call.return_data[0]:
            _252 = mem[64]
            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = 32
            mem[mem[64] + 36] = 26
            idx = 0
            while idx < 26:
                mem[idx + _252 + 68] = mem[idx + _248 + 32]
                idx = idx + 32
                continue 
            mem[_252 + 68] = mem[_252 + 74 len 26]
            revert with memory
              from mem[64]
               len _252 + -mem[64] + 100
        if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] < 0:
            revert with 0, 'SafeMath: addition overflow'
        mem[mem[64] + 4] = address(_220)
        require ext_code.size(paymentTokenAddress)
        staticcall paymentTokenAddress.0x70a08231 with:
                gas gas_remaining wei
               args address(_220)
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if not ext_call.return_data[0]:
            _280 = mem[64]
            mem[64] = mem[64] + 64
            mem[_280] = 26
            mem[_280 + 32] = 'SafeMath: division by zero'
            if ext_call.return_data[0]:
                if 0 / ext_call.return_data[0] < 0:
                    revert with 0, 'SafeMath: addition overflow'
                idx = idx + 1
                continue 
            _286 = mem[64]
            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = 32
            mem[mem[64] + 36] = 26
            idx = 0
            while idx < 26:
                mem[idx + _286 + 68] = mem[idx + _280 + 32]
                idx = idx + 32
                continue 
            mem[_286 + 68] = mem[_286 + 74 len 26]
            revert with memory
              from mem[64]
               len _286 + -mem[64] + 100
        if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
            revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
        _282 = mem[64]
        mem[64] = mem[64] + 64
        mem[_282] = 26
        mem[_282 + 32] = 'SafeMath: division by zero'
        if ext_call.return_data[0]:
            if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] < 0:
                revert with 0, 'SafeMath: addition overflow'
            idx = idx + 1
            continue 
        _292 = mem[64]
        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
        mem[mem[64] + 4] = 32
        mem[mem[64] + 36] = 26
        idx = 0
        while idx < 26:
            mem[idx + _292 + 68] = mem[idx + _282 + 32]
            idx = idx + 32
            continue 
        mem[_292 + 68] = mem[_292 + 74 len 26]
        revert with memory
          from mem[64]
           len _292 + -mem[64] + 100
    return 0
}

function initialize(address arg1, address arg2, address arg3, address arg4, address arg5, uint16 arg6, bool arg7) payable {
    require calldata.size - 4 >= 224
    if not arg1:
        revert with 0, 'Invalid _registry'
    if not arg2:
        revert with 0, 'Invalid _priceOracle'
    if not arg3:
        revert with 0, 'Invalid _paymentToken'
    if not arg4:
        revert with 0, 'Invalid _collateralToken'
    if arg4 == arg3:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 32, 43, code.data[21748 len 43], mem[207 len 21]
    if not arg5:
        revert with 0, 'Invalid _tokenImplementation'
    if stor159:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 32, 38, code.data[21710 len 38], mem[202 len 26]
    stor159 = 1
    registryAddress = arg1
    stor155 = arg2
    tradeFeeBasisPoints = arg6
    collateralTokenAddress = arg4
    paymentTokenAddress = arg3
    mem[128] = arg4
    mem[160] = arg3
    mem[96] = 64
    assetPair = sha3(address(arg4), arg3)
    require ext_code.size(arg4)
    staticcall arg4.0x313ce567 with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    uint8(stor153.field_160) = uint8(ext_call.return_data[0])
    require ext_code.size(arg3)
    staticcall arg3.0x313ce567 with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    uint8(stor153.field_168) = uint8(ext_call.return_data[0])
    stor157 = uint8(arg7)
    mem[192 len 322] = code.data[21283 len 322]
    mem[514] = arg5
    create contract with 0 wei
                    code: code.data[21283 len 322], arg5
    if not create.new_address:
        revert with ext_call.return_data[0 len return_data.size]
    lpTokenAddress = address(create.new_address)
    mem[192] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
    require ext_code.size(arg4)
    staticcall arg4.0x95d89b41 with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    mem[192 len return_data.size] = ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    _31 = mem[192]
    require mem[192] <= 4294967296
    require mem[192] + 32 <= return_data.size
    require return_data.size >= mem[mem[192] + 192] + mem[192] + 32 and mem[mem[192] + 192] <= 4294967296
    mem[ceil32(return_data.size) + 192] = mem[mem[192] + 192]
    _34 = mem[_31 + 192]
    mem[ceil32(return_data.size) + 224 len ceil32(mem[_31 + 192])] = mem[_31 + 224 len ceil32(mem[_31 + 192])]
    if not _34 % 32:
        mem[_34 + ceil32(return_data.size) + 224] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
        require ext_code.size(arg3)
        staticcall arg3.0x95d89b41 with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        mem[_34 + ceil32(return_data.size) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
        mem[64] = _34 + (2 * ceil32(return_data.size)) + 224
        require return_data.size >= 32
        _1518 = mem[_34 + ceil32(return_data.size) + 224]
        require mem[_34 + ceil32(return_data.size) + 224] <= 4294967296
        require mem[_34 + ceil32(return_data.size) + 224] + 32 <= return_data.size
        require return_data.size >= mem[_34 + ceil32(return_data.size) + mem[_34 + ceil32(return_data.size) + 224] + 224] + mem[_34 + ceil32(return_data.size) + 224] + 32 and mem[_34 + ceil32(return_data.size) + mem[_34 + ceil32(return_data.size) + 224] + 224] <= 4294967296
        mem[_34 + (2 * ceil32(return_data.size)) + 224] = mem[_34 + ceil32(return_data.size) + mem[_34 + ceil32(return_data.size) + 224] + 224]
        _1524 = mem[_34 + ceil32(return_data.size) + _1518 + 224]
        mem[_34 + (2 * ceil32(return_data.size)) + 256 len ceil32(mem[_34 + ceil32(return_data.size) + _1518 + 224])] = mem[_34 + ceil32(return_data.size) + _1518 + 256 len ceil32(mem[_34 + ceil32(return_data.size) + _1518 + 224])]
        if not _1524 % 32:
            mem[64] = _1524 + _34 + (2 * ceil32(return_data.size)) + 256
            _2990 = mem[ceil32(return_data.size) + 192]
            mem[_1524 + _34 + (2 * ceil32(return_data.size)) + 288 len floor32(mem[ceil32(return_data.size) + 192])] = mem[ceil32(return_data.size) + 224 len floor32(mem[ceil32(return_data.size) + 192])]
            mem[_1524 + _34 + (2 * ceil32(return_data.size)) + floor32(mem[ceil32(return_data.size) + 192]) + -(mem[ceil32(return_data.size) + 192] % 32) + 320 len mem[ceil32(return_data.size) + 192] % 32] = mem[ceil32(return_data.size) + floor32(mem[ceil32(return_data.size) + 192]) + -(mem[ceil32(return_data.size) + 192] % 32) + 256 len mem[ceil32(return_data.size) + 192] % 32]
            mem[_2990 + _1524 + _34 + (2 * ceil32(return_data.size)) + 288] = 0x2d00000000000000000000000000000000000000000000000000000000000000
            mem[_2990 + _1524 + _34 + (2 * ceil32(return_data.size)) + 289 len floor32(mem[_34 + (2 * ceil32(return_data.size)) + 224])] = mem[_34 + (2 * ceil32(return_data.size)) + 256 len floor32(mem[_34 + (2 * ceil32(return_data.size)) + 224])]
            mem[_2990 + _1524 + _34 + (2 * ceil32(return_data.size)) + floor32(mem[_34 + (2 * ceil32(return_data.size)) + 224]) + -(mem[_34 + (2 * ceil32(return_data.size)) + 224] % 32) + 321 len mem[_34 + (2 * ceil32(return_data.size)) + 224] % 32] = mem[_34 + (2 * ceil32(return_data.size)) + floor32(mem[_34 + (2 * ceil32(return_data.size)) + 224]) + -(mem[_34 + (2 * ceil32(return_data.size)) + 224] % 32) + 288 len mem[_34 + (2 * ceil32(return_data.size)) + 224] % 32]
            mem[64] = mem[_34 + (2 * ceil32(return_data.size)) + 224] + _2990 + _1524 + _34 + (2 * ceil32(return_data.size)) + 289
            mem[mem[_34 + (2 * ceil32(return_data.size)) + 224] + _2990 + _1524 + _34 + (2 * ceil32(return_data.size)) + 321] = 0x4c502d0000000000000000000000000000000000000000000000000000000000
            mem[mem[_34 + (2 * ceil32(return_data.size)) + 224] + _2990 + _1524 + _34 + (2 * ceil32(return_data.size)) + 324 len floor32(mem[_34 + (2 * ceil32(return_data.size)) + 224] + _2990 + 1)] = mem[_1524 + _34 + (2 * ceil32(return_data.size)) + 288 len floor32(mem[_34 + (2 * ceil32(return_data.size)) + 224] + _2990 + 1)]
            mem[mem[_34 + (2 * ceil32(return_data.size)) + 224] + _2990 + _1524 + _34 + (2 * ceil32(return_data.size)) + floor32(mem[_34 + (2 * ceil32(return_data.size)) + 224] + _2990 + 1) + 324] = 256^(-(mem[_34 + (2 * ceil32(return_data.size)) + 224] + _2990 + 1 % 32) + 32) - 1 and mem[mem[_34 + (2 * ceil32(return_data.size)) + 224] + _2990 + _1524 + _34 + (2 * ceil32(return_data.size)) + floor32(mem[_34 + (2 * ceil32(return_data.size)) + 224] + _2990 + 1) + 324] or mem[_1524 + _34 + (2 * ceil32(return_data.size)) + floor32(mem[_34 + (2 * ceil32(return_data.size)) + 224] + _2990 + 1) + 288] and !(256^(-(mem[_34 + (2 * ceil32(return_data.size)) + 224] + _2990 + 1 % 32) + 32) - 1)
            mem[64] = (2 * mem[_34 + (2 * ceil32(return_data.size)) + 224]) + (2 * _2990) + _1524 + _34 + (2 * ceil32(return_data.size)) + 325
            mem[(2 * mem[_34 + (2 * ceil32(return_data.size)) + 224]) + (2 * _2990) + _1524 + _34 + (2 * ceil32(return_data.size)) + 325] = 0x1624f6c600000000000000000000000000000000000000000000000000000000
            mem[(2 * mem[_34 + (2 * ceil32(return_data.size)) + 224]) + (2 * _2990) + _1524 + _34 + (2 * ceil32(return_data.size)) + 393] = uint8(stor153.field_160)
            mem[(2 * mem[_34 + (2 * ceil32(return_data.size)) + 224]) + (2 * _2990) + _1524 + _34 + (2 * ceil32(return_data.size)) + 329] = 96
            mem[(2 * mem[_34 + (2 * ceil32(return_data.size)) + 224]) + (2 * _2990) + _1524 + _34 + (2 * ceil32(return_data.size)) + 425] = mem[_34 + (2 * ceil32(return_data.size)) + 224] + _2990 + 4
            mem[(2 * mem[_34 + (2 * ceil32(return_data.size)) + 224]) + (2 * _2990) + _1524 + _34 + (2 * ceil32(return_data.size)) + 457 len floor32(mem[_34 + (2 * ceil32(return_data.size)) + 224] + _2990 + 35)] = 0, mem[_1524 + _34 + (2 * ceil32(return_data.size)) + 288 len floor32(mem[_34 + (2 * ceil32(return_data.size)) + 224] + _2990 + 1)], mem[mem[_34 + (2 * ceil32(return_data.size)) + 224] + _2990 + _1524 + _34 + (2 * ceil32(return_data.size)) + floor32(mem[_34 + (2 * ceil32(return_data.size)) + 224] + _2990 + 1) + 324 len floor32(mem[_34 + (2 * ceil32(return_data.size)) + 224] + _2990 + 35) + -floor32(mem[_34 + (2 * ceil32(return_data.size)) + 224] + _2990 + 1) - 3]
            mem[(2 * mem[_34 + (2 * ceil32(return_data.size)) + 224]) + (2 * _2990) + _1524 + _34 + (2 * ceil32(return_data.size)) + 361] = mem[_34 + (2 * ceil32(return_data.size)) + 224] + _2990 + 132
            mem[(4 * mem[_34 + (2 * ceil32(return_data.size)) + 224]) + (4 * _2990) + _1524 + _34 + (2 * ceil32(return_data.size)) + 461] = mem[_34 + (2 * ceil32(return_data.size)) + 224] + _2990 + 4
            mem[(4 * mem[_34 + (2 * ceil32(return_data.size)) + 224]) + (4 * _2990) + _1524 + _34 + (2 * ceil32(return_data.size)) + 493 len floor32(mem[_34 + (2 * ceil32(return_data.size)) + 224] + _2990 + 35)] = 0, mem[_1524 + _34 + (2 * ceil32(return_data.size)) + 288 len floor32(mem[_34 + (2 * ceil32(return_data.size)) + 224] + _2990 + 1)], mem[mem[_34 + (2 * ceil32(return_data.size)) + 224] + _2990 + _1524 + _34 + (2 * ceil32(return_data.size)) + floor32(mem[_34 + (2 * ceil32(return_data.size)) + 224] + _2990 + 1) + 324 len floor32(mem[_34 + (2 * ceil32(return_data.size)) + 224] + _2990 + 35) + -floor32(mem[_34 + (2 * ceil32(return_data.size)) + 224] + _2990 + 1) - 3]
            require ext_code.size(lpTokenAddress)
            call lpTokenAddress.0x1624f6c6 with:
                 gas gas_remaining wei
                args Array(len=mem[_34 + (2 * ceil32(return_data.size)) + 224] + _2990 + 4, data=Mask(8 * floor32(mem[_34 + (2 * ceil32(return_data.size)) + 224] + _2990 + 35), -(8 * floor32(mem[_34 + (2 * ceil32(return_data.size)) + 224] + _2990 + 35)) + 256, 0, mem[_1524 + _34 + (2 * ceil32(return_data.size)) + 288 len floor32(mem[_34 + (2 * ceil32(return_data.size)) + 224] + _2990 + 1)], mem[mem[_34 + (2 * ceil32(return_data.size)) + 224] + _2990 + _1524 + _34 + (2 * ceil32(return_data.size)) + floor32(mem[_34 + (2 * ceil32(return_data.size)) + 224] + _2990 + 1) + 324 len floor32(mem[_34 + (2 * ceil32(return_data.size)) + 224] + _2990 + 35) + -floor32(mem[_34 + (2 * ceil32(return_data.size)) + 224] + _2990 + 1) - 3]) << (8 * floor32(mem[_34 + (2 * ceil32(return_data.size)) + 224] + _2990 + 35)) - 256, mem[(2 * mem[_34 + (2 * ceil32(return_data.size)) + 224]) + (2 * _2990) + _1524 + _34 + (2 * ceil32(return_data.size)) + floor32(mem[_34 + (2 * ceil32(return_data.size)) + 224] + _2990 + 35) + 457 len (2 * mem[_34 + (2 * ceil32(return_data.size)) + 224]) + (2 * _2990) + -floor32(mem[_34 + (2 * ceil32(return_data.size)) + 224] + _2990 + 35) + 40]), mem[_34 + (2 * ceil32(return_data.size)) + 224] + _2990 + 132, uint8(stor153.field_0)
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            volatilityFactor = 4 * 10^13
            if uint8(stor0.field_8):
                owner = msg.sender
                emit OwnershipTransferred(0, msg.sender);
            else:
                if ext_code.size(this.address):
                    if uint8(stor0.field_0):
                        revert with 0, 32, 46, code.data[21888 len 46], Mask(144, 0, mem[_34 + (2 * ceil32(return_data.size)) + 224] + _2990 + 4)
                if uint8(stor0.field_8):
                    owner = msg.sender
                    emit OwnershipTransferred(0, msg.sender);
                else:
                    uint8(stor0.field_0) = 1
                    uint8(stor0.field_8) = 1
                    Mask(248, 0, stor0.field_8) = 0
                    if ext_code.size(this.address):
                        if uint8(stor0.field_0):
                            revert with 0, 32, 46, code.data[21888 len 46], Mask(144, 0, mem[_34 + (2 * ceil32(return_data.size)) + 224] + _2990 + 4)
                    if uint8(stor0.field_8):
                        owner = msg.sender
                        emit OwnershipTransferred(0, msg.sender);
                    else:
                        uint8(stor0.field_0) = 1
                        uint8(stor0.field_8) = 1
                        Mask(248, 0, stor0.field_8) = 0
                        uint8(stor0.field_8) = 0
                        if ext_code.size(this.address):
                            if uint8(stor0.field_0):
                                revert with 0, 32, 46, code.data[21888 len 46], Mask(144, 0, mem[_34 + (2 * ceil32(return_data.size)) + 224] + _2990 + 4)
                        if uint8(stor0.field_8):
                            owner = msg.sender
                            emit OwnershipTransferred(0, msg.sender);
                        else:
                            uint8(stor0.field_0) = 1
                            uint8(stor0.field_8) = 1
                            Mask(248, 0, stor0.field_8) = 0
                            owner = msg.sender
                            emit OwnershipTransferred(0, msg.sender);
                            uint8(stor0.field_8) = 0
                            uint8(stor0.field_8) = 0
        else:
            mem[floor32(_1524) + _34 + (2 * ceil32(return_data.size)) + 256] = mem[floor32(_1524) + _34 + (2 * ceil32(return_data.size)) + -(_1524 % 32) + 288 len _1524 % 32]
            mem[64] = floor32(_1524) + _34 + (2 * ceil32(return_data.size)) + 288
            _2996 = mem[ceil32(return_data.size) + 192]
            mem[floor32(_1524) + _34 + (2 * ceil32(return_data.size)) + 320 len floor32(mem[ceil32(return_data.size) + 192])] = mem[ceil32(return_data.size) + 224 len floor32(mem[ceil32(return_data.size) + 192])]
            mem[floor32(_1524) + _34 + (2 * ceil32(return_data.size)) + floor32(mem[ceil32(return_data.size) + 192]) + -(mem[ceil32(return_data.size) + 192] % 32) + 352 len mem[ceil32(return_data.size) + 192] % 32] = mem[ceil32(return_data.size) + floor32(mem[ceil32(return_data.size) + 192]) + -(mem[ceil32(return_data.size) + 192] % 32) + 256 len mem[ceil32(return_data.size) + 192] % 32]
            mem[_2996 + floor32(_1524) + _34 + (2 * ceil32(return_data.size)) + 320] = 0x2d00000000000000000000000000000000000000000000000000000000000000
            mem[_2996 + floor32(_1524) + _34 + (2 * ceil32(return_data.size)) + 321 len floor32(mem[_34 + (2 * ceil32(return_data.size)) + 224])] = mem[_34 + (2 * ceil32(return_data.size)) + 256 len floor32(mem[_34 + (2 * ceil32(return_data.size)) + 224])]
            mem[_2996 + floor32(_1524) + _34 + (2 * ceil32(return_data.size)) + floor32(mem[_34 + (2 * ceil32(return_data.size)) + 224]) + -(mem[_34 + (2 * ceil32(return_data.size)) + 224] % 32) + 353 len mem[_34 + (2 * ceil32(return_data.size)) + 224] % 32] = mem[_34 + (2 * ceil32(return_data.size)) + floor32(mem[_34 + (2 * ceil32(return_data.size)) + 224]) + -(mem[_34 + (2 * ceil32(return_data.size)) + 224] % 32) + 288 len mem[_34 + (2 * ceil32(return_data.size)) + 224] % 32]
            mem[64] = mem[_34 + (2 * ceil32(return_data.size)) + 224] + _2996 + floor32(_1524) + _34 + (2 * ceil32(return_data.size)) + 321
            mem[mem[_34 + (2 * ceil32(return_data.size)) + 224] + _2996 + floor32(_1524) + _34 + (2 * ceil32(return_data.size)) + 353] = 0x4c502d0000000000000000000000000000000000000000000000000000000000
            mem[mem[_34 + (2 * ceil32(return_data.size)) + 224] + _2996 + floor32(_1524) + _34 + (2 * ceil32(return_data.size)) + 356 len floor32(mem[_34 + (2 * ceil32(return_data.size)) + 224] + _2996 + 1)] = mem[floor32(_1524) + _34 + (2 * ceil32(return_data.size)) + 320 len floor32(mem[_34 + (2 * ceil32(return_data.size)) + 224] + _2996 + 1)]
            mem[mem[_34 + (2 * ceil32(return_data.size)) + 224] + _2996 + floor32(_1524) + _34 + (2 * ceil32(return_data.size)) + floor32(mem[_34 + (2 * ceil32(return_data.size)) + 224] + _2996 + 1) + 356] = 256^(-(mem[_34 + (2 * ceil32(return_data.size)) + 224] + _2996 + 1 % 32) + 32) - 1 and mem[mem[_34 + (2 * ceil32(return_data.size)) + 224] + _2996 + floor32(_1524) + _34 + (2 * ceil32(return_data.size)) + floor32(mem[_34 + (2 * ceil32(return_data.size)) + 224] + _2996 + 1) + 356] or mem[floor32(_1524) + _34 + (2 * ceil32(return_data.size)) + floor32(mem[_34 + (2 * ceil32(return_data.size)) + 224] + _2996 + 1) + 320] and !(256^(-(mem[_34 + (2 * ceil32(return_data.size)) + 224] + _2996 + 1 % 32) + 32) - 1)
            mem[64] = (2 * mem[_34 + (2 * ceil32(return_data.size)) + 224]) + (2 * _2996) + floor32(_1524) + _34 + (2 * ceil32(return_data.size)) + 357
            mem[(2 * mem[_34 + (2 * ceil32(return_data.size)) + 224]) + (2 * _2996) + floor32(_1524) + _34 + (2 * ceil32(return_data.size)) + 357] = 0x1624f6c600000000000000000000000000000000000000000000000000000000
            mem[(2 * mem[_34 + (2 * ceil32(return_data.size)) + 224]) + (2 * _2996) + floor32(_1524) + _34 + (2 * ceil32(return_data.size)) + 425] = uint8(stor153.field_160)
            mem[(2 * mem[_34 + (2 * ceil32(return_data.size)) + 224]) + (2 * _2996) + floor32(_1524) + _34 + (2 * ceil32(return_data.size)) + 361] = 96
            mem[(2 * mem[_34 + (2 * ceil32(return_data.size)) + 224]) + (2 * _2996) + floor32(_1524) + _34 + (2 * ceil32(return_data.size)) + 457] = mem[_34 + (2 * ceil32(return_data.size)) + 224] + _2996 + 4
            mem[(2 * mem[_34 + (2 * ceil32(return_data.size)) + 224]) + (2 * _2996) + floor32(_1524) + _34 + (2 * ceil32(return_data.size)) + 489 len floor32(mem[_34 + (2 * ceil32(return_data.size)) + 224] + _2996 + 35)] = 0, mem[floor32(_1524) + _34 + (2 * ceil32(return_data.size)) + 320 len floor32(mem[_34 + (2 * ceil32(return_data.size)) + 224] + _2996 + 1)], mem[mem[_34 + (2 * ceil32(return_data.size)) + 224] + _2996 + floor32(_1524) + _34 + (2 * ceil32(return_data.size)) + floor32(mem[_34 + (2 * ceil32(return_data.size)) + 224] + _2996 + 1) + 356 len floor32(mem[_34 + (2 * ceil32(return_data.size)) + 224] + _2996 + 35) + -floor32(mem[_34 + (2 * ceil32(return_data.size)) + 224] + _2996 + 1) - 3]
            mem[(2 * mem[_34 + (2 * ceil32(return_data.size)) + 224]) + (2 * _2996) + floor32(_1524) + _34 + (2 * ceil32(return_data.size)) + 393] = mem[_34 + (2 * ceil32(return_data.size)) + 224] + _2996 + 132
            mem[(4 * mem[_34 + (2 * ceil32(return_data.size)) + 224]) + (4 * _2996) + floor32(_1524) + _34 + (2 * ceil32(return_data.size)) + 493] = mem[_34 + (2 * ceil32(return_data.size)) + 224] + _2996 + 4
            mem[(4 * mem[_34 + (2 * ceil32(return_data.size)) + 224]) + (4 * _2996) + floor32(_1524) + _34 + (2 * ceil32(return_data.size)) + 525 len floor32(mem[_34 + (2 * ceil32(return_data.size)) + 224] + _2996 + 35)] = 0, mem[floor32(_1524) + _34 + (2 * ceil32(return_data.size)) + 320 len floor32(mem[_34 + (2 * ceil32(return_data.size)) + 224] + _2996 + 1)], mem[mem[_34 + (2 * ceil32(return_data.size)) + 224] + _2996 + floor32(_1524) + _34 + (2 * ceil32(return_data.size)) + floor32(mem[_34 + (2 * ceil32(return_data.size)) + 224] + _2996 + 1) + 356 len floor32(mem[_34 + (2 * ceil32(return_data.size)) + 224] + _2996 + 35) + -floor32(mem[_34 + (2 * ceil32(return_data.size)) + 224] + _2996 + 1) - 3]
            require ext_code.size(lpTokenAddress)
            call lpTokenAddress.0x1624f6c6 with:
                 gas gas_remaining wei
                args Array(len=mem[_34 + (2 * ceil32(return_data.size)) + 224] + _2996 + 4, data=Mask(8 * floor32(mem[_34 + (2 * ceil32(return_data.size)) + 224] + _2996 + 35), -(8 * floor32(mem[_34 + (2 * ceil32(return_data.size)) + 224] + _2996 + 35)) + 256, 0, mem[floor32(_1524) + _34 + (2 * ceil32(return_data.size)) + 320 len floor32(mem[_34 + (2 * ceil32(return_data.size)) + 224] + _2996 + 1)], mem[mem[_34 + (2 * ceil32(return_data.size)) + 224] + _2996 + floor32(_1524) + _34 + (2 * ceil32(return_data.size)) + floor32(mem[_34 + (2 * ceil32(return_data.size)) + 224] + _2996 + 1) + 356 len floor32(mem[_34 + (2 * ceil32(return_data.size)) + 224] + _2996 + 35) + -floor32(mem[_34 + (2 * ceil32(return_data.size)) + 224] + _2996 + 1) - 3]) << (8 * floor32(mem[_34 + (2 * ceil32(return_data.size)) + 224] + _2996 + 35)) - 256, mem[(2 * mem[_34 + (2 * ceil32(return_data.size)) + 224]) + (2 * _2996) + floor32(_1524) + _34 + (2 * ceil32(return_data.size)) + floor32(mem[_34 + (2 * ceil32(return_data.size)) + 224] + _2996 + 35) + 489 len (2 * mem[_34 + (2 * ceil32(return_data.size)) + 224]) + (2 * _2996) + -floor32(mem[_34 + (2 * ceil32(return_data.size)) + 224] + _2996 + 35) + 40]), mem[_34 + (2 * ceil32(return_data.size)) + 224] + _2996 + 132, uint8(stor153.field_0)
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            volatilityFactor = 4 * 10^13
            if uint8(stor0.field_8):
                owner = msg.sender
                emit OwnershipTransferred(0, msg.sender);
            else:
                if ext_code.size(this.address):
                    if uint8(stor0.field_0):
                        revert with 0, 32, 46, code.data[21888 len 46], Mask(144, 0, mem[_34 + (2 * ceil32(return_data.size)) + 224] + _2996 + 4)
                if uint8(stor0.field_8):
                    owner = msg.sender
                    emit OwnershipTransferred(0, msg.sender);
                else:
                    uint8(stor0.field_0) = 1
                    uint8(stor0.field_8) = 1
                    Mask(248, 0, stor0.field_8) = 0
                    if ext_code.size(this.address):
                        if uint8(stor0.field_0):
                            revert with 0, 32, 46, code.data[21888 len 46], Mask(144, 0, mem[_34 + (2 * ceil32(return_data.size)) + 224] + _2996 + 4)
                    if uint8(stor0.field_8):
                        owner = msg.sender
                        emit OwnershipTransferred(0, msg.sender);
                    else:
                        uint8(stor0.field_0) = 1
                        uint8(stor0.field_8) = 1
                        Mask(248, 0, stor0.field_8) = 0
                        uint8(stor0.field_8) = 0
                        if ext_code.size(this.address):
                            if uint8(stor0.field_0):
                                revert with 0, 32, 46, code.data[21888 len 46], Mask(144, 0, mem[_34 + (2 * ceil32(return_data.size)) + 224] + _2996 + 4)
                        if uint8(stor0.field_8):
                            owner = msg.sender
                            emit OwnershipTransferred(0, msg.sender);
                        else:
                            uint8(stor0.field_0) = 1
                            uint8(stor0.field_8) = 1
                            Mask(248, 0, stor0.field_8) = 0
                            owner = msg.sender
                            emit OwnershipTransferred(0, msg.sender);
                            uint8(stor0.field_8) = 0
                            uint8(stor0.field_8) = 0
    else:
        mem[floor32(_34) + ceil32(return_data.size) + 224] = mem[floor32(_34) + ceil32(return_data.size) + -(_34 % 32) + 256 len _34 % 32]
        mem[floor32(_34) + ceil32(return_data.size) + 256] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
        require ext_code.size(arg3)
        staticcall arg3.0x95d89b41 with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        mem[floor32(_34) + ceil32(return_data.size) + 256 len return_data.size] = ext_call.return_data[0 len return_data.size]
        mem[64] = floor32(_34) + (2 * ceil32(return_data.size)) + 256
        require return_data.size >= 32
        _1521 = mem[floor32(_34) + ceil32(return_data.size) + 256]
        require mem[floor32(_34) + ceil32(return_data.size) + 256] <= 4294967296
        require mem[floor32(_34) + ceil32(return_data.size) + 256] + 32 <= return_data.size
        require return_data.size >= mem[floor32(_34) + ceil32(return_data.size) + mem[floor32(_34) + ceil32(return_data.size) + 256] + 256] + mem[floor32(_34) + ceil32(return_data.size) + 256] + 32 and mem[floor32(_34) + ceil32(return_data.size) + mem[floor32(_34) + ceil32(return_data.size) + 256] + 256] <= 4294967296
        mem[floor32(_34) + (2 * ceil32(return_data.size)) + 256] = mem[floor32(_34) + ceil32(return_data.size) + mem[floor32(_34) + ceil32(return_data.size) + 256] + 256]
        _1526 = mem[floor32(_34) + ceil32(return_data.size) + _1521 + 256]
        mem[floor32(_34) + (2 * ceil32(return_data.size)) + 288 len ceil32(mem[floor32(_34) + ceil32(return_data.size) + _1521 + 256])] = mem[floor32(_34) + ceil32(return_data.size) + _1521 + 288 len ceil32(mem[floor32(_34) + ceil32(return_data.size) + _1521 + 256])]
        if _1526 % 32:
            mem[floor32(_1526) + floor32(_34) + (2 * ceil32(return_data.size)) + 288] = mem[floor32(_1526) + floor32(_34) + (2 * ceil32(return_data.size)) + -(_1526 % 32) + 320 len _1526 % 32]
            mem[64] = floor32(_1526) + floor32(_34) + (2 * ceil32(return_data.size)) + 320
            _2998 = mem[ceil32(return_data.size) + 192]
            mem[floor32(_1526) + floor32(_34) + (2 * ceil32(return_data.size)) + 352 len floor32(mem[ceil32(return_data.size) + 192])] = mem[ceil32(return_data.size) + 224 len floor32(mem[ceil32(return_data.size) + 192])]
            mem[floor32(_1526) + floor32(_34) + (2 * ceil32(return_data.size)) + floor32(mem[ceil32(return_data.size) + 192]) + -(mem[ceil32(return_data.size) + 192] % 32) + 384 len mem[ceil32(return_data.size) + 192] % 32] = mem[ceil32(return_data.size) + floor32(mem[ceil32(return_data.size) + 192]) + -(mem[ceil32(return_data.size) + 192] % 32) + 256 len mem[ceil32(return_data.size) + 192] % 32]
            mem[_2998 + floor32(_1526) + floor32(_34) + (2 * ceil32(return_data.size)) + 352] = 0x2d00000000000000000000000000000000000000000000000000000000000000
            mem[_2998 + floor32(_1526) + floor32(_34) + (2 * ceil32(return_data.size)) + 353 len floor32(mem[floor32(_34) + (2 * ceil32(return_data.size)) + 256])] = mem[floor32(_34) + (2 * ceil32(return_data.size)) + 288 len floor32(mem[floor32(_34) + (2 * ceil32(return_data.size)) + 256])]
            mem[_2998 + floor32(_1526) + floor32(_34) + (2 * ceil32(return_data.size)) + floor32(mem[floor32(_34) + (2 * ceil32(return_data.size)) + 256]) + -(mem[floor32(_34) + (2 * ceil32(return_data.size)) + 256] % 32) + 385 len mem[floor32(_34) + (2 * ceil32(return_data.size)) + 256] % 32] = mem[floor32(_34) + (2 * ceil32(return_data.size)) + floor32(mem[floor32(_34) + (2 * ceil32(return_data.size)) + 256]) + -(mem[floor32(_34) + (2 * ceil32(return_data.size)) + 256] % 32) + 320 len mem[floor32(_34) + (2 * ceil32(return_data.size)) + 256] % 32]
            mem[64] = mem[floor32(_34) + (2 * ceil32(return_data.size)) + 256] + _2998 + floor32(_1526) + floor32(_34) + (2 * ceil32(return_data.size)) + 353
            mem[mem[floor32(_34) + (2 * ceil32(return_data.size)) + 256] + _2998 + floor32(_1526) + floor32(_34) + (2 * ceil32(return_data.size)) + 385] = 0x4c502d0000000000000000000000000000000000000000000000000000000000
            mem[mem[floor32(_34) + (2 * ceil32(return_data.size)) + 256] + _2998 + floor32(_1526) + floor32(_34) + (2 * ceil32(return_data.size)) + 388 len floor32(mem[floor32(_34) + (2 * ceil32(return_data.size)) + 256] + _2998 + 1)] = mem[floor32(_1526) + floor32(_34) + (2 * ceil32(return_data.size)) + 352 len floor32(mem[floor32(_34) + (2 * ceil32(return_data.size)) + 256] + _2998 + 1)]
            mem[mem[floor32(_34) + (2 * ceil32(return_data.size)) + 256] + _2998 + floor32(_1526) + floor32(_34) + (2 * ceil32(return_data.size)) + floor32(mem[floor32(_34) + (2 * ceil32(return_data.size)) + 256] + _2998 + 1) + 388] = 256^(-(mem[floor32(_34) + (2 * ceil32(return_data.size)) + 256] + _2998 + 1 % 32) + 32) - 1 and mem[mem[floor32(_34) + (2 * ceil32(return_data.size)) + 256] + _2998 + floor32(_1526) + floor32(_34) + (2 * ceil32(return_data.size)) + floor32(mem[floor32(_34) + (2 * ceil32(return_data.size)) + 256] + _2998 + 1) + 388] or mem[floor32(_1526) + floor32(_34) + (2 * ceil32(return_data.size)) + floor32(mem[floor32(_34) + (2 * ceil32(return_data.size)) + 256] + _2998 + 1) + 352] and !(256^(-(mem[floor32(_34) + (2 * ceil32(return_data.size)) + 256] + _2998 + 1 % 32) + 32) - 1)
            mem[64] = (2 * mem[floor32(_34) + (2 * ceil32(return_data.size)) + 256]) + (2 * _2998) + floor32(_1526) + floor32(_34) + (2 * ceil32(return_data.size)) + 389
            mem[(2 * mem[floor32(_34) + (2 * ceil32(return_data.size)) + 256]) + (2 * _2998) + floor32(_1526) + floor32(_34) + (2 * ceil32(return_data.size)) + 389] = 0x1624f6c600000000000000000000000000000000000000000000000000000000
            mem[(2 * mem[floor32(_34) + (2 * ceil32(return_data.size)) + 256]) + (2 * _2998) + floor32(_1526) + floor32(_34) + (2 * ceil32(return_data.size)) + 457] = uint8(stor153.field_160)
            mem[(2 * mem[floor32(_34) + (2 * ceil32(return_data.size)) + 256]) + (2 * _2998) + floor32(_1526) + floor32(_34) + (2 * ceil32(return_data.size)) + 393] = 96
            mem[(2 * mem[floor32(_34) + (2 * ceil32(return_data.size)) + 256]) + (2 * _2998) + floor32(_1526) + floor32(_34) + (2 * ceil32(return_data.size)) + 489] = mem[floor32(_34) + (2 * ceil32(return_data.size)) + 256] + _2998 + 4
            mem[(2 * mem[floor32(_34) + (2 * ceil32(return_data.size)) + 256]) + (2 * _2998) + floor32(_1526) + floor32(_34) + (2 * ceil32(return_data.size)) + 521 len floor32(mem[floor32(_34) + (2 * ceil32(return_data.size)) + 256] + _2998 + 35)] = 0, mem[floor32(_1526) + floor32(_34) + (2 * ceil32(return_data.size)) + 352 len floor32(mem[floor32(_34) + (2 * ceil32(return_data.size)) + 256] + _2998 + 1)], mem[mem[floor32(_34) + (2 * ceil32(return_data.size)) + 256] + _2998 + floor32(_1526) + floor32(_34) + (2 * ceil32(return_data.size)) + floor32(mem[floor32(_34) + (2 * ceil32(return_data.size)) + 256] + _2998 + 1) + 388 len floor32(mem[floor32(_34) + (2 * ceil32(return_data.size)) + 256] + _2998 + 35) + -floor32(mem[floor32(_34) + (2 * ceil32(return_data.size)) + 256] + _2998 + 1) - 3]
            mem[(2 * mem[floor32(_34) + (2 * ceil32(return_data.size)) + 256]) + (2 * _2998) + floor32(_1526) + floor32(_34) + (2 * ceil32(return_data.size)) + 425] = mem[floor32(_34) + (2 * ceil32(return_data.size)) + 256] + _2998 + 132
            mem[(4 * mem[floor32(_34) + (2 * ceil32(return_data.size)) + 256]) + (4 * _2998) + floor32(_1526) + floor32(_34) + (2 * ceil32(return_data.size)) + 525] = mem[floor32(_34) + (2 * ceil32(return_data.size)) + 256] + _2998 + 4
            mem[(4 * mem[floor32(_34) + (2 * ceil32(return_data.size)) + 256]) + (4 * _2998) + floor32(_1526) + floor32(_34) + (2 * ceil32(return_data.size)) + 557 len floor32(mem[floor32(_34) + (2 * ceil32(return_data.size)) + 256] + _2998 + 35)] = 0, mem[floor32(_1526) + floor32(_34) + (2 * ceil32(return_data.size)) + 352 len floor32(mem[floor32(_34) + (2 * ceil32(return_data.size)) + 256] + _2998 + 1)], mem[mem[floor32(_34) + (2 * ceil32(return_data.size)) + 256] + _2998 + floor32(_1526) + floor32(_34) + (2 * ceil32(return_data.size)) + floor32(mem[floor32(_34) + (2 * ceil32(return_data.size)) + 256] + _2998 + 1) + 388 len floor32(mem[floor32(_34) + (2 * ceil32(return_data.size)) + 256] + _2998 + 35) + -floor32(mem[floor32(_34) + (2 * ceil32(return_data.size)) + 256] + _2998 + 1) - 3]
            require ext_code.size(lpTokenAddress)
            call lpTokenAddress.0x1624f6c6 with:
                 gas gas_remaining wei
                args Array(len=mem[floor32(_34) + (2 * ceil32(return_data.size)) + 256] + _2998 + 4, data=Mask(8 * floor32(mem[floor32(_34) + (2 * ceil32(return_data.size)) + 256] + _2998 + 35), -(8 * floor32(mem[floor32(_34) + (2 * ceil32(return_data.size)) + 256] + _2998 + 35)) + 256, 0, mem[floor32(_1526) + floor32(_34) + (2 * ceil32(return_data.size)) + 352 len floor32(mem[floor32(_34) + (2 * ceil32(return_data.size)) + 256] + _2998 + 1)], mem[mem[floor32(_34) + (2 * ceil32(return_data.size)) + 256] + _2998 + floor32(_1526) + floor32(_34) + (2 * ceil32(return_data.size)) + floor32(mem[floor32(_34) + (2 * ceil32(return_data.size)) + 256] + _2998 + 1) + 388 len floor32(mem[floor32(_34) + (2 * ceil32(return_data.size)) + 256] + _2998 + 35) + -floor32(mem[floor32(_34) + (2 * ceil32(return_data.size)) + 256] + _2998 + 1) - 3]) << (8 * floor32(mem[floor32(_34) + (2 * ceil32(return_data.size)) + 256] + _2998 + 35)) - 256, mem[(2 * mem[floor32(_34) + (2 * ceil32(return_data.size)) + 256]) + (2 * _2998) + floor32(_1526) + floor32(_34) + (2 * ceil32(return_data.size)) + floor32(mem[floor32(_34) + (2 * ceil32(return_data.size)) + 256] + _2998 + 35) + 521 len (2 * mem[floor32(_34) + (2 * ceil32(return_data.size)) + 256]) + (2 * _2998) + -floor32(mem[floor32(_34) + (2 * ceil32(return_data.size)) + 256] + _2998 + 35) + 40]), mem[floor32(_34) + (2 * ceil32(return_data.size)) + 256] + _2998 + 132, uint8(stor153.field_0)
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            volatilityFactor = 4 * 10^13
            if uint8(stor0.field_8):
                owner = msg.sender
                emit OwnershipTransferred(0, msg.sender);
            else:
                if ext_code.size(this.address):
                    if uint8(stor0.field_0):
                        revert with 0, 32, 46, code.data[21888 len 46], Mask(144, 0, mem[floor32(_34) + (2 * ceil32(return_data.size)) + 256] + _2998 + 4)
                if uint8(stor0.field_8):
                    owner = msg.sender
                    emit OwnershipTransferred(0, msg.sender);
                else:
                    uint8(stor0.field_0) = 1
                    uint8(stor0.field_8) = 1
                    Mask(248, 0, stor0.field_8) = 0
                    if ext_code.size(this.address):
                        if uint8(stor0.field_0):
                            revert with 0, 32, 46, code.data[21888 len 46], Mask(144, 0, mem[floor32(_34) + (2 * ceil32(return_data.size)) + 256] + _2998 + 4)
                    if uint8(stor0.field_8):
                        owner = msg.sender
                        emit OwnershipTransferred(0, msg.sender);
                    else:
                        uint8(stor0.field_0) = 1
                        uint8(stor0.field_8) = 1
                        Mask(248, 0, stor0.field_8) = 0
                        uint8(stor0.field_8) = 0
                        if ext_code.size(this.address):
                            if uint8(stor0.field_0):
                                revert with 0, 32, 46, code.data[21888 len 46], Mask(144, 0, mem[floor32(_34) + (2 * ceil32(return_data.size)) + 256] + _2998 + 4)
                        if uint8(stor0.field_8):
                            owner = msg.sender
                            emit OwnershipTransferred(0, msg.sender);
                        else:
                            uint8(stor0.field_0) = 1
                            uint8(stor0.field_8) = 1
                            Mask(248, 0, stor0.field_8) = 0
                            owner = msg.sender
                            emit OwnershipTransferred(0, msg.sender);
                            uint8(stor0.field_8) = 0
                            uint8(stor0.field_8) = 0
        else:
            mem[64] = _1526 + floor32(_34) + (2 * ceil32(return_data.size)) + 288
            _2993 = mem[ceil32(return_data.size) + 192]
            mem[_1526 + floor32(_34) + (2 * ceil32(return_data.size)) + 320 len floor32(mem[ceil32(return_data.size) + 192])] = mem[ceil32(return_data.size) + 224 len floor32(mem[ceil32(return_data.size) + 192])]
            mem[_1526 + floor32(_34) + (2 * ceil32(return_data.size)) + floor32(mem[ceil32(return_data.size) + 192]) + -(mem[ceil32(return_data.size) + 192] % 32) + 352 len mem[ceil32(return_data.size) + 192] % 32] = mem[ceil32(return_data.size) + floor32(mem[ceil32(return_data.size) + 192]) + -(mem[ceil32(return_data.size) + 192] % 32) + 256 len mem[ceil32(return_data.size) + 192] % 32]
            mem[_2993 + _1526 + floor32(_34) + (2 * ceil32(return_data.size)) + 320] = 0x2d00000000000000000000000000000000000000000000000000000000000000
            mem[_2993 + _1526 + floor32(_34) + (2 * ceil32(return_data.size)) + 321 len floor32(mem[floor32(_34) + (2 * ceil32(return_data.size)) + 256])] = mem[floor32(_34) + (2 * ceil32(return_data.size)) + 288 len floor32(mem[floor32(_34) + (2 * ceil32(return_data.size)) + 256])]
            mem[_2993 + _1526 + floor32(_34) + (2 * ceil32(return_data.size)) + floor32(mem[floor32(_34) + (2 * ceil32(return_data.size)) + 256]) + -(mem[floor32(_34) + (2 * ceil32(return_data.size)) + 256] % 32) + 353 len mem[floor32(_34) + (2 * ceil32(return_data.size)) + 256] % 32] = mem[floor32(_34) + (2 * ceil32(return_data.size)) + floor32(mem[floor32(_34) + (2 * ceil32(return_data.size)) + 256]) + -(mem[floor32(_34) + (2 * ceil32(return_data.size)) + 256] % 32) + 320 len mem[floor32(_34) + (2 * ceil32(return_data.size)) + 256] % 32]
            mem[64] = mem[floor32(_34) + (2 * ceil32(return_data.size)) + 256] + _2993 + _1526 + floor32(_34) + (2 * ceil32(return_data.size)) + 321
            mem[mem[floor32(_34) + (2 * ceil32(return_data.size)) + 256] + _2993 + _1526 + floor32(_34) + (2 * ceil32(return_data.size)) + 353] = 0x4c502d0000000000000000000000000000000000000000000000000000000000
            mem[mem[floor32(_34) + (2 * ceil32(return_data.size)) + 256] + _2993 + _1526 + floor32(_34) + (2 * ceil32(return_data.size)) + 356 len floor32(mem[floor32(_34) + (2 * ceil32(return_data.size)) + 256] + _2993 + 1)] = mem[_1526 + floor32(_34) + (2 * ceil32(return_data.size)) + 320 len floor32(mem[floor32(_34) + (2 * ceil32(return_data.size)) + 256] + _2993 + 1)]
            mem[mem[floor32(_34) + (2 * ceil32(return_data.size)) + 256] + _2993 + _1526 + floor32(_34) + (2 * ceil32(return_data.size)) + floor32(mem[floor32(_34) + (2 * ceil32(return_data.size)) + 256] + _2993 + 1) + 356] = 256^(-(mem[floor32(_34) + (2 * ceil32(return_data.size)) + 256] + _2993 + 1 % 32) + 32) - 1 and mem[mem[floor32(_34) + (2 * ceil32(return_data.size)) + 256] + _2993 + _1526 + floor32(_34) + (2 * ceil32(return_data.size)) + floor32(mem[floor32(_34) + (2 * ceil32(return_data.size)) + 256] + _2993 + 1) + 356] or mem[_1526 + floor32(_34) + (2 * ceil32(return_data.size)) + floor32(mem[floor32(_34) + (2 * ceil32(return_data.size)) + 256] + _2993 + 1) + 320] and !(256^(-(mem[floor32(_34) + (2 * ceil32(return_data.size)) + 256] + _2993 + 1 % 32) + 32) - 1)
            mem[64] = (2 * mem[floor32(_34) + (2 * ceil32(return_data.size)) + 256]) + (2 * _2993) + _1526 + floor32(_34) + (2 * ceil32(return_data.size)) + 357
            mem[(2 * mem[floor32(_34) + (2 * ceil32(return_data.size)) + 256]) + (2 * _2993) + _1526 + floor32(_34) + (2 * ceil32(return_data.size)) + 357] = 0x1624f6c600000000000000000000000000000000000000000000000000000000
            mem[(2 * mem[floor32(_34) + (2 * ceil32(return_data.size)) + 256]) + (2 * _2993) + _1526 + floor32(_34) + (2 * ceil32(return_data.size)) + 425] = uint8(stor153.field_160)
            mem[(2 * mem[floor32(_34) + (2 * ceil32(return_data.size)) + 256]) + (2 * _2993) + _1526 + floor32(_34) + (2 * ceil32(return_data.size)) + 361] = 96
            mem[(2 * mem[floor32(_34) + (2 * ceil32(return_data.size)) + 256]) + (2 * _2993) + _1526 + floor32(_34) + (2 * ceil32(return_data.size)) + 457] = mem[floor32(_34) + (2 * ceil32(return_data.size)) + 256] + _2993 + 4
            mem[(2 * mem[floor32(_34) + (2 * ceil32(return_data.size)) + 256]) + (2 * _2993) + _1526 + floor32(_34) + (2 * ceil32(return_data.size)) + 489 len floor32(mem[floor32(_34) + (2 * ceil32(return_data.size)) + 256] + _2993 + 35)] = 0, mem[_1526 + floor32(_34) + (2 * ceil32(return_data.size)) + 320 len floor32(mem[floor32(_34) + (2 * ceil32(return_data.size)) + 256] + _2993 + 1)], mem[mem[floor32(_34) + (2 * ceil32(return_data.size)) + 256] + _2993 + _1526 + floor32(_34) + (2 * ceil32(return_data.size)) + floor32(mem[floor32(_34) + (2 * ceil32(return_data.size)) + 256] + _2993 + 1) + 356 len floor32(mem[floor32(_34) + (2 * ceil32(return_data.size)) + 256] + _2993 + 35) + -floor32(mem[floor32(_34) + (2 * ceil32(return_data.size)) + 256] + _2993 + 1) - 3]
            if not mem[floor32(_34) + (2 * ceil32(return_data.size)) + 256] + _2993 + 4 % 32:
                mem[(2 * mem[floor32(_34) + (2 * ceil32(return_data.size)) + 256]) + (2 * _2993) + _1526 + floor32(_34) + (2 * ceil32(return_data.size)) + 393] = mem[floor32(_34) + (2 * ceil32(return_data.size)) + 256] + _2993 + 132
                mem[(4 * mem[floor32(_34) + (2 * ceil32(return_data.size)) + 256]) + (4 * _2993) + _1526 + floor32(_34) + (2 * ceil32(return_data.size)) + 493] = mem[floor32(_34) + (2 * ceil32(return_data.size)) + 256] + _2993 + 4
                mem[(4 * mem[floor32(_34) + (2 * ceil32(return_data.size)) + 256]) + (4 * _2993) + _1526 + floor32(_34) + (2 * ceil32(return_data.size)) + 525 len floor32(mem[floor32(_34) + (2 * ceil32(return_data.size)) + 256] + _2993 + 35)] = 0, mem[_1526 + floor32(_34) + (2 * ceil32(return_data.size)) + 320 len floor32(mem[floor32(_34) + (2 * ceil32(return_data.size)) + 256] + _2993 + 1)], mem[mem[floor32(_34) + (2 * ceil32(return_data.size)) + 256] + _2993 + _1526 + floor32(_34) + (2 * ceil32(return_data.size)) + floor32(mem[floor32(_34) + (2 * ceil32(return_data.size)) + 256] + _2993 + 1) + 356 len floor32(mem[floor32(_34) + (2 * ceil32(return_data.size)) + 256] + _2993 + 35) + -floor32(mem[floor32(_34) + (2 * ceil32(return_data.size)) + 256] + _2993 + 1) - 3]
                if not mem[floor32(_34) + (2 * ceil32(return_data.size)) + 256] + _2993 + 4 % 32:
                    require ext_code.size(lpTokenAddress)
                    call lpTokenAddress.0x1624f6c6 with:
                         gas gas_remaining wei
                        args 96, mem[floor32(_34) + (2 * ceil32(return_data.size)) + 256] + _2993 + 132, uint8(stor153.field_0), mem[floor32(_34) + (2 * ceil32(return_data.size)) + 256] + _2993 + 4, 0, mem[_1526 + floor32(_34) + (2 * ceil32(return_data.size)) + 320 len floor32(mem[floor32(_34) + (2 * ceil32(return_data.size)) + 256] + _2993 + 1)], mem[mem[floor32(_34) + (2 * ceil32(return_data.size)) + 256] + _2993 + _1526 + floor32(_34) + (2 * ceil32(return_data.size)) + floor32(mem[floor32(_34) + (2 * ceil32(return_data.size)) + 256] + _2993 + 1) + 356 len floor32(mem[floor32(_34) + (2 * ceil32(return_data.size)) + 256] + _2993 + 35) + -floor32(mem[floor32(_34) + (2 * ceil32(return_data.size)) + 256] + _2993 + 1) - 3], mem[(2 * mem[floor32(_34) + (2 * ceil32(return_data.size)) + 256]) + (2 * _2993) + _1526 + floor32(_34) + (2 * ceil32(return_data.size)) + floor32(mem[floor32(_34) + (2 * ceil32(return_data.size)) + 256] + _2993 + 35) + 489 len (2 * mem[floor32(_34) + (2 * ceil32(return_data.size)) + 256] + _2993 + 4) + -floor32(mem[floor32(_34) + (2 * ceil32(return_data.size)) + 256] + _2993 + 35) + 32]
                else:
                    mem[floor32(mem[floor32(_34) + (2 * ceil32(return_data.size)) + 256] + _2993 + 4) + (4 * mem[floor32(_34) + (2 * ceil32(return_data.size)) + 256]) + (4 * _2993) + _1526 + floor32(_34) + (2 * ceil32(return_data.size)) + 525] = mem[(2 * floor32(mem[floor32(_34) + (2 * ceil32(return_data.size)) + 256] + _2993 + 4)) + (2 * mem[floor32(_34) + (2 * ceil32(return_data.size)) + 256]) + (2 * _2993) + _1526 + floor32(_34) + (2 * ceil32(return_data.size)) + 553 len mem[floor32(_34) + (2 * ceil32(return_data.size)) + 256] + _2993 + 4 % 32]
                    require ext_code.size(lpTokenAddress)
                    call lpTokenAddress.0x1624f6c6 with:
                         gas gas_remaining wei
                        args 96, mem[floor32(_34) + (2 * ceil32(return_data.size)) + 256] + _2993 + 132, uint8(stor153.field_0), mem[(2 * mem[floor32(_34) + (2 * ceil32(return_data.size)) + 256]) + (2 * _2993) + _1526 + floor32(_34) + (2 * ceil32(return_data.size)) + 457 len floor32(mem[floor32(_34) + (2 * ceil32(return_data.size)) + 256] + _2993 + 4) + mem[floor32(_34) + (2 * ceil32(return_data.size)) + 256] + _2993 + 100]
            else:
                mem[floor32(mem[floor32(_34) + (2 * ceil32(return_data.size)) + 256] + _2993 + 4) + (2 * mem[floor32(_34) + (2 * ceil32(return_data.size)) + 256]) + (2 * _2993) + _1526 + floor32(_34) + (2 * ceil32(return_data.size)) + 489] = mem[mem[floor32(_34) + (2 * ceil32(return_data.size)) + 256] + _2993 + _1526 + floor32(_34) + (2 * ceil32(return_data.size)) + floor32(mem[floor32(_34) + (2 * ceil32(return_data.size)) + 256] + _2993 + 4) + -(mem[floor32(_34) + (2 * ceil32(return_data.size)) + 256] + _2993 + 4 % 32) + 385 len floor32(mem[floor32(_34) + (2 * ceil32(return_data.size)) + 256] + _2993 + 35) + -floor32(mem[floor32(_34) + (2 * ceil32(return_data.size)) + 256] + _2993 + 4) + (mem[floor32(_34) + (2 * ceil32(return_data.size)) + 256] + _2993 + 4 % 32) - 32], mem[(2 * mem[floor32(_34) + (2 * ceil32(return_data.size)) + 256]) + (2 * _2993) + _1526 + floor32(_34) + (2 * ceil32(return_data.size)) + floor32(mem[floor32(_34) + (2 * ceil32(return_data.size)) + 256] + _2993 + 35) + 489 len floor32(mem[floor32(_34) + (2 * ceil32(return_data.size)) + 256] + _2993 + 4) + -floor32(mem[floor32(_34) + (2 * ceil32(return_data.size)) + 256] + _2993 + 35) + 32]
                mem[(2 * mem[floor32(_34) + (2 * ceil32(return_data.size)) + 256]) + (2 * _2993) + _1526 + floor32(_34) + (2 * ceil32(return_data.size)) + 393] = floor32(mem[floor32(_34) + (2 * ceil32(return_data.size)) + 256] + _2993 + 4) + 160
                mem[floor32(mem[floor32(_34) + (2 * ceil32(return_data.size)) + 256] + _2993 + 4) + (2 * mem[floor32(_34) + (2 * ceil32(return_data.size)) + 256]) + (2 * _2993) + _1526 + floor32(_34) + (2 * ceil32(return_data.size)) + 521] = mem[floor32(_34) + (2 * ceil32(return_data.size)) + 256] + _2993 + 4
                mem[floor32(mem[floor32(_34) + (2 * ceil32(return_data.size)) + 256] + _2993 + 4) + (2 * mem[floor32(_34) + (2 * ceil32(return_data.size)) + 256]) + (2 * _2993) + _1526 + floor32(_34) + (2 * ceil32(return_data.size)) + 553 len floor32(mem[floor32(_34) + (2 * ceil32(return_data.size)) + 256] + _2993 + 35)] = 0, mem[_1526 + floor32(_34) + (2 * ceil32(return_data.size)) + 320 len floor32(mem[floor32(_34) + (2 * ceil32(return_data.size)) + 256] + _2993 + 1)], mem[mem[floor32(_34) + (2 * ceil32(return_data.size)) + 256] + _2993 + _1526 + floor32(_34) + (2 * ceil32(return_data.size)) + floor32(mem[floor32(_34) + (2 * ceil32(return_data.size)) + 256] + _2993 + 1) + 356 len floor32(mem[floor32(_34) + (2 * ceil32(return_data.size)) + 256] + _2993 + 35) + -floor32(mem[floor32(_34) + (2 * ceil32(return_data.size)) + 256] + _2993 + 1) - 3]
                if not mem[floor32(_34) + (2 * ceil32(return_data.size)) + 256] + _2993 + 4 % 32:
                    require ext_code.size(lpTokenAddress)
                    call lpTokenAddress.0x1624f6c6 with:
                         gas gas_remaining wei
                        args 96, floor32(mem[floor32(_34) + (2 * ceil32(return_data.size)) + 256] + _2993 + 4) + 160, uint8(stor153.field_0), mem[(2 * mem[floor32(_34) + (2 * ceil32(return_data.size)) + 256]) + (2 * _2993) + _1526 + floor32(_34) + (2 * ceil32(return_data.size)) + 457 len mem[floor32(_34) + (2 * ceil32(return_data.size)) + 256] + _2993 + floor32(mem[floor32(_34) + (2 * ceil32(return_data.size)) + 256] + _2993 + 4) + 100]
                else:
                    mem[(2 * floor32(mem[floor32(_34) + (2 * ceil32(return_data.size)) + 256] + _2993 + 4)) + (2 * mem[floor32(_34) + (2 * ceil32(return_data.size)) + 256]) + (2 * _2993) + _1526 + floor32(_34) + (2 * ceil32(return_data.size)) + 553] = mem[(2 * floor32(mem[floor32(_34) + (2 * ceil32(return_data.size)) + 256] + _2993 + 4)) + (2 * mem[floor32(_34) + (2 * ceil32(return_data.size)) + 256]) + (2 * _2993) + _1526 + floor32(_34) + (2 * ceil32(return_data.size)) + -(mem[floor32(_34) + (2 * ceil32(return_data.size)) + 256] + _2993 + 4 % 32) + 585 len mem[floor32(_34) + (2 * ceil32(return_data.size)) + 256] + _2993 + 4 % 32]
                    require ext_code.size(lpTokenAddress)
                    call lpTokenAddress.0x1624f6c6 with:
                         gas gas_remaining wei
                        args 96, floor32(mem[floor32(_34) + (2 * ceil32(return_data.size)) + 256] + _2993 + 4) + 160, uint8(stor153.field_0), mem[floor32(_34) + (2 * ceil32(return_data.size)) + 256] + _2993 + 4, 0, mem[_1526 + floor32(_34) + (2 * ceil32(return_data.size)) + 320 len floor32(mem[floor32(_34) + (2 * ceil32(return_data.size)) + 256] + _2993 + 1)], mem[mem[floor32(_34) + (2 * ceil32(return_data.size)) + 256] + _2993 + _1526 + floor32(_34) + (2 * ceil32(return_data.size)) + floor32(mem[floor32(_34) + (2 * ceil32(return_data.size)) + 256] + _2993 + 1) + 356 len floor32(mem[floor32(_34) + (2 * ceil32(return_data.size)) + 256] + _2993 + 35) + -floor32(mem[floor32(_34) + (2 * ceil32(return_data.size)) + 256] + _2993 + 1) - 3], mem[(2 * mem[floor32(_34) + (2 * ceil32(return_data.size)) + 256]) + (2 * _2993) + _1526 + floor32(_34) + (2 * ceil32(return_data.size)) + floor32(mem[floor32(_34) + (2 * ceil32(return_data.size)) + 256] + _2993 + 35) + 489 len (2 * floor32(mem[floor32(_34) + (2 * ceil32(return_data.size)) + 256] + _2993 + 4)) + -floor32(mem[floor32(_34) + (2 * ceil32(return_data.size)) + 256] + _2993 + 35) + 96]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            volatilityFactor = 4 * 10^13
            if uint8(stor0.field_8):
                owner = msg.sender
                emit OwnershipTransferred(0, msg.sender);
            else:
                if ext_code.size(this.address):
                    if uint8(stor0.field_0):
                        revert with 0, 32, 46, code.data[21888 len 46], Mask(144, 0, mem[floor32(_34) + (2 * ceil32(return_data.size)) + 256] + _2993 + 4)
                if uint8(stor0.field_8):
                    owner = msg.sender
                    emit OwnershipTransferred(0, msg.sender);
                else:
                    uint8(stor0.field_0) = 1
                    uint8(stor0.field_8) = 1
                    Mask(248, 0, stor0.field_8) = 0
                    if ext_code.size(this.address):
                        if uint8(stor0.field_0):
                            revert with 0, 32, 46, code.data[21888 len 46], Mask(144, 0, mem[floor32(_34) + (2 * ceil32(return_data.size)) + 256] + _2993 + 4)
                    if uint8(stor0.field_8):
                        owner = msg.sender
                        emit OwnershipTransferred(0, msg.sender);
                    else:
                        uint8(stor0.field_0) = 1
                        uint8(stor0.field_8) = 1
                        Mask(248, 0, stor0.field_8) = 0
                        uint8(stor0.field_8) = 0
                        if ext_code.size(this.address):
                            if uint8(stor0.field_0):
                                revert with 0, 32, 46, code.data[21888 len 46], Mask(144, 0, mem[floor32(_34) + (2 * ceil32(return_data.size)) + 256] + _2993 + 4)
                        if uint8(stor0.field_8):
                            owner = msg.sender
                            emit OwnershipTransferred(0, msg.sender);
                        else:
                            uint8(stor0.field_0) = 1
                            uint8(stor0.field_8) = 1
                            Mask(248, 0, stor0.field_8) = 0
                            owner = msg.sender
                            emit OwnershipTransferred(0, msg.sender);
                            uint8(stor0.field_8) = 0
                            uint8(stor0.field_8) = 0
    emit 0xee8c1456: lpTokenAddress, stor155
}

function getPriceForMarket(address arg1) payable {
    require calldata.size - 4 >= 32
    require ext_code.size(stor155)
    staticcall stor155.latestRoundData() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 160
    if ext_call.return_data[32] < 0:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    32,
                    40,
                    code.data[21934 len 40],
                    ext_call.return_data[108 len 24]
    require ext_code.size(stor155)
    staticcall stor155.0x313ce567 with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if 10^18 * 10^uint8(stor153.field_168) / 10^18 != 10^uint8(stor153.field_168):
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    32,
                    33,
                    code.data[21823 len 33],
                    ext_call.return_data[101 len 31]
    if not stor157:
        if not 10^18 * 10^uint8(stor153.field_168):
            if not 10^uint8(stor153.field_160):
                revert with 0, 'SafeMath: division by zero'
            if not 10^uint8(ext_call.return_data[0]):
                revert with 0, 'SafeMath: division by zero'
            require ext_code.size(arg1)
            staticcall arg1.0x8f620487 with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if block.timestamp > ext_call.return_data[0]:
                revert with 0, 'SafeMath: subtraction overflow'
            require ext_code.size(arg1)
            staticcall arg1.priceRatio() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) <= ext_call.return_data[0]:
                if ext_call.return_data[0] - block.timestamp <= 3:
                    if not ext_call.return_data[0] - block.timestamp:
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        if 0 / ext_call.return_data[0] < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        return (0 / ext_call.return_data[0])
                    if volatilityFactor != volatilityFactor:
                        revert with 0, 32, 33, code.data[21823 len 33], mem[389 len 31]
                    if not volatilityFactor:
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        if 0 / ext_call.return_data[0] < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        return (0 / ext_call.return_data[0])
                    if 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / volatilityFactor != 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]):
                        revert with 0, 32, 33, code.data[21823 len 33], mem[389 len 31]
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    if 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0] < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    return (0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0])
                s = (ext_call.return_data[0] - block.timestamp / 2) + 1
                t = ext_call.return_data[0] - block.timestamp
                while s < t:
                    require s
                    s = (ext_call.return_data[0] - block.timestamp / s) + s / 2
                    t = s
                    continue 
                if not t:
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    if 0 / ext_call.return_data[0] < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    return (0 / ext_call.return_data[0])
                if volatilityFactor * t / t != volatilityFactor:
                    revert with 0, 32, 33, code.data[21823 len 33], mem[389 len 31]
                if not volatilityFactor * t:
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    if 0 / ext_call.return_data[0] < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    return (0 / ext_call.return_data[0])
                if 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / volatilityFactor * t != 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]):
                    revert with 0, 32, 33, code.data[21823 len 33], mem[389 len 31]
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                if 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0] < 0:
                    revert with 0, 'SafeMath: addition overflow'
                return (0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0])
            if ext_call.return_data[0] > 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]):
                revert with 0, 'SafeMath: subtraction overflow'
            if not (0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - ext_call.return_data[0]:
                if not 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]):
                    revert with 0, 'SafeMath: division by zero'
                if ext_call.return_data[0] - block.timestamp <= 3:
                    if not ext_call.return_data[0] - block.timestamp:
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        if (0 / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) < 0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]):
                            revert with 0, 'SafeMath: addition overflow'
                        return ((0 / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])))
                    if volatilityFactor != volatilityFactor:
                        revert with 0, 32, 33, code.data[21823 len 33], mem[517 len 31]
                    if not volatilityFactor:
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        if (0 / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) < 0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]):
                            revert with 0, 'SafeMath: addition overflow'
                        return ((0 / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])))
                    if 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / volatilityFactor != 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]):
                        revert with 0, 32, 33, code.data[21823 len 33], mem[517 len 31]
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    if (0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) < 0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]):
                        revert with 0, 'SafeMath: addition overflow'
                    return ((0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])))
                s = (ext_call.return_data[0] - block.timestamp / 2) + 1
                t = ext_call.return_data[0] - block.timestamp
                while s < t:
                    require s
                    s = (ext_call.return_data[0] - block.timestamp / s) + s / 2
                    t = s
                    continue 
                if not t:
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    if (0 / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) < 0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]):
                        revert with 0, 'SafeMath: addition overflow'
                    return ((0 / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])))
                if volatilityFactor * t / t != volatilityFactor:
                    revert with 0, 32, 33, code.data[21823 len 33], mem[517 len 31]
                if not volatilityFactor * t:
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    if (0 / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) < 0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]):
                        revert with 0, 'SafeMath: addition overflow'
                    return ((0 / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])))
                if 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / volatilityFactor * t != 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]):
                    revert with 0, 32, 33, code.data[21823 len 33], mem[517 len 31]
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                if (0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) < 0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]):
                    revert with 0, 'SafeMath: addition overflow'
                return ((0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])))
            if (10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / (0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - ext_call.return_data[0] != 10^18:
                revert with 0, 32, 33, code.data[21823 len 33], mem[453 len 31]
            if not 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]):
                revert with 0, 'SafeMath: division by zero'
            if ext_call.return_data[0] - block.timestamp <= 3:
                if not ext_call.return_data[0] - block.timestamp:
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    if (0 / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) < (10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]):
                        revert with 0, 'SafeMath: addition overflow'
                    return ((0 / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])))
                if volatilityFactor != volatilityFactor:
                    revert with 0, 32, 33, code.data[21823 len 33], mem[517 len 31]
                if not volatilityFactor:
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    if (0 / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) < (10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]):
                        revert with 0, 'SafeMath: addition overflow'
                    return ((0 / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])))
                if 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / volatilityFactor != 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]):
                    revert with 0, 32, 33, code.data[21823 len 33], mem[517 len 31]
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                if (0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) < (10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]):
                    revert with 0, 'SafeMath: addition overflow'
                return ((0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])))
            s = (ext_call.return_data[0] - block.timestamp / 2) + 1
            t = ext_call.return_data[0] - block.timestamp
            while s < t:
                require s
                s = (ext_call.return_data[0] - block.timestamp / s) + s / 2
                t = s
                continue 
            if not t:
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                if (0 / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) < (10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]):
                    revert with 0, 'SafeMath: addition overflow'
                return ((0 / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])))
            if volatilityFactor * t / t != volatilityFactor:
                revert with 0, 32, 33, code.data[21823 len 33], mem[517 len 31]
            if not volatilityFactor * t:
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                if (0 / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) < (10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]):
                    revert with 0, 'SafeMath: addition overflow'
                return ((0 / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])))
            if 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / volatilityFactor * t != 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]):
                revert with 0, 32, 33, code.data[21823 len 33], mem[517 len 31]
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            if (0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) < (10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]):
                revert with 0, 'SafeMath: addition overflow'
            return ((0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])))
        if 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^18 * 10^uint8(stor153.field_168) != ext_call.return_data[32]:
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                        32,
                        33,
                        code.data[21823 len 33],
                        ext_call.return_data[101 len 31]
        if not 10^uint8(stor153.field_160):
            revert with 0, 'SafeMath: division by zero'
        if not 10^uint8(ext_call.return_data[0]):
            revert with 0, 'SafeMath: division by zero'
        require ext_code.size(arg1)
        staticcall arg1.0x8f620487 with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if block.timestamp > ext_call.return_data[0]:
            revert with 0, 'SafeMath: subtraction overflow'
        require ext_code.size(arg1)
        staticcall arg1.priceRatio() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) <= ext_call.return_data[0]:
            if ext_call.return_data[0] - block.timestamp <= 3:
                if not ext_call.return_data[0] - block.timestamp:
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    if 0 / ext_call.return_data[0] < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    return (0 / ext_call.return_data[0])
                if volatilityFactor != volatilityFactor:
                    revert with 0, 32, 33, code.data[21823 len 33], mem[389 len 31]
                if not volatilityFactor:
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    if 0 / ext_call.return_data[0] < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    return (0 / ext_call.return_data[0])
                if 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / volatilityFactor != 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]):
                    revert with 0, 32, 33, code.data[21823 len 33], mem[389 len 31]
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                if 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0] < 0:
                    revert with 0, 'SafeMath: addition overflow'
                return (10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0])
            s = (ext_call.return_data[0] - block.timestamp / 2) + 1
            t = ext_call.return_data[0] - block.timestamp
            while s < t:
                require s
                s = (ext_call.return_data[0] - block.timestamp / s) + s / 2
                t = s
                continue 
            if not t:
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                if 0 / ext_call.return_data[0] < 0:
                    revert with 0, 'SafeMath: addition overflow'
                return (0 / ext_call.return_data[0])
            if volatilityFactor * t / t != volatilityFactor:
                revert with 0, 32, 33, code.data[21823 len 33], mem[389 len 31]
            if not volatilityFactor * t:
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                if 0 / ext_call.return_data[0] < 0:
                    revert with 0, 'SafeMath: addition overflow'
                return (0 / ext_call.return_data[0])
            if 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / volatilityFactor * t != 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]):
                revert with 0, 32, 33, code.data[21823 len 33], mem[389 len 31]
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            if 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0] < 0:
                revert with 0, 'SafeMath: addition overflow'
            return (10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0])
        if ext_call.return_data[0] > 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]):
            revert with 0, 'SafeMath: subtraction overflow'
        if not (10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - ext_call.return_data[0]:
            if not 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]):
                revert with 0, 'SafeMath: division by zero'
            if ext_call.return_data[0] - block.timestamp <= 3:
                if not ext_call.return_data[0] - block.timestamp:
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    if (0 / ext_call.return_data[0]) + (0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) < 0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]):
                        revert with 0, 'SafeMath: addition overflow'
                    return ((0 / ext_call.return_data[0]) + (0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])))
                if volatilityFactor != volatilityFactor:
                    revert with 0, 32, 33, code.data[21823 len 33], mem[517 len 31]
                if not volatilityFactor:
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    if (0 / ext_call.return_data[0]) + (0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) < 0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]):
                        revert with 0, 'SafeMath: addition overflow'
                    return ((0 / ext_call.return_data[0]) + (0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])))
                if 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / volatilityFactor != 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]):
                    revert with 0, 32, 33, code.data[21823 len 33], mem[517 len 31]
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                if (10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + (0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) < 0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]):
                    revert with 0, 'SafeMath: addition overflow'
                return ((10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + (0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])))
            s = (ext_call.return_data[0] - block.timestamp / 2) + 1
            t = ext_call.return_data[0] - block.timestamp
            while s < t:
                require s
                s = (ext_call.return_data[0] - block.timestamp / s) + s / 2
                t = s
                continue 
            if not t:
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                if (0 / ext_call.return_data[0]) + (0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) < 0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]):
                    revert with 0, 'SafeMath: addition overflow'
                return ((0 / ext_call.return_data[0]) + (0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])))
            if volatilityFactor * t / t != volatilityFactor:
                revert with 0, 32, 33, code.data[21823 len 33], mem[517 len 31]
            if not volatilityFactor * t:
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                if (0 / ext_call.return_data[0]) + (0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) < 0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]):
                    revert with 0, 'SafeMath: addition overflow'
                return ((0 / ext_call.return_data[0]) + (0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])))
            if 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / volatilityFactor * t != 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]):
                revert with 0, 32, 33, code.data[21823 len 33], mem[517 len 31]
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            if (10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + (0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) < 0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]):
                revert with 0, 'SafeMath: addition overflow'
            return ((10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + (0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])))
        if (10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / (10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - ext_call.return_data[0] != 10^18:
            revert with 0, 32, 33, code.data[21823 len 33], mem[453 len 31]
        if not 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]):
            revert with 0, 'SafeMath: division by zero'
        if ext_call.return_data[0] - block.timestamp <= 3:
            if not ext_call.return_data[0] - block.timestamp:
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                if (0 / ext_call.return_data[0]) + ((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) < (10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]):
                    revert with 0, 'SafeMath: addition overflow'
                return ((0 / ext_call.return_data[0]) + ((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])))
            if volatilityFactor != volatilityFactor:
                revert with 0, 32, 33, code.data[21823 len 33], mem[517 len 31]
            if not volatilityFactor:
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                if (0 / ext_call.return_data[0]) + ((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) < (10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]):
                    revert with 0, 'SafeMath: addition overflow'
                return ((0 / ext_call.return_data[0]) + ((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])))
            if 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / volatilityFactor != 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]):
                revert with 0, 32, 33, code.data[21823 len 33], mem[517 len 31]
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            if (10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + ((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) < (10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]):
                revert with 0, 'SafeMath: addition overflow'
            return ((10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + ((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])))
        s = (ext_call.return_data[0] - block.timestamp / 2) + 1
        t = ext_call.return_data[0] - block.timestamp
        while s < t:
            require s
            s = (ext_call.return_data[0] - block.timestamp / s) + s / 2
            t = s
            continue 
        if not t:
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            if (0 / ext_call.return_data[0]) + ((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) < (10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]):
                revert with 0, 'SafeMath: addition overflow'
            return ((0 / ext_call.return_data[0]) + ((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])))
        if volatilityFactor * t / t != volatilityFactor:
            revert with 0, 32, 33, code.data[21823 len 33], mem[517 len 31]
        if not volatilityFactor * t:
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            if (0 / ext_call.return_data[0]) + ((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) < (10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]):
                revert with 0, 'SafeMath: addition overflow'
            return ((0 / ext_call.return_data[0]) + ((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])))
        if 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / volatilityFactor * t != 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]):
            revert with 0, 32, 33, code.data[21823 len 33], mem[517 len 31]
        if not ext_call.return_data[0]:
            revert with 0, 'SafeMath: division by zero'
        if (10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + ((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) < (10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]):
            revert with 0, 'SafeMath: addition overflow'
        return ((10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + ((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])))
    if not 10^18 * 10^uint8(stor153.field_168):
        if not 10^uint8(stor153.field_160):
            revert with 0, 'SafeMath: division by zero'
        if not ext_call.return_data[32]:
            revert with 0, 'SafeMath: division by zero'
        require ext_code.size(arg1)
        staticcall arg1.0x8f620487 with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if block.timestamp > ext_call.return_data[0]:
            revert with 0, 'SafeMath: subtraction overflow'
        require ext_code.size(arg1)
        staticcall arg1.priceRatio() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] <= ext_call.return_data[0]:
            if ext_call.return_data[0] - block.timestamp <= 3:
                if not ext_call.return_data[0] - block.timestamp:
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    if 0 / ext_call.return_data[0] < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    return (0 / ext_call.return_data[0])
                if volatilityFactor != volatilityFactor:
                    revert with 0, 32, 33, code.data[21823 len 33], mem[389 len 31]
                if not volatilityFactor:
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    if 0 / ext_call.return_data[0] < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    return (0 / ext_call.return_data[0])
                if 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / volatilityFactor != 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]:
                    revert with 0, 32, 33, code.data[21823 len 33], mem[389 len 31]
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                if 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0] < 0:
                    revert with 0, 'SafeMath: addition overflow'
                return (0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0])
            s = (ext_call.return_data[0] - block.timestamp / 2) + 1
            t = ext_call.return_data[0] - block.timestamp
            while s < t:
                require s
                s = (ext_call.return_data[0] - block.timestamp / s) + s / 2
                t = s
                continue 
            if not t:
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                if 0 / ext_call.return_data[0] < 0:
                    revert with 0, 'SafeMath: addition overflow'
                return (0 / ext_call.return_data[0])
            if volatilityFactor * t / t != volatilityFactor:
                revert with 0, 32, 33, code.data[21823 len 33], mem[389 len 31]
            if not volatilityFactor * t:
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                if 0 / ext_call.return_data[0] < 0:
                    revert with 0, 'SafeMath: addition overflow'
                return (0 / ext_call.return_data[0])
            if 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / volatilityFactor * t != 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]:
                revert with 0, 32, 33, code.data[21823 len 33], mem[389 len 31]
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            if 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0] < 0:
                revert with 0, 'SafeMath: addition overflow'
            return (0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0])
        if ext_call.return_data[0] > 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]:
            revert with 0, 'SafeMath: subtraction overflow'
        if not (0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - ext_call.return_data[0]:
            if not 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]:
                revert with 0, 'SafeMath: division by zero'
            if ext_call.return_data[0] - block.timestamp <= 3:
                if not ext_call.return_data[0] - block.timestamp:
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    if (0 / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) < 0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]:
                        revert with 0, 'SafeMath: addition overflow'
                    return ((0 / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]))
                if volatilityFactor != volatilityFactor:
                    revert with 0, 32, 33, code.data[21823 len 33], mem[517 len 31]
                if not volatilityFactor:
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    if (0 / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) < 0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]:
                        revert with 0, 'SafeMath: addition overflow'
                    return ((0 / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]))
                if 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / volatilityFactor != 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]:
                    revert with 0, 32, 33, code.data[21823 len 33], mem[517 len 31]
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                if (0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) < 0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]:
                    revert with 0, 'SafeMath: addition overflow'
                return ((0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]))
            s = (ext_call.return_data[0] - block.timestamp / 2) + 1
            t = ext_call.return_data[0] - block.timestamp
            while s < t:
                require s
                s = (ext_call.return_data[0] - block.timestamp / s) + s / 2
                t = s
                continue 
            if not t:
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                if (0 / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) < 0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]:
                    revert with 0, 'SafeMath: addition overflow'
                return ((0 / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]))
            if volatilityFactor * t / t != volatilityFactor:
                revert with 0, 32, 33, code.data[21823 len 33], mem[517 len 31]
            if not volatilityFactor * t:
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                if (0 / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) < 0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]:
                    revert with 0, 'SafeMath: addition overflow'
                return ((0 / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]))
            if 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / volatilityFactor * t != 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]:
                revert with 0, 32, 33, code.data[21823 len 33], mem[517 len 31]
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            if (0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) < 0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]:
                revert with 0, 'SafeMath: addition overflow'
            return ((0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]))
        if (10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / (0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - ext_call.return_data[0] != 10^18:
            revert with 0, 32, 33, code.data[21823 len 33], mem[453 len 31]
        if not 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]:
            revert with 0, 'SafeMath: division by zero'
        if ext_call.return_data[0] - block.timestamp <= 3:
            if not ext_call.return_data[0] - block.timestamp:
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                if (0 / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) < (10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]:
                    revert with 0, 'SafeMath: addition overflow'
                return ((0 / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]))
            if volatilityFactor != volatilityFactor:
                revert with 0, 32, 33, code.data[21823 len 33], mem[517 len 31]
            if not volatilityFactor:
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                if (0 / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) < (10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]:
                    revert with 0, 'SafeMath: addition overflow'
                return ((0 / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]))
            if 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / volatilityFactor != 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]:
                revert with 0, 32, 33, code.data[21823 len 33], mem[517 len 31]
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            if (0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) < (10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]:
                revert with 0, 'SafeMath: addition overflow'
            return ((0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]))
        s = (ext_call.return_data[0] - block.timestamp / 2) + 1
        t = ext_call.return_data[0] - block.timestamp
        while s < t:
            require s
            s = (ext_call.return_data[0] - block.timestamp / s) + s / 2
            t = s
            continue 
        if not t:
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            if (0 / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) < (10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]:
                revert with 0, 'SafeMath: addition overflow'
            return ((0 / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]))
        if volatilityFactor * t / t != volatilityFactor:
            revert with 0, 32, 33, code.data[21823 len 33], mem[517 len 31]
        if not volatilityFactor * t:
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            if (0 / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) < (10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]:
                revert with 0, 'SafeMath: addition overflow'
            return ((0 / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]))
        if 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / volatilityFactor * t != 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]:
            revert with 0, 32, 33, code.data[21823 len 33], mem[517 len 31]
        if not ext_call.return_data[0]:
            revert with 0, 'SafeMath: division by zero'
        if (0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) < (10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]:
            revert with 0, 'SafeMath: addition overflow'
        return ((0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]))
    if 10^18 * 10^ext_call.return_data[31 len 1] * 10^uint8(stor153.field_168) / 10^18 * 10^uint8(stor153.field_168) != 10^ext_call.return_data[31 len 1]:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    32,
                    33,
                    code.data[21823 len 33],
                    ext_call.return_data[101 len 31]
    if not 10^uint8(stor153.field_160):
        revert with 0, 'SafeMath: division by zero'
    if not ext_call.return_data[32]:
        revert with 0, 'SafeMath: division by zero'
    require ext_code.size(arg1)
    staticcall arg1.0x8f620487 with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if block.timestamp > ext_call.return_data[0]:
        revert with 0, 'SafeMath: subtraction overflow'
    require ext_code.size(arg1)
    staticcall arg1.priceRatio() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] <= ext_call.return_data[0]:
        if ext_call.return_data[0] - block.timestamp <= 3:
            if not ext_call.return_data[0] - block.timestamp:
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                if 0 / ext_call.return_data[0] < 0:
                    revert with 0, 'SafeMath: addition overflow'
                return (0 / ext_call.return_data[0])
            if volatilityFactor != volatilityFactor:
                revert with 0, 32, 33, code.data[21823 len 33], mem[389 len 31]
            if not volatilityFactor:
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                if 0 / ext_call.return_data[0] < 0:
                    revert with 0, 'SafeMath: addition overflow'
                return (0 / ext_call.return_data[0])
            if 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / volatilityFactor != 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]:
                revert with 0, 32, 33, code.data[21823 len 33], mem[389 len 31]
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            if 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0] < 0:
                revert with 0, 'SafeMath: addition overflow'
            return (10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0])
        s = (ext_call.return_data[0] - block.timestamp / 2) + 1
        t = ext_call.return_data[0] - block.timestamp
        while s < t:
            require s
            s = (ext_call.return_data[0] - block.timestamp / s) + s / 2
            t = s
            continue 
        if not t:
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            if 0 / ext_call.return_data[0] < 0:
                revert with 0, 'SafeMath: addition overflow'
            return (0 / ext_call.return_data[0])
        if volatilityFactor * t / t != volatilityFactor:
            revert with 0, 32, 33, code.data[21823 len 33], mem[389 len 31]
        if not volatilityFactor * t:
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            if 0 / ext_call.return_data[0] < 0:
                revert with 0, 'SafeMath: addition overflow'
            return (0 / ext_call.return_data[0])
        if 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / volatilityFactor * t != 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]:
            revert with 0, 32, 33, code.data[21823 len 33], mem[389 len 31]
        if not ext_call.return_data[0]:
            revert with 0, 'SafeMath: division by zero'
        if 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0] < 0:
            revert with 0, 'SafeMath: addition overflow'
        return (10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0])
    if ext_call.return_data[0] > 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]:
        revert with 0, 'SafeMath: subtraction overflow'
    if not (10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - ext_call.return_data[0]:
        if not 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]:
            revert with 0, 'SafeMath: division by zero'
        if ext_call.return_data[0] - block.timestamp <= 3:
            if not ext_call.return_data[0] - block.timestamp:
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                if (0 / ext_call.return_data[0]) + (0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) < 0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]:
                    revert with 0, 'SafeMath: addition overflow'
                return ((0 / ext_call.return_data[0]) + (0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]))
            if volatilityFactor != volatilityFactor:
                revert with 0, 32, 33, code.data[21823 len 33], mem[517 len 31]
            if not volatilityFactor:
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                if (0 / ext_call.return_data[0]) + (0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) < 0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]:
                    revert with 0, 'SafeMath: addition overflow'
                return ((0 / ext_call.return_data[0]) + (0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]))
            if 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / volatilityFactor != 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]:
                revert with 0, 32, 33, code.data[21823 len 33], mem[517 len 31]
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            if (10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + (0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) < 0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]:
                revert with 0, 'SafeMath: addition overflow'
            return ((10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + (0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]))
        s = (ext_call.return_data[0] - block.timestamp / 2) + 1
        t = ext_call.return_data[0] - block.timestamp
        while s < t:
            require s
            s = (ext_call.return_data[0] - block.timestamp / s) + s / 2
            t = s
            continue 
        if not t:
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            if (0 / ext_call.return_data[0]) + (0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) < 0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]:
                revert with 0, 'SafeMath: addition overflow'
            return ((0 / ext_call.return_data[0]) + (0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]))
        if volatilityFactor * t / t != volatilityFactor:
            revert with 0, 32, 33, code.data[21823 len 33], mem[517 len 31]
        if not volatilityFactor * t:
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            if (0 / ext_call.return_data[0]) + (0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) < 0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]:
                revert with 0, 'SafeMath: addition overflow'
            return ((0 / ext_call.return_data[0]) + (0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]))
        if 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / volatilityFactor * t != 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]:
            revert with 0, 32, 33, code.data[21823 len 33], mem[517 len 31]
        if not ext_call.return_data[0]:
            revert with 0, 'SafeMath: division by zero'
        if (10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + (0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) < 0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]:
            revert with 0, 'SafeMath: addition overflow'
        return ((10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + (0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]))
    if (10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / (10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - ext_call.return_data[0] != 10^18:
        revert with 0, 32, 33, code.data[21823 len 33], mem[453 len 31]
    if not 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]:
        revert with 0, 'SafeMath: division by zero'
    if ext_call.return_data[0] - block.timestamp <= 3:
        if not ext_call.return_data[0] - block.timestamp:
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            if (0 / ext_call.return_data[0]) + ((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) < (10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]:
                revert with 0, 'SafeMath: addition overflow'
            return ((0 / ext_call.return_data[0]) + ((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]))
        if volatilityFactor != volatilityFactor:
            revert with 0, 32, 33, code.data[21823 len 33], mem[517 len 31]
        if not volatilityFactor:
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            if (0 / ext_call.return_data[0]) + ((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) < (10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]:
                revert with 0, 'SafeMath: addition overflow'
            return ((0 / ext_call.return_data[0]) + ((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]))
        if 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / volatilityFactor != 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]:
            revert with 0, 32, 33, code.data[21823 len 33], mem[517 len 31]
        if not ext_call.return_data[0]:
            revert with 0, 'SafeMath: division by zero'
        if (10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + ((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) < (10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]:
            revert with 0, 'SafeMath: addition overflow'
        return ((10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + ((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]))
    s = (ext_call.return_data[0] - block.timestamp / 2) + 1
    t = ext_call.return_data[0] - block.timestamp
    while s < t:
        require s
        s = (ext_call.return_data[0] - block.timestamp / s) + s / 2
        t = s
        continue 
    if not t:
        if not ext_call.return_data[0]:
            revert with 0, 'SafeMath: division by zero'
        if (0 / ext_call.return_data[0]) + ((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) < (10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]:
            revert with 0, 'SafeMath: addition overflow'
        return ((0 / ext_call.return_data[0]) + ((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]))
    if volatilityFactor * t / t != volatilityFactor:
        revert with 0, 32, 33, code.data[21823 len 33], mem[517 len 31]
    if not volatilityFactor * t:
        if not ext_call.return_data[0]:
            revert with 0, 'SafeMath: division by zero'
        if (0 / ext_call.return_data[0]) + ((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) < (10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]:
            revert with 0, 'SafeMath: addition overflow'
        return ((0 / ext_call.return_data[0]) + ((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]))
    if 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / volatilityFactor * t != 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]:
        revert with 0, 32, 33, code.data[21823 len 33], mem[517 len 31]
    if not ext_call.return_data[0]:
        revert with 0, 'SafeMath: division by zero'
    if (10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + ((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) < (10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]:
        revert with 0, 'SafeMath: addition overflow'
    return ((10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + ((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]))
}

function getTotalPoolValue(bool arg1) payable {
    require calldata.size - 4 >= 32
    mem[96] = 0x7caf154500000000000000000000000000000000000000000000000000000000
    mem[100] = assetPair
    require ext_code.size(registryAddress)
    staticcall registryAddress.getMarketsByAssetPair(bytes32 rg1) with:
            gas gas_remaining wei
           args assetPair
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    mem[96 len return_data.size] = ext_call.return_data[0 len return_data.size]
    mem[64] = ceil32(return_data.size) + 96
    require return_data.size >= 32
    _4 = mem[96 len 4], stor160
    require mem[96 len 4], stor160 <= 4294967296
    require mem[96 len 4], stor160 + 32 <= return_data.size
    require mem[mem[96 len 4], stor160 + 96] <= 4294967296 and mem[96 len 4], stor160 + (32 * mem[mem[96 len 4], stor160 + 96]) + 32 <= return_data.size
    mem[ceil32(return_data.size) + 96] = mem[mem[96 len 4], stor160 + 96]
    _7 = mem[_4 + 96]
    mem[ceil32(return_data.size) + 128 len floor32(mem[_4 + 96])] = mem[_4 + 128 len floor32(mem[_4 + 96])]
    require ext_code.size(stor155)
    staticcall stor155.latestRoundData() with:
            gas gas_remaining wei
    mem[(32 * _7) + ceil32(return_data.size) + 128 len 160] = ext_call.return_data[0 len 160]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 160
    if ext_call.return_data[32] < 0:
        revert with 0, 32, 40, code.data[21934 len 40], ext_call.return_data[108 len 24]
    require ext_code.size(stor155)
    staticcall stor155.0x313ce567 with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if 10^18 * 10^uint8(stor153.field_168) / 10^18 != 10^uint8(stor153.field_168):
        revert with 0, 32, 33, code.data[21823 len 33], ext_call.return_data[101 len 31]
    if not stor157:
        if not 10^18 * 10^uint8(stor153.field_168):
            mem[(32 * _7) + ceil32(return_data.size) + 128] = 26
            mem[(32 * _7) + ceil32(return_data.size) + 160] = 'SafeMath: division by zero'
            if not 10^uint8(stor153.field_160):
                revert with 0, 'SafeMath: division by zero'
            mem[64] = (32 * _7) + ceil32(return_data.size) + 256
            mem[(32 * _7) + ceil32(return_data.size) + 192] = 26
            mem[(32 * _7) + ceil32(return_data.size) + 224] = 'SafeMath: division by zero'
            if not 10^uint8(ext_call.return_data[0]):
                revert with 0, 'SafeMath: division by zero'
            _11327 = mem[ceil32(return_data.size) + 96]
            idx = 0
            while idx < _11327:
                require idx < mem[ceil32(return_data.size) + 96]
                _11355 = mem[(32 * idx) + ceil32(return_data.size) + 128]
                require ext_code.size(mem[(32 * idx) + ceil32(return_data.size) + 140 len 20])
                staticcall mem[(32 * idx) + ceil32(return_data.size) + 140 len 20].0xc19d93fb with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] <= 2
                if ext_call.return_data[0]:
                    if not arg1:
                        idx = idx + 1
                        continue 
                    require ext_code.size(address(_11355))
                    staticcall address(_11355).0xc19d93fb with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] <= 2
                    if ext_call.return_data[0] != 1:
                        idx = idx + 1
                        continue 
                    require ext_code.size(address(_11355))
                    staticcall address(_11355).wToken() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    mem[mem[64] + 4] = this.address
                    require ext_code.size(address(ext_call.return_data[0]))
                    staticcall address(ext_call.return_data[0]).0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(address(_11355))
                    staticcall address(_11355).wToken() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(address(ext_call.return_data[0]))
                    staticcall address(ext_call.return_data[0]).0x18160ddd with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0]:
                        idx = idx + 1
                        continue 
                    if not ext_call.return_data[0]:
                        idx = idx + 1
                        continue 
                    require ext_code.size(collateralTokenAddress)
                    staticcall collateralTokenAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args address(_11355)
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0]:
                        _11910 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_11910] = 26
                        mem[_11910 + 32] = 'SafeMath: division by zero'
                        if not ext_call.return_data[0]:
                            _11983 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 26
                            idx = 0
                            while idx < 26:
                                mem[idx + _11983 + 68] = mem[idx + _11910 + 32]
                                idx = idx + 32
                                continue 
                            mem[_11983 + 68] = mem[_11983 + 74 len 26]
                            revert with memory
                              from mem[64]
                               len _11983 + -mem[64] + 100
                        mem[mem[64] + 4] = address(_11355)
                        require ext_code.size(paymentTokenAddress)
                        staticcall paymentTokenAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args address(_11355)
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            _12381 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_12381] = 26
                            mem[_12381 + 32] = 'SafeMath: division by zero'
                            if not ext_call.return_data[0]:
                                _12551 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 26
                                idx = 0
                                while idx < 26:
                                    mem[idx + _12551 + 68] = mem[idx + _12381 + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_12551 + 68] = mem[_12551 + 74 len 26]
                                revert with memory
                                  from mem[64]
                                   len _12551 + -mem[64] + 100
                            if not 0 / ext_call.return_data[0]:
                                _13449 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_13449] = 26
                                mem[_13449 + 32] = 'SafeMath: division by zero'
                                if 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]):
                                    if 0 / ext_call.return_data[0] < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    if (0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + (0 / ext_call.return_data[0]) < 0 / ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    idx = idx + 1
                                    continue 
                                _13601 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 26
                                idx = 0
                                while idx < 26:
                                    mem[idx + _13601 + 68] = mem[idx + _13449 + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_13601 + 68] = mem[_13601 + 74 len 26]
                                revert with memory
                                  from mem[64]
                                   len _13601 + -mem[64] + 100
                            if 10^18 * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != 10^18:
                                revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                            _13535 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_13535] = 26
                            mem[_13535 + 32] = 'SafeMath: division by zero'
                            if 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]):
                                if 0 / ext_call.return_data[0] < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                                if (10^18 * 0 / ext_call.return_data[0] / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + (0 / ext_call.return_data[0]) < 0 / ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: addition overflow'
                                idx = idx + 1
                                continue 
                            _13672 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 26
                            idx = 0
                            while idx < 26:
                                mem[idx + _13672 + 68] = mem[idx + _13535 + 32]
                                idx = idx + 32
                                continue 
                            mem[_13672 + 68] = mem[_13672 + 74 len 26]
                            revert with memory
                              from mem[64]
                               len _13672 + -mem[64] + 100
                        if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                            revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                        _12454 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_12454] = 26
                        mem[_12454 + 32] = 'SafeMath: division by zero'
                        if not ext_call.return_data[0]:
                            _12670 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 26
                            idx = 0
                            while idx < 26:
                                mem[idx + _12670 + 68] = mem[idx + _12454 + 32]
                                idx = idx + 32
                                continue 
                            mem[_12670 + 68] = mem[_12670 + 74 len 26]
                            revert with memory
                              from mem[64]
                               len _12670 + -mem[64] + 100
                        if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                            _13534 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_13534] = 26
                            mem[_13534 + 32] = 'SafeMath: division by zero'
                            if 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]):
                                if 0 / ext_call.return_data[0] < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                                if (0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + (0 / ext_call.return_data[0]) < 0 / ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: addition overflow'
                                idx = idx + 1
                                continue 
                            _13669 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 26
                            idx = 0
                            while idx < 26:
                                mem[idx + _13669 + 68] = mem[idx + _13534 + 32]
                                idx = idx + 32
                                continue 
                            mem[_13669 + 68] = mem[_13669 + 74 len 26]
                            revert with memory
                              from mem[64]
                               len _13669 + -mem[64] + 100
                        if 10^18 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != 10^18:
                            revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                        _13600 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_13600] = 26
                        mem[_13600 + 32] = 'SafeMath: division by zero'
                        if 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]):
                            if 0 / ext_call.return_data[0] < 0:
                                revert with 0, 'SafeMath: addition overflow'
                            if (10^18 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + (0 / ext_call.return_data[0]) < 0 / ext_call.return_data[0]:
                                revert with 0, 'SafeMath: addition overflow'
                            idx = idx + 1
                            continue 
                        _13750 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 26
                        idx = 0
                        while idx < 26:
                            mem[idx + _13750 + 68] = mem[idx + _13600 + 32]
                            idx = idx + 32
                            continue 
                        mem[_13750 + 68] = mem[_13750 + 74 len 26]
                        revert with memory
                          from mem[64]
                           len _13750 + -mem[64] + 100
                    if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                        revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                    _11944 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_11944] = 26
                    mem[_11944 + 32] = 'SafeMath: division by zero'
                    if not ext_call.return_data[0]:
                        _12021 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 26
                        idx = 0
                        while idx < 26:
                            mem[idx + _12021 + 68] = mem[idx + _11944 + 32]
                            idx = idx + 32
                            continue 
                        mem[_12021 + 68] = mem[_12021 + 74 len 26]
                        revert with memory
                          from mem[64]
                           len _12021 + -mem[64] + 100
                    mem[mem[64] + 4] = address(_11355)
                    require ext_code.size(paymentTokenAddress)
                    staticcall paymentTokenAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args address(_11355)
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0]:
                        _12453 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_12453] = 26
                        mem[_12453 + 32] = 'SafeMath: division by zero'
                        if not ext_call.return_data[0]:
                            _12667 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 26
                            idx = 0
                            while idx < 26:
                                mem[idx + _12667 + 68] = mem[idx + _12453 + 32]
                                idx = idx + 32
                                continue 
                            mem[_12667 + 68] = mem[_12667 + 74 len 26]
                            revert with memory
                              from mem[64]
                               len _12667 + -mem[64] + 100
                        if not 0 / ext_call.return_data[0]:
                            _13533 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_13533] = 26
                            mem[_13533 + 32] = 'SafeMath: division by zero'
                            if 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]):
                                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                                if (0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) < ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: addition overflow'
                                idx = idx + 1
                                continue 
                            _13666 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 26
                            idx = 0
                            while idx < 26:
                                mem[idx + _13666 + 68] = mem[idx + _13533 + 32]
                                idx = idx + 32
                                continue 
                            mem[_13666 + 68] = mem[_13666 + 74 len 26]
                            revert with memory
                              from mem[64]
                               len _13666 + -mem[64] + 100
                        if 10^18 * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != 10^18:
                            revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                        _13599 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_13599] = 26
                        mem[_13599 + 32] = 'SafeMath: division by zero'
                        if 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]):
                            if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] < 0:
                                revert with 0, 'SafeMath: addition overflow'
                            if (10^18 * 0 / ext_call.return_data[0] / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) < ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                                revert with 0, 'SafeMath: addition overflow'
                            idx = idx + 1
                            continue 
                        _13747 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 26
                        idx = 0
                        while idx < 26:
                            mem[idx + _13747 + 68] = mem[idx + _13599 + 32]
                            idx = idx + 32
                            continue 
                        mem[_13747 + 68] = mem[_13747 + 74 len 26]
                        revert with memory
                          from mem[64]
                           len _13747 + -mem[64] + 100
                    if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                        revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                    _12550 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_12550] = 26
                    mem[_12550 + 32] = 'SafeMath: division by zero'
                    if not ext_call.return_data[0]:
                        _12796 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 26
                        idx = 0
                        while idx < 26:
                            mem[idx + _12796 + 68] = mem[idx + _12550 + 32]
                            idx = idx + 32
                            continue 
                        mem[_12796 + 68] = mem[_12796 + 74 len 26]
                        revert with memory
                          from mem[64]
                           len _12796 + -mem[64] + 100
                    if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                        _13598 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_13598] = 26
                        mem[_13598 + 32] = 'SafeMath: division by zero'
                        if 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]):
                            if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] < 0:
                                revert with 0, 'SafeMath: addition overflow'
                            if (0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) < ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                                revert with 0, 'SafeMath: addition overflow'
                            idx = idx + 1
                            continue 
                        _13744 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 26
                        idx = 0
                        while idx < 26:
                            mem[idx + _13744 + 68] = mem[idx + _13598 + 32]
                            idx = idx + 32
                            continue 
                        mem[_13744 + 68] = mem[_13744 + 74 len 26]
                        revert with memory
                          from mem[64]
                           len _13744 + -mem[64] + 100
                    if 10^18 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != 10^18:
                        revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                    _13665 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_13665] = 26
                    mem[_13665 + 32] = 'SafeMath: division by zero'
                    if 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]):
                        if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        if (10^18 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) < ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        idx = idx + 1
                        continue 
                    _13838 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 26
                    idx = 0
                    while idx < 26:
                        mem[idx + _13838 + 68] = mem[idx + _13665 + 32]
                        idx = idx + 32
                        continue 
                    mem[_13838 + 68] = mem[_13838 + 74 len 26]
                    revert with memory
                      from mem[64]
                       len _13838 + -mem[64] + 100
                require ext_code.size(address(_11355))
                staticcall address(_11355).0x8f620487 with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                _11477 = mem[64]
                mem[64] = mem[64] + 64
                mem[_11477] = 30
                mem[_11477 + 32] = 'SafeMath: subtraction overflow'
                if block.timestamp > ext_call.return_data[0]:
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 30
                    mem[mem[64] + 68] = 'SafeMath: subtraction overflow'
                    idx = 32
                    while idx < 30:
                        mem[idx + mem[64] + 68] = mem[idx + _11477 + 32]
                        idx = idx + 32
                        continue 
                    revert with 0, 'SafeMath: subtraction overflow'
                require ext_code.size(address(_11355))
                staticcall address(_11355).priceRatio() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) <= ext_call.return_data[0]:
                    if ext_call.return_data[0] - block.timestamp <= 3:
                        if not ext_call.return_data[0] - block.timestamp:
                            _11828 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_11828] = 26
                            mem[_11828 + 32] = 'SafeMath: division by zero'
                            if not ext_call.return_data[0]:
                                _11868 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 26
                                idx = 0
                                while idx < 26:
                                    mem[idx + _11868 + 68] = mem[idx + _11828 + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_11868 + 68] = mem[_11868 + 74 len 26]
                                revert with memory
                                  from mem[64]
                                   len _11868 + -mem[64] + 100
                            if 0 / ext_call.return_data[0] < 0:
                                revert with 0, 'SafeMath: addition overflow'
                            _12215 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_12215] = 30
                            mem[_12215 + 32] = 'SafeMath: subtraction overflow'
                            if 0 / ext_call.return_data[0] > 10^18:
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                mem[mem[64] + 68] = 'SafeMath: subtraction overflow'
                                idx = 32
                                while idx < 30:
                                    mem[idx + mem[64] + 68] = mem[idx + _12215 + 32]
                                    idx = idx + 32
                                    continue 
                                revert with 0, 'SafeMath: subtraction overflow'
                            require ext_code.size(address(_11355))
                            staticcall address(_11355).0x180f5842 with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(address(ext_call.return_data[0]))
                            staticcall address(ext_call.return_data[0]).0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(address(_11355))
                            staticcall address(_11355).wToken() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(address(ext_call.return_data[0]))
                            staticcall address(ext_call.return_data[0]).0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                if not ext_call.return_data[0]:
                                    _15072 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_15072] = 26
                                    mem[_15072 + 32] = 'SafeMath: division by zero'
                                else:
                                    if 0 / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != 0 / ext_call.return_data[0]:
                                        revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                    if 0 / ext_call.return_data[0] * ext_call.return_data[0] < 0 / ext_call.return_data[0] * ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _15190 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_15190] = 26
                                    mem[_15190 + 32] = 'SafeMath: division by zero'
                                    if 0 / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                            else:
                                if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] != -(0 / ext_call.return_data[0]) + 10^18:
                                    revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                if not ext_call.return_data[0]:
                                    if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _15189 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_15189] = 26
                                    mem[_15189 + 32] = 'SafeMath: division by zero'
                                    if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) / 10^18 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                else:
                                    if 0 / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != 0 / ext_call.return_data[0]:
                                        revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                    if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) + (0 / ext_call.return_data[0] * ext_call.return_data[0]) < 0 / ext_call.return_data[0] * ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _15311 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_15311] = 26
                                    mem[_15311 + 32] = 'SafeMath: division by zero'
                                    if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) + (0 / ext_call.return_data[0] * ext_call.return_data[0]) / 10^18 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                        else:
                            if volatilityFactor != volatilityFactor:
                                revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                            if not volatilityFactor:
                                _11848 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_11848] = 26
                                mem[_11848 + 32] = 'SafeMath: division by zero'
                                if not ext_call.return_data[0]:
                                    _11911 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 26
                                    idx = 0
                                    while idx < 26:
                                        mem[idx + _11911 + 68] = mem[idx + _11848 + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_11911 + 68] = mem[_11911 + 74 len 26]
                                    revert with memory
                                      from mem[64]
                                       len _11911 + -mem[64] + 100
                                if 0 / ext_call.return_data[0] < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                                _12239 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_12239] = 30
                                mem[_12239 + 32] = 'SafeMath: subtraction overflow'
                                if 0 / ext_call.return_data[0] > 10^18:
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    mem[mem[64] + 68] = 'SafeMath: subtraction overflow'
                                    idx = 32
                                    while idx < 30:
                                        mem[idx + mem[64] + 68] = mem[idx + _12239 + 32]
                                        idx = idx + 32
                                        continue 
                                    revert with 0, 'SafeMath: subtraction overflow'
                                require ext_code.size(address(_11355))
                                staticcall address(_11355).0x180f5842 with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(address(ext_call.return_data[0]))
                                staticcall address(ext_call.return_data[0]).0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(address(_11355))
                                staticcall address(_11355).wToken() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                mem[mem[64] + 4] = this.address
                                require ext_code.size(address(ext_call.return_data[0]))
                                staticcall address(ext_call.return_data[0]).0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0]:
                                    if not ext_call.return_data[0]:
                                        _15197 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_15197] = 26
                                        mem[_15197 + 32] = 'SafeMath: division by zero'
                                    else:
                                        if 0 / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != 0 / ext_call.return_data[0]:
                                            revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                        if 0 / ext_call.return_data[0] * ext_call.return_data[0] < 0 / ext_call.return_data[0] * ext_call.return_data[0]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _15316 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_15316] = 26
                                        mem[_15316 + 32] = 'SafeMath: division by zero'
                                        if 0 / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 < 0:
                                            revert with 0, 'SafeMath: addition overflow'
                                else:
                                    if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] != -(0 / ext_call.return_data[0]) + 10^18:
                                        revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                    if not ext_call.return_data[0]:
                                        if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) < 0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _15315 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_15315] = 26
                                        mem[_15315 + 32] = 'SafeMath: division by zero'
                                        if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) / 10^18 < 0:
                                            revert with 0, 'SafeMath: addition overflow'
                                    else:
                                        if 0 / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != 0 / ext_call.return_data[0]:
                                            revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                        if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) + (0 / ext_call.return_data[0] * ext_call.return_data[0]) < 0 / ext_call.return_data[0] * ext_call.return_data[0]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _15428 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_15428] = 26
                                        mem[_15428 + 32] = 'SafeMath: division by zero'
                                        if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) + (0 / ext_call.return_data[0] * ext_call.return_data[0]) / 10^18 < 0:
                                            revert with 0, 'SafeMath: addition overflow'
                            else:
                                if 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / volatilityFactor != 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]):
                                    revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                _11871 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_11871] = 26
                                mem[_11871 + 32] = 'SafeMath: division by zero'
                                if not ext_call.return_data[0]:
                                    _11946 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 26
                                    idx = 0
                                    while idx < 26:
                                        mem[idx + _11946 + 68] = mem[idx + _11871 + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_11946 + 68] = mem[_11946 + 74 len 26]
                                    revert with memory
                                      from mem[64]
                                       len _11946 + -mem[64] + 100
                                if 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0] < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                                _12260 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_12260] = 30
                                mem[_12260 + 32] = 'SafeMath: subtraction overflow'
                                if 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0] > 10^18:
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    mem[mem[64] + 68] = 'SafeMath: subtraction overflow'
                                    idx = 32
                                    while idx < 30:
                                        mem[idx + mem[64] + 68] = mem[idx + _12260 + 32]
                                        idx = idx + 32
                                        continue 
                                    revert with 0, 'SafeMath: subtraction overflow'
                                require ext_code.size(address(_11355))
                                staticcall address(_11355).0x180f5842 with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(address(ext_call.return_data[0]))
                                staticcall address(ext_call.return_data[0]).0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(address(_11355))
                                staticcall address(_11355).wToken() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                mem[mem[64] + 4] = this.address
                                require ext_code.size(address(ext_call.return_data[0]))
                                staticcall address(ext_call.return_data[0]).0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0]:
                                    if not ext_call.return_data[0]:
                                        _15314 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_15314] = 26
                                        mem[_15314 + 32] = 'SafeMath: division by zero'
                                    else:
                                        if 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]:
                                            revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                        if 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0] * ext_call.return_data[0] < 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0] * ext_call.return_data[0]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _15427 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_15427] = 26
                                        mem[_15427 + 32] = 'SafeMath: division by zero'
                                        if 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 < 0:
                                            revert with 0, 'SafeMath: addition overflow'
                                else:
                                    if (10^18 * ext_call.return_data[0]) - (0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] != -(0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + 10^18:
                                        revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                    if not ext_call.return_data[0]:
                                        if (10^18 * ext_call.return_data[0]) - (0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0] * ext_call.return_data[0]) < 0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _15426 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_15426] = 26
                                        mem[_15426 + 32] = 'SafeMath: division by zero'
                                        if (10^18 * ext_call.return_data[0]) - (0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0] * ext_call.return_data[0]) / 10^18 < 0:
                                            revert with 0, 'SafeMath: addition overflow'
                                    else:
                                        if 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]:
                                            revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                        if (10^18 * ext_call.return_data[0]) - (0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0] * ext_call.return_data[0]) + (0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0] * ext_call.return_data[0]) < 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0] * ext_call.return_data[0]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _15531 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_15531] = 26
                                        mem[_15531 + 32] = 'SafeMath: division by zero'
                                        if (10^18 * ext_call.return_data[0]) - (0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0] * ext_call.return_data[0]) + (0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0] * ext_call.return_data[0]) / 10^18 < 0:
                                            revert with 0, 'SafeMath: addition overflow'
                    else:
                        s = (ext_call.return_data[0] - block.timestamp / 2) + 1
                        t = ext_call.return_data[0] - block.timestamp
                        while s < t:
                            require s
                            s = (ext_call.return_data[0] - block.timestamp / s) + s / 2
                            t = s
                            continue 
                        if not t:
                            _17573 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_17573] = 26
                            mem[_17573 + 32] = 'SafeMath: division by zero'
                            if not ext_call.return_data[0]:
                                _17623 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 26
                                idx = 0
                                while idx < 26:
                                    mem[idx + _17623 + 68] = mem[idx + _17573 + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_17623 + 68] = mem[_17623 + 74 len 26]
                                revert with memory
                                  from mem[64]
                                   len _17623 + -mem[64] + 100
                            if 0 / ext_call.return_data[0] < 0:
                                revert with 0, 'SafeMath: addition overflow'
                            _17949 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_17949] = 30
                            mem[_17949 + 32] = 'SafeMath: subtraction overflow'
                            if 0 / ext_call.return_data[0] > 10^18:
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                mem[mem[64] + 68] = 'SafeMath: subtraction overflow'
                                idx = 32
                                while idx < 30:
                                    mem[idx + mem[64] + 68] = mem[idx + _17949 + 32]
                                    idx = idx + 32
                                    continue 
                                revert with 0, 'SafeMath: subtraction overflow'
                            require ext_code.size(address(_11355))
                            staticcall address(_11355).0x180f5842 with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(address(ext_call.return_data[0]))
                            staticcall address(ext_call.return_data[0]).0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(address(_11355))
                            staticcall address(_11355).wToken() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(address(ext_call.return_data[0]))
                            staticcall address(ext_call.return_data[0]).0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                if not ext_call.return_data[0]:
                                    _19245 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_19245] = 26
                                    mem[_19245 + 32] = 'SafeMath: division by zero'
                                else:
                                    if 0 / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != 0 / ext_call.return_data[0]:
                                        revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                    if 0 / ext_call.return_data[0] * ext_call.return_data[0] < 0 / ext_call.return_data[0] * ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _19337 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_19337] = 26
                                    mem[_19337 + 32] = 'SafeMath: division by zero'
                                    if 0 / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                            else:
                                if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] != -(0 / ext_call.return_data[0]) + 10^18:
                                    revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                if not ext_call.return_data[0]:
                                    if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _19336 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_19336] = 26
                                    mem[_19336 + 32] = 'SafeMath: division by zero'
                                    if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) / 10^18 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                else:
                                    if 0 / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != 0 / ext_call.return_data[0]:
                                        revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                    if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) + (0 / ext_call.return_data[0] * ext_call.return_data[0]) < 0 / ext_call.return_data[0] * ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _19433 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_19433] = 26
                                    mem[_19433 + 32] = 'SafeMath: division by zero'
                                    if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) + (0 / ext_call.return_data[0] * ext_call.return_data[0]) / 10^18 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                        else:
                            if volatilityFactor * t / t != volatilityFactor:
                                revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                            if not volatilityFactor * t:
                                _17601 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_17601] = 26
                                mem[_17601 + 32] = 'SafeMath: division by zero'
                                if not ext_call.return_data[0]:
                                    _17667 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 26
                                    idx = 0
                                    while idx < 26:
                                        mem[idx + _17667 + 68] = mem[idx + _17601 + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_17667 + 68] = mem[_17667 + 74 len 26]
                                    revert with memory
                                      from mem[64]
                                       len _17667 + -mem[64] + 100
                                if 0 / ext_call.return_data[0] < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                                _17961 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_17961] = 30
                                mem[_17961 + 32] = 'SafeMath: subtraction overflow'
                                if 0 / ext_call.return_data[0] > 10^18:
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    mem[mem[64] + 68] = 'SafeMath: subtraction overflow'
                                    idx = 32
                                    while idx < 30:
                                        mem[idx + mem[64] + 68] = mem[idx + _17961 + 32]
                                        idx = idx + 32
                                        continue 
                                    revert with 0, 'SafeMath: subtraction overflow'
                                require ext_code.size(address(_11355))
                                staticcall address(_11355).0x180f5842 with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(address(ext_call.return_data[0]))
                                staticcall address(ext_call.return_data[0]).0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(address(_11355))
                                staticcall address(_11355).wToken() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                mem[mem[64] + 4] = this.address
                                require ext_code.size(address(ext_call.return_data[0]))
                                staticcall address(ext_call.return_data[0]).0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0]:
                                    if not ext_call.return_data[0]:
                                        _19335 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_19335] = 26
                                        mem[_19335 + 32] = 'SafeMath: division by zero'
                                    else:
                                        if 0 / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != 0 / ext_call.return_data[0]:
                                            revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                        if 0 / ext_call.return_data[0] * ext_call.return_data[0] < 0 / ext_call.return_data[0] * ext_call.return_data[0]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _19432 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_19432] = 26
                                        mem[_19432 + 32] = 'SafeMath: division by zero'
                                        if 0 / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 < 0:
                                            revert with 0, 'SafeMath: addition overflow'
                                else:
                                    if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] != -(0 / ext_call.return_data[0]) + 10^18:
                                        revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                    if not ext_call.return_data[0]:
                                        if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) < 0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _19431 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_19431] = 26
                                        mem[_19431 + 32] = 'SafeMath: division by zero'
                                        if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) / 10^18 < 0:
                                            revert with 0, 'SafeMath: addition overflow'
                                    else:
                                        if 0 / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != 0 / ext_call.return_data[0]:
                                            revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                        if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) + (0 / ext_call.return_data[0] * ext_call.return_data[0]) < 0 / ext_call.return_data[0] * ext_call.return_data[0]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _19493 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_19493] = 26
                                        mem[_19493 + 32] = 'SafeMath: division by zero'
                                        if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) + (0 / ext_call.return_data[0] * ext_call.return_data[0]) / 10^18 < 0:
                                            revert with 0, 'SafeMath: addition overflow'
                            else:
                                if 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / volatilityFactor * t != 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]):
                                    revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                _17622 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_17622] = 26
                                mem[_17622 + 32] = 'SafeMath: division by zero'
                                if not ext_call.return_data[0]:
                                    _17706 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 26
                                    idx = 0
                                    while idx < 26:
                                        mem[idx + _17706 + 68] = mem[idx + _17622 + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_17706 + 68] = mem[_17706 + 74 len 26]
                                    revert with memory
                                      from mem[64]
                                       len _17706 + -mem[64] + 100
                                if 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0] < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                                _17982 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_17982] = 30
                                mem[_17982 + 32] = 'SafeMath: subtraction overflow'
                                if 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0] > 10^18:
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    mem[mem[64] + 68] = 'SafeMath: subtraction overflow'
                                    idx = 32
                                    while idx < 30:
                                        mem[idx + mem[64] + 68] = mem[idx + _17982 + 32]
                                        idx = idx + 32
                                        continue 
                                    revert with 0, 'SafeMath: subtraction overflow'
                                require ext_code.size(address(_11355))
                                staticcall address(_11355).0x180f5842 with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(address(ext_call.return_data[0]))
                                staticcall address(ext_call.return_data[0]).0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(address(_11355))
                                staticcall address(_11355).wToken() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                mem[mem[64] + 4] = this.address
                                require ext_code.size(address(ext_call.return_data[0]))
                                staticcall address(ext_call.return_data[0]).0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0]:
                                    if not ext_call.return_data[0]:
                                        _19430 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_19430] = 26
                                        mem[_19430 + 32] = 'SafeMath: division by zero'
                                    else:
                                        if 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]:
                                            revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                        if 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0] * ext_call.return_data[0] < 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0] * ext_call.return_data[0]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _19492 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_19492] = 26
                                        mem[_19492 + 32] = 'SafeMath: division by zero'
                                        if 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 < 0:
                                            revert with 0, 'SafeMath: addition overflow'
                                else:
                                    if (10^18 * ext_call.return_data[0]) - (0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] != -(0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + 10^18:
                                        revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                    if not ext_call.return_data[0]:
                                        if (10^18 * ext_call.return_data[0]) - (0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0] * ext_call.return_data[0]) < 0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _19491 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_19491] = 26
                                        mem[_19491 + 32] = 'SafeMath: division by zero'
                                        if (10^18 * ext_call.return_data[0]) - (0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0] * ext_call.return_data[0]) / 10^18 < 0:
                                            revert with 0, 'SafeMath: addition overflow'
                                    else:
                                        if 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]:
                                            revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                        if (10^18 * ext_call.return_data[0]) - (0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0] * ext_call.return_data[0]) + (0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0] * ext_call.return_data[0]) < 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0] * ext_call.return_data[0]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _19521 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_19521] = 26
                                        mem[_19521 + 32] = 'SafeMath: division by zero'
                                        if (10^18 * ext_call.return_data[0]) - (0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0] * ext_call.return_data[0]) + (0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0] * ext_call.return_data[0]) / 10^18 < 0:
                                            revert with 0, 'SafeMath: addition overflow'
                else:
                    _11657 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_11657] = 30
                    mem[_11657 + 32] = 'SafeMath: subtraction overflow'
                    if ext_call.return_data[0] > 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]):
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 30
                        mem[mem[64] + 68] = 'SafeMath: subtraction overflow'
                        idx = 32
                        while idx < 30:
                            mem[idx + mem[64] + 68] = mem[idx + _11657 + 32]
                            idx = idx + 32
                            continue 
                        revert with 0, 'SafeMath: subtraction overflow'
                    if not (0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - ext_call.return_data[0]:
                        _11793 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_11793] = 26
                        mem[_11793 + 32] = 'SafeMath: division by zero'
                        if not 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]):
                            _11813 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 26
                            idx = 0
                            while idx < 26:
                                mem[idx + _11813 + 68] = mem[idx + _11793 + 32]
                                idx = idx + 32
                                continue 
                            mem[_11813 + 68] = mem[_11813 + 74 len 26]
                            revert with memory
                              from mem[64]
                               len _11813 + -mem[64] + 100
                        if ext_call.return_data[0] - block.timestamp <= 3:
                            if not ext_call.return_data[0] - block.timestamp:
                                _12393 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_12393] = 26
                                mem[_12393 + 32] = 'SafeMath: division by zero'
                                if not ext_call.return_data[0]:
                                    _12571 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 26
                                    idx = 0
                                    while idx < 26:
                                        mem[idx + _12571 + 68] = mem[idx + _12393 + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_12571 + 68] = mem[_12571 + 74 len 26]
                                    revert with memory
                                      from mem[64]
                                       len _12571 + -mem[64] + 100
                                if (0 / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) < 0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]):
                                    revert with 0, 'SafeMath: addition overflow'
                                _13545 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_13545] = 30
                                mem[_13545 + 32] = 'SafeMath: subtraction overflow'
                                if (0 / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) > 10^18:
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    mem[mem[64] + 68] = 'SafeMath: subtraction overflow'
                                    idx = 32
                                    while idx < 30:
                                        mem[idx + mem[64] + 68] = mem[idx + _13545 + 32]
                                        idx = idx + 32
                                        continue 
                                    revert with 0, 'SafeMath: subtraction overflow'
                                require ext_code.size(address(_11355))
                                staticcall address(_11355).0x180f5842 with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(address(ext_call.return_data[0]))
                                staticcall address(ext_call.return_data[0]).0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(address(_11355))
                                staticcall address(_11355).wToken() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                mem[mem[64] + 4] = this.address
                                require ext_code.size(address(ext_call.return_data[0]))
                                staticcall address(ext_call.return_data[0]).0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0]:
                                    if not ext_call.return_data[0]:
                                        _16139 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_16139] = 26
                                        mem[_16139 + 32] = 'SafeMath: division by zero'
                                    else:
                                        if (0 / ext_call.return_data[0] * ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) / ext_call.return_data[0] != (0 / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])):
                                            revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                        _16228 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_16228] = 26
                                        mem[_16228 + 32] = 'SafeMath: division by zero'
                                        if (0 / ext_call.return_data[0] * ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) / 10^18 < 0:
                                            revert with 0, 'SafeMath: addition overflow'
                                else:
                                    if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) - (0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) / ext_call.return_data[0] != -(0 / ext_call.return_data[0]) + -(0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18:
                                        revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                    if not ext_call.return_data[0]:
                                        if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) - (0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) < 0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _16227 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_16227] = 26
                                        mem[_16227 + 32] = 'SafeMath: division by zero'
                                        if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) - (0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) / 10^18 < 0:
                                            revert with 0, 'SafeMath: addition overflow'
                                    else:
                                        if (0 / ext_call.return_data[0] * ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) / ext_call.return_data[0] != (0 / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])):
                                            revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                        if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) - (0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) < 0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _16337 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_16337] = 26
                                        mem[_16337 + 32] = 'SafeMath: division by zero'
                                        if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) - (0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) + (0 / ext_call.return_data[0] * ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) / 10^18 < 0:
                                            revert with 0, 'SafeMath: addition overflow'
                            else:
                                if volatilityFactor != volatilityFactor:
                                    revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                if not volatilityFactor:
                                    _12475 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_12475] = 26
                                    mem[_12475 + 32] = 'SafeMath: division by zero'
                                    if not ext_call.return_data[0]:
                                        _12696 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 26
                                        idx = 0
                                        while idx < 26:
                                            mem[idx + _12696 + 68] = mem[idx + _12475 + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_12696 + 68] = mem[_12696 + 74 len 26]
                                        revert with memory
                                          from mem[64]
                                           len _12696 + -mem[64] + 100
                                    if (0 / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) < 0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]):
                                        revert with 0, 'SafeMath: addition overflow'
                                    _13613 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_13613] = 30
                                    mem[_13613 + 32] = 'SafeMath: subtraction overflow'
                                    if (0 / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) > 10^18:
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        mem[mem[64] + 68] = 'SafeMath: subtraction overflow'
                                        idx = 32
                                        while idx < 30:
                                            mem[idx + mem[64] + 68] = mem[idx + _13613 + 32]
                                            idx = idx + 32
                                            continue 
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    require ext_code.size(address(_11355))
                                    staticcall address(_11355).0x180f5842 with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(address(ext_call.return_data[0]))
                                    staticcall address(ext_call.return_data[0]).0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(address(_11355))
                                    staticcall address(_11355).wToken() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[mem[64] + 4] = this.address
                                    require ext_code.size(address(ext_call.return_data[0]))
                                    staticcall address(ext_call.return_data[0]).0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        if not ext_call.return_data[0]:
                                            _16235 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_16235] = 26
                                            mem[_16235 + 32] = 'SafeMath: division by zero'
                                        else:
                                            if (0 / ext_call.return_data[0] * ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) / ext_call.return_data[0] != (0 / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])):
                                                revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                            _16342 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_16342] = 26
                                            mem[_16342 + 32] = 'SafeMath: division by zero'
                                            if (0 / ext_call.return_data[0] * ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) / 10^18 < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                    else:
                                        if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) - (0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) / ext_call.return_data[0] != -(0 / ext_call.return_data[0]) + -(0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18:
                                            revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                        if not ext_call.return_data[0]:
                                            if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) - (0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            _16341 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_16341] = 26
                                            mem[_16341 + 32] = 'SafeMath: division by zero'
                                            if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) - (0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) / 10^18 < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                        else:
                                            if (0 / ext_call.return_data[0] * ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) / ext_call.return_data[0] != (0 / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])):
                                                revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                            if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) - (0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            _16446 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_16446] = 26
                                            mem[_16446 + 32] = 'SafeMath: division by zero'
                                            if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) - (0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) + (0 / ext_call.return_data[0] * ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) / 10^18 < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                else:
                                    if 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / volatilityFactor != 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]):
                                        revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                    _12574 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_12574] = 26
                                    mem[_12574 + 32] = 'SafeMath: division by zero'
                                    if not ext_call.return_data[0]:
                                        _12819 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 26
                                        idx = 0
                                        while idx < 26:
                                            mem[idx + _12819 + 68] = mem[idx + _12574 + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_12819 + 68] = mem[_12819 + 74 len 26]
                                        revert with memory
                                          from mem[64]
                                           len _12819 + -mem[64] + 100
                                    if (0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) < 0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]):
                                        revert with 0, 'SafeMath: addition overflow'
                                    _13682 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_13682] = 30
                                    mem[_13682 + 32] = 'SafeMath: subtraction overflow'
                                    if (0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) > 10^18:
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        mem[mem[64] + 68] = 'SafeMath: subtraction overflow'
                                        idx = 32
                                        while idx < 30:
                                            mem[idx + mem[64] + 68] = mem[idx + _13682 + 32]
                                            idx = idx + 32
                                            continue 
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    require ext_code.size(address(_11355))
                                    staticcall address(_11355).0x180f5842 with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(address(ext_call.return_data[0]))
                                    staticcall address(ext_call.return_data[0]).0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(address(_11355))
                                    staticcall address(_11355).wToken() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[mem[64] + 4] = this.address
                                    require ext_code.size(address(ext_call.return_data[0]))
                                    staticcall address(ext_call.return_data[0]).0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        if not ext_call.return_data[0]:
                                            _16340 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_16340] = 26
                                            mem[_16340 + 32] = 'SafeMath: division by zero'
                                        else:
                                            if (0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0] * ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) / ext_call.return_data[0] != (0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])):
                                                revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                            _16445 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_16445] = 26
                                            mem[_16445 + 32] = 'SafeMath: division by zero'
                                            if (0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0] * ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) / 10^18 < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                    else:
                                        if (10^18 * ext_call.return_data[0]) - (0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0] * ext_call.return_data[0]) - (0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) / ext_call.return_data[0] != -(0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + -(0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18:
                                            revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                        if not ext_call.return_data[0]:
                                            if (10^18 * ext_call.return_data[0]) - (0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0] * ext_call.return_data[0]) - (0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            _16444 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_16444] = 26
                                            mem[_16444 + 32] = 'SafeMath: division by zero'
                                            if (10^18 * ext_call.return_data[0]) - (0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0] * ext_call.return_data[0]) - (0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) / 10^18 < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                        else:
                                            if (0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0] * ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) / ext_call.return_data[0] != (0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])):
                                                revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                            if (10^18 * ext_call.return_data[0]) - (0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0] * ext_call.return_data[0]) - (0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            _16537 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_16537] = 26
                                            mem[_16537 + 32] = 'SafeMath: division by zero'
                                            if (10^18 * ext_call.return_data[0]) - (0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0] * ext_call.return_data[0]) - (0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) + (0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0] * ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) / 10^18 < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                        else:
                            s = (ext_call.return_data[0] - block.timestamp / 2) + 1
                            t = ext_call.return_data[0] - block.timestamp
                            while s < t:
                                require s
                                s = (ext_call.return_data[0] - block.timestamp / s) + s / 2
                                t = s
                                continue 
                            if not t:
                                _17579 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_17579] = 26
                                mem[_17579 + 32] = 'SafeMath: division by zero'
                                if not ext_call.return_data[0]:
                                    _17631 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 26
                                    idx = 0
                                    while idx < 26:
                                        mem[idx + _17631 + 68] = mem[idx + _17579 + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_17631 + 68] = mem[_17631 + 74 len 26]
                                    revert with memory
                                      from mem[64]
                                       len _17631 + -mem[64] + 100
                                if (0 / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) < 0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]):
                                    revert with 0, 'SafeMath: addition overflow'
                                _17951 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_17951] = 30
                                mem[_17951 + 32] = 'SafeMath: subtraction overflow'
                                if (0 / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) > 10^18:
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    mem[mem[64] + 68] = 'SafeMath: subtraction overflow'
                                    idx = 32
                                    while idx < 30:
                                        mem[idx + mem[64] + 68] = mem[idx + _17951 + 32]
                                        idx = idx + 32
                                        continue 
                                    revert with 0, 'SafeMath: subtraction overflow'
                                require ext_code.size(address(_11355))
                                staticcall address(_11355).0x180f5842 with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(address(ext_call.return_data[0]))
                                staticcall address(ext_call.return_data[0]).0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(address(_11355))
                                staticcall address(_11355).wToken() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                mem[mem[64] + 4] = this.address
                                require ext_code.size(address(ext_call.return_data[0]))
                                staticcall address(ext_call.return_data[0]).0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0]:
                                    if not ext_call.return_data[0]:
                                        _19259 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_19259] = 26
                                        mem[_19259 + 32] = 'SafeMath: division by zero'
                                    else:
                                        if (0 / ext_call.return_data[0] * ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) / ext_call.return_data[0] != (0 / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])):
                                            revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                        _19355 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_19355] = 26
                                        mem[_19355 + 32] = 'SafeMath: division by zero'
                                        if (0 / ext_call.return_data[0] * ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) / 10^18 < 0:
                                            revert with 0, 'SafeMath: addition overflow'
                                else:
                                    if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) - (0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) / ext_call.return_data[0] != -(0 / ext_call.return_data[0]) + -(0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18:
                                        revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                    if not ext_call.return_data[0]:
                                        if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) - (0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) < 0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _19354 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_19354] = 26
                                        mem[_19354 + 32] = 'SafeMath: division by zero'
                                        if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) - (0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) / 10^18 < 0:
                                            revert with 0, 'SafeMath: addition overflow'
                                    else:
                                        if (0 / ext_call.return_data[0] * ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) / ext_call.return_data[0] != (0 / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])):
                                            revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                        if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) - (0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) < 0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _19445 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_19445] = 26
                                        mem[_19445 + 32] = 'SafeMath: division by zero'
                                        if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) - (0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) + (0 / ext_call.return_data[0] * ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) / 10^18 < 0:
                                            revert with 0, 'SafeMath: addition overflow'
                            else:
                                if volatilityFactor * t / t != volatilityFactor:
                                    revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                if not volatilityFactor * t:
                                    _17603 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_17603] = 26
                                    mem[_17603 + 32] = 'SafeMath: division by zero'
                                    if not ext_call.return_data[0]:
                                        _17673 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 26
                                        idx = 0
                                        while idx < 26:
                                            mem[idx + _17673 + 68] = mem[idx + _17603 + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_17673 + 68] = mem[_17673 + 74 len 26]
                                        revert with memory
                                          from mem[64]
                                           len _17673 + -mem[64] + 100
                                    if (0 / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) < 0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]):
                                        revert with 0, 'SafeMath: addition overflow'
                                    _17963 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_17963] = 30
                                    mem[_17963 + 32] = 'SafeMath: subtraction overflow'
                                    if (0 / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) > 10^18:
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        mem[mem[64] + 68] = 'SafeMath: subtraction overflow'
                                        idx = 32
                                        while idx < 30:
                                            mem[idx + mem[64] + 68] = mem[idx + _17963 + 32]
                                            idx = idx + 32
                                            continue 
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    require ext_code.size(address(_11355))
                                    staticcall address(_11355).0x180f5842 with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(address(ext_call.return_data[0]))
                                    staticcall address(ext_call.return_data[0]).0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(address(_11355))
                                    staticcall address(_11355).wToken() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[mem[64] + 4] = this.address
                                    require ext_code.size(address(ext_call.return_data[0]))
                                    staticcall address(ext_call.return_data[0]).0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        if not ext_call.return_data[0]:
                                            _19353 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_19353] = 26
                                            mem[_19353 + 32] = 'SafeMath: division by zero'
                                        else:
                                            if (0 / ext_call.return_data[0] * ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) / ext_call.return_data[0] != (0 / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])):
                                                revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                            _19444 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_19444] = 26
                                            mem[_19444 + 32] = 'SafeMath: division by zero'
                                            if (0 / ext_call.return_data[0] * ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) / 10^18 < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                    else:
                                        if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) - (0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) / ext_call.return_data[0] != -(0 / ext_call.return_data[0]) + -(0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18:
                                            revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                        if not ext_call.return_data[0]:
                                            if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) - (0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            _19443 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_19443] = 26
                                            mem[_19443 + 32] = 'SafeMath: division by zero'
                                            if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) - (0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) / 10^18 < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                        else:
                                            if (0 / ext_call.return_data[0] * ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) / ext_call.return_data[0] != (0 / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])):
                                                revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                            if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) - (0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            _19499 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_19499] = 26
                                            mem[_19499 + 32] = 'SafeMath: division by zero'
                                            if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) - (0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) + (0 / ext_call.return_data[0] * ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) / 10^18 < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                else:
                                    if 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / volatilityFactor * t != 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]):
                                        revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                    _17630 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_17630] = 26
                                    mem[_17630 + 32] = 'SafeMath: division by zero'
                                    if not ext_call.return_data[0]:
                                        _17714 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 26
                                        idx = 0
                                        while idx < 26:
                                            mem[idx + _17714 + 68] = mem[idx + _17630 + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_17714 + 68] = mem[_17714 + 74 len 26]
                                        revert with memory
                                          from mem[64]
                                           len _17714 + -mem[64] + 100
                                    if (0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) < 0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]):
                                        revert with 0, 'SafeMath: addition overflow'
                                    _17990 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_17990] = 30
                                    mem[_17990 + 32] = 'SafeMath: subtraction overflow'
                                    if (0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) > 10^18:
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        mem[mem[64] + 68] = 'SafeMath: subtraction overflow'
                                        idx = 32
                                        while idx < 30:
                                            mem[idx + mem[64] + 68] = mem[idx + _17990 + 32]
                                            idx = idx + 32
                                            continue 
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    require ext_code.size(address(_11355))
                                    staticcall address(_11355).0x180f5842 with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(address(ext_call.return_data[0]))
                                    staticcall address(ext_call.return_data[0]).0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(address(_11355))
                                    staticcall address(_11355).wToken() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[mem[64] + 4] = this.address
                                    require ext_code.size(address(ext_call.return_data[0]))
                                    staticcall address(ext_call.return_data[0]).0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        if not ext_call.return_data[0]:
                                            _19442 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_19442] = 26
                                            mem[_19442 + 32] = 'SafeMath: division by zero'
                                        else:
                                            if (0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0] * ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) / ext_call.return_data[0] != (0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])):
                                                revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                            _19498 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_19498] = 26
                                            mem[_19498 + 32] = 'SafeMath: division by zero'
                                            if (0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0] * ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) / 10^18 < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                    else:
                                        if (10^18 * ext_call.return_data[0]) - (0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0] * ext_call.return_data[0]) - (0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) / ext_call.return_data[0] != -(0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + -(0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18:
                                            revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                        if not ext_call.return_data[0]:
                                            if (10^18 * ext_call.return_data[0]) - (0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0] * ext_call.return_data[0]) - (0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            _19497 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_19497] = 26
                                            mem[_19497 + 32] = 'SafeMath: division by zero'
                                            if (10^18 * ext_call.return_data[0]) - (0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0] * ext_call.return_data[0]) - (0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) / 10^18 < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                        else:
                                            if (0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0] * ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) / ext_call.return_data[0] != (0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])):
                                                revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                            if (10^18 * ext_call.return_data[0]) - (0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0] * ext_call.return_data[0]) - (0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            _19523 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_19523] = 26
                                            mem[_19523 + 32] = 'SafeMath: division by zero'
                                            if (10^18 * ext_call.return_data[0]) - (0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0] * ext_call.return_data[0]) - (0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) + (0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0] * ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) / 10^18 < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                    else:
                        if (10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / (0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - ext_call.return_data[0] != 10^18:
                            revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                        _11805 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_11805] = 26
                        mem[_11805 + 32] = 'SafeMath: division by zero'
                        if not 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]):
                            _11831 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 26
                            idx = 0
                            while idx < 26:
                                mem[idx + _11831 + 68] = mem[idx + _11805 + 32]
                                idx = idx + 32
                                continue 
                            mem[_11831 + 68] = mem[_11831 + 74 len 26]
                            revert with memory
                              from mem[64]
                               len _11831 + -mem[64] + 100
                        if ext_call.return_data[0] - block.timestamp <= 3:
                            if not ext_call.return_data[0] - block.timestamp:
                                _12472 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_12472] = 26
                                mem[_12472 + 32] = 'SafeMath: division by zero'
                                if not ext_call.return_data[0]:
                                    _12689 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 26
                                    idx = 0
                                    while idx < 26:
                                        mem[idx + _12689 + 68] = mem[idx + _12472 + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_12689 + 68] = mem[_12689 + 74 len 26]
                                    revert with memory
                                      from mem[64]
                                       len _12689 + -mem[64] + 100
                                if (0 / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) < (10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]):
                                    revert with 0, 'SafeMath: addition overflow'
                                _13610 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_13610] = 30
                                mem[_13610 + 32] = 'SafeMath: subtraction overflow'
                                if (0 / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) > 10^18:
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    mem[mem[64] + 68] = 'SafeMath: subtraction overflow'
                                    idx = 32
                                    while idx < 30:
                                        mem[idx + mem[64] + 68] = mem[idx + _13610 + 32]
                                        idx = idx + 32
                                        continue 
                                    revert with 0, 'SafeMath: subtraction overflow'
                                require ext_code.size(address(_11355))
                                staticcall address(_11355).0x180f5842 with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(address(ext_call.return_data[0]))
                                staticcall address(ext_call.return_data[0]).0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(address(_11355))
                                staticcall address(_11355).wToken() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                mem[mem[64] + 4] = this.address
                                require ext_code.size(address(ext_call.return_data[0]))
                                staticcall address(ext_call.return_data[0]).0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0]:
                                    if not ext_call.return_data[0]:
                                        _16218 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_16218] = 26
                                        mem[_16218 + 32] = 'SafeMath: division by zero'
                                    else:
                                        if (0 / ext_call.return_data[0] * ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) / ext_call.return_data[0] != (0 / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])):
                                            revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                        _16323 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_16323] = 26
                                        mem[_16323 + 32] = 'SafeMath: division by zero'
                                        if (0 / ext_call.return_data[0] * ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) / 10^18 < 0:
                                            revert with 0, 'SafeMath: addition overflow'
                                else:
                                    if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) - ((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) / ext_call.return_data[0] != -(0 / ext_call.return_data[0]) + -((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18:
                                        revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                    if not ext_call.return_data[0]:
                                        if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) - ((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) < 0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _16322 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_16322] = 26
                                        mem[_16322 + 32] = 'SafeMath: division by zero'
                                        if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) - ((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) / 10^18 < 0:
                                            revert with 0, 'SafeMath: addition overflow'
                                    else:
                                        if (0 / ext_call.return_data[0] * ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) / ext_call.return_data[0] != (0 / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])):
                                            revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                        if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) - ((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) < 0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _16431 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_16431] = 26
                                        mem[_16431 + 32] = 'SafeMath: division by zero'
                                        if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) - ((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) + (0 / ext_call.return_data[0] * ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) / 10^18 < 0:
                                            revert with 0, 'SafeMath: addition overflow'
                            else:
                                if volatilityFactor != volatilityFactor:
                                    revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                if not volatilityFactor:
                                    _12570 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_12570] = 26
                                    mem[_12570 + 32] = 'SafeMath: division by zero'
                                    if not ext_call.return_data[0]:
                                        _12814 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 26
                                        idx = 0
                                        while idx < 26:
                                            mem[idx + _12814 + 68] = mem[idx + _12570 + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_12814 + 68] = mem[_12814 + 74 len 26]
                                        revert with memory
                                          from mem[64]
                                           len _12814 + -mem[64] + 100
                                    if (0 / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) < (10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]):
                                        revert with 0, 'SafeMath: addition overflow'
                                    _13678 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_13678] = 30
                                    mem[_13678 + 32] = 'SafeMath: subtraction overflow'
                                    if (0 / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) > 10^18:
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        mem[mem[64] + 68] = 'SafeMath: subtraction overflow'
                                        idx = 32
                                        while idx < 30:
                                            mem[idx + mem[64] + 68] = mem[idx + _13678 + 32]
                                            idx = idx + 32
                                            continue 
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    require ext_code.size(address(_11355))
                                    staticcall address(_11355).0x180f5842 with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(address(ext_call.return_data[0]))
                                    staticcall address(ext_call.return_data[0]).0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(address(_11355))
                                    staticcall address(_11355).wToken() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[mem[64] + 4] = this.address
                                    require ext_code.size(address(ext_call.return_data[0]))
                                    staticcall address(ext_call.return_data[0]).0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        if not ext_call.return_data[0]:
                                            _16330 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_16330] = 26
                                            mem[_16330 + 32] = 'SafeMath: division by zero'
                                        else:
                                            if (0 / ext_call.return_data[0] * ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) / ext_call.return_data[0] != (0 / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])):
                                                revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                            _16436 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_16436] = 26
                                            mem[_16436 + 32] = 'SafeMath: division by zero'
                                            if (0 / ext_call.return_data[0] * ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) / 10^18 < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                    else:
                                        if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) - ((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) / ext_call.return_data[0] != -(0 / ext_call.return_data[0]) + -((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18:
                                            revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                        if not ext_call.return_data[0]:
                                            if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) - ((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            _16435 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_16435] = 26
                                            mem[_16435 + 32] = 'SafeMath: division by zero'
                                            if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) - ((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) / 10^18 < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                        else:
                                            if (0 / ext_call.return_data[0] * ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) / ext_call.return_data[0] != (0 / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])):
                                                revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                            if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) - ((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            _16527 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_16527] = 26
                                            mem[_16527 + 32] = 'SafeMath: division by zero'
                                            if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) - ((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) + (0 / ext_call.return_data[0] * ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) / 10^18 < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                else:
                                    if 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / volatilityFactor != 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]):
                                        revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                    _12692 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_12692] = 26
                                    mem[_12692 + 32] = 'SafeMath: division by zero'
                                    if not ext_call.return_data[0]:
                                        _12931 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 26
                                        idx = 0
                                        while idx < 26:
                                            mem[idx + _12931 + 68] = mem[idx + _12692 + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_12931 + 68] = mem[_12931 + 74 len 26]
                                        revert with memory
                                          from mem[64]
                                           len _12931 + -mem[64] + 100
                                    if (0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) < (10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]):
                                        revert with 0, 'SafeMath: addition overflow'
                                    _13759 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_13759] = 30
                                    mem[_13759 + 32] = 'SafeMath: subtraction overflow'
                                    if (0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) > 10^18:
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        mem[mem[64] + 68] = 'SafeMath: subtraction overflow'
                                        idx = 32
                                        while idx < 30:
                                            mem[idx + mem[64] + 68] = mem[idx + _13759 + 32]
                                            idx = idx + 32
                                            continue 
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    require ext_code.size(address(_11355))
                                    staticcall address(_11355).0x180f5842 with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(address(ext_call.return_data[0]))
                                    staticcall address(ext_call.return_data[0]).0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(address(_11355))
                                    staticcall address(_11355).wToken() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[mem[64] + 4] = this.address
                                    require ext_code.size(address(ext_call.return_data[0]))
                                    staticcall address(ext_call.return_data[0]).0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        if not ext_call.return_data[0]:
                                            _16434 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_16434] = 26
                                            mem[_16434 + 32] = 'SafeMath: division by zero'
                                        else:
                                            if (0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0] * ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) / ext_call.return_data[0] != (0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])):
                                                revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                            _16526 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_16526] = 26
                                            mem[_16526 + 32] = 'SafeMath: division by zero'
                                            if (0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0] * ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) / 10^18 < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                    else:
                                        if (10^18 * ext_call.return_data[0]) - (0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0] * ext_call.return_data[0]) - ((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) / ext_call.return_data[0] != -(0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + -((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18:
                                            revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                        if not ext_call.return_data[0]:
                                            if (10^18 * ext_call.return_data[0]) - (0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0] * ext_call.return_data[0]) - ((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            _16525 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_16525] = 26
                                            mem[_16525 + 32] = 'SafeMath: division by zero'
                                            if (10^18 * ext_call.return_data[0]) - (0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0] * ext_call.return_data[0]) - ((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) / 10^18 < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                        else:
                                            if (0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0] * ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) / ext_call.return_data[0] != (0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])):
                                                revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                            if (10^18 * ext_call.return_data[0]) - (0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0] * ext_call.return_data[0]) - ((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            _16592 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_16592] = 26
                                            mem[_16592 + 32] = 'SafeMath: division by zero'
                                            if (10^18 * ext_call.return_data[0]) - (0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0] * ext_call.return_data[0]) - ((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) + (0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0] * ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) / 10^18 < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                        else:
                            s = (ext_call.return_data[0] - block.timestamp / 2) + 1
                            t = ext_call.return_data[0] - block.timestamp
                            while s < t:
                                require s
                                s = (ext_call.return_data[0] - block.timestamp / s) + s / 2
                                t = s
                                continue 
                            if not t:
                                _17576 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_17576] = 26
                                mem[_17576 + 32] = 'SafeMath: division by zero'
                                if not ext_call.return_data[0]:
                                    _17627 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 26
                                    idx = 0
                                    while idx < 26:
                                        mem[idx + _17627 + 68] = mem[idx + _17576 + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_17627 + 68] = mem[_17627 + 74 len 26]
                                    revert with memory
                                      from mem[64]
                                       len _17627 + -mem[64] + 100
                                if (0 / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) < (10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]):
                                    revert with 0, 'SafeMath: addition overflow'
                                _17950 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_17950] = 30
                                mem[_17950 + 32] = 'SafeMath: subtraction overflow'
                                if (0 / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) > 10^18:
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    mem[mem[64] + 68] = 'SafeMath: subtraction overflow'
                                    idx = 32
                                    while idx < 30:
                                        mem[idx + mem[64] + 68] = mem[idx + _17950 + 32]
                                        idx = idx + 32
                                        continue 
                                    revert with 0, 'SafeMath: subtraction overflow'
                                require ext_code.size(address(_11355))
                                staticcall address(_11355).0x180f5842 with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(address(ext_call.return_data[0]))
                                staticcall address(ext_call.return_data[0]).0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(address(_11355))
                                staticcall address(_11355).wToken() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                mem[mem[64] + 4] = this.address
                                require ext_code.size(address(ext_call.return_data[0]))
                                staticcall address(ext_call.return_data[0]).0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0]:
                                    if not ext_call.return_data[0]:
                                        _19252 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_19252] = 26
                                        mem[_19252 + 32] = 'SafeMath: division by zero'
                                    else:
                                        if (0 / ext_call.return_data[0] * ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) / ext_call.return_data[0] != (0 / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])):
                                            revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                        _19346 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_19346] = 26
                                        mem[_19346 + 32] = 'SafeMath: division by zero'
                                        if (0 / ext_call.return_data[0] * ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) / 10^18 < 0:
                                            revert with 0, 'SafeMath: addition overflow'
                                else:
                                    if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) - ((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) / ext_call.return_data[0] != -(0 / ext_call.return_data[0]) + -((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18:
                                        revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                    if not ext_call.return_data[0]:
                                        if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) - ((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) < 0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _19345 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_19345] = 26
                                        mem[_19345 + 32] = 'SafeMath: division by zero'
                                        if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) - ((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) / 10^18 < 0:
                                            revert with 0, 'SafeMath: addition overflow'
                                    else:
                                        if (0 / ext_call.return_data[0] * ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) / ext_call.return_data[0] != (0 / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])):
                                            revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                        if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) - ((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) < 0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _19439 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_19439] = 26
                                        mem[_19439 + 32] = 'SafeMath: division by zero'
                                        if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) - ((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) + (0 / ext_call.return_data[0] * ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) / 10^18 < 0:
                                            revert with 0, 'SafeMath: addition overflow'
                            else:
                                if volatilityFactor * t / t != volatilityFactor:
                                    revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                if not volatilityFactor * t:
                                    _17602 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_17602] = 26
                                    mem[_17602 + 32] = 'SafeMath: division by zero'
                                    if not ext_call.return_data[0]:
                                        _17670 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 26
                                        idx = 0
                                        while idx < 26:
                                            mem[idx + _17670 + 68] = mem[idx + _17602 + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_17670 + 68] = mem[_17670 + 74 len 26]
                                        revert with memory
                                          from mem[64]
                                           len _17670 + -mem[64] + 100
                                    if (0 / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) < (10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]):
                                        revert with 0, 'SafeMath: addition overflow'
                                    _17962 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_17962] = 30
                                    mem[_17962 + 32] = 'SafeMath: subtraction overflow'
                                    if (0 / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) > 10^18:
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        mem[mem[64] + 68] = 'SafeMath: subtraction overflow'
                                        idx = 32
                                        while idx < 30:
                                            mem[idx + mem[64] + 68] = mem[idx + _17962 + 32]
                                            idx = idx + 32
                                            continue 
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    require ext_code.size(address(_11355))
                                    staticcall address(_11355).0x180f5842 with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(address(ext_call.return_data[0]))
                                    staticcall address(ext_call.return_data[0]).0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(address(_11355))
                                    staticcall address(_11355).wToken() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[mem[64] + 4] = this.address
                                    require ext_code.size(address(ext_call.return_data[0]))
                                    staticcall address(ext_call.return_data[0]).0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        if not ext_call.return_data[0]:
                                            _19344 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_19344] = 26
                                            mem[_19344 + 32] = 'SafeMath: division by zero'
                                        else:
                                            if (0 / ext_call.return_data[0] * ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) / ext_call.return_data[0] != (0 / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])):
                                                revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                            _19438 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_19438] = 26
                                            mem[_19438 + 32] = 'SafeMath: division by zero'
                                            if (0 / ext_call.return_data[0] * ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) / 10^18 < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                    else:
                                        if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) - ((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) / ext_call.return_data[0] != -(0 / ext_call.return_data[0]) + -((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18:
                                            revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                        if not ext_call.return_data[0]:
                                            if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) - ((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            _19437 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_19437] = 26
                                            mem[_19437 + 32] = 'SafeMath: division by zero'
                                            if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) - ((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) / 10^18 < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                        else:
                                            if (0 / ext_call.return_data[0] * ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) / ext_call.return_data[0] != (0 / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])):
                                                revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                            if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) - ((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            _19496 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_19496] = 26
                                            mem[_19496 + 32] = 'SafeMath: division by zero'
                                            if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) - ((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) + (0 / ext_call.return_data[0] * ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) / 10^18 < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                else:
                                    if 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / volatilityFactor * t != 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]):
                                        revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                    _17626 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_17626] = 26
                                    mem[_17626 + 32] = 'SafeMath: division by zero'
                                    if not ext_call.return_data[0]:
                                        _17710 = mem[64]
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 26
                                        idx = 0
                                        while idx < 26:
                                            mem[idx + _17710 + 68] = mem[idx + _17626 + 32]
                                            idx = idx + 32
                                            continue 
                                        mem[_17710 + 68] = mem[_17710 + 74 len 26]
                                        revert with memory
                                          from mem[64]
                                           len _17710 + -mem[64] + 100
                                    if (0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) < (10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]):
                                        revert with 0, 'SafeMath: addition overflow'
                                    _17986 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_17986] = 30
                                    mem[_17986 + 32] = 'SafeMath: subtraction overflow'
                                    if (0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) > 10^18:
                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = 32
                                        mem[mem[64] + 36] = 30
                                        mem[mem[64] + 68] = 'SafeMath: subtraction overflow'
                                        idx = 32
                                        while idx < 30:
                                            mem[idx + mem[64] + 68] = mem[idx + _17986 + 32]
                                            idx = idx + 32
                                            continue 
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    require ext_code.size(address(_11355))
                                    staticcall address(_11355).0x180f5842 with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(address(ext_call.return_data[0]))
                                    staticcall address(ext_call.return_data[0]).0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(address(_11355))
                                    staticcall address(_11355).wToken() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[mem[64] + 4] = this.address
                                    require ext_code.size(address(ext_call.return_data[0]))
                                    staticcall address(ext_call.return_data[0]).0x70a08231 with:
                                            gas gas_remaining wei
                                           args this.address
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        if not ext_call.return_data[0]:
                                            _19436 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_19436] = 26
                                            mem[_19436 + 32] = 'SafeMath: division by zero'
                                        else:
                                            if (0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0] * ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) / ext_call.return_data[0] != (0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])):
                                                revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                            _19495 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_19495] = 26
                                            mem[_19495 + 32] = 'SafeMath: division by zero'
                                            if (0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0] * ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) / 10^18 < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                    else:
                                        if (10^18 * ext_call.return_data[0]) - (0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0] * ext_call.return_data[0]) - ((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) / ext_call.return_data[0] != -(0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + -((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18:
                                            revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                        if not ext_call.return_data[0]:
                                            if (10^18 * ext_call.return_data[0]) - (0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0] * ext_call.return_data[0]) - ((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            _19494 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_19494] = 26
                                            mem[_19494 + 32] = 'SafeMath: division by zero'
                                            if (10^18 * ext_call.return_data[0]) - (0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0] * ext_call.return_data[0]) - ((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) / 10^18 < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                        else:
                                            if (0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0] * ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) / ext_call.return_data[0] != (0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])):
                                                revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                            if (10^18 * ext_call.return_data[0]) - (0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0] * ext_call.return_data[0]) - ((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            _19522 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_19522] = 26
                                            mem[_19522 + 32] = 'SafeMath: division by zero'
                                            if (10^18 * ext_call.return_data[0]) - (0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0] * ext_call.return_data[0]) - ((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) + (0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0] * ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) / 10^18 < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                idx = idx + 1
                continue 
            require ext_code.size(paymentTokenAddress)
            staticcall paymentTokenAddress.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0]:
                if not 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]):
                    revert with 0, 'SafeMath: division by zero'
                require ext_code.size(collateralTokenAddress)
                staticcall collateralTokenAddress.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if 0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if ext_call.return_data[0] + (0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) < 0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]):
                    revert with 0, 'SafeMath: addition overflow'
                return (ext_call.return_data[0] + (0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])))
            if 10^18 * ext_call.return_data[0] / ext_call.return_data[0] != 10^18:
                revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
            if not 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]):
                revert with 0, 'SafeMath: division by zero'
            require ext_code.size(collateralTokenAddress)
            staticcall collateralTokenAddress.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if 10^18 * ext_call.return_data[0] / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) < 0:
                revert with 0, 'SafeMath: addition overflow'
            if ext_call.return_data[0] + (10^18 * ext_call.return_data[0] / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) < 10^18 * ext_call.return_data[0] / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]):
                revert with 0, 'SafeMath: addition overflow'
            return (ext_call.return_data[0] + (10^18 * ext_call.return_data[0] / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])))
        if 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^18 * 10^uint8(stor153.field_168) != ext_call.return_data[32]:
            revert with 0, 32, 33, code.data[21823 len 33], ext_call.return_data[101 len 31]
        mem[(32 * _7) + ceil32(return_data.size) + 128] = 26
        mem[(32 * _7) + ceil32(return_data.size) + 160] = 'SafeMath: division by zero'
        if not 10^uint8(stor153.field_160):
            revert with 0, 'SafeMath: division by zero'
        mem[64] = (32 * _7) + ceil32(return_data.size) + 256
        mem[(32 * _7) + ceil32(return_data.size) + 192] = 26
        mem[(32 * _7) + ceil32(return_data.size) + 224] = 'SafeMath: division by zero'
        if not 10^uint8(ext_call.return_data[0]):
            revert with 0, 'SafeMath: division by zero'
        _11326 = mem[ceil32(return_data.size) + 96]
        idx = 0
        while idx < _11326:
            require idx < mem[ceil32(return_data.size) + 96]
            _11350 = mem[(32 * idx) + ceil32(return_data.size) + 128]
            require ext_code.size(mem[(32 * idx) + ceil32(return_data.size) + 140 len 20])
            staticcall mem[(32 * idx) + ceil32(return_data.size) + 140 len 20].0xc19d93fb with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] <= 2
            if ext_call.return_data[0]:
                if not arg1:
                    idx = idx + 1
                    continue 
                require ext_code.size(address(_11350))
                staticcall address(_11350).0xc19d93fb with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] <= 2
                if ext_call.return_data[0] != 1:
                    idx = idx + 1
                    continue 
                require ext_code.size(address(_11350))
                staticcall address(_11350).wToken() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                mem[mem[64] + 4] = this.address
                require ext_code.size(address(ext_call.return_data[0]))
                staticcall address(ext_call.return_data[0]).0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(address(_11350))
                staticcall address(_11350).wToken() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(address(ext_call.return_data[0]))
                staticcall address(ext_call.return_data[0]).0x18160ddd with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0]:
                    idx = idx + 1
                    continue 
                if not ext_call.return_data[0]:
                    idx = idx + 1
                    continue 
                require ext_code.size(collateralTokenAddress)
                staticcall collateralTokenAddress.0x70a08231 with:
                        gas gas_remaining wei
                       args address(_11350)
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0]:
                    _11902 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_11902] = 26
                    mem[_11902 + 32] = 'SafeMath: division by zero'
                    if not ext_call.return_data[0]:
                        _11974 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 26
                        idx = 0
                        while idx < 26:
                            mem[idx + _11974 + 68] = mem[idx + _11902 + 32]
                            idx = idx + 32
                            continue 
                        mem[_11974 + 68] = mem[_11974 + 74 len 26]
                        revert with memory
                          from mem[64]
                           len _11974 + -mem[64] + 100
                    mem[mem[64] + 4] = address(_11350)
                    require ext_code.size(paymentTokenAddress)
                    staticcall paymentTokenAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args address(_11350)
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0]:
                        _12364 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_12364] = 26
                        mem[_12364 + 32] = 'SafeMath: division by zero'
                        if not ext_call.return_data[0]:
                            _12523 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 26
                            idx = 0
                            while idx < 26:
                                mem[idx + _12523 + 68] = mem[idx + _12364 + 32]
                                idx = idx + 32
                                continue 
                            mem[_12523 + 68] = mem[_12523 + 74 len 26]
                            revert with memory
                              from mem[64]
                               len _12523 + -mem[64] + 100
                        if not 0 / ext_call.return_data[0]:
                            _13426 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_13426] = 26
                            mem[_13426 + 32] = 'SafeMath: division by zero'
                            if 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]):
                                if 0 / ext_call.return_data[0] < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                                if (0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + (0 / ext_call.return_data[0]) < 0 / ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: addition overflow'
                                idx = idx + 1
                                continue 
                            _13585 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 26
                            idx = 0
                            while idx < 26:
                                mem[idx + _13585 + 68] = mem[idx + _13426 + 32]
                                idx = idx + 32
                                continue 
                            mem[_13585 + 68] = mem[_13585 + 74 len 26]
                            revert with memory
                              from mem[64]
                               len _13585 + -mem[64] + 100
                        if 10^18 * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != 10^18:
                            revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                        _13518 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_13518] = 26
                        mem[_13518 + 32] = 'SafeMath: division by zero'
                        if 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]):
                            if 0 / ext_call.return_data[0] < 0:
                                revert with 0, 'SafeMath: addition overflow'
                            if (10^18 * 0 / ext_call.return_data[0] / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + (0 / ext_call.return_data[0]) < 0 / ext_call.return_data[0]:
                                revert with 0, 'SafeMath: addition overflow'
                            idx = idx + 1
                            continue 
                        _13653 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 26
                        idx = 0
                        while idx < 26:
                            mem[idx + _13653 + 68] = mem[idx + _13518 + 32]
                            idx = idx + 32
                            continue 
                        mem[_13653 + 68] = mem[_13653 + 74 len 26]
                        revert with memory
                          from mem[64]
                           len _13653 + -mem[64] + 100
                    if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                        revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                    _12431 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_12431] = 26
                    mem[_12431 + 32] = 'SafeMath: division by zero'
                    if not ext_call.return_data[0]:
                        _12637 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 26
                        idx = 0
                        while idx < 26:
                            mem[idx + _12637 + 68] = mem[idx + _12431 + 32]
                            idx = idx + 32
                            continue 
                        mem[_12637 + 68] = mem[_12637 + 74 len 26]
                        revert with memory
                          from mem[64]
                           len _12637 + -mem[64] + 100
                    if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                        _13517 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_13517] = 26
                        mem[_13517 + 32] = 'SafeMath: division by zero'
                        if 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]):
                            if 0 / ext_call.return_data[0] < 0:
                                revert with 0, 'SafeMath: addition overflow'
                            if (0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + (0 / ext_call.return_data[0]) < 0 / ext_call.return_data[0]:
                                revert with 0, 'SafeMath: addition overflow'
                            idx = idx + 1
                            continue 
                        _13650 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 26
                        idx = 0
                        while idx < 26:
                            mem[idx + _13650 + 68] = mem[idx + _13517 + 32]
                            idx = idx + 32
                            continue 
                        mem[_13650 + 68] = mem[_13650 + 74 len 26]
                        revert with memory
                          from mem[64]
                           len _13650 + -mem[64] + 100
                    if 10^18 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != 10^18:
                        revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                    _13584 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_13584] = 26
                    mem[_13584 + 32] = 'SafeMath: division by zero'
                    if 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]):
                        if 0 / ext_call.return_data[0] < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        if (10^18 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + (0 / ext_call.return_data[0]) < 0 / ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        idx = idx + 1
                        continue 
                    _13728 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 26
                    idx = 0
                    while idx < 26:
                        mem[idx + _13728 + 68] = mem[idx + _13584 + 32]
                        idx = idx + 32
                        continue 
                    mem[_13728 + 68] = mem[_13728 + 74 len 26]
                    revert with memory
                      from mem[64]
                       len _13728 + -mem[64] + 100
                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                _11934 = mem[64]
                mem[64] = mem[64] + 64
                mem[_11934] = 26
                mem[_11934 + 32] = 'SafeMath: division by zero'
                if not ext_call.return_data[0]:
                    _12010 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 26
                    idx = 0
                    while idx < 26:
                        mem[idx + _12010 + 68] = mem[idx + _11934 + 32]
                        idx = idx + 32
                        continue 
                    mem[_12010 + 68] = mem[_12010 + 74 len 26]
                    revert with memory
                      from mem[64]
                       len _12010 + -mem[64] + 100
                mem[mem[64] + 4] = address(_11350)
                require ext_code.size(paymentTokenAddress)
                staticcall paymentTokenAddress.0x70a08231 with:
                        gas gas_remaining wei
                       args address(_11350)
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0]:
                    _12430 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_12430] = 26
                    mem[_12430 + 32] = 'SafeMath: division by zero'
                    if not ext_call.return_data[0]:
                        _12634 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 26
                        idx = 0
                        while idx < 26:
                            mem[idx + _12634 + 68] = mem[idx + _12430 + 32]
                            idx = idx + 32
                            continue 
                        mem[_12634 + 68] = mem[_12634 + 74 len 26]
                        revert with memory
                          from mem[64]
                           len _12634 + -mem[64] + 100
                    if not 0 / ext_call.return_data[0]:
                        _13516 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_13516] = 26
                        mem[_13516 + 32] = 'SafeMath: division by zero'
                        if 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]):
                            if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] < 0:
                                revert with 0, 'SafeMath: addition overflow'
                            if (0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) < ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                                revert with 0, 'SafeMath: addition overflow'
                            idx = idx + 1
                            continue 
                        _13647 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 26
                        idx = 0
                        while idx < 26:
                            mem[idx + _13647 + 68] = mem[idx + _13516 + 32]
                            idx = idx + 32
                            continue 
                        mem[_13647 + 68] = mem[_13647 + 74 len 26]
                        revert with memory
                          from mem[64]
                           len _13647 + -mem[64] + 100
                    if 10^18 * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != 10^18:
                        revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                    _13583 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_13583] = 26
                    mem[_13583 + 32] = 'SafeMath: division by zero'
                    if 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]):
                        if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        if (10^18 * 0 / ext_call.return_data[0] / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) < ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        idx = idx + 1
                        continue 
                    _13725 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 26
                    idx = 0
                    while idx < 26:
                        mem[idx + _13725 + 68] = mem[idx + _13583 + 32]
                        idx = idx + 32
                        continue 
                    mem[_13725 + 68] = mem[_13725 + 74 len 26]
                    revert with memory
                      from mem[64]
                       len _13725 + -mem[64] + 100
                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                _12522 = mem[64]
                mem[64] = mem[64] + 64
                mem[_12522] = 26
                mem[_12522 + 32] = 'SafeMath: division by zero'
                if not ext_call.return_data[0]:
                    _12766 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 26
                    idx = 0
                    while idx < 26:
                        mem[idx + _12766 + 68] = mem[idx + _12522 + 32]
                        idx = idx + 32
                        continue 
                    mem[_12766 + 68] = mem[_12766 + 74 len 26]
                    revert with memory
                      from mem[64]
                       len _12766 + -mem[64] + 100
                if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                    _13582 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_13582] = 26
                    mem[_13582 + 32] = 'SafeMath: division by zero'
                    if 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]):
                        if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        if (0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) < ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        idx = idx + 1
                        continue 
                    _13722 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 26
                    idx = 0
                    while idx < 26:
                        mem[idx + _13722 + 68] = mem[idx + _13582 + 32]
                        idx = idx + 32
                        continue 
                    mem[_13722 + 68] = mem[_13722 + 74 len 26]
                    revert with memory
                      from mem[64]
                       len _13722 + -mem[64] + 100
                if 10^18 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != 10^18:
                    revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                _13646 = mem[64]
                mem[64] = mem[64] + 64
                mem[_13646] = 26
                mem[_13646 + 32] = 'SafeMath: division by zero'
                if 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]):
                    if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if (10^18 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) < ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    idx = idx + 1
                    continue 
                _13810 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 26
                idx = 0
                while idx < 26:
                    mem[idx + _13810 + 68] = mem[idx + _13646 + 32]
                    idx = idx + 32
                    continue 
                mem[_13810 + 68] = mem[_13810 + 74 len 26]
                revert with memory
                  from mem[64]
                   len _13810 + -mem[64] + 100
            require ext_code.size(address(_11350))
            staticcall address(_11350).0x8f620487 with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            _11475 = mem[64]
            mem[64] = mem[64] + 64
            mem[_11475] = 30
            mem[_11475 + 32] = 'SafeMath: subtraction overflow'
            if block.timestamp > ext_call.return_data[0]:
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 30
                mem[mem[64] + 68] = 'SafeMath: subtraction overflow'
                idx = 32
                while idx < 30:
                    mem[idx + mem[64] + 68] = mem[idx + _11475 + 32]
                    idx = idx + 32
                    continue 
                revert with 0, 'SafeMath: subtraction overflow'
            require ext_code.size(address(_11350))
            staticcall address(_11350).priceRatio() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) <= ext_call.return_data[0]:
                if ext_call.return_data[0] - block.timestamp <= 3:
                    if not ext_call.return_data[0] - block.timestamp:
                        _11822 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_11822] = 26
                        mem[_11822 + 32] = 'SafeMath: division by zero'
                        if not ext_call.return_data[0]:
                            _11856 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 26
                            idx = 0
                            while idx < 26:
                                mem[idx + _11856 + 68] = mem[idx + _11822 + 32]
                                idx = idx + 32
                                continue 
                            mem[_11856 + 68] = mem[_11856 + 74 len 26]
                            revert with memory
                              from mem[64]
                               len _11856 + -mem[64] + 100
                        if 0 / ext_call.return_data[0] < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        _12208 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_12208] = 30
                        mem[_12208 + 32] = 'SafeMath: subtraction overflow'
                        if 0 / ext_call.return_data[0] > 10^18:
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            mem[mem[64] + 68] = 'SafeMath: subtraction overflow'
                            idx = 32
                            while idx < 30:
                                mem[idx + mem[64] + 68] = mem[idx + _12208 + 32]
                                idx = idx + 32
                                continue 
                            revert with 0, 'SafeMath: subtraction overflow'
                        require ext_code.size(address(_11350))
                        staticcall address(_11350).0x180f5842 with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(address(_11350))
                        staticcall address(_11350).wToken() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            if not ext_call.return_data[0]:
                                _15042 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_15042] = 26
                                mem[_15042 + 32] = 'SafeMath: division by zero'
                            else:
                                if 0 / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != 0 / ext_call.return_data[0]:
                                    revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                if 0 / ext_call.return_data[0] * ext_call.return_data[0] < 0 / ext_call.return_data[0] * ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: addition overflow'
                                _15159 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_15159] = 26
                                mem[_15159 + 32] = 'SafeMath: division by zero'
                                if 0 / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                        else:
                            if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] != -(0 / ext_call.return_data[0]) + 10^18:
                                revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                            if not ext_call.return_data[0]:
                                if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                                _15158 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_15158] = 26
                                mem[_15158 + 32] = 'SafeMath: division by zero'
                                if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) / 10^18 < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                            else:
                                if 0 / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != 0 / ext_call.return_data[0]:
                                    revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) + (0 / ext_call.return_data[0] * ext_call.return_data[0]) < 0 / ext_call.return_data[0] * ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: addition overflow'
                                _15282 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_15282] = 26
                                mem[_15282 + 32] = 'SafeMath: division by zero'
                                if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) + (0 / ext_call.return_data[0] * ext_call.return_data[0]) / 10^18 < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                    else:
                        if volatilityFactor != volatilityFactor:
                            revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                        if not volatilityFactor:
                            _11846 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_11846] = 26
                            mem[_11846 + 32] = 'SafeMath: division by zero'
                            if not ext_call.return_data[0]:
                                _11903 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 26
                                idx = 0
                                while idx < 26:
                                    mem[idx + _11903 + 68] = mem[idx + _11846 + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_11903 + 68] = mem[_11903 + 74 len 26]
                                revert with memory
                                  from mem[64]
                                   len _11903 + -mem[64] + 100
                            if 0 / ext_call.return_data[0] < 0:
                                revert with 0, 'SafeMath: addition overflow'
                            _12235 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_12235] = 30
                            mem[_12235 + 32] = 'SafeMath: subtraction overflow'
                            if 0 / ext_call.return_data[0] > 10^18:
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                mem[mem[64] + 68] = 'SafeMath: subtraction overflow'
                                idx = 32
                                while idx < 30:
                                    mem[idx + mem[64] + 68] = mem[idx + _12235 + 32]
                                    idx = idx + 32
                                    continue 
                                revert with 0, 'SafeMath: subtraction overflow'
                            require ext_code.size(address(_11350))
                            staticcall address(_11350).0x180f5842 with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(address(ext_call.return_data[0]))
                            staticcall address(ext_call.return_data[0]).0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(address(_11350))
                            staticcall address(_11350).wToken() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(address(ext_call.return_data[0]))
                            staticcall address(ext_call.return_data[0]).0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                if not ext_call.return_data[0]:
                                    _15166 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_15166] = 26
                                    mem[_15166 + 32] = 'SafeMath: division by zero'
                                else:
                                    if 0 / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != 0 / ext_call.return_data[0]:
                                        revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                    if 0 / ext_call.return_data[0] * ext_call.return_data[0] < 0 / ext_call.return_data[0] * ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _15287 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_15287] = 26
                                    mem[_15287 + 32] = 'SafeMath: division by zero'
                                    if 0 / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                            else:
                                if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] != -(0 / ext_call.return_data[0]) + 10^18:
                                    revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                if not ext_call.return_data[0]:
                                    if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _15286 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_15286] = 26
                                    mem[_15286 + 32] = 'SafeMath: division by zero'
                                    if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) / 10^18 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                else:
                                    if 0 / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != 0 / ext_call.return_data[0]:
                                        revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                    if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) + (0 / ext_call.return_data[0] * ext_call.return_data[0]) < 0 / ext_call.return_data[0] * ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _15400 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_15400] = 26
                                    mem[_15400 + 32] = 'SafeMath: division by zero'
                                    if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) + (0 / ext_call.return_data[0] * ext_call.return_data[0]) / 10^18 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                        else:
                            if 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / volatilityFactor != 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]):
                                revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                            _11859 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_11859] = 26
                            mem[_11859 + 32] = 'SafeMath: division by zero'
                            if not ext_call.return_data[0]:
                                _11936 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 26
                                idx = 0
                                while idx < 26:
                                    mem[idx + _11936 + 68] = mem[idx + _11859 + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_11936 + 68] = mem[_11936 + 74 len 26]
                                revert with memory
                                  from mem[64]
                                   len _11936 + -mem[64] + 100
                            if 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0] < 0:
                                revert with 0, 'SafeMath: addition overflow'
                            _12253 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_12253] = 30
                            mem[_12253 + 32] = 'SafeMath: subtraction overflow'
                            if 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0] > 10^18:
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                mem[mem[64] + 68] = 'SafeMath: subtraction overflow'
                                idx = 32
                                while idx < 30:
                                    mem[idx + mem[64] + 68] = mem[idx + _12253 + 32]
                                    idx = idx + 32
                                    continue 
                                revert with 0, 'SafeMath: subtraction overflow'
                            require ext_code.size(address(_11350))
                            staticcall address(_11350).0x180f5842 with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(address(ext_call.return_data[0]))
                            staticcall address(ext_call.return_data[0]).0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(address(_11350))
                            staticcall address(_11350).wToken() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(address(ext_call.return_data[0]))
                            staticcall address(ext_call.return_data[0]).0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                if not ext_call.return_data[0]:
                                    _15285 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_15285] = 26
                                    mem[_15285 + 32] = 'SafeMath: division by zero'
                                else:
                                    if 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]:
                                        revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                    if 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0] * ext_call.return_data[0] < 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0] * ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _15399 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_15399] = 26
                                    mem[_15399 + 32] = 'SafeMath: division by zero'
                                    if 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                            else:
                                if (10^18 * ext_call.return_data[0]) - (10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] != -(10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + 10^18:
                                    revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                if not ext_call.return_data[0]:
                                    if (10^18 * ext_call.return_data[0]) - (10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0] * ext_call.return_data[0]) < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _15398 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_15398] = 26
                                    mem[_15398 + 32] = 'SafeMath: division by zero'
                                    if (10^18 * ext_call.return_data[0]) - (10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0] * ext_call.return_data[0]) / 10^18 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                else:
                                    if 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]:
                                        revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                    if (10^18 * ext_call.return_data[0]) - (10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0] * ext_call.return_data[0]) + (10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0] * ext_call.return_data[0]) < 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0] * ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _15510 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_15510] = 26
                                    mem[_15510 + 32] = 'SafeMath: division by zero'
                                    if (10^18 * ext_call.return_data[0]) - (10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0] * ext_call.return_data[0]) + (10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0] * ext_call.return_data[0]) / 10^18 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                else:
                    s = (ext_call.return_data[0] - block.timestamp / 2) + 1
                    t = ext_call.return_data[0] - block.timestamp
                    while s < t:
                        require s
                        s = (ext_call.return_data[0] - block.timestamp / s) + s / 2
                        t = s
                        continue 
                    if not t:
                        _17564 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_17564] = 26
                        mem[_17564 + 32] = 'SafeMath: division by zero'
                        if not ext_call.return_data[0]:
                            _17611 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 26
                            idx = 0
                            while idx < 26:
                                mem[idx + _17611 + 68] = mem[idx + _17564 + 32]
                                idx = idx + 32
                                continue 
                            mem[_17611 + 68] = mem[_17611 + 74 len 26]
                            revert with memory
                              from mem[64]
                               len _17611 + -mem[64] + 100
                        if 0 / ext_call.return_data[0] < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        _17946 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_17946] = 30
                        mem[_17946 + 32] = 'SafeMath: subtraction overflow'
                        if 0 / ext_call.return_data[0] > 10^18:
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            mem[mem[64] + 68] = 'SafeMath: subtraction overflow'
                            idx = 32
                            while idx < 30:
                                mem[idx + mem[64] + 68] = mem[idx + _17946 + 32]
                                idx = idx + 32
                                continue 
                            revert with 0, 'SafeMath: subtraction overflow'
                        require ext_code.size(address(_11350))
                        staticcall address(_11350).0x180f5842 with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(address(_11350))
                        staticcall address(_11350).wToken() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            if not ext_call.return_data[0]:
                                _19224 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_19224] = 26
                                mem[_19224 + 32] = 'SafeMath: division by zero'
                            else:
                                if 0 / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != 0 / ext_call.return_data[0]:
                                    revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                if 0 / ext_call.return_data[0] * ext_call.return_data[0] < 0 / ext_call.return_data[0] * ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: addition overflow'
                                _19310 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_19310] = 26
                                mem[_19310 + 32] = 'SafeMath: division by zero'
                                if 0 / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                        else:
                            if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] != -(0 / ext_call.return_data[0]) + 10^18:
                                revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                            if not ext_call.return_data[0]:
                                if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                                _19309 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_19309] = 26
                                mem[_19309 + 32] = 'SafeMath: division by zero'
                                if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) / 10^18 < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                            else:
                                if 0 / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != 0 / ext_call.return_data[0]:
                                    revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) + (0 / ext_call.return_data[0] * ext_call.return_data[0]) < 0 / ext_call.return_data[0] * ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: addition overflow'
                                _19415 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_19415] = 26
                                mem[_19415 + 32] = 'SafeMath: division by zero'
                                if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) + (0 / ext_call.return_data[0] * ext_call.return_data[0]) / 10^18 < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                    else:
                        if volatilityFactor * t / t != volatilityFactor:
                            revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                        if not volatilityFactor * t:
                            _17598 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_17598] = 26
                            mem[_17598 + 32] = 'SafeMath: division by zero'
                            if not ext_call.return_data[0]:
                                _17658 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 26
                                idx = 0
                                while idx < 26:
                                    mem[idx + _17658 + 68] = mem[idx + _17598 + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_17658 + 68] = mem[_17658 + 74 len 26]
                                revert with memory
                                  from mem[64]
                                   len _17658 + -mem[64] + 100
                            if 0 / ext_call.return_data[0] < 0:
                                revert with 0, 'SafeMath: addition overflow'
                            _17958 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_17958] = 30
                            mem[_17958 + 32] = 'SafeMath: subtraction overflow'
                            if 0 / ext_call.return_data[0] > 10^18:
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                mem[mem[64] + 68] = 'SafeMath: subtraction overflow'
                                idx = 32
                                while idx < 30:
                                    mem[idx + mem[64] + 68] = mem[idx + _17958 + 32]
                                    idx = idx + 32
                                    continue 
                                revert with 0, 'SafeMath: subtraction overflow'
                            require ext_code.size(address(_11350))
                            staticcall address(_11350).0x180f5842 with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(address(ext_call.return_data[0]))
                            staticcall address(ext_call.return_data[0]).0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(address(_11350))
                            staticcall address(_11350).wToken() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(address(ext_call.return_data[0]))
                            staticcall address(ext_call.return_data[0]).0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                if not ext_call.return_data[0]:
                                    _19308 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_19308] = 26
                                    mem[_19308 + 32] = 'SafeMath: division by zero'
                                else:
                                    if 0 / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != 0 / ext_call.return_data[0]:
                                        revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                    if 0 / ext_call.return_data[0] * ext_call.return_data[0] < 0 / ext_call.return_data[0] * ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _19414 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_19414] = 26
                                    mem[_19414 + 32] = 'SafeMath: division by zero'
                                    if 0 / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                            else:
                                if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] != -(0 / ext_call.return_data[0]) + 10^18:
                                    revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                if not ext_call.return_data[0]:
                                    if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _19413 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_19413] = 26
                                    mem[_19413 + 32] = 'SafeMath: division by zero'
                                    if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) / 10^18 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                else:
                                    if 0 / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != 0 / ext_call.return_data[0]:
                                        revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                    if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) + (0 / ext_call.return_data[0] * ext_call.return_data[0]) < 0 / ext_call.return_data[0] * ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _19484 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_19484] = 26
                                    mem[_19484 + 32] = 'SafeMath: division by zero'
                                    if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) + (0 / ext_call.return_data[0] * ext_call.return_data[0]) / 10^18 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                        else:
                            if 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / volatilityFactor * t != 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]):
                                revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                            _17610 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_17610] = 26
                            mem[_17610 + 32] = 'SafeMath: division by zero'
                            if not ext_call.return_data[0]:
                                _17694 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 26
                                idx = 0
                                while idx < 26:
                                    mem[idx + _17694 + 68] = mem[idx + _17610 + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_17694 + 68] = mem[_17694 + 74 len 26]
                                revert with memory
                                  from mem[64]
                                   len _17694 + -mem[64] + 100
                            if 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0] < 0:
                                revert with 0, 'SafeMath: addition overflow'
                            _17970 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_17970] = 30
                            mem[_17970 + 32] = 'SafeMath: subtraction overflow'
                            if 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0] > 10^18:
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                mem[mem[64] + 68] = 'SafeMath: subtraction overflow'
                                idx = 32
                                while idx < 30:
                                    mem[idx + mem[64] + 68] = mem[idx + _17970 + 32]
                                    idx = idx + 32
                                    continue 
                                revert with 0, 'SafeMath: subtraction overflow'
                            require ext_code.size(address(_11350))
                            staticcall address(_11350).0x180f5842 with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(address(ext_call.return_data[0]))
                            staticcall address(ext_call.return_data[0]).0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(address(_11350))
                            staticcall address(_11350).wToken() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(address(ext_call.return_data[0]))
                            staticcall address(ext_call.return_data[0]).0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                if not ext_call.return_data[0]:
                                    _19412 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_19412] = 26
                                    mem[_19412 + 32] = 'SafeMath: division by zero'
                                else:
                                    if 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]:
                                        revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                    if 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0] * ext_call.return_data[0] < 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0] * ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _19483 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_19483] = 26
                                    mem[_19483 + 32] = 'SafeMath: division by zero'
                                    if 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                            else:
                                if (10^18 * ext_call.return_data[0]) - (10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] != -(10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + 10^18:
                                    revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                if not ext_call.return_data[0]:
                                    if (10^18 * ext_call.return_data[0]) - (10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0] * ext_call.return_data[0]) < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _19482 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_19482] = 26
                                    mem[_19482 + 32] = 'SafeMath: division by zero'
                                    if (10^18 * ext_call.return_data[0]) - (10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0] * ext_call.return_data[0]) / 10^18 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                else:
                                    if 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]:
                                        revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                    if (10^18 * ext_call.return_data[0]) - (10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0] * ext_call.return_data[0]) + (10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0] * ext_call.return_data[0]) < 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0] * ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _19518 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_19518] = 26
                                    mem[_19518 + 32] = 'SafeMath: division by zero'
                                    if (10^18 * ext_call.return_data[0]) - (10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0] * ext_call.return_data[0]) + (10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0] * ext_call.return_data[0]) / 10^18 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
            else:
                _11653 = mem[64]
                mem[64] = mem[64] + 64
                mem[_11653] = 30
                mem[_11653 + 32] = 'SafeMath: subtraction overflow'
                if ext_call.return_data[0] > 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]):
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 30
                    mem[mem[64] + 68] = 'SafeMath: subtraction overflow'
                    idx = 32
                    while idx < 30:
                        mem[idx + mem[64] + 68] = mem[idx + _11653 + 32]
                        idx = idx + 32
                        continue 
                    revert with 0, 'SafeMath: subtraction overflow'
                if not (10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - ext_call.return_data[0]:
                    _11789 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_11789] = 26
                    mem[_11789 + 32] = 'SafeMath: division by zero'
                    if not 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]):
                        _11810 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 26
                        idx = 0
                        while idx < 26:
                            mem[idx + _11810 + 68] = mem[idx + _11789 + 32]
                            idx = idx + 32
                            continue 
                        mem[_11810 + 68] = mem[_11810 + 74 len 26]
                        revert with memory
                          from mem[64]
                           len _11810 + -mem[64] + 100
                    if ext_call.return_data[0] - block.timestamp <= 3:
                        if not ext_call.return_data[0] - block.timestamp:
                            _12376 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_12376] = 26
                            mem[_12376 + 32] = 'SafeMath: division by zero'
                            if not ext_call.return_data[0]:
                                _12543 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 26
                                idx = 0
                                while idx < 26:
                                    mem[idx + _12543 + 68] = mem[idx + _12376 + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_12543 + 68] = mem[_12543 + 74 len 26]
                                revert with memory
                                  from mem[64]
                                   len _12543 + -mem[64] + 100
                            if (0 / ext_call.return_data[0]) + (0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) < 0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]):
                                revert with 0, 'SafeMath: addition overflow'
                            _13528 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_13528] = 30
                            mem[_13528 + 32] = 'SafeMath: subtraction overflow'
                            if (0 / ext_call.return_data[0]) + (0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) > 10^18:
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                mem[mem[64] + 68] = 'SafeMath: subtraction overflow'
                                idx = 32
                                while idx < 30:
                                    mem[idx + mem[64] + 68] = mem[idx + _13528 + 32]
                                    idx = idx + 32
                                    continue 
                                revert with 0, 'SafeMath: subtraction overflow'
                            require ext_code.size(address(_11350))
                            staticcall address(_11350).0x180f5842 with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(address(ext_call.return_data[0]))
                            staticcall address(ext_call.return_data[0]).0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(address(_11350))
                            staticcall address(_11350).wToken() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(address(ext_call.return_data[0]))
                            staticcall address(ext_call.return_data[0]).0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                if not ext_call.return_data[0]:
                                    _16118 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_16118] = 26
                                    mem[_16118 + 32] = 'SafeMath: division by zero'
                                else:
                                    if (0 / ext_call.return_data[0] * ext_call.return_data[0]) + (0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) / ext_call.return_data[0] != (0 / ext_call.return_data[0]) + (0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])):
                                        revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                    _16202 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_16202] = 26
                                    mem[_16202 + 32] = 'SafeMath: division by zero'
                                    if (0 / ext_call.return_data[0] * ext_call.return_data[0]) + (0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) / 10^18 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                            else:
                                if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) - (0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) / ext_call.return_data[0] != -(0 / ext_call.return_data[0]) + -(0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18:
                                    revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                if not ext_call.return_data[0]:
                                    if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) - (0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _16201 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_16201] = 26
                                    mem[_16201 + 32] = 'SafeMath: division by zero'
                                    if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) - (0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) / 10^18 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                else:
                                    if (0 / ext_call.return_data[0] * ext_call.return_data[0]) + (0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) / ext_call.return_data[0] != (0 / ext_call.return_data[0]) + (0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])):
                                        revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                    if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) - (0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _16309 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_16309] = 26
                                    mem[_16309 + 32] = 'SafeMath: division by zero'
                                    if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) - (0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) + (0 / ext_call.return_data[0] * ext_call.return_data[0]) + (0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) / 10^18 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                        else:
                            if volatilityFactor != volatilityFactor:
                                revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                            if not volatilityFactor:
                                _12452 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_12452] = 26
                                mem[_12452 + 32] = 'SafeMath: division by zero'
                                if not ext_call.return_data[0]:
                                    _12663 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 26
                                    idx = 0
                                    while idx < 26:
                                        mem[idx + _12663 + 68] = mem[idx + _12452 + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_12663 + 68] = mem[_12663 + 74 len 26]
                                    revert with memory
                                      from mem[64]
                                       len _12663 + -mem[64] + 100
                                if (0 / ext_call.return_data[0]) + (0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) < 0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]):
                                    revert with 0, 'SafeMath: addition overflow'
                                _13597 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_13597] = 30
                                mem[_13597 + 32] = 'SafeMath: subtraction overflow'
                                if (0 / ext_call.return_data[0]) + (0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) > 10^18:
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    mem[mem[64] + 68] = 'SafeMath: subtraction overflow'
                                    idx = 32
                                    while idx < 30:
                                        mem[idx + mem[64] + 68] = mem[idx + _13597 + 32]
                                        idx = idx + 32
                                        continue 
                                    revert with 0, 'SafeMath: subtraction overflow'
                                require ext_code.size(address(_11350))
                                staticcall address(_11350).0x180f5842 with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(address(ext_call.return_data[0]))
                                staticcall address(ext_call.return_data[0]).0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(address(_11350))
                                staticcall address(_11350).wToken() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                mem[mem[64] + 4] = this.address
                                require ext_code.size(address(ext_call.return_data[0]))
                                staticcall address(ext_call.return_data[0]).0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0]:
                                    if not ext_call.return_data[0]:
                                        _16209 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_16209] = 26
                                        mem[_16209 + 32] = 'SafeMath: division by zero'
                                    else:
                                        if (0 / ext_call.return_data[0] * ext_call.return_data[0]) + (0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) / ext_call.return_data[0] != (0 / ext_call.return_data[0]) + (0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])):
                                            revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                        _16314 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_16314] = 26
                                        mem[_16314 + 32] = 'SafeMath: division by zero'
                                        if (0 / ext_call.return_data[0] * ext_call.return_data[0]) + (0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) / 10^18 < 0:
                                            revert with 0, 'SafeMath: addition overflow'
                                else:
                                    if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) - (0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) / ext_call.return_data[0] != -(0 / ext_call.return_data[0]) + -(0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18:
                                        revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                    if not ext_call.return_data[0]:
                                        if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) - (0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) < 0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _16313 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_16313] = 26
                                        mem[_16313 + 32] = 'SafeMath: division by zero'
                                        if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) - (0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) / 10^18 < 0:
                                            revert with 0, 'SafeMath: addition overflow'
                                    else:
                                        if (0 / ext_call.return_data[0] * ext_call.return_data[0]) + (0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) / ext_call.return_data[0] != (0 / ext_call.return_data[0]) + (0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])):
                                            revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                        if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) - (0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) < 0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _16421 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_16421] = 26
                                        mem[_16421 + 32] = 'SafeMath: division by zero'
                                        if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) - (0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) + (0 / ext_call.return_data[0] * ext_call.return_data[0]) + (0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) / 10^18 < 0:
                                            revert with 0, 'SafeMath: addition overflow'
                            else:
                                if 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / volatilityFactor != 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]):
                                    revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                _12546 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_12546] = 26
                                mem[_12546 + 32] = 'SafeMath: division by zero'
                                if not ext_call.return_data[0]:
                                    _12789 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 26
                                    idx = 0
                                    while idx < 26:
                                        mem[idx + _12789 + 68] = mem[idx + _12546 + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_12789 + 68] = mem[_12789 + 74 len 26]
                                    revert with memory
                                      from mem[64]
                                       len _12789 + -mem[64] + 100
                                if (10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + (0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) < 0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]):
                                    revert with 0, 'SafeMath: addition overflow'
                                _13663 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_13663] = 30
                                mem[_13663 + 32] = 'SafeMath: subtraction overflow'
                                if (10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + (0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) > 10^18:
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    mem[mem[64] + 68] = 'SafeMath: subtraction overflow'
                                    idx = 32
                                    while idx < 30:
                                        mem[idx + mem[64] + 68] = mem[idx + _13663 + 32]
                                        idx = idx + 32
                                        continue 
                                    revert with 0, 'SafeMath: subtraction overflow'
                                require ext_code.size(address(_11350))
                                staticcall address(_11350).0x180f5842 with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(address(ext_call.return_data[0]))
                                staticcall address(ext_call.return_data[0]).0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(address(_11350))
                                staticcall address(_11350).wToken() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                mem[mem[64] + 4] = this.address
                                require ext_code.size(address(ext_call.return_data[0]))
                                staticcall address(ext_call.return_data[0]).0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0]:
                                    if not ext_call.return_data[0]:
                                        _16312 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_16312] = 26
                                        mem[_16312 + 32] = 'SafeMath: division by zero'
                                    else:
                                        if (10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0] * ext_call.return_data[0]) + (0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) / ext_call.return_data[0] != (10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + (0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])):
                                            revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                        _16420 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_16420] = 26
                                        mem[_16420 + 32] = 'SafeMath: division by zero'
                                        if (10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0] * ext_call.return_data[0]) + (0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) / 10^18 < 0:
                                            revert with 0, 'SafeMath: addition overflow'
                                else:
                                    if (10^18 * ext_call.return_data[0]) - (10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0] * ext_call.return_data[0]) - (0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) / ext_call.return_data[0] != -(10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + -(0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18:
                                        revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                    if not ext_call.return_data[0]:
                                        if (10^18 * ext_call.return_data[0]) - (10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0] * ext_call.return_data[0]) - (0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) < 0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _16419 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_16419] = 26
                                        mem[_16419 + 32] = 'SafeMath: division by zero'
                                        if (10^18 * ext_call.return_data[0]) - (10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0] * ext_call.return_data[0]) - (0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) / 10^18 < 0:
                                            revert with 0, 'SafeMath: addition overflow'
                                    else:
                                        if (10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0] * ext_call.return_data[0]) + (0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) / ext_call.return_data[0] != (10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + (0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])):
                                            revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                        if (10^18 * ext_call.return_data[0]) - (10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0] * ext_call.return_data[0]) - (0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) < 0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _16518 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_16518] = 26
                                        mem[_16518 + 32] = 'SafeMath: division by zero'
                                        if (10^18 * ext_call.return_data[0]) - (10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0] * ext_call.return_data[0]) - (0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) + (10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0] * ext_call.return_data[0]) + (0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) / 10^18 < 0:
                                            revert with 0, 'SafeMath: addition overflow'
                    else:
                        s = (ext_call.return_data[0] - block.timestamp / 2) + 1
                        t = ext_call.return_data[0] - block.timestamp
                        while s < t:
                            require s
                            s = (ext_call.return_data[0] - block.timestamp / s) + s / 2
                            t = s
                            continue 
                        if not t:
                            _17570 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_17570] = 26
                            mem[_17570 + 32] = 'SafeMath: division by zero'
                            if not ext_call.return_data[0]:
                                _17619 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 26
                                idx = 0
                                while idx < 26:
                                    mem[idx + _17619 + 68] = mem[idx + _17570 + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_17619 + 68] = mem[_17619 + 74 len 26]
                                revert with memory
                                  from mem[64]
                                   len _17619 + -mem[64] + 100
                            if (0 / ext_call.return_data[0]) + (0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) < 0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]):
                                revert with 0, 'SafeMath: addition overflow'
                            _17948 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_17948] = 30
                            mem[_17948 + 32] = 'SafeMath: subtraction overflow'
                            if (0 / ext_call.return_data[0]) + (0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) > 10^18:
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                mem[mem[64] + 68] = 'SafeMath: subtraction overflow'
                                idx = 32
                                while idx < 30:
                                    mem[idx + mem[64] + 68] = mem[idx + _17948 + 32]
                                    idx = idx + 32
                                    continue 
                                revert with 0, 'SafeMath: subtraction overflow'
                            require ext_code.size(address(_11350))
                            staticcall address(_11350).0x180f5842 with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(address(ext_call.return_data[0]))
                            staticcall address(ext_call.return_data[0]).0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(address(_11350))
                            staticcall address(_11350).wToken() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(address(ext_call.return_data[0]))
                            staticcall address(ext_call.return_data[0]).0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                if not ext_call.return_data[0]:
                                    _19238 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_19238] = 26
                                    mem[_19238 + 32] = 'SafeMath: division by zero'
                                else:
                                    if (0 / ext_call.return_data[0] * ext_call.return_data[0]) + (0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) / ext_call.return_data[0] != (0 / ext_call.return_data[0]) + (0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])):
                                        revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                    _19328 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_19328] = 26
                                    mem[_19328 + 32] = 'SafeMath: division by zero'
                                    if (0 / ext_call.return_data[0] * ext_call.return_data[0]) + (0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) / 10^18 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                            else:
                                if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) - (0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) / ext_call.return_data[0] != -(0 / ext_call.return_data[0]) + -(0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18:
                                    revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                if not ext_call.return_data[0]:
                                    if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) - (0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _19327 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_19327] = 26
                                    mem[_19327 + 32] = 'SafeMath: division by zero'
                                    if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) - (0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) / 10^18 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                else:
                                    if (0 / ext_call.return_data[0] * ext_call.return_data[0]) + (0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) / ext_call.return_data[0] != (0 / ext_call.return_data[0]) + (0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])):
                                        revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                    if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) - (0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _19427 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_19427] = 26
                                    mem[_19427 + 32] = 'SafeMath: division by zero'
                                    if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) - (0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) + (0 / ext_call.return_data[0] * ext_call.return_data[0]) + (0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) / 10^18 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                        else:
                            if volatilityFactor * t / t != volatilityFactor:
                                revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                            if not volatilityFactor * t:
                                _17600 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_17600] = 26
                                mem[_17600 + 32] = 'SafeMath: division by zero'
                                if not ext_call.return_data[0]:
                                    _17664 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 26
                                    idx = 0
                                    while idx < 26:
                                        mem[idx + _17664 + 68] = mem[idx + _17600 + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_17664 + 68] = mem[_17664 + 74 len 26]
                                    revert with memory
                                      from mem[64]
                                       len _17664 + -mem[64] + 100
                                if (0 / ext_call.return_data[0]) + (0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) < 0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]):
                                    revert with 0, 'SafeMath: addition overflow'
                                _17960 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_17960] = 30
                                mem[_17960 + 32] = 'SafeMath: subtraction overflow'
                                if (0 / ext_call.return_data[0]) + (0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) > 10^18:
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    mem[mem[64] + 68] = 'SafeMath: subtraction overflow'
                                    idx = 32
                                    while idx < 30:
                                        mem[idx + mem[64] + 68] = mem[idx + _17960 + 32]
                                        idx = idx + 32
                                        continue 
                                    revert with 0, 'SafeMath: subtraction overflow'
                                require ext_code.size(address(_11350))
                                staticcall address(_11350).0x180f5842 with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(address(ext_call.return_data[0]))
                                staticcall address(ext_call.return_data[0]).0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(address(_11350))
                                staticcall address(_11350).wToken() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                mem[mem[64] + 4] = this.address
                                require ext_code.size(address(ext_call.return_data[0]))
                                staticcall address(ext_call.return_data[0]).0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0]:
                                    if not ext_call.return_data[0]:
                                        _19326 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_19326] = 26
                                        mem[_19326 + 32] = 'SafeMath: division by zero'
                                    else:
                                        if (0 / ext_call.return_data[0] * ext_call.return_data[0]) + (0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) / ext_call.return_data[0] != (0 / ext_call.return_data[0]) + (0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])):
                                            revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                        _19426 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_19426] = 26
                                        mem[_19426 + 32] = 'SafeMath: division by zero'
                                        if (0 / ext_call.return_data[0] * ext_call.return_data[0]) + (0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) / 10^18 < 0:
                                            revert with 0, 'SafeMath: addition overflow'
                                else:
                                    if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) - (0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) / ext_call.return_data[0] != -(0 / ext_call.return_data[0]) + -(0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18:
                                        revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                    if not ext_call.return_data[0]:
                                        if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) - (0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) < 0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _19425 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_19425] = 26
                                        mem[_19425 + 32] = 'SafeMath: division by zero'
                                        if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) - (0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) / 10^18 < 0:
                                            revert with 0, 'SafeMath: addition overflow'
                                    else:
                                        if (0 / ext_call.return_data[0] * ext_call.return_data[0]) + (0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) / ext_call.return_data[0] != (0 / ext_call.return_data[0]) + (0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])):
                                            revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                        if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) - (0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) < 0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _19490 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_19490] = 26
                                        mem[_19490 + 32] = 'SafeMath: division by zero'
                                        if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) - (0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) + (0 / ext_call.return_data[0] * ext_call.return_data[0]) + (0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) / 10^18 < 0:
                                            revert with 0, 'SafeMath: addition overflow'
                            else:
                                if 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / volatilityFactor * t != 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]):
                                    revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                _17618 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_17618] = 26
                                mem[_17618 + 32] = 'SafeMath: division by zero'
                                if not ext_call.return_data[0]:
                                    _17702 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 26
                                    idx = 0
                                    while idx < 26:
                                        mem[idx + _17702 + 68] = mem[idx + _17618 + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_17702 + 68] = mem[_17702 + 74 len 26]
                                    revert with memory
                                      from mem[64]
                                       len _17702 + -mem[64] + 100
                                if (10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + (0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) < 0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]):
                                    revert with 0, 'SafeMath: addition overflow'
                                _17978 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_17978] = 30
                                mem[_17978 + 32] = 'SafeMath: subtraction overflow'
                                if (10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + (0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) > 10^18:
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    mem[mem[64] + 68] = 'SafeMath: subtraction overflow'
                                    idx = 32
                                    while idx < 30:
                                        mem[idx + mem[64] + 68] = mem[idx + _17978 + 32]
                                        idx = idx + 32
                                        continue 
                                    revert with 0, 'SafeMath: subtraction overflow'
                                require ext_code.size(address(_11350))
                                staticcall address(_11350).0x180f5842 with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(address(ext_call.return_data[0]))
                                staticcall address(ext_call.return_data[0]).0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(address(_11350))
                                staticcall address(_11350).wToken() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                mem[mem[64] + 4] = this.address
                                require ext_code.size(address(ext_call.return_data[0]))
                                staticcall address(ext_call.return_data[0]).0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0]:
                                    if not ext_call.return_data[0]:
                                        _19424 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_19424] = 26
                                        mem[_19424 + 32] = 'SafeMath: division by zero'
                                    else:
                                        if (10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0] * ext_call.return_data[0]) + (0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) / ext_call.return_data[0] != (10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + (0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])):
                                            revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                        _19489 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_19489] = 26
                                        mem[_19489 + 32] = 'SafeMath: division by zero'
                                        if (10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0] * ext_call.return_data[0]) + (0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) / 10^18 < 0:
                                            revert with 0, 'SafeMath: addition overflow'
                                else:
                                    if (10^18 * ext_call.return_data[0]) - (10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0] * ext_call.return_data[0]) - (0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) / ext_call.return_data[0] != -(10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + -(0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18:
                                        revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                    if not ext_call.return_data[0]:
                                        if (10^18 * ext_call.return_data[0]) - (10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0] * ext_call.return_data[0]) - (0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) < 0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _19488 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_19488] = 26
                                        mem[_19488 + 32] = 'SafeMath: division by zero'
                                        if (10^18 * ext_call.return_data[0]) - (10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0] * ext_call.return_data[0]) - (0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) / 10^18 < 0:
                                            revert with 0, 'SafeMath: addition overflow'
                                    else:
                                        if (10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0] * ext_call.return_data[0]) + (0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) / ext_call.return_data[0] != (10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + (0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])):
                                            revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                        if (10^18 * ext_call.return_data[0]) - (10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0] * ext_call.return_data[0]) - (0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) < 0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _19520 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_19520] = 26
                                        mem[_19520 + 32] = 'SafeMath: division by zero'
                                        if (10^18 * ext_call.return_data[0]) - (10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0] * ext_call.return_data[0]) - (0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) + (10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0] * ext_call.return_data[0]) + (0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) / 10^18 < 0:
                                            revert with 0, 'SafeMath: addition overflow'
                else:
                    if (10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / (10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - ext_call.return_data[0] != 10^18:
                        revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                    _11803 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_11803] = 26
                    mem[_11803 + 32] = 'SafeMath: division by zero'
                    if not 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]):
                        _11825 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 26
                        idx = 0
                        while idx < 26:
                            mem[idx + _11825 + 68] = mem[idx + _11803 + 32]
                            idx = idx + 32
                            continue 
                        mem[_11825 + 68] = mem[_11825 + 74 len 26]
                        revert with memory
                          from mem[64]
                           len _11825 + -mem[64] + 100
                    if ext_call.return_data[0] - block.timestamp <= 3:
                        if not ext_call.return_data[0] - block.timestamp:
                            _12449 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_12449] = 26
                            mem[_12449 + 32] = 'SafeMath: division by zero'
                            if not ext_call.return_data[0]:
                                _12656 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 26
                                idx = 0
                                while idx < 26:
                                    mem[idx + _12656 + 68] = mem[idx + _12449 + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_12656 + 68] = mem[_12656 + 74 len 26]
                                revert with memory
                                  from mem[64]
                                   len _12656 + -mem[64] + 100
                            if (0 / ext_call.return_data[0]) + ((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) < (10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]):
                                revert with 0, 'SafeMath: addition overflow'
                            _13594 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_13594] = 30
                            mem[_13594 + 32] = 'SafeMath: subtraction overflow'
                            if (0 / ext_call.return_data[0]) + ((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) > 10^18:
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                mem[mem[64] + 68] = 'SafeMath: subtraction overflow'
                                idx = 32
                                while idx < 30:
                                    mem[idx + mem[64] + 68] = mem[idx + _13594 + 32]
                                    idx = idx + 32
                                    continue 
                                revert with 0, 'SafeMath: subtraction overflow'
                            require ext_code.size(address(_11350))
                            staticcall address(_11350).0x180f5842 with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(address(ext_call.return_data[0]))
                            staticcall address(ext_call.return_data[0]).0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(address(_11350))
                            staticcall address(_11350).wToken() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(address(ext_call.return_data[0]))
                            staticcall address(ext_call.return_data[0]).0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                if not ext_call.return_data[0]:
                                    _16192 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_16192] = 26
                                    mem[_16192 + 32] = 'SafeMath: division by zero'
                                else:
                                    if (0 / ext_call.return_data[0] * ext_call.return_data[0]) + ((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) / ext_call.return_data[0] != (0 / ext_call.return_data[0]) + ((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])):
                                        revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                    _16295 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_16295] = 26
                                    mem[_16295 + 32] = 'SafeMath: division by zero'
                                    if (0 / ext_call.return_data[0] * ext_call.return_data[0]) + ((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) / 10^18 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                            else:
                                if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) - ((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) / ext_call.return_data[0] != -(0 / ext_call.return_data[0]) + -((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18:
                                    revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                if not ext_call.return_data[0]:
                                    if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) - ((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _16294 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_16294] = 26
                                    mem[_16294 + 32] = 'SafeMath: division by zero'
                                    if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) - ((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) / 10^18 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                else:
                                    if (0 / ext_call.return_data[0] * ext_call.return_data[0]) + ((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) / ext_call.return_data[0] != (0 / ext_call.return_data[0]) + ((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])):
                                        revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                    if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) - ((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _16406 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_16406] = 26
                                    mem[_16406 + 32] = 'SafeMath: division by zero'
                                    if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) - ((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) + (0 / ext_call.return_data[0] * ext_call.return_data[0]) + ((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) / 10^18 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                        else:
                            if volatilityFactor != volatilityFactor:
                                revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                            if not volatilityFactor:
                                _12542 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_12542] = 26
                                mem[_12542 + 32] = 'SafeMath: division by zero'
                                if not ext_call.return_data[0]:
                                    _12784 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 26
                                    idx = 0
                                    while idx < 26:
                                        mem[idx + _12784 + 68] = mem[idx + _12542 + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_12784 + 68] = mem[_12784 + 74 len 26]
                                    revert with memory
                                      from mem[64]
                                       len _12784 + -mem[64] + 100
                                if (0 / ext_call.return_data[0]) + ((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) < (10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]):
                                    revert with 0, 'SafeMath: addition overflow'
                                _13659 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_13659] = 30
                                mem[_13659 + 32] = 'SafeMath: subtraction overflow'
                                if (0 / ext_call.return_data[0]) + ((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) > 10^18:
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    mem[mem[64] + 68] = 'SafeMath: subtraction overflow'
                                    idx = 32
                                    while idx < 30:
                                        mem[idx + mem[64] + 68] = mem[idx + _13659 + 32]
                                        idx = idx + 32
                                        continue 
                                    revert with 0, 'SafeMath: subtraction overflow'
                                require ext_code.size(address(_11350))
                                staticcall address(_11350).0x180f5842 with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(address(ext_call.return_data[0]))
                                staticcall address(ext_call.return_data[0]).0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(address(_11350))
                                staticcall address(_11350).wToken() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                mem[mem[64] + 4] = this.address
                                require ext_code.size(address(ext_call.return_data[0]))
                                staticcall address(ext_call.return_data[0]).0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0]:
                                    if not ext_call.return_data[0]:
                                        _16302 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_16302] = 26
                                        mem[_16302 + 32] = 'SafeMath: division by zero'
                                    else:
                                        if (0 / ext_call.return_data[0] * ext_call.return_data[0]) + ((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) / ext_call.return_data[0] != (0 / ext_call.return_data[0]) + ((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])):
                                            revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                        _16411 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_16411] = 26
                                        mem[_16411 + 32] = 'SafeMath: division by zero'
                                        if (0 / ext_call.return_data[0] * ext_call.return_data[0]) + ((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) / 10^18 < 0:
                                            revert with 0, 'SafeMath: addition overflow'
                                else:
                                    if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) - ((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) / ext_call.return_data[0] != -(0 / ext_call.return_data[0]) + -((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18:
                                        revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                    if not ext_call.return_data[0]:
                                        if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) - ((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) < 0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _16410 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_16410] = 26
                                        mem[_16410 + 32] = 'SafeMath: division by zero'
                                        if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) - ((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) / 10^18 < 0:
                                            revert with 0, 'SafeMath: addition overflow'
                                    else:
                                        if (0 / ext_call.return_data[0] * ext_call.return_data[0]) + ((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) / ext_call.return_data[0] != (0 / ext_call.return_data[0]) + ((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])):
                                            revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                        if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) - ((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) < 0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _16508 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_16508] = 26
                                        mem[_16508 + 32] = 'SafeMath: division by zero'
                                        if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) - ((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) + (0 / ext_call.return_data[0] * ext_call.return_data[0]) + ((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) / 10^18 < 0:
                                            revert with 0, 'SafeMath: addition overflow'
                            else:
                                if 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / volatilityFactor != 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]):
                                    revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                _12659 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_12659] = 26
                                mem[_12659 + 32] = 'SafeMath: division by zero'
                                if not ext_call.return_data[0]:
                                    _12902 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 26
                                    idx = 0
                                    while idx < 26:
                                        mem[idx + _12902 + 68] = mem[idx + _12659 + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_12902 + 68] = mem[_12902 + 74 len 26]
                                    revert with memory
                                      from mem[64]
                                       len _12902 + -mem[64] + 100
                                if (10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + ((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) < (10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]):
                                    revert with 0, 'SafeMath: addition overflow'
                                _13737 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_13737] = 30
                                mem[_13737 + 32] = 'SafeMath: subtraction overflow'
                                if (10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + ((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) > 10^18:
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    mem[mem[64] + 68] = 'SafeMath: subtraction overflow'
                                    idx = 32
                                    while idx < 30:
                                        mem[idx + mem[64] + 68] = mem[idx + _13737 + 32]
                                        idx = idx + 32
                                        continue 
                                    revert with 0, 'SafeMath: subtraction overflow'
                                require ext_code.size(address(_11350))
                                staticcall address(_11350).0x180f5842 with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(address(ext_call.return_data[0]))
                                staticcall address(ext_call.return_data[0]).0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(address(_11350))
                                staticcall address(_11350).wToken() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                mem[mem[64] + 4] = this.address
                                require ext_code.size(address(ext_call.return_data[0]))
                                staticcall address(ext_call.return_data[0]).0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0]:
                                    if not ext_call.return_data[0]:
                                        _16409 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_16409] = 26
                                        mem[_16409 + 32] = 'SafeMath: division by zero'
                                    else:
                                        if (10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0] * ext_call.return_data[0]) + ((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) / ext_call.return_data[0] != (10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + ((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])):
                                            revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                        _16507 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_16507] = 26
                                        mem[_16507 + 32] = 'SafeMath: division by zero'
                                        if (10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0] * ext_call.return_data[0]) + ((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) / 10^18 < 0:
                                            revert with 0, 'SafeMath: addition overflow'
                                else:
                                    if (10^18 * ext_call.return_data[0]) - (10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0] * ext_call.return_data[0]) - ((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) / ext_call.return_data[0] != -(10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + -((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18:
                                        revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                    if not ext_call.return_data[0]:
                                        if (10^18 * ext_call.return_data[0]) - (10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0] * ext_call.return_data[0]) - ((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) < 0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _16506 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_16506] = 26
                                        mem[_16506 + 32] = 'SafeMath: division by zero'
                                        if (10^18 * ext_call.return_data[0]) - (10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0] * ext_call.return_data[0]) - ((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) / 10^18 < 0:
                                            revert with 0, 'SafeMath: addition overflow'
                                    else:
                                        if (10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0] * ext_call.return_data[0]) + ((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) / ext_call.return_data[0] != (10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + ((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])):
                                            revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                        if (10^18 * ext_call.return_data[0]) - (10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0] * ext_call.return_data[0]) - ((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) < 0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _16582 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_16582] = 26
                                        mem[_16582 + 32] = 'SafeMath: division by zero'
                                        if (10^18 * ext_call.return_data[0]) - (10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0] * ext_call.return_data[0]) - ((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) + (10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0] * ext_call.return_data[0]) + ((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) / 10^18 < 0:
                                            revert with 0, 'SafeMath: addition overflow'
                    else:
                        s = (ext_call.return_data[0] - block.timestamp / 2) + 1
                        t = ext_call.return_data[0] - block.timestamp
                        while s < t:
                            require s
                            s = (ext_call.return_data[0] - block.timestamp / s) + s / 2
                            t = s
                            continue 
                        if not t:
                            _17567 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_17567] = 26
                            mem[_17567 + 32] = 'SafeMath: division by zero'
                            if not ext_call.return_data[0]:
                                _17615 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 26
                                idx = 0
                                while idx < 26:
                                    mem[idx + _17615 + 68] = mem[idx + _17567 + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_17615 + 68] = mem[_17615 + 74 len 26]
                                revert with memory
                                  from mem[64]
                                   len _17615 + -mem[64] + 100
                            if (0 / ext_call.return_data[0]) + ((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) < (10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]):
                                revert with 0, 'SafeMath: addition overflow'
                            _17947 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_17947] = 30
                            mem[_17947 + 32] = 'SafeMath: subtraction overflow'
                            if (0 / ext_call.return_data[0]) + ((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) > 10^18:
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                mem[mem[64] + 68] = 'SafeMath: subtraction overflow'
                                idx = 32
                                while idx < 30:
                                    mem[idx + mem[64] + 68] = mem[idx + _17947 + 32]
                                    idx = idx + 32
                                    continue 
                                revert with 0, 'SafeMath: subtraction overflow'
                            require ext_code.size(address(_11350))
                            staticcall address(_11350).0x180f5842 with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(address(ext_call.return_data[0]))
                            staticcall address(ext_call.return_data[0]).0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(address(_11350))
                            staticcall address(_11350).wToken() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(address(ext_call.return_data[0]))
                            staticcall address(ext_call.return_data[0]).0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                if not ext_call.return_data[0]:
                                    _19231 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_19231] = 26
                                    mem[_19231 + 32] = 'SafeMath: division by zero'
                                else:
                                    if (0 / ext_call.return_data[0] * ext_call.return_data[0]) + ((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) / ext_call.return_data[0] != (0 / ext_call.return_data[0]) + ((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])):
                                        revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                    _19319 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_19319] = 26
                                    mem[_19319 + 32] = 'SafeMath: division by zero'
                                    if (0 / ext_call.return_data[0] * ext_call.return_data[0]) + ((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) / 10^18 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                            else:
                                if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) - ((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) / ext_call.return_data[0] != -(0 / ext_call.return_data[0]) + -((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18:
                                    revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                if not ext_call.return_data[0]:
                                    if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) - ((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _19318 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_19318] = 26
                                    mem[_19318 + 32] = 'SafeMath: division by zero'
                                    if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) - ((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) / 10^18 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                else:
                                    if (0 / ext_call.return_data[0] * ext_call.return_data[0]) + ((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) / ext_call.return_data[0] != (0 / ext_call.return_data[0]) + ((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])):
                                        revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                    if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) - ((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _19421 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_19421] = 26
                                    mem[_19421 + 32] = 'SafeMath: division by zero'
                                    if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) - ((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) + (0 / ext_call.return_data[0] * ext_call.return_data[0]) + ((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) / 10^18 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                        else:
                            if volatilityFactor * t / t != volatilityFactor:
                                revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                            if not volatilityFactor * t:
                                _17599 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_17599] = 26
                                mem[_17599 + 32] = 'SafeMath: division by zero'
                                if not ext_call.return_data[0]:
                                    _17661 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 26
                                    idx = 0
                                    while idx < 26:
                                        mem[idx + _17661 + 68] = mem[idx + _17599 + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_17661 + 68] = mem[_17661 + 74 len 26]
                                    revert with memory
                                      from mem[64]
                                       len _17661 + -mem[64] + 100
                                if (0 / ext_call.return_data[0]) + ((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) < (10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]):
                                    revert with 0, 'SafeMath: addition overflow'
                                _17959 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_17959] = 30
                                mem[_17959 + 32] = 'SafeMath: subtraction overflow'
                                if (0 / ext_call.return_data[0]) + ((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) > 10^18:
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    mem[mem[64] + 68] = 'SafeMath: subtraction overflow'
                                    idx = 32
                                    while idx < 30:
                                        mem[idx + mem[64] + 68] = mem[idx + _17959 + 32]
                                        idx = idx + 32
                                        continue 
                                    revert with 0, 'SafeMath: subtraction overflow'
                                require ext_code.size(address(_11350))
                                staticcall address(_11350).0x180f5842 with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(address(ext_call.return_data[0]))
                                staticcall address(ext_call.return_data[0]).0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(address(_11350))
                                staticcall address(_11350).wToken() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                mem[mem[64] + 4] = this.address
                                require ext_code.size(address(ext_call.return_data[0]))
                                staticcall address(ext_call.return_data[0]).0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0]:
                                    if not ext_call.return_data[0]:
                                        _19317 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_19317] = 26
                                        mem[_19317 + 32] = 'SafeMath: division by zero'
                                    else:
                                        if (0 / ext_call.return_data[0] * ext_call.return_data[0]) + ((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) / ext_call.return_data[0] != (0 / ext_call.return_data[0]) + ((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])):
                                            revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                        _19420 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_19420] = 26
                                        mem[_19420 + 32] = 'SafeMath: division by zero'
                                        if (0 / ext_call.return_data[0] * ext_call.return_data[0]) + ((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) / 10^18 < 0:
                                            revert with 0, 'SafeMath: addition overflow'
                                else:
                                    if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) - ((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) / ext_call.return_data[0] != -(0 / ext_call.return_data[0]) + -((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18:
                                        revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                    if not ext_call.return_data[0]:
                                        if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) - ((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) < 0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _19419 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_19419] = 26
                                        mem[_19419 + 32] = 'SafeMath: division by zero'
                                        if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) - ((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) / 10^18 < 0:
                                            revert with 0, 'SafeMath: addition overflow'
                                    else:
                                        if (0 / ext_call.return_data[0] * ext_call.return_data[0]) + ((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) / ext_call.return_data[0] != (0 / ext_call.return_data[0]) + ((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])):
                                            revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                        if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) - ((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) < 0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _19487 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_19487] = 26
                                        mem[_19487 + 32] = 'SafeMath: division by zero'
                                        if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) - ((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) + (0 / ext_call.return_data[0] * ext_call.return_data[0]) + ((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) / 10^18 < 0:
                                            revert with 0, 'SafeMath: addition overflow'
                            else:
                                if 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / volatilityFactor * t != 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]):
                                    revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                _17614 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_17614] = 26
                                mem[_17614 + 32] = 'SafeMath: division by zero'
                                if not ext_call.return_data[0]:
                                    _17698 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 26
                                    idx = 0
                                    while idx < 26:
                                        mem[idx + _17698 + 68] = mem[idx + _17614 + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_17698 + 68] = mem[_17698 + 74 len 26]
                                    revert with memory
                                      from mem[64]
                                       len _17698 + -mem[64] + 100
                                if (10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + ((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) < (10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]):
                                    revert with 0, 'SafeMath: addition overflow'
                                _17974 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_17974] = 30
                                mem[_17974 + 32] = 'SafeMath: subtraction overflow'
                                if (10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + ((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) > 10^18:
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    mem[mem[64] + 68] = 'SafeMath: subtraction overflow'
                                    idx = 32
                                    while idx < 30:
                                        mem[idx + mem[64] + 68] = mem[idx + _17974 + 32]
                                        idx = idx + 32
                                        continue 
                                    revert with 0, 'SafeMath: subtraction overflow'
                                require ext_code.size(address(_11350))
                                staticcall address(_11350).0x180f5842 with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(address(ext_call.return_data[0]))
                                staticcall address(ext_call.return_data[0]).0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(address(_11350))
                                staticcall address(_11350).wToken() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                mem[mem[64] + 4] = this.address
                                require ext_code.size(address(ext_call.return_data[0]))
                                staticcall address(ext_call.return_data[0]).0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0]:
                                    if not ext_call.return_data[0]:
                                        _19418 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_19418] = 26
                                        mem[_19418 + 32] = 'SafeMath: division by zero'
                                    else:
                                        if (10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0] * ext_call.return_data[0]) + ((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) / ext_call.return_data[0] != (10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + ((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])):
                                            revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                        _19486 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_19486] = 26
                                        mem[_19486 + 32] = 'SafeMath: division by zero'
                                        if (10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0] * ext_call.return_data[0]) + ((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) / 10^18 < 0:
                                            revert with 0, 'SafeMath: addition overflow'
                                else:
                                    if (10^18 * ext_call.return_data[0]) - (10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0] * ext_call.return_data[0]) - ((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) / ext_call.return_data[0] != -(10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + -((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18:
                                        revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                    if not ext_call.return_data[0]:
                                        if (10^18 * ext_call.return_data[0]) - (10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0] * ext_call.return_data[0]) - ((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) < 0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _19485 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_19485] = 26
                                        mem[_19485 + 32] = 'SafeMath: division by zero'
                                        if (10^18 * ext_call.return_data[0]) - (10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0] * ext_call.return_data[0]) - ((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) / 10^18 < 0:
                                            revert with 0, 'SafeMath: addition overflow'
                                    else:
                                        if (10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0] * ext_call.return_data[0]) + ((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) / ext_call.return_data[0] != (10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + ((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])):
                                            revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                        if (10^18 * ext_call.return_data[0]) - (10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0] * ext_call.return_data[0]) - ((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) < 0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _19519 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_19519] = 26
                                        mem[_19519 + 32] = 'SafeMath: division by zero'
                                        if (10^18 * ext_call.return_data[0]) - (10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0] * ext_call.return_data[0]) - ((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) + (10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0] * ext_call.return_data[0]) + ((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * ext_call.return_data[0]) / 10^18 < 0:
                                            revert with 0, 'SafeMath: addition overflow'
            idx = idx + 1
            continue 
        require ext_code.size(paymentTokenAddress)
        staticcall paymentTokenAddress.0x70a08231 with:
                gas gas_remaining wei
               args this.address
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if not ext_call.return_data[0]:
            if not 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]):
                revert with 0, 'SafeMath: division by zero'
            require ext_code.size(collateralTokenAddress)
            staticcall collateralTokenAddress.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if 0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) < 0:
                revert with 0, 'SafeMath: addition overflow'
            if ext_call.return_data[0] + (0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) < 0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]):
                revert with 0, 'SafeMath: addition overflow'
            return (ext_call.return_data[0] + (0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])))
        if 10^18 * ext_call.return_data[0] / ext_call.return_data[0] != 10^18:
            revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
        if not 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]):
            revert with 0, 'SafeMath: division by zero'
        require ext_code.size(collateralTokenAddress)
        staticcall collateralTokenAddress.0x70a08231 with:
                gas gas_remaining wei
               args this.address
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if 10^18 * ext_call.return_data[0] / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) < 0:
            revert with 0, 'SafeMath: addition overflow'
        if ext_call.return_data[0] + (10^18 * ext_call.return_data[0] / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) < 10^18 * ext_call.return_data[0] / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]):
            revert with 0, 'SafeMath: addition overflow'
        return (ext_call.return_data[0] + (10^18 * ext_call.return_data[0] / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])))
    if not 10^18 * 10^uint8(stor153.field_168):
        mem[(32 * _7) + ceil32(return_data.size) + 128] = 26
        mem[(32 * _7) + ceil32(return_data.size) + 160] = 'SafeMath: division by zero'
        if not 10^uint8(stor153.field_160):
            revert with 0, 'SafeMath: division by zero'
        mem[64] = (32 * _7) + ceil32(return_data.size) + 256
        mem[(32 * _7) + ceil32(return_data.size) + 192] = 26
        mem[(32 * _7) + ceil32(return_data.size) + 224] = 'SafeMath: division by zero'
        if not ext_call.return_data[32]:
            revert with 0, 'SafeMath: division by zero'
        _11329 = mem[ceil32(return_data.size) + 96]
        idx = 0
        while idx < _11329:
            require idx < mem[ceil32(return_data.size) + 96]
            _11365 = mem[(32 * idx) + ceil32(return_data.size) + 128]
            require ext_code.size(mem[(32 * idx) + ceil32(return_data.size) + 140 len 20])
            staticcall mem[(32 * idx) + ceil32(return_data.size) + 140 len 20].0xc19d93fb with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] <= 2
            if ext_call.return_data[0]:
                if not arg1:
                    idx = idx + 1
                    continue 
                require ext_code.size(address(_11365))
                staticcall address(_11365).0xc19d93fb with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] <= 2
                if ext_call.return_data[0] != 1:
                    idx = idx + 1
                    continue 
                require ext_code.size(address(_11365))
                staticcall address(_11365).wToken() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                mem[mem[64] + 4] = this.address
                require ext_code.size(address(ext_call.return_data[0]))
                staticcall address(ext_call.return_data[0]).0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(address(_11365))
                staticcall address(_11365).wToken() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(address(ext_call.return_data[0]))
                staticcall address(ext_call.return_data[0]).0x18160ddd with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0]:
                    idx = idx + 1
                    continue 
                if not ext_call.return_data[0]:
                    idx = idx + 1
                    continue 
                require ext_code.size(collateralTokenAddress)
                staticcall collateralTokenAddress.0x70a08231 with:
                        gas gas_remaining wei
                       args address(_11365)
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0]:
                    _11926 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_11926] = 26
                    mem[_11926 + 32] = 'SafeMath: division by zero'
                    if not ext_call.return_data[0]:
                        _12001 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 26
                        idx = 0
                        while idx < 26:
                            mem[idx + _12001 + 68] = mem[idx + _11926 + 32]
                            idx = idx + 32
                            continue 
                        mem[_12001 + 68] = mem[_12001 + 74 len 26]
                        revert with memory
                          from mem[64]
                           len _12001 + -mem[64] + 100
                    mem[mem[64] + 4] = address(_11365)
                    require ext_code.size(paymentTokenAddress)
                    staticcall paymentTokenAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args address(_11365)
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0]:
                        _12415 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_12415] = 26
                        mem[_12415 + 32] = 'SafeMath: division by zero'
                        if not ext_call.return_data[0]:
                            _12607 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 26
                            idx = 0
                            while idx < 26:
                                mem[idx + _12607 + 68] = mem[idx + _12415 + 32]
                                idx = idx + 32
                                continue 
                            mem[_12607 + 68] = mem[_12607 + 74 len 26]
                            revert with memory
                              from mem[64]
                               len _12607 + -mem[64] + 100
                        if not 0 / ext_call.return_data[0]:
                            _13495 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_13495] = 26
                            mem[_13495 + 32] = 'SafeMath: division by zero'
                            if 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]:
                                if 0 / ext_call.return_data[0] < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                                if (0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + (0 / ext_call.return_data[0]) < 0 / ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: addition overflow'
                                idx = idx + 1
                                continue 
                            _13633 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 26
                            idx = 0
                            while idx < 26:
                                mem[idx + _13633 + 68] = mem[idx + _13495 + 32]
                                idx = idx + 32
                                continue 
                            mem[_13633 + 68] = mem[_13633 + 74 len 26]
                            revert with memory
                              from mem[64]
                               len _13633 + -mem[64] + 100
                        if 10^18 * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != 10^18:
                            revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                        _13569 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_13569] = 26
                        mem[_13569 + 32] = 'SafeMath: division by zero'
                        if 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]:
                            if 0 / ext_call.return_data[0] < 0:
                                revert with 0, 'SafeMath: addition overflow'
                            if (10^18 * 0 / ext_call.return_data[0] / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + (0 / ext_call.return_data[0]) < 0 / ext_call.return_data[0]:
                                revert with 0, 'SafeMath: addition overflow'
                            idx = idx + 1
                            continue 
                        _13710 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 26
                        idx = 0
                        while idx < 26:
                            mem[idx + _13710 + 68] = mem[idx + _13569 + 32]
                            idx = idx + 32
                            continue 
                        mem[_13710 + 68] = mem[_13710 + 74 len 26]
                        revert with memory
                          from mem[64]
                           len _13710 + -mem[64] + 100
                    if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                        revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                    _12500 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_12500] = 26
                    mem[_12500 + 32] = 'SafeMath: division by zero'
                    if not ext_call.return_data[0]:
                        _12736 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 26
                        idx = 0
                        while idx < 26:
                            mem[idx + _12736 + 68] = mem[idx + _12500 + 32]
                            idx = idx + 32
                            continue 
                        mem[_12736 + 68] = mem[_12736 + 74 len 26]
                        revert with memory
                          from mem[64]
                           len _12736 + -mem[64] + 100
                    if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                        _13568 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_13568] = 26
                        mem[_13568 + 32] = 'SafeMath: division by zero'
                        if 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]:
                            if 0 / ext_call.return_data[0] < 0:
                                revert with 0, 'SafeMath: addition overflow'
                            if (0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + (0 / ext_call.return_data[0]) < 0 / ext_call.return_data[0]:
                                revert with 0, 'SafeMath: addition overflow'
                            idx = idx + 1
                            continue 
                        _13707 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 26
                        idx = 0
                        while idx < 26:
                            mem[idx + _13707 + 68] = mem[idx + _13568 + 32]
                            idx = idx + 32
                            continue 
                        mem[_13707 + 68] = mem[_13707 + 74 len 26]
                        revert with memory
                          from mem[64]
                           len _13707 + -mem[64] + 100
                    if 10^18 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != 10^18:
                        revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                    _13632 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_13632] = 26
                    mem[_13632 + 32] = 'SafeMath: division by zero'
                    if 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]:
                        if 0 / ext_call.return_data[0] < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        if (10^18 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + (0 / ext_call.return_data[0]) < 0 / ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        idx = idx + 1
                        continue 
                    _13794 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 26
                    idx = 0
                    while idx < 26:
                        mem[idx + _13794 + 68] = mem[idx + _13632 + 32]
                        idx = idx + 32
                        continue 
                    mem[_13794 + 68] = mem[_13794 + 74 len 26]
                    revert with memory
                      from mem[64]
                       len _13794 + -mem[64] + 100
                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                _11964 = mem[64]
                mem[64] = mem[64] + 64
                mem[_11964] = 26
                mem[_11964 + 32] = 'SafeMath: division by zero'
                if not ext_call.return_data[0]:
                    _12043 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 26
                    idx = 0
                    while idx < 26:
                        mem[idx + _12043 + 68] = mem[idx + _11964 + 32]
                        idx = idx + 32
                        continue 
                    mem[_12043 + 68] = mem[_12043 + 74 len 26]
                    revert with memory
                      from mem[64]
                       len _12043 + -mem[64] + 100
                mem[mem[64] + 4] = address(_11365)
                require ext_code.size(paymentTokenAddress)
                staticcall paymentTokenAddress.0x70a08231 with:
                        gas gas_remaining wei
                       args address(_11365)
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0]:
                    _12499 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_12499] = 26
                    mem[_12499 + 32] = 'SafeMath: division by zero'
                    if not ext_call.return_data[0]:
                        _12733 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 26
                        idx = 0
                        while idx < 26:
                            mem[idx + _12733 + 68] = mem[idx + _12499 + 32]
                            idx = idx + 32
                            continue 
                        mem[_12733 + 68] = mem[_12733 + 74 len 26]
                        revert with memory
                          from mem[64]
                           len _12733 + -mem[64] + 100
                    if not 0 / ext_call.return_data[0]:
                        _13567 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_13567] = 26
                        mem[_13567 + 32] = 'SafeMath: division by zero'
                        if 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]:
                            if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] < 0:
                                revert with 0, 'SafeMath: addition overflow'
                            if (0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) < ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                                revert with 0, 'SafeMath: addition overflow'
                            idx = idx + 1
                            continue 
                        _13704 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 26
                        idx = 0
                        while idx < 26:
                            mem[idx + _13704 + 68] = mem[idx + _13567 + 32]
                            idx = idx + 32
                            continue 
                        mem[_13704 + 68] = mem[_13704 + 74 len 26]
                        revert with memory
                          from mem[64]
                           len _13704 + -mem[64] + 100
                    if 10^18 * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != 10^18:
                        revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                    _13631 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_13631] = 26
                    mem[_13631 + 32] = 'SafeMath: division by zero'
                    if 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]:
                        if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        if (10^18 * 0 / ext_call.return_data[0] / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) < ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        idx = idx + 1
                        continue 
                    _13791 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 26
                    idx = 0
                    while idx < 26:
                        mem[idx + _13791 + 68] = mem[idx + _13631 + 32]
                        idx = idx + 32
                        continue 
                    mem[_13791 + 68] = mem[_13791 + 74 len 26]
                    revert with memory
                      from mem[64]
                       len _13791 + -mem[64] + 100
                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                _12606 = mem[64]
                mem[64] = mem[64] + 64
                mem[_12606] = 26
                mem[_12606 + 32] = 'SafeMath: division by zero'
                if not ext_call.return_data[0]:
                    _12856 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 26
                    idx = 0
                    while idx < 26:
                        mem[idx + _12856 + 68] = mem[idx + _12606 + 32]
                        idx = idx + 32
                        continue 
                    mem[_12856 + 68] = mem[_12856 + 74 len 26]
                    revert with memory
                      from mem[64]
                       len _12856 + -mem[64] + 100
                if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                    _13630 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_13630] = 26
                    mem[_13630 + 32] = 'SafeMath: division by zero'
                    if 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]:
                        if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        if (0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) < ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        idx = idx + 1
                        continue 
                    _13788 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 26
                    idx = 0
                    while idx < 26:
                        mem[idx + _13788 + 68] = mem[idx + _13630 + 32]
                        idx = idx + 32
                        continue 
                    mem[_13788 + 68] = mem[_13788 + 74 len 26]
                    revert with memory
                      from mem[64]
                       len _13788 + -mem[64] + 100
                if 10^18 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != 10^18:
                    revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                _13703 = mem[64]
                mem[64] = mem[64] + 64
                mem[_13703] = 26
                mem[_13703 + 32] = 'SafeMath: division by zero'
                if 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]:
                    if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if (10^18 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) < ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    idx = idx + 1
                    continue 
                _13894 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 26
                idx = 0
                while idx < 26:
                    mem[idx + _13894 + 68] = mem[idx + _13703 + 32]
                    idx = idx + 32
                    continue 
                mem[_13894 + 68] = mem[_13894 + 74 len 26]
                revert with memory
                  from mem[64]
                   len _13894 + -mem[64] + 100
            require ext_code.size(address(_11365))
            staticcall address(_11365).0x8f620487 with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            _11481 = mem[64]
            mem[64] = mem[64] + 64
            mem[_11481] = 30
            mem[_11481 + 32] = 'SafeMath: subtraction overflow'
            if block.timestamp > ext_call.return_data[0]:
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 30
                mem[mem[64] + 68] = 'SafeMath: subtraction overflow'
                idx = 32
                while idx < 30:
                    mem[idx + mem[64] + 68] = mem[idx + _11481 + 32]
                    idx = idx + 32
                    continue 
                revert with 0, 'SafeMath: subtraction overflow'
            require ext_code.size(address(_11365))
            staticcall address(_11365).priceRatio() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] <= ext_call.return_data[0]:
                if ext_call.return_data[0] - block.timestamp <= 3:
                    if not ext_call.return_data[0] - block.timestamp:
                        _11840 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_11840] = 26
                        mem[_11840 + 32] = 'SafeMath: division by zero'
                        if not ext_call.return_data[0]:
                            _11892 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 26
                            idx = 0
                            while idx < 26:
                                mem[idx + _11892 + 68] = mem[idx + _11840 + 32]
                                idx = idx + 32
                                continue 
                            mem[_11892 + 68] = mem[_11892 + 74 len 26]
                            revert with memory
                              from mem[64]
                               len _11892 + -mem[64] + 100
                        if 0 / ext_call.return_data[0] < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        _12229 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_12229] = 30
                        mem[_12229 + 32] = 'SafeMath: subtraction overflow'
                        if 0 / ext_call.return_data[0] > 10^18:
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            mem[mem[64] + 68] = 'SafeMath: subtraction overflow'
                            idx = 32
                            while idx < 30:
                                mem[idx + mem[64] + 68] = mem[idx + _12229 + 32]
                                idx = idx + 32
                                continue 
                            revert with 0, 'SafeMath: subtraction overflow'
                        require ext_code.size(address(_11365))
                        staticcall address(_11365).0x180f5842 with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(address(_11365))
                        staticcall address(_11365).wToken() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            if not ext_call.return_data[0]:
                                _15132 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_15132] = 26
                                mem[_15132 + 32] = 'SafeMath: division by zero'
                            else:
                                if 0 / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != 0 / ext_call.return_data[0]:
                                    revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                if 0 / ext_call.return_data[0] * ext_call.return_data[0] < 0 / ext_call.return_data[0] * ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: addition overflow'
                                _15252 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_15252] = 26
                                mem[_15252 + 32] = 'SafeMath: division by zero'
                                if 0 / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                        else:
                            if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] != -(0 / ext_call.return_data[0]) + 10^18:
                                revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                            if not ext_call.return_data[0]:
                                if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                                _15251 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_15251] = 26
                                mem[_15251 + 32] = 'SafeMath: division by zero'
                                if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) / 10^18 < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                            else:
                                if 0 / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != 0 / ext_call.return_data[0]:
                                    revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) + (0 / ext_call.return_data[0] * ext_call.return_data[0]) < 0 / ext_call.return_data[0] * ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: addition overflow'
                                _15369 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_15369] = 26
                                mem[_15369 + 32] = 'SafeMath: division by zero'
                                if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) + (0 / ext_call.return_data[0] * ext_call.return_data[0]) / 10^18 < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                    else:
                        if volatilityFactor != volatilityFactor:
                            revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                        if not volatilityFactor:
                            _11852 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_11852] = 26
                            mem[_11852 + 32] = 'SafeMath: division by zero'
                            if not ext_call.return_data[0]:
                                _11927 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 26
                                idx = 0
                                while idx < 26:
                                    mem[idx + _11927 + 68] = mem[idx + _11852 + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_11927 + 68] = mem[_11927 + 74 len 26]
                                revert with memory
                                  from mem[64]
                                   len _11927 + -mem[64] + 100
                            if 0 / ext_call.return_data[0] < 0:
                                revert with 0, 'SafeMath: addition overflow'
                            _12247 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_12247] = 30
                            mem[_12247 + 32] = 'SafeMath: subtraction overflow'
                            if 0 / ext_call.return_data[0] > 10^18:
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                mem[mem[64] + 68] = 'SafeMath: subtraction overflow'
                                idx = 32
                                while idx < 30:
                                    mem[idx + mem[64] + 68] = mem[idx + _12247 + 32]
                                    idx = idx + 32
                                    continue 
                                revert with 0, 'SafeMath: subtraction overflow'
                            require ext_code.size(address(_11365))
                            staticcall address(_11365).0x180f5842 with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(address(ext_call.return_data[0]))
                            staticcall address(ext_call.return_data[0]).0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(address(_11365))
                            staticcall address(_11365).wToken() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(address(ext_call.return_data[0]))
                            staticcall address(ext_call.return_data[0]).0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                if not ext_call.return_data[0]:
                                    _15259 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_15259] = 26
                                    mem[_15259 + 32] = 'SafeMath: division by zero'
                                else:
                                    if 0 / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != 0 / ext_call.return_data[0]:
                                        revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                    if 0 / ext_call.return_data[0] * ext_call.return_data[0] < 0 / ext_call.return_data[0] * ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _15374 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_15374] = 26
                                    mem[_15374 + 32] = 'SafeMath: division by zero'
                                    if 0 / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                            else:
                                if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] != -(0 / ext_call.return_data[0]) + 10^18:
                                    revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                if not ext_call.return_data[0]:
                                    if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _15373 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_15373] = 26
                                    mem[_15373 + 32] = 'SafeMath: division by zero'
                                    if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) / 10^18 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                else:
                                    if 0 / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != 0 / ext_call.return_data[0]:
                                        revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                    if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) + (0 / ext_call.return_data[0] * ext_call.return_data[0]) < 0 / ext_call.return_data[0] * ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _15484 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_15484] = 26
                                    mem[_15484 + 32] = 'SafeMath: division by zero'
                                    if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) + (0 / ext_call.return_data[0] * ext_call.return_data[0]) / 10^18 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                        else:
                            if 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / volatilityFactor != 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]:
                                revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                            _11895 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_11895] = 26
                            mem[_11895 + 32] = 'SafeMath: division by zero'
                            if not ext_call.return_data[0]:
                                _11966 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 26
                                idx = 0
                                while idx < 26:
                                    mem[idx + _11966 + 68] = mem[idx + _11895 + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_11966 + 68] = mem[_11966 + 74 len 26]
                                revert with memory
                                  from mem[64]
                                   len _11966 + -mem[64] + 100
                            if 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0] < 0:
                                revert with 0, 'SafeMath: addition overflow'
                            _12274 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_12274] = 30
                            mem[_12274 + 32] = 'SafeMath: subtraction overflow'
                            if 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0] > 10^18:
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                mem[mem[64] + 68] = 'SafeMath: subtraction overflow'
                                idx = 32
                                while idx < 30:
                                    mem[idx + mem[64] + 68] = mem[idx + _12274 + 32]
                                    idx = idx + 32
                                    continue 
                                revert with 0, 'SafeMath: subtraction overflow'
                            require ext_code.size(address(_11365))
                            staticcall address(_11365).0x180f5842 with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(address(ext_call.return_data[0]))
                            staticcall address(ext_call.return_data[0]).0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(address(_11365))
                            staticcall address(_11365).wToken() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(address(ext_call.return_data[0]))
                            staticcall address(ext_call.return_data[0]).0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                if not ext_call.return_data[0]:
                                    _15372 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_15372] = 26
                                    mem[_15372 + 32] = 'SafeMath: division by zero'
                                else:
                                    if 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]:
                                        revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                    if 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0] * ext_call.return_data[0] < 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0] * ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _15483 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_15483] = 26
                                    mem[_15483 + 32] = 'SafeMath: division by zero'
                                    if 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                            else:
                                if (10^18 * ext_call.return_data[0]) - (0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] != -(0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + 10^18:
                                    revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                if not ext_call.return_data[0]:
                                    if (10^18 * ext_call.return_data[0]) - (0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0] * ext_call.return_data[0]) < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _15482 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_15482] = 26
                                    mem[_15482 + 32] = 'SafeMath: division by zero'
                                    if (10^18 * ext_call.return_data[0]) - (0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0] * ext_call.return_data[0]) / 10^18 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                else:
                                    if 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]:
                                        revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                    if (10^18 * ext_call.return_data[0]) - (0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0] * ext_call.return_data[0]) + (0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0] * ext_call.return_data[0]) < 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0] * ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _15573 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_15573] = 26
                                    mem[_15573 + 32] = 'SafeMath: division by zero'
                                    if (10^18 * ext_call.return_data[0]) - (0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0] * ext_call.return_data[0]) + (0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0] * ext_call.return_data[0]) / 10^18 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                else:
                    s = (ext_call.return_data[0] - block.timestamp / 2) + 1
                    t = ext_call.return_data[0] - block.timestamp
                    while s < t:
                        require s
                        s = (ext_call.return_data[0] - block.timestamp / s) + s / 2
                        t = s
                        continue 
                    if not t:
                        _17591 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_17591] = 26
                        mem[_17591 + 32] = 'SafeMath: division by zero'
                        if not ext_call.return_data[0]:
                            _17647 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 26
                            idx = 0
                            while idx < 26:
                                mem[idx + _17647 + 68] = mem[idx + _17591 + 32]
                                idx = idx + 32
                                continue 
                            mem[_17647 + 68] = mem[_17647 + 74 len 26]
                            revert with memory
                              from mem[64]
                               len _17647 + -mem[64] + 100
                        if 0 / ext_call.return_data[0] < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        _17955 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_17955] = 30
                        mem[_17955 + 32] = 'SafeMath: subtraction overflow'
                        if 0 / ext_call.return_data[0] > 10^18:
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            mem[mem[64] + 68] = 'SafeMath: subtraction overflow'
                            idx = 32
                            while idx < 30:
                                mem[idx + mem[64] + 68] = mem[idx + _17955 + 32]
                                idx = idx + 32
                                continue 
                            revert with 0, 'SafeMath: subtraction overflow'
                        require ext_code.size(address(_11365))
                        staticcall address(_11365).0x180f5842 with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(address(_11365))
                        staticcall address(_11365).wToken() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            if not ext_call.return_data[0]:
                                _19287 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_19287] = 26
                                mem[_19287 + 32] = 'SafeMath: division by zero'
                            else:
                                if 0 / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != 0 / ext_call.return_data[0]:
                                    revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                if 0 / ext_call.return_data[0] * ext_call.return_data[0] < 0 / ext_call.return_data[0] * ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: addition overflow'
                                _19391 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_19391] = 26
                                mem[_19391 + 32] = 'SafeMath: division by zero'
                                if 0 / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                        else:
                            if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] != -(0 / ext_call.return_data[0]) + 10^18:
                                revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                            if not ext_call.return_data[0]:
                                if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                                _19390 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_19390] = 26
                                mem[_19390 + 32] = 'SafeMath: division by zero'
                                if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) / 10^18 < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                            else:
                                if 0 / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != 0 / ext_call.return_data[0]:
                                    revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) + (0 / ext_call.return_data[0] * ext_call.return_data[0]) < 0 / ext_call.return_data[0] * ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: addition overflow'
                                _19469 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_19469] = 26
                                mem[_19469 + 32] = 'SafeMath: division by zero'
                                if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) + (0 / ext_call.return_data[0] * ext_call.return_data[0]) / 10^18 < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                    else:
                        if volatilityFactor * t / t != volatilityFactor:
                            revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                        if not volatilityFactor * t:
                            _17607 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_17607] = 26
                            mem[_17607 + 32] = 'SafeMath: division by zero'
                            if not ext_call.return_data[0]:
                                _17685 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 26
                                idx = 0
                                while idx < 26:
                                    mem[idx + _17685 + 68] = mem[idx + _17607 + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_17685 + 68] = mem[_17685 + 74 len 26]
                                revert with memory
                                  from mem[64]
                                   len _17685 + -mem[64] + 100
                            if 0 / ext_call.return_data[0] < 0:
                                revert with 0, 'SafeMath: addition overflow'
                            _17967 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_17967] = 30
                            mem[_17967 + 32] = 'SafeMath: subtraction overflow'
                            if 0 / ext_call.return_data[0] > 10^18:
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                mem[mem[64] + 68] = 'SafeMath: subtraction overflow'
                                idx = 32
                                while idx < 30:
                                    mem[idx + mem[64] + 68] = mem[idx + _17967 + 32]
                                    idx = idx + 32
                                    continue 
                                revert with 0, 'SafeMath: subtraction overflow'
                            require ext_code.size(address(_11365))
                            staticcall address(_11365).0x180f5842 with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(address(ext_call.return_data[0]))
                            staticcall address(ext_call.return_data[0]).0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(address(_11365))
                            staticcall address(_11365).wToken() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(address(ext_call.return_data[0]))
                            staticcall address(ext_call.return_data[0]).0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                if not ext_call.return_data[0]:
                                    _19389 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_19389] = 26
                                    mem[_19389 + 32] = 'SafeMath: division by zero'
                                else:
                                    if 0 / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != 0 / ext_call.return_data[0]:
                                        revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                    if 0 / ext_call.return_data[0] * ext_call.return_data[0] < 0 / ext_call.return_data[0] * ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _19468 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_19468] = 26
                                    mem[_19468 + 32] = 'SafeMath: division by zero'
                                    if 0 / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                            else:
                                if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] != -(0 / ext_call.return_data[0]) + 10^18:
                                    revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                if not ext_call.return_data[0]:
                                    if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _19467 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_19467] = 26
                                    mem[_19467 + 32] = 'SafeMath: division by zero'
                                    if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) / 10^18 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                else:
                                    if 0 / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != 0 / ext_call.return_data[0]:
                                        revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                    if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) + (0 / ext_call.return_data[0] * ext_call.return_data[0]) < 0 / ext_call.return_data[0] * ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _19511 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_19511] = 26
                                    mem[_19511 + 32] = 'SafeMath: division by zero'
                                    if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) + (0 / ext_call.return_data[0] * ext_call.return_data[0]) / 10^18 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                        else:
                            if 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / volatilityFactor * t != 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]:
                                revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                            _17646 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_17646] = 26
                            mem[_17646 + 32] = 'SafeMath: division by zero'
                            if not ext_call.return_data[0]:
                                _17730 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 26
                                idx = 0
                                while idx < 26:
                                    mem[idx + _17730 + 68] = mem[idx + _17646 + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_17730 + 68] = mem[_17730 + 74 len 26]
                                revert with memory
                                  from mem[64]
                                   len _17730 + -mem[64] + 100
                            if 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0] < 0:
                                revert with 0, 'SafeMath: addition overflow'
                            _18006 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_18006] = 30
                            mem[_18006 + 32] = 'SafeMath: subtraction overflow'
                            if 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0] > 10^18:
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                mem[mem[64] + 68] = 'SafeMath: subtraction overflow'
                                idx = 32
                                while idx < 30:
                                    mem[idx + mem[64] + 68] = mem[idx + _18006 + 32]
                                    idx = idx + 32
                                    continue 
                                revert with 0, 'SafeMath: subtraction overflow'
                            require ext_code.size(address(_11365))
                            staticcall address(_11365).0x180f5842 with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(address(ext_call.return_data[0]))
                            staticcall address(ext_call.return_data[0]).0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(address(_11365))
                            staticcall address(_11365).wToken() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(address(ext_call.return_data[0]))
                            staticcall address(ext_call.return_data[0]).0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                if not ext_call.return_data[0]:
                                    _19466 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_19466] = 26
                                    mem[_19466 + 32] = 'SafeMath: division by zero'
                                else:
                                    if 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]:
                                        revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                    if 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0] * ext_call.return_data[0] < 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0] * ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _19510 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_19510] = 26
                                    mem[_19510 + 32] = 'SafeMath: division by zero'
                                    if 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                            else:
                                if (10^18 * ext_call.return_data[0]) - (0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] != -(0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + 10^18:
                                    revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                if not ext_call.return_data[0]:
                                    if (10^18 * ext_call.return_data[0]) - (0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0] * ext_call.return_data[0]) < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _19509 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_19509] = 26
                                    mem[_19509 + 32] = 'SafeMath: division by zero'
                                    if (10^18 * ext_call.return_data[0]) - (0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0] * ext_call.return_data[0]) / 10^18 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                else:
                                    if 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]:
                                        revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                    if (10^18 * ext_call.return_data[0]) - (0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0] * ext_call.return_data[0]) + (0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0] * ext_call.return_data[0]) < 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0] * ext_call.return_data[0]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _19527 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_19527] = 26
                                    mem[_19527 + 32] = 'SafeMath: division by zero'
                                    if (10^18 * ext_call.return_data[0]) - (0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0] * ext_call.return_data[0]) + (0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0] * ext_call.return_data[0]) / 10^18 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
            else:
                _11665 = mem[64]
                mem[64] = mem[64] + 64
                mem[_11665] = 30
                mem[_11665 + 32] = 'SafeMath: subtraction overflow'
                if ext_call.return_data[0] > 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]:
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 30
                    mem[mem[64] + 68] = 'SafeMath: subtraction overflow'
                    idx = 32
                    while idx < 30:
                        mem[idx + mem[64] + 68] = mem[idx + _11665 + 32]
                        idx = idx + 32
                        continue 
                    revert with 0, 'SafeMath: subtraction overflow'
                if not (0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - ext_call.return_data[0]:
                    _11801 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_11801] = 26
                    mem[_11801 + 32] = 'SafeMath: division by zero'
                    if not 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]:
                        _11819 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 26
                        idx = 0
                        while idx < 26:
                            mem[idx + _11819 + 68] = mem[idx + _11801 + 32]
                            idx = idx + 32
                            continue 
                        mem[_11819 + 68] = mem[_11819 + 74 len 26]
                        revert with memory
                          from mem[64]
                           len _11819 + -mem[64] + 100
                    if ext_call.return_data[0] - block.timestamp <= 3:
                        if not ext_call.return_data[0] - block.timestamp:
                            _12427 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_12427] = 26
                            mem[_12427 + 32] = 'SafeMath: division by zero'
                            if not ext_call.return_data[0]:
                                _12627 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 26
                                idx = 0
                                while idx < 26:
                                    mem[idx + _12627 + 68] = mem[idx + _12427 + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_12627 + 68] = mem[_12627 + 74 len 26]
                                revert with memory
                                  from mem[64]
                                   len _12627 + -mem[64] + 100
                            if (0 / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) < 0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]:
                                revert with 0, 'SafeMath: addition overflow'
                            _13579 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_13579] = 30
                            mem[_13579 + 32] = 'SafeMath: subtraction overflow'
                            if (0 / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) > 10^18:
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                mem[mem[64] + 68] = 'SafeMath: subtraction overflow'
                                idx = 32
                                while idx < 30:
                                    mem[idx + mem[64] + 68] = mem[idx + _13579 + 32]
                                    idx = idx + 32
                                    continue 
                                revert with 0, 'SafeMath: subtraction overflow'
                            require ext_code.size(address(_11365))
                            staticcall address(_11365).0x180f5842 with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(address(ext_call.return_data[0]))
                            staticcall address(ext_call.return_data[0]).0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(address(_11365))
                            staticcall address(_11365).wToken() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(address(ext_call.return_data[0]))
                            staticcall address(ext_call.return_data[0]).0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                if not ext_call.return_data[0]:
                                    _16181 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_16181] = 26
                                    mem[_16181 + 32] = 'SafeMath: division by zero'
                                else:
                                    if (0 / ext_call.return_data[0] * ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) / ext_call.return_data[0] != (0 / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]):
                                        revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                    _16280 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_16280] = 26
                                    mem[_16280 + 32] = 'SafeMath: division by zero'
                                    if (0 / ext_call.return_data[0] * ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) / 10^18 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                            else:
                                if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) - (0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) / ext_call.return_data[0] != -(0 / ext_call.return_data[0]) + -(0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18:
                                    revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                if not ext_call.return_data[0]:
                                    if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) - (0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _16279 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_16279] = 26
                                    mem[_16279 + 32] = 'SafeMath: division by zero'
                                    if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) - (0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) / 10^18 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                else:
                                    if (0 / ext_call.return_data[0] * ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) / ext_call.return_data[0] != (0 / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]):
                                        revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                    if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) - (0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _16393 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_16393] = 26
                                    mem[_16393 + 32] = 'SafeMath: division by zero'
                                    if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) - (0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) + (0 / ext_call.return_data[0] * ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) / 10^18 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                        else:
                            if volatilityFactor != volatilityFactor:
                                revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                            if not volatilityFactor:
                                _12521 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_12521] = 26
                                mem[_12521 + 32] = 'SafeMath: division by zero'
                                if not ext_call.return_data[0]:
                                    _12762 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 26
                                    idx = 0
                                    while idx < 26:
                                        mem[idx + _12762 + 68] = mem[idx + _12521 + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_12762 + 68] = mem[_12762 + 74 len 26]
                                    revert with memory
                                      from mem[64]
                                       len _12762 + -mem[64] + 100
                                if (0 / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) < 0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]:
                                    revert with 0, 'SafeMath: addition overflow'
                                _13645 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_13645] = 30
                                mem[_13645 + 32] = 'SafeMath: subtraction overflow'
                                if (0 / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) > 10^18:
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    mem[mem[64] + 68] = 'SafeMath: subtraction overflow'
                                    idx = 32
                                    while idx < 30:
                                        mem[idx + mem[64] + 68] = mem[idx + _13645 + 32]
                                        idx = idx + 32
                                        continue 
                                    revert with 0, 'SafeMath: subtraction overflow'
                                require ext_code.size(address(_11365))
                                staticcall address(_11365).0x180f5842 with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(address(ext_call.return_data[0]))
                                staticcall address(ext_call.return_data[0]).0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(address(_11365))
                                staticcall address(_11365).wToken() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                mem[mem[64] + 4] = this.address
                                require ext_code.size(address(ext_call.return_data[0]))
                                staticcall address(ext_call.return_data[0]).0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0]:
                                    if not ext_call.return_data[0]:
                                        _16287 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_16287] = 26
                                        mem[_16287 + 32] = 'SafeMath: division by zero'
                                    else:
                                        if (0 / ext_call.return_data[0] * ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) / ext_call.return_data[0] != (0 / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]):
                                            revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                        _16398 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_16398] = 26
                                        mem[_16398 + 32] = 'SafeMath: division by zero'
                                        if (0 / ext_call.return_data[0] * ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) / 10^18 < 0:
                                            revert with 0, 'SafeMath: addition overflow'
                                else:
                                    if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) - (0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) / ext_call.return_data[0] != -(0 / ext_call.return_data[0]) + -(0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18:
                                        revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                    if not ext_call.return_data[0]:
                                        if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) - (0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) < 0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _16397 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_16397] = 26
                                        mem[_16397 + 32] = 'SafeMath: division by zero'
                                        if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) - (0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) / 10^18 < 0:
                                            revert with 0, 'SafeMath: addition overflow'
                                    else:
                                        if (0 / ext_call.return_data[0] * ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) / ext_call.return_data[0] != (0 / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]):
                                            revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                        if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) - (0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) < 0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _16496 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_16496] = 26
                                        mem[_16496 + 32] = 'SafeMath: division by zero'
                                        if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) - (0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) + (0 / ext_call.return_data[0] * ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) / 10^18 < 0:
                                            revert with 0, 'SafeMath: addition overflow'
                            else:
                                if 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / volatilityFactor != 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]:
                                    revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                _12630 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_12630] = 26
                                mem[_12630 + 32] = 'SafeMath: division by zero'
                                if not ext_call.return_data[0]:
                                    _12879 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 26
                                    idx = 0
                                    while idx < 26:
                                        mem[idx + _12879 + 68] = mem[idx + _12630 + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_12879 + 68] = mem[_12879 + 74 len 26]
                                    revert with memory
                                      from mem[64]
                                       len _12879 + -mem[64] + 100
                                if (0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) < 0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]:
                                    revert with 0, 'SafeMath: addition overflow'
                                _13720 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_13720] = 30
                                mem[_13720 + 32] = 'SafeMath: subtraction overflow'
                                if (0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) > 10^18:
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    mem[mem[64] + 68] = 'SafeMath: subtraction overflow'
                                    idx = 32
                                    while idx < 30:
                                        mem[idx + mem[64] + 68] = mem[idx + _13720 + 32]
                                        idx = idx + 32
                                        continue 
                                    revert with 0, 'SafeMath: subtraction overflow'
                                require ext_code.size(address(_11365))
                                staticcall address(_11365).0x180f5842 with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(address(ext_call.return_data[0]))
                                staticcall address(ext_call.return_data[0]).0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(address(_11365))
                                staticcall address(_11365).wToken() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                mem[mem[64] + 4] = this.address
                                require ext_code.size(address(ext_call.return_data[0]))
                                staticcall address(ext_call.return_data[0]).0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0]:
                                    if not ext_call.return_data[0]:
                                        _16396 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_16396] = 26
                                        mem[_16396 + 32] = 'SafeMath: division by zero'
                                    else:
                                        if (0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0] * ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) / ext_call.return_data[0] != (0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]):
                                            revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                        _16495 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_16495] = 26
                                        mem[_16495 + 32] = 'SafeMath: division by zero'
                                        if (0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0] * ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) / 10^18 < 0:
                                            revert with 0, 'SafeMath: addition overflow'
                                else:
                                    if (10^18 * ext_call.return_data[0]) - (0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0] * ext_call.return_data[0]) - (0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) / ext_call.return_data[0] != -(0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + -(0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18:
                                        revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                    if not ext_call.return_data[0]:
                                        if (10^18 * ext_call.return_data[0]) - (0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0] * ext_call.return_data[0]) - (0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) < 0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _16494 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_16494] = 26
                                        mem[_16494 + 32] = 'SafeMath: division by zero'
                                        if (10^18 * ext_call.return_data[0]) - (0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0] * ext_call.return_data[0]) - (0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) / 10^18 < 0:
                                            revert with 0, 'SafeMath: addition overflow'
                                    else:
                                        if (0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0] * ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) / ext_call.return_data[0] != (0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]):
                                            revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                        if (10^18 * ext_call.return_data[0]) - (0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0] * ext_call.return_data[0]) - (0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) < 0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _16575 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_16575] = 26
                                        mem[_16575 + 32] = 'SafeMath: division by zero'
                                        if (10^18 * ext_call.return_data[0]) - (0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0] * ext_call.return_data[0]) - (0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) + (0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0] * ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) / 10^18 < 0:
                                            revert with 0, 'SafeMath: addition overflow'
                    else:
                        s = (ext_call.return_data[0] - block.timestamp / 2) + 1
                        t = ext_call.return_data[0] - block.timestamp
                        while s < t:
                            require s
                            s = (ext_call.return_data[0] - block.timestamp / s) + s / 2
                            t = s
                            continue 
                        if not t:
                            _17597 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_17597] = 26
                            mem[_17597 + 32] = 'SafeMath: division by zero'
                            if not ext_call.return_data[0]:
                                _17655 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 26
                                idx = 0
                                while idx < 26:
                                    mem[idx + _17655 + 68] = mem[idx + _17597 + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_17655 + 68] = mem[_17655 + 74 len 26]
                                revert with memory
                                  from mem[64]
                                   len _17655 + -mem[64] + 100
                            if (0 / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) < 0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]:
                                revert with 0, 'SafeMath: addition overflow'
                            _17957 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_17957] = 30
                            mem[_17957 + 32] = 'SafeMath: subtraction overflow'
                            if (0 / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) > 10^18:
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                mem[mem[64] + 68] = 'SafeMath: subtraction overflow'
                                idx = 32
                                while idx < 30:
                                    mem[idx + mem[64] + 68] = mem[idx + _17957 + 32]
                                    idx = idx + 32
                                    continue 
                                revert with 0, 'SafeMath: subtraction overflow'
                            require ext_code.size(address(_11365))
                            staticcall address(_11365).0x180f5842 with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(address(ext_call.return_data[0]))
                            staticcall address(ext_call.return_data[0]).0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(address(_11365))
                            staticcall address(_11365).wToken() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(address(ext_call.return_data[0]))
                            staticcall address(ext_call.return_data[0]).0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                if not ext_call.return_data[0]:
                                    _19301 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_19301] = 26
                                    mem[_19301 + 32] = 'SafeMath: division by zero'
                                else:
                                    if (0 / ext_call.return_data[0] * ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) / ext_call.return_data[0] != (0 / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]):
                                        revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                    _19409 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_19409] = 26
                                    mem[_19409 + 32] = 'SafeMath: division by zero'
                                    if (0 / ext_call.return_data[0] * ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) / 10^18 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                            else:
                                if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) - (0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) / ext_call.return_data[0] != -(0 / ext_call.return_data[0]) + -(0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18:
                                    revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                if not ext_call.return_data[0]:
                                    if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) - (0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _19408 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_19408] = 26
                                    mem[_19408 + 32] = 'SafeMath: division by zero'
                                    if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) - (0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) / 10^18 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                else:
                                    if (0 / ext_call.return_data[0] * ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) / ext_call.return_data[0] != (0 / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]):
                                        revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                    if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) - (0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _19481 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_19481] = 26
                                    mem[_19481 + 32] = 'SafeMath: division by zero'
                                    if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) - (0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) + (0 / ext_call.return_data[0] * ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) / 10^18 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                        else:
                            if volatilityFactor * t / t != volatilityFactor:
                                revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                            if not volatilityFactor * t:
                                _17609 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_17609] = 26
                                mem[_17609 + 32] = 'SafeMath: division by zero'
                                if not ext_call.return_data[0]:
                                    _17691 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 26
                                    idx = 0
                                    while idx < 26:
                                        mem[idx + _17691 + 68] = mem[idx + _17609 + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_17691 + 68] = mem[_17691 + 74 len 26]
                                    revert with memory
                                      from mem[64]
                                       len _17691 + -mem[64] + 100
                                if (0 / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) < 0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]:
                                    revert with 0, 'SafeMath: addition overflow'
                                _17969 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_17969] = 30
                                mem[_17969 + 32] = 'SafeMath: subtraction overflow'
                                if (0 / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) > 10^18:
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    mem[mem[64] + 68] = 'SafeMath: subtraction overflow'
                                    idx = 32
                                    while idx < 30:
                                        mem[idx + mem[64] + 68] = mem[idx + _17969 + 32]
                                        idx = idx + 32
                                        continue 
                                    revert with 0, 'SafeMath: subtraction overflow'
                                require ext_code.size(address(_11365))
                                staticcall address(_11365).0x180f5842 with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(address(ext_call.return_data[0]))
                                staticcall address(ext_call.return_data[0]).0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(address(_11365))
                                staticcall address(_11365).wToken() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                mem[mem[64] + 4] = this.address
                                require ext_code.size(address(ext_call.return_data[0]))
                                staticcall address(ext_call.return_data[0]).0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0]:
                                    if not ext_call.return_data[0]:
                                        _19407 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_19407] = 26
                                        mem[_19407 + 32] = 'SafeMath: division by zero'
                                    else:
                                        if (0 / ext_call.return_data[0] * ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) / ext_call.return_data[0] != (0 / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]):
                                            revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                        _19480 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_19480] = 26
                                        mem[_19480 + 32] = 'SafeMath: division by zero'
                                        if (0 / ext_call.return_data[0] * ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) / 10^18 < 0:
                                            revert with 0, 'SafeMath: addition overflow'
                                else:
                                    if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) - (0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) / ext_call.return_data[0] != -(0 / ext_call.return_data[0]) + -(0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18:
                                        revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                    if not ext_call.return_data[0]:
                                        if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) - (0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) < 0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _19479 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_19479] = 26
                                        mem[_19479 + 32] = 'SafeMath: division by zero'
                                        if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) - (0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) / 10^18 < 0:
                                            revert with 0, 'SafeMath: addition overflow'
                                    else:
                                        if (0 / ext_call.return_data[0] * ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) / ext_call.return_data[0] != (0 / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]):
                                            revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                        if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) - (0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) < 0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _19517 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_19517] = 26
                                        mem[_19517 + 32] = 'SafeMath: division by zero'
                                        if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) - (0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) + (0 / ext_call.return_data[0] * ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) / 10^18 < 0:
                                            revert with 0, 'SafeMath: addition overflow'
                            else:
                                if 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / volatilityFactor * t != 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]:
                                    revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                _17654 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_17654] = 26
                                mem[_17654 + 32] = 'SafeMath: division by zero'
                                if not ext_call.return_data[0]:
                                    _17738 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 26
                                    idx = 0
                                    while idx < 26:
                                        mem[idx + _17738 + 68] = mem[idx + _17654 + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_17738 + 68] = mem[_17738 + 74 len 26]
                                    revert with memory
                                      from mem[64]
                                       len _17738 + -mem[64] + 100
                                if (0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) < 0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]:
                                    revert with 0, 'SafeMath: addition overflow'
                                _18014 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_18014] = 30
                                mem[_18014 + 32] = 'SafeMath: subtraction overflow'
                                if (0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) > 10^18:
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    mem[mem[64] + 68] = 'SafeMath: subtraction overflow'
                                    idx = 32
                                    while idx < 30:
                                        mem[idx + mem[64] + 68] = mem[idx + _18014 + 32]
                                        idx = idx + 32
                                        continue 
                                    revert with 0, 'SafeMath: subtraction overflow'
                                require ext_code.size(address(_11365))
                                staticcall address(_11365).0x180f5842 with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(address(ext_call.return_data[0]))
                                staticcall address(ext_call.return_data[0]).0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(address(_11365))
                                staticcall address(_11365).wToken() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                mem[mem[64] + 4] = this.address
                                require ext_code.size(address(ext_call.return_data[0]))
                                staticcall address(ext_call.return_data[0]).0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0]:
                                    if not ext_call.return_data[0]:
                                        _19478 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_19478] = 26
                                        mem[_19478 + 32] = 'SafeMath: division by zero'
                                    else:
                                        if (0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0] * ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) / ext_call.return_data[0] != (0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]):
                                            revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                        _19516 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_19516] = 26
                                        mem[_19516 + 32] = 'SafeMath: division by zero'
                                        if (0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0] * ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) / 10^18 < 0:
                                            revert with 0, 'SafeMath: addition overflow'
                                else:
                                    if (10^18 * ext_call.return_data[0]) - (0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0] * ext_call.return_data[0]) - (0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) / ext_call.return_data[0] != -(0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + -(0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18:
                                        revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                    if not ext_call.return_data[0]:
                                        if (10^18 * ext_call.return_data[0]) - (0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0] * ext_call.return_data[0]) - (0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) < 0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _19515 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_19515] = 26
                                        mem[_19515 + 32] = 'SafeMath: division by zero'
                                        if (10^18 * ext_call.return_data[0]) - (0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0] * ext_call.return_data[0]) - (0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) / 10^18 < 0:
                                            revert with 0, 'SafeMath: addition overflow'
                                    else:
                                        if (0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0] * ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) / ext_call.return_data[0] != (0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]):
                                            revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                        if (10^18 * ext_call.return_data[0]) - (0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0] * ext_call.return_data[0]) - (0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) < 0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _19529 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_19529] = 26
                                        mem[_19529 + 32] = 'SafeMath: division by zero'
                                        if (10^18 * ext_call.return_data[0]) - (0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0] * ext_call.return_data[0]) - (0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) + (0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0] * ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) / 10^18 < 0:
                                            revert with 0, 'SafeMath: addition overflow'
                else:
                    if (10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / (0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - ext_call.return_data[0] != 10^18:
                        revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                    _11809 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_11809] = 26
                    mem[_11809 + 32] = 'SafeMath: division by zero'
                    if not 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]:
                        _11843 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 26
                        idx = 0
                        while idx < 26:
                            mem[idx + _11843 + 68] = mem[idx + _11809 + 32]
                            idx = idx + 32
                            continue 
                        mem[_11843 + 68] = mem[_11843 + 74 len 26]
                        revert with memory
                          from mem[64]
                           len _11843 + -mem[64] + 100
                    if ext_call.return_data[0] - block.timestamp <= 3:
                        if not ext_call.return_data[0] - block.timestamp:
                            _12518 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_12518] = 26
                            mem[_12518 + 32] = 'SafeMath: division by zero'
                            if not ext_call.return_data[0]:
                                _12755 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 26
                                idx = 0
                                while idx < 26:
                                    mem[idx + _12755 + 68] = mem[idx + _12518 + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_12755 + 68] = mem[_12755 + 74 len 26]
                                revert with memory
                                  from mem[64]
                                   len _12755 + -mem[64] + 100
                            if (0 / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) < (10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]:
                                revert with 0, 'SafeMath: addition overflow'
                            _13642 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_13642] = 30
                            mem[_13642 + 32] = 'SafeMath: subtraction overflow'
                            if (0 / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) > 10^18:
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                mem[mem[64] + 68] = 'SafeMath: subtraction overflow'
                                idx = 32
                                while idx < 30:
                                    mem[idx + mem[64] + 68] = mem[idx + _13642 + 32]
                                    idx = idx + 32
                                    continue 
                                revert with 0, 'SafeMath: subtraction overflow'
                            require ext_code.size(address(_11365))
                            staticcall address(_11365).0x180f5842 with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(address(ext_call.return_data[0]))
                            staticcall address(ext_call.return_data[0]).0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(address(_11365))
                            staticcall address(_11365).wToken() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(address(ext_call.return_data[0]))
                            staticcall address(ext_call.return_data[0]).0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                if not ext_call.return_data[0]:
                                    _16270 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_16270] = 26
                                    mem[_16270 + 32] = 'SafeMath: division by zero'
                                else:
                                    if (0 / ext_call.return_data[0] * ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) / ext_call.return_data[0] != (0 / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]):
                                        revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                    _16379 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_16379] = 26
                                    mem[_16379 + 32] = 'SafeMath: division by zero'
                                    if (0 / ext_call.return_data[0] * ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) / 10^18 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                            else:
                                if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) - ((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) / ext_call.return_data[0] != -(0 / ext_call.return_data[0]) + -((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18:
                                    revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                if not ext_call.return_data[0]:
                                    if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) - ((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _16378 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_16378] = 26
                                    mem[_16378 + 32] = 'SafeMath: division by zero'
                                    if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) - ((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) / 10^18 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                else:
                                    if (0 / ext_call.return_data[0] * ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) / ext_call.return_data[0] != (0 / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]):
                                        revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                    if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) - ((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _16481 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_16481] = 26
                                    mem[_16481 + 32] = 'SafeMath: division by zero'
                                    if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) - ((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) + (0 / ext_call.return_data[0] * ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) / 10^18 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                        else:
                            if volatilityFactor != volatilityFactor:
                                revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                            if not volatilityFactor:
                                _12626 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_12626] = 26
                                mem[_12626 + 32] = 'SafeMath: division by zero'
                                if not ext_call.return_data[0]:
                                    _12874 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 26
                                    idx = 0
                                    while idx < 26:
                                        mem[idx + _12874 + 68] = mem[idx + _12626 + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_12874 + 68] = mem[_12874 + 74 len 26]
                                    revert with memory
                                      from mem[64]
                                       len _12874 + -mem[64] + 100
                                if (0 / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) < (10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]:
                                    revert with 0, 'SafeMath: addition overflow'
                                _13716 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_13716] = 30
                                mem[_13716 + 32] = 'SafeMath: subtraction overflow'
                                if (0 / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) > 10^18:
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    mem[mem[64] + 68] = 'SafeMath: subtraction overflow'
                                    idx = 32
                                    while idx < 30:
                                        mem[idx + mem[64] + 68] = mem[idx + _13716 + 32]
                                        idx = idx + 32
                                        continue 
                                    revert with 0, 'SafeMath: subtraction overflow'
                                require ext_code.size(address(_11365))
                                staticcall address(_11365).0x180f5842 with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(address(ext_call.return_data[0]))
                                staticcall address(ext_call.return_data[0]).0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(address(_11365))
                                staticcall address(_11365).wToken() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                mem[mem[64] + 4] = this.address
                                require ext_code.size(address(ext_call.return_data[0]))
                                staticcall address(ext_call.return_data[0]).0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0]:
                                    if not ext_call.return_data[0]:
                                        _16386 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_16386] = 26
                                        mem[_16386 + 32] = 'SafeMath: division by zero'
                                    else:
                                        if (0 / ext_call.return_data[0] * ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) / ext_call.return_data[0] != (0 / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]):
                                            revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                        _16486 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_16486] = 26
                                        mem[_16486 + 32] = 'SafeMath: division by zero'
                                        if (0 / ext_call.return_data[0] * ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) / 10^18 < 0:
                                            revert with 0, 'SafeMath: addition overflow'
                                else:
                                    if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) - ((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) / ext_call.return_data[0] != -(0 / ext_call.return_data[0]) + -((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18:
                                        revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                    if not ext_call.return_data[0]:
                                        if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) - ((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) < 0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _16485 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_16485] = 26
                                        mem[_16485 + 32] = 'SafeMath: division by zero'
                                        if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) - ((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) / 10^18 < 0:
                                            revert with 0, 'SafeMath: addition overflow'
                                    else:
                                        if (0 / ext_call.return_data[0] * ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) / ext_call.return_data[0] != (0 / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]):
                                            revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                        if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) - ((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) < 0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _16565 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_16565] = 26
                                        mem[_16565 + 32] = 'SafeMath: division by zero'
                                        if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) - ((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) + (0 / ext_call.return_data[0] * ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) / 10^18 < 0:
                                            revert with 0, 'SafeMath: addition overflow'
                            else:
                                if 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / volatilityFactor != 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]:
                                    revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                _12758 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_12758] = 26
                                mem[_12758 + 32] = 'SafeMath: division by zero'
                                if not ext_call.return_data[0]:
                                    _12989 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 26
                                    idx = 0
                                    while idx < 26:
                                        mem[idx + _12989 + 68] = mem[idx + _12758 + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_12989 + 68] = mem[_12989 + 74 len 26]
                                    revert with memory
                                      from mem[64]
                                       len _12989 + -mem[64] + 100
                                if (0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) < (10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]:
                                    revert with 0, 'SafeMath: addition overflow'
                                _13803 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_13803] = 30
                                mem[_13803 + 32] = 'SafeMath: subtraction overflow'
                                if (0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) > 10^18:
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    mem[mem[64] + 68] = 'SafeMath: subtraction overflow'
                                    idx = 32
                                    while idx < 30:
                                        mem[idx + mem[64] + 68] = mem[idx + _13803 + 32]
                                        idx = idx + 32
                                        continue 
                                    revert with 0, 'SafeMath: subtraction overflow'
                                require ext_code.size(address(_11365))
                                staticcall address(_11365).0x180f5842 with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(address(ext_call.return_data[0]))
                                staticcall address(ext_call.return_data[0]).0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(address(_11365))
                                staticcall address(_11365).wToken() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                mem[mem[64] + 4] = this.address
                                require ext_code.size(address(ext_call.return_data[0]))
                                staticcall address(ext_call.return_data[0]).0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0]:
                                    if not ext_call.return_data[0]:
                                        _16484 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_16484] = 26
                                        mem[_16484 + 32] = 'SafeMath: division by zero'
                                    else:
                                        if (0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0] * ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) / ext_call.return_data[0] != (0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]):
                                            revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                        _16564 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_16564] = 26
                                        mem[_16564 + 32] = 'SafeMath: division by zero'
                                        if (0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0] * ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) / 10^18 < 0:
                                            revert with 0, 'SafeMath: addition overflow'
                                else:
                                    if (10^18 * ext_call.return_data[0]) - (0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0] * ext_call.return_data[0]) - ((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) / ext_call.return_data[0] != -(0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + -((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18:
                                        revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                    if not ext_call.return_data[0]:
                                        if (10^18 * ext_call.return_data[0]) - (0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0] * ext_call.return_data[0]) - ((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) < 0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _16563 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_16563] = 26
                                        mem[_16563 + 32] = 'SafeMath: division by zero'
                                        if (10^18 * ext_call.return_data[0]) - (0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0] * ext_call.return_data[0]) - ((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) / 10^18 < 0:
                                            revert with 0, 'SafeMath: addition overflow'
                                    else:
                                        if (0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0] * ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) / ext_call.return_data[0] != (0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]):
                                            revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                        if (10^18 * ext_call.return_data[0]) - (0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0] * ext_call.return_data[0]) - ((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) < 0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _16612 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_16612] = 26
                                        mem[_16612 + 32] = 'SafeMath: division by zero'
                                        if (10^18 * ext_call.return_data[0]) - (0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0] * ext_call.return_data[0]) - ((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) + (0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0] * ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) / 10^18 < 0:
                                            revert with 0, 'SafeMath: addition overflow'
                    else:
                        s = (ext_call.return_data[0] - block.timestamp / 2) + 1
                        t = ext_call.return_data[0] - block.timestamp
                        while s < t:
                            require s
                            s = (ext_call.return_data[0] - block.timestamp / s) + s / 2
                            t = s
                            continue 
                        if not t:
                            _17594 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_17594] = 26
                            mem[_17594 + 32] = 'SafeMath: division by zero'
                            if not ext_call.return_data[0]:
                                _17651 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 26
                                idx = 0
                                while idx < 26:
                                    mem[idx + _17651 + 68] = mem[idx + _17594 + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_17651 + 68] = mem[_17651 + 74 len 26]
                                revert with memory
                                  from mem[64]
                                   len _17651 + -mem[64] + 100
                            if (0 / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) < (10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]:
                                revert with 0, 'SafeMath: addition overflow'
                            _17956 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_17956] = 30
                            mem[_17956 + 32] = 'SafeMath: subtraction overflow'
                            if (0 / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) > 10^18:
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                mem[mem[64] + 68] = 'SafeMath: subtraction overflow'
                                idx = 32
                                while idx < 30:
                                    mem[idx + mem[64] + 68] = mem[idx + _17956 + 32]
                                    idx = idx + 32
                                    continue 
                                revert with 0, 'SafeMath: subtraction overflow'
                            require ext_code.size(address(_11365))
                            staticcall address(_11365).0x180f5842 with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(address(ext_call.return_data[0]))
                            staticcall address(ext_call.return_data[0]).0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(address(_11365))
                            staticcall address(_11365).wToken() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(address(ext_call.return_data[0]))
                            staticcall address(ext_call.return_data[0]).0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                if not ext_call.return_data[0]:
                                    _19294 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_19294] = 26
                                    mem[_19294 + 32] = 'SafeMath: division by zero'
                                else:
                                    if (0 / ext_call.return_data[0] * ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) / ext_call.return_data[0] != (0 / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]):
                                        revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                    _19400 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_19400] = 26
                                    mem[_19400 + 32] = 'SafeMath: division by zero'
                                    if (0 / ext_call.return_data[0] * ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) / 10^18 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                            else:
                                if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) - ((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) / ext_call.return_data[0] != -(0 / ext_call.return_data[0]) + -((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18:
                                    revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                if not ext_call.return_data[0]:
                                    if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) - ((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _19399 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_19399] = 26
                                    mem[_19399 + 32] = 'SafeMath: division by zero'
                                    if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) - ((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) / 10^18 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                else:
                                    if (0 / ext_call.return_data[0] * ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) / ext_call.return_data[0] != (0 / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]):
                                        revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                    if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) - ((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _19475 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_19475] = 26
                                    mem[_19475 + 32] = 'SafeMath: division by zero'
                                    if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) - ((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) + (0 / ext_call.return_data[0] * ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) / 10^18 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                        else:
                            if volatilityFactor * t / t != volatilityFactor:
                                revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                            if not volatilityFactor * t:
                                _17608 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_17608] = 26
                                mem[_17608 + 32] = 'SafeMath: division by zero'
                                if not ext_call.return_data[0]:
                                    _17688 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 26
                                    idx = 0
                                    while idx < 26:
                                        mem[idx + _17688 + 68] = mem[idx + _17608 + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_17688 + 68] = mem[_17688 + 74 len 26]
                                    revert with memory
                                      from mem[64]
                                       len _17688 + -mem[64] + 100
                                if (0 / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) < (10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]:
                                    revert with 0, 'SafeMath: addition overflow'
                                _17968 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_17968] = 30
                                mem[_17968 + 32] = 'SafeMath: subtraction overflow'
                                if (0 / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) > 10^18:
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    mem[mem[64] + 68] = 'SafeMath: subtraction overflow'
                                    idx = 32
                                    while idx < 30:
                                        mem[idx + mem[64] + 68] = mem[idx + _17968 + 32]
                                        idx = idx + 32
                                        continue 
                                    revert with 0, 'SafeMath: subtraction overflow'
                                require ext_code.size(address(_11365))
                                staticcall address(_11365).0x180f5842 with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(address(ext_call.return_data[0]))
                                staticcall address(ext_call.return_data[0]).0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(address(_11365))
                                staticcall address(_11365).wToken() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                mem[mem[64] + 4] = this.address
                                require ext_code.size(address(ext_call.return_data[0]))
                                staticcall address(ext_call.return_data[0]).0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0]:
                                    if not ext_call.return_data[0]:
                                        _19398 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_19398] = 26
                                        mem[_19398 + 32] = 'SafeMath: division by zero'
                                    else:
                                        if (0 / ext_call.return_data[0] * ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) / ext_call.return_data[0] != (0 / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]):
                                            revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                        _19474 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_19474] = 26
                                        mem[_19474 + 32] = 'SafeMath: division by zero'
                                        if (0 / ext_call.return_data[0] * ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) / 10^18 < 0:
                                            revert with 0, 'SafeMath: addition overflow'
                                else:
                                    if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) - ((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) / ext_call.return_data[0] != -(0 / ext_call.return_data[0]) + -((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18:
                                        revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                    if not ext_call.return_data[0]:
                                        if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) - ((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) < 0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _19473 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_19473] = 26
                                        mem[_19473 + 32] = 'SafeMath: division by zero'
                                        if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) - ((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) / 10^18 < 0:
                                            revert with 0, 'SafeMath: addition overflow'
                                    else:
                                        if (0 / ext_call.return_data[0] * ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) / ext_call.return_data[0] != (0 / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]):
                                            revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                        if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) - ((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) < 0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _19514 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_19514] = 26
                                        mem[_19514 + 32] = 'SafeMath: division by zero'
                                        if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) - ((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) + (0 / ext_call.return_data[0] * ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) / 10^18 < 0:
                                            revert with 0, 'SafeMath: addition overflow'
                            else:
                                if 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / volatilityFactor * t != 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]:
                                    revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                _17650 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_17650] = 26
                                mem[_17650 + 32] = 'SafeMath: division by zero'
                                if not ext_call.return_data[0]:
                                    _17734 = mem[64]
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 26
                                    idx = 0
                                    while idx < 26:
                                        mem[idx + _17734 + 68] = mem[idx + _17650 + 32]
                                        idx = idx + 32
                                        continue 
                                    mem[_17734 + 68] = mem[_17734 + 74 len 26]
                                    revert with memory
                                      from mem[64]
                                       len _17734 + -mem[64] + 100
                                if (0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) < (10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]:
                                    revert with 0, 'SafeMath: addition overflow'
                                _18010 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_18010] = 30
                                mem[_18010 + 32] = 'SafeMath: subtraction overflow'
                                if (0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) > 10^18:
                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                    mem[mem[64] + 4] = 32
                                    mem[mem[64] + 36] = 30
                                    mem[mem[64] + 68] = 'SafeMath: subtraction overflow'
                                    idx = 32
                                    while idx < 30:
                                        mem[idx + mem[64] + 68] = mem[idx + _18010 + 32]
                                        idx = idx + 32
                                        continue 
                                    revert with 0, 'SafeMath: subtraction overflow'
                                require ext_code.size(address(_11365))
                                staticcall address(_11365).0x180f5842 with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(address(ext_call.return_data[0]))
                                staticcall address(ext_call.return_data[0]).0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_code.size(address(_11365))
                                staticcall address(_11365).wToken() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                mem[mem[64] + 4] = this.address
                                require ext_code.size(address(ext_call.return_data[0]))
                                staticcall address(ext_call.return_data[0]).0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0]:
                                    if not ext_call.return_data[0]:
                                        _19472 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_19472] = 26
                                        mem[_19472 + 32] = 'SafeMath: division by zero'
                                    else:
                                        if (0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0] * ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) / ext_call.return_data[0] != (0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]):
                                            revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                        _19513 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_19513] = 26
                                        mem[_19513 + 32] = 'SafeMath: division by zero'
                                        if (0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0] * ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) / 10^18 < 0:
                                            revert with 0, 'SafeMath: addition overflow'
                                else:
                                    if (10^18 * ext_call.return_data[0]) - (0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0] * ext_call.return_data[0]) - ((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) / ext_call.return_data[0] != -(0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + -((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18:
                                        revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                    if not ext_call.return_data[0]:
                                        if (10^18 * ext_call.return_data[0]) - (0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0] * ext_call.return_data[0]) - ((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) < 0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _19512 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_19512] = 26
                                        mem[_19512 + 32] = 'SafeMath: division by zero'
                                        if (10^18 * ext_call.return_data[0]) - (0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0] * ext_call.return_data[0]) - ((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) / 10^18 < 0:
                                            revert with 0, 'SafeMath: addition overflow'
                                    else:
                                        if (0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0] * ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) / ext_call.return_data[0] != (0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]):
                                            revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                        if (10^18 * ext_call.return_data[0]) - (0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0] * ext_call.return_data[0]) - ((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) < 0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _19528 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_19528] = 26
                                        mem[_19528 + 32] = 'SafeMath: division by zero'
                                        if (10^18 * ext_call.return_data[0]) - (0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0] * ext_call.return_data[0]) - ((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) + (0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0] * ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) / 10^18 < 0:
                                            revert with 0, 'SafeMath: addition overflow'
            idx = idx + 1
            continue 
        require ext_code.size(paymentTokenAddress)
        staticcall paymentTokenAddress.0x70a08231 with:
                gas gas_remaining wei
               args this.address
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if not ext_call.return_data[0]:
            if not 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]:
                revert with 0, 'SafeMath: division by zero'
            require ext_code.size(collateralTokenAddress)
            staticcall collateralTokenAddress.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if 0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] < 0:
                revert with 0, 'SafeMath: addition overflow'
            if ext_call.return_data[0] + (0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) < 0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]:
                revert with 0, 'SafeMath: addition overflow'
            return (ext_call.return_data[0] + (0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]))
        if 10^18 * ext_call.return_data[0] / ext_call.return_data[0] != 10^18:
            revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
        if not 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]:
            revert with 0, 'SafeMath: division by zero'
        require ext_code.size(collateralTokenAddress)
        staticcall collateralTokenAddress.0x70a08231 with:
                gas gas_remaining wei
               args this.address
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if 10^18 * ext_call.return_data[0] / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] < 0:
            revert with 0, 'SafeMath: addition overflow'
        if ext_call.return_data[0] + (10^18 * ext_call.return_data[0] / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) < 10^18 * ext_call.return_data[0] / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]:
            revert with 0, 'SafeMath: addition overflow'
        return (ext_call.return_data[0] + (10^18 * ext_call.return_data[0] / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]))
    if 10^18 * 10^ext_call.return_data[31 len 1] * 10^uint8(stor153.field_168) / 10^18 * 10^uint8(stor153.field_168) != 10^ext_call.return_data[31 len 1]:
        revert with 0, 32, 33, code.data[21823 len 33], ext_call.return_data[101 len 31]
    mem[(32 * _7) + ceil32(return_data.size) + 128] = 26
    mem[(32 * _7) + ceil32(return_data.size) + 160] = 'SafeMath: division by zero'
    if not 10^uint8(stor153.field_160):
        revert with 0, 'SafeMath: division by zero'
    mem[64] = (32 * _7) + ceil32(return_data.size) + 256
    mem[(32 * _7) + ceil32(return_data.size) + 192] = 26
    mem[(32 * _7) + ceil32(return_data.size) + 224] = 'SafeMath: division by zero'
    if not ext_call.return_data[32]:
        revert with 0, 'SafeMath: division by zero'
    _11328 = mem[ceil32(return_data.size) + 96]
    idx = 0
    while idx < _11328:
        require idx < mem[ceil32(return_data.size) + 96]
        _11360 = mem[(32 * idx) + ceil32(return_data.size) + 128]
        require ext_code.size(mem[(32 * idx) + ceil32(return_data.size) + 140 len 20])
        staticcall mem[(32 * idx) + ceil32(return_data.size) + 140 len 20].0xc19d93fb with:
                gas gas_remaining wei
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] <= 2
        if ext_call.return_data[0]:
            if not arg1:
                idx = idx + 1
                continue 
            require ext_code.size(address(_11360))
            staticcall address(_11360).0xc19d93fb with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] <= 2
            if ext_call.return_data[0] != 1:
                idx = idx + 1
                continue 
            require ext_code.size(address(_11360))
            staticcall address(_11360).wToken() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            mem[mem[64] + 4] = this.address
            require ext_code.size(address(ext_call.return_data[0]))
            staticcall address(ext_call.return_data[0]).0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(address(_11360))
            staticcall address(_11360).wToken() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(address(ext_call.return_data[0]))
            staticcall address(ext_call.return_data[0]).0x18160ddd with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0]:
                idx = idx + 1
                continue 
            if not ext_call.return_data[0]:
                idx = idx + 1
                continue 
            require ext_code.size(collateralTokenAddress)
            staticcall collateralTokenAddress.0x70a08231 with:
                    gas gas_remaining wei
                   args address(_11360)
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0]:
                _11918 = mem[64]
                mem[64] = mem[64] + 64
                mem[_11918] = 26
                mem[_11918 + 32] = 'SafeMath: division by zero'
                if not ext_call.return_data[0]:
                    _11992 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 26
                    idx = 0
                    while idx < 26:
                        mem[idx + _11992 + 68] = mem[idx + _11918 + 32]
                        idx = idx + 32
                        continue 
                    mem[_11992 + 68] = mem[_11992 + 74 len 26]
                    revert with memory
                      from mem[64]
                       len _11992 + -mem[64] + 100
                mem[mem[64] + 4] = address(_11360)
                require ext_code.size(paymentTokenAddress)
                staticcall paymentTokenAddress.0x70a08231 with:
                        gas gas_remaining wei
                       args address(_11360)
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0]:
                    _12398 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_12398] = 26
                    mem[_12398 + 32] = 'SafeMath: division by zero'
                    if not ext_call.return_data[0]:
                        _12579 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 26
                        idx = 0
                        while idx < 26:
                            mem[idx + _12579 + 68] = mem[idx + _12398 + 32]
                            idx = idx + 32
                            continue 
                        mem[_12579 + 68] = mem[_12579 + 74 len 26]
                        revert with memory
                          from mem[64]
                           len _12579 + -mem[64] + 100
                    if not 0 / ext_call.return_data[0]:
                        _13472 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_13472] = 26
                        mem[_13472 + 32] = 'SafeMath: division by zero'
                        if 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]:
                            if 0 / ext_call.return_data[0] < 0:
                                revert with 0, 'SafeMath: addition overflow'
                            if (0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + (0 / ext_call.return_data[0]) < 0 / ext_call.return_data[0]:
                                revert with 0, 'SafeMath: addition overflow'
                            idx = idx + 1
                            continue 
                        _13617 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 26
                        idx = 0
                        while idx < 26:
                            mem[idx + _13617 + 68] = mem[idx + _13472 + 32]
                            idx = idx + 32
                            continue 
                        mem[_13617 + 68] = mem[_13617 + 74 len 26]
                        revert with memory
                          from mem[64]
                           len _13617 + -mem[64] + 100
                    if 10^18 * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != 10^18:
                        revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                    _13552 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_13552] = 26
                    mem[_13552 + 32] = 'SafeMath: division by zero'
                    if 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]:
                        if 0 / ext_call.return_data[0] < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        if (10^18 * 0 / ext_call.return_data[0] / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + (0 / ext_call.return_data[0]) < 0 / ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        idx = idx + 1
                        continue 
                    _13691 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 26
                    idx = 0
                    while idx < 26:
                        mem[idx + _13691 + 68] = mem[idx + _13552 + 32]
                        idx = idx + 32
                        continue 
                    mem[_13691 + 68] = mem[_13691 + 74 len 26]
                    revert with memory
                      from mem[64]
                       len _13691 + -mem[64] + 100
                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                    revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                _12477 = mem[64]
                mem[64] = mem[64] + 64
                mem[_12477] = 26
                mem[_12477 + 32] = 'SafeMath: division by zero'
                if not ext_call.return_data[0]:
                    _12703 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 26
                    idx = 0
                    while idx < 26:
                        mem[idx + _12703 + 68] = mem[idx + _12477 + 32]
                        idx = idx + 32
                        continue 
                    mem[_12703 + 68] = mem[_12703 + 74 len 26]
                    revert with memory
                      from mem[64]
                       len _12703 + -mem[64] + 100
                if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                    _13551 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_13551] = 26
                    mem[_13551 + 32] = 'SafeMath: division by zero'
                    if 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]:
                        if 0 / ext_call.return_data[0] < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        if (0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + (0 / ext_call.return_data[0]) < 0 / ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        idx = idx + 1
                        continue 
                    _13688 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 26
                    idx = 0
                    while idx < 26:
                        mem[idx + _13688 + 68] = mem[idx + _13551 + 32]
                        idx = idx + 32
                        continue 
                    mem[_13688 + 68] = mem[_13688 + 74 len 26]
                    revert with memory
                      from mem[64]
                       len _13688 + -mem[64] + 100
                if 10^18 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != 10^18:
                    revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                _13616 = mem[64]
                mem[64] = mem[64] + 64
                mem[_13616] = 26
                mem[_13616 + 32] = 'SafeMath: division by zero'
                if 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]:
                    if 0 / ext_call.return_data[0] < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if (10^18 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + (0 / ext_call.return_data[0]) < 0 / ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    idx = idx + 1
                    continue 
                _13772 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 26
                idx = 0
                while idx < 26:
                    mem[idx + _13772 + 68] = mem[idx + _13616 + 32]
                    idx = idx + 32
                    continue 
                mem[_13772 + 68] = mem[_13772 + 74 len 26]
                revert with memory
                  from mem[64]
                   len _13772 + -mem[64] + 100
            if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
            _11954 = mem[64]
            mem[64] = mem[64] + 64
            mem[_11954] = 26
            mem[_11954 + 32] = 'SafeMath: division by zero'
            if not ext_call.return_data[0]:
                _12032 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 26
                idx = 0
                while idx < 26:
                    mem[idx + _12032 + 68] = mem[idx + _11954 + 32]
                    idx = idx + 32
                    continue 
                mem[_12032 + 68] = mem[_12032 + 74 len 26]
                revert with memory
                  from mem[64]
                   len _12032 + -mem[64] + 100
            mem[mem[64] + 4] = address(_11360)
            require ext_code.size(paymentTokenAddress)
            staticcall paymentTokenAddress.0x70a08231 with:
                    gas gas_remaining wei
                   args address(_11360)
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0]:
                _12476 = mem[64]
                mem[64] = mem[64] + 64
                mem[_12476] = 26
                mem[_12476 + 32] = 'SafeMath: division by zero'
                if not ext_call.return_data[0]:
                    _12700 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 26
                    idx = 0
                    while idx < 26:
                        mem[idx + _12700 + 68] = mem[idx + _12476 + 32]
                        idx = idx + 32
                        continue 
                    mem[_12700 + 68] = mem[_12700 + 74 len 26]
                    revert with memory
                      from mem[64]
                       len _12700 + -mem[64] + 100
                if not 0 / ext_call.return_data[0]:
                    _13550 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_13550] = 26
                    mem[_13550 + 32] = 'SafeMath: division by zero'
                    if 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]:
                        if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        if (0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) < ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                            revert with 0, 'SafeMath: addition overflow'
                        idx = idx + 1
                        continue 
                    _13685 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 26
                    idx = 0
                    while idx < 26:
                        mem[idx + _13685 + 68] = mem[idx + _13550 + 32]
                        idx = idx + 32
                        continue 
                    mem[_13685 + 68] = mem[_13685 + 74 len 26]
                    revert with memory
                      from mem[64]
                       len _13685 + -mem[64] + 100
                if 10^18 * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != 10^18:
                    revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                _13615 = mem[64]
                mem[64] = mem[64] + 64
                mem[_13615] = 26
                mem[_13615 + 32] = 'SafeMath: division by zero'
                if 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]:
                    if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if (10^18 * 0 / ext_call.return_data[0] / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) < ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    idx = idx + 1
                    continue 
                _13769 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 26
                idx = 0
                while idx < 26:
                    mem[idx + _13769 + 68] = mem[idx + _13615 + 32]
                    idx = idx + 32
                    continue 
                mem[_13769 + 68] = mem[_13769 + 74 len 26]
                revert with memory
                  from mem[64]
                   len _13769 + -mem[64] + 100
            if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
            _12578 = mem[64]
            mem[64] = mem[64] + 64
            mem[_12578] = 26
            mem[_12578 + 32] = 'SafeMath: division by zero'
            if not ext_call.return_data[0]:
                _12826 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 26
                idx = 0
                while idx < 26:
                    mem[idx + _12826 + 68] = mem[idx + _12578 + 32]
                    idx = idx + 32
                    continue 
                mem[_12826 + 68] = mem[_12826 + 74 len 26]
                revert with memory
                  from mem[64]
                   len _12826 + -mem[64] + 100
            if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                _13614 = mem[64]
                mem[64] = mem[64] + 64
                mem[_13614] = 26
                mem[_13614 + 32] = 'SafeMath: division by zero'
                if 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]:
                    if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if (0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) < ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    idx = idx + 1
                    continue 
                _13766 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 26
                idx = 0
                while idx < 26:
                    mem[idx + _13766 + 68] = mem[idx + _13614 + 32]
                    idx = idx + 32
                    continue 
                mem[_13766 + 68] = mem[_13766 + 74 len 26]
                revert with memory
                  from mem[64]
                   len _13766 + -mem[64] + 100
            if 10^18 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != 10^18:
                revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
            _13684 = mem[64]
            mem[64] = mem[64] + 64
            mem[_13684] = 26
            mem[_13684 + 32] = 'SafeMath: division by zero'
            if 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]:
                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if (10^18 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]) < ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                idx = idx + 1
                continue 
            _13866 = mem[64]
            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = 32
            mem[mem[64] + 36] = 26
            idx = 0
            while idx < 26:
                mem[idx + _13866 + 68] = mem[idx + _13684 + 32]
                idx = idx + 32
                continue 
            mem[_13866 + 68] = mem[_13866 + 74 len 26]
            revert with memory
              from mem[64]
               len _13866 + -mem[64] + 100
        require ext_code.size(address(_11360))
        staticcall address(_11360).0x8f620487 with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        _11479 = mem[64]
        mem[64] = mem[64] + 64
        mem[_11479] = 30
        mem[_11479 + 32] = 'SafeMath: subtraction overflow'
        if block.timestamp > ext_call.return_data[0]:
            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = 32
            mem[mem[64] + 36] = 30
            mem[mem[64] + 68] = 'SafeMath: subtraction overflow'
            idx = 32
            while idx < 30:
                mem[idx + mem[64] + 68] = mem[idx + _11479 + 32]
                idx = idx + 32
                continue 
            revert with 0, 'SafeMath: subtraction overflow'
        require ext_code.size(address(_11360))
        staticcall address(_11360).priceRatio() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] <= ext_call.return_data[0]:
            if ext_call.return_data[0] - block.timestamp <= 3:
                if not ext_call.return_data[0] - block.timestamp:
                    _11834 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_11834] = 26
                    mem[_11834 + 32] = 'SafeMath: division by zero'
                    if not ext_call.return_data[0]:
                        _11880 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 26
                        idx = 0
                        while idx < 26:
                            mem[idx + _11880 + 68] = mem[idx + _11834 + 32]
                            idx = idx + 32
                            continue 
                        mem[_11880 + 68] = mem[_11880 + 74 len 26]
                        revert with memory
                          from mem[64]
                           len _11880 + -mem[64] + 100
                    if 0 / ext_call.return_data[0] < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    _12222 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_12222] = 30
                    mem[_12222 + 32] = 'SafeMath: subtraction overflow'
                    if 0 / ext_call.return_data[0] > 10^18:
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 30
                        mem[mem[64] + 68] = 'SafeMath: subtraction overflow'
                        idx = 32
                        while idx < 30:
                            mem[idx + mem[64] + 68] = mem[idx + _12222 + 32]
                            idx = idx + 32
                            continue 
                        revert with 0, 'SafeMath: subtraction overflow'
                    require ext_code.size(address(_11360))
                    staticcall address(_11360).0x180f5842 with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(address(ext_call.return_data[0]))
                    staticcall address(ext_call.return_data[0]).0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(address(_11360))
                    staticcall address(_11360).wToken() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    mem[mem[64] + 4] = this.address
                    require ext_code.size(address(ext_call.return_data[0]))
                    staticcall address(ext_call.return_data[0]).0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0]:
                        if not ext_call.return_data[0]:
                            _15102 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_15102] = 26
                            mem[_15102 + 32] = 'SafeMath: division by zero'
                        else:
                            if 0 / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != 0 / ext_call.return_data[0]:
                                revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                            if 0 / ext_call.return_data[0] * ext_call.return_data[0] < 0 / ext_call.return_data[0] * ext_call.return_data[0]:
                                revert with 0, 'SafeMath: addition overflow'
                            _15221 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_15221] = 26
                            mem[_15221 + 32] = 'SafeMath: division by zero'
                            if 0 / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 < 0:
                                revert with 0, 'SafeMath: addition overflow'
                    else:
                        if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] != -(0 / ext_call.return_data[0]) + 10^18:
                            revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                        if not ext_call.return_data[0]:
                            if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) < 0:
                                revert with 0, 'SafeMath: addition overflow'
                            _15220 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_15220] = 26
                            mem[_15220 + 32] = 'SafeMath: division by zero'
                            if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) / 10^18 < 0:
                                revert with 0, 'SafeMath: addition overflow'
                        else:
                            if 0 / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != 0 / ext_call.return_data[0]:
                                revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                            if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) + (0 / ext_call.return_data[0] * ext_call.return_data[0]) < 0 / ext_call.return_data[0] * ext_call.return_data[0]:
                                revert with 0, 'SafeMath: addition overflow'
                            _15340 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_15340] = 26
                            mem[_15340 + 32] = 'SafeMath: division by zero'
                            if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) + (0 / ext_call.return_data[0] * ext_call.return_data[0]) / 10^18 < 0:
                                revert with 0, 'SafeMath: addition overflow'
                else:
                    if volatilityFactor != volatilityFactor:
                        revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                    if not volatilityFactor:
                        _11850 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_11850] = 26
                        mem[_11850 + 32] = 'SafeMath: division by zero'
                        if not ext_call.return_data[0]:
                            _11919 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 26
                            idx = 0
                            while idx < 26:
                                mem[idx + _11919 + 68] = mem[idx + _11850 + 32]
                                idx = idx + 32
                                continue 
                            mem[_11919 + 68] = mem[_11919 + 74 len 26]
                            revert with memory
                              from mem[64]
                               len _11919 + -mem[64] + 100
                        if 0 / ext_call.return_data[0] < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        _12243 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_12243] = 30
                        mem[_12243 + 32] = 'SafeMath: subtraction overflow'
                        if 0 / ext_call.return_data[0] > 10^18:
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            mem[mem[64] + 68] = 'SafeMath: subtraction overflow'
                            idx = 32
                            while idx < 30:
                                mem[idx + mem[64] + 68] = mem[idx + _12243 + 32]
                                idx = idx + 32
                                continue 
                            revert with 0, 'SafeMath: subtraction overflow'
                        require ext_code.size(address(_11360))
                        staticcall address(_11360).0x180f5842 with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(address(_11360))
                        staticcall address(_11360).wToken() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            if not ext_call.return_data[0]:
                                _15228 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_15228] = 26
                                mem[_15228 + 32] = 'SafeMath: division by zero'
                            else:
                                if 0 / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != 0 / ext_call.return_data[0]:
                                    revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                if 0 / ext_call.return_data[0] * ext_call.return_data[0] < 0 / ext_call.return_data[0] * ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: addition overflow'
                                _15345 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_15345] = 26
                                mem[_15345 + 32] = 'SafeMath: division by zero'
                                if 0 / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                        else:
                            if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] != -(0 / ext_call.return_data[0]) + 10^18:
                                revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                            if not ext_call.return_data[0]:
                                if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                                _15344 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_15344] = 26
                                mem[_15344 + 32] = 'SafeMath: division by zero'
                                if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) / 10^18 < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                            else:
                                if 0 / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != 0 / ext_call.return_data[0]:
                                    revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) + (0 / ext_call.return_data[0] * ext_call.return_data[0]) < 0 / ext_call.return_data[0] * ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: addition overflow'
                                _15456 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_15456] = 26
                                mem[_15456 + 32] = 'SafeMath: division by zero'
                                if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) + (0 / ext_call.return_data[0] * ext_call.return_data[0]) / 10^18 < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                    else:
                        if 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / volatilityFactor != 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]:
                            revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                        _11883 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_11883] = 26
                        mem[_11883 + 32] = 'SafeMath: division by zero'
                        if not ext_call.return_data[0]:
                            _11956 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 26
                            idx = 0
                            while idx < 26:
                                mem[idx + _11956 + 68] = mem[idx + _11883 + 32]
                                idx = idx + 32
                                continue 
                            mem[_11956 + 68] = mem[_11956 + 74 len 26]
                            revert with memory
                              from mem[64]
                               len _11956 + -mem[64] + 100
                        if 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0] < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        _12267 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_12267] = 30
                        mem[_12267 + 32] = 'SafeMath: subtraction overflow'
                        if 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0] > 10^18:
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            mem[mem[64] + 68] = 'SafeMath: subtraction overflow'
                            idx = 32
                            while idx < 30:
                                mem[idx + mem[64] + 68] = mem[idx + _12267 + 32]
                                idx = idx + 32
                                continue 
                            revert with 0, 'SafeMath: subtraction overflow'
                        require ext_code.size(address(_11360))
                        staticcall address(_11360).0x180f5842 with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(address(_11360))
                        staticcall address(_11360).wToken() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            if not ext_call.return_data[0]:
                                _15343 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_15343] = 26
                                mem[_15343 + 32] = 'SafeMath: division by zero'
                            else:
                                if 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]:
                                    revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                if 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0] * ext_call.return_data[0] < 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0] * ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: addition overflow'
                                _15455 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_15455] = 26
                                mem[_15455 + 32] = 'SafeMath: division by zero'
                                if 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                        else:
                            if (10^18 * ext_call.return_data[0]) - (10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] != -(10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + 10^18:
                                revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                            if not ext_call.return_data[0]:
                                if (10^18 * ext_call.return_data[0]) - (10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0] * ext_call.return_data[0]) < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                                _15454 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_15454] = 26
                                mem[_15454 + 32] = 'SafeMath: division by zero'
                                if (10^18 * ext_call.return_data[0]) - (10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0] * ext_call.return_data[0]) / 10^18 < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                            else:
                                if 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]:
                                    revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                if (10^18 * ext_call.return_data[0]) - (10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0] * ext_call.return_data[0]) + (10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0] * ext_call.return_data[0]) < 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0] * ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: addition overflow'
                                _15552 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_15552] = 26
                                mem[_15552 + 32] = 'SafeMath: division by zero'
                                if (10^18 * ext_call.return_data[0]) - (10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0] * ext_call.return_data[0]) + (10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0] * ext_call.return_data[0]) / 10^18 < 0:
                                    revert with 0, 'SafeMath: addition overflow'
            else:
                s = (ext_call.return_data[0] - block.timestamp / 2) + 1
                t = ext_call.return_data[0] - block.timestamp
                while s < t:
                    require s
                    s = (ext_call.return_data[0] - block.timestamp / s) + s / 2
                    t = s
                    continue 
                if not t:
                    _17582 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_17582] = 26
                    mem[_17582 + 32] = 'SafeMath: division by zero'
                    if not ext_call.return_data[0]:
                        _17635 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 26
                        idx = 0
                        while idx < 26:
                            mem[idx + _17635 + 68] = mem[idx + _17582 + 32]
                            idx = idx + 32
                            continue 
                        mem[_17635 + 68] = mem[_17635 + 74 len 26]
                        revert with memory
                          from mem[64]
                           len _17635 + -mem[64] + 100
                    if 0 / ext_call.return_data[0] < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    _17952 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_17952] = 30
                    mem[_17952 + 32] = 'SafeMath: subtraction overflow'
                    if 0 / ext_call.return_data[0] > 10^18:
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 30
                        mem[mem[64] + 68] = 'SafeMath: subtraction overflow'
                        idx = 32
                        while idx < 30:
                            mem[idx + mem[64] + 68] = mem[idx + _17952 + 32]
                            idx = idx + 32
                            continue 
                        revert with 0, 'SafeMath: subtraction overflow'
                    require ext_code.size(address(_11360))
                    staticcall address(_11360).0x180f5842 with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(address(ext_call.return_data[0]))
                    staticcall address(ext_call.return_data[0]).0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(address(_11360))
                    staticcall address(_11360).wToken() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    mem[mem[64] + 4] = this.address
                    require ext_code.size(address(ext_call.return_data[0]))
                    staticcall address(ext_call.return_data[0]).0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0]:
                        if not ext_call.return_data[0]:
                            _19266 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_19266] = 26
                            mem[_19266 + 32] = 'SafeMath: division by zero'
                        else:
                            if 0 / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != 0 / ext_call.return_data[0]:
                                revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                            if 0 / ext_call.return_data[0] * ext_call.return_data[0] < 0 / ext_call.return_data[0] * ext_call.return_data[0]:
                                revert with 0, 'SafeMath: addition overflow'
                            _19364 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_19364] = 26
                            mem[_19364 + 32] = 'SafeMath: division by zero'
                            if 0 / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 < 0:
                                revert with 0, 'SafeMath: addition overflow'
                    else:
                        if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] != -(0 / ext_call.return_data[0]) + 10^18:
                            revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                        if not ext_call.return_data[0]:
                            if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) < 0:
                                revert with 0, 'SafeMath: addition overflow'
                            _19363 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_19363] = 26
                            mem[_19363 + 32] = 'SafeMath: division by zero'
                            if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) / 10^18 < 0:
                                revert with 0, 'SafeMath: addition overflow'
                        else:
                            if 0 / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != 0 / ext_call.return_data[0]:
                                revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                            if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) + (0 / ext_call.return_data[0] * ext_call.return_data[0]) < 0 / ext_call.return_data[0] * ext_call.return_data[0]:
                                revert with 0, 'SafeMath: addition overflow'
                            _19451 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_19451] = 26
                            mem[_19451 + 32] = 'SafeMath: division by zero'
                            if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) + (0 / ext_call.return_data[0] * ext_call.return_data[0]) / 10^18 < 0:
                                revert with 0, 'SafeMath: addition overflow'
                else:
                    if volatilityFactor * t / t != volatilityFactor:
                        revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                    if not volatilityFactor * t:
                        _17604 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_17604] = 26
                        mem[_17604 + 32] = 'SafeMath: division by zero'
                        if not ext_call.return_data[0]:
                            _17676 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 26
                            idx = 0
                            while idx < 26:
                                mem[idx + _17676 + 68] = mem[idx + _17604 + 32]
                                idx = idx + 32
                                continue 
                            mem[_17676 + 68] = mem[_17676 + 74 len 26]
                            revert with memory
                              from mem[64]
                               len _17676 + -mem[64] + 100
                        if 0 / ext_call.return_data[0] < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        _17964 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_17964] = 30
                        mem[_17964 + 32] = 'SafeMath: subtraction overflow'
                        if 0 / ext_call.return_data[0] > 10^18:
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            mem[mem[64] + 68] = 'SafeMath: subtraction overflow'
                            idx = 32
                            while idx < 30:
                                mem[idx + mem[64] + 68] = mem[idx + _17964 + 32]
                                idx = idx + 32
                                continue 
                            revert with 0, 'SafeMath: subtraction overflow'
                        require ext_code.size(address(_11360))
                        staticcall address(_11360).0x180f5842 with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(address(_11360))
                        staticcall address(_11360).wToken() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            if not ext_call.return_data[0]:
                                _19362 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_19362] = 26
                                mem[_19362 + 32] = 'SafeMath: division by zero'
                            else:
                                if 0 / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != 0 / ext_call.return_data[0]:
                                    revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                if 0 / ext_call.return_data[0] * ext_call.return_data[0] < 0 / ext_call.return_data[0] * ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: addition overflow'
                                _19450 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_19450] = 26
                                mem[_19450 + 32] = 'SafeMath: division by zero'
                                if 0 / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                        else:
                            if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] != -(0 / ext_call.return_data[0]) + 10^18:
                                revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                            if not ext_call.return_data[0]:
                                if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                                _19449 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_19449] = 26
                                mem[_19449 + 32] = 'SafeMath: division by zero'
                                if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) / 10^18 < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                            else:
                                if 0 / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != 0 / ext_call.return_data[0]:
                                    revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) + (0 / ext_call.return_data[0] * ext_call.return_data[0]) < 0 / ext_call.return_data[0] * ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: addition overflow'
                                _19502 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_19502] = 26
                                mem[_19502 + 32] = 'SafeMath: division by zero'
                                if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) + (0 / ext_call.return_data[0] * ext_call.return_data[0]) / 10^18 < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                    else:
                        if 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / volatilityFactor * t != 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]:
                            revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                        _17634 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_17634] = 26
                        mem[_17634 + 32] = 'SafeMath: division by zero'
                        if not ext_call.return_data[0]:
                            _17718 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 26
                            idx = 0
                            while idx < 26:
                                mem[idx + _17718 + 68] = mem[idx + _17634 + 32]
                                idx = idx + 32
                                continue 
                            mem[_17718 + 68] = mem[_17718 + 74 len 26]
                            revert with memory
                              from mem[64]
                               len _17718 + -mem[64] + 100
                        if 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0] < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        _17994 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_17994] = 30
                        mem[_17994 + 32] = 'SafeMath: subtraction overflow'
                        if 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0] > 10^18:
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            mem[mem[64] + 68] = 'SafeMath: subtraction overflow'
                            idx = 32
                            while idx < 30:
                                mem[idx + mem[64] + 68] = mem[idx + _17994 + 32]
                                idx = idx + 32
                                continue 
                            revert with 0, 'SafeMath: subtraction overflow'
                        require ext_code.size(address(_11360))
                        staticcall address(_11360).0x180f5842 with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(address(_11360))
                        staticcall address(_11360).wToken() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            if not ext_call.return_data[0]:
                                _19448 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_19448] = 26
                                mem[_19448 + 32] = 'SafeMath: division by zero'
                            else:
                                if 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]:
                                    revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                if 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0] * ext_call.return_data[0] < 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0] * ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: addition overflow'
                                _19501 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_19501] = 26
                                mem[_19501 + 32] = 'SafeMath: division by zero'
                                if 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                        else:
                            if (10^18 * ext_call.return_data[0]) - (10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0] * ext_call.return_data[0]) / ext_call.return_data[0] != -(10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + 10^18:
                                revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                            if not ext_call.return_data[0]:
                                if (10^18 * ext_call.return_data[0]) - (10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0] * ext_call.return_data[0]) < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                                _19500 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_19500] = 26
                                mem[_19500 + 32] = 'SafeMath: division by zero'
                                if (10^18 * ext_call.return_data[0]) - (10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0] * ext_call.return_data[0]) / 10^18 < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                            else:
                                if 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]:
                                    revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                if (10^18 * ext_call.return_data[0]) - (10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0] * ext_call.return_data[0]) + (10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0] * ext_call.return_data[0]) < 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0] * ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: addition overflow'
                                _19524 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_19524] = 26
                                mem[_19524 + 32] = 'SafeMath: division by zero'
                                if (10^18 * ext_call.return_data[0]) - (10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0] * ext_call.return_data[0]) + (10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0] * ext_call.return_data[0]) / 10^18 < 0:
                                    revert with 0, 'SafeMath: addition overflow'
        else:
            _11661 = mem[64]
            mem[64] = mem[64] + 64
            mem[_11661] = 30
            mem[_11661 + 32] = 'SafeMath: subtraction overflow'
            if ext_call.return_data[0] > 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]:
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 30
                mem[mem[64] + 68] = 'SafeMath: subtraction overflow'
                idx = 32
                while idx < 30:
                    mem[idx + mem[64] + 68] = mem[idx + _11661 + 32]
                    idx = idx + 32
                    continue 
                revert with 0, 'SafeMath: subtraction overflow'
            if not (10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - ext_call.return_data[0]:
                _11797 = mem[64]
                mem[64] = mem[64] + 64
                mem[_11797] = 26
                mem[_11797 + 32] = 'SafeMath: division by zero'
                if not 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]:
                    _11816 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 26
                    idx = 0
                    while idx < 26:
                        mem[idx + _11816 + 68] = mem[idx + _11797 + 32]
                        idx = idx + 32
                        continue 
                    mem[_11816 + 68] = mem[_11816 + 74 len 26]
                    revert with memory
                      from mem[64]
                       len _11816 + -mem[64] + 100
                if ext_call.return_data[0] - block.timestamp <= 3:
                    if not ext_call.return_data[0] - block.timestamp:
                        _12410 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_12410] = 26
                        mem[_12410 + 32] = 'SafeMath: division by zero'
                        if not ext_call.return_data[0]:
                            _12599 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 26
                            idx = 0
                            while idx < 26:
                                mem[idx + _12599 + 68] = mem[idx + _12410 + 32]
                                idx = idx + 32
                                continue 
                            mem[_12599 + 68] = mem[_12599 + 74 len 26]
                            revert with memory
                              from mem[64]
                               len _12599 + -mem[64] + 100
                        if (0 / ext_call.return_data[0]) + (0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) < 0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]:
                            revert with 0, 'SafeMath: addition overflow'
                        _13562 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_13562] = 30
                        mem[_13562 + 32] = 'SafeMath: subtraction overflow'
                        if (0 / ext_call.return_data[0]) + (0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) > 10^18:
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            mem[mem[64] + 68] = 'SafeMath: subtraction overflow'
                            idx = 32
                            while idx < 30:
                                mem[idx + mem[64] + 68] = mem[idx + _13562 + 32]
                                idx = idx + 32
                                continue 
                            revert with 0, 'SafeMath: subtraction overflow'
                        require ext_code.size(address(_11360))
                        staticcall address(_11360).0x180f5842 with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(address(_11360))
                        staticcall address(_11360).wToken() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            if not ext_call.return_data[0]:
                                _16160 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_16160] = 26
                                mem[_16160 + 32] = 'SafeMath: division by zero'
                            else:
                                if (0 / ext_call.return_data[0] * ext_call.return_data[0]) + (0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) / ext_call.return_data[0] != (0 / ext_call.return_data[0]) + (0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]):
                                    revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                _16254 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_16254] = 26
                                mem[_16254 + 32] = 'SafeMath: division by zero'
                                if (0 / ext_call.return_data[0] * ext_call.return_data[0]) + (0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) / 10^18 < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                        else:
                            if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) - (0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) / ext_call.return_data[0] != -(0 / ext_call.return_data[0]) + -(0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18:
                                revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                            if not ext_call.return_data[0]:
                                if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) - (0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                                _16253 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_16253] = 26
                                mem[_16253 + 32] = 'SafeMath: division by zero'
                                if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) - (0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) / 10^18 < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                            else:
                                if (0 / ext_call.return_data[0] * ext_call.return_data[0]) + (0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) / ext_call.return_data[0] != (0 / ext_call.return_data[0]) + (0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]):
                                    revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) - (0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                                _16365 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_16365] = 26
                                mem[_16365 + 32] = 'SafeMath: division by zero'
                                if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) - (0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) + (0 / ext_call.return_data[0] * ext_call.return_data[0]) + (0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) / 10^18 < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                    else:
                        if volatilityFactor != volatilityFactor:
                            revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                        if not volatilityFactor:
                            _12498 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_12498] = 26
                            mem[_12498 + 32] = 'SafeMath: division by zero'
                            if not ext_call.return_data[0]:
                                _12729 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 26
                                idx = 0
                                while idx < 26:
                                    mem[idx + _12729 + 68] = mem[idx + _12498 + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_12729 + 68] = mem[_12729 + 74 len 26]
                                revert with memory
                                  from mem[64]
                                   len _12729 + -mem[64] + 100
                            if (0 / ext_call.return_data[0]) + (0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) < 0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]:
                                revert with 0, 'SafeMath: addition overflow'
                            _13629 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_13629] = 30
                            mem[_13629 + 32] = 'SafeMath: subtraction overflow'
                            if (0 / ext_call.return_data[0]) + (0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) > 10^18:
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                mem[mem[64] + 68] = 'SafeMath: subtraction overflow'
                                idx = 32
                                while idx < 30:
                                    mem[idx + mem[64] + 68] = mem[idx + _13629 + 32]
                                    idx = idx + 32
                                    continue 
                                revert with 0, 'SafeMath: subtraction overflow'
                            require ext_code.size(address(_11360))
                            staticcall address(_11360).0x180f5842 with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(address(ext_call.return_data[0]))
                            staticcall address(ext_call.return_data[0]).0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(address(_11360))
                            staticcall address(_11360).wToken() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(address(ext_call.return_data[0]))
                            staticcall address(ext_call.return_data[0]).0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                if not ext_call.return_data[0]:
                                    _16261 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_16261] = 26
                                    mem[_16261 + 32] = 'SafeMath: division by zero'
                                else:
                                    if (0 / ext_call.return_data[0] * ext_call.return_data[0]) + (0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) / ext_call.return_data[0] != (0 / ext_call.return_data[0]) + (0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]):
                                        revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                    _16370 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_16370] = 26
                                    mem[_16370 + 32] = 'SafeMath: division by zero'
                                    if (0 / ext_call.return_data[0] * ext_call.return_data[0]) + (0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) / 10^18 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                            else:
                                if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) - (0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) / ext_call.return_data[0] != -(0 / ext_call.return_data[0]) + -(0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18:
                                    revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                if not ext_call.return_data[0]:
                                    if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) - (0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _16369 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_16369] = 26
                                    mem[_16369 + 32] = 'SafeMath: division by zero'
                                    if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) - (0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) / 10^18 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                else:
                                    if (0 / ext_call.return_data[0] * ext_call.return_data[0]) + (0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) / ext_call.return_data[0] != (0 / ext_call.return_data[0]) + (0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]):
                                        revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                    if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) - (0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _16471 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_16471] = 26
                                    mem[_16471 + 32] = 'SafeMath: division by zero'
                                    if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) - (0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) + (0 / ext_call.return_data[0] * ext_call.return_data[0]) + (0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) / 10^18 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                        else:
                            if 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / volatilityFactor != 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]:
                                revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                            _12602 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_12602] = 26
                            mem[_12602 + 32] = 'SafeMath: division by zero'
                            if not ext_call.return_data[0]:
                                _12849 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 26
                                idx = 0
                                while idx < 26:
                                    mem[idx + _12849 + 68] = mem[idx + _12602 + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_12849 + 68] = mem[_12849 + 74 len 26]
                                revert with memory
                                  from mem[64]
                                   len _12849 + -mem[64] + 100
                            if (10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + (0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) < 0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]:
                                revert with 0, 'SafeMath: addition overflow'
                            _13701 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_13701] = 30
                            mem[_13701 + 32] = 'SafeMath: subtraction overflow'
                            if (10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + (0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) > 10^18:
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                mem[mem[64] + 68] = 'SafeMath: subtraction overflow'
                                idx = 32
                                while idx < 30:
                                    mem[idx + mem[64] + 68] = mem[idx + _13701 + 32]
                                    idx = idx + 32
                                    continue 
                                revert with 0, 'SafeMath: subtraction overflow'
                            require ext_code.size(address(_11360))
                            staticcall address(_11360).0x180f5842 with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(address(ext_call.return_data[0]))
                            staticcall address(ext_call.return_data[0]).0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(address(_11360))
                            staticcall address(_11360).wToken() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(address(ext_call.return_data[0]))
                            staticcall address(ext_call.return_data[0]).0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                if not ext_call.return_data[0]:
                                    _16368 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_16368] = 26
                                    mem[_16368 + 32] = 'SafeMath: division by zero'
                                else:
                                    if (10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0] * ext_call.return_data[0]) + (0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) / ext_call.return_data[0] != (10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + (0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]):
                                        revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                    _16470 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_16470] = 26
                                    mem[_16470 + 32] = 'SafeMath: division by zero'
                                    if (10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0] * ext_call.return_data[0]) + (0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) / 10^18 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                            else:
                                if (10^18 * ext_call.return_data[0]) - (10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0] * ext_call.return_data[0]) - (0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) / ext_call.return_data[0] != -(10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + -(0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18:
                                    revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                if not ext_call.return_data[0]:
                                    if (10^18 * ext_call.return_data[0]) - (10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0] * ext_call.return_data[0]) - (0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _16469 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_16469] = 26
                                    mem[_16469 + 32] = 'SafeMath: division by zero'
                                    if (10^18 * ext_call.return_data[0]) - (10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0] * ext_call.return_data[0]) - (0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) / 10^18 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                else:
                                    if (10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0] * ext_call.return_data[0]) + (0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) / ext_call.return_data[0] != (10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + (0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]):
                                        revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                    if (10^18 * ext_call.return_data[0]) - (10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0] * ext_call.return_data[0]) - (0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _16556 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_16556] = 26
                                    mem[_16556 + 32] = 'SafeMath: division by zero'
                                    if (10^18 * ext_call.return_data[0]) - (10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0] * ext_call.return_data[0]) - (0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) + (10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0] * ext_call.return_data[0]) + (0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) / 10^18 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                else:
                    s = (ext_call.return_data[0] - block.timestamp / 2) + 1
                    t = ext_call.return_data[0] - block.timestamp
                    while s < t:
                        require s
                        s = (ext_call.return_data[0] - block.timestamp / s) + s / 2
                        t = s
                        continue 
                    if not t:
                        _17588 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_17588] = 26
                        mem[_17588 + 32] = 'SafeMath: division by zero'
                        if not ext_call.return_data[0]:
                            _17643 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 26
                            idx = 0
                            while idx < 26:
                                mem[idx + _17643 + 68] = mem[idx + _17588 + 32]
                                idx = idx + 32
                                continue 
                            mem[_17643 + 68] = mem[_17643 + 74 len 26]
                            revert with memory
                              from mem[64]
                               len _17643 + -mem[64] + 100
                        if (0 / ext_call.return_data[0]) + (0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) < 0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]:
                            revert with 0, 'SafeMath: addition overflow'
                        _17954 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_17954] = 30
                        mem[_17954 + 32] = 'SafeMath: subtraction overflow'
                        if (0 / ext_call.return_data[0]) + (0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) > 10^18:
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            mem[mem[64] + 68] = 'SafeMath: subtraction overflow'
                            idx = 32
                            while idx < 30:
                                mem[idx + mem[64] + 68] = mem[idx + _17954 + 32]
                                idx = idx + 32
                                continue 
                            revert with 0, 'SafeMath: subtraction overflow'
                        require ext_code.size(address(_11360))
                        staticcall address(_11360).0x180f5842 with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(address(_11360))
                        staticcall address(_11360).wToken() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            if not ext_call.return_data[0]:
                                _19280 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_19280] = 26
                                mem[_19280 + 32] = 'SafeMath: division by zero'
                            else:
                                if (0 / ext_call.return_data[0] * ext_call.return_data[0]) + (0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) / ext_call.return_data[0] != (0 / ext_call.return_data[0]) + (0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]):
                                    revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                _19382 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_19382] = 26
                                mem[_19382 + 32] = 'SafeMath: division by zero'
                                if (0 / ext_call.return_data[0] * ext_call.return_data[0]) + (0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) / 10^18 < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                        else:
                            if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) - (0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) / ext_call.return_data[0] != -(0 / ext_call.return_data[0]) + -(0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18:
                                revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                            if not ext_call.return_data[0]:
                                if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) - (0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                                _19381 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_19381] = 26
                                mem[_19381 + 32] = 'SafeMath: division by zero'
                                if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) - (0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) / 10^18 < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                            else:
                                if (0 / ext_call.return_data[0] * ext_call.return_data[0]) + (0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) / ext_call.return_data[0] != (0 / ext_call.return_data[0]) + (0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]):
                                    revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) - (0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                                _19463 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_19463] = 26
                                mem[_19463 + 32] = 'SafeMath: division by zero'
                                if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) - (0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) + (0 / ext_call.return_data[0] * ext_call.return_data[0]) + (0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) / 10^18 < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                    else:
                        if volatilityFactor * t / t != volatilityFactor:
                            revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                        if not volatilityFactor * t:
                            _17606 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_17606] = 26
                            mem[_17606 + 32] = 'SafeMath: division by zero'
                            if not ext_call.return_data[0]:
                                _17682 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 26
                                idx = 0
                                while idx < 26:
                                    mem[idx + _17682 + 68] = mem[idx + _17606 + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_17682 + 68] = mem[_17682 + 74 len 26]
                                revert with memory
                                  from mem[64]
                                   len _17682 + -mem[64] + 100
                            if (0 / ext_call.return_data[0]) + (0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) < 0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]:
                                revert with 0, 'SafeMath: addition overflow'
                            _17966 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_17966] = 30
                            mem[_17966 + 32] = 'SafeMath: subtraction overflow'
                            if (0 / ext_call.return_data[0]) + (0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) > 10^18:
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                mem[mem[64] + 68] = 'SafeMath: subtraction overflow'
                                idx = 32
                                while idx < 30:
                                    mem[idx + mem[64] + 68] = mem[idx + _17966 + 32]
                                    idx = idx + 32
                                    continue 
                                revert with 0, 'SafeMath: subtraction overflow'
                            require ext_code.size(address(_11360))
                            staticcall address(_11360).0x180f5842 with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(address(ext_call.return_data[0]))
                            staticcall address(ext_call.return_data[0]).0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(address(_11360))
                            staticcall address(_11360).wToken() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(address(ext_call.return_data[0]))
                            staticcall address(ext_call.return_data[0]).0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                if not ext_call.return_data[0]:
                                    _19380 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_19380] = 26
                                    mem[_19380 + 32] = 'SafeMath: division by zero'
                                else:
                                    if (0 / ext_call.return_data[0] * ext_call.return_data[0]) + (0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) / ext_call.return_data[0] != (0 / ext_call.return_data[0]) + (0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]):
                                        revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                    _19462 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_19462] = 26
                                    mem[_19462 + 32] = 'SafeMath: division by zero'
                                    if (0 / ext_call.return_data[0] * ext_call.return_data[0]) + (0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) / 10^18 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                            else:
                                if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) - (0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) / ext_call.return_data[0] != -(0 / ext_call.return_data[0]) + -(0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18:
                                    revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                if not ext_call.return_data[0]:
                                    if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) - (0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _19461 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_19461] = 26
                                    mem[_19461 + 32] = 'SafeMath: division by zero'
                                    if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) - (0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) / 10^18 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                else:
                                    if (0 / ext_call.return_data[0] * ext_call.return_data[0]) + (0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) / ext_call.return_data[0] != (0 / ext_call.return_data[0]) + (0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]):
                                        revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                    if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) - (0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _19508 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_19508] = 26
                                    mem[_19508 + 32] = 'SafeMath: division by zero'
                                    if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) - (0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) + (0 / ext_call.return_data[0] * ext_call.return_data[0]) + (0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) / 10^18 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                        else:
                            if 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / volatilityFactor * t != 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]:
                                revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                            _17642 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_17642] = 26
                            mem[_17642 + 32] = 'SafeMath: division by zero'
                            if not ext_call.return_data[0]:
                                _17726 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 26
                                idx = 0
                                while idx < 26:
                                    mem[idx + _17726 + 68] = mem[idx + _17642 + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_17726 + 68] = mem[_17726 + 74 len 26]
                                revert with memory
                                  from mem[64]
                                   len _17726 + -mem[64] + 100
                            if (10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + (0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) < 0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]:
                                revert with 0, 'SafeMath: addition overflow'
                            _18002 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_18002] = 30
                            mem[_18002 + 32] = 'SafeMath: subtraction overflow'
                            if (10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + (0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) > 10^18:
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                mem[mem[64] + 68] = 'SafeMath: subtraction overflow'
                                idx = 32
                                while idx < 30:
                                    mem[idx + mem[64] + 68] = mem[idx + _18002 + 32]
                                    idx = idx + 32
                                    continue 
                                revert with 0, 'SafeMath: subtraction overflow'
                            require ext_code.size(address(_11360))
                            staticcall address(_11360).0x180f5842 with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(address(ext_call.return_data[0]))
                            staticcall address(ext_call.return_data[0]).0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(address(_11360))
                            staticcall address(_11360).wToken() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(address(ext_call.return_data[0]))
                            staticcall address(ext_call.return_data[0]).0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                if not ext_call.return_data[0]:
                                    _19460 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_19460] = 26
                                    mem[_19460 + 32] = 'SafeMath: division by zero'
                                else:
                                    if (10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0] * ext_call.return_data[0]) + (0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) / ext_call.return_data[0] != (10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + (0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]):
                                        revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                    _19507 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_19507] = 26
                                    mem[_19507 + 32] = 'SafeMath: division by zero'
                                    if (10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0] * ext_call.return_data[0]) + (0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) / 10^18 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                            else:
                                if (10^18 * ext_call.return_data[0]) - (10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0] * ext_call.return_data[0]) - (0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) / ext_call.return_data[0] != -(10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + -(0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18:
                                    revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                if not ext_call.return_data[0]:
                                    if (10^18 * ext_call.return_data[0]) - (10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0] * ext_call.return_data[0]) - (0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _19506 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_19506] = 26
                                    mem[_19506 + 32] = 'SafeMath: division by zero'
                                    if (10^18 * ext_call.return_data[0]) - (10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0] * ext_call.return_data[0]) - (0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) / 10^18 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                else:
                                    if (10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0] * ext_call.return_data[0]) + (0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) / ext_call.return_data[0] != (10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + (0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]):
                                        revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                    if (10^18 * ext_call.return_data[0]) - (10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0] * ext_call.return_data[0]) - (0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _19526 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_19526] = 26
                                    mem[_19526 + 32] = 'SafeMath: division by zero'
                                    if (10^18 * ext_call.return_data[0]) - (10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0] * ext_call.return_data[0]) - (0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) + (10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0] * ext_call.return_data[0]) + (0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) / 10^18 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
            else:
                if (10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / (10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - ext_call.return_data[0] != 10^18:
                    revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                _11807 = mem[64]
                mem[64] = mem[64] + 64
                mem[_11807] = 26
                mem[_11807 + 32] = 'SafeMath: division by zero'
                if not 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]:
                    _11837 = mem[64]
                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = 32
                    mem[mem[64] + 36] = 26
                    idx = 0
                    while idx < 26:
                        mem[idx + _11837 + 68] = mem[idx + _11807 + 32]
                        idx = idx + 32
                        continue 
                    mem[_11837 + 68] = mem[_11837 + 74 len 26]
                    revert with memory
                      from mem[64]
                       len _11837 + -mem[64] + 100
                if ext_call.return_data[0] - block.timestamp <= 3:
                    if not ext_call.return_data[0] - block.timestamp:
                        _12495 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_12495] = 26
                        mem[_12495 + 32] = 'SafeMath: division by zero'
                        if not ext_call.return_data[0]:
                            _12722 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 26
                            idx = 0
                            while idx < 26:
                                mem[idx + _12722 + 68] = mem[idx + _12495 + 32]
                                idx = idx + 32
                                continue 
                            mem[_12722 + 68] = mem[_12722 + 74 len 26]
                            revert with memory
                              from mem[64]
                               len _12722 + -mem[64] + 100
                        if (0 / ext_call.return_data[0]) + ((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) < (10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]:
                            revert with 0, 'SafeMath: addition overflow'
                        _13626 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_13626] = 30
                        mem[_13626 + 32] = 'SafeMath: subtraction overflow'
                        if (0 / ext_call.return_data[0]) + ((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) > 10^18:
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            mem[mem[64] + 68] = 'SafeMath: subtraction overflow'
                            idx = 32
                            while idx < 30:
                                mem[idx + mem[64] + 68] = mem[idx + _13626 + 32]
                                idx = idx + 32
                                continue 
                            revert with 0, 'SafeMath: subtraction overflow'
                        require ext_code.size(address(_11360))
                        staticcall address(_11360).0x180f5842 with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(address(_11360))
                        staticcall address(_11360).wToken() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            if not ext_call.return_data[0]:
                                _16244 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_16244] = 26
                                mem[_16244 + 32] = 'SafeMath: division by zero'
                            else:
                                if (0 / ext_call.return_data[0] * ext_call.return_data[0]) + ((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) / ext_call.return_data[0] != (0 / ext_call.return_data[0]) + ((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]):
                                    revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                _16351 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_16351] = 26
                                mem[_16351 + 32] = 'SafeMath: division by zero'
                                if (0 / ext_call.return_data[0] * ext_call.return_data[0]) + ((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) / 10^18 < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                        else:
                            if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) - ((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) / ext_call.return_data[0] != -(0 / ext_call.return_data[0]) + -((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18:
                                revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                            if not ext_call.return_data[0]:
                                if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) - ((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                                _16350 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_16350] = 26
                                mem[_16350 + 32] = 'SafeMath: division by zero'
                                if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) - ((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) / 10^18 < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                            else:
                                if (0 / ext_call.return_data[0] * ext_call.return_data[0]) + ((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) / ext_call.return_data[0] != (0 / ext_call.return_data[0]) + ((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]):
                                    revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) - ((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                                _16456 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_16456] = 26
                                mem[_16456 + 32] = 'SafeMath: division by zero'
                                if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) - ((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) + (0 / ext_call.return_data[0] * ext_call.return_data[0]) + ((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) / 10^18 < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                    else:
                        if volatilityFactor != volatilityFactor:
                            revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                        if not volatilityFactor:
                            _12598 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_12598] = 26
                            mem[_12598 + 32] = 'SafeMath: division by zero'
                            if not ext_call.return_data[0]:
                                _12844 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 26
                                idx = 0
                                while idx < 26:
                                    mem[idx + _12844 + 68] = mem[idx + _12598 + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_12844 + 68] = mem[_12844 + 74 len 26]
                                revert with memory
                                  from mem[64]
                                   len _12844 + -mem[64] + 100
                            if (0 / ext_call.return_data[0]) + ((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) < (10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]:
                                revert with 0, 'SafeMath: addition overflow'
                            _13697 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_13697] = 30
                            mem[_13697 + 32] = 'SafeMath: subtraction overflow'
                            if (0 / ext_call.return_data[0]) + ((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) > 10^18:
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                mem[mem[64] + 68] = 'SafeMath: subtraction overflow'
                                idx = 32
                                while idx < 30:
                                    mem[idx + mem[64] + 68] = mem[idx + _13697 + 32]
                                    idx = idx + 32
                                    continue 
                                revert with 0, 'SafeMath: subtraction overflow'
                            require ext_code.size(address(_11360))
                            staticcall address(_11360).0x180f5842 with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(address(ext_call.return_data[0]))
                            staticcall address(ext_call.return_data[0]).0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(address(_11360))
                            staticcall address(_11360).wToken() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(address(ext_call.return_data[0]))
                            staticcall address(ext_call.return_data[0]).0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                if not ext_call.return_data[0]:
                                    _16358 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_16358] = 26
                                    mem[_16358 + 32] = 'SafeMath: division by zero'
                                else:
                                    if (0 / ext_call.return_data[0] * ext_call.return_data[0]) + ((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) / ext_call.return_data[0] != (0 / ext_call.return_data[0]) + ((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]):
                                        revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                    _16461 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_16461] = 26
                                    mem[_16461 + 32] = 'SafeMath: division by zero'
                                    if (0 / ext_call.return_data[0] * ext_call.return_data[0]) + ((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) / 10^18 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                            else:
                                if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) - ((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) / ext_call.return_data[0] != -(0 / ext_call.return_data[0]) + -((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18:
                                    revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                if not ext_call.return_data[0]:
                                    if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) - ((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _16460 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_16460] = 26
                                    mem[_16460 + 32] = 'SafeMath: division by zero'
                                    if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) - ((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) / 10^18 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                else:
                                    if (0 / ext_call.return_data[0] * ext_call.return_data[0]) + ((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) / ext_call.return_data[0] != (0 / ext_call.return_data[0]) + ((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]):
                                        revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                    if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) - ((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _16546 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_16546] = 26
                                    mem[_16546 + 32] = 'SafeMath: division by zero'
                                    if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) - ((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) + (0 / ext_call.return_data[0] * ext_call.return_data[0]) + ((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) / 10^18 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                        else:
                            if 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / volatilityFactor != 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]:
                                revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                            _12725 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_12725] = 26
                            mem[_12725 + 32] = 'SafeMath: division by zero'
                            if not ext_call.return_data[0]:
                                _12960 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 26
                                idx = 0
                                while idx < 26:
                                    mem[idx + _12960 + 68] = mem[idx + _12725 + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_12960 + 68] = mem[_12960 + 74 len 26]
                                revert with memory
                                  from mem[64]
                                   len _12960 + -mem[64] + 100
                            if (10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + ((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) < (10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]:
                                revert with 0, 'SafeMath: addition overflow'
                            _13781 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_13781] = 30
                            mem[_13781 + 32] = 'SafeMath: subtraction overflow'
                            if (10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + ((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) > 10^18:
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                mem[mem[64] + 68] = 'SafeMath: subtraction overflow'
                                idx = 32
                                while idx < 30:
                                    mem[idx + mem[64] + 68] = mem[idx + _13781 + 32]
                                    idx = idx + 32
                                    continue 
                                revert with 0, 'SafeMath: subtraction overflow'
                            require ext_code.size(address(_11360))
                            staticcall address(_11360).0x180f5842 with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(address(ext_call.return_data[0]))
                            staticcall address(ext_call.return_data[0]).0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(address(_11360))
                            staticcall address(_11360).wToken() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(address(ext_call.return_data[0]))
                            staticcall address(ext_call.return_data[0]).0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                if not ext_call.return_data[0]:
                                    _16459 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_16459] = 26
                                    mem[_16459 + 32] = 'SafeMath: division by zero'
                                else:
                                    if (10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0] * ext_call.return_data[0]) + ((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) / ext_call.return_data[0] != (10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + ((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]):
                                        revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                    _16545 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_16545] = 26
                                    mem[_16545 + 32] = 'SafeMath: division by zero'
                                    if (10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0] * ext_call.return_data[0]) + ((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) / 10^18 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                            else:
                                if (10^18 * ext_call.return_data[0]) - (10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0] * ext_call.return_data[0]) - ((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) / ext_call.return_data[0] != -(10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + -((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18:
                                    revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                if not ext_call.return_data[0]:
                                    if (10^18 * ext_call.return_data[0]) - (10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0] * ext_call.return_data[0]) - ((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _16544 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_16544] = 26
                                    mem[_16544 + 32] = 'SafeMath: division by zero'
                                    if (10^18 * ext_call.return_data[0]) - (10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0] * ext_call.return_data[0]) - ((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) / 10^18 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                else:
                                    if (10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0] * ext_call.return_data[0]) + ((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) / ext_call.return_data[0] != (10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + ((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]):
                                        revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                    if (10^18 * ext_call.return_data[0]) - (10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0] * ext_call.return_data[0]) - ((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _16602 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_16602] = 26
                                    mem[_16602 + 32] = 'SafeMath: division by zero'
                                    if (10^18 * ext_call.return_data[0]) - (10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0] * ext_call.return_data[0]) - ((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) + (10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0] * ext_call.return_data[0]) + ((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) / 10^18 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                else:
                    s = (ext_call.return_data[0] - block.timestamp / 2) + 1
                    t = ext_call.return_data[0] - block.timestamp
                    while s < t:
                        require s
                        s = (ext_call.return_data[0] - block.timestamp / s) + s / 2
                        t = s
                        continue 
                    if not t:
                        _17585 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_17585] = 26
                        mem[_17585 + 32] = 'SafeMath: division by zero'
                        if not ext_call.return_data[0]:
                            _17639 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 26
                            idx = 0
                            while idx < 26:
                                mem[idx + _17639 + 68] = mem[idx + _17585 + 32]
                                idx = idx + 32
                                continue 
                            mem[_17639 + 68] = mem[_17639 + 74 len 26]
                            revert with memory
                              from mem[64]
                               len _17639 + -mem[64] + 100
                        if (0 / ext_call.return_data[0]) + ((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) < (10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]:
                            revert with 0, 'SafeMath: addition overflow'
                        _17953 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_17953] = 30
                        mem[_17953 + 32] = 'SafeMath: subtraction overflow'
                        if (0 / ext_call.return_data[0]) + ((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) > 10^18:
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            mem[mem[64] + 68] = 'SafeMath: subtraction overflow'
                            idx = 32
                            while idx < 30:
                                mem[idx + mem[64] + 68] = mem[idx + _17953 + 32]
                                idx = idx + 32
                                continue 
                            revert with 0, 'SafeMath: subtraction overflow'
                        require ext_code.size(address(_11360))
                        staticcall address(_11360).0x180f5842 with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(address(_11360))
                        staticcall address(_11360).wToken() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            if not ext_call.return_data[0]:
                                _19273 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_19273] = 26
                                mem[_19273 + 32] = 'SafeMath: division by zero'
                            else:
                                if (0 / ext_call.return_data[0] * ext_call.return_data[0]) + ((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) / ext_call.return_data[0] != (0 / ext_call.return_data[0]) + ((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]):
                                    revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                _19373 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_19373] = 26
                                mem[_19373 + 32] = 'SafeMath: division by zero'
                                if (0 / ext_call.return_data[0] * ext_call.return_data[0]) + ((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) / 10^18 < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                        else:
                            if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) - ((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) / ext_call.return_data[0] != -(0 / ext_call.return_data[0]) + -((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18:
                                revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                            if not ext_call.return_data[0]:
                                if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) - ((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                                _19372 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_19372] = 26
                                mem[_19372 + 32] = 'SafeMath: division by zero'
                                if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) - ((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) / 10^18 < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                            else:
                                if (0 / ext_call.return_data[0] * ext_call.return_data[0]) + ((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) / ext_call.return_data[0] != (0 / ext_call.return_data[0]) + ((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]):
                                    revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) - ((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                                _19457 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_19457] = 26
                                mem[_19457 + 32] = 'SafeMath: division by zero'
                                if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) - ((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) + (0 / ext_call.return_data[0] * ext_call.return_data[0]) + ((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) / 10^18 < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                    else:
                        if volatilityFactor * t / t != volatilityFactor:
                            revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                        if not volatilityFactor * t:
                            _17605 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_17605] = 26
                            mem[_17605 + 32] = 'SafeMath: division by zero'
                            if not ext_call.return_data[0]:
                                _17679 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 26
                                idx = 0
                                while idx < 26:
                                    mem[idx + _17679 + 68] = mem[idx + _17605 + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_17679 + 68] = mem[_17679 + 74 len 26]
                                revert with memory
                                  from mem[64]
                                   len _17679 + -mem[64] + 100
                            if (0 / ext_call.return_data[0]) + ((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) < (10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]:
                                revert with 0, 'SafeMath: addition overflow'
                            _17965 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_17965] = 30
                            mem[_17965 + 32] = 'SafeMath: subtraction overflow'
                            if (0 / ext_call.return_data[0]) + ((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) > 10^18:
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                mem[mem[64] + 68] = 'SafeMath: subtraction overflow'
                                idx = 32
                                while idx < 30:
                                    mem[idx + mem[64] + 68] = mem[idx + _17965 + 32]
                                    idx = idx + 32
                                    continue 
                                revert with 0, 'SafeMath: subtraction overflow'
                            require ext_code.size(address(_11360))
                            staticcall address(_11360).0x180f5842 with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(address(ext_call.return_data[0]))
                            staticcall address(ext_call.return_data[0]).0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(address(_11360))
                            staticcall address(_11360).wToken() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(address(ext_call.return_data[0]))
                            staticcall address(ext_call.return_data[0]).0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                if not ext_call.return_data[0]:
                                    _19371 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_19371] = 26
                                    mem[_19371 + 32] = 'SafeMath: division by zero'
                                else:
                                    if (0 / ext_call.return_data[0] * ext_call.return_data[0]) + ((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) / ext_call.return_data[0] != (0 / ext_call.return_data[0]) + ((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]):
                                        revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                    _19456 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_19456] = 26
                                    mem[_19456 + 32] = 'SafeMath: division by zero'
                                    if (0 / ext_call.return_data[0] * ext_call.return_data[0]) + ((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) / 10^18 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                            else:
                                if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) - ((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) / ext_call.return_data[0] != -(0 / ext_call.return_data[0]) + -((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18:
                                    revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                if not ext_call.return_data[0]:
                                    if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) - ((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _19455 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_19455] = 26
                                    mem[_19455 + 32] = 'SafeMath: division by zero'
                                    if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) - ((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) / 10^18 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                else:
                                    if (0 / ext_call.return_data[0] * ext_call.return_data[0]) + ((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) / ext_call.return_data[0] != (0 / ext_call.return_data[0]) + ((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]):
                                        revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                    if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) - ((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _19505 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_19505] = 26
                                    mem[_19505 + 32] = 'SafeMath: division by zero'
                                    if (10^18 * ext_call.return_data[0]) - (0 / ext_call.return_data[0] * ext_call.return_data[0]) - ((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) + (0 / ext_call.return_data[0] * ext_call.return_data[0]) + ((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) / 10^18 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                        else:
                            if 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / volatilityFactor * t != 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]:
                                revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                            _17638 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_17638] = 26
                            mem[_17638 + 32] = 'SafeMath: division by zero'
                            if not ext_call.return_data[0]:
                                _17722 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 26
                                idx = 0
                                while idx < 26:
                                    mem[idx + _17722 + 68] = mem[idx + _17638 + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_17722 + 68] = mem[_17722 + 74 len 26]
                                revert with memory
                                  from mem[64]
                                   len _17722 + -mem[64] + 100
                            if (10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + ((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) < (10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]:
                                revert with 0, 'SafeMath: addition overflow'
                            _17998 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_17998] = 30
                            mem[_17998 + 32] = 'SafeMath: subtraction overflow'
                            if (10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + ((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) > 10^18:
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                mem[mem[64] + 68] = 'SafeMath: subtraction overflow'
                                idx = 32
                                while idx < 30:
                                    mem[idx + mem[64] + 68] = mem[idx + _17998 + 32]
                                    idx = idx + 32
                                    continue 
                                revert with 0, 'SafeMath: subtraction overflow'
                            require ext_code.size(address(_11360))
                            staticcall address(_11360).0x180f5842 with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(address(ext_call.return_data[0]))
                            staticcall address(ext_call.return_data[0]).0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(address(_11360))
                            staticcall address(_11360).wToken() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(address(ext_call.return_data[0]))
                            staticcall address(ext_call.return_data[0]).0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                if not ext_call.return_data[0]:
                                    _19454 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_19454] = 26
                                    mem[_19454 + 32] = 'SafeMath: division by zero'
                                else:
                                    if (10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0] * ext_call.return_data[0]) + ((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) / ext_call.return_data[0] != (10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + ((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]):
                                        revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                    _19504 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_19504] = 26
                                    mem[_19504 + 32] = 'SafeMath: division by zero'
                                    if (10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0] * ext_call.return_data[0]) + ((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) / 10^18 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                            else:
                                if (10^18 * ext_call.return_data[0]) - (10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0] * ext_call.return_data[0]) - ((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) / ext_call.return_data[0] != -(10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + -((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18:
                                    revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                if not ext_call.return_data[0]:
                                    if (10^18 * ext_call.return_data[0]) - (10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0] * ext_call.return_data[0]) - ((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _19503 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_19503] = 26
                                    mem[_19503 + 32] = 'SafeMath: division by zero'
                                    if (10^18 * ext_call.return_data[0]) - (10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0] * ext_call.return_data[0]) - ((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) / 10^18 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                else:
                                    if (10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0] * ext_call.return_data[0]) + ((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) / ext_call.return_data[0] != (10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + ((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]):
                                        revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
                                    if (10^18 * ext_call.return_data[0]) - (10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0] * ext_call.return_data[0]) - ((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _19525 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_19525] = 26
                                    mem[_19525 + 32] = 'SafeMath: division by zero'
                                    if (10^18 * ext_call.return_data[0]) - (10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0] * ext_call.return_data[0]) - ((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) + (10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0] * ext_call.return_data[0]) + ((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * ext_call.return_data[0]) / 10^18 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
        idx = idx + 1
        continue 
    require ext_code.size(paymentTokenAddress)
    staticcall paymentTokenAddress.0x70a08231 with:
            gas gas_remaining wei
           args this.address
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if not ext_call.return_data[0]:
        if not 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]:
            revert with 0, 'SafeMath: division by zero'
        require ext_code.size(collateralTokenAddress)
        staticcall collateralTokenAddress.0x70a08231 with:
                gas gas_remaining wei
               args this.address
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if 0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] < 0:
            revert with 0, 'SafeMath: addition overflow'
        if ext_call.return_data[0] + (0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) < 0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]:
            revert with 0, 'SafeMath: addition overflow'
        return (ext_call.return_data[0] + (0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]))
    if 10^18 * ext_call.return_data[0] / ext_call.return_data[0] != 10^18:
        revert with 0, 32, 33, code.data[21823 len 33], mem[mem[64] + 101 len 31]
    if not 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]:
        revert with 0, 'SafeMath: division by zero'
    require ext_code.size(collateralTokenAddress)
    staticcall collateralTokenAddress.0x70a08231 with:
            gas gas_remaining wei
           args this.address
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if 10^18 * ext_call.return_data[0] / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] < 0:
        revert with 0, 'SafeMath: addition overflow'
    if ext_call.return_data[0] + (10^18 * ext_call.return_data[0] / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) < 10^18 * ext_call.return_data[0] / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]:
        revert with 0, 'SafeMath: addition overflow'
    return (ext_call.return_data[0] + (10^18 * ext_call.return_data[0] / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]))
}

function getVirtualReserves(address arg1) payable {
    require calldata.size - 4 >= 32
    require ext_code.size(collateralTokenAddress)
    staticcall collateralTokenAddress.0x70a08231 with:
            gas gas_remaining wei
           args this.address
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_code.size(arg1)
    staticcall arg1.0x180f5842 with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_code.size(address(ext_call.return_data[0]))
    staticcall address(ext_call.return_data[0]).0x70a08231 with:
            gas gas_remaining wei
           args this.address
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if 2 * ext_call.return_data[0] < ext_call.return_data[0]:
        revert with 0, 'SafeMath: addition overflow'
    require ext_code.size(arg1)
    staticcall arg1.wToken() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_code.size(address(ext_call.return_data[0]))
    staticcall address(ext_call.return_data[0]).0x70a08231 with:
            gas gas_remaining wei
           args this.address
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if 2 * ext_call.return_data[0] < ext_call.return_data[0]:
        revert with 0, 'SafeMath: addition overflow'
    require ext_code.size(stor155)
    staticcall stor155.latestRoundData() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 160
    if ext_call.return_data[32] < 0:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    32,
                    40,
                    code.data[21934 len 40],
                    ext_call.return_data[108 len 24]
    require ext_code.size(stor155)
    staticcall stor155.0x313ce567 with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if 10^18 * 10^uint8(stor153.field_168) / 10^18 != 10^uint8(stor153.field_168):
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    32,
                    33,
                    code.data[21823 len 33],
                    ext_call.return_data[101 len 31]
    if not stor157:
        if not 10^18 * 10^uint8(stor153.field_168):
            if not 10^uint8(stor153.field_160):
                revert with 0, 'SafeMath: division by zero'
            if not 10^uint8(ext_call.return_data[0]):
                revert with 0, 'SafeMath: division by zero'
            require ext_code.size(arg1)
            staticcall arg1.0x8f620487 with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if block.timestamp > ext_call.return_data[0]:
                revert with 0, 'SafeMath: subtraction overflow'
            require ext_code.size(arg1)
            staticcall arg1.priceRatio() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) <= ext_call.return_data[0]:
                if ext_call.return_data[0] - block.timestamp <= 3:
                    if not ext_call.return_data[0] - block.timestamp:
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        if 0 / ext_call.return_data[0] < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        if 0 / ext_call.return_data[0] > 10^18:
                            revert with 0, 'SafeMath: subtraction overflow'
                        if 0 / ext_call.return_data[0] > -(0 / ext_call.return_data[0]) + 10^18:
                            if not 2 * ext_call.return_data[0]:
                                if not 0 / ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                if 0 / 0 / ext_call.return_data[0] <= 2 * ext_call.return_data[0]:
                                    return 0 / 0 / ext_call.return_data[0], 2 * ext_call.return_data[0]
                            else:
                                if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) / 2 * ext_call.return_data[0] != -(0 / ext_call.return_data[0]) + 10^18:
                                    revert with 0, 32, 33, code.data[21823 len 33], mem[517 len 31]
                                if not 0 / ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) / 0 / ext_call.return_data[0] <= 2 * ext_call.return_data[0]:
                                    return (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) / 0 / ext_call.return_data[0], 
                                           2 * ext_call.return_data[0]
                            if not 2 * ext_call.return_data[0]:
                                if not -(0 / ext_call.return_data[0]) + 10^18:
                                    revert with 0, 'SafeMath: division by zero'
                                return 2 * ext_call.return_data[0], 0 / -(0 / ext_call.return_data[0]) + 10^18
                            if (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) / 2 * ext_call.return_data[0] != 0 / ext_call.return_data[0]:
                                revert with 0, 32, 33, code.data[21823 len 33], mem[581 len 31]
                            if not -(0 / ext_call.return_data[0]) + 10^18:
                                revert with 0, 'SafeMath: division by zero'
                            return 2 * ext_call.return_data[0], 
                                   (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) / -(0 / ext_call.return_data[0]) + 10^18
                        if not 2 * ext_call.return_data[0]:
                            if not -(0 / ext_call.return_data[0]) + 10^18:
                                revert with 0, 'SafeMath: division by zero'
                            if 0 / -(0 / ext_call.return_data[0]) + 10^18 <= 2 * ext_call.return_data[0]:
                                return 2 * ext_call.return_data[0], 0 / -(0 / ext_call.return_data[0]) + 10^18
                        else:
                            if (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) / 2 * ext_call.return_data[0] != 0 / ext_call.return_data[0]:
                                revert with 0, 32, 33, code.data[21823 len 33], mem[517 len 31]
                            if not -(0 / ext_call.return_data[0]) + 10^18:
                                revert with 0, 'SafeMath: division by zero'
                            if (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) / -(0 / ext_call.return_data[0]) + 10^18 <= 2 * ext_call.return_data[0]:
                                return 2 * ext_call.return_data[0], 
                                       (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) / -(0 / ext_call.return_data[0]) + 10^18
                        if not 2 * ext_call.return_data[0]:
                            if not 0 / ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero'
                            return 0 / 0 / ext_call.return_data[0], 2 * ext_call.return_data[0]
                        if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) / 2 * ext_call.return_data[0] != -(0 / ext_call.return_data[0]) + 10^18:
                            revert with 0, 32, 33, code.data[21823 len 33], mem[581 len 31]
                        if not 0 / ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        return (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) / 0 / ext_call.return_data[0], 
                               2 * ext_call.return_data[0]
                    if volatilityFactor != volatilityFactor:
                        revert with 0, 32, 33, code.data[21823 len 33], mem[389 len 31]
                    if not volatilityFactor:
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        if 0 / ext_call.return_data[0] < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        if 0 / ext_call.return_data[0] > 10^18:
                            revert with 0, 'SafeMath: subtraction overflow'
                        if 0 / ext_call.return_data[0] > -(0 / ext_call.return_data[0]) + 10^18:
                            if not 2 * ext_call.return_data[0]:
                                if not 0 / ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                if 0 / 0 / ext_call.return_data[0] <= 2 * ext_call.return_data[0]:
                                    return 0 / 0 / ext_call.return_data[0], 2 * ext_call.return_data[0]
                            else:
                                if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) / 2 * ext_call.return_data[0] != -(0 / ext_call.return_data[0]) + 10^18:
                                    revert with 0, 32, 33, code.data[21823 len 33], mem[517 len 31]
                                if not 0 / ext_call.return_data[0]:
                                    revert with 0, 'SafeMath: division by zero'
                                if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) / 0 / ext_call.return_data[0] <= 2 * ext_call.return_data[0]:
                                    return (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) / 0 / ext_call.return_data[0], 
                                           2 * ext_call.return_data[0]
                            if not 2 * ext_call.return_data[0]:
                                if not -(0 / ext_call.return_data[0]) + 10^18:
                                    revert with 0, 'SafeMath: division by zero'
                                return 2 * ext_call.return_data[0], 0 / -(0 / ext_call.return_data[0]) + 10^18
                            if (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) / 2 * ext_call.return_data[0] != 0 / ext_call.return_data[0]:
                                revert with 0, 32, 33, code.data[21823 len 33], mem[581 len 31]
                            if not -(0 / ext_call.return_data[0]) + 10^18:
                                revert with 0, 'SafeMath: division by zero'
                            return 2 * ext_call.return_data[0], 
                                   (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) / -(0 / ext_call.return_data[0]) + 10^18
                        if not 2 * ext_call.return_data[0]:
                            if not -(0 / ext_call.return_data[0]) + 10^18:
                                revert with 0, 'SafeMath: division by zero'
                            if 0 / -(0 / ext_call.return_data[0]) + 10^18 <= 2 * ext_call.return_data[0]:
                                return 2 * ext_call.return_data[0], 0 / -(0 / ext_call.return_data[0]) + 10^18
                        else:
                            if (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) / 2 * ext_call.return_data[0] != 0 / ext_call.return_data[0]:
                                revert with 0, 32, 33, code.data[21823 len 33], mem[517 len 31]
                            if not -(0 / ext_call.return_data[0]) + 10^18:
                                revert with 0, 'SafeMath: division by zero'
                            if (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) / -(0 / ext_call.return_data[0]) + 10^18 <= 2 * ext_call.return_data[0]:
                                return 2 * ext_call.return_data[0], 
                                       (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) / -(0 / ext_call.return_data[0]) + 10^18
                        if not 2 * ext_call.return_data[0]:
                            if not 0 / ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero'
                            return 0 / 0 / ext_call.return_data[0], 2 * ext_call.return_data[0]
                        if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) / 2 * ext_call.return_data[0] != -(0 / ext_call.return_data[0]) + 10^18:
                            revert with 0, 32, 33, code.data[21823 len 33], mem[581 len 31]
                        if not 0 / ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        return (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) / 0 / ext_call.return_data[0], 
                               2 * ext_call.return_data[0]
                    if 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / volatilityFactor != 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]):
                        revert with 0, 32, 33, code.data[21823 len 33], mem[389 len 31]
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    if 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0] < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0] > 10^18:
                        revert with 0, 'SafeMath: subtraction overflow'
                    if 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0] > -(0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + 10^18:
                        if not 2 * ext_call.return_data[0]:
                            if not 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero'
                            if 0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0] <= 2 * ext_call.return_data[0]:
                                return 0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0], 
                                       2 * ext_call.return_data[0]
                        else:
                            if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) / 2 * ext_call.return_data[0] != -(0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + 10^18:
                                revert with 0, 32, 33, code.data[21823 len 33], mem[517 len 31]
                            if not 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero'
                            if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0] <= 2 * ext_call.return_data[0]:
                                return (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0], 
                                       2 * ext_call.return_data[0]
                        if not 2 * ext_call.return_data[0]:
                            if not -(0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + 10^18:
                                revert with 0, 'SafeMath: division by zero'
                            return 2 * ext_call.return_data[0], 
                                   0 / -(0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + 10^18
                        if (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) / 2 * ext_call.return_data[0] != 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]:
                            revert with 0, 32, 33, code.data[21823 len 33], mem[581 len 31]
                        if not -(0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + 10^18:
                            revert with 0, 'SafeMath: division by zero'
                        return 2 * ext_call.return_data[0], 
                               (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) / -(0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + 10^18
                    if not 2 * ext_call.return_data[0]:
                        if not -(0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + 10^18:
                            revert with 0, 'SafeMath: division by zero'
                        if 0 / -(0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + 10^18 <= 2 * ext_call.return_data[0]:
                            return 2 * ext_call.return_data[0], 
                                   0 / -(0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + 10^18
                    else:
                        if (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) / 2 * ext_call.return_data[0] != 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]:
                            revert with 0, 32, 33, code.data[21823 len 33], mem[517 len 31]
                        if not -(0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + 10^18:
                            revert with 0, 'SafeMath: division by zero'
                        if (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) / -(0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + 10^18 <= 2 * ext_call.return_data[0]:
                            return 2 * ext_call.return_data[0], 
                                   (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) / -(0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + 10^18
                    if not 2 * ext_call.return_data[0]:
                        if not 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        return 0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0], 
                               2 * ext_call.return_data[0]
                    if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) / 2 * ext_call.return_data[0] != -(0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + 10^18:
                        revert with 0, 32, 33, code.data[21823 len 33], mem[581 len 31]
                    if not 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    return (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0], 
                           2 * ext_call.return_data[0]
                s = (ext_call.return_data[0] - block.timestamp / 2) + 1
                t = ext_call.return_data[0] - block.timestamp
                while s < t:
                    require s
                    s = (ext_call.return_data[0] - block.timestamp / s) + s / 2
                    t = s
                    continue 
                if not t:
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    if 0 / ext_call.return_data[0] < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if 0 / ext_call.return_data[0] > 10^18:
                        revert with 0, 'SafeMath: subtraction overflow'
                    if 0 / ext_call.return_data[0] > -(0 / ext_call.return_data[0]) + 10^18:
                        if not 2 * ext_call.return_data[0]:
                            if not 0 / ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero'
                            if 0 / 0 / ext_call.return_data[0] <= 2 * ext_call.return_data[0]:
                                return 0 / 0 / ext_call.return_data[0], 2 * ext_call.return_data[0]
                        else:
                            if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) / 2 * ext_call.return_data[0] != -(0 / ext_call.return_data[0]) + 10^18:
                                revert with 0, 32, 33, code.data[21823 len 33], mem[517 len 31]
                            if not 0 / ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero'
                            if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) / 0 / ext_call.return_data[0] <= 2 * ext_call.return_data[0]:
                                return (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) / 0 / ext_call.return_data[0], 
                                       2 * ext_call.return_data[0]
                        if not 2 * ext_call.return_data[0]:
                            if not -(0 / ext_call.return_data[0]) + 10^18:
                                revert with 0, 'SafeMath: division by zero'
                            return 2 * ext_call.return_data[0], 0 / -(0 / ext_call.return_data[0]) + 10^18
                        if (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) / 2 * ext_call.return_data[0] != 0 / ext_call.return_data[0]:
                            revert with 0, 32, 33, code.data[21823 len 33], mem[581 len 31]
                        if not -(0 / ext_call.return_data[0]) + 10^18:
                            revert with 0, 'SafeMath: division by zero'
                        return 2 * ext_call.return_data[0], 
                               (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) / -(0 / ext_call.return_data[0]) + 10^18
                    if not 2 * ext_call.return_data[0]:
                        if not -(0 / ext_call.return_data[0]) + 10^18:
                            revert with 0, 'SafeMath: division by zero'
                        if 0 / -(0 / ext_call.return_data[0]) + 10^18 <= 2 * ext_call.return_data[0]:
                            return 2 * ext_call.return_data[0], 0 / -(0 / ext_call.return_data[0]) + 10^18
                    else:
                        if (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) / 2 * ext_call.return_data[0] != 0 / ext_call.return_data[0]:
                            revert with 0, 32, 33, code.data[21823 len 33], mem[517 len 31]
                        if not -(0 / ext_call.return_data[0]) + 10^18:
                            revert with 0, 'SafeMath: division by zero'
                        if (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) / -(0 / ext_call.return_data[0]) + 10^18 <= 2 * ext_call.return_data[0]:
                            return 2 * ext_call.return_data[0], 
                                   (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) / -(0 / ext_call.return_data[0]) + 10^18
                    if not 2 * ext_call.return_data[0]:
                        if not 0 / ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        return 0 / 0 / ext_call.return_data[0], 2 * ext_call.return_data[0]
                    if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) / 2 * ext_call.return_data[0] != -(0 / ext_call.return_data[0]) + 10^18:
                        revert with 0, 32, 33, code.data[21823 len 33], mem[581 len 31]
                    if not 0 / ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    return (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) / 0 / ext_call.return_data[0], 
                           2 * ext_call.return_data[0]
                if volatilityFactor * t / t != volatilityFactor:
                    revert with 0, 32, 33, code.data[21823 len 33], mem[389 len 31]
                if not volatilityFactor * t:
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    if 0 / ext_call.return_data[0] < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if 0 / ext_call.return_data[0] > 10^18:
                        revert with 0, 'SafeMath: subtraction overflow'
                    if 0 / ext_call.return_data[0] > -(0 / ext_call.return_data[0]) + 10^18:
                        if not 2 * ext_call.return_data[0]:
                            if not 0 / ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero'
                            if 0 / 0 / ext_call.return_data[0] <= 2 * ext_call.return_data[0]:
                                return 0 / 0 / ext_call.return_data[0], 2 * ext_call.return_data[0]
                        else:
                            if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) / 2 * ext_call.return_data[0] != -(0 / ext_call.return_data[0]) + 10^18:
                                revert with 0, 32, 33, code.data[21823 len 33], mem[517 len 31]
                            if not 0 / ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero'
                            if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) / 0 / ext_call.return_data[0] <= 2 * ext_call.return_data[0]:
                                return (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) / 0 / ext_call.return_data[0], 
                                       2 * ext_call.return_data[0]
                        if not 2 * ext_call.return_data[0]:
                            if not -(0 / ext_call.return_data[0]) + 10^18:
                                revert with 0, 'SafeMath: division by zero'
                            return 2 * ext_call.return_data[0], 0 / -(0 / ext_call.return_data[0]) + 10^18
                        if (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) / 2 * ext_call.return_data[0] != 0 / ext_call.return_data[0]:
                            revert with 0, 32, 33, code.data[21823 len 33], mem[581 len 31]
                        if not -(0 / ext_call.return_data[0]) + 10^18:
                            revert with 0, 'SafeMath: division by zero'
                        return 2 * ext_call.return_data[0], 
                               (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) / -(0 / ext_call.return_data[0]) + 10^18
                    if not 2 * ext_call.return_data[0]:
                        if not -(0 / ext_call.return_data[0]) + 10^18:
                            revert with 0, 'SafeMath: division by zero'
                        if 0 / -(0 / ext_call.return_data[0]) + 10^18 <= 2 * ext_call.return_data[0]:
                            return 2 * ext_call.return_data[0], 0 / -(0 / ext_call.return_data[0]) + 10^18
                    else:
                        if (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) / 2 * ext_call.return_data[0] != 0 / ext_call.return_data[0]:
                            revert with 0, 32, 33, code.data[21823 len 33], mem[517 len 31]
                        if not -(0 / ext_call.return_data[0]) + 10^18:
                            revert with 0, 'SafeMath: division by zero'
                        if (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) / -(0 / ext_call.return_data[0]) + 10^18 <= 2 * ext_call.return_data[0]:
                            return 2 * ext_call.return_data[0], 
                                   (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) / -(0 / ext_call.return_data[0]) + 10^18
                    if not 2 * ext_call.return_data[0]:
                        if not 0 / ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        return 0 / 0 / ext_call.return_data[0], 2 * ext_call.return_data[0]
                    if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) / 2 * ext_call.return_data[0] != -(0 / ext_call.return_data[0]) + 10^18:
                        revert with 0, 32, 33, code.data[21823 len 33], mem[581 len 31]
                    if not 0 / ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    return (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) / 0 / ext_call.return_data[0], 
                           2 * ext_call.return_data[0]
                if 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / volatilityFactor * t != 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]):
                    revert with 0, 32, 33, code.data[21823 len 33], mem[389 len 31]
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                if 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0] < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0] > 10^18:
                    revert with 0, 'SafeMath: subtraction overflow'
                if 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0] > -(0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + 10^18:
                    if not 2 * ext_call.return_data[0]:
                        if not 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        if 0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0] <= 2 * ext_call.return_data[0]:
                            return 0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0], 
                                   2 * ext_call.return_data[0]
                    else:
                        if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) / 2 * ext_call.return_data[0] != -(0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + 10^18:
                            revert with 0, 32, 33, code.data[21823 len 33], mem[517 len 31]
                        if not 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0] <= 2 * ext_call.return_data[0]:
                            return (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0], 
                                   2 * ext_call.return_data[0]
                    if not 2 * ext_call.return_data[0]:
                        if not -(0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + 10^18:
                            revert with 0, 'SafeMath: division by zero'
                        return 2 * ext_call.return_data[0], 
                               0 / -(0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + 10^18
                    if (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) / 2 * ext_call.return_data[0] != 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]:
                        revert with 0, 32, 33, code.data[21823 len 33], mem[581 len 31]
                    if not -(0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + 10^18:
                        revert with 0, 'SafeMath: division by zero'
                    return 2 * ext_call.return_data[0], 
                           (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) / -(0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + 10^18
                if not 2 * ext_call.return_data[0]:
                    if not -(0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + 10^18:
                        revert with 0, 'SafeMath: division by zero'
                    if 0 / -(0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + 10^18 <= 2 * ext_call.return_data[0]:
                        return 2 * ext_call.return_data[0], 
                               0 / -(0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + 10^18
                else:
                    if (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) / 2 * ext_call.return_data[0] != 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]:
                        revert with 0, 32, 33, code.data[21823 len 33], mem[517 len 31]
                    if not -(0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + 10^18:
                        revert with 0, 'SafeMath: division by zero'
                    if (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) / -(0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + 10^18 <= 2 * ext_call.return_data[0]:
                        return 2 * ext_call.return_data[0], 
                               (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) / -(0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + 10^18
                if not 2 * ext_call.return_data[0]:
                    if not 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    return 0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0], 
                           2 * ext_call.return_data[0]
                if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) / 2 * ext_call.return_data[0] != -(0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + 10^18:
                    revert with 0, 32, 33, code.data[21823 len 33], mem[581 len 31]
                if not 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                return (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0], 
                       2 * ext_call.return_data[0]
            if ext_call.return_data[0] > 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]):
                revert with 0, 'SafeMath: subtraction overflow'
            if not (0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - ext_call.return_data[0]:
                if not 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]):
                    revert with 0, 'SafeMath: division by zero'
                if ext_call.return_data[0] - block.timestamp <= 3:
                    if not ext_call.return_data[0] - block.timestamp:
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        if (0 / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) < 0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]):
                            revert with 0, 'SafeMath: addition overflow'
                        if (0 / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) > 10^18:
                            revert with 0, 'SafeMath: subtraction overflow'
                        if (0 / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) > -(0 / ext_call.return_data[0]) + -(0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18:
                            if not 2 * ext_call.return_data[0]:
                                if not (0 / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])):
                                    revert with 0, 'SafeMath: division by zero'
                                if 0 / (0 / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) <= 2 * ext_call.return_data[0]:
                                    return 0 / (0 / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])), 
                                           2 * ext_call.return_data[0]
                            else:
                                if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / 2 * ext_call.return_data[0] != -(0 / ext_call.return_data[0]) + -(0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18:
                                    revert with 0, 32, 33, code.data[21823 len 33], mem[645 len 31]
                                if not (0 / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])):
                                    revert with 0, 'SafeMath: division by zero'
                                if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / (0 / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) <= 2 * ext_call.return_data[0]:
                                    return (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / (0 / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])), 
                                           2 * ext_call.return_data[0]
                            if not 2 * ext_call.return_data[0]:
                                if not -(0 / ext_call.return_data[0]) + -(0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18:
                                    revert with 0, 'SafeMath: division by zero'
                                return 2 * ext_call.return_data[0], 
                                       0 / -(0 / ext_call.return_data[0]) + -(0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18
                            if (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / 2 * ext_call.return_data[0] != (0 / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])):
                                revert with 0, 32, 33, code.data[21823 len 33], mem[709 len 31]
                            if not -(0 / ext_call.return_data[0]) + -(0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18:
                                revert with 0, 'SafeMath: division by zero'
                            return 2 * ext_call.return_data[0], 
                                   (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / -(0 / ext_call.return_data[0]) + -(0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18
                        if not 2 * ext_call.return_data[0]:
                            if not -(0 / ext_call.return_data[0]) + -(0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18:
                                revert with 0, 'SafeMath: division by zero'
                            if 0 / -(0 / ext_call.return_data[0]) + -(0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18 <= 2 * ext_call.return_data[0]:
                                return 2 * ext_call.return_data[0], 
                                       0 / -(0 / ext_call.return_data[0]) + -(0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18
                        else:
                            if (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / 2 * ext_call.return_data[0] != (0 / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])):
                                revert with 0, 32, 33, code.data[21823 len 33], mem[645 len 31]
                            if not -(0 / ext_call.return_data[0]) + -(0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18:
                                revert with 0, 'SafeMath: division by zero'
                            if (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / -(0 / ext_call.return_data[0]) + -(0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18 <= 2 * ext_call.return_data[0]:
                                return 2 * ext_call.return_data[0], 
                                       (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / -(0 / ext_call.return_data[0]) + -(0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18
                        if not 2 * ext_call.return_data[0]:
                            if not (0 / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])):
                                revert with 0, 'SafeMath: division by zero'
                            return 0 / (0 / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])), 
                                   2 * ext_call.return_data[0]
                        if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / 2 * ext_call.return_data[0] != -(0 / ext_call.return_data[0]) + -(0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18:
                            revert with 0, 32, 33, code.data[21823 len 33], mem[709 len 31]
                        if not (0 / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])):
                            revert with 0, 'SafeMath: division by zero'
                        return (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / (0 / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])), 
                               2 * ext_call.return_data[0]
                    if volatilityFactor != volatilityFactor:
                        revert with 0, 32, 33, code.data[21823 len 33], mem[517 len 31]
                    if not volatilityFactor:
                        if not ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        if (0 / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) < 0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]):
                            revert with 0, 'SafeMath: addition overflow'
                        if (0 / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) > 10^18:
                            revert with 0, 'SafeMath: subtraction overflow'
                        if (0 / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) > -(0 / ext_call.return_data[0]) + -(0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18:
                            if not 2 * ext_call.return_data[0]:
                                if not (0 / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])):
                                    revert with 0, 'SafeMath: division by zero'
                                if 0 / (0 / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) <= 2 * ext_call.return_data[0]:
                                    return 0 / (0 / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])), 
                                           2 * ext_call.return_data[0]
                            else:
                                if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / 2 * ext_call.return_data[0] != -(0 / ext_call.return_data[0]) + -(0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18:
                                    revert with 0, 32, 33, code.data[21823 len 33], mem[645 len 31]
                                if not (0 / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])):
                                    revert with 0, 'SafeMath: division by zero'
                                if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / (0 / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) <= 2 * ext_call.return_data[0]:
                                    return (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / (0 / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])), 
                                           2 * ext_call.return_data[0]
                            if not 2 * ext_call.return_data[0]:
                                if not -(0 / ext_call.return_data[0]) + -(0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18:
                                    revert with 0, 'SafeMath: division by zero'
                                return 2 * ext_call.return_data[0], 
                                       0 / -(0 / ext_call.return_data[0]) + -(0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18
                            if (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / 2 * ext_call.return_data[0] != (0 / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])):
                                revert with 0, 32, 33, code.data[21823 len 33], mem[709 len 31]
                            if not -(0 / ext_call.return_data[0]) + -(0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18:
                                revert with 0, 'SafeMath: division by zero'
                            return 2 * ext_call.return_data[0], 
                                   (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / -(0 / ext_call.return_data[0]) + -(0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18
                        if not 2 * ext_call.return_data[0]:
                            if not -(0 / ext_call.return_data[0]) + -(0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18:
                                revert with 0, 'SafeMath: division by zero'
                            if 0 / -(0 / ext_call.return_data[0]) + -(0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18 <= 2 * ext_call.return_data[0]:
                                return 2 * ext_call.return_data[0], 
                                       0 / -(0 / ext_call.return_data[0]) + -(0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18
                        else:
                            if (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / 2 * ext_call.return_data[0] != (0 / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])):
                                revert with 0, 32, 33, code.data[21823 len 33], mem[645 len 31]
                            if not -(0 / ext_call.return_data[0]) + -(0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18:
                                revert with 0, 'SafeMath: division by zero'
                            if (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / -(0 / ext_call.return_data[0]) + -(0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18 <= 2 * ext_call.return_data[0]:
                                return 2 * ext_call.return_data[0], 
                                       (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / -(0 / ext_call.return_data[0]) + -(0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18
                        if not 2 * ext_call.return_data[0]:
                            if not (0 / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])):
                                revert with 0, 'SafeMath: division by zero'
                            return 0 / (0 / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])), 
                                   2 * ext_call.return_data[0]
                        if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / 2 * ext_call.return_data[0] != -(0 / ext_call.return_data[0]) + -(0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18:
                            revert with 0, 32, 33, code.data[21823 len 33], mem[709 len 31]
                        if not (0 / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])):
                            revert with 0, 'SafeMath: division by zero'
                        return (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / (0 / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])), 
                               2 * ext_call.return_data[0]
                    if 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / volatilityFactor != 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]):
                        revert with 0, 32, 33, code.data[21823 len 33], mem[517 len 31]
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    if (0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) < 0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]):
                        revert with 0, 'SafeMath: addition overflow'
                    if (0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) > 10^18:
                        revert with 0, 'SafeMath: subtraction overflow'
                    if (0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) > -(0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + -(0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18:
                        if not 2 * ext_call.return_data[0]:
                            if not (0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])):
                                revert with 0, 'SafeMath: division by zero'
                            if 0 / (0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) <= 2 * ext_call.return_data[0]:
                                return 0 / (0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])), 
                                       2 * ext_call.return_data[0]
                        else:
                            if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / 2 * ext_call.return_data[0] != -(0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + -(0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18:
                                revert with 0, 32, 33, code.data[21823 len 33], mem[645 len 31]
                            if not (0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])):
                                revert with 0, 'SafeMath: division by zero'
                            if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / (0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) <= 2 * ext_call.return_data[0]:
                                return (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / (0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])), 
                                       2 * ext_call.return_data[0]
                        if not 2 * ext_call.return_data[0]:
                            if not -(0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + -(0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18:
                                revert with 0, 'SafeMath: division by zero'
                            return 2 * ext_call.return_data[0], 
                                   0 / -(0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + -(0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18
                        if (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / 2 * ext_call.return_data[0] != (0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])):
                            revert with 0, 32, 33, code.data[21823 len 33], mem[709 len 31]
                        if not -(0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + -(0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18:
                            revert with 0, 'SafeMath: division by zero'
                        return 2 * ext_call.return_data[0], 
                               (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / -(0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + -(0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18
                    if not 2 * ext_call.return_data[0]:
                        if not -(0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + -(0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18:
                            revert with 0, 'SafeMath: division by zero'
                        if 0 / -(0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + -(0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18 <= 2 * ext_call.return_data[0]:
                            return 2 * ext_call.return_data[0], 
                                   0 / -(0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + -(0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18
                    else:
                        if (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / 2 * ext_call.return_data[0] != (0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])):
                            revert with 0, 32, 33, code.data[21823 len 33], mem[645 len 31]
                        if not -(0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + -(0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18:
                            revert with 0, 'SafeMath: division by zero'
                        if (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / -(0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + -(0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18 <= 2 * ext_call.return_data[0]:
                            return 2 * ext_call.return_data[0], 
                                   (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / -(0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + -(0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18
                    if not 2 * ext_call.return_data[0]:
                        if not (0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])):
                            revert with 0, 'SafeMath: division by zero'
                        return 0 / (0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])), 
                               2 * ext_call.return_data[0]
                    if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / 2 * ext_call.return_data[0] != -(0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + -(0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18:
                        revert with 0, 32, 33, code.data[21823 len 33], mem[709 len 31]
                    if not (0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])):
                        revert with 0, 'SafeMath: division by zero'
                    return (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / (0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])), 
                           2 * ext_call.return_data[0]
                s = (ext_call.return_data[0] - block.timestamp / 2) + 1
                t = ext_call.return_data[0] - block.timestamp
                while s < t:
                    require s
                    s = (ext_call.return_data[0] - block.timestamp / s) + s / 2
                    t = s
                    continue 
                if not t:
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    if (0 / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) < 0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]):
                        revert with 0, 'SafeMath: addition overflow'
                    if (0 / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) > 10^18:
                        revert with 0, 'SafeMath: subtraction overflow'
                    if (0 / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) > -(0 / ext_call.return_data[0]) + -(0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18:
                        if not 2 * ext_call.return_data[0]:
                            if not (0 / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])):
                                revert with 0, 'SafeMath: division by zero'
                            if 0 / (0 / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) <= 2 * ext_call.return_data[0]:
                                return 0 / (0 / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])), 
                                       2 * ext_call.return_data[0]
                        else:
                            if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / 2 * ext_call.return_data[0] != -(0 / ext_call.return_data[0]) + -(0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18:
                                revert with 0, 32, 33, code.data[21823 len 33], mem[645 len 31]
                            if not (0 / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])):
                                revert with 0, 'SafeMath: division by zero'
                            if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / (0 / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) <= 2 * ext_call.return_data[0]:
                                return (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / (0 / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])), 
                                       2 * ext_call.return_data[0]
                        if not 2 * ext_call.return_data[0]:
                            if not -(0 / ext_call.return_data[0]) + -(0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18:
                                revert with 0, 'SafeMath: division by zero'
                            return 2 * ext_call.return_data[0], 
                                   0 / -(0 / ext_call.return_data[0]) + -(0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18
                        if (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / 2 * ext_call.return_data[0] != (0 / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])):
                            revert with 0, 32, 33, code.data[21823 len 33], mem[709 len 31]
                        if not -(0 / ext_call.return_data[0]) + -(0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18:
                            revert with 0, 'SafeMath: division by zero'
                        return 2 * ext_call.return_data[0], 
                               (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / -(0 / ext_call.return_data[0]) + -(0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18
                    if not 2 * ext_call.return_data[0]:
                        if not -(0 / ext_call.return_data[0]) + -(0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18:
                            revert with 0, 'SafeMath: division by zero'
                        if 0 / -(0 / ext_call.return_data[0]) + -(0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18 <= 2 * ext_call.return_data[0]:
                            return 2 * ext_call.return_data[0], 
                                   0 / -(0 / ext_call.return_data[0]) + -(0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18
                    else:
                        if (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / 2 * ext_call.return_data[0] != (0 / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])):
                            revert with 0, 32, 33, code.data[21823 len 33], mem[645 len 31]
                        if not -(0 / ext_call.return_data[0]) + -(0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18:
                            revert with 0, 'SafeMath: division by zero'
                        if (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / -(0 / ext_call.return_data[0]) + -(0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18 <= 2 * ext_call.return_data[0]:
                            return 2 * ext_call.return_data[0], 
                                   (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / -(0 / ext_call.return_data[0]) + -(0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18
                    if not 2 * ext_call.return_data[0]:
                        if not (0 / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])):
                            revert with 0, 'SafeMath: division by zero'
                        return 0 / (0 / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])), 
                               2 * ext_call.return_data[0]
                    if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / 2 * ext_call.return_data[0] != -(0 / ext_call.return_data[0]) + -(0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18:
                        revert with 0, 32, 33, code.data[21823 len 33], mem[709 len 31]
                    if not (0 / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])):
                        revert with 0, 'SafeMath: division by zero'
                    return (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / (0 / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])), 
                           2 * ext_call.return_data[0]
                if volatilityFactor * t / t != volatilityFactor:
                    revert with 0, 32, 33, code.data[21823 len 33], mem[517 len 31]
                if not volatilityFactor * t:
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    if (0 / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) < 0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]):
                        revert with 0, 'SafeMath: addition overflow'
                    if (0 / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) > 10^18:
                        revert with 0, 'SafeMath: subtraction overflow'
                    if (0 / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) > -(0 / ext_call.return_data[0]) + -(0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18:
                        if not 2 * ext_call.return_data[0]:
                            if not (0 / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])):
                                revert with 0, 'SafeMath: division by zero'
                            if 0 / (0 / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) <= 2 * ext_call.return_data[0]:
                                return 0 / (0 / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])), 
                                       2 * ext_call.return_data[0]
                        else:
                            if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / 2 * ext_call.return_data[0] != -(0 / ext_call.return_data[0]) + -(0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18:
                                revert with 0, 32, 33, code.data[21823 len 33], mem[645 len 31]
                            if not (0 / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])):
                                revert with 0, 'SafeMath: division by zero'
                            if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / (0 / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) <= 2 * ext_call.return_data[0]:
                                return (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / (0 / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])), 
                                       2 * ext_call.return_data[0]
                        if not 2 * ext_call.return_data[0]:
                            if not -(0 / ext_call.return_data[0]) + -(0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18:
                                revert with 0, 'SafeMath: division by zero'
                            return 2 * ext_call.return_data[0], 
                                   0 / -(0 / ext_call.return_data[0]) + -(0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18
                        if (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / 2 * ext_call.return_data[0] != (0 / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])):
                            revert with 0, 32, 33, code.data[21823 len 33], mem[709 len 31]
                        if not -(0 / ext_call.return_data[0]) + -(0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18:
                            revert with 0, 'SafeMath: division by zero'
                        return 2 * ext_call.return_data[0], 
                               (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / -(0 / ext_call.return_data[0]) + -(0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18
                    if not 2 * ext_call.return_data[0]:
                        if not -(0 / ext_call.return_data[0]) + -(0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18:
                            revert with 0, 'SafeMath: division by zero'
                        if 0 / -(0 / ext_call.return_data[0]) + -(0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18 <= 2 * ext_call.return_data[0]:
                            return 2 * ext_call.return_data[0], 
                                   0 / -(0 / ext_call.return_data[0]) + -(0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18
                    else:
                        if (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / 2 * ext_call.return_data[0] != (0 / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])):
                            revert with 0, 32, 33, code.data[21823 len 33], mem[645 len 31]
                        if not -(0 / ext_call.return_data[0]) + -(0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18:
                            revert with 0, 'SafeMath: division by zero'
                        if (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / -(0 / ext_call.return_data[0]) + -(0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18 <= 2 * ext_call.return_data[0]:
                            return 2 * ext_call.return_data[0], 
                                   (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / -(0 / ext_call.return_data[0]) + -(0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18
                    if not 2 * ext_call.return_data[0]:
                        if not (0 / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])):
                            revert with 0, 'SafeMath: division by zero'
                        return 0 / (0 / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])), 
                               2 * ext_call.return_data[0]
                    if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / 2 * ext_call.return_data[0] != -(0 / ext_call.return_data[0]) + -(0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18:
                        revert with 0, 32, 33, code.data[21823 len 33], mem[709 len 31]
                    if not (0 / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])):
                        revert with 0, 'SafeMath: division by zero'
                    return (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / (0 / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])), 
                           2 * ext_call.return_data[0]
                if 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / volatilityFactor * t != 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]):
                    revert with 0, 32, 33, code.data[21823 len 33], mem[517 len 31]
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                if (0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) < 0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]):
                    revert with 0, 'SafeMath: addition overflow'
                if (0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) > 10^18:
                    revert with 0, 'SafeMath: subtraction overflow'
                if (0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) > -(0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + -(0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18:
                    if not 2 * ext_call.return_data[0]:
                        if not (0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])):
                            revert with 0, 'SafeMath: division by zero'
                        if 0 / (0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) <= 2 * ext_call.return_data[0]:
                            return 0 / (0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])), 
                                   2 * ext_call.return_data[0]
                    else:
                        if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / 2 * ext_call.return_data[0] != -(0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + -(0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18:
                            revert with 0, 32, 33, code.data[21823 len 33], mem[645 len 31]
                        if not (0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])):
                            revert with 0, 'SafeMath: division by zero'
                        if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / (0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) <= 2 * ext_call.return_data[0]:
                            return (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / (0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])), 
                                   2 * ext_call.return_data[0]
                    if not 2 * ext_call.return_data[0]:
                        if not -(0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + -(0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18:
                            revert with 0, 'SafeMath: division by zero'
                        return 2 * ext_call.return_data[0], 
                               0 / -(0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + -(0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18
                    if (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / 2 * ext_call.return_data[0] != (0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])):
                        revert with 0, 32, 33, code.data[21823 len 33], mem[709 len 31]
                    if not -(0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + -(0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18:
                        revert with 0, 'SafeMath: division by zero'
                    return 2 * ext_call.return_data[0], 
                           (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / -(0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + -(0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18
                if not 2 * ext_call.return_data[0]:
                    if not -(0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + -(0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18:
                        revert with 0, 'SafeMath: division by zero'
                    if 0 / -(0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + -(0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18 <= 2 * ext_call.return_data[0]:
                        return 2 * ext_call.return_data[0], 
                               0 / -(0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + -(0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18
                else:
                    if (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / 2 * ext_call.return_data[0] != (0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])):
                        revert with 0, 32, 33, code.data[21823 len 33], mem[645 len 31]
                    if not -(0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + -(0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18:
                        revert with 0, 'SafeMath: division by zero'
                    if (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / -(0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + -(0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18 <= 2 * ext_call.return_data[0]:
                        return 2 * ext_call.return_data[0], 
                               (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / -(0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + -(0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18
                if not 2 * ext_call.return_data[0]:
                    if not (0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])):
                        revert with 0, 'SafeMath: division by zero'
                    return 0 / (0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])), 
                           2 * ext_call.return_data[0]
                if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / 2 * ext_call.return_data[0] != -(0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + -(0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18:
                    revert with 0, 32, 33, code.data[21823 len 33], mem[709 len 31]
                if not (0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])):
                    revert with 0, 'SafeMath: division by zero'
                return (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / (0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])), 
                       2 * ext_call.return_data[0]
            if (10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / (0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - ext_call.return_data[0] != 10^18:
                revert with 0, 32, 33, code.data[21823 len 33], mem[453 len 31]
            if not 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]):
                revert with 0, 'SafeMath: division by zero'
            if ext_call.return_data[0] - block.timestamp <= 3:
                if not ext_call.return_data[0] - block.timestamp:
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    if (0 / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) < (10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]):
                        revert with 0, 'SafeMath: addition overflow'
                    if (0 / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) > 10^18:
                        revert with 0, 'SafeMath: subtraction overflow'
                    if (0 / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) > -(0 / ext_call.return_data[0]) + -((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18:
                        if not 2 * ext_call.return_data[0]:
                            if not (0 / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])):
                                revert with 0, 'SafeMath: division by zero'
                            if 0 / (0 / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) <= 2 * ext_call.return_data[0]:
                                return 0 / (0 / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])), 
                                       2 * ext_call.return_data[0]
                        else:
                            if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / 2 * ext_call.return_data[0] != -(0 / ext_call.return_data[0]) + -((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18:
                                revert with 0, 32, 33, code.data[21823 len 33], mem[645 len 31]
                            if not (0 / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])):
                                revert with 0, 'SafeMath: division by zero'
                            if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / (0 / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) <= 2 * ext_call.return_data[0]:
                                return (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / (0 / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])), 
                                       2 * ext_call.return_data[0]
                        if not 2 * ext_call.return_data[0]:
                            if not -(0 / ext_call.return_data[0]) + -((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18:
                                revert with 0, 'SafeMath: division by zero'
                            return 2 * ext_call.return_data[0], 
                                   0 / -(0 / ext_call.return_data[0]) + -((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18
                        if (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / 2 * ext_call.return_data[0] != (0 / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])):
                            revert with 0, 32, 33, code.data[21823 len 33], mem[709 len 31]
                        if not -(0 / ext_call.return_data[0]) + -((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18:
                            revert with 0, 'SafeMath: division by zero'
                        return 2 * ext_call.return_data[0], 
                               (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / -(0 / ext_call.return_data[0]) + -((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18
                    if not 2 * ext_call.return_data[0]:
                        if not -(0 / ext_call.return_data[0]) + -((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18:
                            revert with 0, 'SafeMath: division by zero'
                        if 0 / -(0 / ext_call.return_data[0]) + -((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18 <= 2 * ext_call.return_data[0]:
                            return 2 * ext_call.return_data[0], 
                                   0 / -(0 / ext_call.return_data[0]) + -((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18
                    else:
                        if (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / 2 * ext_call.return_data[0] != (0 / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])):
                            revert with 0, 32, 33, code.data[21823 len 33], mem[645 len 31]
                        if not -(0 / ext_call.return_data[0]) + -((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18:
                            revert with 0, 'SafeMath: division by zero'
                        if (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / -(0 / ext_call.return_data[0]) + -((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18 <= 2 * ext_call.return_data[0]:
                            return 2 * ext_call.return_data[0], 
                                   (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / -(0 / ext_call.return_data[0]) + -((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18
                    if not 2 * ext_call.return_data[0]:
                        if not (0 / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])):
                            revert with 0, 'SafeMath: division by zero'
                        return 0 / (0 / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])), 
                               2 * ext_call.return_data[0]
                    if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / 2 * ext_call.return_data[0] != -(0 / ext_call.return_data[0]) + -((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18:
                        revert with 0, 32, 33, code.data[21823 len 33], mem[709 len 31]
                    if not (0 / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])):
                        revert with 0, 'SafeMath: division by zero'
                    return (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / (0 / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])), 
                           2 * ext_call.return_data[0]
                if volatilityFactor != volatilityFactor:
                    revert with 0, 32, 33, code.data[21823 len 33], mem[517 len 31]
                if not volatilityFactor:
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    if (0 / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) < (10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]):
                        revert with 0, 'SafeMath: addition overflow'
                    if (0 / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) > 10^18:
                        revert with 0, 'SafeMath: subtraction overflow'
                    if (0 / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) > -(0 / ext_call.return_data[0]) + -((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18:
                        if not 2 * ext_call.return_data[0]:
                            if not (0 / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])):
                                revert with 0, 'SafeMath: division by zero'
                            if 0 / (0 / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) <= 2 * ext_call.return_data[0]:
                                return 0 / (0 / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])), 
                                       2 * ext_call.return_data[0]
                        else:
                            if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / 2 * ext_call.return_data[0] != -(0 / ext_call.return_data[0]) + -((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18:
                                revert with 0, 32, 33, code.data[21823 len 33], mem[645 len 31]
                            if not (0 / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])):
                                revert with 0, 'SafeMath: division by zero'
                            if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / (0 / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) <= 2 * ext_call.return_data[0]:
                                return (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / (0 / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])), 
                                       2 * ext_call.return_data[0]
                        if not 2 * ext_call.return_data[0]:
                            if not -(0 / ext_call.return_data[0]) + -((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18:
                                revert with 0, 'SafeMath: division by zero'
                            return 2 * ext_call.return_data[0], 
                                   0 / -(0 / ext_call.return_data[0]) + -((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18
                        if (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / 2 * ext_call.return_data[0] != (0 / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])):
                            revert with 0, 32, 33, code.data[21823 len 33], mem[709 len 31]
                        if not -(0 / ext_call.return_data[0]) + -((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18:
                            revert with 0, 'SafeMath: division by zero'
                        return 2 * ext_call.return_data[0], 
                               (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / -(0 / ext_call.return_data[0]) + -((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18
                    if not 2 * ext_call.return_data[0]:
                        if not -(0 / ext_call.return_data[0]) + -((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18:
                            revert with 0, 'SafeMath: division by zero'
                        if 0 / -(0 / ext_call.return_data[0]) + -((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18 <= 2 * ext_call.return_data[0]:
                            return 2 * ext_call.return_data[0], 
                                   0 / -(0 / ext_call.return_data[0]) + -((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18
                    else:
                        if (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / 2 * ext_call.return_data[0] != (0 / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])):
                            revert with 0, 32, 33, code.data[21823 len 33], mem[645 len 31]
                        if not -(0 / ext_call.return_data[0]) + -((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18:
                            revert with 0, 'SafeMath: division by zero'
                        if (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / -(0 / ext_call.return_data[0]) + -((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18 <= 2 * ext_call.return_data[0]:
                            return 2 * ext_call.return_data[0], 
                                   (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / -(0 / ext_call.return_data[0]) + -((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18
                    if not 2 * ext_call.return_data[0]:
                        if not (0 / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])):
                            revert with 0, 'SafeMath: division by zero'
                        return 0 / (0 / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])), 
                               2 * ext_call.return_data[0]
                    if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / 2 * ext_call.return_data[0] != -(0 / ext_call.return_data[0]) + -((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18:
                        revert with 0, 32, 33, code.data[21823 len 33], mem[709 len 31]
                    if not (0 / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])):
                        revert with 0, 'SafeMath: division by zero'
                    return (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / (0 / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])), 
                           2 * ext_call.return_data[0]
                if 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / volatilityFactor != 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]):
                    revert with 0, 32, 33, code.data[21823 len 33], mem[517 len 31]
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                if (0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) < (10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]):
                    revert with 0, 'SafeMath: addition overflow'
                if (0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) > 10^18:
                    revert with 0, 'SafeMath: subtraction overflow'
                if (0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) > -(0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + -((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18:
                    if not 2 * ext_call.return_data[0]:
                        if not (0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])):
                            revert with 0, 'SafeMath: division by zero'
                        if 0 / (0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) <= 2 * ext_call.return_data[0]:
                            return 0 / (0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])), 
                                   2 * ext_call.return_data[0]
                    else:
                        if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) - (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / 2 * ext_call.return_data[0] != -(0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + -((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18:
                            revert with 0, 32, 33, code.data[21823 len 33], mem[645 len 31]
                        if not (0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])):
                            revert with 0, 'SafeMath: division by zero'
                        if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) - (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / (0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) <= 2 * ext_call.return_data[0]:
                            return (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) - (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / (0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])), 
                                   2 * ext_call.return_data[0]
                    if not 2 * ext_call.return_data[0]:
                        if not -(0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + -((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18:
                            revert with 0, 'SafeMath: division by zero'
                        return 2 * ext_call.return_data[0], 
                               0 / -(0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + -((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18
                    if (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / 2 * ext_call.return_data[0] != (0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])):
                        revert with 0, 32, 33, code.data[21823 len 33], mem[709 len 31]
                    if not -(0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + -((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18:
                        revert with 0, 'SafeMath: division by zero'
                    return 2 * ext_call.return_data[0], 
                           (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / -(0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + -((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18
                if not 2 * ext_call.return_data[0]:
                    if not -(0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + -((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18:
                        revert with 0, 'SafeMath: division by zero'
                    if 0 / -(0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + -((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18 <= 2 * ext_call.return_data[0]:
                        return 2 * ext_call.return_data[0], 
                               0 / -(0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + -((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18
                else:
                    if (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / 2 * ext_call.return_data[0] != (0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])):
                        revert with 0, 32, 33, code.data[21823 len 33], mem[645 len 31]
                    if not -(0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + -((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18:
                        revert with 0, 'SafeMath: division by zero'
                    if (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / -(0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + -((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18 <= 2 * ext_call.return_data[0]:
                        return 2 * ext_call.return_data[0], 
                               (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / -(0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + -((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18
                if not 2 * ext_call.return_data[0]:
                    if not (0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])):
                        revert with 0, 'SafeMath: division by zero'
                    return 0 / (0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])), 
                           2 * ext_call.return_data[0]
                if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) - (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / 2 * ext_call.return_data[0] != -(0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + -((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18:
                    revert with 0, 32, 33, code.data[21823 len 33], mem[709 len 31]
                if not (0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])):
                    revert with 0, 'SafeMath: division by zero'
                return (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) - (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / (0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])), 
                       2 * ext_call.return_data[0]
            s = (ext_call.return_data[0] - block.timestamp / 2) + 1
            t = ext_call.return_data[0] - block.timestamp
            while s < t:
                require s
                s = (ext_call.return_data[0] - block.timestamp / s) + s / 2
                t = s
                continue 
            if not t:
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                if (0 / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) < (10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]):
                    revert with 0, 'SafeMath: addition overflow'
                if (0 / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) > 10^18:
                    revert with 0, 'SafeMath: subtraction overflow'
                if (0 / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) > -(0 / ext_call.return_data[0]) + -((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18:
                    if not 2 * ext_call.return_data[0]:
                        if not (0 / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])):
                            revert with 0, 'SafeMath: division by zero'
                        if 0 / (0 / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) <= 2 * ext_call.return_data[0]:
                            return 0 / (0 / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])), 
                                   2 * ext_call.return_data[0]
                    else:
                        if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / 2 * ext_call.return_data[0] != -(0 / ext_call.return_data[0]) + -((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18:
                            revert with 0, 32, 33, code.data[21823 len 33], mem[645 len 31]
                        if not (0 / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])):
                            revert with 0, 'SafeMath: division by zero'
                        if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / (0 / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) <= 2 * ext_call.return_data[0]:
                            return (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / (0 / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])), 
                                   2 * ext_call.return_data[0]
                    if not 2 * ext_call.return_data[0]:
                        if not -(0 / ext_call.return_data[0]) + -((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18:
                            revert with 0, 'SafeMath: division by zero'
                        return 2 * ext_call.return_data[0], 
                               0 / -(0 / ext_call.return_data[0]) + -((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18
                    if (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / 2 * ext_call.return_data[0] != (0 / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])):
                        revert with 0, 32, 33, code.data[21823 len 33], mem[709 len 31]
                    if not -(0 / ext_call.return_data[0]) + -((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18:
                        revert with 0, 'SafeMath: division by zero'
                    return 2 * ext_call.return_data[0], 
                           (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / -(0 / ext_call.return_data[0]) + -((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18
                if not 2 * ext_call.return_data[0]:
                    if not -(0 / ext_call.return_data[0]) + -((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18:
                        revert with 0, 'SafeMath: division by zero'
                    if 0 / -(0 / ext_call.return_data[0]) + -((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18 <= 2 * ext_call.return_data[0]:
                        return 2 * ext_call.return_data[0], 
                               0 / -(0 / ext_call.return_data[0]) + -((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18
                else:
                    if (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / 2 * ext_call.return_data[0] != (0 / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])):
                        revert with 0, 32, 33, code.data[21823 len 33], mem[645 len 31]
                    if not -(0 / ext_call.return_data[0]) + -((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18:
                        revert with 0, 'SafeMath: division by zero'
                    if (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / -(0 / ext_call.return_data[0]) + -((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18 <= 2 * ext_call.return_data[0]:
                        return 2 * ext_call.return_data[0], 
                               (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / -(0 / ext_call.return_data[0]) + -((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18
                if not 2 * ext_call.return_data[0]:
                    if not (0 / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])):
                        revert with 0, 'SafeMath: division by zero'
                    return 0 / (0 / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])), 
                           2 * ext_call.return_data[0]
                if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / 2 * ext_call.return_data[0] != -(0 / ext_call.return_data[0]) + -((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18:
                    revert with 0, 32, 33, code.data[21823 len 33], mem[709 len 31]
                if not (0 / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])):
                    revert with 0, 'SafeMath: division by zero'
                return (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / (0 / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])), 
                       2 * ext_call.return_data[0]
            if volatilityFactor * t / t != volatilityFactor:
                revert with 0, 32, 33, code.data[21823 len 33], mem[517 len 31]
            if not volatilityFactor * t:
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                if (0 / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) < (10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]):
                    revert with 0, 'SafeMath: addition overflow'
                if (0 / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) > 10^18:
                    revert with 0, 'SafeMath: subtraction overflow'
                if (0 / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) > -(0 / ext_call.return_data[0]) + -((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18:
                    if not 2 * ext_call.return_data[0]:
                        if not (0 / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])):
                            revert with 0, 'SafeMath: division by zero'
                        if 0 / (0 / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) <= 2 * ext_call.return_data[0]:
                            return 0 / (0 / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])), 
                                   2 * ext_call.return_data[0]
                    else:
                        if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / 2 * ext_call.return_data[0] != -(0 / ext_call.return_data[0]) + -((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18:
                            revert with 0, 32, 33, code.data[21823 len 33], mem[645 len 31]
                        if not (0 / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])):
                            revert with 0, 'SafeMath: division by zero'
                        if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / (0 / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) <= 2 * ext_call.return_data[0]:
                            return (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / (0 / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])), 
                                   2 * ext_call.return_data[0]
                    if not 2 * ext_call.return_data[0]:
                        if not -(0 / ext_call.return_data[0]) + -((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18:
                            revert with 0, 'SafeMath: division by zero'
                        return 2 * ext_call.return_data[0], 
                               0 / -(0 / ext_call.return_data[0]) + -((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18
                    if (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / 2 * ext_call.return_data[0] != (0 / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])):
                        revert with 0, 32, 33, code.data[21823 len 33], mem[709 len 31]
                    if not -(0 / ext_call.return_data[0]) + -((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18:
                        revert with 0, 'SafeMath: division by zero'
                    return 2 * ext_call.return_data[0], 
                           (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / -(0 / ext_call.return_data[0]) + -((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18
                if not 2 * ext_call.return_data[0]:
                    if not -(0 / ext_call.return_data[0]) + -((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18:
                        revert with 0, 'SafeMath: division by zero'
                    if 0 / -(0 / ext_call.return_data[0]) + -((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18 <= 2 * ext_call.return_data[0]:
                        return 2 * ext_call.return_data[0], 
                               0 / -(0 / ext_call.return_data[0]) + -((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18
                else:
                    if (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / 2 * ext_call.return_data[0] != (0 / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])):
                        revert with 0, 32, 33, code.data[21823 len 33], mem[645 len 31]
                    if not -(0 / ext_call.return_data[0]) + -((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18:
                        revert with 0, 'SafeMath: division by zero'
                    if (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / -(0 / ext_call.return_data[0]) + -((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18 <= 2 * ext_call.return_data[0]:
                        return 2 * ext_call.return_data[0], 
                               (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / -(0 / ext_call.return_data[0]) + -((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18
                if not 2 * ext_call.return_data[0]:
                    if not (0 / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])):
                        revert with 0, 'SafeMath: division by zero'
                    return 0 / (0 / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])), 
                           2 * ext_call.return_data[0]
                if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / 2 * ext_call.return_data[0] != -(0 / ext_call.return_data[0]) + -((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18:
                    revert with 0, 32, 33, code.data[21823 len 33], mem[709 len 31]
                if not (0 / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])):
                    revert with 0, 'SafeMath: division by zero'
                return (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / (0 / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])), 
                       2 * ext_call.return_data[0]
            if 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / volatilityFactor * t != 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]):
                revert with 0, 32, 33, code.data[21823 len 33], mem[517 len 31]
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            if (0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) < (10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]):
                revert with 0, 'SafeMath: addition overflow'
            if (0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) > 10^18:
                revert with 0, 'SafeMath: subtraction overflow'
            if (0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) > -(0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + -((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18:
                if not 2 * ext_call.return_data[0]:
                    if not (0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])):
                        revert with 0, 'SafeMath: division by zero'
                    if 0 / (0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) <= 2 * ext_call.return_data[0]:
                        return 0 / (0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])), 
                               2 * ext_call.return_data[0]
                else:
                    if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) - (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / 2 * ext_call.return_data[0] != -(0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + -((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18:
                        revert with 0, 32, 33, code.data[21823 len 33], mem[645 len 31]
                    if not (0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])):
                        revert with 0, 'SafeMath: division by zero'
                    if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) - (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / (0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) <= 2 * ext_call.return_data[0]:
                        return (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) - (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / (0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])), 
                               2 * ext_call.return_data[0]
                if not 2 * ext_call.return_data[0]:
                    if not -(0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + -((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18:
                        revert with 0, 'SafeMath: division by zero'
                    return 2 * ext_call.return_data[0], 
                           0 / -(0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + -((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18
                if (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / 2 * ext_call.return_data[0] != (0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])):
                    revert with 0, 32, 33, code.data[21823 len 33], mem[709 len 31]
                if not -(0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + -((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18:
                    revert with 0, 'SafeMath: division by zero'
                return 2 * ext_call.return_data[0], 
                       (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / -(0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + -((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18
            if not 2 * ext_call.return_data[0]:
                if not -(0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + -((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18:
                    revert with 0, 'SafeMath: division by zero'
                if 0 / -(0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + -((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18 <= 2 * ext_call.return_data[0]:
                    return 2 * ext_call.return_data[0], 
                           0 / -(0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + -((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18
            else:
                if (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / 2 * ext_call.return_data[0] != (0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])):
                    revert with 0, 32, 33, code.data[21823 len 33], mem[645 len 31]
                if not -(0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + -((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18:
                    revert with 0, 'SafeMath: division by zero'
                if (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / -(0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + -((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18 <= 2 * ext_call.return_data[0]:
                    return 2 * ext_call.return_data[0], 
                           (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / -(0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + -((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18
            if not 2 * ext_call.return_data[0]:
                if not (0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])):
                    revert with 0, 'SafeMath: division by zero'
                return 0 / (0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])), 
                       2 * ext_call.return_data[0]
            if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) - (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / 2 * ext_call.return_data[0] != -(0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + -((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18:
                revert with 0, 32, 33, code.data[21823 len 33], mem[709 len 31]
            if not (0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])):
                revert with 0, 'SafeMath: division by zero'
            return (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) - (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / (0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])), 
                   2 * ext_call.return_data[0]
        if 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^18 * 10^uint8(stor153.field_168) != ext_call.return_data[32]:
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                        32,
                        33,
                        code.data[21823 len 33],
                        ext_call.return_data[101 len 31]
        if not 10^uint8(stor153.field_160):
            revert with 0, 'SafeMath: division by zero'
        if not 10^uint8(ext_call.return_data[0]):
            revert with 0, 'SafeMath: division by zero'
        require ext_code.size(arg1)
        staticcall arg1.0x8f620487 with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if block.timestamp > ext_call.return_data[0]:
            revert with 0, 'SafeMath: subtraction overflow'
        require ext_code.size(arg1)
        staticcall arg1.priceRatio() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) <= ext_call.return_data[0]:
            if ext_call.return_data[0] - block.timestamp <= 3:
                if not ext_call.return_data[0] - block.timestamp:
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    if 0 / ext_call.return_data[0] < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if 0 / ext_call.return_data[0] > 10^18:
                        revert with 0, 'SafeMath: subtraction overflow'
                    if 0 / ext_call.return_data[0] > -(0 / ext_call.return_data[0]) + 10^18:
                        if not 2 * ext_call.return_data[0]:
                            if not 0 / ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero'
                            if 0 / 0 / ext_call.return_data[0] <= 2 * ext_call.return_data[0]:
                                return 0 / 0 / ext_call.return_data[0], 2 * ext_call.return_data[0]
                        else:
                            if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) / 2 * ext_call.return_data[0] != -(0 / ext_call.return_data[0]) + 10^18:
                                revert with 0, 32, 33, code.data[21823 len 33], mem[517 len 31]
                            if not 0 / ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero'
                            if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) / 0 / ext_call.return_data[0] <= 2 * ext_call.return_data[0]:
                                return (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) / 0 / ext_call.return_data[0], 
                                       2 * ext_call.return_data[0]
                        if not 2 * ext_call.return_data[0]:
                            if not -(0 / ext_call.return_data[0]) + 10^18:
                                revert with 0, 'SafeMath: division by zero'
                            return 2 * ext_call.return_data[0], 0 / -(0 / ext_call.return_data[0]) + 10^18
                        if (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) / 2 * ext_call.return_data[0] != 0 / ext_call.return_data[0]:
                            revert with 0, 32, 33, code.data[21823 len 33], mem[581 len 31]
                        if not -(0 / ext_call.return_data[0]) + 10^18:
                            revert with 0, 'SafeMath: division by zero'
                        return 2 * ext_call.return_data[0], 
                               (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) / -(0 / ext_call.return_data[0]) + 10^18
                    if not 2 * ext_call.return_data[0]:
                        if not -(0 / ext_call.return_data[0]) + 10^18:
                            revert with 0, 'SafeMath: division by zero'
                        if 0 / -(0 / ext_call.return_data[0]) + 10^18 <= 2 * ext_call.return_data[0]:
                            return 2 * ext_call.return_data[0], 0 / -(0 / ext_call.return_data[0]) + 10^18
                    else:
                        if (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) / 2 * ext_call.return_data[0] != 0 / ext_call.return_data[0]:
                            revert with 0, 32, 33, code.data[21823 len 33], mem[517 len 31]
                        if not -(0 / ext_call.return_data[0]) + 10^18:
                            revert with 0, 'SafeMath: division by zero'
                        if (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) / -(0 / ext_call.return_data[0]) + 10^18 <= 2 * ext_call.return_data[0]:
                            return 2 * ext_call.return_data[0], 
                                   (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) / -(0 / ext_call.return_data[0]) + 10^18
                    if not 2 * ext_call.return_data[0]:
                        if not 0 / ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        return 0 / 0 / ext_call.return_data[0], 2 * ext_call.return_data[0]
                    if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) / 2 * ext_call.return_data[0] != -(0 / ext_call.return_data[0]) + 10^18:
                        revert with 0, 32, 33, code.data[21823 len 33], mem[581 len 31]
                    if not 0 / ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    return (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) / 0 / ext_call.return_data[0], 
                           2 * ext_call.return_data[0]
                if volatilityFactor != volatilityFactor:
                    revert with 0, 32, 33, code.data[21823 len 33], mem[389 len 31]
                if not volatilityFactor:
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    if 0 / ext_call.return_data[0] < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if 0 / ext_call.return_data[0] > 10^18:
                        revert with 0, 'SafeMath: subtraction overflow'
                    if 0 / ext_call.return_data[0] > -(0 / ext_call.return_data[0]) + 10^18:
                        if not 2 * ext_call.return_data[0]:
                            if not 0 / ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero'
                            if 0 / 0 / ext_call.return_data[0] <= 2 * ext_call.return_data[0]:
                                return 0 / 0 / ext_call.return_data[0], 2 * ext_call.return_data[0]
                        else:
                            if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) / 2 * ext_call.return_data[0] != -(0 / ext_call.return_data[0]) + 10^18:
                                revert with 0, 32, 33, code.data[21823 len 33], mem[517 len 31]
                            if not 0 / ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero'
                            if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) / 0 / ext_call.return_data[0] <= 2 * ext_call.return_data[0]:
                                return (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) / 0 / ext_call.return_data[0], 
                                       2 * ext_call.return_data[0]
                        if not 2 * ext_call.return_data[0]:
                            if not -(0 / ext_call.return_data[0]) + 10^18:
                                revert with 0, 'SafeMath: division by zero'
                            return 2 * ext_call.return_data[0], 0 / -(0 / ext_call.return_data[0]) + 10^18
                        if (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) / 2 * ext_call.return_data[0] != 0 / ext_call.return_data[0]:
                            revert with 0, 32, 33, code.data[21823 len 33], mem[581 len 31]
                        if not -(0 / ext_call.return_data[0]) + 10^18:
                            revert with 0, 'SafeMath: division by zero'
                        return 2 * ext_call.return_data[0], 
                               (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) / -(0 / ext_call.return_data[0]) + 10^18
                    if not 2 * ext_call.return_data[0]:
                        if not -(0 / ext_call.return_data[0]) + 10^18:
                            revert with 0, 'SafeMath: division by zero'
                        if 0 / -(0 / ext_call.return_data[0]) + 10^18 <= 2 * ext_call.return_data[0]:
                            return 2 * ext_call.return_data[0], 0 / -(0 / ext_call.return_data[0]) + 10^18
                    else:
                        if (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) / 2 * ext_call.return_data[0] != 0 / ext_call.return_data[0]:
                            revert with 0, 32, 33, code.data[21823 len 33], mem[517 len 31]
                        if not -(0 / ext_call.return_data[0]) + 10^18:
                            revert with 0, 'SafeMath: division by zero'
                        if (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) / -(0 / ext_call.return_data[0]) + 10^18 <= 2 * ext_call.return_data[0]:
                            return 2 * ext_call.return_data[0], 
                                   (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) / -(0 / ext_call.return_data[0]) + 10^18
                    if not 2 * ext_call.return_data[0]:
                        if not 0 / ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        return 0 / 0 / ext_call.return_data[0], 2 * ext_call.return_data[0]
                    if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) / 2 * ext_call.return_data[0] != -(0 / ext_call.return_data[0]) + 10^18:
                        revert with 0, 32, 33, code.data[21823 len 33], mem[581 len 31]
                    if not 0 / ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    return (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) / 0 / ext_call.return_data[0], 
                           2 * ext_call.return_data[0]
                if 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / volatilityFactor != 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]):
                    revert with 0, 32, 33, code.data[21823 len 33], mem[389 len 31]
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                if 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0] < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0] > 10^18:
                    revert with 0, 'SafeMath: subtraction overflow'
                if 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0] > -(10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + 10^18:
                    if not 2 * ext_call.return_data[0]:
                        if not 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        if 0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0] <= 2 * ext_call.return_data[0]:
                            return 0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0], 
                                   2 * ext_call.return_data[0]
                    else:
                        if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) - (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) / 2 * ext_call.return_data[0] != -(10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + 10^18:
                            revert with 0, 32, 33, code.data[21823 len 33], mem[517 len 31]
                        if not 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) - (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0] <= 2 * ext_call.return_data[0]:
                            return (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) - (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0], 
                                   2 * ext_call.return_data[0]
                    if not 2 * ext_call.return_data[0]:
                        if not -(10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + 10^18:
                            revert with 0, 'SafeMath: division by zero'
                        return 2 * ext_call.return_data[0], 
                               0 / -(10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + 10^18
                    if (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) / 2 * ext_call.return_data[0] != 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]:
                        revert with 0, 32, 33, code.data[21823 len 33], mem[581 len 31]
                    if not -(10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + 10^18:
                        revert with 0, 'SafeMath: division by zero'
                    return 2 * ext_call.return_data[0], 
                           (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) / -(10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + 10^18
                if not 2 * ext_call.return_data[0]:
                    if not -(10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + 10^18:
                        revert with 0, 'SafeMath: division by zero'
                    if 0 / -(10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + 10^18 <= 2 * ext_call.return_data[0]:
                        return 2 * ext_call.return_data[0], 
                               0 / -(10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + 10^18
                else:
                    if (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) / 2 * ext_call.return_data[0] != 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]:
                        revert with 0, 32, 33, code.data[21823 len 33], mem[517 len 31]
                    if not -(10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + 10^18:
                        revert with 0, 'SafeMath: division by zero'
                    if (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) / -(10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + 10^18 <= 2 * ext_call.return_data[0]:
                        return 2 * ext_call.return_data[0], 
                               (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) / -(10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + 10^18
                if not 2 * ext_call.return_data[0]:
                    if not 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    return 0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0], 
                           2 * ext_call.return_data[0]
                if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) - (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) / 2 * ext_call.return_data[0] != -(10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + 10^18:
                    revert with 0, 32, 33, code.data[21823 len 33], mem[581 len 31]
                if not 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                return (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) - (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0], 
                       2 * ext_call.return_data[0]
            s = (ext_call.return_data[0] - block.timestamp / 2) + 1
            t = ext_call.return_data[0] - block.timestamp
            while s < t:
                require s
                s = (ext_call.return_data[0] - block.timestamp / s) + s / 2
                t = s
                continue 
            if not t:
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                if 0 / ext_call.return_data[0] < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if 0 / ext_call.return_data[0] > 10^18:
                    revert with 0, 'SafeMath: subtraction overflow'
                if 0 / ext_call.return_data[0] > -(0 / ext_call.return_data[0]) + 10^18:
                    if not 2 * ext_call.return_data[0]:
                        if not 0 / ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        if 0 / 0 / ext_call.return_data[0] <= 2 * ext_call.return_data[0]:
                            return 0 / 0 / ext_call.return_data[0], 2 * ext_call.return_data[0]
                    else:
                        if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) / 2 * ext_call.return_data[0] != -(0 / ext_call.return_data[0]) + 10^18:
                            revert with 0, 32, 33, code.data[21823 len 33], mem[517 len 31]
                        if not 0 / ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) / 0 / ext_call.return_data[0] <= 2 * ext_call.return_data[0]:
                            return (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) / 0 / ext_call.return_data[0], 
                                   2 * ext_call.return_data[0]
                    if not 2 * ext_call.return_data[0]:
                        if not -(0 / ext_call.return_data[0]) + 10^18:
                            revert with 0, 'SafeMath: division by zero'
                        return 2 * ext_call.return_data[0], 0 / -(0 / ext_call.return_data[0]) + 10^18
                    if (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) / 2 * ext_call.return_data[0] != 0 / ext_call.return_data[0]:
                        revert with 0, 32, 33, code.data[21823 len 33], mem[581 len 31]
                    if not -(0 / ext_call.return_data[0]) + 10^18:
                        revert with 0, 'SafeMath: division by zero'
                    return 2 * ext_call.return_data[0], 
                           (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) / -(0 / ext_call.return_data[0]) + 10^18
                if not 2 * ext_call.return_data[0]:
                    if not -(0 / ext_call.return_data[0]) + 10^18:
                        revert with 0, 'SafeMath: division by zero'
                    if 0 / -(0 / ext_call.return_data[0]) + 10^18 <= 2 * ext_call.return_data[0]:
                        return 2 * ext_call.return_data[0], 0 / -(0 / ext_call.return_data[0]) + 10^18
                else:
                    if (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) / 2 * ext_call.return_data[0] != 0 / ext_call.return_data[0]:
                        revert with 0, 32, 33, code.data[21823 len 33], mem[517 len 31]
                    if not -(0 / ext_call.return_data[0]) + 10^18:
                        revert with 0, 'SafeMath: division by zero'
                    if (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) / -(0 / ext_call.return_data[0]) + 10^18 <= 2 * ext_call.return_data[0]:
                        return 2 * ext_call.return_data[0], 
                               (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) / -(0 / ext_call.return_data[0]) + 10^18
                if not 2 * ext_call.return_data[0]:
                    if not 0 / ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    return 0 / 0 / ext_call.return_data[0], 2 * ext_call.return_data[0]
                if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) / 2 * ext_call.return_data[0] != -(0 / ext_call.return_data[0]) + 10^18:
                    revert with 0, 32, 33, code.data[21823 len 33], mem[581 len 31]
                if not 0 / ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                return (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) / 0 / ext_call.return_data[0], 
                       2 * ext_call.return_data[0]
            if volatilityFactor * t / t != volatilityFactor:
                revert with 0, 32, 33, code.data[21823 len 33], mem[389 len 31]
            if not volatilityFactor * t:
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                if 0 / ext_call.return_data[0] < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if 0 / ext_call.return_data[0] > 10^18:
                    revert with 0, 'SafeMath: subtraction overflow'
                if 0 / ext_call.return_data[0] > -(0 / ext_call.return_data[0]) + 10^18:
                    if not 2 * ext_call.return_data[0]:
                        if not 0 / ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        if 0 / 0 / ext_call.return_data[0] <= 2 * ext_call.return_data[0]:
                            return 0 / 0 / ext_call.return_data[0], 2 * ext_call.return_data[0]
                    else:
                        if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) / 2 * ext_call.return_data[0] != -(0 / ext_call.return_data[0]) + 10^18:
                            revert with 0, 32, 33, code.data[21823 len 33], mem[517 len 31]
                        if not 0 / ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) / 0 / ext_call.return_data[0] <= 2 * ext_call.return_data[0]:
                            return (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) / 0 / ext_call.return_data[0], 
                                   2 * ext_call.return_data[0]
                    if not 2 * ext_call.return_data[0]:
                        if not -(0 / ext_call.return_data[0]) + 10^18:
                            revert with 0, 'SafeMath: division by zero'
                        return 2 * ext_call.return_data[0], 0 / -(0 / ext_call.return_data[0]) + 10^18
                    if (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) / 2 * ext_call.return_data[0] != 0 / ext_call.return_data[0]:
                        revert with 0, 32, 33, code.data[21823 len 33], mem[581 len 31]
                    if not -(0 / ext_call.return_data[0]) + 10^18:
                        revert with 0, 'SafeMath: division by zero'
                    return 2 * ext_call.return_data[0], 
                           (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) / -(0 / ext_call.return_data[0]) + 10^18
                if not 2 * ext_call.return_data[0]:
                    if not -(0 / ext_call.return_data[0]) + 10^18:
                        revert with 0, 'SafeMath: division by zero'
                    if 0 / -(0 / ext_call.return_data[0]) + 10^18 <= 2 * ext_call.return_data[0]:
                        return 2 * ext_call.return_data[0], 0 / -(0 / ext_call.return_data[0]) + 10^18
                else:
                    if (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) / 2 * ext_call.return_data[0] != 0 / ext_call.return_data[0]:
                        revert with 0, 32, 33, code.data[21823 len 33], mem[517 len 31]
                    if not -(0 / ext_call.return_data[0]) + 10^18:
                        revert with 0, 'SafeMath: division by zero'
                    if (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) / -(0 / ext_call.return_data[0]) + 10^18 <= 2 * ext_call.return_data[0]:
                        return 2 * ext_call.return_data[0], 
                               (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) / -(0 / ext_call.return_data[0]) + 10^18
                if not 2 * ext_call.return_data[0]:
                    if not 0 / ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    return 0 / 0 / ext_call.return_data[0], 2 * ext_call.return_data[0]
                if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) / 2 * ext_call.return_data[0] != -(0 / ext_call.return_data[0]) + 10^18:
                    revert with 0, 32, 33, code.data[21823 len 33], mem[581 len 31]
                if not 0 / ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                return (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) / 0 / ext_call.return_data[0], 
                       2 * ext_call.return_data[0]
            if 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / volatilityFactor * t != 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]):
                revert with 0, 32, 33, code.data[21823 len 33], mem[389 len 31]
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            if 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0] < 0:
                revert with 0, 'SafeMath: addition overflow'
            if 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0] > 10^18:
                revert with 0, 'SafeMath: subtraction overflow'
            if 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0] > -(10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + 10^18:
                if not 2 * ext_call.return_data[0]:
                    if not 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    if 0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0] <= 2 * ext_call.return_data[0]:
                        return 0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0], 
                               2 * ext_call.return_data[0]
                else:
                    if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) - (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) / 2 * ext_call.return_data[0] != -(10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + 10^18:
                        revert with 0, 32, 33, code.data[21823 len 33], mem[517 len 31]
                    if not 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) - (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0] <= 2 * ext_call.return_data[0]:
                        return (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) - (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0], 
                               2 * ext_call.return_data[0]
                if not 2 * ext_call.return_data[0]:
                    if not -(10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + 10^18:
                        revert with 0, 'SafeMath: division by zero'
                    return 2 * ext_call.return_data[0], 
                           0 / -(10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + 10^18
                if (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) / 2 * ext_call.return_data[0] != 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]:
                    revert with 0, 32, 33, code.data[21823 len 33], mem[581 len 31]
                if not -(10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + 10^18:
                    revert with 0, 'SafeMath: division by zero'
                return 2 * ext_call.return_data[0], 
                       (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) / -(10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + 10^18
            if not 2 * ext_call.return_data[0]:
                if not -(10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + 10^18:
                    revert with 0, 'SafeMath: division by zero'
                if 0 / -(10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + 10^18 <= 2 * ext_call.return_data[0]:
                    return 2 * ext_call.return_data[0], 
                           0 / -(10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + 10^18
            else:
                if (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) / 2 * ext_call.return_data[0] != 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]:
                    revert with 0, 32, 33, code.data[21823 len 33], mem[517 len 31]
                if not -(10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + 10^18:
                    revert with 0, 'SafeMath: division by zero'
                if (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) / -(10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + 10^18 <= 2 * ext_call.return_data[0]:
                    return 2 * ext_call.return_data[0], 
                           (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) / -(10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + 10^18
            if not 2 * ext_call.return_data[0]:
                if not 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                return 0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0], 
                       2 * ext_call.return_data[0]
            if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) - (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) / 2 * ext_call.return_data[0] != -(10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + 10^18:
                revert with 0, 32, 33, code.data[21823 len 33], mem[581 len 31]
            if not 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            return (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) - (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0], 
                   2 * ext_call.return_data[0]
        if ext_call.return_data[0] > 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]):
            revert with 0, 'SafeMath: subtraction overflow'
        if not (10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - ext_call.return_data[0]:
            if not 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]):
                revert with 0, 'SafeMath: division by zero'
            if ext_call.return_data[0] - block.timestamp <= 3:
                if not ext_call.return_data[0] - block.timestamp:
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    if (0 / ext_call.return_data[0]) + (0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) < 0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]):
                        revert with 0, 'SafeMath: addition overflow'
                    if (0 / ext_call.return_data[0]) + (0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) > 10^18:
                        revert with 0, 'SafeMath: subtraction overflow'
                    if (0 / ext_call.return_data[0]) + (0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) > -(0 / ext_call.return_data[0]) + -(0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18:
                        if not 2 * ext_call.return_data[0]:
                            if not (0 / ext_call.return_data[0]) + (0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])):
                                revert with 0, 'SafeMath: division by zero'
                            if 0 / (0 / ext_call.return_data[0]) + (0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) <= 2 * ext_call.return_data[0]:
                                return 0 / (0 / ext_call.return_data[0]) + (0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])), 
                                       2 * ext_call.return_data[0]
                        else:
                            if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (ext_call.return_data[0] * 0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / 2 * ext_call.return_data[0] != -(0 / ext_call.return_data[0]) + -(0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18:
                                revert with 0, 32, 33, code.data[21823 len 33], mem[645 len 31]
                            if not (0 / ext_call.return_data[0]) + (0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])):
                                revert with 0, 'SafeMath: division by zero'
                            if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (ext_call.return_data[0] * 0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / (0 / ext_call.return_data[0]) + (0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) <= 2 * ext_call.return_data[0]:
                                return (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (ext_call.return_data[0] * 0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / (0 / ext_call.return_data[0]) + (0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])), 
                                       2 * ext_call.return_data[0]
                        if not 2 * ext_call.return_data[0]:
                            if not -(0 / ext_call.return_data[0]) + -(0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18:
                                revert with 0, 'SafeMath: division by zero'
                            return 2 * ext_call.return_data[0], 
                                   0 / -(0 / ext_call.return_data[0]) + -(0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18
                        if (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / 2 * ext_call.return_data[0] != (0 / ext_call.return_data[0]) + (0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])):
                            revert with 0, 32, 33, code.data[21823 len 33], mem[709 len 31]
                        if not -(0 / ext_call.return_data[0]) + -(0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18:
                            revert with 0, 'SafeMath: division by zero'
                        return 2 * ext_call.return_data[0], 
                               (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / -(0 / ext_call.return_data[0]) + -(0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18
                    if not 2 * ext_call.return_data[0]:
                        if not -(0 / ext_call.return_data[0]) + -(0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18:
                            revert with 0, 'SafeMath: division by zero'
                        if 0 / -(0 / ext_call.return_data[0]) + -(0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18 <= 2 * ext_call.return_data[0]:
                            return 2 * ext_call.return_data[0], 
                                   0 / -(0 / ext_call.return_data[0]) + -(0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18
                    else:
                        if (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / 2 * ext_call.return_data[0] != (0 / ext_call.return_data[0]) + (0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])):
                            revert with 0, 32, 33, code.data[21823 len 33], mem[645 len 31]
                        if not -(0 / ext_call.return_data[0]) + -(0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18:
                            revert with 0, 'SafeMath: division by zero'
                        if (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / -(0 / ext_call.return_data[0]) + -(0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18 <= 2 * ext_call.return_data[0]:
                            return 2 * ext_call.return_data[0], 
                                   (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / -(0 / ext_call.return_data[0]) + -(0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18
                    if not 2 * ext_call.return_data[0]:
                        if not (0 / ext_call.return_data[0]) + (0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])):
                            revert with 0, 'SafeMath: division by zero'
                        return 0 / (0 / ext_call.return_data[0]) + (0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])), 
                               2 * ext_call.return_data[0]
                    if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (ext_call.return_data[0] * 0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / 2 * ext_call.return_data[0] != -(0 / ext_call.return_data[0]) + -(0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18:
                        revert with 0, 32, 33, code.data[21823 len 33], mem[709 len 31]
                    if not (0 / ext_call.return_data[0]) + (0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])):
                        revert with 0, 'SafeMath: division by zero'
                    return (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (ext_call.return_data[0] * 0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / (0 / ext_call.return_data[0]) + (0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])), 
                           2 * ext_call.return_data[0]
                if volatilityFactor != volatilityFactor:
                    revert with 0, 32, 33, code.data[21823 len 33], mem[517 len 31]
                if not volatilityFactor:
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    if (0 / ext_call.return_data[0]) + (0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) < 0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]):
                        revert with 0, 'SafeMath: addition overflow'
                    if (0 / ext_call.return_data[0]) + (0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) > 10^18:
                        revert with 0, 'SafeMath: subtraction overflow'
                    if (0 / ext_call.return_data[0]) + (0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) > -(0 / ext_call.return_data[0]) + -(0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18:
                        if not 2 * ext_call.return_data[0]:
                            if not (0 / ext_call.return_data[0]) + (0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])):
                                revert with 0, 'SafeMath: division by zero'
                            if 0 / (0 / ext_call.return_data[0]) + (0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) <= 2 * ext_call.return_data[0]:
                                return 0 / (0 / ext_call.return_data[0]) + (0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])), 
                                       2 * ext_call.return_data[0]
                        else:
                            if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (ext_call.return_data[0] * 0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / 2 * ext_call.return_data[0] != -(0 / ext_call.return_data[0]) + -(0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18:
                                revert with 0, 32, 33, code.data[21823 len 33], mem[645 len 31]
                            if not (0 / ext_call.return_data[0]) + (0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])):
                                revert with 0, 'SafeMath: division by zero'
                            if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (ext_call.return_data[0] * 0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / (0 / ext_call.return_data[0]) + (0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) <= 2 * ext_call.return_data[0]:
                                return (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (ext_call.return_data[0] * 0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / (0 / ext_call.return_data[0]) + (0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])), 
                                       2 * ext_call.return_data[0]
                        if not 2 * ext_call.return_data[0]:
                            if not -(0 / ext_call.return_data[0]) + -(0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18:
                                revert with 0, 'SafeMath: division by zero'
                            return 2 * ext_call.return_data[0], 
                                   0 / -(0 / ext_call.return_data[0]) + -(0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18
                        if (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / 2 * ext_call.return_data[0] != (0 / ext_call.return_data[0]) + (0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])):
                            revert with 0, 32, 33, code.data[21823 len 33], mem[709 len 31]
                        if not -(0 / ext_call.return_data[0]) + -(0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18:
                            revert with 0, 'SafeMath: division by zero'
                        return 2 * ext_call.return_data[0], 
                               (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / -(0 / ext_call.return_data[0]) + -(0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18
                    if not 2 * ext_call.return_data[0]:
                        if not -(0 / ext_call.return_data[0]) + -(0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18:
                            revert with 0, 'SafeMath: division by zero'
                        if 0 / -(0 / ext_call.return_data[0]) + -(0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18 <= 2 * ext_call.return_data[0]:
                            return 2 * ext_call.return_data[0], 
                                   0 / -(0 / ext_call.return_data[0]) + -(0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18
                    else:
                        if (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / 2 * ext_call.return_data[0] != (0 / ext_call.return_data[0]) + (0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])):
                            revert with 0, 32, 33, code.data[21823 len 33], mem[645 len 31]
                        if not -(0 / ext_call.return_data[0]) + -(0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18:
                            revert with 0, 'SafeMath: division by zero'
                        if (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / -(0 / ext_call.return_data[0]) + -(0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18 <= 2 * ext_call.return_data[0]:
                            return 2 * ext_call.return_data[0], 
                                   (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / -(0 / ext_call.return_data[0]) + -(0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18
                    if not 2 * ext_call.return_data[0]:
                        if not (0 / ext_call.return_data[0]) + (0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])):
                            revert with 0, 'SafeMath: division by zero'
                        return 0 / (0 / ext_call.return_data[0]) + (0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])), 
                               2 * ext_call.return_data[0]
                    if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (ext_call.return_data[0] * 0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / 2 * ext_call.return_data[0] != -(0 / ext_call.return_data[0]) + -(0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18:
                        revert with 0, 32, 33, code.data[21823 len 33], mem[709 len 31]
                    if not (0 / ext_call.return_data[0]) + (0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])):
                        revert with 0, 'SafeMath: division by zero'
                    return (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (ext_call.return_data[0] * 0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / (0 / ext_call.return_data[0]) + (0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])), 
                           2 * ext_call.return_data[0]
                if 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / volatilityFactor != 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]):
                    revert with 0, 32, 33, code.data[21823 len 33], mem[517 len 31]
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                if (10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + (0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) < 0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]):
                    revert with 0, 'SafeMath: addition overflow'
                if (10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + (0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) > 10^18:
                    revert with 0, 'SafeMath: subtraction overflow'
                if (10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + (0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) > -(10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + -(0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18:
                    if not 2 * ext_call.return_data[0]:
                        if not (10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + (0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])):
                            revert with 0, 'SafeMath: division by zero'
                        if 0 / (10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + (0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) <= 2 * ext_call.return_data[0]:
                            return 0 / (10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + (0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])), 
                                   2 * ext_call.return_data[0]
                    else:
                        if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) - (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (ext_call.return_data[0] * 0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / 2 * ext_call.return_data[0] != -(10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + -(0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18:
                            revert with 0, 32, 33, code.data[21823 len 33], mem[645 len 31]
                        if not (10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + (0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])):
                            revert with 0, 'SafeMath: division by zero'
                        if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) - (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (ext_call.return_data[0] * 0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / (10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + (0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) <= 2 * ext_call.return_data[0]:
                            return (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) - (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (ext_call.return_data[0] * 0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / (10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + (0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])), 
                                   2 * ext_call.return_data[0]
                    if not 2 * ext_call.return_data[0]:
                        if not -(10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + -(0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18:
                            revert with 0, 'SafeMath: division by zero'
                        return 2 * ext_call.return_data[0], 
                               0 / -(10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + -(0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18
                    if (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / 2 * ext_call.return_data[0] != (10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + (0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])):
                        revert with 0, 32, 33, code.data[21823 len 33], mem[709 len 31]
                    if not -(10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + -(0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18:
                        revert with 0, 'SafeMath: division by zero'
                    return 2 * ext_call.return_data[0], 
                           (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / -(10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + -(0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18
                if not 2 * ext_call.return_data[0]:
                    if not -(10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + -(0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18:
                        revert with 0, 'SafeMath: division by zero'
                    if 0 / -(10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + -(0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18 <= 2 * ext_call.return_data[0]:
                        return 2 * ext_call.return_data[0], 
                               0 / -(10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + -(0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18
                else:
                    if (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / 2 * ext_call.return_data[0] != (10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + (0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])):
                        revert with 0, 32, 33, code.data[21823 len 33], mem[645 len 31]
                    if not -(10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + -(0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18:
                        revert with 0, 'SafeMath: division by zero'
                    if (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / -(10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + -(0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18 <= 2 * ext_call.return_data[0]:
                        return 2 * ext_call.return_data[0], 
                               (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / -(10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + -(0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18
                if not 2 * ext_call.return_data[0]:
                    if not (10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + (0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])):
                        revert with 0, 'SafeMath: division by zero'
                    return 0 / (10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + (0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])), 
                           2 * ext_call.return_data[0]
                if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) - (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (ext_call.return_data[0] * 0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / 2 * ext_call.return_data[0] != -(10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + -(0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18:
                    revert with 0, 32, 33, code.data[21823 len 33], mem[709 len 31]
                if not (10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + (0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])):
                    revert with 0, 'SafeMath: division by zero'
                return (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) - (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (ext_call.return_data[0] * 0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / (10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + (0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])), 
                       2 * ext_call.return_data[0]
            s = (ext_call.return_data[0] - block.timestamp / 2) + 1
            t = ext_call.return_data[0] - block.timestamp
            while s < t:
                require s
                s = (ext_call.return_data[0] - block.timestamp / s) + s / 2
                t = s
                continue 
            if not t:
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                if (0 / ext_call.return_data[0]) + (0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) < 0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]):
                    revert with 0, 'SafeMath: addition overflow'
                if (0 / ext_call.return_data[0]) + (0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) > 10^18:
                    revert with 0, 'SafeMath: subtraction overflow'
                if (0 / ext_call.return_data[0]) + (0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) > -(0 / ext_call.return_data[0]) + -(0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18:
                    if not 2 * ext_call.return_data[0]:
                        if not (0 / ext_call.return_data[0]) + (0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])):
                            revert with 0, 'SafeMath: division by zero'
                        if 0 / (0 / ext_call.return_data[0]) + (0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) <= 2 * ext_call.return_data[0]:
                            return 0 / (0 / ext_call.return_data[0]) + (0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])), 
                                   2 * ext_call.return_data[0]
                    else:
                        if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (ext_call.return_data[0] * 0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / 2 * ext_call.return_data[0] != -(0 / ext_call.return_data[0]) + -(0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18:
                            revert with 0, 32, 33, code.data[21823 len 33], mem[645 len 31]
                        if not (0 / ext_call.return_data[0]) + (0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])):
                            revert with 0, 'SafeMath: division by zero'
                        if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (ext_call.return_data[0] * 0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / (0 / ext_call.return_data[0]) + (0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) <= 2 * ext_call.return_data[0]:
                            return (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (ext_call.return_data[0] * 0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / (0 / ext_call.return_data[0]) + (0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])), 
                                   2 * ext_call.return_data[0]
                    if not 2 * ext_call.return_data[0]:
                        if not -(0 / ext_call.return_data[0]) + -(0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18:
                            revert with 0, 'SafeMath: division by zero'
                        return 2 * ext_call.return_data[0], 
                               0 / -(0 / ext_call.return_data[0]) + -(0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18
                    if (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / 2 * ext_call.return_data[0] != (0 / ext_call.return_data[0]) + (0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])):
                        revert with 0, 32, 33, code.data[21823 len 33], mem[709 len 31]
                    if not -(0 / ext_call.return_data[0]) + -(0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18:
                        revert with 0, 'SafeMath: division by zero'
                    return 2 * ext_call.return_data[0], 
                           (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / -(0 / ext_call.return_data[0]) + -(0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18
                if not 2 * ext_call.return_data[0]:
                    if not -(0 / ext_call.return_data[0]) + -(0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18:
                        revert with 0, 'SafeMath: division by zero'
                    if 0 / -(0 / ext_call.return_data[0]) + -(0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18 <= 2 * ext_call.return_data[0]:
                        return 2 * ext_call.return_data[0], 
                               0 / -(0 / ext_call.return_data[0]) + -(0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18
                else:
                    if (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / 2 * ext_call.return_data[0] != (0 / ext_call.return_data[0]) + (0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])):
                        revert with 0, 32, 33, code.data[21823 len 33], mem[645 len 31]
                    if not -(0 / ext_call.return_data[0]) + -(0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18:
                        revert with 0, 'SafeMath: division by zero'
                    if (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / -(0 / ext_call.return_data[0]) + -(0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18 <= 2 * ext_call.return_data[0]:
                        return 2 * ext_call.return_data[0], 
                               (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / -(0 / ext_call.return_data[0]) + -(0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18
                if not 2 * ext_call.return_data[0]:
                    if not (0 / ext_call.return_data[0]) + (0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])):
                        revert with 0, 'SafeMath: division by zero'
                    return 0 / (0 / ext_call.return_data[0]) + (0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])), 
                           2 * ext_call.return_data[0]
                if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (ext_call.return_data[0] * 0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / 2 * ext_call.return_data[0] != -(0 / ext_call.return_data[0]) + -(0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18:
                    revert with 0, 32, 33, code.data[21823 len 33], mem[709 len 31]
                if not (0 / ext_call.return_data[0]) + (0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])):
                    revert with 0, 'SafeMath: division by zero'
                return (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (ext_call.return_data[0] * 0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / (0 / ext_call.return_data[0]) + (0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])), 
                       2 * ext_call.return_data[0]
            if volatilityFactor * t / t != volatilityFactor:
                revert with 0, 32, 33, code.data[21823 len 33], mem[517 len 31]
            if not volatilityFactor * t:
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                if (0 / ext_call.return_data[0]) + (0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) < 0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]):
                    revert with 0, 'SafeMath: addition overflow'
                if (0 / ext_call.return_data[0]) + (0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) > 10^18:
                    revert with 0, 'SafeMath: subtraction overflow'
                if (0 / ext_call.return_data[0]) + (0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) > -(0 / ext_call.return_data[0]) + -(0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18:
                    if not 2 * ext_call.return_data[0]:
                        if not (0 / ext_call.return_data[0]) + (0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])):
                            revert with 0, 'SafeMath: division by zero'
                        if 0 / (0 / ext_call.return_data[0]) + (0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) <= 2 * ext_call.return_data[0]:
                            return 0 / (0 / ext_call.return_data[0]) + (0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])), 
                                   2 * ext_call.return_data[0]
                    else:
                        if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (ext_call.return_data[0] * 0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / 2 * ext_call.return_data[0] != -(0 / ext_call.return_data[0]) + -(0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18:
                            revert with 0, 32, 33, code.data[21823 len 33], mem[645 len 31]
                        if not (0 / ext_call.return_data[0]) + (0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])):
                            revert with 0, 'SafeMath: division by zero'
                        if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (ext_call.return_data[0] * 0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / (0 / ext_call.return_data[0]) + (0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) <= 2 * ext_call.return_data[0]:
                            return (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (ext_call.return_data[0] * 0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / (0 / ext_call.return_data[0]) + (0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])), 
                                   2 * ext_call.return_data[0]
                    if not 2 * ext_call.return_data[0]:
                        if not -(0 / ext_call.return_data[0]) + -(0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18:
                            revert with 0, 'SafeMath: division by zero'
                        return 2 * ext_call.return_data[0], 
                               0 / -(0 / ext_call.return_data[0]) + -(0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18
                    if (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / 2 * ext_call.return_data[0] != (0 / ext_call.return_data[0]) + (0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])):
                        revert with 0, 32, 33, code.data[21823 len 33], mem[709 len 31]
                    if not -(0 / ext_call.return_data[0]) + -(0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18:
                        revert with 0, 'SafeMath: division by zero'
                    return 2 * ext_call.return_data[0], 
                           (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / -(0 / ext_call.return_data[0]) + -(0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18
                if not 2 * ext_call.return_data[0]:
                    if not -(0 / ext_call.return_data[0]) + -(0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18:
                        revert with 0, 'SafeMath: division by zero'
                    if 0 / -(0 / ext_call.return_data[0]) + -(0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18 <= 2 * ext_call.return_data[0]:
                        return 2 * ext_call.return_data[0], 
                               0 / -(0 / ext_call.return_data[0]) + -(0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18
                else:
                    if (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / 2 * ext_call.return_data[0] != (0 / ext_call.return_data[0]) + (0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])):
                        revert with 0, 32, 33, code.data[21823 len 33], mem[645 len 31]
                    if not -(0 / ext_call.return_data[0]) + -(0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18:
                        revert with 0, 'SafeMath: division by zero'
                    if (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / -(0 / ext_call.return_data[0]) + -(0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18 <= 2 * ext_call.return_data[0]:
                        return 2 * ext_call.return_data[0], 
                               (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / -(0 / ext_call.return_data[0]) + -(0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18
                if not 2 * ext_call.return_data[0]:
                    if not (0 / ext_call.return_data[0]) + (0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])):
                        revert with 0, 'SafeMath: division by zero'
                    return 0 / (0 / ext_call.return_data[0]) + (0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])), 
                           2 * ext_call.return_data[0]
                if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (ext_call.return_data[0] * 0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / 2 * ext_call.return_data[0] != -(0 / ext_call.return_data[0]) + -(0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18:
                    revert with 0, 32, 33, code.data[21823 len 33], mem[709 len 31]
                if not (0 / ext_call.return_data[0]) + (0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])):
                    revert with 0, 'SafeMath: division by zero'
                return (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (ext_call.return_data[0] * 0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / (0 / ext_call.return_data[0]) + (0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])), 
                       2 * ext_call.return_data[0]
            if 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / volatilityFactor * t != 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]):
                revert with 0, 32, 33, code.data[21823 len 33], mem[517 len 31]
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            if (10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + (0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) < 0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]):
                revert with 0, 'SafeMath: addition overflow'
            if (10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + (0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) > 10^18:
                revert with 0, 'SafeMath: subtraction overflow'
            if (10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + (0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) > -(10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + -(0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18:
                if not 2 * ext_call.return_data[0]:
                    if not (10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + (0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])):
                        revert with 0, 'SafeMath: division by zero'
                    if 0 / (10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + (0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) <= 2 * ext_call.return_data[0]:
                        return 0 / (10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + (0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])), 
                               2 * ext_call.return_data[0]
                else:
                    if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) - (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (ext_call.return_data[0] * 0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / 2 * ext_call.return_data[0] != -(10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + -(0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18:
                        revert with 0, 32, 33, code.data[21823 len 33], mem[645 len 31]
                    if not (10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + (0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])):
                        revert with 0, 'SafeMath: division by zero'
                    if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) - (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (ext_call.return_data[0] * 0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / (10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + (0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) <= 2 * ext_call.return_data[0]:
                        return (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) - (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (ext_call.return_data[0] * 0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / (10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + (0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])), 
                               2 * ext_call.return_data[0]
                if not 2 * ext_call.return_data[0]:
                    if not -(10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + -(0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18:
                        revert with 0, 'SafeMath: division by zero'
                    return 2 * ext_call.return_data[0], 
                           0 / -(10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + -(0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18
                if (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / 2 * ext_call.return_data[0] != (10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + (0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])):
                    revert with 0, 32, 33, code.data[21823 len 33], mem[709 len 31]
                if not -(10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + -(0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18:
                    revert with 0, 'SafeMath: division by zero'
                return 2 * ext_call.return_data[0], 
                       (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / -(10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + -(0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18
            if not 2 * ext_call.return_data[0]:
                if not -(10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + -(0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18:
                    revert with 0, 'SafeMath: division by zero'
                if 0 / -(10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + -(0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18 <= 2 * ext_call.return_data[0]:
                    return 2 * ext_call.return_data[0], 
                           0 / -(10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + -(0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18
            else:
                if (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / 2 * ext_call.return_data[0] != (10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + (0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])):
                    revert with 0, 32, 33, code.data[21823 len 33], mem[645 len 31]
                if not -(10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + -(0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18:
                    revert with 0, 'SafeMath: division by zero'
                if (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / -(10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + -(0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18 <= 2 * ext_call.return_data[0]:
                    return 2 * ext_call.return_data[0], 
                           (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / -(10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + -(0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18
            if not 2 * ext_call.return_data[0]:
                if not (10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + (0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])):
                    revert with 0, 'SafeMath: division by zero'
                return 0 / (10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + (0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])), 
                       2 * ext_call.return_data[0]
            if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) - (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (ext_call.return_data[0] * 0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / 2 * ext_call.return_data[0] != -(10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + -(0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18:
                revert with 0, 32, 33, code.data[21823 len 33], mem[709 len 31]
            if not (10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + (0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])):
                revert with 0, 'SafeMath: division by zero'
            return (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) - (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (ext_call.return_data[0] * 0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / (10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + (0 / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])), 
                   2 * ext_call.return_data[0]
        if (10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / (10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - ext_call.return_data[0] != 10^18:
            revert with 0, 32, 33, code.data[21823 len 33], mem[453 len 31]
        if not 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]):
            revert with 0, 'SafeMath: division by zero'
        if ext_call.return_data[0] - block.timestamp <= 3:
            if not ext_call.return_data[0] - block.timestamp:
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                if (0 / ext_call.return_data[0]) + ((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) < (10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]):
                    revert with 0, 'SafeMath: addition overflow'
                if (0 / ext_call.return_data[0]) + ((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) > 10^18:
                    revert with 0, 'SafeMath: subtraction overflow'
                if (0 / ext_call.return_data[0]) + ((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) > -(0 / ext_call.return_data[0]) + -((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18:
                    if not 2 * ext_call.return_data[0]:
                        if not (0 / ext_call.return_data[0]) + ((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])):
                            revert with 0, 'SafeMath: division by zero'
                        if 0 / (0 / ext_call.return_data[0]) + ((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) <= 2 * ext_call.return_data[0]:
                            return 0 / (0 / ext_call.return_data[0]) + ((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])), 
                                   2 * ext_call.return_data[0]
                    else:
                        if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * (10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (ext_call.return_data[0] * (10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / 2 * ext_call.return_data[0] != -(0 / ext_call.return_data[0]) + -((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18:
                            revert with 0, 32, 33, code.data[21823 len 33], mem[645 len 31]
                        if not (0 / ext_call.return_data[0]) + ((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])):
                            revert with 0, 'SafeMath: division by zero'
                        if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * (10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (ext_call.return_data[0] * (10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / (0 / ext_call.return_data[0]) + ((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) <= 2 * ext_call.return_data[0]:
                            return (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * (10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (ext_call.return_data[0] * (10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / (0 / ext_call.return_data[0]) + ((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])), 
                                   2 * ext_call.return_data[0]
                    if not 2 * ext_call.return_data[0]:
                        if not -(0 / ext_call.return_data[0]) + -((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18:
                            revert with 0, 'SafeMath: division by zero'
                        return 2 * ext_call.return_data[0], 
                               0 / -(0 / ext_call.return_data[0]) + -((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18
                    if (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * (10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + (ext_call.return_data[0] * (10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / 2 * ext_call.return_data[0] != (0 / ext_call.return_data[0]) + ((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])):
                        revert with 0, 32, 33, code.data[21823 len 33], mem[709 len 31]
                    if not -(0 / ext_call.return_data[0]) + -((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18:
                        revert with 0, 'SafeMath: division by zero'
                    return 2 * ext_call.return_data[0], 
                           (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * (10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + (ext_call.return_data[0] * (10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / -(0 / ext_call.return_data[0]) + -((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18
                if not 2 * ext_call.return_data[0]:
                    if not -(0 / ext_call.return_data[0]) + -((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18:
                        revert with 0, 'SafeMath: division by zero'
                    if 0 / -(0 / ext_call.return_data[0]) + -((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18 <= 2 * ext_call.return_data[0]:
                        return 2 * ext_call.return_data[0], 
                               0 / -(0 / ext_call.return_data[0]) + -((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18
                else:
                    if (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * (10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + (ext_call.return_data[0] * (10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / 2 * ext_call.return_data[0] != (0 / ext_call.return_data[0]) + ((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])):
                        revert with 0, 32, 33, code.data[21823 len 33], mem[645 len 31]
                    if not -(0 / ext_call.return_data[0]) + -((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18:
                        revert with 0, 'SafeMath: division by zero'
                    if (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * (10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + (ext_call.return_data[0] * (10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / -(0 / ext_call.return_data[0]) + -((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18 <= 2 * ext_call.return_data[0]:
                        return 2 * ext_call.return_data[0], 
                               (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * (10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + (ext_call.return_data[0] * (10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / -(0 / ext_call.return_data[0]) + -((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18
                if not 2 * ext_call.return_data[0]:
                    if not (0 / ext_call.return_data[0]) + ((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])):
                        revert with 0, 'SafeMath: division by zero'
                    return 0 / (0 / ext_call.return_data[0]) + ((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])), 
                           2 * ext_call.return_data[0]
                if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * (10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (ext_call.return_data[0] * (10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / 2 * ext_call.return_data[0] != -(0 / ext_call.return_data[0]) + -((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18:
                    revert with 0, 32, 33, code.data[21823 len 33], mem[709 len 31]
                if not (0 / ext_call.return_data[0]) + ((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])):
                    revert with 0, 'SafeMath: division by zero'
                return (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * (10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (ext_call.return_data[0] * (10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / (0 / ext_call.return_data[0]) + ((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])), 
                       2 * ext_call.return_data[0]
            if volatilityFactor != volatilityFactor:
                revert with 0, 32, 33, code.data[21823 len 33], mem[517 len 31]
            if not volatilityFactor:
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                if (0 / ext_call.return_data[0]) + ((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) < (10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]):
                    revert with 0, 'SafeMath: addition overflow'
                if (0 / ext_call.return_data[0]) + ((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) > 10^18:
                    revert with 0, 'SafeMath: subtraction overflow'
                if (0 / ext_call.return_data[0]) + ((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) > -(0 / ext_call.return_data[0]) + -((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18:
                    if not 2 * ext_call.return_data[0]:
                        if not (0 / ext_call.return_data[0]) + ((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])):
                            revert with 0, 'SafeMath: division by zero'
                        if 0 / (0 / ext_call.return_data[0]) + ((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) <= 2 * ext_call.return_data[0]:
                            return 0 / (0 / ext_call.return_data[0]) + ((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])), 
                                   2 * ext_call.return_data[0]
                    else:
                        if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * (10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (ext_call.return_data[0] * (10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / 2 * ext_call.return_data[0] != -(0 / ext_call.return_data[0]) + -((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18:
                            revert with 0, 32, 33, code.data[21823 len 33], mem[645 len 31]
                        if not (0 / ext_call.return_data[0]) + ((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])):
                            revert with 0, 'SafeMath: division by zero'
                        if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * (10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (ext_call.return_data[0] * (10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / (0 / ext_call.return_data[0]) + ((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) <= 2 * ext_call.return_data[0]:
                            return (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * (10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (ext_call.return_data[0] * (10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / (0 / ext_call.return_data[0]) + ((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])), 
                                   2 * ext_call.return_data[0]
                    if not 2 * ext_call.return_data[0]:
                        if not -(0 / ext_call.return_data[0]) + -((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18:
                            revert with 0, 'SafeMath: division by zero'
                        return 2 * ext_call.return_data[0], 
                               0 / -(0 / ext_call.return_data[0]) + -((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18
                    if (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * (10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + (ext_call.return_data[0] * (10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / 2 * ext_call.return_data[0] != (0 / ext_call.return_data[0]) + ((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])):
                        revert with 0, 32, 33, code.data[21823 len 33], mem[709 len 31]
                    if not -(0 / ext_call.return_data[0]) + -((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18:
                        revert with 0, 'SafeMath: division by zero'
                    return 2 * ext_call.return_data[0], 
                           (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * (10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + (ext_call.return_data[0] * (10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / -(0 / ext_call.return_data[0]) + -((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18
                if not 2 * ext_call.return_data[0]:
                    if not -(0 / ext_call.return_data[0]) + -((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18:
                        revert with 0, 'SafeMath: division by zero'
                    if 0 / -(0 / ext_call.return_data[0]) + -((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18 <= 2 * ext_call.return_data[0]:
                        return 2 * ext_call.return_data[0], 
                               0 / -(0 / ext_call.return_data[0]) + -((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18
                else:
                    if (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * (10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + (ext_call.return_data[0] * (10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / 2 * ext_call.return_data[0] != (0 / ext_call.return_data[0]) + ((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])):
                        revert with 0, 32, 33, code.data[21823 len 33], mem[645 len 31]
                    if not -(0 / ext_call.return_data[0]) + -((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18:
                        revert with 0, 'SafeMath: division by zero'
                    if (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * (10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + (ext_call.return_data[0] * (10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / -(0 / ext_call.return_data[0]) + -((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18 <= 2 * ext_call.return_data[0]:
                        return 2 * ext_call.return_data[0], 
                               (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * (10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + (ext_call.return_data[0] * (10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / -(0 / ext_call.return_data[0]) + -((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18
                if not 2 * ext_call.return_data[0]:
                    if not (0 / ext_call.return_data[0]) + ((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])):
                        revert with 0, 'SafeMath: division by zero'
                    return 0 / (0 / ext_call.return_data[0]) + ((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])), 
                           2 * ext_call.return_data[0]
                if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * (10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (ext_call.return_data[0] * (10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / 2 * ext_call.return_data[0] != -(0 / ext_call.return_data[0]) + -((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18:
                    revert with 0, 32, 33, code.data[21823 len 33], mem[709 len 31]
                if not (0 / ext_call.return_data[0]) + ((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])):
                    revert with 0, 'SafeMath: division by zero'
                return (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * (10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (ext_call.return_data[0] * (10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / (0 / ext_call.return_data[0]) + ((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])), 
                       2 * ext_call.return_data[0]
            if 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / volatilityFactor != 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]):
                revert with 0, 32, 33, code.data[21823 len 33], mem[517 len 31]
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            if (10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + ((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) < (10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]):
                revert with 0, 'SafeMath: addition overflow'
            if (10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + ((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) > 10^18:
                revert with 0, 'SafeMath: subtraction overflow'
            if (10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + ((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) > -(10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + -((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18:
                if not 2 * ext_call.return_data[0]:
                    if not (10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + ((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])):
                        revert with 0, 'SafeMath: division by zero'
                    if 0 / (10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + ((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) <= 2 * ext_call.return_data[0]:
                        return 0 / (10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + ((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])), 
                               2 * ext_call.return_data[0]
                else:
                    if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) - (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) - (ext_call.return_data[0] * (10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (ext_call.return_data[0] * (10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / 2 * ext_call.return_data[0] != -(10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + -((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18:
                        revert with 0, 32, 33, code.data[21823 len 33], mem[645 len 31]
                    if not (10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + ((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])):
                        revert with 0, 'SafeMath: division by zero'
                    if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) - (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) - (ext_call.return_data[0] * (10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (ext_call.return_data[0] * (10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / (10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + ((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) <= 2 * ext_call.return_data[0]:
                        return (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) - (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) - (ext_call.return_data[0] * (10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (ext_call.return_data[0] * (10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / (10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + ((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])), 
                               2 * ext_call.return_data[0]
                if not 2 * ext_call.return_data[0]:
                    if not -(10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + -((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18:
                        revert with 0, 'SafeMath: division by zero'
                    return 2 * ext_call.return_data[0], 
                           0 / -(10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + -((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18
                if (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + (ext_call.return_data[0] * (10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + (ext_call.return_data[0] * (10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / 2 * ext_call.return_data[0] != (10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + ((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])):
                    revert with 0, 32, 33, code.data[21823 len 33], mem[709 len 31]
                if not -(10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + -((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18:
                    revert with 0, 'SafeMath: division by zero'
                return 2 * ext_call.return_data[0], 
                       (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + (ext_call.return_data[0] * (10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + (ext_call.return_data[0] * (10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / -(10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + -((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18
            if not 2 * ext_call.return_data[0]:
                if not -(10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + -((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18:
                    revert with 0, 'SafeMath: division by zero'
                if 0 / -(10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + -((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18 <= 2 * ext_call.return_data[0]:
                    return 2 * ext_call.return_data[0], 
                           0 / -(10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + -((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18
            else:
                if (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + (ext_call.return_data[0] * (10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + (ext_call.return_data[0] * (10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / 2 * ext_call.return_data[0] != (10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + ((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])):
                    revert with 0, 32, 33, code.data[21823 len 33], mem[645 len 31]
                if not -(10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + -((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18:
                    revert with 0, 'SafeMath: division by zero'
                if (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + (ext_call.return_data[0] * (10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + (ext_call.return_data[0] * (10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / -(10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + -((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18 <= 2 * ext_call.return_data[0]:
                    return 2 * ext_call.return_data[0], 
                           (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + (ext_call.return_data[0] * (10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + (ext_call.return_data[0] * (10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / -(10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + -((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18
            if not 2 * ext_call.return_data[0]:
                if not (10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + ((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])):
                    revert with 0, 'SafeMath: division by zero'
                return 0 / (10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + ((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])), 
                       2 * ext_call.return_data[0]
            if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) - (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) - (ext_call.return_data[0] * (10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (ext_call.return_data[0] * (10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / 2 * ext_call.return_data[0] != -(10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + -((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18:
                revert with 0, 32, 33, code.data[21823 len 33], mem[709 len 31]
            if not (10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + ((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])):
                revert with 0, 'SafeMath: division by zero'
            return (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) - (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) - (ext_call.return_data[0] * (10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (ext_call.return_data[0] * (10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / (10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor / ext_call.return_data[0]) + ((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])), 
                   2 * ext_call.return_data[0]
        s = (ext_call.return_data[0] - block.timestamp / 2) + 1
        t = ext_call.return_data[0] - block.timestamp
        while s < t:
            require s
            s = (ext_call.return_data[0] - block.timestamp / s) + s / 2
            t = s
            continue 
        if not t:
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            if (0 / ext_call.return_data[0]) + ((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) < (10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]):
                revert with 0, 'SafeMath: addition overflow'
            if (0 / ext_call.return_data[0]) + ((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) > 10^18:
                revert with 0, 'SafeMath: subtraction overflow'
            if (0 / ext_call.return_data[0]) + ((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) > -(0 / ext_call.return_data[0]) + -((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18:
                if not 2 * ext_call.return_data[0]:
                    if not (0 / ext_call.return_data[0]) + ((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])):
                        revert with 0, 'SafeMath: division by zero'
                    if 0 / (0 / ext_call.return_data[0]) + ((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) <= 2 * ext_call.return_data[0]:
                        return 0 / (0 / ext_call.return_data[0]) + ((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])), 
                               2 * ext_call.return_data[0]
                else:
                    if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * (10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (ext_call.return_data[0] * (10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / 2 * ext_call.return_data[0] != -(0 / ext_call.return_data[0]) + -((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18:
                        revert with 0, 32, 33, code.data[21823 len 33], mem[645 len 31]
                    if not (0 / ext_call.return_data[0]) + ((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])):
                        revert with 0, 'SafeMath: division by zero'
                    if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * (10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (ext_call.return_data[0] * (10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / (0 / ext_call.return_data[0]) + ((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) <= 2 * ext_call.return_data[0]:
                        return (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * (10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (ext_call.return_data[0] * (10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / (0 / ext_call.return_data[0]) + ((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])), 
                               2 * ext_call.return_data[0]
                if not 2 * ext_call.return_data[0]:
                    if not -(0 / ext_call.return_data[0]) + -((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18:
                        revert with 0, 'SafeMath: division by zero'
                    return 2 * ext_call.return_data[0], 
                           0 / -(0 / ext_call.return_data[0]) + -((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18
                if (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * (10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + (ext_call.return_data[0] * (10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / 2 * ext_call.return_data[0] != (0 / ext_call.return_data[0]) + ((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])):
                    revert with 0, 32, 33, code.data[21823 len 33], mem[709 len 31]
                if not -(0 / ext_call.return_data[0]) + -((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18:
                    revert with 0, 'SafeMath: division by zero'
                return 2 * ext_call.return_data[0], 
                       (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * (10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + (ext_call.return_data[0] * (10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / -(0 / ext_call.return_data[0]) + -((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18
            if not 2 * ext_call.return_data[0]:
                if not -(0 / ext_call.return_data[0]) + -((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18:
                    revert with 0, 'SafeMath: division by zero'
                if 0 / -(0 / ext_call.return_data[0]) + -((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18 <= 2 * ext_call.return_data[0]:
                    return 2 * ext_call.return_data[0], 
                           0 / -(0 / ext_call.return_data[0]) + -((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18
            else:
                if (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * (10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + (ext_call.return_data[0] * (10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / 2 * ext_call.return_data[0] != (0 / ext_call.return_data[0]) + ((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])):
                    revert with 0, 32, 33, code.data[21823 len 33], mem[645 len 31]
                if not -(0 / ext_call.return_data[0]) + -((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18:
                    revert with 0, 'SafeMath: division by zero'
                if (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * (10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + (ext_call.return_data[0] * (10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / -(0 / ext_call.return_data[0]) + -((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18 <= 2 * ext_call.return_data[0]:
                    return 2 * ext_call.return_data[0], 
                           (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * (10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + (ext_call.return_data[0] * (10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / -(0 / ext_call.return_data[0]) + -((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18
            if not 2 * ext_call.return_data[0]:
                if not (0 / ext_call.return_data[0]) + ((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])):
                    revert with 0, 'SafeMath: division by zero'
                return 0 / (0 / ext_call.return_data[0]) + ((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])), 
                       2 * ext_call.return_data[0]
            if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * (10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (ext_call.return_data[0] * (10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / 2 * ext_call.return_data[0] != -(0 / ext_call.return_data[0]) + -((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18:
                revert with 0, 32, 33, code.data[21823 len 33], mem[709 len 31]
            if not (0 / ext_call.return_data[0]) + ((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])):
                revert with 0, 'SafeMath: division by zero'
            return (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * (10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (ext_call.return_data[0] * (10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / (0 / ext_call.return_data[0]) + ((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])), 
                   2 * ext_call.return_data[0]
        if volatilityFactor * t / t != volatilityFactor:
            revert with 0, 32, 33, code.data[21823 len 33], mem[517 len 31]
        if not volatilityFactor * t:
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            if (0 / ext_call.return_data[0]) + ((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) < (10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]):
                revert with 0, 'SafeMath: addition overflow'
            if (0 / ext_call.return_data[0]) + ((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) > 10^18:
                revert with 0, 'SafeMath: subtraction overflow'
            if (0 / ext_call.return_data[0]) + ((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) > -(0 / ext_call.return_data[0]) + -((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18:
                if not 2 * ext_call.return_data[0]:
                    if not (0 / ext_call.return_data[0]) + ((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])):
                        revert with 0, 'SafeMath: division by zero'
                    if 0 / (0 / ext_call.return_data[0]) + ((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) <= 2 * ext_call.return_data[0]:
                        return 0 / (0 / ext_call.return_data[0]) + ((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])), 
                               2 * ext_call.return_data[0]
                else:
                    if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * (10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (ext_call.return_data[0] * (10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / 2 * ext_call.return_data[0] != -(0 / ext_call.return_data[0]) + -((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18:
                        revert with 0, 32, 33, code.data[21823 len 33], mem[645 len 31]
                    if not (0 / ext_call.return_data[0]) + ((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])):
                        revert with 0, 'SafeMath: division by zero'
                    if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * (10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (ext_call.return_data[0] * (10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / (0 / ext_call.return_data[0]) + ((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) <= 2 * ext_call.return_data[0]:
                        return (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * (10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (ext_call.return_data[0] * (10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / (0 / ext_call.return_data[0]) + ((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])), 
                               2 * ext_call.return_data[0]
                if not 2 * ext_call.return_data[0]:
                    if not -(0 / ext_call.return_data[0]) + -((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18:
                        revert with 0, 'SafeMath: division by zero'
                    return 2 * ext_call.return_data[0], 
                           0 / -(0 / ext_call.return_data[0]) + -((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18
                if (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * (10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + (ext_call.return_data[0] * (10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / 2 * ext_call.return_data[0] != (0 / ext_call.return_data[0]) + ((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])):
                    revert with 0, 32, 33, code.data[21823 len 33], mem[709 len 31]
                if not -(0 / ext_call.return_data[0]) + -((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18:
                    revert with 0, 'SafeMath: division by zero'
                return 2 * ext_call.return_data[0], 
                       (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * (10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + (ext_call.return_data[0] * (10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / -(0 / ext_call.return_data[0]) + -((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18
            if not 2 * ext_call.return_data[0]:
                if not -(0 / ext_call.return_data[0]) + -((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18:
                    revert with 0, 'SafeMath: division by zero'
                if 0 / -(0 / ext_call.return_data[0]) + -((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18 <= 2 * ext_call.return_data[0]:
                    return 2 * ext_call.return_data[0], 
                           0 / -(0 / ext_call.return_data[0]) + -((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18
            else:
                if (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * (10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + (ext_call.return_data[0] * (10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / 2 * ext_call.return_data[0] != (0 / ext_call.return_data[0]) + ((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])):
                    revert with 0, 32, 33, code.data[21823 len 33], mem[645 len 31]
                if not -(0 / ext_call.return_data[0]) + -((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18:
                    revert with 0, 'SafeMath: division by zero'
                if (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * (10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + (ext_call.return_data[0] * (10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / -(0 / ext_call.return_data[0]) + -((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18 <= 2 * ext_call.return_data[0]:
                    return 2 * ext_call.return_data[0], 
                           (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * (10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + (ext_call.return_data[0] * (10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / -(0 / ext_call.return_data[0]) + -((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18
            if not 2 * ext_call.return_data[0]:
                if not (0 / ext_call.return_data[0]) + ((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])):
                    revert with 0, 'SafeMath: division by zero'
                return 0 / (0 / ext_call.return_data[0]) + ((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])), 
                       2 * ext_call.return_data[0]
            if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * (10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (ext_call.return_data[0] * (10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / 2 * ext_call.return_data[0] != -(0 / ext_call.return_data[0]) + -((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18:
                revert with 0, 32, 33, code.data[21823 len 33], mem[709 len 31]
            if not (0 / ext_call.return_data[0]) + ((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])):
                revert with 0, 'SafeMath: division by zero'
            return (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * (10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (ext_call.return_data[0] * (10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / (0 / ext_call.return_data[0]) + ((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])), 
                   2 * ext_call.return_data[0]
        if 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / volatilityFactor * t != 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]):
            revert with 0, 32, 33, code.data[21823 len 33], mem[517 len 31]
        if not ext_call.return_data[0]:
            revert with 0, 'SafeMath: division by zero'
        if (10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + ((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) < (10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]):
            revert with 0, 'SafeMath: addition overflow'
        if (10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + ((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) > 10^18:
            revert with 0, 'SafeMath: subtraction overflow'
        if (10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + ((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) > -(10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + -((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18:
            if not 2 * ext_call.return_data[0]:
                if not (10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + ((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])):
                    revert with 0, 'SafeMath: division by zero'
                if 0 / (10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + ((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) <= 2 * ext_call.return_data[0]:
                    return 0 / (10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + ((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])), 
                           2 * ext_call.return_data[0]
            else:
                if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) - (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) - (ext_call.return_data[0] * (10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (ext_call.return_data[0] * (10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / 2 * ext_call.return_data[0] != -(10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + -((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18:
                    revert with 0, 32, 33, code.data[21823 len 33], mem[645 len 31]
                if not (10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + ((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])):
                    revert with 0, 'SafeMath: division by zero'
                if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) - (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) - (ext_call.return_data[0] * (10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (ext_call.return_data[0] * (10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / (10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + ((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) <= 2 * ext_call.return_data[0]:
                    return (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) - (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) - (ext_call.return_data[0] * (10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (ext_call.return_data[0] * (10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / (10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + ((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])), 
                           2 * ext_call.return_data[0]
            if not 2 * ext_call.return_data[0]:
                if not -(10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + -((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18:
                    revert with 0, 'SafeMath: division by zero'
                return 2 * ext_call.return_data[0], 
                       0 / -(10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + -((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18
            if (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + (ext_call.return_data[0] * (10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + (ext_call.return_data[0] * (10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / 2 * ext_call.return_data[0] != (10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + ((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])):
                revert with 0, 32, 33, code.data[21823 len 33], mem[709 len 31]
            if not -(10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + -((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18:
                revert with 0, 'SafeMath: division by zero'
            return 2 * ext_call.return_data[0], 
                   (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + (ext_call.return_data[0] * (10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + (ext_call.return_data[0] * (10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / -(10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + -((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18
        if not 2 * ext_call.return_data[0]:
            if not -(10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + -((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18:
                revert with 0, 'SafeMath: division by zero'
            if 0 / -(10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + -((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18 <= 2 * ext_call.return_data[0]:
                return 2 * ext_call.return_data[0], 
                       0 / -(10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + -((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18
        else:
            if (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + (ext_call.return_data[0] * (10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + (ext_call.return_data[0] * (10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / 2 * ext_call.return_data[0] != (10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + ((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])):
                revert with 0, 32, 33, code.data[21823 len 33], mem[645 len 31]
            if not -(10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + -((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18:
                revert with 0, 'SafeMath: division by zero'
            if (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + (ext_call.return_data[0] * (10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + (ext_call.return_data[0] * (10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / -(10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + -((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18 <= 2 * ext_call.return_data[0]:
                return 2 * ext_call.return_data[0], 
                       (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + (ext_call.return_data[0] * (10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + (ext_call.return_data[0] * (10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / -(10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + -((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18
        if not 2 * ext_call.return_data[0]:
            if not (10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + ((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])):
                revert with 0, 'SafeMath: division by zero'
            return 0 / (10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + ((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])), 
                   2 * ext_call.return_data[0]
        if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) - (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) - (ext_call.return_data[0] * (10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (ext_call.return_data[0] * (10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / 2 * ext_call.return_data[0] != -(10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + -((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) + 10^18:
            revert with 0, 32, 33, code.data[21823 len 33], mem[709 len 31]
        if not (10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + ((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])):
            revert with 0, 'SafeMath: division by zero'
        return (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) - (ext_call.return_data[0] * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) - (ext_call.return_data[0] * (10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (ext_call.return_data[0] * (10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) / (10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0]) * volatilityFactor * t / ext_call.return_data[0]) + ((10^18 * 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])) - (10^18 * ext_call.return_data[0]) / 10^18 * ext_call.return_data[32] * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / 10^uint8(ext_call.return_data[0])), 
               2 * ext_call.return_data[0]
    if not 10^18 * 10^uint8(stor153.field_168):
        if not 10^uint8(stor153.field_160):
            revert with 0, 'SafeMath: division by zero'
        if not ext_call.return_data[32]:
            revert with 0, 'SafeMath: division by zero'
        require ext_code.size(arg1)
        staticcall arg1.0x8f620487 with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if block.timestamp > ext_call.return_data[0]:
            revert with 0, 'SafeMath: subtraction overflow'
        require ext_code.size(arg1)
        staticcall arg1.priceRatio() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] <= ext_call.return_data[0]:
            if ext_call.return_data[0] - block.timestamp <= 3:
                if not ext_call.return_data[0] - block.timestamp:
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    if 0 / ext_call.return_data[0] < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if 0 / ext_call.return_data[0] > 10^18:
                        revert with 0, 'SafeMath: subtraction overflow'
                    if 0 / ext_call.return_data[0] > -(0 / ext_call.return_data[0]) + 10^18:
                        if not 2 * ext_call.return_data[0]:
                            if not 0 / ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero'
                            if 0 / 0 / ext_call.return_data[0] <= 2 * ext_call.return_data[0]:
                                return 0 / 0 / ext_call.return_data[0], 2 * ext_call.return_data[0]
                        else:
                            if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) / 2 * ext_call.return_data[0] != -(0 / ext_call.return_data[0]) + 10^18:
                                revert with 0, 32, 33, code.data[21823 len 33], mem[517 len 31]
                            if not 0 / ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero'
                            if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) / 0 / ext_call.return_data[0] <= 2 * ext_call.return_data[0]:
                                return (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) / 0 / ext_call.return_data[0], 
                                       2 * ext_call.return_data[0]
                        if not 2 * ext_call.return_data[0]:
                            if not -(0 / ext_call.return_data[0]) + 10^18:
                                revert with 0, 'SafeMath: division by zero'
                            return 2 * ext_call.return_data[0], 0 / -(0 / ext_call.return_data[0]) + 10^18
                        if (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) / 2 * ext_call.return_data[0] != 0 / ext_call.return_data[0]:
                            revert with 0, 32, 33, code.data[21823 len 33], mem[581 len 31]
                        if not -(0 / ext_call.return_data[0]) + 10^18:
                            revert with 0, 'SafeMath: division by zero'
                        return 2 * ext_call.return_data[0], 
                               (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) / -(0 / ext_call.return_data[0]) + 10^18
                    if not 2 * ext_call.return_data[0]:
                        if not -(0 / ext_call.return_data[0]) + 10^18:
                            revert with 0, 'SafeMath: division by zero'
                        if 0 / -(0 / ext_call.return_data[0]) + 10^18 <= 2 * ext_call.return_data[0]:
                            return 2 * ext_call.return_data[0], 0 / -(0 / ext_call.return_data[0]) + 10^18
                    else:
                        if (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) / 2 * ext_call.return_data[0] != 0 / ext_call.return_data[0]:
                            revert with 0, 32, 33, code.data[21823 len 33], mem[517 len 31]
                        if not -(0 / ext_call.return_data[0]) + 10^18:
                            revert with 0, 'SafeMath: division by zero'
                        if (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) / -(0 / ext_call.return_data[0]) + 10^18 <= 2 * ext_call.return_data[0]:
                            return 2 * ext_call.return_data[0], 
                                   (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) / -(0 / ext_call.return_data[0]) + 10^18
                    if not 2 * ext_call.return_data[0]:
                        if not 0 / ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        return 0 / 0 / ext_call.return_data[0], 2 * ext_call.return_data[0]
                    if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) / 2 * ext_call.return_data[0] != -(0 / ext_call.return_data[0]) + 10^18:
                        revert with 0, 32, 33, code.data[21823 len 33], mem[581 len 31]
                    if not 0 / ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    return (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) / 0 / ext_call.return_data[0], 
                           2 * ext_call.return_data[0]
                if volatilityFactor != volatilityFactor:
                    revert with 0, 32, 33, code.data[21823 len 33], mem[389 len 31]
                if not volatilityFactor:
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    if 0 / ext_call.return_data[0] < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if 0 / ext_call.return_data[0] > 10^18:
                        revert with 0, 'SafeMath: subtraction overflow'
                    if 0 / ext_call.return_data[0] > -(0 / ext_call.return_data[0]) + 10^18:
                        if not 2 * ext_call.return_data[0]:
                            if not 0 / ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero'
                            if 0 / 0 / ext_call.return_data[0] <= 2 * ext_call.return_data[0]:
                                return 0 / 0 / ext_call.return_data[0], 2 * ext_call.return_data[0]
                        else:
                            if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) / 2 * ext_call.return_data[0] != -(0 / ext_call.return_data[0]) + 10^18:
                                revert with 0, 32, 33, code.data[21823 len 33], mem[517 len 31]
                            if not 0 / ext_call.return_data[0]:
                                revert with 0, 'SafeMath: division by zero'
                            if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) / 0 / ext_call.return_data[0] <= 2 * ext_call.return_data[0]:
                                return (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) / 0 / ext_call.return_data[0], 
                                       2 * ext_call.return_data[0]
                        if not 2 * ext_call.return_data[0]:
                            if not -(0 / ext_call.return_data[0]) + 10^18:
                                revert with 0, 'SafeMath: division by zero'
                            return 2 * ext_call.return_data[0], 0 / -(0 / ext_call.return_data[0]) + 10^18
                        if (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) / 2 * ext_call.return_data[0] != 0 / ext_call.return_data[0]:
                            revert with 0, 32, 33, code.data[21823 len 33], mem[581 len 31]
                        if not -(0 / ext_call.return_data[0]) + 10^18:
                            revert with 0, 'SafeMath: division by zero'
                        return 2 * ext_call.return_data[0], 
                               (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) / -(0 / ext_call.return_data[0]) + 10^18
                    if not 2 * ext_call.return_data[0]:
                        if not -(0 / ext_call.return_data[0]) + 10^18:
                            revert with 0, 'SafeMath: division by zero'
                        if 0 / -(0 / ext_call.return_data[0]) + 10^18 <= 2 * ext_call.return_data[0]:
                            return 2 * ext_call.return_data[0], 0 / -(0 / ext_call.return_data[0]) + 10^18
                    else:
                        if (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) / 2 * ext_call.return_data[0] != 0 / ext_call.return_data[0]:
                            revert with 0, 32, 33, code.data[21823 len 33], mem[517 len 31]
                        if not -(0 / ext_call.return_data[0]) + 10^18:
                            revert with 0, 'SafeMath: division by zero'
                        if (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) / -(0 / ext_call.return_data[0]) + 10^18 <= 2 * ext_call.return_data[0]:
                            return 2 * ext_call.return_data[0], 
                                   (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) / -(0 / ext_call.return_data[0]) + 10^18
                    if not 2 * ext_call.return_data[0]:
                        if not 0 / ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        return 0 / 0 / ext_call.return_data[0], 2 * ext_call.return_data[0]
                    if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) / 2 * ext_call.return_data[0] != -(0 / ext_call.return_data[0]) + 10^18:
                        revert with 0, 32, 33, code.data[21823 len 33], mem[581 len 31]
                    if not 0 / ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    return (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) / 0 / ext_call.return_data[0], 
                           2 * ext_call.return_data[0]
                if 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / volatilityFactor != 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]:
                    revert with 0, 32, 33, code.data[21823 len 33], mem[389 len 31]
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                if 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0] < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0] > 10^18:
                    revert with 0, 'SafeMath: subtraction overflow'
                if 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0] > -(0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + 10^18:
                    if not 2 * ext_call.return_data[0]:
                        if not 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        if 0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0] <= 2 * ext_call.return_data[0]:
                            return 0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0], 
                                   2 * ext_call.return_data[0]
                    else:
                        if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) / 2 * ext_call.return_data[0] != -(0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + 10^18:
                            revert with 0, 32, 33, code.data[21823 len 33], mem[517 len 31]
                        if not 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0] <= 2 * ext_call.return_data[0]:
                            return (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0], 
                                   2 * ext_call.return_data[0]
                    if not 2 * ext_call.return_data[0]:
                        if not -(0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + 10^18:
                            revert with 0, 'SafeMath: division by zero'
                        return 2 * ext_call.return_data[0], 
                               0 / -(0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + 10^18
                    if (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) / 2 * ext_call.return_data[0] != 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]:
                        revert with 0, 32, 33, code.data[21823 len 33], mem[581 len 31]
                    if not -(0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + 10^18:
                        revert with 0, 'SafeMath: division by zero'
                    return 2 * ext_call.return_data[0], 
                           (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) / -(0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + 10^18
                if not 2 * ext_call.return_data[0]:
                    if not -(0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + 10^18:
                        revert with 0, 'SafeMath: division by zero'
                    if 0 / -(0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + 10^18 <= 2 * ext_call.return_data[0]:
                        return 2 * ext_call.return_data[0], 
                               0 / -(0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + 10^18
                else:
                    if (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) / 2 * ext_call.return_data[0] != 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]:
                        revert with 0, 32, 33, code.data[21823 len 33], mem[517 len 31]
                    if not -(0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + 10^18:
                        revert with 0, 'SafeMath: division by zero'
                    if (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) / -(0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + 10^18 <= 2 * ext_call.return_data[0]:
                        return 2 * ext_call.return_data[0], 
                               (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) / -(0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + 10^18
                if not 2 * ext_call.return_data[0]:
                    if not 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    return 0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0], 
                           2 * ext_call.return_data[0]
                if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) / 2 * ext_call.return_data[0] != -(0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + 10^18:
                    revert with 0, 32, 33, code.data[21823 len 33], mem[581 len 31]
                if not 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                return (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0], 
                       2 * ext_call.return_data[0]
            s = (ext_call.return_data[0] - block.timestamp / 2) + 1
            t = ext_call.return_data[0] - block.timestamp
            while s < t:
                require s
                s = (ext_call.return_data[0] - block.timestamp / s) + s / 2
                t = s
                continue 
            if not t:
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                if 0 / ext_call.return_data[0] < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if 0 / ext_call.return_data[0] > 10^18:
                    revert with 0, 'SafeMath: subtraction overflow'
                if 0 / ext_call.return_data[0] > -(0 / ext_call.return_data[0]) + 10^18:
                    if not 2 * ext_call.return_data[0]:
                        if not 0 / ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        if 0 / 0 / ext_call.return_data[0] <= 2 * ext_call.return_data[0]:
                            return 0 / 0 / ext_call.return_data[0], 2 * ext_call.return_data[0]
                    else:
                        if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) / 2 * ext_call.return_data[0] != -(0 / ext_call.return_data[0]) + 10^18:
                            revert with 0, 32, 33, code.data[21823 len 33], mem[517 len 31]
                        if not 0 / ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) / 0 / ext_call.return_data[0] <= 2 * ext_call.return_data[0]:
                            return (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) / 0 / ext_call.return_data[0], 
                                   2 * ext_call.return_data[0]
                    if not 2 * ext_call.return_data[0]:
                        if not -(0 / ext_call.return_data[0]) + 10^18:
                            revert with 0, 'SafeMath: division by zero'
                        return 2 * ext_call.return_data[0], 0 / -(0 / ext_call.return_data[0]) + 10^18
                    if (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) / 2 * ext_call.return_data[0] != 0 / ext_call.return_data[0]:
                        revert with 0, 32, 33, code.data[21823 len 33], mem[581 len 31]
                    if not -(0 / ext_call.return_data[0]) + 10^18:
                        revert with 0, 'SafeMath: division by zero'
                    return 2 * ext_call.return_data[0], 
                           (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) / -(0 / ext_call.return_data[0]) + 10^18
                if not 2 * ext_call.return_data[0]:
                    if not -(0 / ext_call.return_data[0]) + 10^18:
                        revert with 0, 'SafeMath: division by zero'
                    if 0 / -(0 / ext_call.return_data[0]) + 10^18 <= 2 * ext_call.return_data[0]:
                        return 2 * ext_call.return_data[0], 0 / -(0 / ext_call.return_data[0]) + 10^18
                else:
                    if (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) / 2 * ext_call.return_data[0] != 0 / ext_call.return_data[0]:
                        revert with 0, 32, 33, code.data[21823 len 33], mem[517 len 31]
                    if not -(0 / ext_call.return_data[0]) + 10^18:
                        revert with 0, 'SafeMath: division by zero'
                    if (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) / -(0 / ext_call.return_data[0]) + 10^18 <= 2 * ext_call.return_data[0]:
                        return 2 * ext_call.return_data[0], 
                               (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) / -(0 / ext_call.return_data[0]) + 10^18
                if not 2 * ext_call.return_data[0]:
                    if not 0 / ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    return 0 / 0 / ext_call.return_data[0], 2 * ext_call.return_data[0]
                if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) / 2 * ext_call.return_data[0] != -(0 / ext_call.return_data[0]) + 10^18:
                    revert with 0, 32, 33, code.data[21823 len 33], mem[581 len 31]
                if not 0 / ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                return (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) / 0 / ext_call.return_data[0], 
                       2 * ext_call.return_data[0]
            if volatilityFactor * t / t != volatilityFactor:
                revert with 0, 32, 33, code.data[21823 len 33], mem[389 len 31]
            if not volatilityFactor * t:
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                if 0 / ext_call.return_data[0] < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if 0 / ext_call.return_data[0] > 10^18:
                    revert with 0, 'SafeMath: subtraction overflow'
                if 0 / ext_call.return_data[0] > -(0 / ext_call.return_data[0]) + 10^18:
                    if not 2 * ext_call.return_data[0]:
                        if not 0 / ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        if 0 / 0 / ext_call.return_data[0] <= 2 * ext_call.return_data[0]:
                            return 0 / 0 / ext_call.return_data[0], 2 * ext_call.return_data[0]
                    else:
                        if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) / 2 * ext_call.return_data[0] != -(0 / ext_call.return_data[0]) + 10^18:
                            revert with 0, 32, 33, code.data[21823 len 33], mem[517 len 31]
                        if not 0 / ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) / 0 / ext_call.return_data[0] <= 2 * ext_call.return_data[0]:
                            return (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) / 0 / ext_call.return_data[0], 
                                   2 * ext_call.return_data[0]
                    if not 2 * ext_call.return_data[0]:
                        if not -(0 / ext_call.return_data[0]) + 10^18:
                            revert with 0, 'SafeMath: division by zero'
                        return 2 * ext_call.return_data[0], 0 / -(0 / ext_call.return_data[0]) + 10^18
                    if (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) / 2 * ext_call.return_data[0] != 0 / ext_call.return_data[0]:
                        revert with 0, 32, 33, code.data[21823 len 33], mem[581 len 31]
                    if not -(0 / ext_call.return_data[0]) + 10^18:
                        revert with 0, 'SafeMath: division by zero'
                    return 2 * ext_call.return_data[0], 
                           (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) / -(0 / ext_call.return_data[0]) + 10^18
                if not 2 * ext_call.return_data[0]:
                    if not -(0 / ext_call.return_data[0]) + 10^18:
                        revert with 0, 'SafeMath: division by zero'
                    if 0 / -(0 / ext_call.return_data[0]) + 10^18 <= 2 * ext_call.return_data[0]:
                        return 2 * ext_call.return_data[0], 0 / -(0 / ext_call.return_data[0]) + 10^18
                else:
                    if (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) / 2 * ext_call.return_data[0] != 0 / ext_call.return_data[0]:
                        revert with 0, 32, 33, code.data[21823 len 33], mem[517 len 31]
                    if not -(0 / ext_call.return_data[0]) + 10^18:
                        revert with 0, 'SafeMath: division by zero'
                    if (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) / -(0 / ext_call.return_data[0]) + 10^18 <= 2 * ext_call.return_data[0]:
                        return 2 * ext_call.return_data[0], 
                               (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) / -(0 / ext_call.return_data[0]) + 10^18
                if not 2 * ext_call.return_data[0]:
                    if not 0 / ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    return 0 / 0 / ext_call.return_data[0], 2 * ext_call.return_data[0]
                if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) / 2 * ext_call.return_data[0] != -(0 / ext_call.return_data[0]) + 10^18:
                    revert with 0, 32, 33, code.data[21823 len 33], mem[581 len 31]
                if not 0 / ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                return (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) / 0 / ext_call.return_data[0], 
                       2 * ext_call.return_data[0]
            if 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / volatilityFactor * t != 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]:
                revert with 0, 32, 33, code.data[21823 len 33], mem[389 len 31]
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            if 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0] < 0:
                revert with 0, 'SafeMath: addition overflow'
            if 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0] > 10^18:
                revert with 0, 'SafeMath: subtraction overflow'
            if 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0] > -(0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + 10^18:
                if not 2 * ext_call.return_data[0]:
                    if not 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    if 0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0] <= 2 * ext_call.return_data[0]:
                        return 0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0], 
                               2 * ext_call.return_data[0]
                else:
                    if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) / 2 * ext_call.return_data[0] != -(0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + 10^18:
                        revert with 0, 32, 33, code.data[21823 len 33], mem[517 len 31]
                    if not 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0] <= 2 * ext_call.return_data[0]:
                        return (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0], 
                               2 * ext_call.return_data[0]
                if not 2 * ext_call.return_data[0]:
                    if not -(0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + 10^18:
                        revert with 0, 'SafeMath: division by zero'
                    return 2 * ext_call.return_data[0], 
                           0 / -(0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + 10^18
                if (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) / 2 * ext_call.return_data[0] != 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]:
                    revert with 0, 32, 33, code.data[21823 len 33], mem[581 len 31]
                if not -(0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + 10^18:
                    revert with 0, 'SafeMath: division by zero'
                return 2 * ext_call.return_data[0], 
                       (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) / -(0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + 10^18
            if not 2 * ext_call.return_data[0]:
                if not -(0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + 10^18:
                    revert with 0, 'SafeMath: division by zero'
                if 0 / -(0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + 10^18 <= 2 * ext_call.return_data[0]:
                    return 2 * ext_call.return_data[0], 
                           0 / -(0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + 10^18
            else:
                if (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) / 2 * ext_call.return_data[0] != 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]:
                    revert with 0, 32, 33, code.data[21823 len 33], mem[517 len 31]
                if not -(0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + 10^18:
                    revert with 0, 'SafeMath: division by zero'
                if (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) / -(0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + 10^18 <= 2 * ext_call.return_data[0]:
                    return 2 * ext_call.return_data[0], 
                           (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) / -(0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + 10^18
            if not 2 * ext_call.return_data[0]:
                if not 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                return 0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0], 
                       2 * ext_call.return_data[0]
            if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) / 2 * ext_call.return_data[0] != -(0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + 10^18:
                revert with 0, 32, 33, code.data[21823 len 33], mem[581 len 31]
            if not 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            return (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0], 
                   2 * ext_call.return_data[0]
        if ext_call.return_data[0] > 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]:
            revert with 0, 'SafeMath: subtraction overflow'
        if not (0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - ext_call.return_data[0]:
            if not 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]:
                revert with 0, 'SafeMath: division by zero'
            if ext_call.return_data[0] - block.timestamp <= 3:
                if not ext_call.return_data[0] - block.timestamp:
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    if (0 / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) < 0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]:
                        revert with 0, 'SafeMath: addition overflow'
                    if (0 / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) > 10^18:
                        revert with 0, 'SafeMath: subtraction overflow'
                    if (0 / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) > -(0 / ext_call.return_data[0]) + -(0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18:
                        if not 2 * ext_call.return_data[0]:
                            if not (0 / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]):
                                revert with 0, 'SafeMath: division by zero'
                            if 0 / (0 / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) <= 2 * ext_call.return_data[0]:
                                return 0 / (0 / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]), 
                                       2 * ext_call.return_data[0]
                        else:
                            if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / 2 * ext_call.return_data[0] != -(0 / ext_call.return_data[0]) + -(0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18:
                                revert with 0, 32, 33, code.data[21823 len 33], mem[645 len 31]
                            if not (0 / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]):
                                revert with 0, 'SafeMath: division by zero'
                            if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / (0 / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) <= 2 * ext_call.return_data[0]:
                                return (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / (0 / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]), 
                                       2 * ext_call.return_data[0]
                        if not 2 * ext_call.return_data[0]:
                            if not -(0 / ext_call.return_data[0]) + -(0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18:
                                revert with 0, 'SafeMath: division by zero'
                            return 2 * ext_call.return_data[0], 
                                   0 / -(0 / ext_call.return_data[0]) + -(0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18
                        if (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / 2 * ext_call.return_data[0] != (0 / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]):
                            revert with 0, 32, 33, code.data[21823 len 33], mem[709 len 31]
                        if not -(0 / ext_call.return_data[0]) + -(0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18:
                            revert with 0, 'SafeMath: division by zero'
                        return 2 * ext_call.return_data[0], 
                               (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / -(0 / ext_call.return_data[0]) + -(0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18
                    if not 2 * ext_call.return_data[0]:
                        if not -(0 / ext_call.return_data[0]) + -(0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18:
                            revert with 0, 'SafeMath: division by zero'
                        if 0 / -(0 / ext_call.return_data[0]) + -(0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18 <= 2 * ext_call.return_data[0]:
                            return 2 * ext_call.return_data[0], 
                                   0 / -(0 / ext_call.return_data[0]) + -(0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18
                    else:
                        if (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / 2 * ext_call.return_data[0] != (0 / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]):
                            revert with 0, 32, 33, code.data[21823 len 33], mem[645 len 31]
                        if not -(0 / ext_call.return_data[0]) + -(0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18:
                            revert with 0, 'SafeMath: division by zero'
                        if (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / -(0 / ext_call.return_data[0]) + -(0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18 <= 2 * ext_call.return_data[0]:
                            return 2 * ext_call.return_data[0], 
                                   (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / -(0 / ext_call.return_data[0]) + -(0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18
                    if not 2 * ext_call.return_data[0]:
                        if not (0 / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]):
                            revert with 0, 'SafeMath: division by zero'
                        return 0 / (0 / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]), 
                               2 * ext_call.return_data[0]
                    if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / 2 * ext_call.return_data[0] != -(0 / ext_call.return_data[0]) + -(0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18:
                        revert with 0, 32, 33, code.data[21823 len 33], mem[709 len 31]
                    if not (0 / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]):
                        revert with 0, 'SafeMath: division by zero'
                    return (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / (0 / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]), 
                           2 * ext_call.return_data[0]
                if volatilityFactor != volatilityFactor:
                    revert with 0, 32, 33, code.data[21823 len 33], mem[517 len 31]
                if not volatilityFactor:
                    if not ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    if (0 / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) < 0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]:
                        revert with 0, 'SafeMath: addition overflow'
                    if (0 / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) > 10^18:
                        revert with 0, 'SafeMath: subtraction overflow'
                    if (0 / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) > -(0 / ext_call.return_data[0]) + -(0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18:
                        if not 2 * ext_call.return_data[0]:
                            if not (0 / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]):
                                revert with 0, 'SafeMath: division by zero'
                            if 0 / (0 / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) <= 2 * ext_call.return_data[0]:
                                return 0 / (0 / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]), 
                                       2 * ext_call.return_data[0]
                        else:
                            if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / 2 * ext_call.return_data[0] != -(0 / ext_call.return_data[0]) + -(0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18:
                                revert with 0, 32, 33, code.data[21823 len 33], mem[645 len 31]
                            if not (0 / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]):
                                revert with 0, 'SafeMath: division by zero'
                            if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / (0 / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) <= 2 * ext_call.return_data[0]:
                                return (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / (0 / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]), 
                                       2 * ext_call.return_data[0]
                        if not 2 * ext_call.return_data[0]:
                            if not -(0 / ext_call.return_data[0]) + -(0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18:
                                revert with 0, 'SafeMath: division by zero'
                            return 2 * ext_call.return_data[0], 
                                   0 / -(0 / ext_call.return_data[0]) + -(0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18
                        if (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / 2 * ext_call.return_data[0] != (0 / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]):
                            revert with 0, 32, 33, code.data[21823 len 33], mem[709 len 31]
                        if not -(0 / ext_call.return_data[0]) + -(0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18:
                            revert with 0, 'SafeMath: division by zero'
                        return 2 * ext_call.return_data[0], 
                               (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / -(0 / ext_call.return_data[0]) + -(0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18
                    if not 2 * ext_call.return_data[0]:
                        if not -(0 / ext_call.return_data[0]) + -(0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18:
                            revert with 0, 'SafeMath: division by zero'
                        if 0 / -(0 / ext_call.return_data[0]) + -(0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18 <= 2 * ext_call.return_data[0]:
                            return 2 * ext_call.return_data[0], 
                                   0 / -(0 / ext_call.return_data[0]) + -(0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18
                    else:
                        if (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / 2 * ext_call.return_data[0] != (0 / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]):
                            revert with 0, 32, 33, code.data[21823 len 33], mem[645 len 31]
                        if not -(0 / ext_call.return_data[0]) + -(0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18:
                            revert with 0, 'SafeMath: division by zero'
                        if (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / -(0 / ext_call.return_data[0]) + -(0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18 <= 2 * ext_call.return_data[0]:
                            return 2 * ext_call.return_data[0], 
                                   (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / -(0 / ext_call.return_data[0]) + -(0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18
                    if not 2 * ext_call.return_data[0]:
                        if not (0 / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]):
                            revert with 0, 'SafeMath: division by zero'
                        return 0 / (0 / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]), 
                               2 * ext_call.return_data[0]
                    if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / 2 * ext_call.return_data[0] != -(0 / ext_call.return_data[0]) + -(0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18:
                        revert with 0, 32, 33, code.data[21823 len 33], mem[709 len 31]
                    if not (0 / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]):
                        revert with 0, 'SafeMath: division by zero'
                    return (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / (0 / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]), 
                           2 * ext_call.return_data[0]
                if 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / volatilityFactor != 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]:
                    revert with 0, 32, 33, code.data[21823 len 33], mem[517 len 31]
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                if (0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) < 0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]:
                    revert with 0, 'SafeMath: addition overflow'
                if (0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) > 10^18:
                    revert with 0, 'SafeMath: subtraction overflow'
                if (0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) > -(0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + -(0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18:
                    if not 2 * ext_call.return_data[0]:
                        if not (0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]):
                            revert with 0, 'SafeMath: division by zero'
                        if 0 / (0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) <= 2 * ext_call.return_data[0]:
                            return 0 / (0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]), 
                                   2 * ext_call.return_data[0]
                    else:
                        if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / 2 * ext_call.return_data[0] != -(0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + -(0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18:
                            revert with 0, 32, 33, code.data[21823 len 33], mem[645 len 31]
                        if not (0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]):
                            revert with 0, 'SafeMath: division by zero'
                        if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / (0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) <= 2 * ext_call.return_data[0]:
                            return (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / (0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]), 
                                   2 * ext_call.return_data[0]
                    if not 2 * ext_call.return_data[0]:
                        if not -(0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + -(0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18:
                            revert with 0, 'SafeMath: division by zero'
                        return 2 * ext_call.return_data[0], 
                               0 / -(0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + -(0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18
                    if (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / 2 * ext_call.return_data[0] != (0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]):
                        revert with 0, 32, 33, code.data[21823 len 33], mem[709 len 31]
                    if not -(0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + -(0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18:
                        revert with 0, 'SafeMath: division by zero'
                    return 2 * ext_call.return_data[0], 
                           (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / -(0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + -(0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18
                if not 2 * ext_call.return_data[0]:
                    if not -(0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + -(0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18:
                        revert with 0, 'SafeMath: division by zero'
                    if 0 / -(0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + -(0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18 <= 2 * ext_call.return_data[0]:
                        return 2 * ext_call.return_data[0], 
                               0 / -(0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + -(0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18
                else:
                    if (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / 2 * ext_call.return_data[0] != (0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]):
                        revert with 0, 32, 33, code.data[21823 len 33], mem[645 len 31]
                    if not -(0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + -(0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18:
                        revert with 0, 'SafeMath: division by zero'
                    if (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / -(0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + -(0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18 <= 2 * ext_call.return_data[0]:
                        return 2 * ext_call.return_data[0], 
                               (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / -(0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + -(0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18
                if not 2 * ext_call.return_data[0]:
                    if not (0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]):
                        revert with 0, 'SafeMath: division by zero'
                    return 0 / (0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]), 
                           2 * ext_call.return_data[0]
                if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / 2 * ext_call.return_data[0] != -(0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + -(0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18:
                    revert with 0, 32, 33, code.data[21823 len 33], mem[709 len 31]
                if not (0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]):
                    revert with 0, 'SafeMath: division by zero'
                return (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / (0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]), 
                       2 * ext_call.return_data[0]
            s = (ext_call.return_data[0] - block.timestamp / 2) + 1
            t = ext_call.return_data[0] - block.timestamp
            while s < t:
                require s
                s = (ext_call.return_data[0] - block.timestamp / s) + s / 2
                t = s
                continue 
            if not t:
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                if (0 / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) < 0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]:
                    revert with 0, 'SafeMath: addition overflow'
                if (0 / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) > 10^18:
                    revert with 0, 'SafeMath: subtraction overflow'
                if (0 / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) > -(0 / ext_call.return_data[0]) + -(0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18:
                    if not 2 * ext_call.return_data[0]:
                        if not (0 / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]):
                            revert with 0, 'SafeMath: division by zero'
                        if 0 / (0 / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) <= 2 * ext_call.return_data[0]:
                            return 0 / (0 / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]), 
                                   2 * ext_call.return_data[0]
                    else:
                        if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / 2 * ext_call.return_data[0] != -(0 / ext_call.return_data[0]) + -(0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18:
                            revert with 0, 32, 33, code.data[21823 len 33], mem[645 len 31]
                        if not (0 / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]):
                            revert with 0, 'SafeMath: division by zero'
                        if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / (0 / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) <= 2 * ext_call.return_data[0]:
                            return (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / (0 / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]), 
                                   2 * ext_call.return_data[0]
                    if not 2 * ext_call.return_data[0]:
                        if not -(0 / ext_call.return_data[0]) + -(0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18:
                            revert with 0, 'SafeMath: division by zero'
                        return 2 * ext_call.return_data[0], 
                               0 / -(0 / ext_call.return_data[0]) + -(0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18
                    if (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / 2 * ext_call.return_data[0] != (0 / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]):
                        revert with 0, 32, 33, code.data[21823 len 33], mem[709 len 31]
                    if not -(0 / ext_call.return_data[0]) + -(0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18:
                        revert with 0, 'SafeMath: division by zero'
                    return 2 * ext_call.return_data[0], 
                           (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / -(0 / ext_call.return_data[0]) + -(0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18
                if not 2 * ext_call.return_data[0]:
                    if not -(0 / ext_call.return_data[0]) + -(0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18:
                        revert with 0, 'SafeMath: division by zero'
                    if 0 / -(0 / ext_call.return_data[0]) + -(0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18 <= 2 * ext_call.return_data[0]:
                        return 2 * ext_call.return_data[0], 
                               0 / -(0 / ext_call.return_data[0]) + -(0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18
                else:
                    if (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / 2 * ext_call.return_data[0] != (0 / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]):
                        revert with 0, 32, 33, code.data[21823 len 33], mem[645 len 31]
                    if not -(0 / ext_call.return_data[0]) + -(0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18:
                        revert with 0, 'SafeMath: division by zero'
                    if (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / -(0 / ext_call.return_data[0]) + -(0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18 <= 2 * ext_call.return_data[0]:
                        return 2 * ext_call.return_data[0], 
                               (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / -(0 / ext_call.return_data[0]) + -(0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18
                if not 2 * ext_call.return_data[0]:
                    if not (0 / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]):
                        revert with 0, 'SafeMath: division by zero'
                    return 0 / (0 / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]), 
                           2 * ext_call.return_data[0]
                if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / 2 * ext_call.return_data[0] != -(0 / ext_call.return_data[0]) + -(0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18:
                    revert with 0, 32, 33, code.data[21823 len 33], mem[709 len 31]
                if not (0 / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]):
                    revert with 0, 'SafeMath: division by zero'
                return (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / (0 / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]), 
                       2 * ext_call.return_data[0]
            if volatilityFactor * t / t != volatilityFactor:
                revert with 0, 32, 33, code.data[21823 len 33], mem[517 len 31]
            if not volatilityFactor * t:
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                if (0 / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) < 0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]:
                    revert with 0, 'SafeMath: addition overflow'
                if (0 / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) > 10^18:
                    revert with 0, 'SafeMath: subtraction overflow'
                if (0 / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) > -(0 / ext_call.return_data[0]) + -(0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18:
                    if not 2 * ext_call.return_data[0]:
                        if not (0 / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]):
                            revert with 0, 'SafeMath: division by zero'
                        if 0 / (0 / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) <= 2 * ext_call.return_data[0]:
                            return 0 / (0 / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]), 
                                   2 * ext_call.return_data[0]
                    else:
                        if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / 2 * ext_call.return_data[0] != -(0 / ext_call.return_data[0]) + -(0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18:
                            revert with 0, 32, 33, code.data[21823 len 33], mem[645 len 31]
                        if not (0 / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]):
                            revert with 0, 'SafeMath: division by zero'
                        if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / (0 / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) <= 2 * ext_call.return_data[0]:
                            return (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / (0 / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]), 
                                   2 * ext_call.return_data[0]
                    if not 2 * ext_call.return_data[0]:
                        if not -(0 / ext_call.return_data[0]) + -(0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18:
                            revert with 0, 'SafeMath: division by zero'
                        return 2 * ext_call.return_data[0], 
                               0 / -(0 / ext_call.return_data[0]) + -(0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18
                    if (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / 2 * ext_call.return_data[0] != (0 / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]):
                        revert with 0, 32, 33, code.data[21823 len 33], mem[709 len 31]
                    if not -(0 / ext_call.return_data[0]) + -(0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18:
                        revert with 0, 'SafeMath: division by zero'
                    return 2 * ext_call.return_data[0], 
                           (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / -(0 / ext_call.return_data[0]) + -(0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18
                if not 2 * ext_call.return_data[0]:
                    if not -(0 / ext_call.return_data[0]) + -(0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18:
                        revert with 0, 'SafeMath: division by zero'
                    if 0 / -(0 / ext_call.return_data[0]) + -(0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18 <= 2 * ext_call.return_data[0]:
                        return 2 * ext_call.return_data[0], 
                               0 / -(0 / ext_call.return_data[0]) + -(0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18
                else:
                    if (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / 2 * ext_call.return_data[0] != (0 / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]):
                        revert with 0, 32, 33, code.data[21823 len 33], mem[645 len 31]
                    if not -(0 / ext_call.return_data[0]) + -(0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18:
                        revert with 0, 'SafeMath: division by zero'
                    if (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / -(0 / ext_call.return_data[0]) + -(0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18 <= 2 * ext_call.return_data[0]:
                        return 2 * ext_call.return_data[0], 
                               (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / -(0 / ext_call.return_data[0]) + -(0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18
                if not 2 * ext_call.return_data[0]:
                    if not (0 / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]):
                        revert with 0, 'SafeMath: division by zero'
                    return 0 / (0 / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]), 
                           2 * ext_call.return_data[0]
                if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / 2 * ext_call.return_data[0] != -(0 / ext_call.return_data[0]) + -(0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18:
                    revert with 0, 32, 33, code.data[21823 len 33], mem[709 len 31]
                if not (0 / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]):
                    revert with 0, 'SafeMath: division by zero'
                return (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / (0 / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]), 
                       2 * ext_call.return_data[0]
            if 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / volatilityFactor * t != 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]:
                revert with 0, 32, 33, code.data[21823 len 33], mem[517 len 31]
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            if (0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) < 0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]:
                revert with 0, 'SafeMath: addition overflow'
            if (0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) > 10^18:
                revert with 0, 'SafeMath: subtraction overflow'
            if (0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) > -(0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + -(0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18:
                if not 2 * ext_call.return_data[0]:
                    if not (0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]):
                        revert with 0, 'SafeMath: division by zero'
                    if 0 / (0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) <= 2 * ext_call.return_data[0]:
                        return 0 / (0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]), 
                               2 * ext_call.return_data[0]
                else:
                    if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / 2 * ext_call.return_data[0] != -(0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + -(0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18:
                        revert with 0, 32, 33, code.data[21823 len 33], mem[645 len 31]
                    if not (0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]):
                        revert with 0, 'SafeMath: division by zero'
                    if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / (0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) <= 2 * ext_call.return_data[0]:
                        return (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / (0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]), 
                               2 * ext_call.return_data[0]
                if not 2 * ext_call.return_data[0]:
                    if not -(0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + -(0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18:
                        revert with 0, 'SafeMath: division by zero'
                    return 2 * ext_call.return_data[0], 
                           0 / -(0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + -(0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18
                if (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / 2 * ext_call.return_data[0] != (0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]):
                    revert with 0, 32, 33, code.data[21823 len 33], mem[709 len 31]
                if not -(0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + -(0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18:
                    revert with 0, 'SafeMath: division by zero'
                return 2 * ext_call.return_data[0], 
                       (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / -(0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + -(0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18
            if not 2 * ext_call.return_data[0]:
                if not -(0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + -(0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18:
                    revert with 0, 'SafeMath: division by zero'
                if 0 / -(0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + -(0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18 <= 2 * ext_call.return_data[0]:
                    return 2 * ext_call.return_data[0], 
                           0 / -(0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + -(0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18
            else:
                if (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / 2 * ext_call.return_data[0] != (0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]):
                    revert with 0, 32, 33, code.data[21823 len 33], mem[645 len 31]
                if not -(0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + -(0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18:
                    revert with 0, 'SafeMath: division by zero'
                if (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / -(0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + -(0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18 <= 2 * ext_call.return_data[0]:
                    return 2 * ext_call.return_data[0], 
                           (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / -(0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + -(0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18
            if not 2 * ext_call.return_data[0]:
                if not (0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]):
                    revert with 0, 'SafeMath: division by zero'
                return 0 / (0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]), 
                       2 * ext_call.return_data[0]
            if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / 2 * ext_call.return_data[0] != -(0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + -(0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18:
                revert with 0, 32, 33, code.data[21823 len 33], mem[709 len 31]
            if not (0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]):
                revert with 0, 'SafeMath: division by zero'
            return (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (ext_call.return_data[0] * 0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / (0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + (0 / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]), 
                   2 * ext_call.return_data[0]
        if (10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / (0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - ext_call.return_data[0] != 10^18:
            revert with 0, 32, 33, code.data[21823 len 33], mem[453 len 31]
        if not 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]:
            revert with 0, 'SafeMath: division by zero'
        if ext_call.return_data[0] - block.timestamp <= 3:
            if not ext_call.return_data[0] - block.timestamp:
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                if (0 / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) < (10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]:
                    revert with 0, 'SafeMath: addition overflow'
                if (0 / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) > 10^18:
                    revert with 0, 'SafeMath: subtraction overflow'
                if (0 / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) > -(0 / ext_call.return_data[0]) + -((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18:
                    if not 2 * ext_call.return_data[0]:
                        if not (0 / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]):
                            revert with 0, 'SafeMath: division by zero'
                        if 0 / (0 / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) <= 2 * ext_call.return_data[0]:
                            return 0 / (0 / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]), 
                                   2 * ext_call.return_data[0]
                    else:
                        if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / 2 * ext_call.return_data[0] != -(0 / ext_call.return_data[0]) + -((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18:
                            revert with 0, 32, 33, code.data[21823 len 33], mem[645 len 31]
                        if not (0 / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]):
                            revert with 0, 'SafeMath: division by zero'
                        if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / (0 / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) <= 2 * ext_call.return_data[0]:
                            return (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / (0 / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]), 
                                   2 * ext_call.return_data[0]
                    if not 2 * ext_call.return_data[0]:
                        if not -(0 / ext_call.return_data[0]) + -((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18:
                            revert with 0, 'SafeMath: division by zero'
                        return 2 * ext_call.return_data[0], 
                               0 / -(0 / ext_call.return_data[0]) + -((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18
                    if (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / 2 * ext_call.return_data[0] != (0 / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]):
                        revert with 0, 32, 33, code.data[21823 len 33], mem[709 len 31]
                    if not -(0 / ext_call.return_data[0]) + -((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18:
                        revert with 0, 'SafeMath: division by zero'
                    return 2 * ext_call.return_data[0], 
                           (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / -(0 / ext_call.return_data[0]) + -((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18
                if not 2 * ext_call.return_data[0]:
                    if not -(0 / ext_call.return_data[0]) + -((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18:
                        revert with 0, 'SafeMath: division by zero'
                    if 0 / -(0 / ext_call.return_data[0]) + -((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18 <= 2 * ext_call.return_data[0]:
                        return 2 * ext_call.return_data[0], 
                               0 / -(0 / ext_call.return_data[0]) + -((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18
                else:
                    if (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / 2 * ext_call.return_data[0] != (0 / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]):
                        revert with 0, 32, 33, code.data[21823 len 33], mem[645 len 31]
                    if not -(0 / ext_call.return_data[0]) + -((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18:
                        revert with 0, 'SafeMath: division by zero'
                    if (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / -(0 / ext_call.return_data[0]) + -((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18 <= 2 * ext_call.return_data[0]:
                        return 2 * ext_call.return_data[0], 
                               (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / -(0 / ext_call.return_data[0]) + -((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18
                if not 2 * ext_call.return_data[0]:
                    if not (0 / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]):
                        revert with 0, 'SafeMath: division by zero'
                    return 0 / (0 / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]), 
                           2 * ext_call.return_data[0]
                if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / 2 * ext_call.return_data[0] != -(0 / ext_call.return_data[0]) + -((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18:
                    revert with 0, 32, 33, code.data[21823 len 33], mem[709 len 31]
                if not (0 / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]):
                    revert with 0, 'SafeMath: division by zero'
                return (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / (0 / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]), 
                       2 * ext_call.return_data[0]
            if volatilityFactor != volatilityFactor:
                revert with 0, 32, 33, code.data[21823 len 33], mem[517 len 31]
            if not volatilityFactor:
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                if (0 / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) < (10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]:
                    revert with 0, 'SafeMath: addition overflow'
                if (0 / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) > 10^18:
                    revert with 0, 'SafeMath: subtraction overflow'
                if (0 / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) > -(0 / ext_call.return_data[0]) + -((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18:
                    if not 2 * ext_call.return_data[0]:
                        if not (0 / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]):
                            revert with 0, 'SafeMath: division by zero'
                        if 0 / (0 / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) <= 2 * ext_call.return_data[0]:
                            return 0 / (0 / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]), 
                                   2 * ext_call.return_data[0]
                    else:
                        if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / 2 * ext_call.return_data[0] != -(0 / ext_call.return_data[0]) + -((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18:
                            revert with 0, 32, 33, code.data[21823 len 33], mem[645 len 31]
                        if not (0 / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]):
                            revert with 0, 'SafeMath: division by zero'
                        if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / (0 / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) <= 2 * ext_call.return_data[0]:
                            return (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / (0 / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]), 
                                   2 * ext_call.return_data[0]
                    if not 2 * ext_call.return_data[0]:
                        if not -(0 / ext_call.return_data[0]) + -((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18:
                            revert with 0, 'SafeMath: division by zero'
                        return 2 * ext_call.return_data[0], 
                               0 / -(0 / ext_call.return_data[0]) + -((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18
                    if (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / 2 * ext_call.return_data[0] != (0 / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]):
                        revert with 0, 32, 33, code.data[21823 len 33], mem[709 len 31]
                    if not -(0 / ext_call.return_data[0]) + -((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18:
                        revert with 0, 'SafeMath: division by zero'
                    return 2 * ext_call.return_data[0], 
                           (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / -(0 / ext_call.return_data[0]) + -((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18
                if not 2 * ext_call.return_data[0]:
                    if not -(0 / ext_call.return_data[0]) + -((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18:
                        revert with 0, 'SafeMath: division by zero'
                    if 0 / -(0 / ext_call.return_data[0]) + -((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18 <= 2 * ext_call.return_data[0]:
                        return 2 * ext_call.return_data[0], 
                               0 / -(0 / ext_call.return_data[0]) + -((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18
                else:
                    if (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / 2 * ext_call.return_data[0] != (0 / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]):
                        revert with 0, 32, 33, code.data[21823 len 33], mem[645 len 31]
                    if not -(0 / ext_call.return_data[0]) + -((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18:
                        revert with 0, 'SafeMath: division by zero'
                    if (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / -(0 / ext_call.return_data[0]) + -((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18 <= 2 * ext_call.return_data[0]:
                        return 2 * ext_call.return_data[0], 
                               (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / -(0 / ext_call.return_data[0]) + -((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18
                if not 2 * ext_call.return_data[0]:
                    if not (0 / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]):
                        revert with 0, 'SafeMath: division by zero'
                    return 0 / (0 / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]), 
                           2 * ext_call.return_data[0]
                if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / 2 * ext_call.return_data[0] != -(0 / ext_call.return_data[0]) + -((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18:
                    revert with 0, 32, 33, code.data[21823 len 33], mem[709 len 31]
                if not (0 / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]):
                    revert with 0, 'SafeMath: division by zero'
                return (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / (0 / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]), 
                       2 * ext_call.return_data[0]
            if 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / volatilityFactor != 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]:
                revert with 0, 32, 33, code.data[21823 len 33], mem[517 len 31]
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            if (0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) < (10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]:
                revert with 0, 'SafeMath: addition overflow'
            if (0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) > 10^18:
                revert with 0, 'SafeMath: subtraction overflow'
            if (0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) > -(0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + -((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18:
                if not 2 * ext_call.return_data[0]:
                    if not (0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]):
                        revert with 0, 'SafeMath: division by zero'
                    if 0 / (0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) <= 2 * ext_call.return_data[0]:
                        return 0 / (0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]), 
                               2 * ext_call.return_data[0]
                else:
                    if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) - (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / 2 * ext_call.return_data[0] != -(0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + -((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18:
                        revert with 0, 32, 33, code.data[21823 len 33], mem[645 len 31]
                    if not (0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]):
                        revert with 0, 'SafeMath: division by zero'
                    if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) - (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / (0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) <= 2 * ext_call.return_data[0]:
                        return (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) - (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / (0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]), 
                               2 * ext_call.return_data[0]
                if not 2 * ext_call.return_data[0]:
                    if not -(0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + -((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18:
                        revert with 0, 'SafeMath: division by zero'
                    return 2 * ext_call.return_data[0], 
                           0 / -(0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + -((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18
                if (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / 2 * ext_call.return_data[0] != (0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]):
                    revert with 0, 32, 33, code.data[21823 len 33], mem[709 len 31]
                if not -(0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + -((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18:
                    revert with 0, 'SafeMath: division by zero'
                return 2 * ext_call.return_data[0], 
                       (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / -(0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + -((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18
            if not 2 * ext_call.return_data[0]:
                if not -(0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + -((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18:
                    revert with 0, 'SafeMath: division by zero'
                if 0 / -(0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + -((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18 <= 2 * ext_call.return_data[0]:
                    return 2 * ext_call.return_data[0], 
                           0 / -(0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + -((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18
            else:
                if (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / 2 * ext_call.return_data[0] != (0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]):
                    revert with 0, 32, 33, code.data[21823 len 33], mem[645 len 31]
                if not -(0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + -((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18:
                    revert with 0, 'SafeMath: division by zero'
                if (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / -(0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + -((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18 <= 2 * ext_call.return_data[0]:
                    return 2 * ext_call.return_data[0], 
                           (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / -(0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + -((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18
            if not 2 * ext_call.return_data[0]:
                if not (0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]):
                    revert with 0, 'SafeMath: division by zero'
                return 0 / (0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]), 
                       2 * ext_call.return_data[0]
            if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) - (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / 2 * ext_call.return_data[0] != -(0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + -((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18:
                revert with 0, 32, 33, code.data[21823 len 33], mem[709 len 31]
            if not (0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]):
                revert with 0, 'SafeMath: division by zero'
            return (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) - (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / (0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]), 
                   2 * ext_call.return_data[0]
        s = (ext_call.return_data[0] - block.timestamp / 2) + 1
        t = ext_call.return_data[0] - block.timestamp
        while s < t:
            require s
            s = (ext_call.return_data[0] - block.timestamp / s) + s / 2
            t = s
            continue 
        if not t:
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            if (0 / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) < (10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]:
                revert with 0, 'SafeMath: addition overflow'
            if (0 / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) > 10^18:
                revert with 0, 'SafeMath: subtraction overflow'
            if (0 / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) > -(0 / ext_call.return_data[0]) + -((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18:
                if not 2 * ext_call.return_data[0]:
                    if not (0 / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]):
                        revert with 0, 'SafeMath: division by zero'
                    if 0 / (0 / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) <= 2 * ext_call.return_data[0]:
                        return 0 / (0 / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]), 
                               2 * ext_call.return_data[0]
                else:
                    if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / 2 * ext_call.return_data[0] != -(0 / ext_call.return_data[0]) + -((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18:
                        revert with 0, 32, 33, code.data[21823 len 33], mem[645 len 31]
                    if not (0 / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]):
                        revert with 0, 'SafeMath: division by zero'
                    if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / (0 / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) <= 2 * ext_call.return_data[0]:
                        return (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / (0 / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]), 
                               2 * ext_call.return_data[0]
                if not 2 * ext_call.return_data[0]:
                    if not -(0 / ext_call.return_data[0]) + -((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18:
                        revert with 0, 'SafeMath: division by zero'
                    return 2 * ext_call.return_data[0], 
                           0 / -(0 / ext_call.return_data[0]) + -((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18
                if (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / 2 * ext_call.return_data[0] != (0 / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]):
                    revert with 0, 32, 33, code.data[21823 len 33], mem[709 len 31]
                if not -(0 / ext_call.return_data[0]) + -((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18:
                    revert with 0, 'SafeMath: division by zero'
                return 2 * ext_call.return_data[0], 
                       (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / -(0 / ext_call.return_data[0]) + -((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18
            if not 2 * ext_call.return_data[0]:
                if not -(0 / ext_call.return_data[0]) + -((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18:
                    revert with 0, 'SafeMath: division by zero'
                if 0 / -(0 / ext_call.return_data[0]) + -((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18 <= 2 * ext_call.return_data[0]:
                    return 2 * ext_call.return_data[0], 
                           0 / -(0 / ext_call.return_data[0]) + -((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18
            else:
                if (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / 2 * ext_call.return_data[0] != (0 / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]):
                    revert with 0, 32, 33, code.data[21823 len 33], mem[645 len 31]
                if not -(0 / ext_call.return_data[0]) + -((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18:
                    revert with 0, 'SafeMath: division by zero'
                if (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / -(0 / ext_call.return_data[0]) + -((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18 <= 2 * ext_call.return_data[0]:
                    return 2 * ext_call.return_data[0], 
                           (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / -(0 / ext_call.return_data[0]) + -((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18
            if not 2 * ext_call.return_data[0]:
                if not (0 / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]):
                    revert with 0, 'SafeMath: division by zero'
                return 0 / (0 / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]), 
                       2 * ext_call.return_data[0]
            if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / 2 * ext_call.return_data[0] != -(0 / ext_call.return_data[0]) + -((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18:
                revert with 0, 32, 33, code.data[21823 len 33], mem[709 len 31]
            if not (0 / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]):
                revert with 0, 'SafeMath: division by zero'
            return (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / (0 / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]), 
                   2 * ext_call.return_data[0]
        if volatilityFactor * t / t != volatilityFactor:
            revert with 0, 32, 33, code.data[21823 len 33], mem[517 len 31]
        if not volatilityFactor * t:
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            if (0 / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) < (10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]:
                revert with 0, 'SafeMath: addition overflow'
            if (0 / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) > 10^18:
                revert with 0, 'SafeMath: subtraction overflow'
            if (0 / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) > -(0 / ext_call.return_data[0]) + -((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18:
                if not 2 * ext_call.return_data[0]:
                    if not (0 / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]):
                        revert with 0, 'SafeMath: division by zero'
                    if 0 / (0 / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) <= 2 * ext_call.return_data[0]:
                        return 0 / (0 / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]), 
                               2 * ext_call.return_data[0]
                else:
                    if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / 2 * ext_call.return_data[0] != -(0 / ext_call.return_data[0]) + -((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18:
                        revert with 0, 32, 33, code.data[21823 len 33], mem[645 len 31]
                    if not (0 / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]):
                        revert with 0, 'SafeMath: division by zero'
                    if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / (0 / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) <= 2 * ext_call.return_data[0]:
                        return (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / (0 / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]), 
                               2 * ext_call.return_data[0]
                if not 2 * ext_call.return_data[0]:
                    if not -(0 / ext_call.return_data[0]) + -((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18:
                        revert with 0, 'SafeMath: division by zero'
                    return 2 * ext_call.return_data[0], 
                           0 / -(0 / ext_call.return_data[0]) + -((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18
                if (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / 2 * ext_call.return_data[0] != (0 / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]):
                    revert with 0, 32, 33, code.data[21823 len 33], mem[709 len 31]
                if not -(0 / ext_call.return_data[0]) + -((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18:
                    revert with 0, 'SafeMath: division by zero'
                return 2 * ext_call.return_data[0], 
                       (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / -(0 / ext_call.return_data[0]) + -((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18
            if not 2 * ext_call.return_data[0]:
                if not -(0 / ext_call.return_data[0]) + -((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18:
                    revert with 0, 'SafeMath: division by zero'
                if 0 / -(0 / ext_call.return_data[0]) + -((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18 <= 2 * ext_call.return_data[0]:
                    return 2 * ext_call.return_data[0], 
                           0 / -(0 / ext_call.return_data[0]) + -((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18
            else:
                if (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / 2 * ext_call.return_data[0] != (0 / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]):
                    revert with 0, 32, 33, code.data[21823 len 33], mem[645 len 31]
                if not -(0 / ext_call.return_data[0]) + -((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18:
                    revert with 0, 'SafeMath: division by zero'
                if (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / -(0 / ext_call.return_data[0]) + -((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18 <= 2 * ext_call.return_data[0]:
                    return 2 * ext_call.return_data[0], 
                           (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / -(0 / ext_call.return_data[0]) + -((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18
            if not 2 * ext_call.return_data[0]:
                if not (0 / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]):
                    revert with 0, 'SafeMath: division by zero'
                return 0 / (0 / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]), 
                       2 * ext_call.return_data[0]
            if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / 2 * ext_call.return_data[0] != -(0 / ext_call.return_data[0]) + -((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18:
                revert with 0, 32, 33, code.data[21823 len 33], mem[709 len 31]
            if not (0 / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]):
                revert with 0, 'SafeMath: division by zero'
            return (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / (0 / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]), 
                   2 * ext_call.return_data[0]
        if 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / volatilityFactor * t != 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]:
            revert with 0, 32, 33, code.data[21823 len 33], mem[517 len 31]
        if not ext_call.return_data[0]:
            revert with 0, 'SafeMath: division by zero'
        if (0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) < (10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]:
            revert with 0, 'SafeMath: addition overflow'
        if (0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) > 10^18:
            revert with 0, 'SafeMath: subtraction overflow'
        if (0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) > -(0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + -((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18:
            if not 2 * ext_call.return_data[0]:
                if not (0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]):
                    revert with 0, 'SafeMath: division by zero'
                if 0 / (0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) <= 2 * ext_call.return_data[0]:
                    return 0 / (0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]), 
                           2 * ext_call.return_data[0]
            else:
                if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) - (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / 2 * ext_call.return_data[0] != -(0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + -((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18:
                    revert with 0, 32, 33, code.data[21823 len 33], mem[645 len 31]
                if not (0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]):
                    revert with 0, 'SafeMath: division by zero'
                if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) - (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / (0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) <= 2 * ext_call.return_data[0]:
                    return (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) - (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / (0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]), 
                           2 * ext_call.return_data[0]
            if not 2 * ext_call.return_data[0]:
                if not -(0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + -((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18:
                    revert with 0, 'SafeMath: division by zero'
                return 2 * ext_call.return_data[0], 
                       0 / -(0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + -((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18
            if (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / 2 * ext_call.return_data[0] != (0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]):
                revert with 0, 32, 33, code.data[21823 len 33], mem[709 len 31]
            if not -(0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + -((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18:
                revert with 0, 'SafeMath: division by zero'
            return 2 * ext_call.return_data[0], 
                   (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / -(0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + -((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18
        if not 2 * ext_call.return_data[0]:
            if not -(0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + -((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18:
                revert with 0, 'SafeMath: division by zero'
            if 0 / -(0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + -((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18 <= 2 * ext_call.return_data[0]:
                return 2 * ext_call.return_data[0], 
                       0 / -(0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + -((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18
        else:
            if (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / 2 * ext_call.return_data[0] != (0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]):
                revert with 0, 32, 33, code.data[21823 len 33], mem[645 len 31]
            if not -(0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + -((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18:
                revert with 0, 'SafeMath: division by zero'
            if (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / -(0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + -((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18 <= 2 * ext_call.return_data[0]:
                return 2 * ext_call.return_data[0], 
                       (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / -(0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + -((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18
        if not 2 * ext_call.return_data[0]:
            if not (0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]):
                revert with 0, 'SafeMath: division by zero'
            return 0 / (0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]), 
                   2 * ext_call.return_data[0]
        if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) - (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / 2 * ext_call.return_data[0] != -(0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + -((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18:
            revert with 0, 32, 33, code.data[21823 len 33], mem[709 len 31]
        if not (0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]):
            revert with 0, 'SafeMath: division by zero'
        return (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) - (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (ext_call.return_data[0] * (10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / (0 / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + ((10^18 * 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 0 / 10^uint8(stor153.field_160) / ext_call.return_data[32]), 
               2 * ext_call.return_data[0]
    if 10^18 * 10^ext_call.return_data[31 len 1] * 10^uint8(stor153.field_168) / 10^18 * 10^uint8(stor153.field_168) != 10^ext_call.return_data[31 len 1]:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    32,
                    33,
                    code.data[21823 len 33],
                    ext_call.return_data[101 len 31]
    if not 10^uint8(stor153.field_160):
        revert with 0, 'SafeMath: division by zero'
    if not ext_call.return_data[32]:
        revert with 0, 'SafeMath: division by zero'
    require ext_code.size(arg1)
    staticcall arg1.0x8f620487 with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if block.timestamp > ext_call.return_data[0]:
        revert with 0, 'SafeMath: subtraction overflow'
    require ext_code.size(arg1)
    staticcall arg1.priceRatio() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] <= ext_call.return_data[0]:
        if ext_call.return_data[0] - block.timestamp <= 3:
            if not ext_call.return_data[0] - block.timestamp:
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                if 0 / ext_call.return_data[0] < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if 0 / ext_call.return_data[0] > 10^18:
                    revert with 0, 'SafeMath: subtraction overflow'
                if 0 / ext_call.return_data[0] > -(0 / ext_call.return_data[0]) + 10^18:
                    if not 2 * ext_call.return_data[0]:
                        if not 0 / ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        if 0 / 0 / ext_call.return_data[0] <= 2 * ext_call.return_data[0]:
                            return 0 / 0 / ext_call.return_data[0], 2 * ext_call.return_data[0]
                    else:
                        if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) / 2 * ext_call.return_data[0] != -(0 / ext_call.return_data[0]) + 10^18:
                            revert with 0, 32, 33, code.data[21823 len 33], mem[517 len 31]
                        if not 0 / ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) / 0 / ext_call.return_data[0] <= 2 * ext_call.return_data[0]:
                            return (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) / 0 / ext_call.return_data[0], 
                                   2 * ext_call.return_data[0]
                    if not 2 * ext_call.return_data[0]:
                        if not -(0 / ext_call.return_data[0]) + 10^18:
                            revert with 0, 'SafeMath: division by zero'
                        return 2 * ext_call.return_data[0], 0 / -(0 / ext_call.return_data[0]) + 10^18
                    if (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) / 2 * ext_call.return_data[0] != 0 / ext_call.return_data[0]:
                        revert with 0, 32, 33, code.data[21823 len 33], mem[581 len 31]
                    if not -(0 / ext_call.return_data[0]) + 10^18:
                        revert with 0, 'SafeMath: division by zero'
                    return 2 * ext_call.return_data[0], 
                           (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) / -(0 / ext_call.return_data[0]) + 10^18
                if not 2 * ext_call.return_data[0]:
                    if not -(0 / ext_call.return_data[0]) + 10^18:
                        revert with 0, 'SafeMath: division by zero'
                    if 0 / -(0 / ext_call.return_data[0]) + 10^18 <= 2 * ext_call.return_data[0]:
                        return 2 * ext_call.return_data[0], 0 / -(0 / ext_call.return_data[0]) + 10^18
                else:
                    if (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) / 2 * ext_call.return_data[0] != 0 / ext_call.return_data[0]:
                        revert with 0, 32, 33, code.data[21823 len 33], mem[517 len 31]
                    if not -(0 / ext_call.return_data[0]) + 10^18:
                        revert with 0, 'SafeMath: division by zero'
                    if (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) / -(0 / ext_call.return_data[0]) + 10^18 <= 2 * ext_call.return_data[0]:
                        return 2 * ext_call.return_data[0], 
                               (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) / -(0 / ext_call.return_data[0]) + 10^18
                if not 2 * ext_call.return_data[0]:
                    if not 0 / ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    return 0 / 0 / ext_call.return_data[0], 2 * ext_call.return_data[0]
                if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) / 2 * ext_call.return_data[0] != -(0 / ext_call.return_data[0]) + 10^18:
                    revert with 0, 32, 33, code.data[21823 len 33], mem[581 len 31]
                if not 0 / ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                return (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) / 0 / ext_call.return_data[0], 
                       2 * ext_call.return_data[0]
            if volatilityFactor != volatilityFactor:
                revert with 0, 32, 33, code.data[21823 len 33], mem[389 len 31]
            if not volatilityFactor:
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                if 0 / ext_call.return_data[0] < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if 0 / ext_call.return_data[0] > 10^18:
                    revert with 0, 'SafeMath: subtraction overflow'
                if 0 / ext_call.return_data[0] > -(0 / ext_call.return_data[0]) + 10^18:
                    if not 2 * ext_call.return_data[0]:
                        if not 0 / ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        if 0 / 0 / ext_call.return_data[0] <= 2 * ext_call.return_data[0]:
                            return 0 / 0 / ext_call.return_data[0], 2 * ext_call.return_data[0]
                    else:
                        if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) / 2 * ext_call.return_data[0] != -(0 / ext_call.return_data[0]) + 10^18:
                            revert with 0, 32, 33, code.data[21823 len 33], mem[517 len 31]
                        if not 0 / ext_call.return_data[0]:
                            revert with 0, 'SafeMath: division by zero'
                        if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) / 0 / ext_call.return_data[0] <= 2 * ext_call.return_data[0]:
                            return (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) / 0 / ext_call.return_data[0], 
                                   2 * ext_call.return_data[0]
                    if not 2 * ext_call.return_data[0]:
                        if not -(0 / ext_call.return_data[0]) + 10^18:
                            revert with 0, 'SafeMath: division by zero'
                        return 2 * ext_call.return_data[0], 0 / -(0 / ext_call.return_data[0]) + 10^18
                    if (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) / 2 * ext_call.return_data[0] != 0 / ext_call.return_data[0]:
                        revert with 0, 32, 33, code.data[21823 len 33], mem[581 len 31]
                    if not -(0 / ext_call.return_data[0]) + 10^18:
                        revert with 0, 'SafeMath: division by zero'
                    return 2 * ext_call.return_data[0], 
                           (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) / -(0 / ext_call.return_data[0]) + 10^18
                if not 2 * ext_call.return_data[0]:
                    if not -(0 / ext_call.return_data[0]) + 10^18:
                        revert with 0, 'SafeMath: division by zero'
                    if 0 / -(0 / ext_call.return_data[0]) + 10^18 <= 2 * ext_call.return_data[0]:
                        return 2 * ext_call.return_data[0], 0 / -(0 / ext_call.return_data[0]) + 10^18
                else:
                    if (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) / 2 * ext_call.return_data[0] != 0 / ext_call.return_data[0]:
                        revert with 0, 32, 33, code.data[21823 len 33], mem[517 len 31]
                    if not -(0 / ext_call.return_data[0]) + 10^18:
                        revert with 0, 'SafeMath: division by zero'
                    if (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) / -(0 / ext_call.return_data[0]) + 10^18 <= 2 * ext_call.return_data[0]:
                        return 2 * ext_call.return_data[0], 
                               (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) / -(0 / ext_call.return_data[0]) + 10^18
                if not 2 * ext_call.return_data[0]:
                    if not 0 / ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    return 0 / 0 / ext_call.return_data[0], 2 * ext_call.return_data[0]
                if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) / 2 * ext_call.return_data[0] != -(0 / ext_call.return_data[0]) + 10^18:
                    revert with 0, 32, 33, code.data[21823 len 33], mem[581 len 31]
                if not 0 / ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                return (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) / 0 / ext_call.return_data[0], 
                       2 * ext_call.return_data[0]
            if 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / volatilityFactor != 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]:
                revert with 0, 32, 33, code.data[21823 len 33], mem[389 len 31]
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            if 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0] < 0:
                revert with 0, 'SafeMath: addition overflow'
            if 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0] > 10^18:
                revert with 0, 'SafeMath: subtraction overflow'
            if 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0] > -(10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + 10^18:
                if not 2 * ext_call.return_data[0]:
                    if not 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    if 0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0] <= 2 * ext_call.return_data[0]:
                        return 0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0], 
                               2 * ext_call.return_data[0]
                else:
                    if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) - (ext_call.return_data[0] * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) / 2 * ext_call.return_data[0] != -(10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + 10^18:
                        revert with 0, 32, 33, code.data[21823 len 33], mem[517 len 31]
                    if not 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) - (ext_call.return_data[0] * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0] <= 2 * ext_call.return_data[0]:
                        return (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) - (ext_call.return_data[0] * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0], 
                               2 * ext_call.return_data[0]
                if not 2 * ext_call.return_data[0]:
                    if not -(10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + 10^18:
                        revert with 0, 'SafeMath: division by zero'
                    return 2 * ext_call.return_data[0], 
                           0 / -(10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + 10^18
                if (ext_call.return_data[0] * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + (ext_call.return_data[0] * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) / 2 * ext_call.return_data[0] != 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]:
                    revert with 0, 32, 33, code.data[21823 len 33], mem[581 len 31]
                if not -(10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + 10^18:
                    revert with 0, 'SafeMath: division by zero'
                return 2 * ext_call.return_data[0], 
                       (ext_call.return_data[0] * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + (ext_call.return_data[0] * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) / -(10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + 10^18
            if not 2 * ext_call.return_data[0]:
                if not -(10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + 10^18:
                    revert with 0, 'SafeMath: division by zero'
                if 0 / -(10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + 10^18 <= 2 * ext_call.return_data[0]:
                    return 2 * ext_call.return_data[0], 
                           0 / -(10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + 10^18
            else:
                if (ext_call.return_data[0] * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + (ext_call.return_data[0] * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) / 2 * ext_call.return_data[0] != 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]:
                    revert with 0, 32, 33, code.data[21823 len 33], mem[517 len 31]
                if not -(10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + 10^18:
                    revert with 0, 'SafeMath: division by zero'
                if (ext_call.return_data[0] * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + (ext_call.return_data[0] * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) / -(10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + 10^18 <= 2 * ext_call.return_data[0]:
                    return 2 * ext_call.return_data[0], 
                           (ext_call.return_data[0] * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + (ext_call.return_data[0] * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) / -(10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + 10^18
            if not 2 * ext_call.return_data[0]:
                if not 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                return 0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0], 
                       2 * ext_call.return_data[0]
            if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) - (ext_call.return_data[0] * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) / 2 * ext_call.return_data[0] != -(10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + 10^18:
                revert with 0, 32, 33, code.data[21823 len 33], mem[581 len 31]
            if not 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            return (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) - (ext_call.return_data[0] * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0], 
                   2 * ext_call.return_data[0]
        s = (ext_call.return_data[0] - block.timestamp / 2) + 1
        t = ext_call.return_data[0] - block.timestamp
        while s < t:
            require s
            s = (ext_call.return_data[0] - block.timestamp / s) + s / 2
            t = s
            continue 
        if not t:
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            if 0 / ext_call.return_data[0] < 0:
                revert with 0, 'SafeMath: addition overflow'
            if 0 / ext_call.return_data[0] > 10^18:
                revert with 0, 'SafeMath: subtraction overflow'
            if 0 / ext_call.return_data[0] > -(0 / ext_call.return_data[0]) + 10^18:
                if not 2 * ext_call.return_data[0]:
                    if not 0 / ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    if 0 / 0 / ext_call.return_data[0] <= 2 * ext_call.return_data[0]:
                        return 0 / 0 / ext_call.return_data[0], 2 * ext_call.return_data[0]
                else:
                    if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) / 2 * ext_call.return_data[0] != -(0 / ext_call.return_data[0]) + 10^18:
                        revert with 0, 32, 33, code.data[21823 len 33], mem[517 len 31]
                    if not 0 / ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) / 0 / ext_call.return_data[0] <= 2 * ext_call.return_data[0]:
                        return (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) / 0 / ext_call.return_data[0], 
                               2 * ext_call.return_data[0]
                if not 2 * ext_call.return_data[0]:
                    if not -(0 / ext_call.return_data[0]) + 10^18:
                        revert with 0, 'SafeMath: division by zero'
                    return 2 * ext_call.return_data[0], 0 / -(0 / ext_call.return_data[0]) + 10^18
                if (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) / 2 * ext_call.return_data[0] != 0 / ext_call.return_data[0]:
                    revert with 0, 32, 33, code.data[21823 len 33], mem[581 len 31]
                if not -(0 / ext_call.return_data[0]) + 10^18:
                    revert with 0, 'SafeMath: division by zero'
                return 2 * ext_call.return_data[0], 
                       (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) / -(0 / ext_call.return_data[0]) + 10^18
            if not 2 * ext_call.return_data[0]:
                if not -(0 / ext_call.return_data[0]) + 10^18:
                    revert with 0, 'SafeMath: division by zero'
                if 0 / -(0 / ext_call.return_data[0]) + 10^18 <= 2 * ext_call.return_data[0]:
                    return 2 * ext_call.return_data[0], 0 / -(0 / ext_call.return_data[0]) + 10^18
            else:
                if (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) / 2 * ext_call.return_data[0] != 0 / ext_call.return_data[0]:
                    revert with 0, 32, 33, code.data[21823 len 33], mem[517 len 31]
                if not -(0 / ext_call.return_data[0]) + 10^18:
                    revert with 0, 'SafeMath: division by zero'
                if (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) / -(0 / ext_call.return_data[0]) + 10^18 <= 2 * ext_call.return_data[0]:
                    return 2 * ext_call.return_data[0], 
                           (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) / -(0 / ext_call.return_data[0]) + 10^18
            if not 2 * ext_call.return_data[0]:
                if not 0 / ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                return 0 / 0 / ext_call.return_data[0], 2 * ext_call.return_data[0]
            if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) / 2 * ext_call.return_data[0] != -(0 / ext_call.return_data[0]) + 10^18:
                revert with 0, 32, 33, code.data[21823 len 33], mem[581 len 31]
            if not 0 / ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            return (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) / 0 / ext_call.return_data[0], 
                   2 * ext_call.return_data[0]
        if volatilityFactor * t / t != volatilityFactor:
            revert with 0, 32, 33, code.data[21823 len 33], mem[389 len 31]
        if not volatilityFactor * t:
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            if 0 / ext_call.return_data[0] < 0:
                revert with 0, 'SafeMath: addition overflow'
            if 0 / ext_call.return_data[0] > 10^18:
                revert with 0, 'SafeMath: subtraction overflow'
            if 0 / ext_call.return_data[0] > -(0 / ext_call.return_data[0]) + 10^18:
                if not 2 * ext_call.return_data[0]:
                    if not 0 / ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    if 0 / 0 / ext_call.return_data[0] <= 2 * ext_call.return_data[0]:
                        return 0 / 0 / ext_call.return_data[0], 2 * ext_call.return_data[0]
                else:
                    if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) / 2 * ext_call.return_data[0] != -(0 / ext_call.return_data[0]) + 10^18:
                        revert with 0, 32, 33, code.data[21823 len 33], mem[517 len 31]
                    if not 0 / ext_call.return_data[0]:
                        revert with 0, 'SafeMath: division by zero'
                    if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) / 0 / ext_call.return_data[0] <= 2 * ext_call.return_data[0]:
                        return (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) / 0 / ext_call.return_data[0], 
                               2 * ext_call.return_data[0]
                if not 2 * ext_call.return_data[0]:
                    if not -(0 / ext_call.return_data[0]) + 10^18:
                        revert with 0, 'SafeMath: division by zero'
                    return 2 * ext_call.return_data[0], 0 / -(0 / ext_call.return_data[0]) + 10^18
                if (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) / 2 * ext_call.return_data[0] != 0 / ext_call.return_data[0]:
                    revert with 0, 32, 33, code.data[21823 len 33], mem[581 len 31]
                if not -(0 / ext_call.return_data[0]) + 10^18:
                    revert with 0, 'SafeMath: division by zero'
                return 2 * ext_call.return_data[0], 
                       (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) / -(0 / ext_call.return_data[0]) + 10^18
            if not 2 * ext_call.return_data[0]:
                if not -(0 / ext_call.return_data[0]) + 10^18:
                    revert with 0, 'SafeMath: division by zero'
                if 0 / -(0 / ext_call.return_data[0]) + 10^18 <= 2 * ext_call.return_data[0]:
                    return 2 * ext_call.return_data[0], 0 / -(0 / ext_call.return_data[0]) + 10^18
            else:
                if (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) / 2 * ext_call.return_data[0] != 0 / ext_call.return_data[0]:
                    revert with 0, 32, 33, code.data[21823 len 33], mem[517 len 31]
                if not -(0 / ext_call.return_data[0]) + 10^18:
                    revert with 0, 'SafeMath: division by zero'
                if (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) / -(0 / ext_call.return_data[0]) + 10^18 <= 2 * ext_call.return_data[0]:
                    return 2 * ext_call.return_data[0], 
                           (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) / -(0 / ext_call.return_data[0]) + 10^18
            if not 2 * ext_call.return_data[0]:
                if not 0 / ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                return 0 / 0 / ext_call.return_data[0], 2 * ext_call.return_data[0]
            if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) / 2 * ext_call.return_data[0] != -(0 / ext_call.return_data[0]) + 10^18:
                revert with 0, 32, 33, code.data[21823 len 33], mem[581 len 31]
            if not 0 / ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            return (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) / 0 / ext_call.return_data[0], 
                   2 * ext_call.return_data[0]
        if 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / volatilityFactor * t != 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]:
            revert with 0, 32, 33, code.data[21823 len 33], mem[389 len 31]
        if not ext_call.return_data[0]:
            revert with 0, 'SafeMath: division by zero'
        if 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0] < 0:
            revert with 0, 'SafeMath: addition overflow'
        if 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0] > 10^18:
            revert with 0, 'SafeMath: subtraction overflow'
        if 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0] > -(10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + 10^18:
            if not 2 * ext_call.return_data[0]:
                if not 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                if 0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0] <= 2 * ext_call.return_data[0]:
                    return 0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0], 
                           2 * ext_call.return_data[0]
            else:
                if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) - (ext_call.return_data[0] * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) / 2 * ext_call.return_data[0] != -(10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + 10^18:
                    revert with 0, 32, 33, code.data[21823 len 33], mem[517 len 31]
                if not 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) - (ext_call.return_data[0] * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0] <= 2 * ext_call.return_data[0]:
                    return (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) - (ext_call.return_data[0] * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0], 
                           2 * ext_call.return_data[0]
            if not 2 * ext_call.return_data[0]:
                if not -(10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + 10^18:
                    revert with 0, 'SafeMath: division by zero'
                return 2 * ext_call.return_data[0], 
                       0 / -(10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + 10^18
            if (ext_call.return_data[0] * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + (ext_call.return_data[0] * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) / 2 * ext_call.return_data[0] != 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]:
                revert with 0, 32, 33, code.data[21823 len 33], mem[581 len 31]
            if not -(10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + 10^18:
                revert with 0, 'SafeMath: division by zero'
            return 2 * ext_call.return_data[0], 
                   (ext_call.return_data[0] * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + (ext_call.return_data[0] * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) / -(10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + 10^18
        if not 2 * ext_call.return_data[0]:
            if not -(10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + 10^18:
                revert with 0, 'SafeMath: division by zero'
            if 0 / -(10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + 10^18 <= 2 * ext_call.return_data[0]:
                return 2 * ext_call.return_data[0], 
                       0 / -(10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + 10^18
        else:
            if (ext_call.return_data[0] * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + (ext_call.return_data[0] * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) / 2 * ext_call.return_data[0] != 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]:
                revert with 0, 32, 33, code.data[21823 len 33], mem[517 len 31]
            if not -(10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + 10^18:
                revert with 0, 'SafeMath: division by zero'
            if (ext_call.return_data[0] * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + (ext_call.return_data[0] * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) / -(10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + 10^18 <= 2 * ext_call.return_data[0]:
                return 2 * ext_call.return_data[0], 
                       (ext_call.return_data[0] * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + (ext_call.return_data[0] * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) / -(10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + 10^18
        if not 2 * ext_call.return_data[0]:
            if not 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            return 0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0], 
                   2 * ext_call.return_data[0]
        if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) - (ext_call.return_data[0] * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) / 2 * ext_call.return_data[0] != -(10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + 10^18:
            revert with 0, 32, 33, code.data[21823 len 33], mem[581 len 31]
        if not 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]:
            revert with 0, 'SafeMath: division by zero'
        return (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) - (ext_call.return_data[0] * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0], 
               2 * ext_call.return_data[0]
    if ext_call.return_data[0] > 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]:
        revert with 0, 'SafeMath: subtraction overflow'
    if not (10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - ext_call.return_data[0]:
        if not 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]:
            revert with 0, 'SafeMath: division by zero'
        if ext_call.return_data[0] - block.timestamp <= 3:
            if not ext_call.return_data[0] - block.timestamp:
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                if (0 / ext_call.return_data[0]) + (0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) < 0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]:
                    revert with 0, 'SafeMath: addition overflow'
                if (0 / ext_call.return_data[0]) + (0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) > 10^18:
                    revert with 0, 'SafeMath: subtraction overflow'
                if (0 / ext_call.return_data[0]) + (0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) > -(0 / ext_call.return_data[0]) + -(0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18:
                    if not 2 * ext_call.return_data[0]:
                        if not (0 / ext_call.return_data[0]) + (0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]):
                            revert with 0, 'SafeMath: division by zero'
                        if 0 / (0 / ext_call.return_data[0]) + (0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) <= 2 * ext_call.return_data[0]:
                            return 0 / (0 / ext_call.return_data[0]) + (0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]), 
                                   2 * ext_call.return_data[0]
                    else:
                        if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (ext_call.return_data[0] * 0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / 2 * ext_call.return_data[0] != -(0 / ext_call.return_data[0]) + -(0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18:
                            revert with 0, 32, 33, code.data[21823 len 33], mem[645 len 31]
                        if not (0 / ext_call.return_data[0]) + (0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]):
                            revert with 0, 'SafeMath: division by zero'
                        if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (ext_call.return_data[0] * 0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / (0 / ext_call.return_data[0]) + (0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) <= 2 * ext_call.return_data[0]:
                            return (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (ext_call.return_data[0] * 0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / (0 / ext_call.return_data[0]) + (0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]), 
                                   2 * ext_call.return_data[0]
                    if not 2 * ext_call.return_data[0]:
                        if not -(0 / ext_call.return_data[0]) + -(0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18:
                            revert with 0, 'SafeMath: division by zero'
                        return 2 * ext_call.return_data[0], 
                               0 / -(0 / ext_call.return_data[0]) + -(0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18
                    if (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + (ext_call.return_data[0] * 0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / 2 * ext_call.return_data[0] != (0 / ext_call.return_data[0]) + (0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]):
                        revert with 0, 32, 33, code.data[21823 len 33], mem[709 len 31]
                    if not -(0 / ext_call.return_data[0]) + -(0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18:
                        revert with 0, 'SafeMath: division by zero'
                    return 2 * ext_call.return_data[0], 
                           (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + (ext_call.return_data[0] * 0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / -(0 / ext_call.return_data[0]) + -(0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18
                if not 2 * ext_call.return_data[0]:
                    if not -(0 / ext_call.return_data[0]) + -(0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18:
                        revert with 0, 'SafeMath: division by zero'
                    if 0 / -(0 / ext_call.return_data[0]) + -(0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18 <= 2 * ext_call.return_data[0]:
                        return 2 * ext_call.return_data[0], 
                               0 / -(0 / ext_call.return_data[0]) + -(0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18
                else:
                    if (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + (ext_call.return_data[0] * 0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / 2 * ext_call.return_data[0] != (0 / ext_call.return_data[0]) + (0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]):
                        revert with 0, 32, 33, code.data[21823 len 33], mem[645 len 31]
                    if not -(0 / ext_call.return_data[0]) + -(0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18:
                        revert with 0, 'SafeMath: division by zero'
                    if (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + (ext_call.return_data[0] * 0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / -(0 / ext_call.return_data[0]) + -(0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18 <= 2 * ext_call.return_data[0]:
                        return 2 * ext_call.return_data[0], 
                               (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + (ext_call.return_data[0] * 0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / -(0 / ext_call.return_data[0]) + -(0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18
                if not 2 * ext_call.return_data[0]:
                    if not (0 / ext_call.return_data[0]) + (0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]):
                        revert with 0, 'SafeMath: division by zero'
                    return 0 / (0 / ext_call.return_data[0]) + (0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]), 
                           2 * ext_call.return_data[0]
                if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (ext_call.return_data[0] * 0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / 2 * ext_call.return_data[0] != -(0 / ext_call.return_data[0]) + -(0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18:
                    revert with 0, 32, 33, code.data[21823 len 33], mem[709 len 31]
                if not (0 / ext_call.return_data[0]) + (0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]):
                    revert with 0, 'SafeMath: division by zero'
                return (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (ext_call.return_data[0] * 0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / (0 / ext_call.return_data[0]) + (0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]), 
                       2 * ext_call.return_data[0]
            if volatilityFactor != volatilityFactor:
                revert with 0, 32, 33, code.data[21823 len 33], mem[517 len 31]
            if not volatilityFactor:
                if not ext_call.return_data[0]:
                    revert with 0, 'SafeMath: division by zero'
                if (0 / ext_call.return_data[0]) + (0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) < 0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]:
                    revert with 0, 'SafeMath: addition overflow'
                if (0 / ext_call.return_data[0]) + (0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) > 10^18:
                    revert with 0, 'SafeMath: subtraction overflow'
                if (0 / ext_call.return_data[0]) + (0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) > -(0 / ext_call.return_data[0]) + -(0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18:
                    if not 2 * ext_call.return_data[0]:
                        if not (0 / ext_call.return_data[0]) + (0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]):
                            revert with 0, 'SafeMath: division by zero'
                        if 0 / (0 / ext_call.return_data[0]) + (0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) <= 2 * ext_call.return_data[0]:
                            return 0 / (0 / ext_call.return_data[0]) + (0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]), 
                                   2 * ext_call.return_data[0]
                    else:
                        if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (ext_call.return_data[0] * 0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / 2 * ext_call.return_data[0] != -(0 / ext_call.return_data[0]) + -(0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18:
                            revert with 0, 32, 33, code.data[21823 len 33], mem[645 len 31]
                        if not (0 / ext_call.return_data[0]) + (0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]):
                            revert with 0, 'SafeMath: division by zero'
                        if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (ext_call.return_data[0] * 0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / (0 / ext_call.return_data[0]) + (0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) <= 2 * ext_call.return_data[0]:
                            return (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (ext_call.return_data[0] * 0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / (0 / ext_call.return_data[0]) + (0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]), 
                                   2 * ext_call.return_data[0]
                    if not 2 * ext_call.return_data[0]:
                        if not -(0 / ext_call.return_data[0]) + -(0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18:
                            revert with 0, 'SafeMath: division by zero'
                        return 2 * ext_call.return_data[0], 
                               0 / -(0 / ext_call.return_data[0]) + -(0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18
                    if (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + (ext_call.return_data[0] * 0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / 2 * ext_call.return_data[0] != (0 / ext_call.return_data[0]) + (0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]):
                        revert with 0, 32, 33, code.data[21823 len 33], mem[709 len 31]
                    if not -(0 / ext_call.return_data[0]) + -(0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18:
                        revert with 0, 'SafeMath: division by zero'
                    return 2 * ext_call.return_data[0], 
                           (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + (ext_call.return_data[0] * 0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / -(0 / ext_call.return_data[0]) + -(0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18
                if not 2 * ext_call.return_data[0]:
                    if not -(0 / ext_call.return_data[0]) + -(0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18:
                        revert with 0, 'SafeMath: division by zero'
                    if 0 / -(0 / ext_call.return_data[0]) + -(0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18 <= 2 * ext_call.return_data[0]:
                        return 2 * ext_call.return_data[0], 
                               0 / -(0 / ext_call.return_data[0]) + -(0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18
                else:
                    if (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + (ext_call.return_data[0] * 0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / 2 * ext_call.return_data[0] != (0 / ext_call.return_data[0]) + (0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]):
                        revert with 0, 32, 33, code.data[21823 len 33], mem[645 len 31]
                    if not -(0 / ext_call.return_data[0]) + -(0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18:
                        revert with 0, 'SafeMath: division by zero'
                    if (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + (ext_call.return_data[0] * 0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / -(0 / ext_call.return_data[0]) + -(0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18 <= 2 * ext_call.return_data[0]:
                        return 2 * ext_call.return_data[0], 
                               (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + (ext_call.return_data[0] * 0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / -(0 / ext_call.return_data[0]) + -(0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18
                if not 2 * ext_call.return_data[0]:
                    if not (0 / ext_call.return_data[0]) + (0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]):
                        revert with 0, 'SafeMath: division by zero'
                    return 0 / (0 / ext_call.return_data[0]) + (0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]), 
                           2 * ext_call.return_data[0]
                if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (ext_call.return_data[0] * 0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / 2 * ext_call.return_data[0] != -(0 / ext_call.return_data[0]) + -(0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18:
                    revert with 0, 32, 33, code.data[21823 len 33], mem[709 len 31]
                if not (0 / ext_call.return_data[0]) + (0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]):
                    revert with 0, 'SafeMath: division by zero'
                return (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (ext_call.return_data[0] * 0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / (0 / ext_call.return_data[0]) + (0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]), 
                       2 * ext_call.return_data[0]
            if 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / volatilityFactor != 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]:
                revert with 0, 32, 33, code.data[21823 len 33], mem[517 len 31]
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            if (10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + (0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) < 0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]:
                revert with 0, 'SafeMath: addition overflow'
            if (10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + (0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) > 10^18:
                revert with 0, 'SafeMath: subtraction overflow'
            if (10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + (0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) > -(10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + -(0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18:
                if not 2 * ext_call.return_data[0]:
                    if not (10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + (0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]):
                        revert with 0, 'SafeMath: division by zero'
                    if 0 / (10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + (0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) <= 2 * ext_call.return_data[0]:
                        return 0 / (10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + (0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]), 
                               2 * ext_call.return_data[0]
                else:
                    if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) - (ext_call.return_data[0] * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (ext_call.return_data[0] * 0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / 2 * ext_call.return_data[0] != -(10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + -(0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18:
                        revert with 0, 32, 33, code.data[21823 len 33], mem[645 len 31]
                    if not (10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + (0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]):
                        revert with 0, 'SafeMath: division by zero'
                    if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) - (ext_call.return_data[0] * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (ext_call.return_data[0] * 0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / (10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + (0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) <= 2 * ext_call.return_data[0]:
                        return (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) - (ext_call.return_data[0] * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (ext_call.return_data[0] * 0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / (10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + (0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]), 
                               2 * ext_call.return_data[0]
                if not 2 * ext_call.return_data[0]:
                    if not -(10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + -(0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18:
                        revert with 0, 'SafeMath: division by zero'
                    return 2 * ext_call.return_data[0], 
                           0 / -(10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + -(0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18
                if (ext_call.return_data[0] * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + (ext_call.return_data[0] * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + (ext_call.return_data[0] * 0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / 2 * ext_call.return_data[0] != (10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + (0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]):
                    revert with 0, 32, 33, code.data[21823 len 33], mem[709 len 31]
                if not -(10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + -(0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18:
                    revert with 0, 'SafeMath: division by zero'
                return 2 * ext_call.return_data[0], 
                       (ext_call.return_data[0] * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + (ext_call.return_data[0] * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + (ext_call.return_data[0] * 0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / -(10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + -(0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18
            if not 2 * ext_call.return_data[0]:
                if not -(10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + -(0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18:
                    revert with 0, 'SafeMath: division by zero'
                if 0 / -(10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + -(0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18 <= 2 * ext_call.return_data[0]:
                    return 2 * ext_call.return_data[0], 
                           0 / -(10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + -(0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18
            else:
                if (ext_call.return_data[0] * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + (ext_call.return_data[0] * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + (ext_call.return_data[0] * 0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / 2 * ext_call.return_data[0] != (10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + (0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]):
                    revert with 0, 32, 33, code.data[21823 len 33], mem[645 len 31]
                if not -(10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + -(0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18:
                    revert with 0, 'SafeMath: division by zero'
                if (ext_call.return_data[0] * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + (ext_call.return_data[0] * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + (ext_call.return_data[0] * 0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / -(10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + -(0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18 <= 2 * ext_call.return_data[0]:
                    return 2 * ext_call.return_data[0], 
                           (ext_call.return_data[0] * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + (ext_call.return_data[0] * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + (ext_call.return_data[0] * 0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / -(10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + -(0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18
            if not 2 * ext_call.return_data[0]:
                if not (10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + (0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]):
                    revert with 0, 'SafeMath: division by zero'
                return 0 / (10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + (0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]), 
                       2 * ext_call.return_data[0]
            if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) - (ext_call.return_data[0] * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (ext_call.return_data[0] * 0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / 2 * ext_call.return_data[0] != -(10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + -(0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18:
                revert with 0, 32, 33, code.data[21823 len 33], mem[709 len 31]
            if not (10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + (0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]):
                revert with 0, 'SafeMath: division by zero'
            return (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) - (ext_call.return_data[0] * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (ext_call.return_data[0] * 0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / (10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + (0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]), 
                   2 * ext_call.return_data[0]
        s = (ext_call.return_data[0] - block.timestamp / 2) + 1
        t = ext_call.return_data[0] - block.timestamp
        while s < t:
            require s
            s = (ext_call.return_data[0] - block.timestamp / s) + s / 2
            t = s
            continue 
        if not t:
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            if (0 / ext_call.return_data[0]) + (0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) < 0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]:
                revert with 0, 'SafeMath: addition overflow'
            if (0 / ext_call.return_data[0]) + (0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) > 10^18:
                revert with 0, 'SafeMath: subtraction overflow'
            if (0 / ext_call.return_data[0]) + (0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) > -(0 / ext_call.return_data[0]) + -(0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18:
                if not 2 * ext_call.return_data[0]:
                    if not (0 / ext_call.return_data[0]) + (0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]):
                        revert with 0, 'SafeMath: division by zero'
                    if 0 / (0 / ext_call.return_data[0]) + (0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) <= 2 * ext_call.return_data[0]:
                        return 0 / (0 / ext_call.return_data[0]) + (0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]), 
                               2 * ext_call.return_data[0]
                else:
                    if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (ext_call.return_data[0] * 0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / 2 * ext_call.return_data[0] != -(0 / ext_call.return_data[0]) + -(0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18:
                        revert with 0, 32, 33, code.data[21823 len 33], mem[645 len 31]
                    if not (0 / ext_call.return_data[0]) + (0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]):
                        revert with 0, 'SafeMath: division by zero'
                    if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (ext_call.return_data[0] * 0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / (0 / ext_call.return_data[0]) + (0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) <= 2 * ext_call.return_data[0]:
                        return (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (ext_call.return_data[0] * 0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / (0 / ext_call.return_data[0]) + (0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]), 
                               2 * ext_call.return_data[0]
                if not 2 * ext_call.return_data[0]:
                    if not -(0 / ext_call.return_data[0]) + -(0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18:
                        revert with 0, 'SafeMath: division by zero'
                    return 2 * ext_call.return_data[0], 
                           0 / -(0 / ext_call.return_data[0]) + -(0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18
                if (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + (ext_call.return_data[0] * 0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / 2 * ext_call.return_data[0] != (0 / ext_call.return_data[0]) + (0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]):
                    revert with 0, 32, 33, code.data[21823 len 33], mem[709 len 31]
                if not -(0 / ext_call.return_data[0]) + -(0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18:
                    revert with 0, 'SafeMath: division by zero'
                return 2 * ext_call.return_data[0], 
                       (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + (ext_call.return_data[0] * 0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / -(0 / ext_call.return_data[0]) + -(0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18
            if not 2 * ext_call.return_data[0]:
                if not -(0 / ext_call.return_data[0]) + -(0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18:
                    revert with 0, 'SafeMath: division by zero'
                if 0 / -(0 / ext_call.return_data[0]) + -(0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18 <= 2 * ext_call.return_data[0]:
                    return 2 * ext_call.return_data[0], 
                           0 / -(0 / ext_call.return_data[0]) + -(0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18
            else:
                if (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + (ext_call.return_data[0] * 0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / 2 * ext_call.return_data[0] != (0 / ext_call.return_data[0]) + (0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]):
                    revert with 0, 32, 33, code.data[21823 len 33], mem[645 len 31]
                if not -(0 / ext_call.return_data[0]) + -(0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18:
                    revert with 0, 'SafeMath: division by zero'
                if (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + (ext_call.return_data[0] * 0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / -(0 / ext_call.return_data[0]) + -(0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18 <= 2 * ext_call.return_data[0]:
                    return 2 * ext_call.return_data[0], 
                           (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + (ext_call.return_data[0] * 0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / -(0 / ext_call.return_data[0]) + -(0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18
            if not 2 * ext_call.return_data[0]:
                if not (0 / ext_call.return_data[0]) + (0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]):
                    revert with 0, 'SafeMath: division by zero'
                return 0 / (0 / ext_call.return_data[0]) + (0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]), 
                       2 * ext_call.return_data[0]
            if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (ext_call.return_data[0] * 0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / 2 * ext_call.return_data[0] != -(0 / ext_call.return_data[0]) + -(0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18:
                revert with 0, 32, 33, code.data[21823 len 33], mem[709 len 31]
            if not (0 / ext_call.return_data[0]) + (0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]):
                revert with 0, 'SafeMath: division by zero'
            return (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (ext_call.return_data[0] * 0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / (0 / ext_call.return_data[0]) + (0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]), 
                   2 * ext_call.return_data[0]
        if volatilityFactor * t / t != volatilityFactor:
            revert with 0, 32, 33, code.data[21823 len 33], mem[517 len 31]
        if not volatilityFactor * t:
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            if (0 / ext_call.return_data[0]) + (0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) < 0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]:
                revert with 0, 'SafeMath: addition overflow'
            if (0 / ext_call.return_data[0]) + (0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) > 10^18:
                revert with 0, 'SafeMath: subtraction overflow'
            if (0 / ext_call.return_data[0]) + (0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) > -(0 / ext_call.return_data[0]) + -(0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18:
                if not 2 * ext_call.return_data[0]:
                    if not (0 / ext_call.return_data[0]) + (0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]):
                        revert with 0, 'SafeMath: division by zero'
                    if 0 / (0 / ext_call.return_data[0]) + (0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) <= 2 * ext_call.return_data[0]:
                        return 0 / (0 / ext_call.return_data[0]) + (0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]), 
                               2 * ext_call.return_data[0]
                else:
                    if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (ext_call.return_data[0] * 0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / 2 * ext_call.return_data[0] != -(0 / ext_call.return_data[0]) + -(0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18:
                        revert with 0, 32, 33, code.data[21823 len 33], mem[645 len 31]
                    if not (0 / ext_call.return_data[0]) + (0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]):
                        revert with 0, 'SafeMath: division by zero'
                    if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (ext_call.return_data[0] * 0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / (0 / ext_call.return_data[0]) + (0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) <= 2 * ext_call.return_data[0]:
                        return (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (ext_call.return_data[0] * 0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / (0 / ext_call.return_data[0]) + (0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]), 
                               2 * ext_call.return_data[0]
                if not 2 * ext_call.return_data[0]:
                    if not -(0 / ext_call.return_data[0]) + -(0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18:
                        revert with 0, 'SafeMath: division by zero'
                    return 2 * ext_call.return_data[0], 
                           0 / -(0 / ext_call.return_data[0]) + -(0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18
                if (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + (ext_call.return_data[0] * 0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / 2 * ext_call.return_data[0] != (0 / ext_call.return_data[0]) + (0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]):
                    revert with 0, 32, 33, code.data[21823 len 33], mem[709 len 31]
                if not -(0 / ext_call.return_data[0]) + -(0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18:
                    revert with 0, 'SafeMath: division by zero'
                return 2 * ext_call.return_data[0], 
                       (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + (ext_call.return_data[0] * 0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / -(0 / ext_call.return_data[0]) + -(0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18
            if not 2 * ext_call.return_data[0]:
                if not -(0 / ext_call.return_data[0]) + -(0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18:
                    revert with 0, 'SafeMath: division by zero'
                if 0 / -(0 / ext_call.return_data[0]) + -(0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18 <= 2 * ext_call.return_data[0]:
                    return 2 * ext_call.return_data[0], 
                           0 / -(0 / ext_call.return_data[0]) + -(0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18
            else:
                if (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + (ext_call.return_data[0] * 0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / 2 * ext_call.return_data[0] != (0 / ext_call.return_data[0]) + (0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]):
                    revert with 0, 32, 33, code.data[21823 len 33], mem[645 len 31]
                if not -(0 / ext_call.return_data[0]) + -(0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18:
                    revert with 0, 'SafeMath: division by zero'
                if (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + (ext_call.return_data[0] * 0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / -(0 / ext_call.return_data[0]) + -(0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18 <= 2 * ext_call.return_data[0]:
                    return 2 * ext_call.return_data[0], 
                           (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + (ext_call.return_data[0] * 0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / -(0 / ext_call.return_data[0]) + -(0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18
            if not 2 * ext_call.return_data[0]:
                if not (0 / ext_call.return_data[0]) + (0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]):
                    revert with 0, 'SafeMath: division by zero'
                return 0 / (0 / ext_call.return_data[0]) + (0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]), 
                       2 * ext_call.return_data[0]
            if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (ext_call.return_data[0] * 0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / 2 * ext_call.return_data[0] != -(0 / ext_call.return_data[0]) + -(0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18:
                revert with 0, 32, 33, code.data[21823 len 33], mem[709 len 31]
            if not (0 / ext_call.return_data[0]) + (0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]):
                revert with 0, 'SafeMath: division by zero'
            return (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (ext_call.return_data[0] * 0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / (0 / ext_call.return_data[0]) + (0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]), 
                   2 * ext_call.return_data[0]
        if 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / volatilityFactor * t != 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]:
            revert with 0, 32, 33, code.data[21823 len 33], mem[517 len 31]
        if not ext_call.return_data[0]:
            revert with 0, 'SafeMath: division by zero'
        if (10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + (0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) < 0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]:
            revert with 0, 'SafeMath: addition overflow'
        if (10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + (0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) > 10^18:
            revert with 0, 'SafeMath: subtraction overflow'
        if (10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + (0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) > -(10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + -(0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18:
            if not 2 * ext_call.return_data[0]:
                if not (10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + (0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]):
                    revert with 0, 'SafeMath: division by zero'
                if 0 / (10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + (0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) <= 2 * ext_call.return_data[0]:
                    return 0 / (10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + (0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]), 
                           2 * ext_call.return_data[0]
            else:
                if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) - (ext_call.return_data[0] * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (ext_call.return_data[0] * 0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / 2 * ext_call.return_data[0] != -(10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + -(0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18:
                    revert with 0, 32, 33, code.data[21823 len 33], mem[645 len 31]
                if not (10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + (0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]):
                    revert with 0, 'SafeMath: division by zero'
                if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) - (ext_call.return_data[0] * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (ext_call.return_data[0] * 0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / (10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + (0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) <= 2 * ext_call.return_data[0]:
                    return (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) - (ext_call.return_data[0] * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (ext_call.return_data[0] * 0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / (10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + (0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]), 
                           2 * ext_call.return_data[0]
            if not 2 * ext_call.return_data[0]:
                if not -(10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + -(0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18:
                    revert with 0, 'SafeMath: division by zero'
                return 2 * ext_call.return_data[0], 
                       0 / -(10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + -(0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18
            if (ext_call.return_data[0] * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + (ext_call.return_data[0] * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + (ext_call.return_data[0] * 0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / 2 * ext_call.return_data[0] != (10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + (0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]):
                revert with 0, 32, 33, code.data[21823 len 33], mem[709 len 31]
            if not -(10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + -(0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18:
                revert with 0, 'SafeMath: division by zero'
            return 2 * ext_call.return_data[0], 
                   (ext_call.return_data[0] * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + (ext_call.return_data[0] * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + (ext_call.return_data[0] * 0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / -(10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + -(0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18
        if not 2 * ext_call.return_data[0]:
            if not -(10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + -(0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18:
                revert with 0, 'SafeMath: division by zero'
            if 0 / -(10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + -(0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18 <= 2 * ext_call.return_data[0]:
                return 2 * ext_call.return_data[0], 
                       0 / -(10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + -(0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18
        else:
            if (ext_call.return_data[0] * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + (ext_call.return_data[0] * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + (ext_call.return_data[0] * 0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / 2 * ext_call.return_data[0] != (10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + (0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]):
                revert with 0, 32, 33, code.data[21823 len 33], mem[645 len 31]
            if not -(10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + -(0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18:
                revert with 0, 'SafeMath: division by zero'
            if (ext_call.return_data[0] * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + (ext_call.return_data[0] * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + (ext_call.return_data[0] * 0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / -(10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + -(0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18 <= 2 * ext_call.return_data[0]:
                return 2 * ext_call.return_data[0], 
                       (ext_call.return_data[0] * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + (ext_call.return_data[0] * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + (ext_call.return_data[0] * 0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / -(10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + -(0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18
        if not 2 * ext_call.return_data[0]:
            if not (10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + (0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]):
                revert with 0, 'SafeMath: division by zero'
            return 0 / (10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + (0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]), 
                   2 * ext_call.return_data[0]
        if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) - (ext_call.return_data[0] * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (ext_call.return_data[0] * 0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / 2 * ext_call.return_data[0] != -(10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + -(0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18:
            revert with 0, 32, 33, code.data[21823 len 33], mem[709 len 31]
        if not (10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + (0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]):
            revert with 0, 'SafeMath: division by zero'
        return (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) - (ext_call.return_data[0] * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (ext_call.return_data[0] * 0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / (10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + (0 / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]), 
               2 * ext_call.return_data[0]
    if (10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / (10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - ext_call.return_data[0] != 10^18:
        revert with 0, 32, 33, code.data[21823 len 33], mem[453 len 31]
    if not 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]:
        revert with 0, 'SafeMath: division by zero'
    if ext_call.return_data[0] - block.timestamp <= 3:
        if not ext_call.return_data[0] - block.timestamp:
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            if (0 / ext_call.return_data[0]) + ((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) < (10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]:
                revert with 0, 'SafeMath: addition overflow'
            if (0 / ext_call.return_data[0]) + ((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) > 10^18:
                revert with 0, 'SafeMath: subtraction overflow'
            if (0 / ext_call.return_data[0]) + ((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) > -(0 / ext_call.return_data[0]) + -((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18:
                if not 2 * ext_call.return_data[0]:
                    if not (0 / ext_call.return_data[0]) + ((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]):
                        revert with 0, 'SafeMath: division by zero'
                    if 0 / (0 / ext_call.return_data[0]) + ((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) <= 2 * ext_call.return_data[0]:
                        return 0 / (0 / ext_call.return_data[0]) + ((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]), 
                               2 * ext_call.return_data[0]
                else:
                    if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * (10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (ext_call.return_data[0] * (10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / 2 * ext_call.return_data[0] != -(0 / ext_call.return_data[0]) + -((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18:
                        revert with 0, 32, 33, code.data[21823 len 33], mem[645 len 31]
                    if not (0 / ext_call.return_data[0]) + ((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]):
                        revert with 0, 'SafeMath: division by zero'
                    if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * (10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (ext_call.return_data[0] * (10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / (0 / ext_call.return_data[0]) + ((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) <= 2 * ext_call.return_data[0]:
                        return (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * (10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (ext_call.return_data[0] * (10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / (0 / ext_call.return_data[0]) + ((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]), 
                               2 * ext_call.return_data[0]
                if not 2 * ext_call.return_data[0]:
                    if not -(0 / ext_call.return_data[0]) + -((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18:
                        revert with 0, 'SafeMath: division by zero'
                    return 2 * ext_call.return_data[0], 
                           0 / -(0 / ext_call.return_data[0]) + -((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18
                if (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * (10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + (ext_call.return_data[0] * (10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / 2 * ext_call.return_data[0] != (0 / ext_call.return_data[0]) + ((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]):
                    revert with 0, 32, 33, code.data[21823 len 33], mem[709 len 31]
                if not -(0 / ext_call.return_data[0]) + -((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18:
                    revert with 0, 'SafeMath: division by zero'
                return 2 * ext_call.return_data[0], 
                       (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * (10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + (ext_call.return_data[0] * (10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / -(0 / ext_call.return_data[0]) + -((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18
            if not 2 * ext_call.return_data[0]:
                if not -(0 / ext_call.return_data[0]) + -((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18:
                    revert with 0, 'SafeMath: division by zero'
                if 0 / -(0 / ext_call.return_data[0]) + -((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18 <= 2 * ext_call.return_data[0]:
                    return 2 * ext_call.return_data[0], 
                           0 / -(0 / ext_call.return_data[0]) + -((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18
            else:
                if (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * (10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + (ext_call.return_data[0] * (10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / 2 * ext_call.return_data[0] != (0 / ext_call.return_data[0]) + ((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]):
                    revert with 0, 32, 33, code.data[21823 len 33], mem[645 len 31]
                if not -(0 / ext_call.return_data[0]) + -((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18:
                    revert with 0, 'SafeMath: division by zero'
                if (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * (10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + (ext_call.return_data[0] * (10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / -(0 / ext_call.return_data[0]) + -((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18 <= 2 * ext_call.return_data[0]:
                    return 2 * ext_call.return_data[0], 
                           (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * (10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + (ext_call.return_data[0] * (10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / -(0 / ext_call.return_data[0]) + -((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18
            if not 2 * ext_call.return_data[0]:
                if not (0 / ext_call.return_data[0]) + ((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]):
                    revert with 0, 'SafeMath: division by zero'
                return 0 / (0 / ext_call.return_data[0]) + ((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]), 
                       2 * ext_call.return_data[0]
            if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * (10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (ext_call.return_data[0] * (10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / 2 * ext_call.return_data[0] != -(0 / ext_call.return_data[0]) + -((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18:
                revert with 0, 32, 33, code.data[21823 len 33], mem[709 len 31]
            if not (0 / ext_call.return_data[0]) + ((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]):
                revert with 0, 'SafeMath: division by zero'
            return (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * (10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (ext_call.return_data[0] * (10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / (0 / ext_call.return_data[0]) + ((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]), 
                   2 * ext_call.return_data[0]
        if volatilityFactor != volatilityFactor:
            revert with 0, 32, 33, code.data[21823 len 33], mem[517 len 31]
        if not volatilityFactor:
            if not ext_call.return_data[0]:
                revert with 0, 'SafeMath: division by zero'
            if (0 / ext_call.return_data[0]) + ((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) < (10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]:
                revert with 0, 'SafeMath: addition overflow'
            if (0 / ext_call.return_data[0]) + ((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) > 10^18:
                revert with 0, 'SafeMath: subtraction overflow'
            if (0 / ext_call.return_data[0]) + ((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) > -(0 / ext_call.return_data[0]) + -((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18:
                if not 2 * ext_call.return_data[0]:
                    if not (0 / ext_call.return_data[0]) + ((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]):
                        revert with 0, 'SafeMath: division by zero'
                    if 0 / (0 / ext_call.return_data[0]) + ((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) <= 2 * ext_call.return_data[0]:
                        return 0 / (0 / ext_call.return_data[0]) + ((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]), 
                               2 * ext_call.return_data[0]
                else:
                    if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * (10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (ext_call.return_data[0] * (10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / 2 * ext_call.return_data[0] != -(0 / ext_call.return_data[0]) + -((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18:
                        revert with 0, 32, 33, code.data[21823 len 33], mem[645 len 31]
                    if not (0 / ext_call.return_data[0]) + ((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]):
                        revert with 0, 'SafeMath: division by zero'
                    if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * (10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (ext_call.return_data[0] * (10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / (0 / ext_call.return_data[0]) + ((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) <= 2 * ext_call.return_data[0]:
                        return (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * (10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (ext_call.return_data[0] * (10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / (0 / ext_call.return_data[0]) + ((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]), 
                               2 * ext_call.return_data[0]
                if not 2 * ext_call.return_data[0]:
                    if not -(0 / ext_call.return_data[0]) + -((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18:
                        revert with 0, 'SafeMath: division by zero'
                    return 2 * ext_call.return_data[0], 
                           0 / -(0 / ext_call.return_data[0]) + -((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18
                if (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * (10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + (ext_call.return_data[0] * (10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / 2 * ext_call.return_data[0] != (0 / ext_call.return_data[0]) + ((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]):
                    revert with 0, 32, 33, code.data[21823 len 33], mem[709 len 31]
                if not -(0 / ext_call.return_data[0]) + -((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18:
                    revert with 0, 'SafeMath: division by zero'
                return 2 * ext_call.return_data[0], 
                       (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * (10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + (ext_call.return_data[0] * (10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / -(0 / ext_call.return_data[0]) + -((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18
            if not 2 * ext_call.return_data[0]:
                if not -(0 / ext_call.return_data[0]) + -((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18:
                    revert with 0, 'SafeMath: division by zero'
                if 0 / -(0 / ext_call.return_data[0]) + -((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18 <= 2 * ext_call.return_data[0]:
                    return 2 * ext_call.return_data[0], 
                           0 / -(0 / ext_call.return_data[0]) + -((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18
            else:
                if (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * (10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + (ext_call.return_data[0] * (10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / 2 * ext_call.return_data[0] != (0 / ext_call.return_data[0]) + ((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]):
                    revert with 0, 32, 33, code.data[21823 len 33], mem[645 len 31]
                if not -(0 / ext_call.return_data[0]) + -((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18:
                    revert with 0, 'SafeMath: division by zero'
                if (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * (10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + (ext_call.return_data[0] * (10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / -(0 / ext_call.return_data[0]) + -((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18 <= 2 * ext_call.return_data[0]:
                    return 2 * ext_call.return_data[0], 
                           (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * (10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + (ext_call.return_data[0] * (10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / -(0 / ext_call.return_data[0]) + -((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18
            if not 2 * ext_call.return_data[0]:
                if not (0 / ext_call.return_data[0]) + ((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]):
                    revert with 0, 'SafeMath: division by zero'
                return 0 / (0 / ext_call.return_data[0]) + ((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]), 
                       2 * ext_call.return_data[0]
            if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * (10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (ext_call.return_data[0] * (10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / 2 * ext_call.return_data[0] != -(0 / ext_call.return_data[0]) + -((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18:
                revert with 0, 32, 33, code.data[21823 len 33], mem[709 len 31]
            if not (0 / ext_call.return_data[0]) + ((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]):
                revert with 0, 'SafeMath: division by zero'
            return (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * (10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (ext_call.return_data[0] * (10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / (0 / ext_call.return_data[0]) + ((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]), 
                   2 * ext_call.return_data[0]
        if 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / volatilityFactor != 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]:
            revert with 0, 32, 33, code.data[21823 len 33], mem[517 len 31]
        if not ext_call.return_data[0]:
            revert with 0, 'SafeMath: division by zero'
        if (10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + ((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) < (10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]:
            revert with 0, 'SafeMath: addition overflow'
        if (10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + ((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) > 10^18:
            revert with 0, 'SafeMath: subtraction overflow'
        if (10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + ((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) > -(10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + -((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18:
            if not 2 * ext_call.return_data[0]:
                if not (10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + ((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]):
                    revert with 0, 'SafeMath: division by zero'
                if 0 / (10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + ((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) <= 2 * ext_call.return_data[0]:
                    return 0 / (10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + ((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]), 
                           2 * ext_call.return_data[0]
            else:
                if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) - (ext_call.return_data[0] * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) - (ext_call.return_data[0] * (10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (ext_call.return_data[0] * (10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / 2 * ext_call.return_data[0] != -(10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + -((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18:
                    revert with 0, 32, 33, code.data[21823 len 33], mem[645 len 31]
                if not (10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + ((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]):
                    revert with 0, 'SafeMath: division by zero'
                if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) - (ext_call.return_data[0] * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) - (ext_call.return_data[0] * (10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (ext_call.return_data[0] * (10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / (10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + ((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) <= 2 * ext_call.return_data[0]:
                    return (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) - (ext_call.return_data[0] * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) - (ext_call.return_data[0] * (10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (ext_call.return_data[0] * (10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / (10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + ((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]), 
                           2 * ext_call.return_data[0]
            if not 2 * ext_call.return_data[0]:
                if not -(10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + -((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18:
                    revert with 0, 'SafeMath: division by zero'
                return 2 * ext_call.return_data[0], 
                       0 / -(10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + -((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18
            if (ext_call.return_data[0] * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + (ext_call.return_data[0] * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + (ext_call.return_data[0] * (10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + (ext_call.return_data[0] * (10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / 2 * ext_call.return_data[0] != (10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + ((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]):
                revert with 0, 32, 33, code.data[21823 len 33], mem[709 len 31]
            if not -(10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + -((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18:
                revert with 0, 'SafeMath: division by zero'
            return 2 * ext_call.return_data[0], 
                   (ext_call.return_data[0] * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + (ext_call.return_data[0] * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + (ext_call.return_data[0] * (10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + (ext_call.return_data[0] * (10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / -(10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + -((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18
        if not 2 * ext_call.return_data[0]:
            if not -(10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + -((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18:
                revert with 0, 'SafeMath: division by zero'
            if 0 / -(10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + -((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18 <= 2 * ext_call.return_data[0]:
                return 2 * ext_call.return_data[0], 
                       0 / -(10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + -((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18
        else:
            if (ext_call.return_data[0] * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + (ext_call.return_data[0] * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + (ext_call.return_data[0] * (10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + (ext_call.return_data[0] * (10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / 2 * ext_call.return_data[0] != (10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + ((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]):
                revert with 0, 32, 33, code.data[21823 len 33], mem[645 len 31]
            if not -(10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + -((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18:
                revert with 0, 'SafeMath: division by zero'
            if (ext_call.return_data[0] * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + (ext_call.return_data[0] * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + (ext_call.return_data[0] * (10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + (ext_call.return_data[0] * (10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / -(10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + -((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18 <= 2 * ext_call.return_data[0]:
                return 2 * ext_call.return_data[0], 
                       (ext_call.return_data[0] * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + (ext_call.return_data[0] * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + (ext_call.return_data[0] * (10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + (ext_call.return_data[0] * (10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / -(10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + -((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18
        if not 2 * ext_call.return_data[0]:
            if not (10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + ((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]):
                revert with 0, 'SafeMath: division by zero'
            return 0 / (10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + ((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]), 
                   2 * ext_call.return_data[0]
        if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) - (ext_call.return_data[0] * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) - (ext_call.return_data[0] * (10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (ext_call.return_data[0] * (10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / 2 * ext_call.return_data[0] != -(10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + -((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18:
            revert with 0, 32, 33, code.data[21823 len 33], mem[709 len 31]
        if not (10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + ((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]):
            revert with 0, 'SafeMath: division by zero'
        return (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) - (ext_call.return_data[0] * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) - (ext_call.return_data[0] * (10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (ext_call.return_data[0] * (10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / (10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor / ext_call.return_data[0]) + ((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]), 
               2 * ext_call.return_data[0]
    s = (ext_call.return_data[0] - block.timestamp / 2) + 1
    t = ext_call.return_data[0] - block.timestamp
    while s < t:
        require s
        s = (ext_call.return_data[0] - block.timestamp / s) + s / 2
        t = s
        continue 
    if not t:
        if not ext_call.return_data[0]:
            revert with 0, 'SafeMath: division by zero'
        if (0 / ext_call.return_data[0]) + ((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) < (10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]:
            revert with 0, 'SafeMath: addition overflow'
        if (0 / ext_call.return_data[0]) + ((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) > 10^18:
            revert with 0, 'SafeMath: subtraction overflow'
        if (0 / ext_call.return_data[0]) + ((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) > -(0 / ext_call.return_data[0]) + -((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18:
            if not 2 * ext_call.return_data[0]:
                if not (0 / ext_call.return_data[0]) + ((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]):
                    revert with 0, 'SafeMath: division by zero'
                if 0 / (0 / ext_call.return_data[0]) + ((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) <= 2 * ext_call.return_data[0]:
                    return 0 / (0 / ext_call.return_data[0]) + ((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]), 
                           2 * ext_call.return_data[0]
            else:
                if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * (10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (ext_call.return_data[0] * (10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / 2 * ext_call.return_data[0] != -(0 / ext_call.return_data[0]) + -((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18:
                    revert with 0, 32, 33, code.data[21823 len 33], mem[645 len 31]
                if not (0 / ext_call.return_data[0]) + ((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]):
                    revert with 0, 'SafeMath: division by zero'
                if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * (10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (ext_call.return_data[0] * (10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / (0 / ext_call.return_data[0]) + ((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) <= 2 * ext_call.return_data[0]:
                    return (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * (10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (ext_call.return_data[0] * (10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / (0 / ext_call.return_data[0]) + ((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]), 
                           2 * ext_call.return_data[0]
            if not 2 * ext_call.return_data[0]:
                if not -(0 / ext_call.return_data[0]) + -((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18:
                    revert with 0, 'SafeMath: division by zero'
                return 2 * ext_call.return_data[0], 
                       0 / -(0 / ext_call.return_data[0]) + -((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18
            if (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * (10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + (ext_call.return_data[0] * (10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / 2 * ext_call.return_data[0] != (0 / ext_call.return_data[0]) + ((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]):
                revert with 0, 32, 33, code.data[21823 len 33], mem[709 len 31]
            if not -(0 / ext_call.return_data[0]) + -((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18:
                revert with 0, 'SafeMath: division by zero'
            return 2 * ext_call.return_data[0], 
                   (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * (10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + (ext_call.return_data[0] * (10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / -(0 / ext_call.return_data[0]) + -((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18
        if not 2 * ext_call.return_data[0]:
            if not -(0 / ext_call.return_data[0]) + -((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18:
                revert with 0, 'SafeMath: division by zero'
            if 0 / -(0 / ext_call.return_data[0]) + -((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18 <= 2 * ext_call.return_data[0]:
                return 2 * ext_call.return_data[0], 
                       0 / -(0 / ext_call.return_data[0]) + -((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18
        else:
            if (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * (10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + (ext_call.return_data[0] * (10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / 2 * ext_call.return_data[0] != (0 / ext_call.return_data[0]) + ((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]):
                revert with 0, 32, 33, code.data[21823 len 33], mem[645 len 31]
            if not -(0 / ext_call.return_data[0]) + -((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18:
                revert with 0, 'SafeMath: division by zero'
            if (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * (10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + (ext_call.return_data[0] * (10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / -(0 / ext_call.return_data[0]) + -((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18 <= 2 * ext_call.return_data[0]:
                return 2 * ext_call.return_data[0], 
                       (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * (10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + (ext_call.return_data[0] * (10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / -(0 / ext_call.return_data[0]) + -((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18
        if not 2 * ext_call.return_data[0]:
            if not (0 / ext_call.return_data[0]) + ((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]):
                revert with 0, 'SafeMath: division by zero'
            return 0 / (0 / ext_call.return_data[0]) + ((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]), 
                   2 * ext_call.return_data[0]
        if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * (10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (ext_call.return_data[0] * (10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / 2 * ext_call.return_data[0] != -(0 / ext_call.return_data[0]) + -((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18:
            revert with 0, 32, 33, code.data[21823 len 33], mem[709 len 31]
        if not (0 / ext_call.return_data[0]) + ((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]):
            revert with 0, 'SafeMath: division by zero'
        return (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * (10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (ext_call.return_data[0] * (10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / (0 / ext_call.return_data[0]) + ((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]), 
               2 * ext_call.return_data[0]
    if volatilityFactor * t / t != volatilityFactor:
        revert with 0, 32, 33, code.data[21823 len 33], mem[517 len 31]
    if not volatilityFactor * t:
        if not ext_call.return_data[0]:
            revert with 0, 'SafeMath: division by zero'
        if (0 / ext_call.return_data[0]) + ((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) < (10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]:
            revert with 0, 'SafeMath: addition overflow'
        if (0 / ext_call.return_data[0]) + ((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) > 10^18:
            revert with 0, 'SafeMath: subtraction overflow'
        if (0 / ext_call.return_data[0]) + ((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) > -(0 / ext_call.return_data[0]) + -((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18:
            if not 2 * ext_call.return_data[0]:
                if not (0 / ext_call.return_data[0]) + ((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]):
                    revert with 0, 'SafeMath: division by zero'
                if 0 / (0 / ext_call.return_data[0]) + ((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) <= 2 * ext_call.return_data[0]:
                    return 0 / (0 / ext_call.return_data[0]) + ((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]), 
                           2 * ext_call.return_data[0]
            else:
                if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * (10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (ext_call.return_data[0] * (10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / 2 * ext_call.return_data[0] != -(0 / ext_call.return_data[0]) + -((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18:
                    revert with 0, 32, 33, code.data[21823 len 33], mem[645 len 31]
                if not (0 / ext_call.return_data[0]) + ((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]):
                    revert with 0, 'SafeMath: division by zero'
                if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * (10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (ext_call.return_data[0] * (10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / (0 / ext_call.return_data[0]) + ((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) <= 2 * ext_call.return_data[0]:
                    return (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * (10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (ext_call.return_data[0] * (10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / (0 / ext_call.return_data[0]) + ((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]), 
                           2 * ext_call.return_data[0]
            if not 2 * ext_call.return_data[0]:
                if not -(0 / ext_call.return_data[0]) + -((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18:
                    revert with 0, 'SafeMath: division by zero'
                return 2 * ext_call.return_data[0], 
                       0 / -(0 / ext_call.return_data[0]) + -((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18
            if (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * (10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + (ext_call.return_data[0] * (10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / 2 * ext_call.return_data[0] != (0 / ext_call.return_data[0]) + ((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]):
                revert with 0, 32, 33, code.data[21823 len 33], mem[709 len 31]
            if not -(0 / ext_call.return_data[0]) + -((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18:
                revert with 0, 'SafeMath: division by zero'
            return 2 * ext_call.return_data[0], 
                   (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * (10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + (ext_call.return_data[0] * (10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / -(0 / ext_call.return_data[0]) + -((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18
        if not 2 * ext_call.return_data[0]:
            if not -(0 / ext_call.return_data[0]) + -((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18:
                revert with 0, 'SafeMath: division by zero'
            if 0 / -(0 / ext_call.return_data[0]) + -((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18 <= 2 * ext_call.return_data[0]:
                return 2 * ext_call.return_data[0], 
                       0 / -(0 / ext_call.return_data[0]) + -((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18
        else:
            if (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * (10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + (ext_call.return_data[0] * (10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / 2 * ext_call.return_data[0] != (0 / ext_call.return_data[0]) + ((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]):
                revert with 0, 32, 33, code.data[21823 len 33], mem[645 len 31]
            if not -(0 / ext_call.return_data[0]) + -((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18:
                revert with 0, 'SafeMath: division by zero'
            if (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * (10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + (ext_call.return_data[0] * (10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / -(0 / ext_call.return_data[0]) + -((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18 <= 2 * ext_call.return_data[0]:
                return 2 * ext_call.return_data[0], 
                       (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * (10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + (ext_call.return_data[0] * (10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / -(0 / ext_call.return_data[0]) + -((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18
        if not 2 * ext_call.return_data[0]:
            if not (0 / ext_call.return_data[0]) + ((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]):
                revert with 0, 'SafeMath: division by zero'
            return 0 / (0 / ext_call.return_data[0]) + ((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]), 
                   2 * ext_call.return_data[0]
        if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * (10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (ext_call.return_data[0] * (10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / 2 * ext_call.return_data[0] != -(0 / ext_call.return_data[0]) + -((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18:
            revert with 0, 32, 33, code.data[21823 len 33], mem[709 len 31]
        if not (0 / ext_call.return_data[0]) + ((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]):
            revert with 0, 'SafeMath: division by zero'
        return (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * 0 / ext_call.return_data[0]) - (ext_call.return_data[0] * (10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (ext_call.return_data[0] * (10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / (0 / ext_call.return_data[0]) + ((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]), 
               2 * ext_call.return_data[0]
    if 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / volatilityFactor * t != 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]:
        revert with 0, 32, 33, code.data[21823 len 33], mem[517 len 31]
    if not ext_call.return_data[0]:
        revert with 0, 'SafeMath: division by zero'
    if (10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + ((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) < (10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]:
        revert with 0, 'SafeMath: addition overflow'
    if (10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + ((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) > 10^18:
        revert with 0, 'SafeMath: subtraction overflow'
    if (10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + ((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) > -(10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + -((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18:
        if not 2 * ext_call.return_data[0]:
            if not (10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + ((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]):
                revert with 0, 'SafeMath: division by zero'
            if 0 / (10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + ((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) <= 2 * ext_call.return_data[0]:
                return 0 / (10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + ((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]), 
                       2 * ext_call.return_data[0]
        else:
            if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) - (ext_call.return_data[0] * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) - (ext_call.return_data[0] * (10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (ext_call.return_data[0] * (10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / 2 * ext_call.return_data[0] != -(10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + -((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18:
                revert with 0, 32, 33, code.data[21823 len 33], mem[645 len 31]
            if not (10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + ((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]):
                revert with 0, 'SafeMath: division by zero'
            if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) - (ext_call.return_data[0] * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) - (ext_call.return_data[0] * (10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (ext_call.return_data[0] * (10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / (10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + ((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) <= 2 * ext_call.return_data[0]:
                return (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) - (ext_call.return_data[0] * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) - (ext_call.return_data[0] * (10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (ext_call.return_data[0] * (10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / (10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + ((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]), 
                       2 * ext_call.return_data[0]
        if not 2 * ext_call.return_data[0]:
            if not -(10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + -((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18:
                revert with 0, 'SafeMath: division by zero'
            return 2 * ext_call.return_data[0], 
                   0 / -(10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + -((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18
        if (ext_call.return_data[0] * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + (ext_call.return_data[0] * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + (ext_call.return_data[0] * (10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + (ext_call.return_data[0] * (10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / 2 * ext_call.return_data[0] != (10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + ((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]):
            revert with 0, 32, 33, code.data[21823 len 33], mem[709 len 31]
        if not -(10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + -((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18:
            revert with 0, 'SafeMath: division by zero'
        return 2 * ext_call.return_data[0], 
               (ext_call.return_data[0] * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + (ext_call.return_data[0] * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + (ext_call.return_data[0] * (10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + (ext_call.return_data[0] * (10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / -(10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + -((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18
    if not 2 * ext_call.return_data[0]:
        if not -(10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + -((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18:
            revert with 0, 'SafeMath: division by zero'
        if 0 / -(10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + -((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18 <= 2 * ext_call.return_data[0]:
            return 2 * ext_call.return_data[0], 
                   0 / -(10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + -((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18
    else:
        if (ext_call.return_data[0] * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + (ext_call.return_data[0] * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + (ext_call.return_data[0] * (10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + (ext_call.return_data[0] * (10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / 2 * ext_call.return_data[0] != (10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + ((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]):
            revert with 0, 32, 33, code.data[21823 len 33], mem[645 len 31]
        if not -(10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + -((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18:
            revert with 0, 'SafeMath: division by zero'
        if (ext_call.return_data[0] * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + (ext_call.return_data[0] * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + (ext_call.return_data[0] * (10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + (ext_call.return_data[0] * (10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / -(10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + -((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18 <= 2 * ext_call.return_data[0]:
            return 2 * ext_call.return_data[0], 
                   (ext_call.return_data[0] * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + (ext_call.return_data[0] * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + (ext_call.return_data[0] * (10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + (ext_call.return_data[0] * (10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / -(10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + -((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18
    if not 2 * ext_call.return_data[0]:
        if not (10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + ((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]):
            revert with 0, 'SafeMath: division by zero'
        return 0 / (10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + ((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]), 
               2 * ext_call.return_data[0]
    if (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) - (ext_call.return_data[0] * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) - (ext_call.return_data[0] * (10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (ext_call.return_data[0] * (10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / 2 * ext_call.return_data[0] != -(10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + -((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) + 10^18:
        revert with 0, 32, 33, code.data[21823 len 33], mem[709 len 31]
    if not (10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + ((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]):
        revert with 0, 'SafeMath: division by zero'
    return (2 * 10^18 * ext_call.return_data[0]) - (ext_call.return_data[0] * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) - (ext_call.return_data[0] * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) - (ext_call.return_data[0] * (10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (ext_call.return_data[0] * (10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) / (10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32] * volatilityFactor * t / ext_call.return_data[0]) + ((10^18 * 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]) - (10^18 * ext_call.return_data[0]) / 10^18 * 10^uint8(ext_call.return_data[0]) * 10^uint8(stor153.field_168) / 10^uint8(stor153.field_160) / ext_call.return_data[32]), 
           2 * ext_call.return_data[0]
}



}
